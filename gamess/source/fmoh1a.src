C  1 Apr 16 - TN,HN,DGF - changes for FMO 5.2
C 22 Oct 14 - HN  - changes for FMO 5.1 
c 21 May 13 - HN  - one-electron contributions to FMO Hessian 
c
C*MODULE FMOH1A    *DECK ESDDV1D
C>
C>     @brief Second derivative for one-electron integral
C>
C>     @details Calculate second order derivative of one-electron integral.
C>
C>     @author Hiroya Nakata
C>
      subroutine ESDDV1D(DA,LEG,LEH,LFD,IAGLOB,IWRK,nactatm)
c
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C
      PARAMETER (MXATM=2000,HALF=0.5D+00,TWO=2.0D+00)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)

      COMMON /FMCOM / X(1)
c     COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
c
      DIMENSION DA(1),IWRK(*),IAGLOB(*)
C
C     MAIN Driver for one-electron Second Derivative in Electrostatic potential
C     ----- SET UP MEMORY -----
C
      L1 =  NUM
      L2 = (NUM*NUM+NUM)/2
C
C     ----- INITIALIZE -FD- TO ZERO -----
C
      NFD=3*nactatm*L2

C     ----- INTEGRAL FORCE (1E-CONTRIBUTION) ----- 
C
C     HELMANN-FEYNMAN TERMS
      call HLFFMODER(x(LEG),x(LEH),DA,x(LFD),IWRK)
C
C     Coupling terms
      call HFDFMODER(x(LEH),DA,IAGLOB,IWRK)
C
C     Nuclear atraction
      call TVDFMODER(X(LEG),X(LEH),DA,x(LFD),IAGLOB,IWRK,nactatm)
C
c     write(6,*) "after finished"
C
      CALL DSCAL(NFD,two,x(LFD),1)
      do i = 1,nactatm*3
         II=0
         DO JJ=1,L1
           II = II+JJ
           x(LFD+II-1+l2*(i-1)) = x(LFD+II-1+l2*(i-1)) * half
         ENDDO
      end do
c     IF (GOPARR) THEN
c         CALL DSCAL(NFD,one/nproc,x(LFD),1)
c     END IF
      return
      end
c
C*MODULE FMOH1A    *DECK TVDFMODER
C>
C>     @brief  Contributions from NUCLEAR ATTRACTION 
C>
C>     @details Calculate NUCLEAR ATTRACTION terms.
C>
C>     @author Hiroya Nakata
C>
      subroutine TVDFMODER(EG,EH,DAB,FD,IAGLOB,IWRK,NC0)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DOUBLE PRECISION FOE(36,9)
C
      LOGICAL GOPARR,DSKWRK,MASWRK,NXT
      LOGICAL FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      LOGICAL fastvesp
C
      DIMENSION EG(3,*),EH(9,*),DAB(*),FD(*)
      DIMENSION DIJ10( 78),DIJ11(169),DIJ20(132),
     1          FFT10( 78),FFT11(169),FFT20(132),
     2          GIJ10( 78),GIJ11(169),GIJ20(132),
     3          XIN(   80),YIN(   80),ZIN(   80) 
      DIMENSION DF(3),DS(9,2),DOE(108)
      DIMENSION IAGLOB(*),IWRK(*)
C
      PARAMETER (MXGTOT=20000, MXSH=5000, MXGSH=30, MXATM=2000)
C
      COMMON /FMCOM / X(1)
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /SHLOED/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL,
     *                MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL,
     *                NIJ,IJD,KLD,IJ,KL
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,
     *                NI,NJ,CX,CY,CZ
      COMMON /INFOED/ GA(MXGSH),CSA(MXGSH),CPA(MXGSH),CDA(MXGSH),
     *                GB(MXGSH),CSB(MXGSH),CPB(MXGSH),CDB(MXGSH),
     *                GC(MXGSH),CSC(MXGSH),CPC(MXGSH),CDC(MXGSH),
     *                GD(MXGSH),CSD(MXGSH),CPD(MXGSH),CDD(MXGSH),
     *                XA,YA,ZA,XB,YB,ZB,RR,XC,YC,ZC,XD,YD,ZD,RRC,
     *                NGA,NGB,NGC,NGD
      COMMON /DIJOED/ NADIJ1( 78),NADIJ2(169),NADIJ3(132)
      COMMON /IJXOED/ NPIJX1( 78),NPIJX2(169),NPIJX3(132)
      COMMON /IJYOED/ NPIJY1( 78),NPIJY2(169),NPIJY3(132)
      COMMON /IJZOED/ NPIJZ1( 78),NPIJZ2(169),NPIJZ3(132)
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,liactfg,lcrfrg,
     *                lzlmfrgv,lYlmfrgv,lndtfrg,lf_mm,lg_mm,lmaxl30
C
C
      DATA PI212 /1.1283791670955D+00/
      DATA ZERO,ONE,TWO /0.0D+00,1.0D+00,2.0D+00/
      DATA RLN10 /2.30258D+00/
      DATA NFDIJ1,NFDIJ2,NFDIJ3,NW / 78,169,132, 80/
c
C     ----- INTEGRAL FORCE (1E-CONTRIBUTION) ----- 
C
c     write(*,*) "MFIRST MSECND in fmo =",MFIRST,MSECND,MCPHF
c
      TOL = RLN10*ITOL
      NRD=0
      IF(MFIRST) NRD = 1
      IF(MSECND) NRD = 2
      L2=(NUM*(NUM+1))/2
      MAXIC = NATFMO
      call setatz(1,MAXIC,fastvesp,lfvesp,needfv)
C
      CALL STVJDD
C
C INITIALIZE PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
C
C     ----- I SHELL -----
C
      DO 1060 II = 1,NSHELL
C
C     ----- GO PARALLEL! -----
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 1060
      END IF
C
      IAT = KATOM(II)
      IZAT= IWRK(IAGLOB(IAT))
      IF(IZAT.EQ.0) GO TO 1060
C
c     IFDX  = 3*L2*(IAT-1)
      IFDX  = 3 * L2 * (IZAT-1)
      IFDY  = IFDX + L2
      IFDZ  = IFDY + L2
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      XA = XI
      YA = YI
      ZA = ZI
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II) + NRD
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      NGA = 0
      DO 10 I = I1,I2
      NGA = NGA + 1
      GA( NGA) = EX(I)
      CSA(NGA) = CS(I)
      CPA(NGA) = CP(I)
      CDA(NGA) = CD(I)
   10 CONTINUE
C
C     ----- J SHELL -----
C
      DO 1040 JJ = 1,NSHELL
C
C           GO PARALLEL!
C
      IF ((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 1040
      END IF
C
      JAT = KATOM(JJ)
      JZAT = IWRK(IAGLOB(JAT))
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      XB = XJ
      YB = YJ
      ZB = ZJ
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      IF(MSECND) LJT = LJT + 1
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NGB = 0
      DO 20 J = J1,J2
      NGB = NGB + 1
      GB( NGB) = EX(J)
      CSB(NGB) = CS(J)
      CPB(NGB) = CP(J)
      CDB(NGB) = CD(J)
   20 CONTINUE
      IF(MFIRST) NROOTS = (LIT+LJT-2  )/2 + 1
      IF(MSECND) NROOTS = (LIT+LJT-2  )/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      CALL STVIDX(0)
C
      CALL VCLR(GIJ10,1,NFDIJ1)
      CALL VCLR(GIJ11,1,NFDIJ2)
      CALL VCLR(GIJ20,1,NFDIJ3)
C
C     ----- I PRIMITIVE
C
      IIG = 0
      DO 840 IG = I1,I2
      IIG = IIG + 1
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      DUM = AI+AI
C
C     ----- J PRIMITIVE
C
      JJG = 0
      DO 820 JG = J1,J2
      JJG = JJG + 1
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 820
C
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      CALL STVDIJ(0,IIG,JJG,NIJ10,NIJ11,NIJ20,
     1            DIJ10,DIJ11,DIJ20,FFT10,FFT11,FFT20,
     2            NFDIJ1,NFDIJ2,NFDIJ3)
C
C     ----- NUCLEAR ATTRACTION -----
C
      DUM = PI212*AA1
      IF(MFIRST) THEN
         DO 50 I = 1,NIJ10
   50    DIJ10(I) = DIJ10(I) * DUM
      END IF
      IF(MSECND) THEN
         DO 51 I = 1,NIJ11
   51    DIJ11(I) = DIJ11(I) * DUM
         DO 52 I = 1,NIJ20
   52    DIJ20(I) = DIJ20(I) * DUM
      END IF
C
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
C
c     DO 800 IC = 1,ICMAX
      DO 800 IC = 1,MAXIC
      if(fastvesp) then
        icind=lfvesp+(ic-1)*6
        FRACV=x(icind)
        FRACESP=x(icind+1)
        ZNUC=x(icind+2)
        CX=x(icind+3)
        CY=x(icind+4)
        CZ=x(icind+5)
      else
      CALL FMOATFRG(IC,X(LINDAT),X(LINDATG),X(LIAGLOB),
     *              X(LIALOC),X(LIABDFG),X(LJABDFG),
     *              X(LINDBD),X(LFMOZAN),X(LFMOC),
     *              NATFMO+NBDFG,X(LUNTXYZ),X(LPOPMAT),
     *              KATOM(II),KATOM(JJ),FRACV,FRACESP,
     *              KFG,ZNUC,CX,CY,CZ)
      endif
      if(fracesp .eq. zero) go to 800
      ZNUC =  ZNUC * FRACESP
C
      XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS .LE. 3) CALL RT123
      IF(NROOTS .EQ. 4) CALL ROOT4
      MM = 0
      DO 740 K = 1,NROOTS
      UU = AA*U(K)
      WW = W(K)*ZNUC
      TT = ONE/(AA+UU)
      T  = SQRT(TT)
      X0 = (AAX+UU*CX)*TT
      Y0 = (AAY+UU*CY)*TT
      Z0 = (AAZ+UU*CZ)*TT
      IN = -4+MM
      DO 720 I = 1,LIT
      IN = IN+4
      NI = I
      DO 720 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL DERXYZ(0)
      XIN(JN) = XINT
      YIN(JN) = YINT
      ZIN(JN) = ZINT*WW
  720 CONTINUE
  740 MM = MM+20
C
      IF(MFIRST) THEN
         DO 60 I = 1,NIJ10
            N  = NADIJ1(I)
            NX = NPIJX1(I)
            NY = NPIJY1(I)
            NZ = NPIJZ1(I)
            DUM = ZERO
            MM  = 0
            DO 61 K = 1,NROOTS
               DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
               MM = MM+20
   61       CONTINUE
            GIJ10(N) = GIJ10(N) + DUM*DIJ10(I)
   60    CONTINUE
      END IF
C
      IF(MSECND) THEN
         IF(JJ .GT. II ) GO TO 790
         DO 62 I =1,NIJ11
            N  = NADIJ2(I)
            NX = NPIJX2(I)
            NY = NPIJY2(I)
            NZ = NPIJZ2(I)
            DUM = ZERO
            MM  = 0
            DO K = 1,NROOTS
               DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
               MM = MM+20
            ENDDO
            GIJ11(N) = GIJ11(N) + DUM*DIJ11(I)
   62    CONTINUE
  790    CONTINUE
         DO 64 I =1,NIJ20
            N  = NADIJ3(I)
            NX = NPIJX3(I)
            NY = NPIJY3(I)
            NZ = NPIJZ3(I)
            DUM = ZERO
            MM  = 0
            DO 65 K = 1,NROOTS
               DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
               MM = MM+20
   65       CONTINUE
            GIJ20(N) = GIJ20(N) + DUM*DIJ20(I)
   64    CONTINUE
      END IF
  800 CONTINUE
C
C     ----- END OF PRIMITIVE LOOPS -----
C
  820 CONTINUE
  840 CONTINUE
C
C     ----- FORM INTEGRALS OVER DERIVATIVES -----
C
      DO 70 I = 1,9
   70 DS(I,2) = ZERO
      CALL TVFSIJ(GIJ10,GIJ20,DF,DS(1,1),DOE,NFDIJ1,NFDIJ3,DAB,FOE)
      IF(.NOT.MCPHF) GO TO 846
      N = -3
      DO 75 J = MINJ,MAXJ
      NJ = LOCJ + J
      DO 75 I = MINI,MAXI
      NI = LOCI + I
      IF(NI .GE. NJ) GO TO 842
      NIJ = NJ * (NJ-1)/2 + NI
      GO TO 844
  842 NIJ = NI * (NI-1)/2 + NJ
  844 N = N + 3
      FAC = ONE
      IF(NI .EQ. NJ) FAC = TWO
      FD(IFDX+NIJ) = FD(IFDX+NIJ) + FAC * DOE(N+1)
      FD(IFDY+NIJ) = FD(IFDY+NIJ) + FAC * DOE(N+2)
      FD(IFDZ+NIJ) = FD(IFDZ+NIJ) + FAC * DOE(N+3)
   75 CONTINUE
  846 CONTINUE
      IAT = KATOM(II)
      JAT = KATOM(JJ)
      FAC = ONE
      IF(IAT .EQ. JAT .AND. II .NE. JJ) FAC = TWO
C
      IF(.NOT.MSECND .OR. JJ .GT. II) GO TO 850
         CALL TVFIFJ(GIJ11,DS(1,2),XIN,YIN,ZIN,NW,NFDIJ2,DAB,FOE)
  850 CONTINUE
C
C     ----- CALCULATE CONTRIBUTION TO GRADIENT AND FORCE CONSTANTS -----
C
C
      IAT = KATOM(II)
      JAT = KATOM(JJ)
      IZAT= IAGLOB(IAT)
      JZAT= IAGLOB(JAT)
      FAC = ONE
      IF(IAT .EQ. JAT .AND. II .NE. JJ) FAC = TWO
C
      iomit=0
      icind=lfvesp+(izat-1)*6
      TEMP =x(icind+1)
      icind=lfvesp+(jzat-1)*6
      TEMP2=x(icind+1)
      if(temp .ne.zero.and.temp .ne.one) iomit = 1
C
      IZAT= IWRK(IAGLOB(IAT))
      JZAT= IWRK(IAGLOB(JAT))
C
C
      IIAT = IZAT*(IZAT-1)/2 + IZAT
      DO 80 I = 1,3
   80 EG(I, IZAT) = EG(I, IZAT) + DF(I) 
      DO 81 I = 1,9
         if(iomit.eq.0) EH(I,IIAT) = EH(I,IIAT) + DS(I,1)
   81 CONTINUE
      if(temp2.ne.zero.and.temp2.ne.one) iomit = 2
      IF(izat .ge. jzat .and. iomit.eq.0.and.jzat.ne.0) then
        IJAT = izat*(izat-1)/2 + jzat 
        EH(1, IJAT) = EH(1, IJAT) + DS(1,2) * FAC 
        EH(2, IJAT) = EH(2, IJAT) + DS(2,2) * FAC 
        EH(3, IJAT) = EH(3, IJAT) + DS(3,2) * FAC 
        EH(4, IJAT) = EH(4, IJAT) + DS(4,2) * FAC 
        EH(5, IJAT) = EH(5, IJAT) + DS(5,2) * FAC 
        EH(6, IJAT) = EH(6, IJAT) + DS(6,2) * FAC 
        EH(7, IJAT) = EH(7, IJAT) + DS(7,2) * FAC 
        EH(8, IJAT) = EH(8, IJAT) + DS(8,2) * FAC 
        EH(9, IJAT) = EH(9, IJAT) + DS(9,2) * FAC 
      ELSE IF(jzat .gt. izat .and. iomit.eq.0) then 
        IJAT = jzat*(jzat-1)/2 + izat 
        EH(1, IJAT) = EH(1, IJAT) + DS(1,2) * FAC   
        EH(2, IJAT) = EH(2, IJAT) + DS(4,2) * FAC 
        EH(3, IJAT) = EH(3, IJAT) + DS(7,2) * FAC 
        EH(4, IJAT) = EH(4, IJAT) + DS(2,2) * FAC 
        EH(5, IJAT) = EH(5, IJAT) + DS(5,2) * FAC 
        EH(6, IJAT) = EH(6, IJAT) + DS(8,2) * FAC 
        EH(7, IJAT) = EH(7, IJAT) + DS(3,2) * FAC 
        EH(8, IJAT) = EH(8, IJAT) + DS(6,2) * FAC 
        EH(9, IJAT) = EH(9, IJAT) + DS(9,2) * FAC  
      END IF
 1040 CONTINUE
 1060 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
      IF (GOPARR) THEN
          IF(NXT) CALL DDI_DLBRESET
c         CALL DDI_GSUMF(1605,FD,3*NATFMO*L2)
      END IF
C
      IF(MSECND) THEN
         DO 1080 IAT = 1,NC0
            IIAT = ( IAT * (IAT-1) ) / 2 + IAT
            FAC  = ( EH(2,IIAT) + EH(4,IIAT) ) / TWO
            EH(2,IIAT) = FAC
            EH(4,IIAT) = FAC
            FAC  = ( EH(3,IIAT) + EH(7,IIAT) ) / TWO
            EH(3,IIAT) = FAC
            EH(7,IIAT) = FAC
            FAC  = ( EH(6,IIAT) + EH(8,IIAT) ) / TWO
            EH(6,IIAT) = FAC
            EH(8,IIAT) = FAC
 1080    CONTINUE
      END IF
C
C     ----- PRINTING SECTION -----
c        NEGH = 3*NATFMO+9*(NATFMO*(NATFMO+1))/2
c        IF(GOPARR) CALL DDI_GSUMF(1624,EG,NEGH)
c        IF(MASWRK) THEN
c           WRITE(*,9058)
c           CALL HSSPRT(NATFMO,EG,EH)
c        END IF
c        IF(GOPARR) CALL DSCAL(NEGH,ONE/NPROC,EG,1)

C
      if(fastvesp) call retfm(needfv)
C
      RETURN
C
c9028 FORMAT(' SHELLS II,JJ = ',2I5)
c9058 FORMAT(/1X,'GRADIENT AND HESSIAN AFTER -TVDSPD- in FMO')
      END
c
C*MODULE FMOH1A    *DECK HFDFMODER
C>
C>     @brief Contributions from Coupling term
C>
C>     @details Calculate Coupling term.
C>
C>     @author Hiroya Nakata
C>
      subroutine HFDFMODER(EH,DAB,IAGLOB,IWRK)

      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION EH(9,*),DAB(*)
      DIMENSION DIJ10(78),GIJ10X(78),GIJ10Y(78),GIJ10Z(78),
     *          XIN(128),YIN(128),ZIN(128),DF(3),W2(4),FOE(36,9)
      DIMENSION IAGLOB(*),IWRK(*)
C
      LOGICAL GOPARR,DSKWRK,MASWRK,NXT
      LOGICAL fastvesp
C
      PARAMETER (MXGTOT=20000, MXSH=5000, MXGSH=30, MXATM=2000)
C
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOED/ GA(MXGSH),CSA(MXGSH),CPA(MXGSH),CDA(MXGSH),
     1                GB(MXGSH),CSB(MXGSH),CPB(MXGSH),CDB(MXGSH),
     2                GC(MXGSH),CSC(MXGSH),CPC(MXGSH),CDC(MXGSH),
     3                GD(MXGSH),CSD(MXGSH),CPD(MXGSH),CDD(MXGSH),
     4                XA,YA,ZA,XB,YB,ZB,RR,XC,YC,ZC,XD,YD,ZD,RRC,
     5                NGA,NGB,NGC,NGD
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /SHLOED/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL,
     1                MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL,
     2                NIJ,IJD,KLD,IJ,KL
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,
     *                NI,NJ,CX,CY,CZ
      COMMON /DIJOED/ NADIJ1( 78),NADIJ2(169),NADIJ3(132)
      COMMON /IJXOED/ NPIJX1( 78),NPIJX2(169),NPIJX3(132)
      COMMON /IJYOED/ NPIJY1( 78),NPIJY2(169),NPIJY3(132)
      COMMON /IJZOED/ NPIJZ1( 78),NPIJZ2(169),NPIJZ3(132)
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,liactfg,lcrfrg,
     *                lzlmfrgv,lYlmfrgv,lndtfrg,lf_mm,lg_mm,lmaxl30
C
      DATA PI212 /1.1283791670955D+00/
      DATA ZERO,ONE,TWO/0.0D+00,1.0D+00,2.0D+00/
      DATA RLN10 /2.30258D+00/
      DATA NFDIJ1 / 78/
c
C     Coupling terms
C
      NRD = 1
      TOL = RLN10*ITOL
      MAXIC = NATFMO
      call setatz(1,MAXIC,fastvesp,lfvesp,needfv)
C
      CALL STVJDD
C
C   INITIALIZATION FOR PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
C
C     ----- I SHELL -----
C
      DO 600 II = 1,NSHELL
C
C           GO PARALLEL!
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 600
      END IF
C
      IAT= KATOM(II)
      IZAT = IWRK(IAGLOB(IAT))
      IF(IZAT.eq.0) go to 600
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      XA = XI
      YA = YI
      ZA = ZI
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II) + NRD
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      NGA = 0
      DO 10 I = I1,I2
      NGA = NGA + 1
      GA( NGA) = EX(I)
      CSA(NGA) = CS(I)
      CPA(NGA) = CP(I)
      CDA(NGA) = CD(I)
   10 CONTINUE
C
C     ----- J SHELL -----
C
      DO 580 JJ = 1,NSHELL
C
C         GO PARALLEL!
C
      IF ((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 580
      END IF
C
      JAT= KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      XB = XJ
      YB = YJ
      ZB = ZJ
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NGB = 0
      DO 20 J = J1,J2
      NGB = NGB + 1
      GB( NGB) = EX(J)
      CSB(NGB) = CS(J)
      CPB(NGB) = CP(J)
      CDB(NGB) = CD(J)
   20 CONTINUE
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      CALL STVIDX(1)
C
C     ----- DO LOOP OF NATOM -----
C
      DO 540 IC = 1, MAXIC
      if(fastvesp) then
        icind=lfvesp+(ic-1)*6
        FRACV=x(icind)
        FRACESP=x(icind+1)
        ZNUC=x(icind+2)
        CX=x(icind+3)
        CY=x(icind+4)
        CZ=x(icind+5)
      else
        CALL FMOATFRG(IC,X(LINDAT),X(LINDATG),X(LIAGLOB),
     *              X(LIALOC),X(LIABDFG),X(LJABDFG),
     *              X(LINDBD),X(LFMOZAN),X(LFMOC),
     *              NATFMO+NBDFG,X(LUNTXYZ),X(LPOPMAT),
     *              KATOM(II),KATOM(JJ),FRACV,FRACESP,
     *              KFG,ZNUC,CX,CY,CZ)
      endif
      if(fracesp .ne. one) go to 540
      ZNUC =  ZNUC * FRACESP
      IZC  =  IWRK(IC)
      IF(IZC.eq.0) GO TO 540
      DO 25 I = 1,NFDIJ1
      GIJ10X(I) = ZERO
      GIJ10Y(I) = ZERO
   25 GIJ10Z(I) = ZERO
C
C     ----- I PRIMITIVE
C
      IIG = 0
      DO 520 IG = I1,I2
      IIG  = IIG + 1
      AI   = EX(IG)
      ARRI = AI*RR
      AXI  = AI*XI
      AYI  = AI*YI
      AZI  = AI*ZI
C
C     ----- J PRIMITIVE
C
      JJG = 0
      DO 500 JG = J1,J2
      JJG = JJG + 1
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 500
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      CALL STVDIJ(1,IIG,JJG,NIJ10,NIJ11,NIJ20,
     1            DIJ10,XIN,XIN,XIN,XIN,XIN,
     2            NFDIJ1,NFDIJ1,NFDIJ1)
C
C     ----- COUPLING TERM OF DERIVATIVES OF SHELL AND HAMILTONIAN ----
C
      DUM = PI212*AA1
      DO 30 I = 1,NIJ10
   30 DIJ10(I) = DIJ10(I) * DUM
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
      XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS .LE. 3) CALL RT123
      IF(NROOTS .EQ. 4) CALL ROOT4
      MM = 0
      DO 420 K = 1,NROOTS
      U2 = AA*U(K)
      WW = W(K)*ZNUC
      W2(K) = TWO*WW*U2
      TT = ONE/(AA+U2)
      T  =  SQRT(TT)
      X0 = (AAX+U2*CX)*TT
      Y0 = (AAY+U2*CY)*TT
      Z0 = (AAZ+U2*CZ)*TT
      IN = -4+MM
      DO 400 I = 1,LIT
      IN = IN+4
      NI = I
      DO 400 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL DERXYZ(0)
      XIN(JN) = XINT
      YIN(JN) = YINT
      ZIN(JN) = ZINT
      CALL DERXYZ(1)
      XIN(JN+64) = XINT
      YIN(JN+64) = YINT
      ZIN(JN+64) = ZINT
  400 CONTINUE
  420 MM = MM+16
      DO  40 I = 1,NIJ10
      N     = NADIJ1(I)
      NX    = NPIJX1(I)
      NY    = NPIJY1(I)
      NZ    = NPIJZ1(I)
      DUM   = DIJ10 (I)
      DUMX  = ZERO
      DUMY  = ZERO
      DUMZ  = ZERO
      MM    = 0
      DO 41 K = 1,NROOTS
      DUMX  = DUMX +XIN(NX+MM+64)*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
      DUMY  = DUMY +XIN(NX+MM   )*YIN(NY+MM+64)*ZIN(NZ+MM   )*W2(K)
      DUMZ  = DUMZ +XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+64)*W2(K)
   41 MM  = MM+16
      GIJ10X(N) = GIJ10X(N) + DUM * DUMX
      GIJ10Y(N) = GIJ10Y(N) + DUM * DUMY
      GIJ10Z(N) = GIJ10Z(N) + DUM * DUMZ
   40 CONTINUE
  500 CONTINUE
  520 CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
C
      IF(IZAT-IZC) 700,710,720
  700 FAC = ONE
      NN  = IZC *(IZC -1)/2 + IZAT
      GO TO 730
  710 FAC = two
      NN  = IZC *(IZC -1)/2 + IZAT
      GO TO 730
  720 FAC = ONE
      NN  = IZAT*(IZAT-1)/2 + IZC
  730 icind=lfvesp+(IAGLOB(IAT)-1)*6
      TEMP =x(icind+1)
      IF(temp.ne.zero.and.temp.ne.one)   go to 539
      IF(IZC .LT. IZAT  ) GO TO 740
      IF(IZC .EQ. IZAT  ) GO TO 539
      
C
C     ----- TRANSFORMATION OF INTEGRALS TO ATOMIC ORBITALS -----
C
      CALL HFDFIJ(GIJ10X,DF,NFDIJ1,DAB,FOE(1,1),FOE(1,2),FOE(1,3))
      EH(1,NN) = EH(1,NN) + FAC * DF(1) 
      EH(2,NN) = EH(2,NN) + FAC * DF(2) 
      EH(3,NN) = EH(3,NN) + FAC * DF(3) 
      CALL HFDFIJ(GIJ10Y,DF,NFDIJ1,DAB,FOE(1,4),FOE(1,5),FOE(1,6))
      EH(4,NN) = EH(4,NN) + FAC * DF(1) 
      EH(5,NN) = EH(5,NN) + FAC * DF(2) 
      EH(6,NN) = EH(6,NN) + FAC * DF(3) 
      CALL HFDFIJ(GIJ10Z,DF,NFDIJ1,DAB,FOE(1,7),FOE(1,8),FOE(1,9))
      EH(7,NN) = EH(7,NN) + FAC * DF(1) 
      EH(8,NN) = EH(8,NN) + FAC * DF(2) 
      EH(9,NN) = EH(9,NN) + FAC * DF(3) 
c     IF(IZAT.ne.IC) GO TO 539
      GO TO 539
  740 CALL HFDFIJ(GIJ10X,DF,NFDIJ1,DAB,FOE(1,1),FOE(1,4),FOE(1,7))
      EH(1,NN) = EH(1,NN) + FAC * DF(1)  
      EH(4,NN) = EH(4,NN) + FAC * DF(2) 
      EH(7,NN) = EH(7,NN) + FAC * DF(3) 
      CALL HFDFIJ(GIJ10Y,DF,NFDIJ1,DAB,FOE(1,2),FOE(1,5),FOE(1,8))
      EH(2,NN) = EH(2,NN) + FAC * DF(1)   
      EH(5,NN) = EH(5,NN) + FAC * DF(2) 
      EH(8,NN) = EH(8,NN) + FAC * DF(3) 
      CALL HFDFIJ(GIJ10Z,DF,NFDIJ1,DAB,FOE(1,3),FOE(1,6),FOE(1,9))
      EH(3,NN) = EH(3,NN) + FAC * DF(1) 
      EH(6,NN) = EH(6,NN) + FAC * DF(2) 
      EH(9,NN) = EH(9,NN) + FAC * DF(3)  
  539 CONTINUE
  540 CONTINUE
C     ----- END OF *SHELL* LOOPS -----
  580 CONTINUE
  600 CONTINUE
C
      IF (GOPARR.AND.NXT) CALL DDI_DLBRESET
C
c        NEGH=3*NATFMO+9*(NATFMO*(NATFMO+1))/2
c        IF(GOPARR) CALL DDI_GSUMF(1623,EG,NEGH)
c        IF(MASWRK) THEN
c           WRITE(IW,9048)
c           CALL HSSPRT(NATFMO,EG,EH)
c        END IF
c        IF(GOPARR) CALL DSCAL(NEGH,ONE/NPROC,EG,1)
C
      if(fastvesp) call retfm(needfv)

      return
c9048 FORMAT(/1X,'GRADIENT AND HESSIAN AFTER -LFDSPD-')
      end 
c
C*MODULE FMOH1A    *DECK HLFFMODER
C>
C>     @brief Contribution from HELLMANN-FEYNMAN FORCE 
C>
C>     @details Calculate  HELLMANN-FEYNMAN FORCE.
C>
C>     @author Hiroya Nakata
C>
      subroutine HLFFMODER(EG,EH,DAB,FD,IWRK)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
c     DOUBLE PRECISION MCSCF

      DIMENSION EG(3,*),EH(9,*),DAB(*),FD(*),IWRK(*)
      DIMENSION IJN(36),DFAC(36),DIJ(36),XIN(108),YIN(108),ZIN(108),
     *          IX(10),IY(10),IZ(10),JX(10),JY(10),JZ(10),
     *          PIJ(36),IJX(36),IJY(36),IJZ(36),W2(5),W4(5)

      LOGICAL IANDJ,NORM,DOUBLE,GOPARR,DSKWRK,MASWRK,NXT,
     *        FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      LOGICAL fastvesp

      PARAMETER (MXGTOT=20000, MXSH=5000, MXATM=2000)

      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,
     *                NI,NJ,CX,CY,CZ
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,liactfg,lcrfrg,
     *                lzlmfrgv,lYlmfrgv,lndtfrg,lf_mm,lg_mm,lmaxl30
C
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA RLN10 /2.30258D+00/
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0/
      DATA IX / 1, 4, 1, 1, 7, 1, 1, 4, 4, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1/
      DATA IY / 1, 1, 4, 1, 1, 7, 1, 4, 1, 4/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1/
      DATA IZ / 1, 1, 1, 4, 1, 1, 7, 1, 4, 4/
      DATA ZERO,ONE,TWO,FOUR /0.0D+00,1.0D+00,2.0D+00,4.0D+00/
c     DATA MCSCF/8HMCSCF   /
c
C     HELLMANN-FEYNMAN TERMS
C
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
      L2 = (NUM*NUM+NUM)/2
C
C   INITIALIZATION FOR PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
C
      MAXIC = NATFMO
      call setatz(1,MAXIC,fastvesp,lfvesp,needfv)
C     ----- I SHELL -----

      DO 600 II = 1,NSHELL
C
C           GO PARALLEL!
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 600
      END IF
C
      IAT= KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     ----- J SHELL -----
C
      DO 580 JJ = 1,II
C
C           GO PARALLEL!
C
      IF((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 580
      END IF
C
      JAT = KATOM(JJ)
      XJ  = C(1,JAT)
      YJ  = C(2,JAT)
      ZJ  = C(3,JAT)
      J1  = KSTART(JJ)
      J2  = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ= KMIN(JJ)
      MAXJ= KMAX(JJ)
      LOCJ= KLOC(JJ)-MINJ
      IF(MFIRST) NROOTS = (LIT+LJT+1-2)/2 + 1
      IF(MSECND) NROOTS = (LIT+LJT+2-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      IANDJ = II .EQ. JJ
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 120 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      IF (IANDJ) MAX = I
      DO 120 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
      IDUM = LOCI+I
      IJN(IJ) = (IDUM*(IDUM-1))/2 + LOCJ+J
      DFAC(IJ) = TWO
      IF (IANDJ .AND. I .EQ. J) DFAC(IJ) = ONE
  120 CONTINUE
C
C     ----- I PRIMITIVE
C
      JGMAX = J2
      DO 520 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
C
C     ----- J PRIMITIVE
C
      IF (IANDJ) JGMAX = IG
      DO 500 JG = J1,JGMAX
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 500
C
      FAC = EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      DOUBLE=IANDJ.AND.IG.NE.JG
      MAX = MAXJ
      NN = 0
      DO 360 I = MINI,MAXI
      GO TO (140,160,220,220,180,220,220,200,220,220),I
  140 DUM1 = CSI*FAC
      GO TO 220
  160 DUM1 = CPI*FAC
      GO TO 220
  180 DUM1 = CDI*FAC
      GO TO 220
  200 IF (NORM) DUM1 = DUM1*SQRT3
  220 IF (IANDJ) MAX = I
      DO 360 J = MINJ,MAX
      GO TO (240,280,340,340,300,340,340,320,340,340),J
  240 DUM2 = DUM1*CSJ
      IF ( .NOT. DOUBLE) GO TO 340
      IF (I .GT. 1) GO TO 260
      DUM2 = DUM2+DUM2
      GO TO 340
  260 DUM2 = DUM2+CSI*CPJ*FAC
      GO TO 340
  280 DUM2 = DUM1*CPJ
      IF (DOUBLE) DUM2 = DUM2+DUM2
      GO TO 340
  300 DUM2 = DUM1*CDJ
      IF (DOUBLE) DUM2 = DUM2+DUM2
      GO TO 340
  320 IF (NORM) DUM2 = DUM2*SQRT3
  340 NN = NN+1
      NDUM = IJN(NN)
      PIJ(NN) = DUM2
      DIJ(NN) = DUM2*DFAC(NN)*DAB(NDUM)
  360 CONTINUE
C
C     ..... HELLMANN-FEYNMAN TERM .....
C
      DUM = PI212*AA1
      DO 380 I = 1,IJ
      PIJ(I) = PIJ(I)*DUM
      DIJ(I) = DIJ(I)*DUM
  380 CONTINUE
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
      DO 480 IC = 1, MAXIC
CZCZ    HELFEY TERMS FOR FMO ESP USED TO BE CALCULATED IN ES1DER 
CZCZ    IN THE NEW VERSION, HOWEVER, HELFEY TERMS ARE CALCULATED HERE
CZCZ    BESIDES, ESD FRACTION IS CALCULATED HERE UTILIZING FMOATFRG 
      if(fastvesp) then
        icind=lfvesp+(ic-1)*6
        FRACV=x(icind)
        FRACESP=x(icind+1)
        ZNUC=x(icind+2)
        CX=x(icind+3)
        CY=x(icind+4)
        CZ=x(icind+5)
      else
      CALL FMOATFRG(IC,X(LINDAT),X(LINDATG),X(LIAGLOB),
     *              X(LIALOC),X(LIABDFG),X(LJABDFG),
     *              X(LINDBD),X(LFMOZAN),X(LFMOC),
     *              NATFMO+NBDFG,X(LUNTXYZ),X(LPOPMAT),
     *              KATOM(II),KATOM(JJ),FRACV,FRACESP,
     *              KFG,ZNUC,CX,CY,CZ)
      endif
      if(fracesp .eq. zero) go to 480
      if(iwrk(IC).eq.0    ) go to 480
      iomit = 0
      if(fracesp .ne. one ) iomit = 1
      ZNUC =  ZNUC * FRACESP
      IZC  = IWRK(IC)
      MX   = 3 * L2 * (IZC-1)
      MY   = MX + L2
      MZ   = MY + L2
      MC   = IZC*(IZC+1)/2
      XX   = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS .LE. 3) CALL RT123
      IF(NROOTS .EQ. 4) CALL ROOT4
      MM = 0
      DO 420 K = 1,NROOTS
         U2 = AA*U(K)
         U4 = U2*U2
         WW = W(K)*ZNUC
         W2(K) = TWO *WW*U2
         W4(K) = FOUR*WW*U4
         TT = ONE/(AA+U2)
         T  =  SQRT(TT)
         X0 = (AAX+U2*CX)*TT
         Y0 = (AAY+U2*CY)*TT
         Z0 = (AAZ+U2*CZ)*TT
         IN = -3+MM
         DO 400 I = 1,LIT
         IN = IN+3
         NI = I
         DO 400 J = 1,LJT
         JN = IN+J
         NJ = J
         CALL DERXYZ(0)
         XIN(JN   ) = XINT
         YIN(JN   ) = YINT
         ZIN(JN   ) = ZINT
         CALL DERXYZ(1)
         XIN(JN+36) = XINT
         YIN(JN+36) = YINT
         ZIN(JN+36) = ZINT
         IF(MSECND) THEN
            CALL DERXYZ(2)
            XIN(JN+72) = XINT
            YIN(JN+72) = YINT
            ZIN(JN+72) = ZINT
         END IF
  400    CONTINUE
         MM = MM+9
  420 CONTINUE
C
      DO 460 I = 1,IJ
      NN    = IJN(I)
      NX    = IJX(I)
      NY    = IJY(I)
      NZ    = IJZ(I)
      DUMX  = ZERO
      DUMY  = ZERO
      DUMZ  = ZERO
      DUMXX = ZERO
      DUMYY = ZERO
      DUMZZ = ZERO
      DUMXY = ZERO
      DUMXZ = ZERO
      DUMYZ = ZERO
      MM    = 0
      DO 440 K = 1,NROOTS
      DUMX  = DUMX +XIN(NX+MM+36)*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
      DUMY  = DUMY +XIN(NX+MM   )*YIN(NY+MM+36)*ZIN(NZ+MM   )*W2(K)
      DUMZ  = DUMZ +XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+36)*W2(K)
      IF(MSECND) THEN
      DUMXX = DUMXX-XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
     1             +XIN(NX+MM+72)*YIN(NY+MM   )*ZIN(NZ+MM   )*W4(K)
      DUMYY = DUMYY-XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
     1             +XIN(NX+MM   )*YIN(NY+MM+72)*ZIN(NZ+MM   )*W4(K)
      DUMZZ = DUMZZ-XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
     1             +XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+72)*W4(K)
      DUMXY = DUMXY+XIN(NX+MM+36)*YIN(NY+MM+36)*ZIN(NZ+MM   )*W4(K)
      DUMXZ = DUMXZ+XIN(NX+MM+36)*YIN(NY+MM   )*ZIN(NZ+MM+36)*W4(K)
      DUMYZ = DUMYZ+XIN(NX+MM   )*YIN(NY+MM+36)*ZIN(NZ+MM+36)*W4(K)
      END IF
      MM  = MM+9
  440 CONTINUE
      DUM = DIJ(I)
      PUM = PIJ(I)
      IF(MFIRST) THEN
         EG(1,IZC) = EG(1,IZC) + DUM * DUMX 
         EG(2,IZC) = EG(2,IZC) + DUM * DUMY 
         EG(3,IZC) = EG(3,IZC) + DUM * DUMZ 
      END IF
      IF(MSECND.and.iomit.eq.0) THEN
         EH(1,MC) = EH(1,MC) + DUM * DUMXX
         EH(2,MC) = EH(2,MC) + DUM * DUMXY
         EH(3,MC) = EH(3,MC) + DUM * DUMXZ
         EH(4,MC) = EH(4,MC) + DUM * DUMXY
         EH(5,MC) = EH(5,MC) + DUM * DUMYY
         EH(6,MC) = EH(6,MC) + DUM * DUMYZ
         EH(7,MC) = EH(7,MC) + DUM * DUMXZ
         EH(8,MC) = EH(8,MC) + DUM * DUMYZ
         EH(9,MC) = EH(9,MC) + DUM * DUMZZ
      END IF
      FD(MX+NN) = FD(MX+NN) + PUM * DUMX 
      FD(MY+NN) = FD(MY+NN) + PUM * DUMY 
      FD(MZ+NN) = FD(MZ+NN) + PUM * DUMZ 
c     write(*,*) "FD(MX+NN) in FMO =",II,JJ,FD(MX+NN)
  460 CONTINUE
  480 CONTINUE
  500 CONTINUE
  520 CONTINUE
  580 CONTINUE
  600 CONTINUE
C
C     ----- END OF *SHELL* LOOPS -----
C
      IF (GOPARR.AND.NXT) CALL DDI_DLBRESET
C
      if(fastvesp) call retfm(needfv)
C     DBG
c        NEGH=3*NATFMO + 9*(NATFMO*NATFMO+NATFMO)/2
c        IF(GOPARR) CALL DDI_GSUMF(1621,EG,NEGH)
c        IF(MASWRK) THEN
c           WRITE(*,9048)
c           CALL HSSPRT(NATFMO,EG,EH)
c        END IF
c        IF(GOPARR) CALL DSCAL(NEGH,ONE/NPROC,EG,1)
c9048 FORMAT(/1X,'GRADIENT AND HESSIAN AFTER -HLFSPD-')
c
      RETURN
      END
C
C*MODULE FMOH1A    *DECK ESPSDXVD
C>
C>     @brief Contribution from V^a * S^b
C>
C>     @details Calculate V^a S^b and V^a U^b terms.
C>
C>     @author Hiroya Nakata
C>
      subroutine ESPSDXVD(l1,l2,DB,wrk,WRK1,
     *     NUMFRG,MAPI,MAPJ,MAPK,iaglob,MAXL1D,IREC00,ORBXCH1,
     *     KODEXCH,JODEXCH,IODEXCH,NQMTFG, scffrg,imode,
     *     DSI,l1i,l2i,DSJ,l1j,l2j,DSIJ,l2ij,FD,NQMT0,FCM,
     *     YALAG,IPTYA,YAWRK,NA0,NB0,
     *     l1k,l2k,DSK,iactfg,IWRK,nactatm,modfd)
      
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000,ONE=1.0D+00,thrush=1.0D+04)
C
      DIMENSION DB(*),wrk(*),wrk1(*)
      DIMENSION numfrg(1)
      DIMENSION MAPI(*),MAPJ(*),MAPK(*),NQMTFG(*),scffrg(*)
      DIMENSION DSI(l2i,3,*),DSJ(l2j,3,*),DSIJ(l2ij,3,*),DSK(l2k,3,*)
      DIMENSION FD(l2ij,*),iaglob(*),FCM(*)
      DIMENSION YALAG(*),IPTYA(*),YAWRK(*)
      DIMENSION iactfg(*),IWRK(*)
      LOGICAL   ORBXCH1,KODEXCH,JODEXCH,IODEXCH,isini
      LOGICAL   GOPARR,DSKWRK,MASWRK,UROHF

   
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
c     COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,liactfg,lcrfrg,
     *                lzlmfrgv,lYlmfrgv,lndtfrg,lf_mm,lg_mm,lmaxl30
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO,nzmtfmo,ifmobas,itmfmo(2)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      DATA   UHF/8HUHF     / 
      DATA  ROHF/8HROHF    / 
CZ
CC    DA  maxm2d
CC    DB  maxm2d
CC    DC  =   DA
CC   WRK  l1 + L2 + l3
CC  WRK1  l1 * 8  + l2 + l3*2
CZ    DENSITY DERIVATIVES OF EXTERNAL ELECTROSTATIC POTENTIALS
C     dummy argument
      if(imode.ne.0) write(iw,*) "imode =",kodexch,maxl1d,
     *  SCFFRG(1),IODEXCH,JODEXCH,ORBXCH1
CZ
      
      L1A  = L1
      IFG  = ICURFG
      JFG  = JCURFG
      KFG  = KCURFG
      ILAY = ICURLAY
      l3   = l1 * l1
      nxyz = nactatm*3
      neh  = nxyz * nxyz
      urohf= SCFFRG(IFG).EQ.UHF.or.SCFFRG(JFG).eq.UHF
     *       .or.SCFFRG(KFG).eq.UHF
      urohf= urohf.or.SCFFRG(IFG).EQ.ROHF.or.SCFFRG(JFG).eq.ROHF
     *       .or.SCFFRG(KFG).eq.ROHF

      CALL VALFM(LOADFM)
      LFCMWRK = LOADFM  + 1
      LC      = LFCMWRK + nactatm * nactatm * 9
      LAST    = LC + l3
      IF(urohf) THEN
         LCB  = LAST
         LAST = LCB+ L3
      END IF 
      NEED    = LAST - LOADFM - 1
      call getfm(need)
      call vclr(x(lfcmwrk),1,neh)
      

      L1I  = IAND(NUMFRG(IFG),65535)
      IF (JFG.NE.0) THEN
        L1J  = IAND(NUMFRG(JFG),65535)
      END IF
      IF (KFG.NE.0) THEN
        L1K  = IAND(NUMFRG(KFG),65535)
      END IF
        
      NCURS  = NCURSH
      NCURSH = 0
C
      CALL MAKEMOL(IFG,0,0,ILAY,0,0,0,0,0,0,0,.FALSE.)
c
      if(modfd.ne.0) then
       if(iactfg(IFG).eq.0) go to 200
       call mapfmohess(nat,iaglob,x(lindat),iactfg,iwrk,ntmp,3)
       call ICOPY(nat,iwrk,1,iaglob,1) 
c      if(maswrk) write(6,*) "check=",nat
c      if(maswrk) write(6,'(5I3)') (iwrk(iii),iii=1,nat)
      end if
c
      call vclr(DSI,1,l2i*nat*3)
      CALL EXTSDER(WRK,DSI,L1I,L2I,.TRUE.,.TRUE.,0)
      IF(GOPARR) CALL DDI_GSUMF(1501,DSI,L2I*3*NAT)
c

      IDMREC0I=IFG+IREC00
      l3i=l1i*l1i
      lenrec = l3i + l1i
      leneig = l2i + l3i 
C    FOR UHF
      IF(scffrg(ifg).eq.uhf) lenrec = l3i * 2 + l1i * 2
      IF(scffrg(ifg).eq.uhf) leneig = l2i + l3i * 2 
C
      CALL RAREADS(IDAFMO,X(LIODFMO),wrk(l2i+1),lenrec,IDMREC0I,0)
      CALL DCOPY(L3i,WRK(L2I+1),1,X(LC),1)
C    FOR UHF | ROHF
      IF(scffrg(ifg).eq.uhf)  CALL DCOPY(L3i,WRK(L2I+1+l3i),1,X(LCB),1)
      IF(scffrg(ifg).eq.rohf) CALL DCOPY(L3i,WRK(L2I+1    ),1,X(LCB),1)
C
      NQI    = IAND(NQMTFG(IFG),65535)
      ncount = 0
      do iii = 1, NQI
        eval = wrk(leneig+iii)
        if(eval .ge. thrush) ncount = ncount + 1
      end do
      NOCC  = na 
      NVIR  = NQI  -   na - ncount
      NROT  = NOCC * NVIR 
C    FOR UHF | ROHF
      IF(scffrg(ifg).eq.uhf.or.scffrg(ifg).eq.rohf) then
        MULI  = IXFTCH(X(LMULFG),IFG)
        NB    = NA - MULI + 1
        NOCCB = nb 
        NVIRB = NQI   -    nb - ncount
        NROTB = NOCCB * NVIRB
      end if

C
C    ++++++++++++++++++++++++++++++++++++++++++++++++
C
C      V^a * ( S^b + U^b)
      do ixyz = 1,nxyz
         LOOP=0
C        EXTRACT V^a
         DO II = 1, L1A
           DO JJ = 1, II
             LOOP = LOOP + 1
             II1=MAPI(II)
             IJ1=MAPI(JJ)
             II2=MAX(II1,IJ1)
             IJ2=MIN(II1,IJ1)
             ISINI=II1.NE.0.AND.IJ1.NE.0
             if(isini) 
     *         WRK1((II2*II2-II2)/2+IJ2) = FD(LOOP,ixyz)
           END DO
         END DO
C        C^T  V^a  C  ---->  V^a  MO basis 
         CALL TFTRI(WRK,WRK1,x(LC),WRK1(l2i+1),NQI,l1i,l1i)
         call cpytsq(WRK,DB,nqi,1) 
         do jat=1,nat
            jzat = iaglob(jat) 
            if(jzat.ne.0) then
             do jj =1,3
                jxyz  = (jat - 1) * 3 + jj
                jzxyz = (jzat- 1) * 3 + jj
                ij    = LFCMWRK+ (ixyz  -1) * nxyz  + jzxyz - 1
                ji    = LFCMWRK+ (jzxyz -1) * nxyz  + ixyz  - 1
                CALL TFTRI(wrk,DSI(1,jj,jat),x(LC),wrk1(l2i+1),
     *                     NQI,l1i,l1i)
                call cpytsq(wrk,wrk(l2i+1),nqi,1) 
                DUM = 0.0D+00
                do kk = 1 , nocc
                  do ll = 1 , nocc
                     klX = (kk -1) * nqi + ll 
                     klS = l2i + (kk -1) * nqi + ll 
                     DUM = DUM + DB(klX) * wrk(klS) 
                  end do
                end do
                DUM = DUM + DUM 
c               write(*,*) "DUMDUM01 =",DUM,ixyz,jzxyz
C           U^b V^a
                IPNT = IPTYA(IFG) + NROT * (jxyz - 1) 
                CALL DCOPY(NROT,YALAG(IPNT),1,WRK,1)
                irot = 0
                do kk = 1 , nvir
                   do ll = 1, nocc
                      irot = irot + 1
                      korb = kk   + nocc
                      klX  = (korb - 1) * nqi + ll 
                      DUM  = DUM  - WRK(irot) * DB(klX) *2.0D+00
                   end do
                end do
C
                if(scffrg(ifg).eq.uhf)  DUM = DUM * 0.5D+00
                if(scffrg(ifg).eq.rohf) DUM = DUM * 0.5D+00
C
                X(ij) = X(ij) + DUM
                X(ji) = X(ji) + DUM
             end do  
            end if
         end do
         if(scffrg(ifg).eq.uhf.or.scffrg(ifg).eq.rohf) then
           CALL TFTRI(WRK,WRK1,x(LCB),WRK1(l2i+1),NQI,l1i,l1i)
           call cpytsq(WRK,DB,nqi,1) 
           do jat=1,nat
             jzat = iaglob(jat) 
             if(jzat.ne.0) then
              do jj =1,3
C
                jxyz  = (jat - 1) * 3 + jj
                jzxyz = (jzat- 1) * 3 + jj
C
                ij    = LFCMWRK+ (ixyz  -1) * nxyz  + jzxyz - 1
                ji    = LFCMWRK+ (jzxyz -1) * nxyz  + ixyz  - 1
C
                CALL TFTRI(wrk,DSI(1,jj,jat),x(LCB),wrk1(l2i+1),
     *                     NQI,l1i,l1i)
                call cpytsq(wrk,wrk(l2i+1),nqi,1) 
C
                DUM = 0.0D+00
C
                do kk = 1 , noccb
                  do ll = 1 , noccb
                     klX = (kk -1) * nqi + ll 
                     klS = l2i + (kk -1) * nqi + ll 
                     DUM = DUM + DB(klX) * wrk(klS) * 2.0D+00
                  end do
                end do
C           U^b V^a
                IPNT =IPTYA(IFG)+NROTB*(jxyz-1)+NROT*nat*3
                CALL DCOPY(NROTB,YALAG(IPNT),1,WRK,1)
                irot = 0
                do kk = 1 , nvirb
                   do ll = 1, noccb
                      irot = irot + 1
                      korb = kk   + noccb
                      klX  = (korb - 1) * nqi + ll 
                      DUM  = DUM  - WRK(irot) * DB(klX) *2.0D+00
                   end do
                end do
                DUM = DUM * 0.5D+00
C
                X(ij) = X(ij) + DUM
                X(ji) = X(ji) + DUM
C
              end do
             end if
           end do
         end if 
      end do
C
 200  continue
C     JFG
C
      CALL MAKEMOL(JFG,0,0,ILAY,0,0,0,0,0,0,0,.FALSE.)
C
      if(modfd.ne.0) then
       if(iactfg(JFG).eq.0) go to 300
       call mapfmohess(nat,iaglob,x(lindat),iactfg,iwrk,ntmp,3)
       call ICOPY(nat,iwrk,1,iaglob,1) 
c      if(maswrk) write(6,*) "check=",nat
c      if(maswrk) write(6,'(5I3)') (iwrk(iii),iii=1,nat)
      end if
C
      call vclr(DSJ,1,l2j*nat*3)
      CALL EXTSDER(WRK,DSJ,L1J,L2J,.TRUE.,.TRUE.,0)
      IF(GOPARR) CALL DDI_GSUMF(1501,DSJ,L2J*3*NAT)
C

      IDMREC0I=JFG+IREC00
c     CALL READMOND(WRK,ORBXCH1,JODEXCH,NAJ,NBJ,L1J,X(LIODFMO),
c    *              IDMREC0I,scffrg(jfg).eq.uhf)
      l3j=l1j*l1j
      leneig = L2j + L3J
      lenrec = l3j + l1j
C    FOR UHF
      IF(scffrg(jfg).eq.uhf) lenrec = l3j * 2 + l1j * 2
      IF(scffrg(jfg).eq.uhf) leneig = l2j + l3j * 2 
C
      CALL RAREADS(IDAFMO,X(LIODFMO),wrk(l2j+1),lenrec,IDMREC0I,0)
C
      NQI   = IAND(NQMTFG(JFG),65535)
      ncount = 0
      do iii = 1,NQI
        eval = wrk(leneig+iii)
        if(eval .ge. thrush) ncount = ncount + 1
      end do
c     NQI3  = NQI * NQI
      NOCC  = na 
      NVIR  = NQI - na - ncount 
      NROT  = NOCC * NVIR 
C    FOR UHF
      IF(scffrg(jfg).eq.uhf.or.scffrg(jfg).eq.rohf) then
        MULI  = IXFTCH(X(LMULFG),JFG)
        NB    = NA - MULI + 1
        NOCCB = nb 
        NVIRB = NQI   -    nb - ncount
        NROTB = NOCCB * NVIRB
      end if
c
c
      CALL DCOPY(L3J,WRK(L2J+1),1,X(LC),1)
      IF(scffrg(jfg).eq.uhf)  CALL DCOPY(L3J,WRK(L2J+1+l3J),1,X(LCB),1)
      IF(scffrg(jfg).eq.rohf) CALL DCOPY(L3J,WRK(L2J+1    ),1,X(LCB),1)
C      V^a * ( S^b + U^b)
      do ixyz = 1,nxyz
         LOOP=0
C        EXTRACT V^a
         DO II = 1, L1A
           DO JJ = 1, II
             LOOP = LOOP + 1
             II1=MAPJ(II)
             IJ1=MAPJ(JJ)
             II2=MAX(II1,IJ1)
             IJ2=MIN(II1,IJ1)
             ISINI=II1.NE.0.AND.IJ1.NE.0
             if(isini) 
     *         WRK1((II2*II2-II2)/2+IJ2) = FD(LOOP,ixyz)
           END DO
         END DO
C        C^T  V^a  C  ---->  V^a  MO basis 
         CALL TFTRI(WRK,WRK1,x(LC),WRK1(l2j+1),NQI,l1j,l1j)
         call cpytsq(WRK,DB,nqi,1) 
         do jat=1,nat
            jzat = iaglob(jat) 
            if(jzat.ne.0) then
             do jj =1,3
                jxyz  = (jat - 1) * 3 + jj
                jzxyz = (jzat- 1) * 3 + jj
                ij    = LFCMWRK+ (ixyz  -1) * nxyz  + jzxyz - 1
                ji    = LFCMWRK+ (jzxyz -1) * nxyz  + ixyz  - 1
                CALL TFTRI(wrk,DSJ(1,jj,jat),x(LC),wrk1(l2j+1),
     *                     NQI,l1j,l1j)
                call cpytsq(wrk,wrk(l2j+1),nqi,1) 
                DUM = 0.0D+00
                do kk = 1 , nocc
                  do ll = 1 , nocc
                     klX = (kk -1) * nqi + ll 
                     klS = l2j + (kk -1) * nqi + ll 
                     DUM = DUM + DB(klX) * wrk(klS) 
                  end do
                end do
                DUM = DUM + DUM 
C           U^b V^a
                IPNT = IPTYA(JFG) + NROT * (jxyz - 1) 
                CALL DCOPY(NROT,YALAG(IPNT),1,WRK,1)
                irot = 0
                do kk = 1 , nvir
                   do ll = 1, nocc
                      irot = irot + 1
                      korb = kk   + nocc
                      klX  = (korb - 1) * nqi + ll 
                      DUM  = DUM  - WRK(irot) * DB(klX) *2.0D+00
                   end do
                end do
C
                IF(scffrg(jfg).eq.uhf)  DUM = DUM * 0.5D+00
                IF(scffrg(jfg).eq.rohf) DUM = DUM * 0.5D+00
C
                X(ij) = X(ij) + DUM
                X(ji) = X(ji) + DUM
c               write(*,*) "DUMDUM02 =",DUM,ixyz,jzxyz
             end do  
            end if
         end do
         IF(scffrg(jfg).eq.uhf.or.scffrg(jfg).eq.rohf) THEN
C        C^T  V^a  C  ---->  V^a  MO basis 
           CALL TFTRI(WRK,WRK1,x(LCB),WRK1(l2j+1),NQI,l1j,l1j)
           call cpytsq(WRK,DB,nqi,1) 
C
           do jat=1,nat
              jzat = iaglob(jat) 
              if(jzat.ne.0) then
               do jj =1,3
C
                 jxyz  = (jat - 1) * 3 + jj
                 jzxyz = (jzat- 1) * 3 + jj
                 ij    = LFCMWRK+ (ixyz  -1) * nxyz  + jzxyz - 1
                 ji    = LFCMWRK+ (jzxyz -1) * nxyz  + ixyz  - 1
C
C
                 CALL TFTRI(wrk,DSJ(1,jj,jat),x(LCB),wrk1(l2j+1),
     *                      NQI,l1j,l1j)
                 call cpytsq(wrk,wrk(l2j+1),nqi,1) 
C
                 DUM = 0.0D+00
C
                 do kk = 1 , noccb
                   do ll = 1 , noccb
                      klX = (kk -1) * nqi + ll 
                      klS = l2j + (kk -1) * nqi + ll 
                      DUM = DUM + DB(klX) * wrk(klS)  * 2.0D+00
                   end do
                 end do
C           U^b V^a
                 IPNT= IPTYA(JFG)+NROTB*(jxyz - 1)+NROT*nat*3
                 CALL DCOPY(NROTB,YALAG(IPNT),1,WRK,1)
C
                 irot = 0
                 do kk = 1 , nvirb
                    do ll = 1, noccb
                       irot = irot + 1
                       korb = kk   + noccb
                       klX  = (korb - 1) * nqi + ll 
                       DUM  = DUM  - WRK(irot) * DB(klX) *2.0D+00
                    end do
                 end do
C
                 DUM = DUM * 0.5D+00
C
                 X(ij) = X(ij) + DUM
                 X(ji) = X(ji) + DUM
C
               end do  
              end if
           end do
         END IF 
      end do
C
 300  continue
C
      IF(KFG.NE.0) THEN
      CALL MAKEMOL(KFG,0,0,ILAY,0,0,0,0,0,0,0,.FALSE.)
c
      if(modfd.ne.0) then
       if(iactfg(KFG).eq.0) go to 400
       call mapfmohess(nat,iaglob,x(lindat),iactfg,iwrk,ntmp,3)
       call ICOPY(nat,iwrk,1,iaglob,1) 
      end if
c
      call vclr(DSK,1,l2k*nat*3)
      CALL EXTSDER(WRK,DSK,L1K,L2K,.TRUE.,.TRUE.,0)
      IF(GOPARR) CALL DDI_GSUMF(1501,DSK,L2K*3*NAT)
c

      IDMREC0I=KFG+IREC00
      l3k=l1k*l1k
      lenrec = l3k + l1k
      leneig = l2k + l3k 
C    FOR UHF
      IF(scffrg(kfg).eq.uhf) lenrec = l3k * 2 + l1k * 2
      IF(scffrg(kfg).eq.uhf) leneig = l2k + l3k * 2 
C
      CALL RAREADS(IDAFMO,X(LIODFMO),wrk(l2k+1),lenrec,IDMREC0I,0)
      CALL DCOPY(L3k,WRK(L2k+1),1,X(LC),1)
C    FOR UHF
      IF(scffrg(kfg).eq.uhf)  CALL DCOPY(L3k,WRK(L2k+1+l3k),1,X(LCB),1)
      IF(scffrg(kfg).eq.rohf) CALL DCOPY(L3k,WRK(L2k+1    ),1,X(LCB),1)
C
      NQK    = IAND(NQMTFG(kFG),65535)
      ncount = 0
      do iii = 1, NQK
        eval = wrk(leneig+iii)
        if(eval .ge. thrush) ncount = ncount + 1
      end do
      NOCC  = na 
      NVIR  = NQK  -   na - ncount
      NROT  = NOCC * NVIR 
C    FOR UHF
      IF(scffrg(kfg).eq.uhf.or.scffrg(kfg).eq.rohf) then
        MULK  = IXFTCH(X(LMULFG),KFG)
        NB    = NA - MULK + 1
        NOCCB = nb 
        NVIRB = NQK   -    nb - ncount
        NROTB = NOCCB * NVIRB
      end if
     
C
C    ++++++++++++++++++++++++++++++++++++++++++++++++
C
C      V^a * ( S^b + U^b)
      do ixyz = 1,nxyz
         LOOP=0
C        EXTRACT V^a
         DO II = 1, L1A
           DO JJ = 1, II
             LOOP = LOOP + 1
             II1=MAPK(II)
             IJ1=MAPK(JJ)
             II2=MAX(II1,IJ1)
             IJ2=MIN(II1,IJ1)
             ISINI=II1.NE.0.AND.IJ1.NE.0
             if(isini) 
     *         WRK1((II2*II2-II2)/2+IJ2) = FD(LOOP,ixyz)
           END DO
         END DO
C        C^T  V^a  C  ---->  V^a  MO basis 
         CALL TFTRI(WRK,WRK1,x(LC),WRK1(l2k+1),NQK,l1K,l1K)
         call cpytsq(WRK,DB,nqk,1) 
         do jat=1,nat
            jzat = iaglob(jat) 
            do jj =1,3
               jxyz  = (jat - 1) * 3 + jj
               jzxyz = (jzat- 1) * 3 + jj
               ij    = LFCMWRK+ (ixyz  -1) * nxyz  + jzxyz - 1
               ji    = LFCMWRK+ (jzxyz -1) * nxyz  + ixyz  - 1
               CALL TFTRI(wrk,DSK(1,jj,jat),x(LC),wrk1(l2k+1),
     *                    NQK,l1k,l1k)
               call cpytsq(wrk,wrk(l2k+1),nqk,1) 
               DUM = 0.0D+00
               do kk = 1 , nocc
                 do ll = 1 , nocc
                    klX = (kk -1) * nqk + ll 
                    klS = l2k + (kk -1) * nqk + ll 
                    DUM = DUM + DB(klX) * wrk(klS) 
                 end do
               end do
               DUM = DUM + DUM 
c              write(*,*) "DUMDUM01 =",DUM,ixyz,jzxyz
C           U^b V^a
               IPNT = IPTYA(KFG) + NROT * (jxyz - 1) 
               CALL DCOPY(NROT,YALAG(IPNT),1,WRK,1)
               irot = 0
               do kk = 1 , nvir
                  do ll = 1, nocc
                     irot = irot + 1
                     korb = kk   + nocc
                     klX  = (korb - 1) * nqk + ll 
                     DUM  = DUM  - WRK(irot) * DB(klX) *2.0D+00
                  end do
               end do
C
               if(scffrg(kfg).eq.uhf)  DUM = DUM * 0.5D+00
               if(scffrg(kfg).eq.rohf) DUM = DUM * 0.5D+00
C
               X(ij) = X(ij) + DUM
               X(ji) = X(ji) + DUM
            end do  
         end do
         if(scffrg(kfg).eq.uhf.or.scffrg(kfg).eq.rohf) then
           CALL TFTRI(WRK,WRK1,x(LCB),WRK1(l2k+1),NQK,l1k,l1k)
           call cpytsq(WRK,DB,nqk,1) 
           do jat=1,nat
             jzat = iaglob(jat) 
             do jj =1,3
C
               jxyz  = (jat - 1) * 3 + jj
               jzxyz = (jzat- 1) * 3 + jj
C
               ij    = LFCMWRK+ (ixyz  -1) * nxyz  + jzxyz - 1
               ji    = LFCMWRK+ (jzxyz -1) * nxyz  + ixyz  - 1
C
               CALL TFTRI(wrk,DSK(1,jj,jat),x(LCB),wrk1(l2k+1),
     *                    NQK,l1k,l1k)
               call cpytsq(wrk,wrk(l2k+1),nqk,1) 
C
               DUM = 0.0D+00
C
               do kk = 1 , noccb
                 do ll = 1 , noccb
                    klX = (kk -1) * nqk + ll 
                    klS = l2k + (kk -1) * nqk + ll 
                    DUM = DUM + DB(klX) * wrk(klS) * 2.0D+00
                 end do
               end do
C           U^b V^a
               IPNT =IPTYA(KFG)+NROTB*(jxyz-1)+NROT*nat*3
               CALL DCOPY(NROTB,YALAG(IPNT),1,WRK,1)
               irot = 0
               do kk = 1 , nvirb
                  do ll = 1, noccb
                     irot = irot + 1
                     korb = kk   + noccb
                     klX  = (korb - 1) * nqk + ll 
                     DUM  = DUM  - WRK(irot) * DB(klX) *2.0D+00
                  end do
               end do
               DUM = DUM * 0.5D+00
C
               X(ij) = X(ij) + DUM
               X(ji) = X(ji) + DUM
C
             end do
           end do
         end if 
      end do
C
 400  CONTINUE
C
      END IF
C    IFG JFG 
      CALL MAKEMOL(IFG,JFG,KFG,ILAY,0,0,0,0,0,0,0,.TRUE.)
c     restore l1
c     CALL DAREAD(IDAF,IODA,wrk,L1,17,0)
      if(modfd.ne.0) then
       call mapfmohess(nat,iaglob,x(lindat),iactfg,iwrk,ntmp,3)
       call ICOPY(nat,iwrk,1,iaglob,1) 
      end if
C
      L1   = NUM
      L2   = (NUM*NUM+NUM)/2
      L3   = NUM*NUM
      NQI  = NQMT0
      NOCC = NA0
      NVIR = NQI - NA0 - NORBPROJ
      NROT = NOCC * NVIR 
C
      IF(urohf) THEN
        NOCCB = NB0
        NVIRB = NQI - NB0 - NORBPROJ
        NROTB = NOCCB * NVIRB
      END IF
C
      call vclr(DSIJ,1,l2*nat*3)
      CALL EXTSDER(WRK,DSIJ,L1,L2,.TRUE.,.TRUE.,0)
      IF(GOPARR) CALL DDI_GSUMF(1501,DSIJ,L2*nat*3)
C
      CALL DAREAD(IDAF,IODA,x(LC),L3,15,0)
      IF(urohf)  CALL DAREAD(IDAF,IODA,x(LCB),L3,19,0)
C
C
      DO ixyz = 1,nxyz
        CALL DCOPY(L2,FD(1,ixyz),1,WRK1,1)
C       C^T  V^a  C  ---->  V^a  MO basis 
        CALL TFTRI(WRK,WRK1,x(LC),WRK1(l2+1),NQI,l1,l1)
        call cpytsq(WRK,DB,nqi,1) 
        do jat = 1,nat
          jzat = iaglob(jat) 
          if(jzat.eq.0) go to 500 
          do jj = 1, 3
             jxyz  = (jat -1) * 3 + jj
             jzxyz = (jzat-1) * 3 + jj
             ij    = LFCMWRK+ (ixyz  -1)  * nxyz  + jzxyz - 1
             ji    = LFCMWRK+ (jzxyz -1)  * nxyz  + ixyz  - 1
             CALL TFTRI(wrk,DSIJ(1,jj,jat),x(LC),wrk1(l2+1),NQI,l1,l1)
             call cpytsq(wrk,wrk(l2+1),nqi,1) 
C            XU  --->  V^a ( MO basis)
C            wrk --->  S^b ( MO basis)
             DUM = 0.0D+00
             do kk = 1 , nocc
               do ll = 1 , nocc
                  klX = (kk -1) * nqi + ll 
                  klS = l2   + (kk -1) * nqi + ll 
                  DUM = DUM  + DB(klX) * wrk(klS) 
               end do
             end do
             DUM = DUM + DUM 
c            write(*,*) "DUMDUM03 =",DUM,ixyz,jzxyz
C           U^b V^a
             IPNT = NROT * (jxyz - 1) + 1
             CALL DCOPY(NROT,YAWRK(IPNT),1,WRK,1)
             irot = 0
             do kk = 1 , nvir
                do ll = 1, nocc
                   irot = irot + 1
                   korb = kk   + nocc
                   klX  = (korb - 1) * nqi + ll 
                   DUM  = DUM  - WRK(irot) * DB(klX) *2.0D+00
                end do
             end do
c            write(*,*) "DUMDUM03 =",DUM,ixyz,jzxyz
             IF(urohf) DUM= DUM * 0.5D+00
C
             X(ij) = X(ij) - DUM
             X(ji) = X(ji) - DUM
          end do
 500      continue
        end do
        IF(urohf) THEN
C
         CALL TFTRI(WRK,WRK1,x(LCB),WRK1(l2+1),NQI,l1,l1)
         CALL cpytsq(WRK,DB,nqi,1) 
C
         do jat = 1,nat
            jzat = iaglob(jat) 
            if(jzat.eq.0) go to 550 
            do jj = 1, 3
              jxyz  = (jat -1) * 3 + jj
              jzxyz = (jzat-1) * 3 + jj
              ij    = LFCMWRK+ (ixyz  -1)  * nxyz  + jzxyz - 1
              ji    = LFCMWRK+ (jzxyz -1)  * nxyz  + ixyz  - 1
C
C
              CALL TFTRI(wrk,DSIJ(1,jj,jat),x(LCB),wrk1(l2+1),
     *                   NQI,l1,l1)
              CALL cpytsq(wrk,wrk(l2+1),nqi,1) 
C
              DUM = 0.0D+00
C
              do kk = 1 , noccb
                do ll = 1 , noccb
                   klX = (kk -1) * nqi + ll 
                   klS = l2   + (kk -1) * nqi + ll 
                   DUM = DUM  + DB(klX) * wrk(klS) * 2.0D+00
                end do
              end do
C           U^b V^a
              IPNT = NROTB * (jxyz - 1) + 1 + NROT * nat * 3
              CALL DCOPY(NROTB,YAWRK(IPNT),1,WRK,1)
              irot = 0
              do kk = 1 , nvirb
                 do ll = 1, noccb
                    irot = irot + 1
                    korb = kk   + noccb
                    klX  = (korb - 1) * nqi + ll 
                    DUM  = DUM  - WRK(irot) * DB(klX) *2.0D+00
                 end do
              end do
C
              DUM = DUM * 0.5D+00
C
              X(ij) = X(ij) - DUM
              X(ji) = X(ji) - DUM
            end do
 550        continue
          end do
        END IF 
      END DO
C
C
      if(goparr) call dscal(neh,one/nproc,x(LFCMWRK),1)  
      call daxpy(neh,one,x(LFCMWRK),1,FCM,1)
c
C     restore iaglob if modfd
      if(modfd.ne.0) CALL MAKEMOL(IFG,JFG,KFG,ILAY,0,0,0,0,0,0,0,.TRUE.)
C
      CALL RETFM(NEED)
c
      NCURSH = NCURS  
      return
      END
C
C
C
C*MODULE FMOH1A    *DECK TVD_CPHF
C>    @brief Derivative of orbital for ESP derivative
C>
C>    @details  Calculate first order derivative of orbital 
C>              in one lectron integral
C>
C>    @author Hiroya Nakata
C>    - Apr, 2013- Subroutine writte
C>           --- OUTPUT ---
C>    @param DV        Derivative of ESP with respect to cartesian coordinate in FMO
      subroutine TVD_CPHF(DV)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)

      LOGICAL GOPARR,DSKWRK,MASWRK,NXT
      LOGICAL FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      LOGICAL fastvesp
      DIMENSION DV(*)
      DIMENSION DIJ10( 78),DIJ11(169),DIJ20(132),
     1          FFT10( 78),FFT11(169),FFT20(132),
     2          GIJ10( 78),
     3          XIN(   80),YIN(   80),ZIN(   80) 
      DIMENSION DOE(108)
C
      PARAMETER (MXGTOT=20000, MXSH=5000, MXGSH=30, MXATM=2000)
C
      COMMON /FMCOM / X(1)
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
c     COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
c     COMMON /RESTAR/ TIMLIM,NREST,NREC,INTLOC,IST,JST,KST,LST
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /SHLOED/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL,
     *                MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL,
     *                NIJ,IJD,KLD,IJ,KL
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,
     *                NI,NJ,CX,CY,CZ
      COMMON /INFOED/ GA(MXGSH),CSA(MXGSH),CPA(MXGSH),CDA(MXGSH),
     *                GB(MXGSH),CSB(MXGSH),CPB(MXGSH),CDB(MXGSH),
     *                GC(MXGSH),CSC(MXGSH),CPC(MXGSH),CDC(MXGSH),
     *                GD(MXGSH),CSD(MXGSH),CPD(MXGSH),CDD(MXGSH),
     *                XA,YA,ZA,XB,YB,ZB,RR,XC,YC,ZC,XD,YD,ZD,RRC,
     *                NGA,NGB,NGC,NGD
      COMMON /DIJOED/ NADIJ1( 78),NADIJ2(169),NADIJ3(132)
      COMMON /IJXOED/ NPIJX1( 78),NPIJX2(169),NPIJX3(132)
      COMMON /IJYOED/ NPIJY1( 78),NPIJY2(169),NPIJY3(132)
      COMMON /IJZOED/ NPIJZ1( 78),NPIJZ2(169),NPIJZ3(132)
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,liactfg,lcrfrg,
     *                lzlmfrgv,lYlmfrgv,lndtfrg,lf_mm,lg_mm,lmaxl30
C
C
      DATA PI212 /1.1283791670955D+00/
      DATA ZERO,ONE,TWO /0.0D+00,1.0D+00,2.0D+00/
      DATA RLN10 /2.30258D+00/
      DATA NFDIJ1,NFDIJ2,NFDIJ3 / 78,169,132/
C
c     write(*,*) "MFIRST MSECND in fmo =",MFIRST,MSECND,MCPHF
c
      TOL = RLN10*ITOL
      NRD=0
      IF(MFIRST) NRD = 1
      IF(MSECND) NRD = 2
      L2=(NUM*(NUM+1))/2
      MAXIC = NATFMO
      call setatz(1,MAXIC,fastvesp,lfvesp,needfv)
C
      CALL STVJDD

C INITIALIZE PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
C
C     ----- I SHELL -----
      DO 1060 II = 1,NSHELL
C
C     ----- GO PARALLEL! -----
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 1060
      END IF
C
      IAT = KATOM(II)
C
      IF(IAT .GT. NAT) go to 1060 
C
      IFDX  =    3 * L2 * (IAT-1)
      IFDY  = IFDX + L2
      IFDZ  = IFDY + L2
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      XA = XI
      YA = YI
      ZA = ZI
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II) + NRD
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      NGA = 0
      DO 10 I = I1,I2
      NGA = NGA + 1
      GA( NGA) = EX(I)
      CSA(NGA) = CS(I)
      CPA(NGA) = CP(I)
      CDA(NGA) = CD(I)
   10 CONTINUE
C
C     ----- J SHELL -----
C
      DO 1040 JJ = 1,NSHELL
C
C           GO PARALLEL!
C
      IF ((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 1040
      END IF
C
      JAT = KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      XB = XJ
      YB = YJ
      ZB = ZJ
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      IF(MSECND) LJT = LJT + 1
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NGB = 0
      DO 20 J = J1,J2
      NGB = NGB + 1
      GB( NGB) = EX(J)
      CSB(NGB) = CS(J)
      CPB(NGB) = CP(J)
      CDB(NGB) = CD(J)
   20 CONTINUE
      IF(MFIRST) NROOTS = (LIT+LJT-2  )/2 + 1
      IF(MSECND) NROOTS = (LIT+LJT-2  )/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      CALL STVIDX(0)
C
      CALL VCLR(GIJ10,1,NFDIJ1)
C
C     ----- I PRIMITIVE
C
      IIG = 0
      DO 840 IG = I1,I2
      IIG = IIG + 1
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      DUM = AI+AI
C
C     ----- J PRIMITIVE
C
      JJG = 0
      DO 820 JG = J1,J2
      JJG = JJG + 1
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 820
C
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      CALL STVDIJ(0,IIG,JJG,NIJ10,NIJ11,NIJ20,
     1            DIJ10,DIJ11,DIJ20,FFT10,FFT11,FFT20,
     2            NFDIJ1,NFDIJ2,NFDIJ3)
C
C     ----- NUCLEAR ATTRACTION -----
C
      DUM = PI212*AA1
      IF(MFIRST) THEN
         DO 50 I = 1,NIJ10
   50    DIJ10(I) = DIJ10(I) * DUM
      END IF
C
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
C
c     DO 800 IC = 1,ICMAX
      DO 800 IC = 1,MAXIC
      if(fastvesp) then
        icind=lfvesp+(ic-1)*6
        FRACV=x(icind)
        FRACESP=x(icind+1)
        ZNUC=x(icind+2)
        CX=x(icind+3)
        CY=x(icind+4)
        CZ=x(icind+5)
      else
      CALL FMOATFRG(IC,X(LINDAT),X(LINDATG),X(LIAGLOB),
     *              X(LIALOC),X(LIABDFG),X(LJABDFG),
     *              X(LINDBD),X(LFMOZAN),X(LFMOC),
     *              NATFMO+NBDFG,X(LUNTXYZ),X(LPOPMAT),
     *              KATOM(II),KATOM(JJ),FRACV,FRACESP,
     *              KFG,ZNUC,CX,CY,CZ)
      endif
      if(fracesp .eq. zero) go to 800
      ZNUC =  ZNUC * FRACESP
C
      XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS .LE. 3) CALL RT123
      IF(NROOTS .EQ. 4) CALL ROOT4
      MM = 0
      DO 740 K = 1,NROOTS
      UU = AA*U(K)
      WW = W(K)*ZNUC
      TT = ONE/(AA+UU)
      T  = SQRT(TT)
      X0 = (AAX+UU*CX)*TT
      Y0 = (AAY+UU*CY)*TT
      Z0 = (AAZ+UU*CZ)*TT
      IN = -4+MM
      DO 720 I = 1,LIT
      IN = IN+4
      NI = I
      DO 720 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL DERXYZ(0)
      XIN(JN) = XINT
      YIN(JN) = YINT
      ZIN(JN) = ZINT*WW
  720 CONTINUE
  740 MM = MM+20
C
      IF(MFIRST) THEN
         DO 60 I = 1,NIJ10
            N  = NADIJ1(I)
            NX = NPIJX1(I)
            NY = NPIJY1(I)
            NZ = NPIJZ1(I)
            DUM = ZERO
            MM  = 0
            DO 61 K = 1,NROOTS
               DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
               MM = MM+20
   61       CONTINUE
            GIJ10(N) = GIJ10(N) + DUM*DIJ10(I)
   60    CONTINUE
      END IF
C
  800 CONTINUE
C
C     ----- END OF PRIMITIVE LOOPS -----
C
  820 CONTINUE
  840 CONTINUE
C
C     ----- FORM INTEGRALS OVER DERIVATIVES -----
C
      CALL TVFSIJ_CPHF(GIJ10,DOE,NFDIJ1)
c     IF(.NOT.MCPHF) GO TO 846
      N = -3
      DO 75 J = MINJ,MAXJ
      NJ = LOCJ + J
      DO 75 I = MINI,MAXI
      NI = LOCI + I
      IF(NI .GE. NJ) GO TO 842
      NIJ = NJ * (NJ-1)/2 + NI
      GO TO 844
  842 NIJ = NI * (NI-1)/2 + NJ
  844 N = N + 3
      FAC = ONE
      IF(NI .EQ. NJ) FAC = TWO
      DV(IFDX+NIJ) = DV(IFDX+NIJ) + FAC * DOE(N+1)
      DV(IFDY+NIJ) = DV(IFDY+NIJ) + FAC * DOE(N+2)
      DV(IFDZ+NIJ) = DV(IFDZ+NIJ) + FAC * DOE(N+3)
   75 CONTINUE
C
C
C
 1040 CONTINUE
 1060 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
      IF (GOPARR) THEN
          IF(NXT) CALL DDI_DLBRESET
      END IF
C

C
      if(fastvesp) call retfm(needfv)

      return
      end
C
C
C*MODULE FMOH1A  *DECK TVFSIJ_CPHF
C>    @brief Calculate the component of TVD for CPHF
C>
C>    @details  Calculate first order derivative of orbital 
C>              in one  electron integral, and its elements
C>
C>    @author Hiroya Nakata
C>    - Apr, 2013- Subroutine writte
C>           --- INPUT---
C>    @param GF        elements for derivative of ao basis
C>    @param NFG       Number of GF 
C>           --- OUTPUT ---
C>    @param DOE       Derivative of TVD term 
      SUBROUTINE TVFSIJ_CPHF(GF,DOE,NGF)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL NONORM
      LOGICAL FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
C
      DIMENSION GF(NGF),DOE(108) 
C
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /SHLOED/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL,
     *                MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL,
     *                NIJ,IJD,KLD,IJ,KL
C
      DATA SQRT3 /1.73205080756888D+00/
C
C
C     ----- INITIAL SET OF PARAMETERS -----
C
      NONORM = NORMF .EQ. 1 .AND. NORMP .EQ. 1
      IJM = -3
C
C     ----- CALCULATION OF FIRST AND SECOND DERIVATIVES USING -----
C     ----- TWO ELECTRON INTEGRALS                            -----
C
      DO 4100 J = MINJ,MAXJ
c     JN = LOCJ + J
      NF = 13*(J-MINJ) + 1
c     NS = 22*(J-MINJ) + 1
      DO 4000 I = MINI,MAXI
c     IN = LOCI + I
c     IF(JN .GT. IN) GO TO 200
c     IJN = IN*(IN-1)/2 + JN
c     GO TO 210
c 200 IJN = JN*(JN-1)/2 + IN
c 210 CONTINUE
      IJM = IJM + 3
      IF(.NOT.FIRST) GO TO 4000
      GO TO (300,310,320,330,340,350,360,370,380,390),I
  300 X =            GF(NF+ 1)
      Y =            GF(NF+ 2)
      Z =            GF(NF+ 3)
      GO TO 400
  310 X =            GF(NF+ 4)+GF(NF   )
      Y =            GF(NF+ 7)
      Z =            GF(NF+ 8)
      GO TO 400
  320 X =            GF(NF+ 7)
      Y =            GF(NF+ 5)+GF(NF   )
      Z =            GF(NF+ 9)
      GO TO 400
  330 X =            GF(NF+ 8)
      Y =            GF(NF+ 9)
      Z =            GF(NF+ 6)+GF(NF   )
      GO TO 400
  340 X =            GF(NF+ 3)+GF(NF   )+GF(NF   )
      Y =            GF(NF+ 6)
      Z =            GF(NF+ 7)
      GO TO 400
  350 X =            GF(NF+ 8)
      Y =            GF(NF+ 4)+GF(NF+ 1)+GF(NF+ 1)
      Z =            GF(NF+ 9)
      GO TO 400
  360 X =            GF(NF+10)
      Y =            GF(NF+11)
      Z =            GF(NF+ 5)+GF(NF+ 2)+GF(NF+ 2)
      GO TO 400
  370 X =            GF(NF+ 6)+GF(NF+ 1)
      Y =            GF(NF+ 8)+GF(NF   )
      Z =            GF(NF+12)
      GO TO 395
  380 X =            GF(NF+ 7)+GF(NF+ 2)
      Y =            GF(NF+12)
      Z =            GF(NF+10)+GF(NF   )
      GO TO 395
  390 X =            GF(NF+12)
      Y =            GF(NF+ 9)+GF(NF+ 2)
      Z =            GF(NF+11)+GF(NF+ 1)
  395 IF(NONORM) GO TO 400
      X =            X*SQRT3
      Y =            Y*SQRT3
      Z =            Z*SQRT3
  400 CONTINUE
      DOE(IJM+1) = X
      DOE(IJM+2) = Y
      DOE(IJM+3) = Z
 4000 CONTINUE
 4100 CONTINUE
      RETURN
      END
C
C
C*MODULE FMOH1A  *DECK ESDIM_HLF
C>    @brief Calculate the HLF for ES-DIM
C>
C>    @details  Calculate first and second order derivative of 
C>              HLF terms for separated dimer
C>
C>    @author Hiroya Nakata
C>    - Apr, 2013- Subroutine writte
C>    --- INPUT---
C>    @param   DI      Density for IFG
C>    @param   L1I     Number of atomic orbital in IFG
C>    @param   L2I     Number of elements of triangula matrix of AO basis in IFG
C>    @param   FDI     Derivative of Fock matrix elements in IFG
C>    @param  NATI     number of atom in IFG
C>    @param   DJ      Density for JFG
C>    @param   L2J     Number of elements of triangula matrix of AO basis in JFG
C>    @param   FDJ     Derivative of Fock matrix elements in JFG
C>    --- OUTPUT ---
C>    @param    EG     Derivative of energy 
C>    @param    EH     Second Derivative of energy 
      subroutine ESDIM_HLF(EG,EH,
     *               DI,l1I,l2I,FDI,NATI,
     *               DJ,l2J,FDJ,IWRK) 
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
c     DOUBLE PRECISION MCSCF
      DIMENSION EG(3,*),EH(9,*),DI(*),FDI(*),DJ(*),FDJ(*),IWRK(*)
      DIMENSION IJN(36),DFAC(36),DIJ(36),XIN(108),YIN(108),ZIN(108),
     *          IX(10),IY(10),IZ(10),JX(10),JY(10),JZ(10),
     *          PIJ(36),IJX(36),IJY(36),IJZ(36),W2(5),W4(5)
C
      LOGICAL IANDJ,NORM,DOUBLE,GOPARR,DSKWRK,MASWRK,NXT,
     *        FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
C
      PARAMETER (MXGTOT=20000, MXSH=5000, MXATM=2000)
c     parameter (TOANGS=0.52917724924D+00)
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
c     COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
c     COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
c     COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
c     COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
c    *                MPLEVL,MPCTYP
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,
     *                NI,NJ,CX,CY,CZ
c     COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
c    *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
c    *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
c    *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
c    *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
c    *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
c    *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
c    *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
c    *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
c    *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
c    *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
c    *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
c    *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,liactfg,lcrfrg,
c    *                lzlmfrgv,lYlmfrgv,lndtfrg,lf_mm,lg_mm,lmaxl30
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO,NZMTFMO,ifmobas,itmfmo(2)
C
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA RLN10 /2.30258D+00/
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0/
      DATA IX / 1, 4, 1, 1, 7, 1, 1, 4, 4, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1/
      DATA IY / 1, 1, 4, 1, 1, 7, 1, 4, 1, 4/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1/
      DATA IZ / 1, 1, 1, 4, 1, 1, 7, 1, 4, 4/
      DATA ZERO,ONE,TWO,FOUR /0.0D+00,1.0D+00,2.0D+00,4.0D+00/
c     DATA MCSCF/8HMCSCF   /
      TOL  = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
C   INITIALIZATION FOR PARALLEL
      IF (GOPARR) CALL DDI_DLBRESET
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
C
C    For I fragment
      DO 600 II = 1,NCURSH
C
C           GO PARALLEL!
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 600
      END IF
C
      IAT  = KATOM(II)
      XI   = C(1,IAT)
      YI   = C(2,IAT)
      ZI   = C(3,IAT)
      I1   = KSTART(II)
      I2   = I1+KNG(II)-1
      LIT  = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
      DO 580 JJ = 1,II
C
C           GO PARALLEL!
C
      IF((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 580
      END IF
C
      JAT= KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      IF(MFIRST) NROOTS = (LIT+LJT+1-2)/2 + 1
      IF(MSECND) NROOTS = (LIT+LJT+2-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      IANDJ = II .EQ. JJ
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 120 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      IF (IANDJ) MAX = I
      DO 120 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
      IDUM = LOCI+I
      IJN(IJ) = (IDUM*(IDUM-1))/2 + LOCJ+J
      DFAC(IJ) = TWO
      IF (IANDJ .AND. I .EQ. J) DFAC(IJ) = ONE
  120 CONTINUE
C
C     ----- I PRIMITIVE
C
      JGMAX = J2
      DO 520 IG = I1,I2
      AI   = EX(IG)
      ARRI = AI*RR
      AXI  = AI*XI
      AYI  = AI*YI
      AZI  = AI*ZI
      CSI  = CS(IG)
      CPI  = CP(IG)
      CDI  = CD(IG)
C
C     ----- J PRIMITIVE
C
      IF (IANDJ) JGMAX = IG
      DO 500 JG = J1,JGMAX
      AJ  = EX(JG)
      AA  = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 500
C
      FAC = EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      AX  = (AXI+AJ*XJ)*AA1
      AY  = (AYI+AJ*YJ)*AA1
      AZ  = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      DOUBLE=IANDJ.AND.IG.NE.JG
      MAX = MAXJ
      NN = 0
      DO 360 I = MINI,MAXI
      GO TO (140,160,220,220,180,220,220,200,220,220),I
  140 DUM1 = CSI*FAC
      GO TO 220
  160 DUM1 = CPI*FAC
      GO TO 220
  180 DUM1 = CDI*FAC
      GO TO 220
  200 IF (NORM) DUM1 = DUM1*SQRT3
  220 IF (IANDJ) MAX = I
      DO 360 J = MINJ,MAX
      GO TO (240,280,340,340,300,340,340,320,340,340),J
  240 DUM2 = DUM1*CSJ
      IF ( .NOT. DOUBLE) GO TO 340
      IF (I .GT. 1) GO TO 260
      DUM2 = DUM2+DUM2
      GO TO 340
  260 DUM2 = DUM2+CSI*CPJ*FAC
      GO TO 340
  280 DUM2 = DUM1*CPJ
      IF (DOUBLE) DUM2 = DUM2+DUM2
      GO TO 340
  300 DUM2 = DUM1*CDJ
      IF (DOUBLE) DUM2 = DUM2+DUM2
      GO TO 340
  320 IF (NORM) DUM2 = DUM2*SQRT3
  340 NN = NN+1
      NDUM = IJN(NN)
      PIJ(NN) = DUM2
      DIJ(NN) = DUM2*DFAC(NN)*DI(NDUM)
  360 CONTINUE
C
C     ..... HELLMANN-FEYNMAN TERM .....
C
      DUM = PI212*AA1
      DO 380 I = 1,IJ
      PIJ(I) = PIJ(I)*DUM
      DIJ(I) = DIJ(I)*DUM
  380 CONTINUE
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
      DO 480 IC = NATI+1,NAT
      ZNUC = -ZAN(IC)
      MX   =  3 * L2I * (IC-1)
      MY   = MX + L2I
      MZ   = MY + L2I
      CX   = C(1,IC)
      CY   = C(2,IC)
      CZ   = C(3,IC)
      IZC  = IWRK(IC)
      MC   = IZC * (IZC + 1)/2
      XX   = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS .LE. 3) CALL RT123
      IF(NROOTS .EQ. 4) CALL ROOT4
      MM = 0
      DO 420 K = 1,NROOTS
         U2 = AA*U(K)
         U4 = U2*U2
         WW = W(K)*ZNUC
         W2(K) = TWO *WW*U2
         W4(K) = FOUR*WW*U4
         TT = ONE/(AA+U2)
         T  =  SQRT(TT)
         X0 = (AAX+U2*CX)*TT
         Y0 = (AAY+U2*CY)*TT
         Z0 = (AAZ+U2*CZ)*TT
         IN = -3+MM
         DO 400 I = 1,LIT
         IN = IN+3
         NI = I
         DO 400 J = 1,LJT
         JN = IN+J
         NJ = J
         CALL DERXYZ(0)
         XIN(JN   ) = XINT
         YIN(JN   ) = YINT
         ZIN(JN   ) = ZINT
         CALL DERXYZ(1)
         XIN(JN+36) = XINT
         YIN(JN+36) = YINT
         ZIN(JN+36) = ZINT
         IF(MSECND) THEN
            CALL DERXYZ(2)
            XIN(JN+72) = XINT
            YIN(JN+72) = YINT
            ZIN(JN+72) = ZINT
         END IF
  400    CONTINUE
         MM = MM+9
  420 CONTINUE
CC
      DO 460 I = 1,IJ
      NN    = IJN(I)
      NX    = IJX(I)
      NY    = IJY(I)
      NZ    = IJZ(I)
      DUMX  = ZERO
      DUMY  = ZERO
      DUMZ  = ZERO
      DUMXX = ZERO
      DUMYY = ZERO
      DUMZZ = ZERO
      DUMXY = ZERO
      DUMXZ = ZERO
      DUMYZ = ZERO
      MM    = 0
      DO 440 K = 1,NROOTS
      DUMX  = DUMX +XIN(NX+MM+36)*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
      DUMY  = DUMY +XIN(NX+MM   )*YIN(NY+MM+36)*ZIN(NZ+MM   )*W2(K)
      DUMZ  = DUMZ +XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+36)*W2(K)
      IF(MSECND) THEN
      DUMXX = DUMXX-XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
     1             +XIN(NX+MM+72)*YIN(NY+MM   )*ZIN(NZ+MM   )*W4(K)
      DUMYY = DUMYY-XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
     1             +XIN(NX+MM   )*YIN(NY+MM+72)*ZIN(NZ+MM   )*W4(K)
      DUMZZ = DUMZZ-XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
     1             +XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+72)*W4(K)
      DUMXY = DUMXY+XIN(NX+MM+36)*YIN(NY+MM+36)*ZIN(NZ+MM   )*W4(K)
      DUMXZ = DUMXZ+XIN(NX+MM+36)*YIN(NY+MM   )*ZIN(NZ+MM+36)*W4(K)
      DUMYZ = DUMYZ+XIN(NX+MM   )*YIN(NY+MM+36)*ZIN(NZ+MM+36)*W4(K)
      END IF
      MM  = MM+9
  440 CONTINUE
      DUM = DIJ(I)
      PUM = PIJ(I)
      IF(MFIRST.AND.IZC.NE.0) THEN
         EG(1,IZC) = EG(1,IZC) + DUM * DUMX
         EG(2,IZC) = EG(2,IZC) + DUM * DUMY
         EG(3,IZC) = EG(3,IZC) + DUM * DUMZ
      END IF
      IF(MSECND.AND.IZC.NE.0) THEN
         EH(1,MC) = EH(1,MC) + DUM * DUMXX
         EH(2,MC) = EH(2,MC) + DUM * DUMXY
         EH(3,MC) = EH(3,MC) + DUM * DUMXZ
         EH(4,MC) = EH(4,MC) + DUM * DUMXY
         EH(5,MC) = EH(5,MC) + DUM * DUMYY
         EH(6,MC) = EH(6,MC) + DUM * DUMYZ
         EH(7,MC) = EH(7,MC) + DUM * DUMXZ
         EH(8,MC) = EH(8,MC) + DUM * DUMYZ
         EH(9,MC) = EH(9,MC) + DUM * DUMZZ
      END IF
c     IF(MCCI  .OR.  MCPHF) THEN
      FDI(MX+NN) = FDI(MX+NN) + PUM * DUMX
      FDI(MY+NN) = FDI(MY+NN) + PUM * DUMY
      FDI(MZ+NN) = FDI(MZ+NN) + PUM * DUMZ
c     END IF
  460 CONTINUE
  480 CONTINUE
  500 CONTINUE
  520 CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
C
  580 CONTINUE
  600 CONTINUE
C
C
c     IF (GOPARR.AND.NXT) CALL DDI_DLBRESET
C
C
c     NEGH=3*NATFMO+9*(NATFMO*(NATFMO+1))/2
C
c     IF(GOPARR) CALL DDI_GSUMF(1621,EG,NEGH)
c     IF(MASWRK) THEN
c        WRITE(*,9058)
c        CALL HSSPRT(NATFMO,EG,EH)
c     END IF
c     IF(GOPARR) CALL DSCAL(NEGH,ONE/NPROC,EG,1)
C
C   INITIALIZATION FOR PARALLEL
C
c     NXT = IBTYP.EQ.1
c     IPCOUNT = ME - 1
c     NEXT = -1
c     MINE = -1
C    For J fragment
      DO 650 II = NCURSH+1,NSHELL
C
C           GO PARALLEL!
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 650
      END IF
C
      IAT  = KATOM(II)
      XI   = C(1,IAT)
      YI   = C(2,IAT)
      ZI   = C(3,IAT)
      I1   = KSTART(II)
      I2   = I1+KNG(II)-1
      LIT  = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
      DO 585 JJ = NCURSH+1,II
C
C           GO PARALLEL!
C
      IF((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 585
      END IF
C
      JAT  = KATOM(JJ)
      XJ   = C(1,JAT)
      YJ   = C(2,JAT)
      ZJ   = C(3,JAT)
      J1   = KSTART(JJ)
      J2   = J1 + KNG(JJ) - 1
      LJT  = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ) - MINJ
      IF(MFIRST) NROOTS = (LIT+LJT+1-2)/2 + 1
      IF(MSECND) NROOTS = (LIT+LJT+2-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      IANDJ = II .EQ. JJ
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 125 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      IF (IANDJ) MAX = I
      DO 125 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
      IDUM    = LOCI + I - L1I
      IJN(IJ) = (IDUM*(IDUM-1))/2 + LOCJ+J-L1I
      DFAC(IJ) = TWO
      IF (IANDJ .AND. I .EQ. J) DFAC(IJ) = ONE
  125 CONTINUE
C
C     ----- I PRIMITIVE
      JGMAX = J2
      DO 525 IG = I1,I2
      AI   = EX(IG)
      ARRI = AI*RR
      AXI  = AI*XI
      AYI  = AI*YI
      AZI  = AI*ZI
      CSI  = CS(IG)
      CPI  = CP(IG)
      CDI  = CD(IG)
C
C     ----- J PRIMITIVE
C
      IF (IANDJ) JGMAX = IG
      DO 505 JG = J1,JGMAX
      AJ  = EX(JG)
      AA  = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 505
C
      FAC = EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      AX  = (AXI+AJ*XJ)*AA1
      AY  = (AYI+AJ*YJ)*AA1
      AZ  = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      DOUBLE=IANDJ.AND.IG.NE.JG
      MAX = MAXJ
      NN = 0
      DO 365 I = MINI,MAXI
      GO TO (145,165,225,225,185,225,225,205,225,225),I
  145 DUM1 = CSI*FAC
      GO TO 225
  165 DUM1 = CPI*FAC
      GO TO 225
  185 DUM1 = CDI*FAC
      GO TO 225
  205 IF (NORM) DUM1 = DUM1*SQRT3
  225 IF (IANDJ) MAX = I
      DO 365 J = MINJ,MAX
      GO TO (245,285,345,345,305,345,345,325,345,345),J
  245 DUM2 = DUM1*CSJ
      IF ( .NOT. DOUBLE) GO TO 345
      IF (I .GT. 1) GO TO 265
      DUM2 = DUM2+DUM2
      GO TO 345
  265 DUM2 = DUM2+CSI*CPJ*FAC
      GO TO 345
  285 DUM2 = DUM1*CPJ
      IF (DOUBLE) DUM2 = DUM2+DUM2
      GO TO 345
  305 DUM2 = DUM1*CDJ
      IF (DOUBLE) DUM2 = DUM2+DUM2
      GO TO 345
  325 IF (NORM) DUM2 = DUM2*SQRT3
  345 NN = NN+1
      NDUM = IJN(NN)
      PIJ(NN) = DUM2
      DIJ(NN) = DUM2*DFAC(NN)*DJ(NDUM)
  365 CONTINUE
C
C     ..... HELLMANN-FEYNMAN TERM .....
C
      DUM = PI212*AA1
      DO 385 I = 1,IJ
      PIJ(I) = PIJ(I)*DUM
      DIJ(I) = DIJ(I)*DUM
  385 CONTINUE
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
      DO 485 IC = 1,NATI
      ZNUC = -ZAN(IC)
      MX   =  3 * L2J * (IC - 1)
      MY   = MX + L2J
      MZ   = MY + L2J
      CX   = C(1,IC)
      CY   = C(2,IC)
      CZ   = C(3,IC)
      IZC  = IWRK(IC)
      MC   = IZC * (IZC + 1)/2
      XX   = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS .LE. 3) CALL RT123
      IF(NROOTS .EQ. 4) CALL ROOT4
      MM = 0
      DO 425 K = 1,NROOTS
         U2 = AA*U(K)
         U4 = U2*U2
         WW = W(K)*ZNUC
         W2(K) = TWO *WW*U2
         W4(K) = FOUR*WW*U4
         TT = ONE/(AA+U2)
         T  = SQRT(TT)
         X0 = (AAX+U2*CX)*TT
         Y0 = (AAY+U2*CY)*TT
         Z0 = (AAZ+U2*CZ)*TT
         IN = -3+MM
         DO 405 I = 1,LIT
         IN = IN+3
         NI = I
         DO 405 J = 1,LJT
         JN = IN+J
         NJ = J
         CALL DERXYZ(0)
         XIN(JN   ) = XINT
         YIN(JN   ) = YINT
         ZIN(JN   ) = ZINT
         CALL DERXYZ(1)
         XIN(JN+36) = XINT
         YIN(JN+36) = YINT
         ZIN(JN+36) = ZINT
         IF(MSECND) THEN
            CALL DERXYZ(2)
            XIN(JN+72) = XINT
            YIN(JN+72) = YINT
            ZIN(JN+72) = ZINT
         END IF
  405    CONTINUE
         MM = MM+9
  425 CONTINUE
CC
      DO 465 I = 1,IJ
      NN    = IJN(I)
      NX    = IJX(I)
      NY    = IJY(I)
      NZ    = IJZ(I)
      DUMX  = ZERO
      DUMY  = ZERO
      DUMZ  = ZERO
      DUMXX = ZERO
      DUMYY = ZERO
      DUMZZ = ZERO
      DUMXY = ZERO
      DUMXZ = ZERO
      DUMYZ = ZERO
      MM    = 0
      DO 445 K = 1,NROOTS
      DUMX  = DUMX +XIN(NX+MM+36)*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
      DUMY  = DUMY +XIN(NX+MM   )*YIN(NY+MM+36)*ZIN(NZ+MM   )*W2(K)
      DUMZ  = DUMZ +XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+36)*W2(K)
      IF(MSECND) THEN
      DUMXX = DUMXX-XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
     1             +XIN(NX+MM+72)*YIN(NY+MM   )*ZIN(NZ+MM   )*W4(K)
      DUMYY = DUMYY-XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
     1             +XIN(NX+MM   )*YIN(NY+MM+72)*ZIN(NZ+MM   )*W4(K)
      DUMZZ = DUMZZ-XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
     1             +XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+72)*W4(K)
      DUMXY = DUMXY+XIN(NX+MM+36)*YIN(NY+MM+36)*ZIN(NZ+MM   )*W4(K)
      DUMXZ = DUMXZ+XIN(NX+MM+36)*YIN(NY+MM   )*ZIN(NZ+MM+36)*W4(K)
      DUMYZ = DUMYZ+XIN(NX+MM   )*YIN(NY+MM+36)*ZIN(NZ+MM+36)*W4(K)
      END IF
      MM  = MM+9
  445 CONTINUE
      DUM = DIJ(I)
      PUM = PIJ(I)
      IF(MFIRST.AND.IZC.NE.0) THEN
         EG(1,IZC) = EG(1,IZC) + DUM * DUMX
         EG(2,IZC) = EG(2,IZC) + DUM * DUMY
         EG(3,IZC) = EG(3,IZC) + DUM * DUMZ
      END IF
      IF(MSECND.AND.IZC.NE.0) THEN
         EH(1,MC) = EH(1,MC) + DUM * DUMXX
         EH(2,MC) = EH(2,MC) + DUM * DUMXY
         EH(3,MC) = EH(3,MC) + DUM * DUMXZ
         EH(4,MC) = EH(4,MC) + DUM * DUMXY
         EH(5,MC) = EH(5,MC) + DUM * DUMYY
         EH(6,MC) = EH(6,MC) + DUM * DUMYZ
         EH(7,MC) = EH(7,MC) + DUM * DUMXZ
         EH(8,MC) = EH(8,MC) + DUM * DUMYZ
         EH(9,MC) = EH(9,MC) + DUM * DUMZZ
      END IF
c     IF(MCCI  .OR.  MCPHF) THEN
      FDJ(MX+NN) = FDJ(MX+NN) + PUM * DUMX
      FDJ(MY+NN) = FDJ(MY+NN) + PUM * DUMY
      FDJ(MZ+NN) = FDJ(MZ+NN) + PUM * DUMZ
c     END IF
  465 CONTINUE
  485 CONTINUE
  505 CONTINUE
  525 CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
C
C
  585 CONTINUE
  650 CONTINUE

C
      IF (GOPARR.AND.NXT) CALL DDI_DLBRESET
c
c     NEGH=3*NATFMO+9*(NATFMO*(NATFMO+1))/2
c     IF(GOPARR) CALL DDI_GSUMF(1621,EG,NEGH)
c     IF(MASWRK) THEN
c        WRITE(*,9058)
c        CALL HSSPRT(NATFMO,EG,EH)
c     END IF
c     IF(GOPARR) CALL DSCAL(NEGH,ONE/NPROC,EG,1)



      RETURN
c9058 FORMAT(/1X,'GRADIENT AND HESSIAN AFTER -HFD-')
      END 
C
C
C
C*MODULE FMOH1A  *DECK ESDIM_HFD
      subroutine ESDIM_HFD(EH, DI,l1I,NATI,DJ,IWRK) 

      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION EH(9,*),DI(*),DJ(*),IWRK(*)
      DIMENSION DIJ10(78),GIJ10X(78),GIJ10Y(78),GIJ10Z(78),
     *          XIN(128),YIN(128),ZIN(128),DF(3),W2(4),FOE(36,9)
C
      LOGICAL GOPARR,DSKWRK,MASWRK,NXT
C
      PARAMETER (MXGTOT=20000, MXSH=5000, MXGSH=30, MXATM=2000)
C
c     COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOED/ GA(MXGSH),CSA(MXGSH),CPA(MXGSH),CDA(MXGSH),
     1                GB(MXGSH),CSB(MXGSH),CPB(MXGSH),CDB(MXGSH),
     2                GC(MXGSH),CSC(MXGSH),CPC(MXGSH),CDC(MXGSH),
     3                GD(MXGSH),CSD(MXGSH),CPD(MXGSH),CDD(MXGSH),
     4                XA,YA,ZA,XB,YB,ZB,RR,XC,YC,ZC,XD,YD,ZD,RRC,
     5                NGA,NGB,NGC,NGD
c     COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
c     COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /SHLOED/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL,
     1                MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL,
     2                NIJ,IJD,KLD,IJ,KL
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,
     *                NI,NJ,CX,CY,CZ
      COMMON /DIJOED/ NADIJ1( 78),NADIJ2(169),NADIJ3(132)
      COMMON /IJXOED/ NPIJX1( 78),NPIJX2(169),NPIJX3(132)
      COMMON /IJYOED/ NPIJY1( 78),NPIJY2(169),NPIJY3(132)
      COMMON /IJZOED/ NPIJZ1( 78),NPIJZ2(169),NPIJZ3(132)
c     COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
c    *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
c    *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
c    *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
c    *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
c    *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
c    *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
c    *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
c    *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
c    *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
c    *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
c    *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
c    *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,liactfg,lcrfrg,
c    *                lzlmfrgv,lYlmfrgv,lndtfrg,lf_mm,lg_mm,lmaxl30
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO,NZMTFMO,ifmobas,itmfmo(2)
C
      DATA PI212 /1.1283791670955D+00/
      DATA ZERO,ONE,TWO/0.0D+00,1.0D+00,2.0D+00/
      DATA RLN10 /2.30258D+00/
      DATA NFDIJ1 / 78/
C
      NRD = 1
      TOL = RLN10*ITOL
      CALL STVJDD
C
C     IF(MASWRK) write(*,*) "Entering Coupling terms in ES-DIM"
C   INITIALIZATION FOR PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
C
C     ----- I SHELL -----
C
      DO 600 II = 1,NCURSH
C
C           GO PARALLEL!
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 600
      END IF
C
      IAT  = KATOM(II)
      IZAT = IWRK(IAT)
      IF(IZAT.EQ.0) GO TO 600
      XI   = C(1,IAT)
      YI   = C(2,IAT)
      ZI   = C(3,IAT)
      XA   = XI
      YA   = YI
      ZA   = ZI
      I1   = KSTART(II)
      I2   = I1+KNG(II)-1
      LIT  = KTYPE(II) + NRD
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      NGA  = 0
      DO 10 I = I1,I2
      NGA = NGA + 1
      GA( NGA) = EX(I)
      CSA(NGA) = CS(I)
      CPA(NGA) = CP(I)
      CDA(NGA) = CD(I)
   10 CONTINUE
C
c     write(*,*) "IZAT =",IZAT
C
C     ----- J SHELL -----
C
      DO 580 JJ = 1,NCURSH
C
C     GO PARALLEL!
      IF((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 580
      END IF
C
      JAT  = KATOM(JJ)
      XJ   = C(1,JAT)
      YJ   = C(2,JAT)
      ZJ   = C(3,JAT)
      XB   = XJ
      YB   = YJ
      ZB   = ZJ
      J1   = KSTART(JJ)
      J2   = J1+KNG(JJ)-1
      LJT  = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NGB  = 0
      DO 20 J = J1,J2
      NGB = NGB + 1
      GB( NGB) = EX(J)
      CSB(NGB) = CS(J)
      CPB(NGB) = CP(J)
      CDB(NGB) = CD(J)
   20 CONTINUE
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      CALL STVIDX(1)
C
C     ----- DO LOOP OF NATOM -----
      DO 540 IC = NATI+1, NAT 
        ZNUC  = -ZAN(IC)
        CX    = C(1,IC)
        CY    = C(2,IC)
        CZ    = C(3,IC)
        ICZAT = IWRK(IC)
        IF(ICZAT.EQ.0) GO TO 540
C
      DO 25 I = 1,NFDIJ1
      GIJ10X(I) = ZERO
      GIJ10Y(I) = ZERO
   25 GIJ10Z(I) = ZERO
C
C     ----- I PRIMITIVE
C
      IIG = 0
      DO 520 IG = I1,I2
      IIG  = IIG + 1
      AI   = EX(IG)
      ARRI = AI*RR
      AXI  = AI*XI
      AYI  = AI*YI
      AZI  = AI*ZI
C
C     ----- J PRIMITIVE
C
      JJG = 0
      DO 500 JG = J1,J2
      JJG = JJG + 1
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 500
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      CALL STVDIJ(1,IIG,JJG,NIJ10,NIJ11,NIJ20,
     1            DIJ10,XIN,XIN,XIN,XIN,XIN,
     2            NFDIJ1,NFDIJ1,NFDIJ1)
C
C     ----- COUPLING TERM OF DERIVATIVES OF SHELL AND HAMILTONIAN ----
C
      DUM = PI212*AA1
      DO 30 I = 1,NIJ10
   30 DIJ10(I) = DIJ10(I) * DUM
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
      XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS .LE. 3) CALL RT123
      IF(NROOTS .EQ. 4) CALL ROOT4
      MM = 0
      DO 420 K = 1,NROOTS
      U2 = AA*U(K)
      WW = W(K)*ZNUC
      W2(K) = TWO*WW*U2
      TT = ONE/(AA+U2)
      T  =  SQRT(TT)
      X0 = (AAX+U2*CX)*TT
      Y0 = (AAY+U2*CY)*TT
      Z0 = (AAZ+U2*CZ)*TT
      IN = -4+MM
      DO 400 I = 1,LIT
      IN = IN+4
      NI = I
      DO 400 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL DERXYZ(0)
      XIN(JN) = XINT
      YIN(JN) = YINT
      ZIN(JN) = ZINT
      CALL DERXYZ(1)
      XIN(JN+64) = XINT
      YIN(JN+64) = YINT
      ZIN(JN+64) = ZINT
  400 CONTINUE
  420 MM = MM+16
      DO  40 I = 1,NIJ10
      N     = NADIJ1(I)
      NX    = NPIJX1(I)
      NY    = NPIJY1(I)
      NZ    = NPIJZ1(I)
      DUM   = DIJ10 (I)
      DUMX  = ZERO
      DUMY  = ZERO
      DUMZ  = ZERO
      MM    = 0
      DO 41 K = 1,NROOTS
      DUMX  = DUMX +XIN(NX+MM+64)*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
      DUMY  = DUMY +XIN(NX+MM   )*YIN(NY+MM+64)*ZIN(NZ+MM   )*W2(K)
      DUMZ  = DUMZ +XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+64)*W2(K)
   41 MM  = MM+16
      GIJ10X(N) = GIJ10X(N) + DUM * DUMX
      GIJ10Y(N) = GIJ10Y(N) + DUM * DUMY
      GIJ10Z(N) = GIJ10Z(N) + DUM * DUMZ
   40 CONTINUE
  500 CONTINUE
  520 CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
C
      IF(IZAT-ICZAT) 700,710,720
  700 FAC = ONE
      NN  = ICZAT * (ICZAT -1)/2 + IZAT
      GO TO 730
  710 FAC = two
      NN  = ICZAT * (ICZAT -1)/2 + IZAT
      GO TO 730
  720 FAC = ONE
      NN  = IZAT*(IZAT-1)/2 + ICZAT
  730 IF(ICZAT .LT. IZAT  ) GO TO 740
      
C
C     ----- TRANSFORMATION OF INTEGRALS TO ATOMIC ORBITALS -----
C
      CALL HFDFIJ(GIJ10X,DF,NFDIJ1,DI,FOE(1,1),FOE(1,2),FOE(1,3))
      EH(1,NN) = EH(1,NN) + FAC * DF(1) 
      EH(2,NN) = EH(2,NN) + FAC * DF(2) 
      EH(3,NN) = EH(3,NN) + FAC * DF(3) 
      CALL HFDFIJ(GIJ10Y,DF,NFDIJ1,DI,FOE(1,4),FOE(1,5),FOE(1,6))
      EH(4,NN) = EH(4,NN) + FAC * DF(1) 
      EH(5,NN) = EH(5,NN) + FAC * DF(2) 
      EH(6,NN) = EH(6,NN) + FAC * DF(3) 
      CALL HFDFIJ(GIJ10Z,DF,NFDIJ1,DI,FOE(1,7),FOE(1,8),FOE(1,9))
      EH(7,NN) = EH(7,NN) + FAC * DF(1) 
      EH(8,NN) = EH(8,NN) + FAC * DF(2) 
      EH(9,NN) = EH(9,NN) + FAC * DF(3) 
c     IF(IZAT.ne.IC) GO TO 539
      GO TO 539
  740 CALL HFDFIJ(GIJ10X,DF,NFDIJ1,DI,FOE(1,1),FOE(1,4),FOE(1,7))
      EH(1,NN) = EH(1,NN) + FAC * DF(1)  
      EH(4,NN) = EH(4,NN) + FAC * DF(2) 
      EH(7,NN) = EH(7,NN) + FAC * DF(3) 
      CALL HFDFIJ(GIJ10Y,DF,NFDIJ1,DI,FOE(1,2),FOE(1,5),FOE(1,8))
      EH(2,NN) = EH(2,NN) + FAC * DF(1)   
      EH(5,NN) = EH(5,NN) + FAC * DF(2) 
      EH(8,NN) = EH(8,NN) + FAC * DF(3) 
      CALL HFDFIJ(GIJ10Z,DF,NFDIJ1,DI,FOE(1,3),FOE(1,6),FOE(1,9))
      EH(3,NN) = EH(3,NN) + FAC * DF(1) 
      EH(6,NN) = EH(6,NN) + FAC * DF(2) 
      EH(9,NN) = EH(9,NN) + FAC * DF(3)  
  539 CONTINUE
  540 CONTINUE
C     ----- END OF *SHELL* LOOPS -----
  580 CONTINUE
  600 CONTINUE
C
c     IF (GOPARR.AND.NXT) CALL DDI_DLBRESET
C
C   INITIALIZATION FOR PARALLEL
C
      NRD = 1
      CALL STVJDD
c     NXT = IBTYP.EQ.1
c     IPCOUNT = ME - 1
c     NEXT = -1
c     MINE = -1
C
C     ----- I SHELL -----
      DO 605 II = NCURSH + 1, NSHELL
C
C           GO PARALLEL!
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 605
      END IF
C
      IAT  = KATOM(II)
      IZAT = IWRK(IAT)
      IF(IZAT.EQ.0) GO TO 605
      XI   = C(1,IAT)
      YI   = C(2,IAT)
      ZI   = C(3,IAT)
      XA   = XI
      YA   = YI
      ZA   = ZI
      I1   = KSTART(II)
      I2   = I1+KNG(II)-1
      LIT  = KTYPE(II) + NRD
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      NGA  = 0
      DO 15 I = I1,I2
      NGA = NGA + 1
      GA( NGA) = EX(I)
      CSA(NGA) = CS(I)
      CPA(NGA) = CP(I)
      CDA(NGA) = CD(I)
   15 CONTINUE
C
C     ----- J SHELL -----
C
      DO 585 JJ = NCURSH + 1, NSHELL 
C
C     GO PARALLEL!
      IF((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 585
      END IF
C
      JAT  = KATOM(JJ)
      XJ   = C(1,JAT)
      YJ   = C(2,JAT)
      ZJ   = C(3,JAT)
      XB   = XJ
      YB   = YJ
      ZB   = ZJ
      J1   = KSTART(JJ)
      J2   = J1+KNG(JJ)-1
      LJT  = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NGB  = 0
      DO 21 J = J1,J2
      NGB = NGB + 1
      GB( NGB) = EX(J)
      CSB(NGB) = CS(J)
      CPB(NGB) = CP(J)
      CDB(NGB) = CD(J)
   21 CONTINUE
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      CALL STVIDX(1)
C
C     ----- DO LOOP OF NATOM -----
      DO 545 IC = 1, NATI 
        ZNUC  = -ZAN(IC)
        CX    = C(1,IC)
        CY    = C(2,IC)
        CZ    = C(3,IC)
        ICZAT = IWRK(IC)
        if(ICZAT.EQ.0) GO TO 545
C
      DO 26 I = 1,NFDIJ1
      GIJ10X(I) = ZERO
      GIJ10Y(I) = ZERO
   26 GIJ10Z(I) = ZERO
C
C
C     ----- I PRIMITIVE
      IIG = 0
      DO 525 IG = I1,I2
      IIG  = IIG + 1
      AI   = EX(IG)
      ARRI = AI*RR
      AXI  = AI*XI
      AYI  = AI*YI
      AZI  = AI*ZI
C
C     ----- J PRIMITIVE
C
      JJG = 0
      DO 505 JG = J1,J2
      JJG = JJG + 1
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 505
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      CALL STVDIJ(1,IIG,JJG,NIJ10,NIJ11,NIJ20,
     1            DIJ10,XIN,XIN,XIN,XIN,XIN,
     2            NFDIJ1,NFDIJ1,NFDIJ1)
C
C     ----- COUPLING TERM OF DERIVATIVES OF SHELL AND HAMILTONIAN ----
C
      DUM = PI212*AA1
      DO 35 I = 1,NIJ10
   35 DIJ10(I) = DIJ10(I) * DUM
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
      XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS .LE. 3) CALL RT123
      IF(NROOTS .EQ. 4) CALL ROOT4
      MM = 0
      DO 425 K = 1,NROOTS
      U2 = AA*U(K)
      WW = W(K)*ZNUC
      W2(K) = TWO*WW*U2
      TT = ONE/(AA+U2)
      T  =  SQRT(TT)
      X0 = (AAX+U2*CX)*TT
      Y0 = (AAY+U2*CY)*TT
      Z0 = (AAZ+U2*CZ)*TT
      IN = -4+MM
      DO 405 I = 1,LIT
      IN = IN+4
      NI = I
      DO 405 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL DERXYZ(0)
      XIN(JN) = XINT
      YIN(JN) = YINT
      ZIN(JN) = ZINT
      CALL DERXYZ(1)
      XIN(JN+64) = XINT
      YIN(JN+64) = YINT
      ZIN(JN+64) = ZINT
  405 CONTINUE
  425 MM = MM+16
      DO  45 I = 1,NIJ10
      N     = NADIJ1(I)
      NX    = NPIJX1(I)
      NY    = NPIJY1(I)
      NZ    = NPIJZ1(I)
      DUM   = DIJ10 (I)
      DUMX  = ZERO
      DUMY  = ZERO
      DUMZ  = ZERO
      MM    = 0
      DO 42 K = 1,NROOTS
      DUMX  = DUMX +XIN(NX+MM+64)*YIN(NY+MM   )*ZIN(NZ+MM   )*W2(K)
      DUMY  = DUMY +XIN(NX+MM   )*YIN(NY+MM+64)*ZIN(NZ+MM   )*W2(K)
      DUMZ  = DUMZ +XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+64)*W2(K)
   42 MM  = MM+16
      GIJ10X(N) = GIJ10X(N) + DUM * DUMX
      GIJ10Y(N) = GIJ10Y(N) + DUM * DUMY
      GIJ10Z(N) = GIJ10Z(N) + DUM * DUMZ
   45 CONTINUE
  505 CONTINUE
  525 CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
      IF(IZAT-ICZAT) 705,715,725
  705 FAC = ONE
      NN  = ICZAT * (ICZAT -1)/2 + IZAT
      GO TO 735
  715 FAC = two
      NN  = ICZAT * (ICZAT -1)/2 + IZAT
      GO TO 735
  725 FAC = ONE
      NN  = IZAT*(IZAT-1)/2 + ICZAT
  735 IF(ICZAT .LT. IZAT  ) GO TO 745
      
C
C     ----- TRANSFORMATION OF INTEGRALS TO ATOMIC ORBITALS -----
C
      CALL HFDFIJ_ES(GIJ10X,DF,NFDIJ1,DJ,FOE(1,1),FOE(1,2),FOE(1,3),L1I)
      EH(1,NN) = EH(1,NN) + FAC * DF(1) 
      EH(2,NN) = EH(2,NN) + FAC * DF(2) 
      EH(3,NN) = EH(3,NN) + FAC * DF(3) 
      CALL HFDFIJ_ES(GIJ10Y,DF,NFDIJ1,DJ,FOE(1,4),FOE(1,5),FOE(1,6),L1I)
      EH(4,NN) = EH(4,NN) + FAC * DF(1) 
      EH(5,NN) = EH(5,NN) + FAC * DF(2) 
      EH(6,NN) = EH(6,NN) + FAC * DF(3) 
      CALL HFDFIJ_ES(GIJ10Z,DF,NFDIJ1,DJ,FOE(1,7),FOE(1,8),FOE(1,9),L1I)
      EH(7,NN) = EH(7,NN) + FAC * DF(1) 
      EH(8,NN) = EH(8,NN) + FAC * DF(2) 
      EH(9,NN) = EH(9,NN) + FAC * DF(3) 
c     IF(IZAT.ne.IC) GO TO 544
      GO TO 544
  745 CALL HFDFIJ_ES(GIJ10X,DF,NFDIJ1,DJ,FOE(1,1),FOE(1,4),FOE(1,7),L1I)
      EH(1,NN) = EH(1,NN) + FAC * DF(1)  
      EH(4,NN) = EH(4,NN) + FAC * DF(2) 
      EH(7,NN) = EH(7,NN) + FAC * DF(3) 
      CALL HFDFIJ_ES(GIJ10Y,DF,NFDIJ1,DJ,FOE(1,2),FOE(1,5),FOE(1,8),L1I)
      EH(2,NN) = EH(2,NN) + FAC * DF(1)   
      EH(5,NN) = EH(5,NN) + FAC * DF(2) 
      EH(8,NN) = EH(8,NN) + FAC * DF(3) 
      CALL HFDFIJ_ES(GIJ10Z,DF,NFDIJ1,DJ,FOE(1,3),FOE(1,6),FOE(1,9),L1I)
      EH(3,NN) = EH(3,NN) + FAC * DF(1) 
      EH(6,NN) = EH(6,NN) + FAC * DF(2) 
      EH(9,NN) = EH(9,NN) + FAC * DF(3)  
  544 CONTINUE
  545 CONTINUE
  585 CONTINUE
  605 CONTINUE
C
      IF (GOPARR.AND.NXT) CALL DDI_DLBRESET
C
c     NEGH=9*(NATFMO*(NATFMO+1))/2
c     IF(GOPARR) CALL DDI_GSUMF(1623,EH,NEGH)
c     IF(MASWRK) THEN
c        WRITE(*,9048)
c        CALL HSSPRT(NATFMO,EH,EH)
c     END IF
c     IF(GOPARR) CALL DSCAL(NEGH,ONE/NPROC,EH,1)
C
      RETURN
c9048 FORMAT(/1X,'GRADIENT AND HESSIAN AFTER -LFDSPD-')
      END
C*MODULE FMOH1A  *DECK HFDFIJ_ES
C>    @brief Calculate the elemens for Coupling terms in ES-DIM
C>
C>    @details  Calculate the elements used in second order derivative of 
C>              HFD terms for separated dimer
C>
C>    @author Hiroya Nakata
C>    - Apr, 2013- Subroutine writte
C>    --- INPUT---
C>    @param   GF      Derivative of gaussian function
C>    @param  NGF      Number of derivative of gaussian function
C>    @param   DAB     Density matrix
C>    @param  FOEX     Derivative element for X
C>    @param  FOEY     Derivative element for Y
C>    @param  FOEZ     Derivative element for Z
C>    @param  l1i      Number of atomic orbital for ifg
C>    --- OUTPUT ---
C>    @param   DF      Density contraction with derivatives
      SUBROUTINE HFDFIJ_ES(GF,DF,NGF,DAB,FOEX,FOEY,FOEZ,l1i)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION GF(NGF),DF(3),DAB(*),FOEX(36),FOEY(36),FOEZ(36)
C
      LOGICAL NONORM
C
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /SHLOED/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL,
     *                MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL,
     *                NIJ,IJD,KLD,IJ,KL
C
      DATA ZERO,SQRT3 /0.0D+00,1.73205080756888D+00/
      DATA TWO /2.0D+00/
C
      NONORM=NORMF.EQ.1.AND.NORMP.EQ.1
C
C     ----- CALCULATION OF FIRST AND SECOND DERIVATIVES USING -----
C     ----- TWO ELECTRON INTEGRALS                            -----
C
      IJFOE=1
      DX  = ZERO
      DY  = ZERO
      DZ  = ZERO
      DO 4100 J = MINJ,MAXJ
      JN = LOCJ + J - l1i
      NF = 13*(J-MINJ) + 1
      DO 4000 I = MINI,MAXI
      IN = LOCI + I - l1i
      IF(JN .GT. IN) GO TO 200
      IJN = IN*(IN-1)/2 + JN
      GO TO 210
  200 IJN = JN*(JN-1)/2 + IN
  210 DENSTY = TWO * DAB(IJN)
      GO TO (300,310,320,330,340,350,360,370,380,390),I
  300 X =            GF(NF+ 1)
      Y =            GF(NF+ 2)
      Z =            GF(NF+ 3)
      GO TO 400
  310 X =            GF(NF+ 4)+GF(NF   )
      Y =            GF(NF+ 7)
      Z =            GF(NF+ 8)
      GO TO 400
  320 X =            GF(NF+ 7)
      Y =            GF(NF+ 5)+GF(NF   )
      Z =            GF(NF+ 9)
      GO TO 400
  330 X =            GF(NF+ 8)
      Y =            GF(NF+ 9)
      Z =            GF(NF+ 6)+GF(NF   )
      GO TO 400
  340 X =            GF(NF+ 3)+GF(NF   )+GF(NF   )
      Y =            GF(NF+ 6)
      Z =            GF(NF+ 7)
      GO TO 400
  350 X =            GF(NF+ 8)
      Y =            GF(NF+ 4)+GF(NF+ 1)+GF(NF+ 1)
      Z =            GF(NF+ 9)
      GO TO 400
  360 X =            GF(NF+10)
      Y =            GF(NF+11)
      Z =            GF(NF+ 5)+GF(NF+ 2)+GF(NF+ 2)
      GO TO 400
  370 X =            GF(NF+ 6)+GF(NF+ 1)
      Y =            GF(NF+ 8)+GF(NF   )
      Z =            GF(NF+12)
      GO TO 395
  380 X =            GF(NF+ 7)+GF(NF+ 2)
      Y =            GF(NF+12)
      Z =            GF(NF+10)+GF(NF   )
      GO TO 395
  390 X =            GF(NF+12)
      Y =            GF(NF+ 9)+GF(NF+ 2)
      Z =            GF(NF+11)+GF(NF+ 1)
  395 IF(NONORM) GO TO 400
      X =            X*SQRT3
      Y =            Y*SQRT3
      Z =            Z*SQRT3
  400 CONTINUE
      DX  =   DX +   X*DENSTY
      DY  =   DY +   Y*DENSTY
      DZ  =   DZ +   Z*DENSTY
      FOEX(IJFOE) = X
      FOEY(IJFOE) = Y
      FOEZ(IJFOE) = Z
      IJFOE=IJFOE+1
 4000 CONTINUE
 4100 CONTINUE
      DF(1) = DX
      DF(2) = DY
      DF(3) = DZ
      RETURN
      END
C
C
C*MODULE FMOH1A  *DECK ESDIM_TVD
C>    @brief Calculate the TVD for ES-DIM
C>
C>    @details  Calculate first and second order derivative of 
C>              atomic orbital derivative terms for separated dimer
C>
C>    @author Hiroya Nakata
C>    - Apr, 2013- Subroutine writte
C>    --- INPUT---
C>    @param   DI      Density for IFG
C>    @param   L1I     Number of atomic orbital in IFG
C>    @param   L2I     Number of elements of triangula matrix of AO basis in IFG
C>    @param   FDI     Derivative of Fock matrix elements in IFG
C>    @param  NATI     number of atom in IFG
C>    @param   DJ      Density for JFG
C>    @param   L2J     Number of elements of triangula matrix of AO basis in JFG
C>    @param   FDJ     Derivative of Fock matrix elements in JFG
C>    --- OUTPUT ---
C>    @param    EG     Derivative of energy 
C>    @param    EH     Second Derivative of energy 
      subroutine ESDIM_TVD(EG,EH, 
     *                     DI,l1I,l2I,FDI,NATI, 
     *                     DJ,l2J,FDJ,IWRK,NC1) 

      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DOUBLE PRECISION FOE(36,9)
C
      LOGICAL GOPARR,DSKWRK,MASWRK,NXT
      LOGICAL FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
C
      DIMENSION EG(3,*),EH(9,*),DI(*),DJ(*),FDI(*),FDJ(*)
      DIMENSION DIJ10( 78),DIJ11(169),DIJ20(132),
     1          FFT10( 78),FFT11(169),FFT20(132),
     2          GIJ10( 78),GIJ11(169),GIJ20(132),
     3          XIN(   80),YIN(   80),ZIN(   80) 
      DIMENSION DF(3),DS(9,2),DOE(108),IWRK(*)
C
      PARAMETER (MXGTOT=20000, MXSH=5000, MXGSH=30, MXATM=2000)
C
c     COMMON /FMCOM / X(1)
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
c     COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
c     COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
c     COMMON /RESTAR/ TIMLIM,NREST,NREC,INTLOC,IST,JST,KST,LST
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /SHLOED/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL,
     *                MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL,
     *                NIJ,IJD,KLD,IJ,KL
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,
     *                NI,NJ,CX,CY,CZ
      COMMON /INFOED/ GA(MXGSH),CSA(MXGSH),CPA(MXGSH),CDA(MXGSH),
     *                GB(MXGSH),CSB(MXGSH),CPB(MXGSH),CDB(MXGSH),
     *                GC(MXGSH),CSC(MXGSH),CPC(MXGSH),CDC(MXGSH),
     *                GD(MXGSH),CSD(MXGSH),CPD(MXGSH),CDD(MXGSH),
     *                XA,YA,ZA,XB,YB,ZB,RR,XC,YC,ZC,XD,YD,ZD,RRC,
     *                NGA,NGB,NGC,NGD
      COMMON /DIJOED/ NADIJ1( 78),NADIJ2(169),NADIJ3(132)
      COMMON /IJXOED/ NPIJX1( 78),NPIJX2(169),NPIJX3(132)
      COMMON /IJYOED/ NPIJY1( 78),NPIJY2(169),NPIJY3(132)
      COMMON /IJZOED/ NPIJZ1( 78),NPIJZ2(169),NPIJZ3(132)
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO,NZMTFMO,ifmobas,itmfmo(2)
C
C
      DATA PI212 /1.1283791670955D+00/
      DATA ZERO,ONE,TWO /0.0D+00,1.0D+00,2.0D+00/
      DATA RLN10 /2.30258D+00/
      DATA NFDIJ1,NFDIJ2,NFDIJ3,NW / 78,169,132, 80/
C
c     IF(MASWRK) write(*,*) "Entering Atomic orbital terms in ES-DIM"
c
      TOL = RLN10*ITOL
      NRD=0
      IF(MFIRST) NRD = 1
      IF(MSECND) NRD = 2
C
      CALL STVJDD
C
C INITIALIZE PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
C
C     ----- I SHELL -----
C
      DO 1060 II = 1, NCURSH
C
C     ----- GO PARALLEL! -----
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 1060
      END IF
C
C
      IAT = KATOM(II)
      IZAT= IWRK(IAT)
C
c     write(*,*) "IAT = ",IAT,IZAT
      IFDX  = 3 * L2I * (IAT-1)
      IFDY  = IFDX + L2I
      IFDZ  = IFDY + L2I
      XI    = C(1,IAT)
      YI    = C(2,IAT)
      ZI    = C(3,IAT)
      XA    = XI
      YA    = YI
      ZA    = ZI
      I1    = KSTART(II)
      I2    = I1+KNG(II)-1
      LIT   = KTYPE(II) + NRD
      MINI  = KMIN(II)
      MAXI  = KMAX(II)
      LOCI  = KLOC(II)-MINI
      NGA   = 0
      DO 10 I = I1,I2
      NGA = NGA + 1
      GA( NGA) = EX(I)
      CSA(NGA) = CS(I)
      CPA(NGA) = CP(I)
      CDA(NGA) = CD(I)
   10 CONTINUE
C
C     ----- J SHELL -----
      DO 1040 JJ = 1, NCURSH
C
C           GO PARALLEL!
C
      IF ((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 1040
      END IF
C
      JAT = KATOM(JJ)
      JZAT= IWRK(JAT)
      XJ  = C(1,JAT)
      YJ  = C(2,JAT)
      ZJ  = C(3,JAT)
      XB  = XJ
      YB  = YJ
      ZB  = ZJ
      J1  = KSTART(JJ)
      J2  = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      IF(MSECND) LJT = LJT + 1
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NGB = 0
      DO 20 J = J1,J2
      NGB = NGB + 1
      GB( NGB) = EX(J)
      CSB(NGB) = CS(J)
      CPB(NGB) = CP(J)
      CDB(NGB) = CD(J)
   20 CONTINUE
      IF(MFIRST) NROOTS = (LIT+LJT-2  )/2 + 1
      IF(MSECND) NROOTS = (LIT+LJT-2  )/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
      CALL STVIDX(0)
C
      CALL VCLR(GIJ10,1,NFDIJ1)
      CALL VCLR(GIJ11,1,NFDIJ2)
      CALL VCLR(GIJ20,1,NFDIJ3)
C
C     ----- I PRIMITIVE
C
      IIG = 0
C
      DO 840 IG = I1,I2
      IIG = IIG + 1
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      DUM = AI+AI
C
C     ----- J PRIMITIVE
C
      JJG = 0
      DO 820 JG = J1,J2
      JJG = JJG + 1
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 820
C
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      CALL STVDIJ(0,IIG,JJG,NIJ10,NIJ11,NIJ20,
     1            DIJ10,DIJ11,DIJ20,FFT10,FFT11,FFT20,
     2            NFDIJ1,NFDIJ2,NFDIJ3)
C
C     ----- NUCLEAR ATTRACTION -----
C
      DUM = PI212*AA1
      IF(MFIRST) THEN
         DO 50 I = 1,NIJ10
   50    DIJ10(I) = DIJ10(I) * DUM
      END IF
      IF(MSECND) THEN
         DO 51 I = 1,NIJ11
   51    DIJ11(I) = DIJ11(I) * DUM
         DO 52 I = 1,NIJ20
   52    DIJ20(I) = DIJ20(I) * DUM
      END IF
C
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      DO 800 IC = NATI + 1, NAT
C
      ZNUC = -ZAN(IC)
      CX   = C(1,IC)
      CY   = C(2,IC)
      CZ   = C(3,IC)
      XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS .LE. 3) CALL RT123
      IF(NROOTS .EQ. 4) CALL ROOT4
      MM = 0
      DO 740 K = 1,NROOTS
      UU = AA*U(K)
      WW = W(K)*ZNUC
      TT = ONE/(AA+UU)
      T  = SQRT(TT)
      X0 = (AAX+UU*CX)*TT
      Y0 = (AAY+UU*CY)*TT
      Z0 = (AAZ+UU*CZ)*TT
      IN = -4+MM
      DO 720 I = 1,LIT
      IN = IN+4
      NI = I
      DO 720 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL DERXYZ(0)
      XIN(JN) = XINT
      YIN(JN) = YINT
      ZIN(JN) = ZINT*WW
  720 CONTINUE
  740 MM = MM+20
C
      IF(MFIRST) THEN
         DO 60 I = 1,NIJ10
            N  = NADIJ1(I)
            NX = NPIJX1(I)
            NY = NPIJY1(I)
            NZ = NPIJZ1(I)
            DUM = ZERO
            MM  = 0
            DO 61 K = 1,NROOTS
               DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
               MM = MM+20
   61       CONTINUE
            GIJ10(N) = GIJ10(N) + DUM*DIJ10(I)
   60    CONTINUE
      END IF
C
      IF(MSECND) THEN
         IF(JJ .GT. II ) GO TO 790
         DO 62 I =1,NIJ11
            N  = NADIJ2(I)
            NX = NPIJX2(I)
            NY = NPIJY2(I)
            NZ = NPIJZ2(I)
            DUM = ZERO
            MM  = 0
            DO K = 1,NROOTS
               DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
               MM = MM+20
            ENDDO
            GIJ11(N) = GIJ11(N) + DUM*DIJ11(I)
   62    CONTINUE
  790    CONTINUE
         DO 64 I =1,NIJ20
            N  = NADIJ3(I)
            NX = NPIJX3(I)
            NY = NPIJY3(I)
            NZ = NPIJZ3(I)
            DUM = ZERO
            MM  = 0
            DO 65 K = 1,NROOTS
               DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
               MM = MM+20
   65       CONTINUE
            GIJ20(N) = GIJ20(N) + DUM*DIJ20(I)
   64    CONTINUE
      END IF
C
  800 CONTINUE
C
C     ----- END OF PRIMITIVE LOOPS -----
C
  820 CONTINUE
  840 CONTINUE
C
C     ----- FORM INTEGRALS OVER DERIVATIVES -----
C
      DO 70 I = 1,9
   70 DS(I,2) = ZERO
      CALL TVFSIJ(GIJ10,GIJ20,DF,DS(1,1),DOE,NFDIJ1,NFDIJ3,DI,FOE)
c     IF(.NOT.MCPHF) GO TO 846
      N = -3
      DO 75 J = MINJ,MAXJ
      NJ = LOCJ + J
      DO 75 I = MINI,MAXI
      NI = LOCI + I
      IF(NI .GE. NJ) GO TO 842
      NIJ = NJ * (NJ-1)/2 + NI
      GO TO 844
  842 NIJ = NI * (NI-1)/2 + NJ
  844 N = N + 3
      FAC = ONE
      IF(NI .EQ. NJ) FAC = TWO
      FDI(IFDX+NIJ) = FDI(IFDX+NIJ) + FAC * DOE(N+1)
      FDI(IFDY+NIJ) = FDI(IFDY+NIJ) + FAC * DOE(N+2)
      FDI(IFDZ+NIJ) = FDI(IFDZ+NIJ) + FAC * DOE(N+3)
   75 CONTINUE
c 846 CONTINUE
      IAT = KATOM(II)
      JAT = KATOM(JJ)
      FAC = ONE
      IF(IAT .EQ. JAT .AND. II .NE. JJ) FAC = TWO
C
      IF(.NOT.MSECND .OR. JJ .GT. II) GO TO 850
         CALL TVFIFJ(GIJ11,DS(1,2),XIN,YIN,ZIN,NW,NFDIJ2,DI,FOE)
  850 CONTINUE
C
C     ----- CALCULATE CONTRIBUTION TO GRADIENT AND FORCE CONSTANTS -----
C
C
      IAT = KATOM(II)
      JAT = KATOM(JJ)
      IZAT= IWRK(IAT)
      JZAT= IWRK(JAT)
      FAC = ONE
      IF(IAT .EQ. JAT .AND. II .NE. JJ) FAC = TWO
C
      IIAT = IZAT*(IZAT-1)/2 + IZAT
      IF(IZAT.NE.0) THEN
        DO 80 I = 1,3
   80   EG(I, IZAT) = EG(I, IZAT) + DF(I) 
        DO 81 I = 1,9
           EH(I,IIAT) = EH(I,IIAT) + DS(I,1)
   81   CONTINUE
        IF(izat .ge. jzat.and.jzat.ne.0) then
          IJAT = izat*(izat-1)/2 + jzat 
          EH(1, IJAT) = EH(1, IJAT) + DS(1,2) * FAC 
          EH(2, IJAT) = EH(2, IJAT) + DS(2,2) * FAC 
          EH(3, IJAT) = EH(3, IJAT) + DS(3,2) * FAC 
          EH(4, IJAT) = EH(4, IJAT) + DS(4,2) * FAC 
          EH(5, IJAT) = EH(5, IJAT) + DS(5,2) * FAC 
          EH(6, IJAT) = EH(6, IJAT) + DS(6,2) * FAC 
          EH(7, IJAT) = EH(7, IJAT) + DS(7,2) * FAC 
          EH(8, IJAT) = EH(8, IJAT) + DS(8,2) * FAC 
          EH(9, IJAT) = EH(9, IJAT) + DS(9,2) * FAC 
        ELSE IF(jzat .gt. izat.and.jzat.ne.0) then 
          IJAT = jzat*(jzat-1)/2 + izat 
          EH(1, IJAT) = EH(1, IJAT) + DS(1,2) * FAC   
          EH(2, IJAT) = EH(2, IJAT) + DS(4,2) * FAC 
          EH(3, IJAT) = EH(3, IJAT) + DS(7,2) * FAC 
          EH(4, IJAT) = EH(4, IJAT) + DS(2,2) * FAC 
          EH(5, IJAT) = EH(5, IJAT) + DS(5,2) * FAC 
          EH(6, IJAT) = EH(6, IJAT) + DS(8,2) * FAC 
          EH(7, IJAT) = EH(7, IJAT) + DS(3,2) * FAC 
          EH(8, IJAT) = EH(8, IJAT) + DS(6,2) * FAC 
          EH(9, IJAT) = EH(9, IJAT) + DS(9,2) * FAC  
        END IF
      END IF
C
 1040 CONTINUE
 1060 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
C
C
c     IF (GOPARR) THEN
c         IF(NXT) CALL DDI_DLBRESET
c     END IF
c
C
      NRD=0
      IF(MFIRST) NRD = 1
      IF(MSECND) NRD = 2
C
      CALL STVJDD
C INITIALIZE PARALLEL
C
c     NXT = IBTYP.EQ.1
c     IPCOUNT = ME - 1
c     NEXT = -1
c     MINE = -1
c
C
C     ----- I SHELL -----
C
      DO 1065 II = NCURSH+1, NSHELL
C
C     ----- GO PARALLEL! -----
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 1065
      END IF
C
C
      IAT = KATOM(II)
C
      IZAT= IWRK(IAT)
C
c     write(*,*) "IAT = ",IAT,IZAT
      IFDX  = 3 * L2J * (IAT-1)
      IFDY  = IFDX + L2J
      IFDZ  = IFDY + L2J
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      XA = XI
      YA = YI
      ZA = ZI
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II) + NRD
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      NGA = 0
      DO 15 I = I1,I2
      NGA = NGA + 1
      GA( NGA) = EX(I)
      CSA(NGA) = CS(I)
      CPA(NGA) = CP(I)
      CDA(NGA) = CD(I)
   15 CONTINUE
C
C     ----- J SHELL -----
      DO 1045 JJ = NCURSH+1, NSHELL
C
C           GO PARALLEL!
C
      IF ((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 1045
      END IF
C
      JAT = KATOM(JJ)
      JZAT= IWRK(JAT)
      XJ  = C(1,JAT)
      YJ  = C(2,JAT)
      ZJ  = C(3,JAT)
      XB  = XJ
      YB  = YJ
      ZB  = ZJ
      J1  = KSTART(JJ)
      J2  = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      IF(MSECND) LJT = LJT + 1
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NGB = 0
      DO 25 J = J1,J2
      NGB = NGB + 1
      GB( NGB) = EX(J)
      CSB(NGB) = CS(J)
      CPB(NGB) = CP(J)
      CDB(NGB) = CD(J)
   25 CONTINUE
      IF(MFIRST) NROOTS = (LIT+LJT-2  )/2 + 1
      IF(MSECND) NROOTS = (LIT+LJT-2  )/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
      CALL STVIDX(0)
C
      CALL VCLR(GIJ10,1,NFDIJ1)
      CALL VCLR(GIJ11,1,NFDIJ2)
      CALL VCLR(GIJ20,1,NFDIJ3)
C
C     ----- I PRIMITIVE
C
      IIG = 0
C
      DO 845 IG = I1,I2
      IIG  = IIG + 1
      AI   = EX(IG)
      ARRI = AI*RR
      AXI  = AI*XI
      AYI  = AI*YI
      AZI  = AI*ZI
      DUM  = AI+AI
C
C     ----- J PRIMITIVE
C
      JJG = 0
      DO 825 JG = J1,J2
      JJG = JJG + 1
      AJ  = EX(JG)
      AA  = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 825
C
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      CALL STVDIJ(0,IIG,JJG,NIJ10,NIJ11,NIJ20,
     1            DIJ10,DIJ11,DIJ20,FFT10,FFT11,FFT20,
     2            NFDIJ1,NFDIJ2,NFDIJ3)
C
C     ----- NUCLEAR ATTRACTION -----
C
      DUM = PI212*AA1
      IF(MFIRST) THEN
         DO 55 I = 1,NIJ10
   55    DIJ10(I) = DIJ10(I) * DUM
      END IF
      IF(MSECND) THEN
         DO 56 I = 1,NIJ11
   56    DIJ11(I) = DIJ11(I) * DUM
         DO 57 I = 1,NIJ20
   57    DIJ20(I) = DIJ20(I) * DUM
      END IF
C
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      DO 805 IC = 1, NATI
C
      ZNUC = -ZAN(IC)
      CX   = C(1,IC)
      CY   = C(2,IC)
      CZ   = C(3,IC)
      XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS .LE. 3) CALL RT123
      IF(NROOTS .EQ. 4) CALL ROOT4
      MM = 0
      DO 745 K = 1,NROOTS
      UU = AA*U(K)
      WW = W(K)*ZNUC
      TT = ONE/(AA+UU)
      T  = SQRT(TT)
      X0 = (AAX+UU*CX)*TT
      Y0 = (AAY+UU*CY)*TT
      Z0 = (AAZ+UU*CZ)*TT
      IN = -4+MM
      DO 725 I = 1,LIT
      IN = IN+4
      NI = I
      DO 725 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL DERXYZ(0)
      XIN(JN) = XINT
      YIN(JN) = YINT
      ZIN(JN) = ZINT*WW
  725 CONTINUE
  745 MM = MM+20
C
      IF(MFIRST) THEN
         DO 165 I = 1,NIJ10
            N  = NADIJ1(I)
            NX = NPIJX1(I)
            NY = NPIJY1(I)
            NZ = NPIJZ1(I)
            DUM = ZERO
            MM  = 0
            DO 66 K = 1,NROOTS
               DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
               MM = MM+20
   66       CONTINUE
            GIJ10(N) = GIJ10(N) + DUM*DIJ10(I)
  165    CONTINUE
      END IF
C
      IF(MSECND) THEN
         IF(JJ .GT. II ) GO TO 795
         DO 67 I =1,NIJ11
            N  = NADIJ2(I)
            NX = NPIJX2(I)
            NY = NPIJY2(I)
            NZ = NPIJZ2(I)
            DUM = ZERO
            MM  = 0
            DO K = 1,NROOTS
               DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
               MM = MM+20
            ENDDO
            GIJ11(N) = GIJ11(N) + DUM*DIJ11(I)
   67    CONTINUE
  795    CONTINUE
         DO 68 I =1,NIJ20
            N  = NADIJ3(I)
            NX = NPIJX3(I)
            NY = NPIJY3(I)
            NZ = NPIJZ3(I)
            DUM = ZERO
            MM  = 0
            DO 69 K = 1,NROOTS
               DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
               MM = MM+20
   69       CONTINUE
            GIJ20(N) = GIJ20(N) + DUM*DIJ20(I)
   68    CONTINUE
      END IF
C
  805 CONTINUE
C
C     ----- END OF PRIMITIVE LOOPS -----
C
  825 CONTINUE
  845 CONTINUE
C
C     ----- FORM INTEGRALS OVER DERIVATIVES -----
C
      DO 170 I = 1,9
  170 DS(I,2) = ZERO
      CALL TVFSIJ_ES(GIJ10,GIJ20,DF,DS(1,1),DOE,NFDIJ1,
     *               NFDIJ3,DJ,FOE,L1I)
c     IF(.NOT.MCPHF) GO TO 851
      N = -3
      DO 76 J = MINJ,MAXJ
      NJ = LOCJ + J - L1I
      DO 76 I = MINI,MAXI
      NI = LOCI + I - L1I
      IF(NI .GE. NJ) GO TO 847
      NIJ = NJ * (NJ-1)/2 + NI
      GO TO 849
  847 NIJ = NI * (NI-1)/2 + NJ
  849 N = N + 3
      FAC = ONE
      IF(NI .EQ. NJ) FAC = TWO
      FDJ(IFDX+NIJ) = FDJ(IFDX+NIJ) + FAC * DOE(N+1)
      FDJ(IFDY+NIJ) = FDJ(IFDY+NIJ) + FAC * DOE(N+2)
      FDJ(IFDZ+NIJ) = FDJ(IFDZ+NIJ) + FAC * DOE(N+3)
   76 CONTINUE
c 851 CONTINUE
      IAT = KATOM(II)
      JAT = KATOM(JJ)
      FAC = ONE
      IF(IAT .EQ. JAT .AND. II .NE. JJ) FAC = TWO
C
      IF(.NOT.MSECND .OR. JJ .GT. II) GO TO 855
         CALL TVFIFJ_ES(GIJ11,DS(1,2),XIN,YIN,ZIN,NW,NFDIJ2,DJ,FOE,L1I)
  855 CONTINUE
C
C     ----- CALCULATE CONTRIBUTION TO GRADIENT AND FORCE CONSTANTS -----
C
C
      IAT = KATOM(II)
      JAT = KATOM(JJ)
      IZAT= IWRK(IAT)
      JZAT= IWRK(JAT)
      FAC = ONE
      IF(IAT .EQ. JAT .AND. II .NE. JJ) FAC = TWO
C
      IIAT = IZAT*(IZAT-1)/2 + IZAT
      IF(IZAT.NE.0) THEN
        DO 85 I = 1,3
   85   EG(I, IZAT) = EG(I, IZAT) + DF(I) 
        DO 86 I = 1,9
           EH(I,IIAT) = EH(I,IIAT) + DS(I,1)
   86   CONTINUE
        IF(izat .ge. jzat.and.jzat.ne.0) then
          IJAT = izat*(izat-1)/2 + jzat 
          EH(1, IJAT) = EH(1, IJAT) + DS(1,2) * FAC 
          EH(2, IJAT) = EH(2, IJAT) + DS(2,2) * FAC 
          EH(3, IJAT) = EH(3, IJAT) + DS(3,2) * FAC 
          EH(4, IJAT) = EH(4, IJAT) + DS(4,2) * FAC 
          EH(5, IJAT) = EH(5, IJAT) + DS(5,2) * FAC 
          EH(6, IJAT) = EH(6, IJAT) + DS(6,2) * FAC 
          EH(7, IJAT) = EH(7, IJAT) + DS(7,2) * FAC 
          EH(8, IJAT) = EH(8, IJAT) + DS(8,2) * FAC 
          EH(9, IJAT) = EH(9, IJAT) + DS(9,2) * FAC 
        ELSE IF(jzat .gt. izat.and.jzat.ne.0) then 
          IJAT = jzat*(jzat-1)/2 + izat 
          EH(1, IJAT) = EH(1, IJAT) + DS(1,2) * FAC   
          EH(2, IJAT) = EH(2, IJAT) + DS(4,2) * FAC 
          EH(3, IJAT) = EH(3, IJAT) + DS(7,2) * FAC 
          EH(4, IJAT) = EH(4, IJAT) + DS(2,2) * FAC 
          EH(5, IJAT) = EH(5, IJAT) + DS(5,2) * FAC 
          EH(6, IJAT) = EH(6, IJAT) + DS(8,2) * FAC 
          EH(7, IJAT) = EH(7, IJAT) + DS(3,2) * FAC 
          EH(8, IJAT) = EH(8, IJAT) + DS(6,2) * FAC 
          EH(9, IJAT) = EH(9, IJAT) + DS(9,2) * FAC  
        END IF
      END IF
C
 1045 CONTINUE
 1065 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
      IF (GOPARR) THEN
          IF(NXT) CALL DDI_DLBRESET
      END IF
C
C
      IF(MSECND) THEN
         NC0=NC1/3
         DO 1080 IAT = 1,NC0
            IIAT = ( IAT * (IAT-1) ) / 2 + IAT
            FAC  = ( EH(2,IIAT) + EH(4,IIAT) ) / TWO
            EH(2,IIAT) = FAC
            EH(4,IIAT) = FAC
            FAC  = ( EH(3,IIAT) + EH(7,IIAT) ) / TWO
            EH(3,IIAT) = FAC
            EH(7,IIAT) = FAC
            FAC  = ( EH(6,IIAT) + EH(8,IIAT) ) / TWO
            EH(6,IIAT) = FAC
            EH(8,IIAT) = FAC
 1080    CONTINUE
      END IF
C
C     ----- PRINTING SECTION -----
c       NEGH = 3*NATFMO+9*(NATFMO*(NATFMO+1))/2
c       IF(GOPARR) CALL DDI_GSUMF(1624,EG,NEGH)
c       IF(MASWRK) THEN
c          WRITE(*,9058)
c          CALL HSSPRT(NATFMO,EG,EH)
c       END IF
c       IF(GOPARR) CALL DSCAL(NEGH,ONE/NPROC,EG,1)
C
c9058 FORMAT(/1X,'GRADIENT AND HESSIAN AFTER -TVDSPD- in FMO')
      RETURN
      END
C
C*MODULE FMOH1A *DECK TVFSIJ_ES
C>    @brief Calculate the elemens for TVD terms in ES-DIM
C>
C>    @details  Calculate the elements used in second order derivative of 
C>              TVD terms for separated dimer
C>
C>    @author Hiroya Nakata
C>    - Apr, 2013- Subroutine writte
C>    --- INPUT---
C>    @param   GF      Derivative of gaussian function (first)
C>    @param   GS      Derivative of gaussian function (second)
C>    @param  NGF      Number of derivative of gaussian function
C>    @param  NGS      Number of second derivative of gaussian function
C>    @param   DAB     Density matrix
C>    @param  l1i      Number of atomic orbital for ifg
C>    --- OUTPUT ---
C>    @param   DOE     genuine derivatives (first)
C>    @param   FOE     genuine derivatives (second)
C>    @param   DF      Density contraction with derivatives (first)
C>    @param   DS      Density contraction with derivatives (second)
      SUBROUTINE TVFSIJ_ES(GF,GS,DF,DS,DOE,NGF,NGS,DAB,FOE,L1I)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL NONORM
      LOGICAL FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
C
      DIMENSION DAB(*),GF(NGF),GS(NGS),DF(3),DS(9),DOE(108),
     *          FOE(36,9)
C
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /SHLOED/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL,
     *                MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL,
     *                NIJ,IJD,KLD,IJ,KL
C
      DATA ZERO,SQRT3 /0.0D+00,1.73205080756888D+00/
      DATA TWO,THREE,FIVE /2.0D+00,3.0D+00,5.0D+00/
C
      IJFOE=1
C
C     ----- INITIAL SET OF PARAMETERS -----
C
      NONORM = NORMF .EQ. 1 .AND. NORMP .EQ. 1
      DX  = ZERO
      DY  = ZERO
      DZ  = ZERO
      DXX = ZERO
      DYX = ZERO
      DYY = ZERO
      DZX = ZERO
      DZY = ZERO
      DZZ = ZERO
      IJM = -3
C
C     ----- CALCULATION OF FIRST AND SECOND DERIVATIVES USING -----
C     ----- TWO ELECTRON INTEGRALS                            -----
C
      DO 4100 J = MINJ,MAXJ
      JN = LOCJ + J - L1I
      NF = 13*(J-MINJ) + 1
      NS = 22*(J-MINJ) + 1
      DO 4000 I = MINI,MAXI
      IN = LOCI + I - L1I
      IF(JN .GT. IN) GO TO 200
      IJN = IN*(IN-1)/2 + JN
      GO TO 210
  200 IJN = JN*(JN-1)/2 + IN
  210 DENSTY = TWO * DAB(IJN)
      IJM = IJM + 3
      IF(.NOT.FIRST) GO TO 500
      GO TO (300,310,320,330,340,350,360,370,380,390),I
  300 X =            GF(NF+ 1)
      Y =            GF(NF+ 2)
      Z =            GF(NF+ 3)
      GO TO 400
  310 X =            GF(NF+ 4)+GF(NF   )
      Y =            GF(NF+ 7)
      Z =            GF(NF+ 8)
      GO TO 400
  320 X =            GF(NF+ 7)
      Y =            GF(NF+ 5)+GF(NF   )
      Z =            GF(NF+ 9)
      GO TO 400
  330 X =            GF(NF+ 8)
      Y =            GF(NF+ 9)
      Z =            GF(NF+ 6)+GF(NF   )
      GO TO 400
  340 X =            GF(NF+ 3)+GF(NF   )+GF(NF   )
      Y =            GF(NF+ 6)
      Z =            GF(NF+ 7)
      GO TO 400
  350 X =            GF(NF+ 8)
      Y =            GF(NF+ 4)+GF(NF+ 1)+GF(NF+ 1)
      Z =            GF(NF+ 9)
      GO TO 400
  360 X =            GF(NF+10)
      Y =            GF(NF+11)
      Z =            GF(NF+ 5)+GF(NF+ 2)+GF(NF+ 2)
      GO TO 400
  370 X =            GF(NF+ 6)+GF(NF+ 1)
      Y =            GF(NF+ 8)+GF(NF   )
      Z =            GF(NF+12)
      GO TO 395
  380 X =            GF(NF+ 7)+GF(NF+ 2)
      Y =            GF(NF+12)
      Z =            GF(NF+10)+GF(NF   )
      GO TO 395
  390 X =            GF(NF+12)
      Y =            GF(NF+ 9)+GF(NF+ 2)
      Z =            GF(NF+11)+GF(NF+ 1)
  395 IF(NONORM) GO TO 400
      X =            X*SQRT3
      Y =            Y*SQRT3
      Z =            Z*SQRT3
  400 CONTINUE
      DX  =   DX +   X*DENSTY
      DY  =   DY +   Y*DENSTY
      DZ  =   DZ +   Z*DENSTY
      DOE(IJM+1) = X
      DOE(IJM+2) = Y
      DOE(IJM+3) = Z
  500 IF(.NOT.MSECND) GO TO 3900
      GO TO (600,610,620,630,640,650,660,670,680,690),I
  600 XX =           GS(NS   )+         GS(NS+ 4)
      YY =           GS(NS   )+         GS(NS+ 5)
      ZZ =           GS(NS   )+         GS(NS+ 6)
      YX =           GS(NS+ 7)
      ZX =           GS(NS+ 8)
      ZY =           GS(NS+ 9)
      GO TO 800
  610 XX =  THREE *  GS(NS+ 1)+         GS(NS+10)
      YY =           GS(NS+ 1)+         GS(NS+15)
      ZZ =           GS(NS+ 1)+         GS(NS+17)
      YX =           GS(NS+ 2)+         GS(NS+13)
      ZX =           GS(NS+ 3)+         GS(NS+14)
      ZY =           GS(NS+19)
      GO TO 800
  620 XX =           GS(NS+ 2)+         GS(NS+13)
      YY =  THREE *  GS(NS+ 2)+         GS(NS+11)
      ZZ =           GS(NS+ 2)+         GS(NS+18)
      YX =           GS(NS+ 1)+         GS(NS+15)
      ZX =           GS(NS+19)
      ZY =           GS(NS+ 3)+         GS(NS+16)
      GO TO 800
  630 XX =           GS(NS+ 3)+         GS(NS+14)
      YY =           GS(NS+ 3)+         GS(NS+16)
      ZZ =  THREE *  GS(NS+ 3)+         GS(NS+12)
      YX =           GS(NS+19)
      ZX =           GS(NS+ 1)+         GS(NS+17)
      ZY =           GS(NS+ 2)+         GS(NS+18)
      GO TO 800
  640 XX =  TWO   *  GS(NS   )+  FIVE * GS(NS+ 1)+GS(NS+ 7)
      YY =           GS(NS+ 1)+         GS(NS+16)
      ZZ =           GS(NS+ 1)+         GS(NS+17)
      YX =  TWO   *  GS(NS+ 4)+         GS(NS+10)
      ZX =  TWO   *  GS(NS+ 5)+         GS(NS+11)
      ZY =           GS(NS+19)
      GO TO 800
  650 XX =           GS(NS+ 2)+         GS(NS+16)
      YY =  TWO   *  GS(NS   )+  FIVE * GS(NS+ 2)+GS(NS+ 8)
      ZZ =           GS(NS+ 2)+         GS(NS+18)
      YX =  TWO   *  GS(NS+ 4)+         GS(NS+12)
      ZX =           GS(NS+20)
      ZY =  TWO   *  GS(NS+ 6)+         GS(NS+13)
      GO TO 800
  660 XX =           GS(NS+ 3)+         GS(NS+17)
      YY =           GS(NS+ 3)+         GS(NS+18)
      ZZ =  TWO   *  GS(NS   )+  FIVE * GS(NS+ 3)+GS(NS+ 9)
      YX =           GS(NS+21)
      ZX =  TWO   *  GS(NS+ 5)+         GS(NS+14)
      ZY =  TWO   *  GS(NS+ 6)+         GS(NS+15)
      GO TO 800
  670 XX =  THREE *  GS(NS+ 4)+         GS(NS+10)
      YY =  THREE *  GS(NS+ 4)+         GS(NS+12)
      ZZ =           GS(NS+ 4)+         GS(NS+21)
      YX =           GS(NS   )+         GS(NS+ 1)+GS(NS+ 2)+GS(NS+16)
      ZX =           GS(NS+ 6)+         GS(NS+19)
      ZY =           GS(NS+ 5)+         GS(NS+20)
      GO TO 695
  680 XX =  THREE *  GS(NS+ 5)+         GS(NS+11)
      YY =           GS(NS+ 5)+         GS(NS+20)
      ZZ =  THREE *  GS(NS+ 5)+         GS(NS+14)
      YX =           GS(NS+ 6)+         GS(NS+19)
      ZX =           GS(NS   )+         GS(NS+ 1)+GS(NS+ 3)+GS(NS+17)
      ZY =           GS(NS+ 4)+         GS(NS+21)
      GO TO 695
  690 XX =           GS(NS+ 6)+         GS(NS+19)
      YY =  THREE *  GS(NS+ 6)+         GS(NS+13)
      ZZ =  THREE *  GS(NS+ 6)+         GS(NS+15)
      YX =           GS(NS+ 5)+         GS(NS+20)
      ZX =           GS(NS+ 4)+         GS(NS+21)
      ZY =           GS(NS   )+         GS(NS+ 2)+GS(NS+ 3)+GS(NS+18)
  695 IF(NONORM) GO TO 800
      XX =           XX*SQRT3
      YY =           YY*SQRT3
      ZZ =           ZZ*SQRT3
      YX =           YX*SQRT3
      ZX =           ZX*SQRT3
      ZY =           ZY*SQRT3
  800 CONTINUE
      DXX = DXX   +  XX*DENSTY
      DYY = DYY   +  YY*DENSTY
      DZZ = DZZ   +  ZZ*DENSTY
      DYX = DYX   +  YX*DENSTY
      DZX = DZX   +  ZX*DENSTY
      DZY = DZY   +  ZY*DENSTY
C
      FOE(IJFOE,1) = XX
      FOE(IJFOE,2) = YX
      FOE(IJFOE,3) = ZX
      FOE(IJFOE,4) = YX
      FOE(IJFOE,5) = YY
      FOE(IJFOE,6) = ZY
      FOE(IJFOE,7) = ZX
      FOE(IJFOE,8) = ZY
      FOE(IJFOE,9) = ZZ
      IJFOE=IJFOE+1
C
 3900 CONTINUE
 4000 CONTINUE
 4100 CONTINUE
      DF(1) = DX
      DF(2) = DY
      DF(3) = DZ
      DS(1) = DXX
      DS(5) = DYY
      DS(9) = DZZ
      DS(2) = DYX
      DS(4) = DYX
      DS(3) = DZX
      DS(7) = DZX
      DS(6) = DZY
      DS(8) = DZY
      RETURN
      END
C
C*MODULE FMOH1A *DECK TVFIFJ_ES
C>    @brief Calculate the elemens for TVD terms in ES-DIM
C>
C>    @details  Calculate the elements used in second order derivative of 
C>              TVD terms for separated dimer
C>
C>    @author Hiroya Nakata
C>    - Apr, 2013- Subroutine writte
C>    --- INPUT---
C>    @param   GS      Derivative of gaussian function (second)
C>    @param  NGS      Number of second derivative of gaussian function
C>    @param   WX      Derivative elemtns for X
C>    @param   WY      Derivative elemtns for Y
C>    @param   WZ      Derivative elemtns for Z
C>    @param   NW      Number of W
C>    @param   DAB     Density matrix
C>    @param  l1i      Number of atomic orbital for ifg
C>    --- OUTPUT ---
C>    @param   FOE     genuine derivatives (second)
C>    @param   DS      Density contraction with derivatives (second)
      SUBROUTINE TVFIFJ_ES(GS,DS,WX,WY,WZ,NW,NGS,DAB,FOE,L1I)
C
      IMPLICIT DOUBLE PRECISION( A-H,O-Z)
C
      LOGICAL NONORM
C
      DIMENSION GS(NGS),WX(NW),WY(NW),WZ(NW),DS(9),DAB(*),FOE(36,9)
      DIMENSION MIF(25),MJF(25),MJS(25)
C
      COMMON /JDDSTV/ NFORB(4),NSORB(4),NFTABL(13,4),NSTABL(22,4),
     *                LFTABL(20,2),LSTABL(35,2)
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /SHLOED/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL,
     *                MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL,
     *                NIJ,IJD,KLD,IJ,KL
C
      DATA ZERO,TWO,SQRT3 /0.0D+00,2.0D+00,1.73205080756888D+00/
C
CDIR$ NOVECTOR
C
      IJFOE=1
C
C     ----- ZERO CLEAR OF WORKING ARREYS -----
C
      NONORM = NORMF .EQ. 1 .AND. NORMP .EQ. 1
      DXX = ZERO
      DYX = ZERO
      DZX = ZERO
      DXY = ZERO
      DYY = ZERO
      DZY = ZERO
      DXZ = ZERO
      DYZ = ZERO
      DZZ = ZERO
      DO 10 I = 1,NW
      WX(I) = ZERO
      WY(I) = ZERO
   10 WZ(I) = ZERO
C
C     ----- SETTING INITIAL PARAMETERS -----
C
      NJ0  = MAXJ-MINJ+1
      NTYPJ= NJ0/2+1
      LTYPJ= NTYPJ/4+1
      NJ1  = NFORB(NTYPJ)
      DO 20 I = MINI,MAXI
   20 MIF(I) = 13 *(I-MINI) + 1
      DO 22 J = 1,NJ1
      NORBJ  = NFTABL(J,NTYPJ)
      NORBJ  = LFTABL(NORBJ,LTYPJ)
      MJS(J) = 13 * (NORBJ-1) + 1
   22 MJF(J) =       NORBJ-1
      DO 4100 J = 1,NJ1
      NF  = MJS(J)
      JF2 = MJF(J)
      DO 4000 I = MINI,MAXI
      GO TO (300,310,320,330,340,350,360,370,380,390),I
  300 X =            GS(NF+ 1)
      Y =            GS(NF+ 2)
      Z =            GS(NF+ 3)
      GO TO 400
  310 X =            GS(NF+ 4)+          GS(NF   )
      Y =            GS(NF+ 7)
      Z =            GS(NF+ 8)
      GO TO 400
  320 X =            GS(NF+ 7)
      Y =            GS(NF+ 5)+          GS(NF   )
      Z =            GS(NF+ 9)
      GO TO 400
  330 X =            GS(NF+ 8)
      Y =            GS(NF+ 9)
      Z =            GS(NF+ 6)+          GS(NF   )
      GO TO 400
  340 X =            GS(NF+ 3)+GS(NF   )+GS(NF   )
      Y =            GS(NF+ 6)
      Z =            GS(NF+ 7)
      GO TO 400
  350 X =            GS(NF+ 8)
      Y =            GS(NF+ 4)+GS(NF+1)+GS(NF+1)
      Z =            GS(NF+ 9)
      GO TO 400
  360 X =            GS(NF+10)
      Y =            GS(NF+11)
      Z =            GS(NF+ 5)+GS(NF+ 2)+GS(NF+ 2)
      GO TO 400
  370 X =            GS(NF+ 6)+          GS(NF+ 1)
      Y =            GS(NF+ 8)+          GS(NF   )
      Z =            GS(NF+12)
      GO TO 395
  380 X =            GS(NF+ 7)+          GS(NF+ 2)
      Y =            GS(NF+12)
      Z =            GS(NF+10)+          GS(NF   )
      GO TO 395
  390 X =            GS(NF+12)
      Y =            GS(NF+ 9)+GS(NF+ 2)
      Z =            GS(NF+11)+GS(NF+ 1)
  395 IF(NONORM) GO TO 400
      X =            X*SQRT3
      Y =            Y*SQRT3
      Z =            Z*SQRT3
  400 MAD = MIF(I) + JF2
      WX(MAD) =      WX(MAD) + X
      WY(MAD) =      WY(MAD) + Y
      WZ(MAD) =      WZ(MAD) + Z
 4000 CONTINUE
 4100 CONTINUE
      DO 5100 J = MINJ,MAXJ
      JN = LOCJ + J - L1I
      DO 5000 I = MINI,MAXI
      IN = LOCI + I - L1I
      IF(JN .GT. IN) GO TO 500
      IJN = IN*(IN-1)/2 + JN
      GO TO 510
  500 IJN = JN*(JN-1)/2 + IN
  510 DENSTY = TWO * DAB(IJN)
C
      NF = MIF(I)
      GO TO (600,610,620,630,640,650,660,670,680,690),J
  600 XX = WX(NF+ 1)
      YX = WX(NF+ 2)
      ZX = WX(NF+ 3)
      XY = WY(NF+ 1)
      YY = WY(NF+ 2)
      ZY = WY(NF+ 3)
      XZ = WZ(NF+ 1)
      YZ = WZ(NF+ 2)
      ZZ = WZ(NF+ 3)
      GO TO 700
  610 XX = WX(NF+ 4)+WX(NF   )
      YX = WX(NF+ 7)
      ZX = WX(NF+ 8)
      XY = WY(NF+ 4)+WY(NF   )
      YY = WY(NF+ 7)
      ZY = WY(NF+ 8)
      XZ = WZ(NF+ 4)+WZ(NF   )
      YZ = WZ(NF+ 7)
      ZZ = WZ(NF+ 8)
      GO TO 700
  620 XX = WX(NF+ 7)
      YX = WX(NF+ 5)+WX(NF   )
      ZX = WX(NF+ 9)
      XY = WY(NF+ 7)
      YY = WY(NF+ 5)+WY(NF   )
      ZY = WY(NF+ 9)
      XZ = WZ(NF+ 7)
      YZ = WZ(NF+ 5)+WZ(NF   )
      ZZ = WZ(NF+ 9)
      GO TO 700
  630 XX = WX(NF+ 8)
      YX = WX(NF+ 9)
      ZX = WX(NF+ 6)+WX(NF   )
      XY = WY(NF+ 8)
      YY = WY(NF+ 9)
      ZY = WY(NF+ 6)+WY(NF   )
      XZ = WZ(NF+ 8)
      YZ = WZ(NF+ 9)
      ZZ = WZ(NF+ 6)+WZ(NF   )
      GO TO 700
  640 XX = WX(NF+ 3)+WX(NF   )+WX(NF   )
      YX = WX(NF+ 6)
      ZX = WX(NF+ 7)
      XY = WY(NF+ 3)+WY(NF   )+WY(NF   )
      YY = WY(NF+ 6)
      ZY = WY(NF+ 7)
      XZ = WZ(NF+ 3)+WZ(NF   )+WZ(NF   )
      YZ = WZ(NF+ 6)
      ZZ = WZ(NF+ 7)
      GO TO 700
  650 XX = WX(NF+ 8)
      YX = WX(NF+ 4)+WX(NF+ 1)+WX(NF+ 1)
      ZX = WX(NF+ 9)
      XY = WY(NF+ 8)
      YY = WY(NF+ 4)+WY(NF+ 1)+WY(NF+ 1)
      ZY = WY(NF+ 9)
      XZ = WZ(NF+ 8)
      YZ = WZ(NF+ 4)+WZ(NF+ 1)+WZ(NF+ 1)
      ZZ = WZ(NF+ 9)
      GO TO 700
  660 XX = WX(NF+10)
      YX = WX(NF+11)
      ZX = WX(NF+ 5)+WX(NF+ 2)+WX(NF+ 2)
      XY = WY(NF+10)
      YY = WY(NF+11)
      ZY = WY(NF+ 5)+WY(NF+ 2)+WY(NF+ 2)
      XZ = WZ(NF+10)
      YZ = WZ(NF+11)
      ZZ = WZ(NF+ 5)+WZ(NF+ 2)+WZ(NF+ 2)
      GO TO 700
  670 XX = WX(NF+ 6)+WX(NF+ 1)
      YX = WX(NF+ 8)+WX(NF   )
      ZX = WX(NF+12)
      XY = WY(NF+ 6)+WY(NF+ 1)
      YY = WY(NF+ 8)+WY(NF   )
      ZY = WY(NF+12)
      XZ = WZ(NF+ 6)+WZ(NF+ 1)
      YZ = WZ(NF+ 8)+WZ(NF   )
      ZZ = WZ(NF+12)
      GO TO 695
  680 XX = WX(NF+ 7)+WX(NF+ 2)
      YX = WX(NF+12)
      ZX = WX(NF+10)+WX(NF   )
      XY = WY(NF+ 7)+WY(NF+ 2)
      YY = WY(NF+12)
      ZY = WY(NF+10)+WY(NF   )
      XZ = WZ(NF+ 7)+WZ(NF+ 2)
      YZ = WZ(NF+12)
      ZZ = WZ(NF+10)+WZ(NF   )
      GO TO 695
  690 XX = WX(NF+12)
      YX = WX(NF+ 9)+WX(NF+ 2)
      ZX = WX(NF+11)+WX(NF+ 1)
      XY = WY(NF+12)
      YY = WY(NF+ 9)+WY(NF+ 2)
      ZY = WY(NF+11)+WY(NF+ 1)
      XZ = WZ(NF+12)
      YZ = WZ(NF+ 9)+WZ(NF+ 2)
      ZZ = WZ(NF+11)+WZ(NF+ 1)
  695 IF(NONORM) GO TO 700
      XX = XX*SQRT3
      YX = YX*SQRT3
      ZX = ZX*SQRT3
      XY = XY*SQRT3
      YY = YY*SQRT3
      ZY = ZY*SQRT3
      XZ = XZ*SQRT3
      YZ = YZ*SQRT3
      ZZ = ZZ*SQRT3
  700 DXX = DXX + XX*DENSTY
      DYX = DYX + YX*DENSTY
      DZX = DZX + ZX*DENSTY
      DXY = DXY + XY*DENSTY
      DYY = DYY + YY*DENSTY
      DZY = DZY + ZY*DENSTY
      DXZ = DXZ + XZ*DENSTY
      DYZ = DYZ + YZ*DENSTY
      DZZ = DZZ + ZZ*DENSTY
C
      FOE(IJFOE,1) = XX
      FOE(IJFOE,2) = YX
      FOE(IJFOE,3) = ZX
      FOE(IJFOE,4) = XY
      FOE(IJFOE,5) = YY
      FOE(IJFOE,6) = ZY
      FOE(IJFOE,7) = XZ
      FOE(IJFOE,8) = YZ
      FOE(IJFOE,9) = ZZ
      IJFOE=IJFOE+1
C
 5000 CONTINUE
 5100 CONTINUE
      DS(1) = DXX
      DS(2) = DYX
      DS(3) = DZX
      DS(4) = DXY
      DS(5) = DYY
      DS(6) = DZY
      DS(7) = DXZ
      DS(8) = DYZ
      DS(9) = DZZ
C
CDIR$ VECTOR
C
      RETURN
      END

C
