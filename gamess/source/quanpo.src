c 18 Apr 16 - DGF - tweaks for FMO 5.2, renamed RATTLE redundant with TINKER
C  3 Feb 16 - HL,NMT,FCC,HBZ,RL
C                 - CHARMM, AMBER, OPLSAA, MMFF94 TOP/PAR FILES,
C                   FAST-LIST, FIXSOL, RATTLE, MEAN-FIELD,
C                   POL-DAMP, FREE ENERGY, EWALD,
C                   UMBRELLA SAMPLING, IR AND VIB SPECTRA. 
C                   166 SUBROUTINES, 159 KEYWORDS
C 22 Aug 14 - FZ  - PAD THE INFOTD COMMON FOR ALPHKWD
C  4 Jul 14 - FZ  - PAD THE INFOTD COMMON FOR BETA
C  9 APR 12 - FZ  - PAD THE INFOTD COMMON FOR TPA
C 11 AUG 11 - HL,NMT,DJS  - QUANPOL IMPROVEMENTS
C 15 APR 11 - HL,NMT,DJS  - NEW MODULE FOR QUANPOL FORCE FIELD
C
C*MODULE QUANPO  *DECK QUANPOL
!>
!> @brief    main QuanPol set up routine
!>
!> @author   Hui Li group
!>           - Nov 2015
!> 
!> @details  read in and check all keywords
!>           set up QuanPol memory
!>
!> @note     the QuanPol memory is not returned
!>
      SUBROUTINE QUANPOL
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DOUBLE PRECISION MD
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, THREE=3.0D+00,
     *           TWO=2.0D+00, HUGE=1.0D+30*TOBOHR)
      PARAMETER (FOURTHIRD=4.0D+00/3.0D+00)
C
      CHARACTER*8 TEXT
      CHARACTER*10 FRAG1(10),FRAG2(10),DFSA(10),RDENATM(10),WORD
      CHARACTER*60 TOPFILE,TOPAMIA,TOPNUCA,TOPNTER,TOPCTER,
     *             PARFILE,PARFIL2,PARFIL3
      CHARACTER*100 WD100
C
      DIMENSION RMASS(200), IVIBMMP(200)
      DIMENSION LKQM(2,200),IATREP(200),CRPIAT(4,200),ZRPIAT(4,200)
      DIMENSION MPAIRA(2),MPAIRB(2)
      DIMENSION KFREEATMP(501),KFREEBTMP(501)
      DIMENSION LSTRATTMP(2,10),DSTRATTMP(10)
      DIMENSION LQATOM(50),RQATOM(50)
C
      COMMON /FFDAMP/ IPODAMP,IPO1213,SCRFAC,RSCRFAC,SCRF2,SCRF3,SCRF4
      COMMON /FFDFS / TIMDFS,NDFS,LFFDFSC,LFFDFSCAV,
     *                LFFDFSC0,LFFDFSA,LFFDFSN,KDFS
      COMMON /FFEWLD/ SPLIT,IEWALD,KEWALD,NKVEC,
     *                L1KVEC,L2KVEC,LFFRKEXPEL,LFFRKVEC,
     *                LFFKVEC,LFFTCHCH,LFFCOSCH,LFFSINCH
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFFRE2/ N1FFAT,N1BOND,N1ANGL,N1DIHR,N1DIHB,N1CMAP,N1WAGG,
     *                N2FFAT,N2BOND,N2ANGL,N2DIHR,N2DIHB,N2CMAP,N2WAGG,
     *                LFF2ATMNAM,LFF2CORD,LFF2ZANF,LFF2ZMAS,
     *                LFF2ONEMAS,LFF2CHARG,LFF2POL,
     *                LFF2SIG,LFF2EPS,LFF2SIG2,LFF2EPS2,
     *                LFF2BOND0,LFF2FCBOND,LFF2ANGL0,LFF2FCANGL,
     *                LFF2FCWAGG,LFF2DIHB0,LFF2FCDIHB,
     *                LFF2VROT,LFF2NNN,LFF2GAMA,LFF2IPAIR,
     *                LFF2KLIST,LFF2LLIST,LFF2MLIST,LFF2NLIST,
     *                LFF2VEL,LFF2QMVEL,LFF2CLPR,LFF2ZLPR,
     *                LFF2NLPR,LFF2MAPLST,LFFKFREEA,LFFKFREEB,
     *                LFFLISTB2A,NTODOA,LFFNONLSA,NTODOB,LFFNONLSB,
     *                N1213A,LFFL1213A,N1213B,LFFL1213B,
     *                N14A,LFFL14A,N14B,LFFL14B,
     *                NTODOPMA,LFFNONLSPMA,NBONDPMA,LFFLSBONDPMA,
     *                NANGLPMA,LFFLSANGLPMA,NDIHRPMA,LFFLSDIHRPMA,
     *                NDIHBPMA,LFFLSDIHBPMA,NWAGGPMA,LFFLSWAGGPMA,
     *                NCMAPPMA,LFFLSCMAPPMA,
     *                N1213PMA,LFFL1213PMA,
     *                N14PMA,LFFL14PMA,
     *                NTODOPMB,LFFNONLSPMB,NBONDPMB,LFFLSBONDPMB,
     *                NANGLPMB,LFFLSANGLPMB,NDIHRPMB,LFFLSDIHRPMB,
     *                NDIHBPMB,LFFLSDIHBPMB,NWAGGPMB,LFFLSWAGGPMB,
     *                NCMAPPMB,LFFLSCMAPPMB,
     *                N1213PMB,LFFL1213PMB,
     *                N14PMB,LFFL14PMB
      COMMON /FFMAX / MXFFAT,MXBOND,MXANGL,MXDIHR,MXDIHB,MXCMAP,
     *                MXWAGG
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFMPT2/ MXMMTP,LFFKBLST,LFFFCSTBD,LFFFCDIHR,
     *                LFFFCLJTP,LFFNTYPE,
     *                LFF2KBLST,LFF2FCSTBD,LFF2FCDIHR,
     *                LFF2FCLJTP,LFF2NTYPE
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /FFQMFE/ ETOTQA,EMP2QA,ESTATEQA,ETOTQB,EMP2QB,ESTATEQB,
     *                FRE1QMMM,FRE2QMMM,
     *                VIRA(3),VIRB(3),
     *                LFFFFGRDA,LFFFFGRDB,LFFQMGRDA,LFFQMGRDB,
     *                LFFCORDX,LFFCHARGX,LFFPOLX,LFFSIGX,LFFEPSX,
     *                LFFSIG2X,LFFEPS2X,LFFCLPRX,LFFZLPRX,LFFCHGIMX,
     *                LFFCRDIMX,LFFLISTAQM,LFFLISTBQM,NIMGPTX,
     *                LFFDIPIMX,LFFQADIMX,LFFOCTIMX
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2,
     *                NRDEN,NBINRDEN,LFFPRO,LFFNRDPRATM,
     *                LFFRDPRATM,LFFDIESTEP,LFFDI1STEP
      COMMON /FFRMDF/ RDIST1,RDIST2,RINTRV,NRATM1,NRATM2,INTRSTP
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRNUM/ JJRAND(3),NRANDOM,NRANDOM0
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
      COMMON /FFUMBR/ UMBFC,UMBR0,UMBSIZE,
     *                NUMBBIN,NUMBATM(6),NUMBTYP,LFFUMBHIS,
     *                UM2FC,UM2R0,UM2SIZE,
     *                NUM2BIN,NUM2ATM(6),NUM2TYP,LFFUM2HIS
      COMMON /FFVIB / JVIBOUT,NVIBMM,LFFDIPSTEP,LFFVELSTEP,LFFIVIBMM,
     *                LFFDQMSTEP,LFFVQMSTEP,LFFDM1STEP,LFFVM1STEP,
     *                LFFDMMSTEP,LFFVMMSTEP,LFFQMVSTEP,LFFMMVSTEP
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /MACHIN/ NWDVAR,MAXFM,MAXSM,LIMFM,LIMSM
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA ENERGY,GRAD /8HENERGY  ,8HGRADIENT/
      DATA OPTMIZ,MD   /8HOPTIMIZE,8HMD      /
      DATA HSSIAN      /8HHESSIAN /
      DATA RHF,UHF,ROHF/8HRHF     ,8HUHF     ,8HROHF    /
      DATA GVB,RMC     /8HGVB     ,8HMCSCF   /
      DATA RNONE       /8HNONE    /
      DATA EXCITE,SPNFLP          /8HEXCITE  ,8HSPNFLP  /
      DATA ALDET,GENCI,FSOCI      /8HALDET   ,8HGENCI   ,8HFSOCI   /
      DATA ORMAS,CIS,GUGA         /8HORMAS   ,8HCIS     ,8HGUGA    /
      DATA SFCIS       /8HSFCIS   /
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C     FENGCHAO CUI, HUI LI, JUN 2012 (ADD FREE ENERGY)
C     HUI LI, MAY 2014, ADD HESSIAN
C
      NFFAT=0
      NBOND=0
      NANGL=0
      NDIHR=0
      NDIHB=0
      NCMAP=0
      NWAGG=0
C
C     -- SEARCH THE INPUT FOR $QUANPO, $FFDATA OR $FFPDB --
C
      IERR     = 0
      IQUANPO  = 0
      IFFDATA  = 0
      IFFDATB  = 0
      IFFPDB   = 0
C
      IEOF = 0
      CALL SEQREW(IR)
      CALL FNDGRP(IR,' $QUANPO',IEOF)
      IF(IEOF.EQ.0) IQUANPO = 1
      IF(IEOF.GT.0) GOTO 51
      CALL FNDGRP(IR,' $QUANPO',IEOF)
      IF(IEOF.EQ.0) IQUANPO = 2
      IF(IQUANPO.GT.1) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: ONLY ONE $QUANPO GROUP IS ALLOWED IN INPUT.'
         CALL ABRT
      END IF
C
  51  CONTINUE
      IEOF = 0
      CALL SEQREW(IR)
      CALL FNDGRP(IR,' $FFDATA',IEOF)
      IF(IEOF.EQ.0) IFFDATA = 1
      IF(IEOF.GT.0) GOTO 52
      CALL FNDGRP(IR,' $FFDATA',IEOF)
      IF(IEOF.EQ.0) IFFDATA = 2
      IF(IFFDATA.GT.1) THEN 
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: ONLY ONE $FFDATA GROUP IS ALLOWED IN INPUT.'
         CALL ABRT
      END IF
C
  52  CONTINUE
      IEOF = 0
      CALL SEQREW(IR)
      CALL FNDGRP(IR,' $FFDATB',IEOF)
      IF(IEOF.EQ.0) IFFDATB = 1
      IF(IEOF.GT.0) GOTO 53
      CALL FNDGRP(IR,' $FFDATB',IEOF)
      IF(IEOF.EQ.0) IFFDATB = 2
      IF(IFFDATB.GT.1) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: ONLY ONE $FFDATB GROUP IS ALLOWED IN INPUT.'
         CALL ABRT
      END IF
C
  53  CONTINUE
      IEOF = 0
      CALL SEQREW(IR)
      CALL FNDGRP(IR,' $FFPDB ',IEOF)
      IF(IEOF.EQ.0) IFFPDB  = 1
      IF(IEOF.GT.0) GOTO 54
      CALL FNDGRP(IR,' $FFPDB ',IEOF)
      IF(IEOF.EQ.0) IFFPDB  = 2
      IF(IFFPDB.GT.1) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: ONLY ONE $FFPDB GROUP IS ALLOWED IN INPUT.'
         CALL ABRT
      END IF
C
  54  CONTINUE
C
      IF((IQUANPO+IFFDATA+IFFPDB).EQ.0) RETURN
C
C     -- PRINT THE BANNER --
C
      IF(MASWRK)THEN
      WRITE(IW,*)' '
      WRITE(IW,*)'==================================================='
      WRITE(IW,*)'                      QUANPOL                      '
      WRITE(IW,*)' QUANTUM CHEMISTRY POLARIZABLE FORCE FIELD PROGRAM '
      WRITE(IW,*)'    NANDUN THELLAMUREGE, DEJUN SI, FENGCHAO CUI    '
      WRITE(IW,*)'            HONGBO ZHU, RUI LAI, HUI LI            '
      WRITE(IW,*)'                 LI RESEARCH GROUP                 '
      WRITE(IW,*)'          UNIVERSITY OF NEBRASKA-LINCOLN           '
      WRITE(IW,*)'            - - - - 2016-02-03 - - - -             '
      WRITE(IW,*)'    QM/MM AND QM/MM/CONTINUUM STYLE CALCULATION    '
      WRITE(IW,*)'   USING HF, DFT, GVB, MCSCF, MP2, TDDFT METHODS   '
      WRITE(IW,*)'==================================================='
      END IF
C
      IF(IFFDATA.EQ.1 .AND. IFFPDB.EQ.1) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: PLEASE USE ONLY ONE, $FFDATA OR $FFPDB.'
         CALL ABRT
      END IF
C
C     QUANPOL CAN ONLY USE RUNTYP=ENERGY, GRADIENT, OPTIMIZE, MD
C                                 HESSIAN
C
      IF(RUNTYP.NE.GRAD    .AND.RUNTYP.NE.OPTMIZ.AND.
     *   RUNTYP.NE.MD      .AND.RUNTYP.NE.ENERGY.AND.
     *   RUNTYP.NE.HSSIAN) THEN
         IF(MASWRK)WRITE(IW,'(1X,/1X,A/)')
     *   'ERROR: QUANPOL CAN ONLY USE RUNTYP=',
     *   'ENERGY, GRADIENT, OPTIMIZE, HESSIAN, MD.'
         CALL ABRT
      END IF
C
C     QUANPOL CANNOT USE G, H, I TYPE FUNCTIONS
C
      IF(NAT.GT.0) THEN
         CALL BASCHK(LMAX)
         IF(LMAX.GE.4) THEN
            IF(MASWRK)WRITE(IW,'(1X,/1X,A/)')
     *      'ERROR: QUANPOL CANNOT HANDLE G, H, I TYPE FUNCTIONS.'
            CALL ABRT
         END IF
      END IF
C
C     -- DEFAULTS FOR $QUANPO KEYWORDS
C
      MXFFAT =    -1
      MXBOND =    -1
      MXANGL =    -1
      MXDIHR =    -1
      MXCMAP =    -1
      MXDIHB =    -1
      MXWAGG =    -1
      MXMMTP =   120
      MXMMTP =   MAX(120,MXMMTP)
      MXLIST1=  1700
      MXLIST2=  3400
      MXCHECK=   100
      BUFWID1= 1.0D+00*TOBOHR
      BUFWID2= 4.0D+00*TOBOHR
      IF(NAT.GT.0) THEN
         BUFWID1= 3.0D+00*TOBOHR
         BUFWID2= 3.0D+00*TOBOHR
      END IF
      NFOLD  =     0
      RFOLD  =  ZERO
      ICOMBIN=     0
      IDELETE=     0
      ISCOOP =     0
      INTALG =     1       !  1=BEEMAN; 2=VELOCITY VERLET
      POLTOL =  1.0D-09
      XBOX   = -1.0D+00*TOBOHR
      YBOX   = -1.0D+00*TOBOHR
      ZBOX   = -1.0D+00*TOBOHR
      RDAMP  =  3.0D+00*TOBOHR
      IEWALD =     0
      SPLIT  = 0.15D+00
      KEWALD =    10
      ISWITCH=     1
      ISHIFT =     4 ! 0=NO SHIFTING
C                    ! 1=ATOM-ATOM SHIFTING S=[1-(R/SWRB)]**2
C                    ! 2=ATOM-ATOM CONTINUUM-LIKE SHIFTING
C                    ! 3=ATOM-ATOM SHIFTING S=[1-(R/SWRB)]
C                    ! 4=ATOM-ATOM SHIFTING S=[1-(R/SWRB)**2]**2
      IPOLSHF=     0
      SWRA   = -10.0D+00*TOBOHR
      SWRB   = -12.0D+00*TOBOHR
      SWRAQ  = -10.0D+00*TOBOHR
      SWRBQ  = -12.0D+00*TOBOHR
      CENTX  =  HUGE       !    PBC MASTER BOX CENTER, 
      CENTY  =  HUGE       !    ALSO THE SPHERE CENTER IN RXN FIELD.
      CENTZ  =  HUGE       !    REQUIRED WHEN ADDING WATER BOX.
      IDOCHG =     1
      IDOPOL =    -1
      IDOLJ  =     1
      IDOCMAP=     1
      IFIXSOL=     0
      FIXTOL =  1.0D-10
      MXFFTS =     1
      NTSATM =    60
      ISPHSOL=     0
      IRATTLE=     0       !    1 = RATTLE FOR BONDS INVOLVING H ATOMS
C                          !    2 = RATTLE FOR ALL BONDS (BUT NOT FOR U-B TERM)
C                          !    10= 1 + RIGID WATER
C                          !    20= 2 + RIGID WATER
      JRATTLE=     0       !    1 = RATTLE FOR USER DEFINED ATOM PAIRS
      IRATQM =     0
      MXRATT =   200
      RATOLC = 1.0D-05
      RATOLV = 1.0D-08
      SCALRAT=-1.0D+00
      RXNEPS =  78.39D+00
      RSPHSOL=  -1.0D+00*TOBOHR
      SPHRAD =  -1.0D+00*TOBOHR
      SPHSIG =  1.50D+00*TOBOHR  ! 1.50 IS GOOD FOR WAT301
      SPHEPS =  0.15D+00*TOHART  ! 0.15 IS GOOD FOR WAT301
      DT     =  1.0D-15
      NRDF   =     0
      NRDEN  =     0
      DELRDF = 0.05D+00*TOBOHR
      NDFS   =     0
      TIMDFS =  3.0D-12  ! TIME INTERVAL IN DIFFUSION COEFFICIENT CALCULATION
      NATPDB =     0
      NFIXQM =     0
      NFIXMM =     0
      NFIXQMB=     0
      NFIXMMB=     0
      NRIJMM =     0
      NRIJQM =     0
      NRMSD  =     0
      NGYRA  =     0
      NDIEL  =     1
      TIMGYRA=  1.0D-12  ! TIME INTERVAL IN RADIUS OF GYRATION CALCULATION
      NRALL  =     0
      TIMRALL=  1.0D-12  ! TIME INTERVAL IN PAIR DISTANCES CALCULATION
      NSTEP  =  1000
      IHESS  =    -1
      TEMP0  =   -1.0D+00
      PRES0  =  1.0D+00  !  1 BAR
      ITSTAT =     0  !  1=BERENDSEN; 2=ANDERSEN
      IPSTAT =     0  !  1=BERENDSEN; 3=3D-BERENDSEN
      BERENDT=  200.0D-15
      BERENDP=  200.0D-15 
      JOUT   =     1  !  PRINT OUT ENERGY      EVERY JOUT STEPS
      KOUT   =     1
      IF(RUNTYP.EQ.MD) 
     *KOUT   =   100  !  PRINT OUT COORDINATES EVERY KOUT STEPS
      KOUTPBC=     0
      LOUT   =     0
      NFFTYP =    -1  !  20000: CHARMM
C                     !  30000: AMBER
C                     !  40000: OPLSAA
C                     !  50000: MMFF94
      NFFFILE=     0  !  2: CHARMM  STYLE TOP/PAR FILES
C                     !  3: AMBER   STYLE TOP/PAR FILES
      JTOPFILE(60)=0
      JTOPAMIA(60)=0
      JTOPNUCA(60)=0
      JTOPNTER(60)=0
      JTOPCTER(60)=0
      JPARFILE(60)=0
      JPARFIL2(60)=0
      JPARFIL3(60)=0
      DO III = 1, 60
         TOPFILE(III:III)=' '
         TOPAMIA(III:III)=' '
         TOPNUCA(III:III)=' '
         TOPNTER(III:III)=' '
         TOPCTER(III:III)=' '
         PARFILE(III:III)=' '
         PARFIL2(III:III)=' '
         PARFIL3(III:III)=' '
      ENDDO
      WT14LJ = -1.0D+00   ! SCALING FACT FOR 1-4 LJ INTERACTION
      WT14CH = -1.0D+00   ! SCALING FACT FOR 1-4 LJ CHARGE-CHARGE INTERACION
      RETAIN =  0.5D+00   ! SCALING FACT FOR MM COVALENT TERMS INVOLVING
C                         ! A WEAK QM H ATOM
C                         ! RETAIN = 1.0 MEANS FULL RETAIN
C                         ! RETAIN = 0.0 MEANS NO   RETAIN
      NQMREP =     0
      IADDWAT=     0  !  1=PBC WATER;  2=SPHERICAL WATER
      ITYPWAT=     0
      IADDNA1=     0  !  SO MANY NA+  IONS BE ADDED AT RANDOM SITES
      IADDK1 =     0  !  SO MANY K+   IONS BE ADDED AT RANDOM SITES
      IADDCA2=     0  !  SO MANY CA2+ IONS BE ADDED AT RANDOM SITES
      IADDMG2=     0  !  SO MANY MG2+ IONS BE ADDED AT RANDOM SITES
      IADDCL1=     0  !  SO MANY CL-  IONS BE ADDED AT RANDOM SITES
      JADDNA1=     0  !  IF = 1, NA+  IONS BE ADDED TO DNA/RNA PO4 SITES
      JADDK1 =     0  !  IF = 1, K+   IONS BE ADDED TO DNA/RNA PO4 SITES
      MEANFLD=     0
      MFQMCHG=    10
      MFMERGE=    20
      NRANDOM=     0  !  IF 0 USE FIXED SEEDS, IF 1 SEEDS FROM TIME/DATE
      LJQMMM =     1  !  IF 0 USE QMMMREP, IF 1 USE MM LJ
      LJSIGMA=     0
      INTCHG =     1
      EFIELDX=  ZERO
      EFIELDY=  ZERO
      EFIELDZ=  ZERO
      IFEPTYP=     0
      IFEPTOP=     0
      WSIMUL = 0.0D+00
      WPERT1 = 1.0D+00
      WPERT2 =-1.0D+00
      ISOFTCR=     0
      SOFTALJ=  0.3D+00
      SOFTACH=  2.8D+00*TOBOHR*TOBOHR
      SCFTYP2= SCFTYP
      TDDFT2 = TDDFTYP
      MPLEVL2= MPLEVL
      CITYP2 = CITYP
      ICHARG2= ICH
      MULT2  = MUL
      IDOQM2 =     0
      ENFFQM2=  ZERO
      ENPAV2 =  ZERO
      MATOMA =   NAT
      MATOMB =     0
      MCHARGA=   ICH
      MCHARGB=     0
      MULTA  =   MUL
      MULTB  =     1
      NUMBTYP=     0
      NUMBBIN=     1
      UMBSIZE=  0.0D+00
      NUM2TYP=     0
      NUM2BIN=     1
      UM2SIZE=  0.0D+00
      NVIBMM =     0
      IPODAMP=     0
      APODAMP= -1.0D+00
      IPO1213=     0
      NRADMM = 0
      NRADQM = 0
      RALLMM = ZERO
      RALLQM = ZERO
      NACTMM = 0
      NACTQM = 0
      MMHESS = 0
      JUMBUP = 0
      NRATM1 = 0
      NRATM2 = 0
      RDIST1 = ZERO
      RDIST2 = ZERO
      INTRSTP= 1
      RINTRV = ZERO
      NRPNTS = 0
      CALL VICLR(LKQM,1,400)
      CALL VICLR(IATREP,1,200)
      CALL VCLR(CRPIAT,1,800)
      CALL VCLR(ZRPIAT,1,800)
      CALL VICLR(IFIXQM,1,200)
      CALL VICLR(IFIXQMB,1,200)
      CALL VICLR(IFIXMM,1,200)
      CALL VICLR(IFIXMMB,1,200)
      CALL VICLR(KFREEATMP,1,501)
      CALL VICLR(KFREEBTMP,1,501)
      CALL VICLR(LSTRATTMP,1,20)
      CALL VCLR(DSTRATTMP,1,10)
      CALL VCLR(VIR,1,3)
      CALL VCLR(VIRRAT,1,3)
      CALL VICLR(NUMBATM,1,6)
      CALL VICLR(NUM2ATM,1,6)
      CALL VICLR(IVIBMMP,1,200)
      CALL VICLR(LQATOM,1,50)
      CALL VCLR(RQATOM,1,50)
      CALL VICLR(MPAIRA,1,2)
      CALL VICLR(MPAIRB,1,2)
      CALL VCLR(RADMM,1,200)
      CALL VCLR(RADQM,1,200)
      CALL VICLR(LACTMM,1,2020)
      CALL VICLR(LACTQM,1,2020)
      CALL VICLR(KOUTACT,1,2)
C
C
C     -- READ $QUANPO KEYWORDS
C
      CALL TIMIT(1)
      IF(MASWRK) WRITE(IW,'(/1X,A/)')
     *'READ $QUANPO GROUP...'
      LINERD = 0
      IF(IQUANPO.EQ.1)THEN
         IEOF = 0
         CALL SEQREW(IR)
         CALL OPNCRD(IR,-IW)
  90     CONTINUE
         CALL RDCARD('$QUANPO',IEOF)
         LINERD = LINERD + 1
         IF(IEOF.EQ.1) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: END OF FILE LOOKING FOR $QUANPO GROUP.'
            CALL ABRT
         END IF
         TEXT='        '
         LGSTR=-8
         CALL GSTRNG(TEXT,LGSTR)
         IF(TEXT.NE.'$QUANPO ') GOTO 90
      END IF
C
      IERROR = 0
 100  CONTINUE
      TEXT='        '
      LGSTR=-8
      CALL GSTRNG(TEXT,LGSTR)
      IF(TEXT.EQ.'$END    '.OR.TEXT.EQ.'END     ') GOTO 120
      IF(TEXT.EQ.'        ') THEN
         IEOF = 0
         CALL RDCARD('$QUANPO',IEOF)
         LINERD = LINERD + 1
         IF(IEOF.EQ.1) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: END OF FILE LOOKING FOR $QUANPO GROUP.'
            CALL ABRT
         END IF
         GOTO 100
      END IF
C
      IF(TEXT.EQ.'$QUANPO ') THEN
        GOTO 100
      END IF
      IF(TEXT.EQ.'DT      ') THEN
        DT     = RFIND('DT      ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'NSTEP   ') THEN
        NSTEP  = IFIND('NSTEP   ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'IHESS   ') THEN
        IHESS  = IFIND('IHESS   ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'INTALG  ') THEN
        INTALG = IFIND('INTALG  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'NRANDOM ') THEN
        NRANDOM = IFIND('NRANDOM',IERR)
        NRANDOM0= NRANDOM
        GOTO 100
      END IF
      IF(TEXT.EQ.'TEMP0   ') THEN
        TEMP0  = RFIND('TEMP0   ',IERR)
        IF(TEMP0.LT.ZERO) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: TEMP0 CANNOT BE NEGATIVE.'
           IERROR = IERROR + 1
        END IF
        IF(TEMP0.LT.1.0D-20) TEMP0 = 1.0D-20
        GOTO 100
      END IF
      IF(TEXT.EQ.'NFOLD   ') THEN
        NFOLD  = IFIND('NFOLD   ',IERR)
        IF(NFOLD.GT.15) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NFOLD CANNOT BE GREATER THAN 15'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'RFOLD   ') THEN
        RFOLD  = RFIND('RFOLD   ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'ICOMBIN ') THEN
        ICOMBIN= IFIND('ICOMBIN ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MATCHAB ') THEN
         MPAIRA(1) = IFIND('MPAIRA1',IERR)
         MPAIRA(2) = IFIND('MPAIRA2',IERR)
         MPAIRB(1) = IFIND('MPAIRB1',IERR)
         MPAIRB(2) = IFIND('MPAIRB2',IERR)
         GOTO 100
      END IF
      IF(TEXT.EQ.'IDELETE ') THEN
        IDELETE= IFIND('IDELETE ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'ISCOOP  ') THEN
        ISCOOP= IFIND('ISCOOP ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'POLTOL  ') THEN
        RFOLD  = RFIND('POLTOL  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MXFFAT  ') THEN
        MXFFAT = IFIND('MXFFAT  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MXBOND  ') THEN
        MXBOND = IFIND('MXBOND  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MXANGL  ') THEN
        MXANGL = IFIND('MXANGL  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MXDIHR  ') THEN
        MXDIHR = IFIND('MXDIHR  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MXWAGG  ') THEN
        MXWAGG = IFIND('MXWAGG  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MXDIHB  ') THEN
        MXDIHB = IFIND('MXDIHB  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MXLIST1 ') THEN
        MXLIST1= IFIND('MXLIST1 ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MXLIST2 ') THEN
        MXLIST2= IFIND('MXLIST2 ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MXCHECK ') THEN
        MXCHECK= IFIND('MXCHECK ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'BUFWID1 ') THEN
        BUFWID1= RFIND('BUFWID1 ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'BUFWID2 ') THEN
        BUFWID2= RFIND('BUFWID2 ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'ISWITCH ') THEN
        ISWITCH= IFIND('ISWITCH ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'ISHIFT  ') THEN
        ISHIFT = IFIND('ISHIFT ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'IPOLSHF ') THEN
        IPOLSHF= IFIND('IPOLSHF',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'IEWALD  ') THEN
        IEWALD = IFIND('IEWALD ',IERR)
        IF(IEWALD.LT.0.OR.IEWALD.GT.2) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IEWALD MUST BE 0, 1, 2.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'SPLIT   ') THEN
        SPLIT = RFIND('SPLIT',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'KEWALD  ') THEN
        KEWALD = IFIND('KEWALD',IERR)
        IF(KEWALD.GT.100) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: KEWALD CANNOT BE > 100.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
C
      IF(TEXT.EQ.'IADDNA1 ') THEN
        IADDNA1= IFIND('IADDNA1 ',IERR)
        IF(IADDNA1.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IADDNA1 CANNOT BE < 0.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'IADDK1  ') THEN
        IADDK1 = IFIND('IADDK1  ',IERR)
        IF(IADDK1.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IADDK1 CANNOT BE < 0.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'IADDCA2 ') THEN
        IADDCA2= IFIND('IADDCA2 ',IERR)
        IF(IADDCA2.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IADDCA2 CANNOT BE < 0.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'IADDMG2 ') THEN
        IADDMG2= IFIND('IADDMG2 ',IERR)
        IF(IADDMG2.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IADDMG2 CANNOT BE < 0.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'IADDCL1 ') THEN
        IADDCL1= IFIND('IADDCL1 ',IERR)
        IF(IADDCL1.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IADDCL1 CANNOT BE < 0.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'JADDNA1 ') THEN
        JADDNA1= IFIND('JADDNA1 ',IERR)
        IF(JADDNA1.NE.0 .AND. JADDNA1.NE.1) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: JADDNA1 MUST BE 0 OR 1.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'JADDK1  ') THEN
        JADDK1 = IFIND('JADDK1  ',IERR)
        IF(JADDK1.NE.0 .AND. JADDK1.NE.1) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: JADDK1 MUST BE 0 OR 1.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'IADDWAT ') THEN
        IADDWAT= IFIND('IADDWAT ',IERR)
        IF(IADDWAT.NE.0 .AND. IADDWAT.NE.1 .AND. IADDWAT.NE.2) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IADDWAT MUST BE 0, 1 OR 2.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'ITYPWAT ') THEN
        ITYPWAT= IFIND('ITYPWAT ',IERR)
        IF(ITYPWAT.NE.0.AND.ITYPWAT/100.NE.3.AND.ITYPWAT/100.NE.5)THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: ITYPWAT MUST BE 0, 3XX OR 5XX.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'CENTX   ') THEN
        CENTX = RFIND('CENTX   ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'CENTY   ') THEN
        CENTY = RFIND('CENTY   ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'CENTZ   ') THEN
        CENTZ = RFIND('CENTZ   ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'XBOX    ') THEN
        XBOX = RFIND('XBOX    ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'YBOX    ') THEN
        YBOX = RFIND('YBOX    ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'ZBOX    ') THEN
        ZBOX = RFIND('ZBOX    ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'RDAMP   ') THEN
        RDAMP= RFIND('RDAMP   ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'SWRA    ') THEN
        SWRA = RFIND('SWRA    ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'SWRB    ') THEN
        SWRB = RFIND('SWRB    ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'SWRAQ   ') THEN
        SWRAQ= RFIND('SWRAQ   ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'SWRBQ   ') THEN
        SWRBQ= RFIND('SWRBQ   ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'ISPHSOL ') THEN
        ISPHSOL= IFIND('ISPHSOL ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'RXNEPS  ') THEN
        RXNEPS= RFIND('RXNEPS  ',IERR)
        IF(RXNEPS.EQ.ZERO) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: RXNEPS CANNOT BE ZERO.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'RSPHSOL ') THEN
        RSPHSOL= RFIND('RSPHSOL ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'SPHRAD  ') THEN
        SPHRAD= RFIND('SPHRAD  ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'SPHSIG  ') THEN
        SPHSIG= RFIND('SPHSIG  ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'SPHEPS  ') THEN
        SPHEPS= RFIND('SPHEPS  ',IERR)*TOHART
        GOTO 100
      END IF
      IF(TEXT.EQ.'IDOCHG  ') THEN
        IDOCHG= IFIND('IDOCHG  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'IDOPOL  ') THEN
        IDOPOL= IFIND('IDOPOL  ',IERR)
        IF(IDOPOL.NE.0.AND.IDOPOL.NE.1.AND.IDOPOL.NE.100) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IDOPOL MUST BE 0, 1 OR 100.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'IDOLJ   ') THEN
        IDOLJ = IFIND('IDOLJ   ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'IDOCMAP ') THEN
        IDOCMAP= IFIND('IDOCMAP ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'IFIXSOL ') THEN
        IFIXSOL= IFIND('IFIXSOL ',IERR)
        IF(IFIXSOL.NE.0.AND.IFIXSOL.NE.1) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IFIXSOL MUST BE 0 OR 1.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'FIXTOL  ') THEN
        FIXTOL= RFIND('FIXTOL  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'IRATTLE ') THEN
        IRATTLE= IFIND('IRATTLE ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'IRATQM  ') THEN
        IRATQM= IFIND('IRATQM',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'JRATTLE ') THEN
        JRATTLE= IFIND('JRATTLE ',IERR)
        IF(JRATTLE.GT.10) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: JRATTLE CANNOT BE > 10'
           IERROR = IERROR + 1
        END IF
        DO I =1,JRATTLE
           LSTRATTMP(1,I) = IFIND('LSTRAT ',IERR)
           LSTRATTMP(2,I) = IFIND('LSTRAT ',IERR)
           DSTRATTMP(I)   = RFIND('DSTRAT ',IERR)*TOBOHR
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'MXRATT  ') THEN
        MXRATT= IFIND('MXRATT  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'RATOLC  ') THEN
        RATOLC= RFIND('RATOLC ',IERR)
        IF(RATOLC.GT.1.0D-03.OR.RATOLC.LT.1.0D-08) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: RATOLC IS UNREALISTIC.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'RATOLV  ') THEN
        RATOLV= RFIND('RATOLV ',IERR)
        IF(RATOLV.GT.1.0D-04.OR.RATOLV.LT.1.0D-10) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: RATOLV IS UNREALISTIC.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'SCALRAT ') THEN
        SCALRAT= RFIND('SCALRAT ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MXFFTS  ') THEN
        MXFFTS = IFIND('MXFFTS  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'NTSATM  ') THEN
        NTSATM = IFIND('NTSATM  ',IERR)
        IF(NTSATM.NE. 60.AND.
     *     NTSATM.NE.240.AND.NTSATM.NE.960) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NTSATM MUST BE 60, 240, OR 960.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'ITSTAT  ') THEN
        ITSTAT = IFIND('ITSTAT ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'BEREND  ') THEN
        BERENDT= RFIND('BERENDT',IERR)
        IF(BERENDT.LT.1.0D-17) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: BERENDT MUST BE > 1.0D-17.'
           IERROR = IERROR + 1
        END IF
        BERENDP= RFIND('BERENDP',IERR)
        IF(BERENDP.LT.1.0D-14) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: BERENDP MUST BE > 1.0D-14.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'IPSTAT  ') THEN
        IPSTAT = IFIND('IPSTAT ',IERR)
        IF(IPSTAT.NE.0 .AND. IPSTAT.NE.1 .AND. IPSTAT.NE.3) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IPSTAT MUST BE 0, 1, 3'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'JOUT    ') THEN
        JOUT = IFIND('JOUT   ',IERR)
        IF(JOUT.LE.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: JOUT MUST BE GREATER THAN 0.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'KOUT    ') THEN
        KOUT = IFIND('KOUT   ',IERR)
        IF(KOUT.LE.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: KOUT MUST BE GREATER THAN 0.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'KOUTPBC ') THEN
        KOUTPBC = IFIND('KOUTPBC',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'LOUT    ') THEN
        LOUT = IFIND('LOUT   ',IERR)
        IF(LOUT.NE.0.AND.LOUT.NE.1) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: LOUT MUST BE 0 OR 1.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'NFFTYP  ') THEN
        NFFTYP = IFIND('NFFTYP ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'NFFFILE ') THEN
        NFFFILE= IFIND('NFFFILE',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'TOPFILE ') THEN
        LENGTH = 0
        CALL GSTRNG(TOPFILE,LENGTH)
        IF(LENGTH.GE.60) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: TOPFILE EXCEEDED 59 CHARACTERS'
           IERROR = IERROR + 1
        END IF
        DO J=1,60
           JTOPFILE(J) = ICHAR(TOPFILE(J:J))
        ENDDO
        JTOPFILE(60) = LENGTH
        GOTO 100
      END IF
      IF(TEXT.EQ.'TOPAMIA ') THEN
        LENGTH = 0
        CALL GSTRNG(TOPAMIA,LENGTH)
        IF(LENGTH.GE.60) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: TOPAMIA EXCEEDED 59 CHARACTERS'
           IERROR = IERROR + 1
        END IF
        DO J=1,60
           JTOPAMIA(J) = ICHAR(TOPAMIA(J:J))
        ENDDO
        JTOPAMIA(60) = LENGTH
        GOTO 100
      END IF
      IF(TEXT.EQ.'TOPNUCA ') THEN
        LENGTH = 0
        CALL GSTRNG(TOPNUCA,LENGTH)
        IF(LENGTH.GE.60) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: TOPNUCA EXCEEDED 59 CHARACTERS'
           IERROR = IERROR + 1
        END IF
        DO J=1,60
           JTOPNUCA(J) = ICHAR(TOPNUCA(J:J))
        ENDDO
        JTOPNUCA(60) = LENGTH
        GOTO 100
      END IF
      IF(TEXT.EQ.'TOPNTER ') THEN
        LENGTH = 0
        CALL GSTRNG(TOPNTER,LENGTH)
        IF(LENGTH.GE.60) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: TOPNTER EXCEEDED 59 CHARACTERS'
           IERROR = IERROR + 1
        END IF
        DO J=1,60
           JTOPNTER(J) = ICHAR(TOPNTER(J:J))
        ENDDO
        JTOPNTER(60) = LENGTH
        GOTO 100
      END IF
      IF(TEXT.EQ.'TOPCTER ') THEN
        LENGTH = 0
        CALL GSTRNG(TOPCTER,LENGTH)
        IF(LENGTH.GE.60) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: TOPCTER EXCEEDED 59 CHARACTERS'
           IERROR = IERROR + 1
        END IF
        DO J=1,60
           JTOPCTER(J) = ICHAR(TOPCTER(J:J))
        ENDDO
        JTOPCTER(60) = LENGTH
        GOTO 100
      END IF
      IF(TEXT.EQ.'PARFILE ') THEN
        LENGTH = 0
        CALL GSTRNG(PARFILE,LENGTH)
        IF(LENGTH.GE.60) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: PARFILE EXCEEDED 59 CHARACTERS'
           IERROR = IERROR + 1
        END IF
        DO J=1,60
           JPARFILE(J) = ICHAR(PARFILE(J:J))
        ENDDO
        JPARFILE(60) = LENGTH
        GOTO 100
      END IF
      IF(TEXT.EQ.'PARFIL2 ') THEN
        LENGTH = 0
        CALL GSTRNG(PARFIL2,LENGTH)
        IF(LENGTH.GE.60) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: PARFIL2 EXCEEDED 59 CHARACTERS'
           IERROR = IERROR + 1
        END IF
        DO J=1,60
           JPARFIL2(J) = ICHAR(PARFIL2(J:J))
        ENDDO
        JPARFIL2(60) = LENGTH
        GOTO 100
      END IF
      IF(TEXT.EQ.'PARFIL3 ') THEN
        LENGTH = 0
        CALL GSTRNG(PARFIL3,LENGTH)
        IF(LENGTH.GE.60) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: PARFIL3 EXCEEDED 59 CHARACTERS'
           IERROR = IERROR + 1
        END IF
        DO J=1,60
           JPARFIL3(J) = ICHAR(PARFIL3(J:J))
        ENDDO
        JPARFIL3(60) = LENGTH
        GOTO 100
      END IF
      IF(TEXT.EQ.'WT14LJ  ') THEN
        WT14LJ = RFIND('WT14LJ ',IERR)
        IF(WT14LJ.LT.ZERO) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: WT14LJ MUST BE > 0.0'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'WT14CH  ') THEN
        WT14CH = RFIND('WT14CH ',IERR)
        IF(WT14CH.LT.ZERO) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: WT14CH MUST BE > 0.0'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'RETAIN  ') THEN
        RETAIN = RFIND('RETAIN ',IERR)
        GOTO 100
      END IF
C
      IF(TEXT.EQ.'QMREP   ') THEN
        NQMREP = IFIND('QMREP  ',IERR)
        IF(NQMREP.GT.200) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NQMREP MUST BE < 201'
           IERROR = IERROR + 1
        END IF
        IF(NQMREP.GT.NAT.AND.NAT.GT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NQMREP MUST BE < ',NAT+1
           IERROR = IERROR + 1
        END IF
        DO I =1,NQMREP
           IATREP(I) = IFIND('IATREP  ',IERR)
           LTERM = IFIND('LTERM  ',IERR)
           IF(LTERM.GT.4) THEN
              IF(MASWRK) WRITE(IW,'(1X,A/)')
     *        'ERROR: LTERM MUST BE < 5'
              IERROR = IERROR + 1
           END IF
           DO J =1,LTERM
              CRPIAT(J,I) = RFIND('CRPIAT  ',IERR)
              ZRPIAT(J,I) = RFIND('ZRPIAT  ',IERR)
           ENDDO
        ENDDO
        GOTO 100
      END IF
C
      IF(TEXT.EQ.'NRDF    ') THEN
        NRDF = IFIND('NRDF   ',IERR)
        IF(NRDF.GT.10) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NRDF MUST BE SMALLER THAN 10'
           IERROR = IERROR + 1
        END IF
        DO I =1,NRDF
           FRAG1(I)='          '
           FRAG2(I)='          '
           LGSTR =-10
           CALL GSTRNG(FRAG1(I),LGSTR)
           LGSTR =-10
           CALL GSTRNG(FRAG2(I),LGSTR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'DELRDF  ') THEN
        DELRDF  = RFIND('DELRDF ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'NRDEN   ') THEN
        NRDEN = IFIND('NRDEN  ',IERR)
        IF(NRDEN.GT.10) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NRDEN MUST BE < 11'
           IERROR = IERROR + 1
        END IF
        DO I =1,NRDEN
           RDENATM(I)='          '
           LGSTR =-10
           CALL GSTRNG(RDENATM(I),LGSTR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'DIFFUSE ') THEN
        NDFS = IFIND('NDFS',IERR)
        IF(NDFS.GT.10) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NDFS MUST BE SMALLER THAN 10'
           IERROR = IERROR + 1
        END IF
        DO I =1,NDFS
           DFSA(I)='          '
           LGSTR =-10
           CALL GSTRNG(DFSA(I),LGSTR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'TIMDFS  ') THEN
        TIMDFS = RFIND('TIMDFS  ',IERR)
        GOTO 100
      END IF
C
      IF(TEXT.EQ.'NATPDB  ') THEN
        NATPDB= IFIND('NATPDB',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'NRMSD   ') THEN
        NRMSD = IFIND('NRMSD',IERR)
        IF(NRMSD.NE.0 .AND. NRMSD.NE.1) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NRMSD MUST BE 0 OR 1.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'NRALL   ') THEN
        NRALL= IFIND('NRALL',IERR)
        IF(NRALL.NE.0 .AND. NRALL.NE.1) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NRALL MUST BE 0 OR 1.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'TIMRALL ') THEN
        TIMRALL= RFIND('TIMRALL ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'NGYRA   ') THEN
        NGYRA  = IFIND('NGYRA   ',IERR)
        IF(NGYRA.NE.0 .AND. NGYRA.NE.1) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NGYRA MUST BE 0 OR 1.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'TIMGYRA ') THEN
        TIMGYRA= RFIND('TIMGYRA ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'NRIJMM  ') THEN
        NRIJMM=IFIND('NRIJMM',IERR)
        IF(NRIJMM.GT.100.OR. NRIJMM.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NRIJMM MUST BE BETWEEN 0 - 100'
           IERROR = IERROR + 1
        END IF
        DO II=1,NRIJMM
           IJRMM(1,II) = IFIND('IJRMM1',IERR)
           IJRMM(2,II) = IFIND('IJRMM2',IERR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'NRIJQM  ') THEN
        NRIJQM=IFIND('NRIJQM',IERR)
        IF(NRIJQM.GT.100.OR. NRIJQM.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NRIJQM MUST BE BETWEEN 0 - 100'
           IERROR = IERROR + 1
        END IF
        DO II=1,NRIJQM
           IJRQM(1,II) = IFIND('IJRQM1',IERR)
           IJRQM(2,II) = IFIND('IJRQM2',IERR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'NAIJKMM ') THEN
        NAIJKMM=IFIND('NAIJKMM',IERR)
        IF(NAIJKMM.GT.100.OR. NAIJKMM.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NAIJKMM MUST BE BETWEEN 0 - 100'
           IERROR = IERROR + 1
        END IF
        DO II=1,NAIJKMM
           IJKMM(1,II) = IFIND('IJKMM1',IERR)
           IJKMM(2,II) = IFIND('IJKMM2',IERR)
           IJKMM(3,II) = IFIND('IJKMM3',IERR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'NAIJKQM ') THEN
        NAIJKQM=IFIND('NAIJKQM',IERR)
        IF(NAIJKQM.GT.100.OR. NAIJKQM.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NAIJKQM MUST BE BETWEEN 0 - 100'
           IERROR = IERROR + 1
        END IF
        DO II=1,NAIJKQM
           IJKQM(1,II) = IFIND('IJKQM1',IERR)
           IJKQM(2,II) = IFIND('IJKQM2',IERR)
           IJKQM(3,II) = IFIND('IJKQM3',IERR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'NDIEL   ') THEN
        NDIEL= IFIND('NDIEL',IERR)
        IF(NDIEL.NE.0 .AND. NDIEL.NE.1) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NDIEL MUST BE 0 OR 1.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'NFIXQM  ') THEN
        NFIXQM=IFIND('NFIXQM',IERR)
        IF(NFIXQM.GT.200 .OR. NFIXQM.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NFIXQM MUST BE BETWEEN 0 AND 200'
           IERROR = IERROR + 1
        END IF
        DO II=1,NFIXQM
           IFIXQM(II) = IFIND('IFIXQM',IERR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'NFIXQMB ') THEN
        NFIXQMB=IFIND('NFIXQMB',IERR)
        IF(NFIXQMB.GT.200 .OR. NFIXQMB.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NFIXQMB MUST BE BETWEEN 0 AND 200'
           IERROR = IERROR + 1
        END IF
        DO II=1,NFIXQMB
           IFIXQMB(II) = IFIND('IFIXQMB',IERR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'NFIXMM  ') THEN
        NFIXMM=IFIND('NFIXMM',IERR)
        IF(NFIXMM.GT.200 .OR. NFIXMM.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NFIXMM MUST BE BETWEEN 0 AND 200'
           IERROR = IERROR + 1
        END IF
        DO II=1,NFIXMM
           IFIXMM(II) = IFIND('IFIXMM',IERR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'NFIXMMB ') THEN
        NFIXMMB=IFIND('NFIXMMB',IERR)
        IF(NFIXMMB.GT.200 .OR. NFIXMMB.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NFIXMMB MUST BE BETWEEN 0 AND 200'
           IERROR = IERROR + 1
        END IF
        DO II=1,NFIXMMB
           IFIXMMB(II) = IFIND('IFIXMMB',IERR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'LJQMMM  ') THEN
        LJQMMM= IFIND('LJQMMM  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'LJSIGMA ') THEN
        LJSIGMA= IFIND('LJSIGMA ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'INTCHG  ') THEN
        INTCHG = IFIND('INTCHG  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'EFIELDX ') THEN
        EFIELDX= RFIND('EFIELDX ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'EFIELDY ') THEN
        EFIELDY= RFIND('EFIELDY ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'EFIELDZ ') THEN
        EFIELDZ= RFIND('EFIELDZ ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'IFEPTYP ') THEN
        IFEPTYP = IFIND('IFEPTYP',IERR)
        IF(IFEPTYP.LT.0 .OR. IFEPTYP.GT.2) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IFEPTYP MUST BE 0, 1, 2.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'IFEPTOP ') THEN
        IFEPTOP= IFIND('IFEPTOP',IERR)
        IF(IFEPTOP.LT.0 .OR. IFEPTOP.GT.2) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IFEPTOP MUST BE 0, 1, 2.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'WSIMUL  ') THEN
        WSIMUL = RFIND('WSIMUL ',IERR)
        IF(WSIMUL.LT.0.0D+00 .OR. WSIMUL.GT.1.0D+00) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: WSIMUL MUST BE IN 0.0 - 1.0'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'WPERT1  ') THEN
        WPERT1 = RFIND('WPERT1 ',IERR)
        IF(WPERT1.LT.0.0D+00 .OR. WPERT1.GT.1.0D+00) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: WPERT1 MUST BE IN 0.0 - 1.0'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'WPERT2  ') THEN
        WPERT2 = RFIND('WPERT2 ',IERR)
        IF(WPERT2.LT.0.0D+00 .OR. WPERT2.GT.1.0D+00) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: WPERT2 MUST BE IN 0.0 - 1.0'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'ISOFTCR ') THEN
        ISOFTCR = IFIND('ISOFTCR ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'SOFTALJ ') THEN
        SOFTALJ = RFIND('SOFTALJ ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'SOFTACH ') THEN
        SOFTACH = RFIND('SOFTACH ',IERR)*TOBOHR*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'KFREEA  ') THEN
        KFREEATMP(501) = IFIND('KFREEA ',IERR)
        IF(KFREEATMP(501).GT.500) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: KFREEA EXCEEDED 500 ATOMS.'
           IERROR = IERROR + 1
        END IF
        DO I =1,KFREEATMP(501)
           KFREEATMP(I) = IFIND('KFREEA ',IERR)
        ENDDO
        DO I =1,KFREEATMP(501)
           II=KFREEATMP(I)
           DO J =I+1,KFREEATMP(501)
              JJ=KFREEATMP(J)
              IF(II.EQ.JJ) THEN
                 IF(MASWRK)WRITE(IW,'(1X,A,I10/)')
     *           'ERROR: KFREEA CONTAINS REDUNDANT ATOMS: ',II
                 IERROR = IERROR + 1
              END IF
           ENDDO
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'KFREEB  ') THEN
        KFREEBTMP(501) = IFIND('KFREEB ',IERR)
        IF(KFREEBTMP(501).GT.500) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: KFREEB EXCEEDED 500 ATOMS.'
           IERROR = IERROR + 1
        END IF
        DO I =1,KFREEBTMP(501)
           KFREEBTMP(I) = IFIND('KFREEB ',IERR)
        ENDDO
        DO I =1,KFREEBTMP(501)
           II=KFREEBTMP(I)
           DO J =I+1,KFREEBTMP(501)
              JJ=KFREEBTMP(J)
              IF(II.EQ.JJ) THEN
                 IF(MASWRK)WRITE(IW,'(1X,A,I10/)')
     *           'ERROR: KFREEB CONTAINS REDUNDANT ATOMS: ',II
                 IERROR = IERROR + 1
              END IF
           ENDDO
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'MEANFLD ') THEN
        MEANFLD  = IFIND('MEANFLD ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MFQMCHG ') THEN
        MFQMCHG  = IFIND('MFQMCHG ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MFMERGE ') THEN
        MFMERGE  = IFIND('MFMERGE ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'SCFTYP2 ') THEN
        TEXT='        '
        LGSTR=-8
        CALL GSTRNG(TEXT,LGSTR)
        IF(TEXT.EQ.'RHF     ') SCFTYP2=RHF
        IF(TEXT.EQ.'UHF     ') SCFTYP2=UHF
        IF(TEXT.EQ.'ROHF    ') SCFTYP2=ROHF
        IF(TEXT.EQ.'MCSCF   ') SCFTYP2=RMC
        IF(TEXT.EQ.'GVB     ') SCFTYP2=GVB
        GOTO 100
      END IF
      IF(TEXT.EQ.'TDDFT2  ') THEN
        TEXT='        '
        LGSTR=-8
        CALL GSTRNG(TEXT,LGSTR)
        IF(TEXT.EQ.'EXCITE  ') TDDFT2=EXCITE
        IF(TEXT.EQ.'SPNFLP  ') TDDFT2=SPNFLP
        IF(TEXT.EQ.'NONE    ') TDDFT2=RNONE
        GOTO 100
      END IF
      IF(TEXT.EQ.'CITYP2  ') THEN
        TEXT='        '
        LGSTR=-8
        CALL GSTRNG(TEXT,LGSTR)
        IF(TEXT.EQ.'ALDET   ') CITYP2=ALDET
        IF(TEXT.EQ.'GENCI   ') CITYP2=GENCI
        IF(TEXT.EQ.'FSOCI   ') CITYP2=FSOCI
        IF(TEXT.EQ.'ORMAS   ') CITYP2=ORMAS
        IF(TEXT.EQ.'CIS     ') CITYP2=CIS
        IF(TEXT.EQ.'GUGA    ') CITYP2=GUGA
        IF(TEXT.EQ.'SFCIS   ') CITYP2=SFCIS
        GOTO 100
      END IF
      IF(TEXT.EQ.'MPLEVL2 ') THEN
        MPLEVL2  = IFIND('MPLEVL2',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'ICHARG2 ') THEN
        ICHARG2  = IFIND('ICHARG2',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MULT2   ') THEN
        MULT2  = IFIND('MULT2',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MATOMA  ') THEN
        MATOMA = IFIND('MATOMA',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MATOMB  ') THEN
        MATOMB = IFIND('MATOMB',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MCHARGA ') THEN
        MCHARGA = IFIND('MCHARGA',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MCHARGB ') THEN
        MCHARGB = IFIND('MCHARGB',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MULTA   ') THEN
        MULTA = IFIND('MULTA',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'MULTB   ') THEN
        MULTB = IFIND('MULTB',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'JUMBPOT ') THEN
        NUMBTYP = IFIND('JUMBNTYP',IERR)
        DO I =1,4
           NUMBATM(I)=IFIND('JUMBATOM',IERR)
        ENDDO
        IF(NUMBTYP.EQ.12  ) NONZERO = 2
        IF(NUMBTYP.EQ.123 ) NONZERO = 3
        IF(NUMBTYP.EQ.1212) NONZERO = 4
        IF(NUMBTYP.EQ.1234) NONZERO = 4
        DO I=1,NONZERO
           IF(NUMBATM(I).LE.0) THEN
              IF(MASWRK) WRITE(IW,'(1X,A/)')
     *        'ERROR: PLEASE CHECK JUMBPOT.'
              IERROR = IERROR + 1
           END IF
        ENDDO
        IF(NUMBTYP.EQ.123.OR.NUMBTYP.EQ.1234) THEN
           UMBFC  =RFIND('JUMBFC',IERR)*DEGREE*DEGREE*TOHART
           UMBR0  =RFIND('JUMBR0',IERR)
           IF(NUMBTYP.EQ.123.AND.
     *        (UMBR0.LT.ZERO.OR.UMBR0.GT.180.0D+00))THEN
              IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *        'ERROR: FOR JUMBPOT NTYP=123, ',
     *        'R0 MUST BE 0-180 DEGREE.'
              IERROR = IERROR + 1
           END IF
           IF(NUMBTYP.EQ.1234.AND.
     *        (UMBR0.LT.ZERO.OR.UMBR0.GT.360.0D+00))THEN
              IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *        'ERROR: FOR JUMBPOT NTYP=1234, ',
     *        'R0 MUST BE 0-360 DEGREE.'
              IERROR = IERROR + 1
           END IF
           UMBR0  =UMBR0*TORAD
           UMBSIZE=1.0D+00*TORAD
        ELSE IF(NUMBTYP.EQ.12.OR.NUMBTYP.EQ.1212) THEN
           UMBFC  =RFIND('JUMBFC',IERR)*TOANGS*TOANGS*TOHART
           UMBR0  =RFIND('JUMBR0',IERR)
           IF(NUMBTYP.EQ.12.AND.
     *        (UMBR0.LT.ZERO.OR.UMBR0.GT.20.0D+00)) THEN
              IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *        'ERROR: FOR JUMBPOT NTYP=12, ',
     *        'R0 MUST BE 0-20 A.'
              IERROR = IERROR + 1
           END IF
           IF(NUMBTYP.EQ.1212.AND.
     *        (UMBR0.LT.-20.0D+00.OR.UMBR0.GT.20.0D+00)) THEN
              IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *        'ERROR: FOR JUMBPOT NTYP=1212, ',
     *        'R0 MUST BE BETWEEN -20 TO +20 A.'
              IERROR = IERROR + 1
           END IF
           UMBR0  =UMBR0*TOBOHR
           UMBSIZE=1.0D-02*TOBOHR
        ELSE IF(NUMBTYP.NE.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: JUMBPOT MUST BE 0, 12, 1212, 123, 1234.'
           IERROR = IERROR + 1
        END IF
        NUMBBIN = 61
        GOTO 100
      END IF
      IF(TEXT.EQ.'JUM2POT ') THEN
        NUM2TYP = IFIND('JUM2NTYP',IERR)
        DO I =1,4 
           NUM2ATM(I)=IFIND('JUM2ATOM',IERR)
        ENDDO
        IF(NUM2TYP.EQ.12  ) NONZERO = 2
        IF(NUM2TYP.EQ.123 ) NONZERO = 3
        IF(NUM2TYP.EQ.1212) NONZERO = 4
        IF(NUM2TYP.EQ.1234) NONZERO = 4
        DO I=1,NONZERO
           IF(NUM2ATM(I).LE.0) THEN
              IF(MASWRK) WRITE(IW,'(1X,A/)')
     *        'ERROR: PLEASE CHECK JUM2POT.'
              IERROR = IERROR + 1
           END IF
        ENDDO
        IF(NUM2TYP.EQ.123.OR.NUM2TYP.EQ.1234) THEN
           UM2FC  =RFIND('JUM2FC',IERR)*DEGREE*DEGREE*TOHART
           UM2R0  =RFIND('JUM2R0',IERR)
           IF(NUM2TYP.EQ.123.AND.
     *        (UM2R0.LT.ZERO.OR.UM2R0.GT.180.0D+00))THEN
              IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *        'ERROR: FOR JUM2POT NTYP=123, ',
     *        'R0 MUST BE 0-180 DEGREE.'
              IERROR = IERROR + 1
           END IF
           IF(NUM2TYP.EQ.1234.AND.
     *        (UM2R0.LT.ZERO.OR.UM2R0.GT.360.0D+00))THEN
              IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *        'ERROR: FOR JUM2POT NTYP=1234, ',
     *        'R0 MUST BE 0-360 DEGREE.'
              IERROR = IERROR + 1
           END IF
           UM2R0  =UM2R0*TORAD
           UM2SIZE=1.0D+00*TORAD
        ELSE IF(NUM2TYP.EQ.12.OR.NUM2TYP.EQ.1212) THEN
           UM2FC  =RFIND('JUM2FC',IERR)*TOANGS*TOANGS*TOHART
           UM2R0  =RFIND('JUM2R0',IERR)
           IF(NUM2TYP.EQ.12.AND.
     *        (UM2R0.LT.ZERO.OR.UM2R0.GT.20.0D+00)) THEN
              IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *        'ERROR: FOR JUM2POT NTYP=12, ',
     *        'R0 MUST BE 0-20 A.'
              IERROR = IERROR + 1
           END IF
           IF(NUM2TYP.EQ.1212.AND.
     *        (UM2R0.LT.-20.0D+00.OR.UM2R0.GT.20.0D+00)) THEN
              IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *        'ERROR: FOR JUM2POT NTYP=1212, ',
     *        'R0 MUST BE BETWEEN -20 TO +20 A.'
              IERROR = IERROR + 1
           END IF
           UM2R0  =UM2R0*TOBOHR
           UM2SIZE=1.0D-02*TOBOHR
        ELSE IF(NUM2TYP.NE.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: JUM2POT MUST BE 0, 12, 1212, 123, 1234.'
           IERROR = IERROR + 1
        END IF
        NUM2BIN = 61
        GOTO 100
      END IF
      IF(TEXT.EQ.'IVIBMM  ') THEN
        NVIBMM = IFIND('NVIBMM',IERR)
        IF(NVIBMM.GT.200 .OR. NVIBMM.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IVIBMM  MUST BE BETWEEN 0 AND 200'
           IERROR = IERROR + 1
        END IF
        IF(NVIBMM.EQ.0) GOTO 100
        DO I =1,NVIBMM
           IVIBMMP(I)=IFIND('IVIBMM',IERR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'MMFF94Q ') THEN
        NMMFF94Q = IFIND('MMFF94Q',IERR)
        IF(NMMFF94Q.GT.50 .OR. NMMFF94Q.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: MMFF94Q MUST BE BETWEEN 0 AND 50'
           IERROR = IERROR + 1
        END IF
        DO I=1,NMMFF94Q
           LQATOM(I)=IFIND('LQATOM',IERR)
           RQATOM(I)=RFIND('RQATOM',IERR)
           RQATOM(I)=DBLE(NINT(RQATOM(I)*3.0D+02))/3.0D+02
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'IPODAMP ') THEN
        IPODAMP = IFIND('IPODAMP',IERR)
        IF(IPODAMP.LT.0 .OR. IPODAMP.GT.3) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IPODAMP MUST BE 0, 1, 2, 3'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'APODAMP ') THEN
        APODAMP = RFIND('APODAMP',IERR)
        IF(APODAMP.LE.ZERO) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: APODAMP MUST BE POSITIVE.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'IPO1213 ') THEN
        IPO1213 = IFIND('IPO1213',IERR)
        IF(IPO1213.LT.0 .OR. IPO1213.GT.1) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: IPO1213 MUST BE 0 OR 1'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'NRADMM  ') THEN
        NRADMM=IFIND('NRADMM',IERR)
        IF(NRADMM.GT.200 .OR. NRADMM.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NRADMM MUST BE BETWEEN 0 AND 200'
           IERROR = IERROR + 1
        END IF
        DO II=1,NRADMM
           IATMM = IFIND('NRADMM',IERR)
           RATMM = RFIND('NRADMM',IERR)
           IF(RATMM.GT.1000.0D+00) THEN
              IF(MASWRK) WRITE(IW,'(1X,A/)')
     *        'ERROR: NRADMM RADIUS MUST BE < 1000 A'
              IERROR = IERROR + 1
           END IF
           RADMM(II) = DBLE(IATMM) + RATMM*TOBOHR*1.0D-04
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'NRADQM  ') THEN
        NRADQM=IFIND('NRADQM',IERR)
        IF(NRADQM.GT.200 .OR. NRADQM.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: NRADQM MUST BE BETWEEN 0 AND 200'
           IERROR = IERROR + 1
        END IF
        DO II=1,NRADQM
           IATQM = IFIND('NRADQM',IERR)
           RATQM = RFIND('NRADQM',IERR)
           IF(RATQM.GT.1000.0D+00) THEN
              IF(MASWRK) WRITE(IW,'(1X,A/)')
     *        'ERROR: NRADQM RADIUS MUST BE < 1000 A'
              IERROR = IERROR + 1
           END IF
           RADQM(II) = DBLE(IATQM) + RATQM*TOBOHR*1.0D-04
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'RALLMM  ') THEN
        RALLMM=RFIND('RALLMM',IERR)
        IF(RALLMM.GT.1000.0D+00 .OR. RALLMM.LT.0.0D+00) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: RALLMM MUST BE BETWEEN 0.0 AND 1000.0 A'
           IERROR = IERROR + 1
        END IF
        RALLMM=RALLMM*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'RALLQM  ') THEN
        RALLQM=RFIND('RALLQM',IERR)
        IF(RALLQM.GT.1000.0D+00 .OR. RALLQM.LT.0.0D+00) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: RALLQM MUST BE BETWEEN 0.0 AND 1000.0 A'
           IERROR = IERROR + 1
        END IF
        RALLQM=RALLQM*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'LACTMM  ') THEN
        III=IFIND('LACTMM',IERR)
        IF(III.EQ.0) GOTO 100
        NACTMM = III
        IF(III.LE.10) THEN
           DO I =1,III
           LACTMM(2020-2*I+2)=IFIND('LACTMM',IERR)
           LACTMM(2020-2*I+1)=NINT(RFIND('LACTMM',IERR)
     *                         *TOBOHR*1.0D+10)
           ENDDO
        ELSE IF(III.GT.10) THEN
           IF(III.GT.2000) THEN
              IF(MASWRK) WRITE(IW,'(1X,A/)')
     *        'ERROR: LACTMM MUST BE BETWEEN 0 AND 2000'
              IERROR = IERROR + 1
           END IF
           DO I =1,III
              LACTMM(I)=IFIND('LACTMM',IERR)
           ENDDO
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'LACTQM  ') THEN
        III=IFIND('LACTQM',IERR)
        IF(III.EQ.0) GOTO 100
        NACTQM = III
        IF(III.LE.10) THEN
           DO I =1,III
           LACTQM(2020-2*I+2)=IFIND('LACTQM',IERR)
           LACTQM(2020-2*I+1)=NINT(RFIND('LACTQM',IERR)
     *                         *TOBOHR*1.0D+10)
           ENDDO
        ELSE IF(III.GT.10) THEN
           IF(III.GT.2000) THEN
              IF(MASWRK) WRITE(IW,'(1X,A/)')
     *        'ERROR: LACTQM MUST BE BETWEEN 0 AND 2000'
              IERROR = IERROR + 1
           END IF
           DO I =1,III
              LACTQM(I)=IFIND('LACTQM',IERR)
           ENDDO
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'MMHESS  ') THEN
        MMHESS = IFIND('MMHESS',IERR)
        IF(MMHESS.GT.1 .OR. MMHESS.LT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: MMHESS  MUST BE 0 OR 1'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'KOUTACT ') THEN
        KOUTACT(1)= IFIND('KOUTACT',IERR)
        KOUTACT(2)= INT(1.0D+8*RFIND('KOUTACT',IERR))
        GOTO 100
      END IF
      IF(TEXT.EQ.'JUMBUP  ') THEN
        JUMBUP = IFIND('JUMBUP',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'IRMDF   ') THEN
        NRATM1 = IFIND('NRATM1',IERR)
        NRATM2 = IFIND('NRATM2',IERR)
        RDIST1 = RFIND('RDIST1',IERR)*TOBOHR
        RDIST2 = RFIND('RDIST2',IERR)*TOBOHR
        NRPNTS = IFIND('NRPNTS',IERR)
        IF(RUNTYP.NE.MD.AND.NRATM1.GT.0) THEN
           IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *     'ERROR: ONLY RUNTYP=MD CAN RUN THERMODYNAMIC ',
     *     'INTEGRATION WITH IRMDF'
           IERROR = IERROR + 1
        END IF
        IF(NRATM1.GT.0.AND.NRATM2.GT.0.AND.
     *     ((RDIST1.LT.ZERO.OR.RDIST1.GT.100.0D+00*TOBOHR).OR.
     *      (RDIST2.LT.ZERO.OR.RDIST2.GT.100.0D+00*TOBOHR))) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: FOR IRMDF, DISTANCE MUST BE 0-100 A.'
           IERROR = IERROR + 1
        END IF
        IF(NRATM1.GT.0.AND.NRATM2.GT.0.AND.
     *     (NRPNTS.LT.1.OR.NRPNTS.GT.100)) THEN
           IF(MASWRK) WRITE(IW,'(1X,A/)')
     *     'ERROR: FOR IRMDF, NRPNTS MUST BE 1-100.'
           IERROR = IERROR + 1
        END IF
        GOTO 100
      END IF
C
      IF(MASWRK)WRITE(IW,'(/1X,A,A/)')
     *'ERROR: UNRECOGNIZED $QUANPO KEYWORD=',TEXT
      IERROR = IERROR + 1
      GOTO 100
C
 120  CONTINUE
C
      IF(IERROR.GT.0) CALL ABRT
C
C
C     **** $QUANPO CHECK UP ****
C
      CALL TIMIT(1)
      IF(MASWRK)WRITE(IW,'(/1X,A/)')
     *'$QUANPO CHECK UP...'
C
C     -- CHECK QM STATE A AND B --
C        (THIS MUST BE DONE AT THE EARLIEST POSSIBLE STAGE)
C
      MELEA = NE
      MELEB =  0
      IREDOX=  0
      IQMPKA=  0
      IQMRXN=  0
      IF(NAT.GT.0.AND.MATOMB.GT.0) THEN
         IF(MATOMB.GT.MATOMA) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: MATOMB CANNOT BE GREATER THAN MATOMA.'
            CALL ABRT
            STOP
         END IF
         IF((MATOMA+MATOMB).NE.NAT) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,I8/)')
     *      'ERROR: (MATOMA+MATOMB) IS NOT EQUAL TO ',NAT
            CALL ABRT
            STOP
         END IF
         IF(RUNTYP.NE.MD.AND.IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: ONLY RUNTYP=MD CAN HAVE A NON-ZERO MATOMB ',
     *      'AND IFEPTYP=2.'
            CALL ABRT
            STOP
         END IF
         IF(IFEPTOP.EQ.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: IFEPTOP=0 CANNOT HAVE A NON-ZERO MATOMB.'
            CALL ABRT         
            STOP
         END IF
         IF(IFEPTOP.EQ.2) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: IFEPTOP=2 CANNOT HAVE A NON-ZERO MATOMB.'
            CALL ABRT
            STOP
         END IF
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            IQMRXN= 1
            ZDIFF = ZERO
            CDIFF = ZERO
            DO IA=1,MATOMA
               ZDIFF = ZDIFF + ABS(ZAN(IA)-ZAN(MATOMA+IA))
               CDIFF = CDIFF + ABS(C(1,IA)-C(1,MATOMA+IA))
     *                       + ABS(C(2,IA)-C(2,MATOMA+IA))
     *                       + ABS(C(3,IA)-C(3,MATOMA+IA))
            ENDDO
            IF(ZDIFF.GT.1.0D-10)THEN
               IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *         'ERROR: MATOMA AND MATOMB MUST CONTAIN',
     *         ' THE SAME MOLECULE.' 
               CALL ABRT
               STOP
            END IF
            CDIFF = CDIFF/(3*MATOMA)
            IF(CDIFF.GT.1.8897D+00)THEN
               IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *         'ERROR: THE GEOMETRIC PERTURBATION FROM MATOMA',
     *         ' TO MATOMB IS TOO LARGE.'
               CALL ABRT
               STOP
            END IF
         END IF
         IF((MCHARGA+MCHARGB).NE.ICH) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,I8/)')
     *      'ERROR: (MCHARA+MCHARGB) NOT EQUAL TO ',ICH
            CALL ABRT
            STOP
         END IF
         MELEA  = -MCHARGA
         DO III = 1, MATOMA
            MELEA = MELEA + INT(ZAN(III)+1.0D-03)
         ENDDO
         MELEB  = -MCHARGB
         DO III = MATOMA+1, MATOMA+MATOMB
            MELEB = MELEB + INT(ZAN(III)+1.0D-03)
         ENDDO
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
            ZDIFF = ZERO
            DO IA=1,MATOMA
               ZDIFF = ZDIFF + ABS(ZAN(IA)-ZAN(MATOMA+IA))
            ENDDO
            IF(INT(ZDIFF).EQ.0.AND.MELEA.NE.MELEB)
     *         IREDOX = ABS(MELEA-MELEB)
            IF(INT(ZDIFF).GT.0.AND.MELEA.EQ.MELEB)
     *         IQMPKA = INT(ZDIFF)
         END IF
         IF(SCFTYP.EQ.RHF .AND. (MULTA.GE.2.OR.MULTB.GE.2)) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: OPEN SHELL MOLECULE CANNOT USE RHF.'
            CALL ABRT
         END IF
         KK = MULTA - 1
         IF(MOD(MELEA,2).NE.MOD(KK,2)) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: QM STATE A MULTIPLICITY IS WRONG.'
            CALL ABRT
         END IF
         KK = MULTB - 1
         IF(MOD(MELEB,2).NE.MOD(KK,2)) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: QM STATE B MULTIPLICITY IS WRONG.'
            CALL ABRT
         END IF
C        - SAVE QM INFORMATION
         CALL SAVEQMAB
C        - SET QM AS STATE A
         CALL SETQMAB(0)
      END IF
C
C     -- VARIOUS ENFORCEMENTS --
C
      IF(XBOX   .LT.   ZERO) XBOX   = HUGE
      IF(YBOX   .LT.   ZERO) YBOX   = HUGE
      IF(ZBOX   .LT.   ZERO) ZBOX   = HUGE
      IF(XBOX.LT.HUGE.AND.YBOX.LT.HUGE.AND.ZBOX.LT.HUGE) THEN
         IF(SWRA .LT.ZERO) SWRA = 10.0D+00*TOBOHR
         IF(SWRB .LT.ZERO) SWRB = 12.0D+00*TOBOHR
         IF(SWRAQ.LT.ZERO) SWRAQ= 10.0D+00*TOBOHR
         IF(SWRBQ.LT.ZERO) SWRBQ= 12.0D+00*TOBOHR
      END IF
      IF(RSPHSOL.LT.   ZERO) RSPHSOL= HUGE
      IF(SPHRAD .LT.   ZERO) SPHRAD = HUGE
      IF(SWRA   .LT.   ZERO) SWRA   = HUGE*0.1D+00
      IF(SWRB   .LT.   ZERO) SWRB   = HUGE
      IF(SWRAQ  .LT.   ZERO) SWRAQ  = HUGE*0.1D+00
      IF(SWRBQ  .LT.   ZERO) SWRBQ  = HUGE
      IF(RXNEPS .LT.   ONE ) RXNEPS = ONE
      IF(WPERT2 .LT.   ZERO) WPERT2 = WPERT1
      IF(DT     .GT.1.0D-10) DT     = 1.0D-10
      IF(TIMDFS .LT.1.0D-12) TIMDFS = 1.0D-12
      TIMDFS  = INT(TIMDFS /DT+0.1D+00)*DT
      TIMGYRA = INT(TIMGYRA/DT+0.1D+00)*DT
      TIMRALL = INT(TIMRALL/DT+0.1D+00)*DT
      FIXEPS  = RXNEPS
      NKVEC   = ((2*KEWALD+1)**3 - 1)/2
C
      IF(IADDWAT.GT.0) THEN
         IF(ITYPWAT/100.NE.3.AND.ITYPWAT/100.NE.5)THEN
            IF(MASWRK) WRITE(IW,'(/1X,A/)')
     *      'ERROR: ITYPWAT MUST BE 3XX OR 5XX.'
            CALL ABRT
         END IF
      END IF
C
      IF(LOUT.GT.0) THEN
         IF(NFFTYP.EQ.0.OR.NFFTYP/10000.EQ.3.OR.NFFTYP/10000.EQ.5)THEN
         ELSE
            IF(MASWRK) WRITE(IW,'(/1X,A/)')
     *      'ERROR: LOUT=1 WORKS ONLY FOR NFFTYP=0, 30000, 50000.'
            CALL ABRT
         END IF
      END IF
C
C     -- DETERMINE MXFFAT --
C
      CALL TIMIT(1)
      IF(MASWRK)WRITE(IW,'(/1X,A/)')
     *'DETERMINE MXFFAT...'
      NXFFAT = 0
      NXBOND = 0
      NXANGL = 0
      NXDIHR = 0
      NXDIHB = 0
      NXCMAP = 0
      NXWAGG = 0
      IF(IFFDATA.EQ.1) THEN
         IEOF  = 0
         CALL SEQREW(IR)
         CALL FNDGRP(IR,' $FFDATA',IEOF)
         CALL OPNCRD(IR,-IW)
         IF(MASWRK)THEN
            KXFFAT = 0
            KXBOND = 0
            KXANGL = 0
            KXDIHR = 0
            KXDIHB = 0
            KXCMAP = 0
            KXWAGG = 0
  300       CONTINUE
            READ(IR,'(A100)',END=301) WD100
            DO I=1,100
               J = IACHAR(WD100(I:I))
               IF(J.GE.97.AND.J.LE.122) J = J - 32
               WD100(I:I) = CHAR(J)
            ENDDO
            READ(WD100,*) WORD
            IF(WORD.EQ.'$END      ') GOTO 301
            IF(WORD.EQ.'$FFDATB   ') GOTO 301
            IF(WORD.EQ.'COORDINATE') KXFFAT = 1
            IF(WORD.EQ.'BOND      ') KXBOND = 1
            IF(WORD.EQ.'ANGLE     ') KXANGL = 1
            IF(WORD.EQ.'DIHROT    ') KXDIHR = 1
            IF(WORD.EQ.'DIHR3V    ') KXDIHR = 1
            IF(WORD.EQ.'DIHBND    ') KXDIHB = 1
            IF(WORD.EQ.'CMAP      ') KXCMAP = 1
            IF(WORD.EQ.'WAGGING   ') KXWAGG = 1
            IF(KXFFAT.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXFFAT = 0
               NXFFAT = NXFFAT + 1
            END IF
            IF(KXBOND.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXBOND = 0
               NXBOND = NXBOND + 1
            END IF
            IF(KXANGL.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXANGL = 0
               NXANGL = NXANGL + 1
            END IF
            IF(KXDIHR.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXDIHR = 0
               NXDIHR = NXDIHR + 1
            END IF
            IF(KXDIHB.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXDIHB = 0
               NXDIHB = NXDIHB + 1
            END IF
            IF(KXCMAP.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXCMAP = 0
               NXCMAP = NXCMAP + 1
            END IF
            IF(KXWAGG.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXWAGG = 0
               NXWAGG = NXWAGG + 1
            END IF
            GOTO 300
  301       CONTINUE
         END IF
         IF(GOPARR) CALL DDI_BCAST(275,'I',NXFFAT,1,MASTER)
         IF(GOPARR) CALL DDI_BCAST(276,'I',NXBOND,1,MASTER)
         IF(GOPARR) CALL DDI_BCAST(277,'I',NXANGL,1,MASTER)
         IF(GOPARR) CALL DDI_BCAST(278,'I',NXDIHR,1,MASTER)
         IF(GOPARR) CALL DDI_BCAST(279,'I',NXDIHB,1,MASTER)
         IF(GOPARR) CALL DDI_BCAST(280,'I',NXCMAP,1,MASTER)
         IF(GOPARR) CALL DDI_BCAST(281,'I',NXWAGG,1,MASTER)
         IF(LOUT.EQ.1) THEN
            IF(NXBOND.EQ.0) NXBOND = NXFFAT*20
            IF(NXANGL.EQ.0) NXANGL = NXFFAT*40
            IF(NXDIHR.EQ.0) NXDIHR = NXFFAT*60
            IF(NXDIHB.EQ.0) NXDIHB = NXFFAT*20
            IF(NXWAGG.EQ.0) NXWAGG = NXFFAT*2
            IF(NXCMAP.EQ.0) NXCMAP = NXFFAT/7
         END IF
         IF(NXBOND.EQ.0) NXBOND = NXFFAT*3
         IF(NXANGL.EQ.0) NXANGL = NXFFAT*4
         IF(NXDIHR.EQ.0) NXDIHR = NXFFAT*5
         IF(NXDIHB.EQ.0) NXDIHB = NXFFAT/3
         IF(NXWAGG.EQ.0) NXWAGG = NXFFAT
         IF(NXCMAP.EQ.0) NXCMAP = NXFFAT/7
      END IF
      IF(ICOMBIN.GT.0.AND.IFFDATB.EQ.1) THEN
         IEOF  = 0
         CALL SEQREW(IR)
         CALL FNDGRP(IR,' $FFDATB',IEOF)
         CALL OPNCRD(IR,-IW)
         IF(MASWRK)THEN
            KXFFAT = 0
            KXBOND = 0
            KXANGL = 0
            KXDIHR = 0
            KXDIHB = 0
            KXCMAP = 0
            KXWAGG = 0
  304       CONTINUE
            READ(IR,'(A100)',END=305) WD100
            DO I=1,100
               J = IACHAR(WD100(I:I))
               IF(J.GE.97.AND.J.LE.122) J = J - 32
               WD100(I:I) = CHAR(J)
            ENDDO
            READ(WD100,*) WORD 
            IF(WORD.EQ.'$END      ') GOTO 305
            IF(WORD.EQ.'$FFDATA   ') GOTO 305
            IF(WORD.EQ.'COORDINATE') KXFFAT = 1
            IF(WORD.EQ.'BOND      ') KXBOND = 1
            IF(WORD.EQ.'ANGLE     ') KXANGL = 1
            IF(WORD.EQ.'DIHROT    ') KXDIHR = 1
            IF(WORD.EQ.'DIHR3V    ') KXDIHR = 1
            IF(WORD.EQ.'DIHBND    ') KXDIHB = 1
            IF(WORD.EQ.'CMAP      ') KXCMAP = 1
            IF(WORD.EQ.'WAGGING   ') KXWAGG = 1
            IF(KXFFAT.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXFFAT = 0
               NXFFAT = NXFFAT + 1
            END IF
            IF(KXBOND.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXBOND = 0
               NXBOND = NXBOND + 1
            END IF
            IF(KXANGL.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXANGL = 0
               NXANGL = NXANGL + 1
            END IF
            IF(KXDIHR.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXDIHR = 0
               NXDIHR = NXDIHR + 1
            END IF
            IF(KXDIHB.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXDIHB = 0
               NXDIHB = NXDIHB + 1
            END IF
            IF(KXCMAP.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXCMAP = 0
               NXCMAP = NXCMAP + 1
            END IF
            IF(KXWAGG.EQ.1) THEN
               IF(WORD.EQ.'STOP      ') KXWAGG = 0
               NXWAGG = NXWAGG + 1
            END IF
            GOTO 304
  305       CONTINUE
         END IF
         IF(GOPARR) CALL DDI_BCAST(275,'I',NXFFAT,1,MASTER)
         IF(GOPARR) CALL DDI_BCAST(276,'I',NXBOND,1,MASTER)
         IF(GOPARR) CALL DDI_BCAST(277,'I',NXANGL,1,MASTER)
         IF(GOPARR) CALL DDI_BCAST(278,'I',NXDIHR,1,MASTER)
         IF(GOPARR) CALL DDI_BCAST(279,'I',NXDIHB,1,MASTER)
         IF(GOPARR) CALL DDI_BCAST(280,'I',NXCMAP,1,MASTER)
         IF(GOPARR) CALL DDI_BCAST(281,'I',NXWAGG,1,MASTER)
         IF(NXBOND.EQ.0) NXBOND = NXFFAT*3
         IF(NXANGL.EQ.0) NXANGL = NXFFAT*4
         IF(NXDIHR.EQ.0) NXDIHR = NXFFAT*5
         IF(NXDIHB.EQ.0) NXDIHB = NXFFAT/3
         IF(NXWAGG.EQ.0) NXWAGG = NXFFAT
         IF(NXCMAP.EQ.0) NXCMAP = NXFFAT/7
      END IF
      IF(IFFPDB.EQ.1) THEN
         IEOF  = 0
         CALL SEQREW(IR)
         CALL FNDGRP(IR,' $FFPDB ',IEOF)
         CALL OPNCRD(IR,-IW)
         IF(MASWRK)THEN
  310       CONTINUE
            READ(IR,'(A100)',END=311) WD100
            DO I=1,100
               J = IACHAR(WD100(I:I))
               IF(J.GE.97.AND.J.LE.122) J = J - 32
               WD100(I:I) = CHAR(J)
            ENDDO
            READ(WD100,*) WORD
            IF(WORD.EQ.'$END      ') GOTO 311
            IF(WORD.EQ.'STOP      ') GOTO 311
            IF(WORD.EQ.'END       ') GOTO 311
            NXFFAT = NXFFAT + 1
            IF(WD100(1:6).EQ.'HETATM'.AND.
     *         WD100(14:14).EQ.'O'.AND.
     *         (WD100(18:20).EQ.'HOH'.OR.WD100(18:20).EQ.'WAT'))
     *      NXFFAT = NXFFAT + 2
            GOTO 310
  311       CONTINUE
         END IF
         IF(GOPARR) CALL DDI_BCAST(275,'I',NXFFAT,1,MASTER)
         IF(NXBOND.EQ.0) NXBOND = NXFFAT*3
         IF(NXANGL.EQ.0) NXANGL = NXFFAT*4
         IF(NXDIHR.EQ.0) NXDIHR = NXFFAT*5
         IF(NXDIHB.EQ.0) NXDIHB = NXFFAT/3
         IF(NXWAGG.EQ.0) NXWAGG = NXFFAT
         IF(NXCMAP.EQ.0) NXCMAP = NXFFAT/7
      END IF
      VOL = MIN(XBOX*YBOX*ZBOX, FOURTHIRD*PI*SPHRAD**3)
      VOLAV = VOL
      IF(VOL.LE.1.0D+30) THEN
         VOLWAT = MAX(ZERO, VOL-NXFFAT*45.0D+00)
         IF(ITYPWAT/100.EQ.5) THEN
            NXFFAT = NXFFAT +   INT(VOLWAT/40.0D+00)
            NXBOND = NXBOND + 9*INT(VOLWAT/40.0D+00)/5
            NXANGL = NXANGL + 6*INT(VOLWAT/40.0D+00)/5
         END IF
         IF(ITYPWAT/100.EQ.3) THEN
            NXFFAT = NXFFAT +   INT(VOLWAT/60.0D+00)
            NXBOND = NXBOND +   INT(VOLWAT/60.0D+00)
            NXANGL = NXANGL +   INT(VOLWAT/60.0D+00)/3
         END IF
         IF(IADDWAT.EQ.0.AND.VOLWAT.GT.0.5D+00*VOL) THEN
            IF(MASWRK)WRITE(IW,'(/1X,A/)')
     *      'WARNING: $QUANPO IADDWAT=0. SHOULD IT BE 1?'
         END IF
      END IF
C     -- STOP IF NXFFAT=0 --
      IF(NXFFAT.EQ.0) THEN
         IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *   'ERROR: $QUANPO OR $FFDATA IS WRONG.',
     *   ' "$" MUST BE AT THE 2ND COLUMN.'
         CALL ABRT
      END IF
      IF(MXFFAT.EQ.-1) MXFFAT = 100*(NXFFAT/100 + 2)
      IF(MXBOND.EQ.-1) MXBOND = 100*(NXBOND/100 + 2)
      IF(MXANGL.EQ.-1) MXANGL = 100*(NXANGL/100 + 2)
      IF(MXDIHR.EQ.-1) MXDIHR = 100*(NXDIHR/100 + 2)
      IF(MXDIHB.EQ.-1) MXDIHB = 100*(NXDIHB/100 + 2)
      IF(MXWAGG.EQ.-1) MXWAGG = 100*(NXWAGG/100 + 2)
      IF(MXCMAP.EQ.-1) MXCMAP = 100*(NXCMAP/100 + 2)
      IF(IFEPTOP.EQ.2) THEN
         MXFFAT = MXFFAT + 500
         MXBOND = MXBOND + 500*3
         MXANGL = MXANGL + 500*4
         MXDIHR = MXDIHR + 500*5
         MXDIHB = MXDIHB + 500/3
         MXWAGG = MXWAGG + 500/7
         MXCMAP = MXCMAP + 500/7
      END IF
      IF(NFOLD.GT.0) THEN
         MXFFAT = 100*(NXFFAT*(2**NFOLD)/100 + 2)
         MXBOND = 100*(NXBOND*(2**NFOLD)/100 + 2)
         MXANGL = 100*(NXANGL*(2**NFOLD)/100 + 2)
         MXDIHR = 100*(NXDIHR*(2**NFOLD)/100 + 2)
         MXDIHB = 100*(NXDIHB*(2**NFOLD)/100 + 2)
         MXWAGG = 100*(NXWAGG*(2**NFOLD)/100 + 2)
         MXCMAP = 100*(NXCMAP*(2**NFOLD)/100 + 2)
      END IF
C
C     -- CHECK EWALD SETTINGS --
C
      IF(IEWALD.GT.0) THEN
         IF(NAT.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: CURRENTLY NO EWALD CALCULATION IS ALLOWED',
     *      ' FOR QMMM SYSTEMS.'
            CALL ABRT
         END IF
         IF(IFIXSOL.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: NO FIXSOL CALCULATION IS ALLOWED',
     *      ' WHEN IEWALD > 0.'
            CALL ABRT
         END IF
         IF(ISPHSOL.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: NO SPHSOL CALCULATION IS ALLOWED',
     *      ' WHEN IEWALD > 0.'
            CALL ABRT
         END IF
      END IF
C
C     -- CHECK FREE ENERGY PERTURBATION SETTINGS --
C
      IF     (IFEPTOP.GT.0.AND.IFEPTYP.LE.0) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: IFEPTOP=1, 2 REQUIRE IFEPTYP=1, 2.'
         CALL ABRT
      ELSE IF(IFEPTOP.LE.0.AND.IFEPTYP.GT.0) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: IFEPTYP=1, 2 REQUIRE IFEPTOP=1, 2.'
         CALL ABRT
      ELSE IF(IFEPTOP.GT.0.AND.IFEPTYP.GT.0) THEN
         NADDATM = IADDWAT+IADDNA1+IADDK1+IADDCA2+IADDMG2+IADDCL1
     *            +JADDNA1+JADDK1
         IF(NADDATM.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: NO WATER OR IONS CAN BE ADDED VIA IADDWAT,',
     *      ' IADDNA1, ... WHEN IFEPTOP=1 OR 2.'
            CALL ABRT
         END IF
         IF(IFIXSOL.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: NO FIXSOL CALCULATION IS ALLOWED',
     *      ' WHEN IFEPTOP=1 OR 2.'
            CALL ABRT
         END IF
         IF(ISPHSOL.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: NO SPHSOL CALCULATION IS ALLOWED',
     *      ' WHEN IFEPTOP=1 OR 2.'
            CALL ABRT
         END IF
         IF(RUNTYP.NE.MD.AND.NAT.EQ.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: ONLY RUNTYP=MD CAN HAVE IFEPTOP>0 AND IFEPTYP>0 ',
     *      'FOR PURE MM SYSTEMS.'
            CALL ABRT
            STOP
         END IF
         IF(RUNTYP.NE.MD.AND.IFEPTOP.GT.0.AND.IFEPTYP.EQ.2) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: ONLY RUNTYP=MD CAN HAVE IFEPTOP>0 AND IFEPTYP=2.'
            CALL ABRT
            STOP
         END IF
         IF(NAT.GT.0.AND.MATOMB.EQ.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: QMMM FREE ENERGY CALCULATION NEEDS MATOMB.'
            CALL ABRT
         END IF
         IF(NAT.GT.0.AND.MATOMA.NE.KFREEATMP(501)) THEN
            IF(ITYPWAT/100.NE.5) THEN
               IF(MASWRK) WRITE(IW,'(1X,A/)')
     *         'ERROR: MATOMA MUST EQUAL TO KFREEA(1).'
               CALL ABRT
            END IF
            IF(ITYPWAT/100.EQ.5) THEN
               IF(MASWRK)WRITE(IW,*)
     *         '***************************************'
               IF(MASWRK)WRITE(IW,*)
     *         'WARNING: MATOMA NOT EQUAL TO KFREEA(1).'
               IF(MASWRK)WRITE(IW,*)
     *         '***************************************'
            END IF
         END IF
         IF(IFEPTOP.EQ.2) THEN
            IF(NFIXMM.GT.100) THEN
               IF(MASWRK) WRITE(IW,'(1X,A/)')
     *         'ERROR: NFIXMM EXCEEDED 100 WHEN IFEPTOP=2.'
               CALL ABRT
            END IF
            IF(IFEPTYP.EQ.1.AND.NAT.GT.0) THEN
               IF(MASWRK) WRITE(IW,'(1X,A/)')
     *         'ERROR: QMMM CANNOT USE IFEPTOP=2.'
               CALL ABRT
            END IF
            IF(IFEPTYP.EQ.2) THEN
               IF(MASWRK) WRITE(IW,'(1X,A/)')
     *         'ERROR: IFEPTYP=2 CANNOT USE IFEPTOP=2.'
               CALL ABRT
            END IF
         END IF
         IF(IFEPTYP.EQ.2) THEN
            IF(WSIMUL.NE.ZERO.OR.WPERT1.NE.ONE.OR.WPERT2.NE.ONE.OR.
     *         ISOFTCR.NE.0)THEN
               IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *         'ERROR: IFEPTYP=2 MUST USE',
     *         ' WSIMUL=0.0, WPERT1=1.0, WPERT2=1.0, ISOFTCR=0.'
               CALL ABRT
            END IF
            IYES = 0
            DO III=1, NFIXMM
               I = IFIXMM(III)
               DO JJJ=1,KFREEATMP(501)
                  J = KFREEATMP(JJJ)
                  IF(I.EQ.J) IYES = IYES + 1
               ENDDO
            ENDDO
            IF(IYES.NE.KFREEATMP(501)) THEN
               IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *         'ERROR: NFIXMM ATOMS MUST',
     *         ' EQUAL TO THE KFREEA LIST.'
               CALL ABRT
            END IF
            IYES = 0
            DO III=1, NFIXMMB
               I = IFIXMMB(III)
               DO JJJ=1,KFREEBTMP(501)
                  J = KFREEBTMP(JJJ)
                  IF(I.EQ.J) IYES = IYES + 1
               ENDDO
            ENDDO
            IF(IYES.NE.KFREEBTMP(501)) THEN
               IF(MASWRK) WRITE(IW,'(1X,A/)')
     *         'ERROR: NFIXMMB ATOMS MUST',
     *         ' EQUAL TO THE KFREEB LIST.'
               CALL ABRT
            END IF
         END IF
         SOL1CH  = ZERO
         SOL1LJ  = ZERO
         SOL1IM  = ZERO
         SOL2CH  = ZERO
         SOL2LJ  = ZERO
         SOL2IM  = ZERO
         PMF1CH  = ZERO
         PMF1LJ  = ZERO
         PMF1PO  = ZERO
         PMF1BD  = ZERO
         PMF1AG  = ZERO
         PMF1DR  = ZERO
         PMF1DB  = ZERO
         PMF1WG  = ZERO
         PMF1CM  = ZERO
      END IF
C
C     -- CHECK MEAN-FIELD SETTINGS --
C
      MEANSIZ = 1
      ONEMNFD = 1.0D+00
      IF(MEANFLD.GT.0) THEN
         MEANSIZ = MEANFLD
         ONEMNFD = 1.0D+00/MEANFLD
         NSTEP   = INT(MAX(NSTEP,MEANSIZ)*ONEMNFD+0.1D+00)*MEANSIZ
         KOUT    = INT(MAX(KOUT ,MEANSIZ)*ONEMNFD+0.1D+00)*MEANSIZ
         IF(NAT.LE.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: MEANFLD IS ONLY FOR QMMM (REQUIRE $DATA).'
            CALL ABRT
         END IF
         IF(RUNTYP.NE.MD) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: MEANFLD IS ONLY FOR RUNTYP=MD'
            CALL ABRT
         END IF
         IF(LJQMMM.NE.1) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: MEANFLD MUST USE LJQMMM=1.'
            CALL ABRT
         END IF
         IF(MOD(MEANFLD,MFMERGE).NE.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: MFMERGE IS NOT A GOOD VALUE.'
            CALL ABRT
         END IF
         IF((IFIXSOL+ISPHSOL).GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *         'ERROR: MEANFLD DOES NOT WORK WITH',
     *         ' IFIXSOL=1 OR ISPHSOL=1.'
            CALL ABRT
         END IF
      END IF
C
      IF(NAT.GT.0.AND.MATOMB.EQ.0) THEN
         IF(SCFTYP2.NE.SCFTYP  .OR. TDDFT2 .NE.TDDFTYP .OR.
     *      CITYP2 .NE.CITYP   .OR. MPLEVL2.NE.MPLEVL  .OR.
     *      MULT2  .NE.MUL     .OR. ICHARG2.NE.ICH         ) THEN
               IDOQM2 = 1
         END IF
      END IF
C
      IF((RUNTYP.EQ.ENERGY.OR.RUNTYP.EQ.GRAD).AND.NAT.LE.0) THEN
         NSTEP  = 0
         RUNTYP = OPTMIZ
      END IF
C
      IF(NFOLD.GT.0) THEN
         NSTEP  = -1
         RUNTYP =  OPTMIZ
         IADDWAT=  0
         ICOMBIN=  0
         IFEPTOP=  0
         IFEPTYP=  0
         IDELETE=  0
         ISCOOP =  0
         IF(NAT.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: NFOLD CANNOT BE APPLIED TO QM ATOMS.'
            CALL ABRT
         END IF
      END IF
C
      IF(ICOMBIN.GT.0) THEN
         IF(NAT.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: ICOMBIN ONLY WORKS FOR',
     *      ' $FFDATA AND $FFDATB (NO $DATA).'
            CALL ABRT
         END IF
         NSTEP  = -1
         RUNTYP =  OPTMIZ
         IFEPTOP=  0
         IFEPTYP=  0
         IDELETE=  0
         ISCOOP =  0
      END IF
C
      IF(IDELETE.GT.0) THEN
         IF(NAT.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: IDELETE ONLY WORKS FOR',
     *      ' $FFDATA (NO $DATA).'
            CALL ABRT
         END IF
         NSTEP  = -1
         RUNTYP =  OPTMIZ
         IFEPTOP=  0
         IFEPTYP=  0
         ISCOOP =  0
      END IF
C
      IF(ISCOOP.GT.0) THEN
         IF(NAT.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: ISCOOP ONLY WORKS FOR',
     *      ' $FFDATA (NO $DATA).'
            CALL ABRT
         END IF
         NSTEP  = -1
         RUNTYP =  OPTMIZ
         IFEPTOP=  0
         IFEPTYP=  0
      END IF
C
      IF(NDFS.GT.0 .AND. ITSTAT.EQ.2) THEN
         IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *   'ERROR: ANDERSEN THERMOSTAT CANNOT',
     *   ' BE USED IN DIFFUSION COEFFICIENT CALCULATION.'
         CALL ABRT
      END IF
C
      IF(INTALG.EQ.1 .AND. ITSTAT.EQ.2) THEN
         IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *   'ERROR: ANDERSEN THERMOSTAT CANNOT',
     *   ' BE USED WITH INTALG=1. PLEASE USE INTALG=2.'
         CALL ABRT
      END IF
C
      IF(ISPHSOL.EQ. 0 .OR. ISPHSOL.EQ.  1 .OR.
     *   ISPHSOL.EQ.60 .OR. ISPHSOL.EQ.240 .OR.
     *   ISPHSOL.EQ.960.OR. ISPHSOL.EQ.3840) THEN
      ELSE
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: ISPHSOL MUST BE 0, 1, 60, 240, 960 OR 3840.'
         CALL ABRT
      END IF
      IF(ISPHSOL.EQ.1 .AND. NAT.GT.0) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: ISPHSOL=1 CURRENTLY WORKS ONLY FOR PURE MM SYSTEM.'
         CALL ABRT
      END IF
      IF(ISPHSOL.GT.0) THEN
         XBOX = HUGE
         YBOX = HUGE
         ZBOX = HUGE
         SWRA = HUGE*0.1D+00
         SWRB = HUGE
         SWRAQ= HUGE*0.1D+00
         SWRBQ= HUGE
         ISHIFT = 0
         BUFWID2= 3.0D+00*TOBOHR
         BUFWID1= 3.0D+00*TOBOHR
         MXLIST2= MXFFAT+200
         MXLIST1= MXFFAT+200
         IF(SPHRAD.GT.RSPHSOL) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: SPHRAD SHOULD NOT BE LARGER THAN RSPHSOL.'
            CALL ABRT
         END IF
      END IF
      IF(SPHRAD.LT.HUGE .AND. MIN(XBOX,YBOX,ZBOX).LT.HUGE) THEN
         IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *   'ERROR: SPHRAD AND XBOX(YBOX,ZBOX) ',
     *   'CANNOT COEXIST. CHOOSE ONLY ONE.'
         CALL ABRT
      END IF
      IF(IFIXSOL.GT.0) THEN
         XBOX = HUGE
         YBOX = HUGE
         ZBOX = HUGE
         SWRA = HUGE*0.1D+00
         SWRB = HUGE
         SWRAQ= HUGE*0.1D+00
         SWRBQ= HUGE
         ISHIFT = 0
         BUFWID2= 3.0D+00*TOBOHR
         BUFWID1= 3.0D+00*TOBOHR
         MXLIST2= MXFFAT+200
         MXLIST1= MXFFAT+200
      END IF
      IF(IFIXSOL.EQ.1 .AND. ISPHSOL.GT.0) THEN
         IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *   'ERROR: IFIXSOL=1 AND ISPHSOL > 0 ',
     *   'CANNOT COEXIST. CHOOSE ONLY ONE.'
         CALL ABRT
      END IF
      IF(SWRB.LT.HUGE) THEN
         IF(SWRA.GT.SWRB.OR.(SWRB+SWRB).GT.MIN(XBOX,YBOX,ZBOX))THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: SWRA MUST BE < SWRB,',
     *      ' AND SWRB MUST BE < 0.5*XBOX (YBOX, ZBOX)'
            CALL ABRT
         END IF
      ELSE
         SWRA   =  HUGE*0.1D+00
         SWRB   =  HUGE
         BUFWID2= 3.0D+00*TOBOHR
         BUFWID1= 3.0D+00*TOBOHR
         MXLIST2= MXFFAT+200
         MXLIST1= MXFFAT+200
      END IF
      IF(NAT.GT.0.AND.SWRBQ.LT.HUGE) THEN
         IF(SWRAQ.GT.SWRBQ.OR.(SWRBQ+SWRBQ).GT.MIN(XBOX,YBOX,ZBOX))THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: SWRAQ MUST BE < SWRBQ,',
     *      ' AND SWRBQ MUST BE < 0.5*XBOX (YBOX, ZBOX)'
            CALL ABRT
         END IF
      ELSE
         SWRAQ  =  HUGE*0.1D+00
         SWRBQ  =  HUGE
      END IF
      IF(SPHRAD.LT.1.0D+30) IPSTAT = 0
      IF(IADDWAT.EQ.0) THEN
         IADDNA1  = 0
         IADDK1   = 0
         IADDCA2  = 0
         IADDMG2  = 0
         IADDCL1  = 0
      END IF
      IF(JADDNA1.GT.0 .AND. JADDK1.GT.0) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: CANNOT USE BOTH JADDNA1 AND JADDK1.'
         CALL ABRT
      END IF
C
      MXLIST1 = MIN(MXLIST1,MXFFAT+200)
      MXLIST2 = MIN(MXLIST2,MXFFAT+200)
      MXCHECK = MIN(MXCHECK,300)
      IF(BUFWID2.LT.BUFWID1) BUFWID2 = BUFWID1
      IF(MXLIST2.LT.MXLIST1) MXLIST2 = MXLIST1
      IF(BUFWID1.EQ.BUFWID2) MXLIST1 = MXLIST2
      IF(NFOLD.GT.0) THEN
         MXLIST1 = 1
         MXLIST2 = 1
      END IF
C
      IF(WT14LJ.EQ.-1.0D+00) THEN
         WT14LJ = 1.0D+00
         IF(NFFTYP/10000.EQ.2)WT14LJ=1.0D+00
         IF(NFFTYP/10000.EQ.3)WT14LJ=1.0D+00
         IF(NFFTYP/10000.EQ.4)WT14LJ=1.0D+00
         IF(NFFTYP/10000.EQ.5)WT14LJ=1.0D+00
      END IF
      IF(WT14CH.EQ.-1.0D+00) THEN
         WT14CH = 1.0D+00
         IF(NFFTYP/10000.EQ.2)WT14CH=1.0D+00
         IF(NFFTYP/10000.EQ.3)WT14CH=1.0D+00/1.2D+00
         IF(NFFTYP/10000.EQ.4)WT14CH=0.5D+00
         IF(NFFTYP/10000.EQ.5)WT14CH=0.75D+00
      END IF
C     -- IN CASE INPUT AS 0.8333333 FOR AMBER, MAKE IT 1/1.2
      WT14CH = DBLE(NINT(WT14CH*1.2D+03))/1.2D+03
C
      C3BOND = ZERO
      C4BOND = ZERO
      C3ANGL = ZERO
      IF(NFFTYP/10000.EQ.5) THEN
         C3BOND = -2.0D+00*TOANGS       ! -2.0/A
         C4BOND = C3BOND*C3BOND*7.0D+00/12.0D+00
         C3ANGL = -0.4D+00              ! -0.4/RADIAN
      END IF
C
      IF(RUNTYP.EQ.MD) THEN
C        -- SOME WATER MODELS MUST BE COMPLETELY FLEXIBLE IN MD --
         IF(ITYPWAT.EQ.301 .OR. 
     *      ITYPWAT.EQ.302 .OR.
     *      ITYPWAT.EQ.303     ) THEN
            IF(IRATTLE.GT.0) THEN
               IF(MASWRK) WRITE(IW,'(1X,A,I5,A,/1X)')
     *         'ERROR: ITYPWAT=',ITYPWAT,' MUST USE IRATTLE=0.'
               CALL ABRT
            END IF
         END IF
C        -- SOME WATER MODELS MUST BE COMPLETELY RIGID IN MD --
         IF(ITYPWAT.EQ.304 .OR.
     *      ITYPWAT.EQ.305 .OR.
     *      ITYPWAT.EQ.306 .OR.
     *      ITYPWAT.EQ.307 .OR.
     *      ITYPWAT.EQ.308 .OR.
     *      ITYPWAT.EQ.504 .OR.
     *      ITYPWAT.EQ.505 .OR.
     *      ITYPWAT.EQ.506     ) THEN
            IF(IRATTLE.NE.10.AND.IRATTLE.NE.20) THEN
               IF(MASWRK) WRITE(IW,'(1X,A,I5,A,/1X)')
     *         'ERROR: ITYPWAT=',ITYPWAT,' MUST USE IRATTLE=10 OR 20.'
               CALL ABRT
            END IF
         END IF
      END IF
      IF(RUNTYP.NE.MD) IRATTLE = 0
C
      IF(SCALRAT.LT.ZERO) THEN
         SCALRAT = ONE
         IF(IRATTLE.EQ.10.OR.IRATTLE.EQ.20) THEN
            IF(ITYPWAT/100.EQ.3) SCALRAT = 1.3D+00
            IF(ITYPWAT/100.EQ.4) SCALRAT = 1.4D+00
            IF(ITYPWAT/100.EQ.5) SCALRAT = 1.5D+00
         END IF
      END IF
C
      IF(NRALL.EQ.1) THEN
         NRMSD = 1
         NGYRA = 1
      END IF
C
      IF(NRDEN.GT.0) THEN
         NBINRDEN = INT(SPHRAD/DELRDF) + 1
         IF(NBINRDEN.GT.1000) THEN
            IF(MASWRK)THEN
               WRITE(IW,*)'ERROR: TOO MANY BINS IN RDEN CALCULATION.'
               WRITE(IW,'(1X,A,1X,F8.6,1X,A/)')
     *         'PLEASE INCREASE "DELRDF" TO AT LEAST',
     *         SPHRAD*TOANGS/1000,'A.'
            END IF
            CALL ABRT
         END IF
      END IF
C
      IF(IDOPOL.EQ.-1) THEN
         IDOPOL = 100
         IF(NFFTYP/10000.EQ.3) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: MUST INPUT IDOPOL=0 OR 100 FOR AMBER.'
            CALL ABRT
         END IF
      END IF
C
      IF(RUNTYP.EQ.MD.AND.TEMP0.LT.ZERO) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: MUST INPUT TEMP0 FOR RUNTYP=MD.'
         CALL ABRT
      END IF
      IF(RUNTYP.NE.MD.AND.TEMP0.LT.ZERO) TEMP0=298.15D+00
C
      IF(IHESS.EQ.-1) THEN
         IHESS = 0
         IF(NAT.GT.0.AND.NACTMM.LE.2000.AND.NACTQM.LE.2000) IHESS = 1
         IF(NAT.GT.0.AND.(MXFFAT+NAT).LE.2000) IHESS = 1
      END IF
      IF(RUNTYP.EQ.HSSIAN) NSTEP = 0
      IF(NAT.LE.0) JUMBUP=0
C
      IF(NFFTYP.LT.0) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: MUST INPUT NFFTYP (NO DEFAULT).'
         CALL ABRT
      END IF
C
      IF(APODAMP.LE.ZERO) THEN
         IF(IPODAMP.EQ.0) APODAMP = 1.00D-20
         IF(IPODAMP.EQ.1) APODAMP = 2.50D+00
         IF(IPODAMP.EQ.2) APODAMP = 2.00D+00
         IF(IPODAMP.EQ.3) APODAMP = 0.30D+00
      END IF
      SCRFAC  = APODAMP
      RSCRFAC = ONE/SCRFAC
      SCRF2   = SCRFAC*SCRFAC
      SCRF3   = SCRF2*SCRFAC
      SCRF4   = SCRF2*SCRF2
C
      IF(RUNTYP.EQ.MD.AND.NRATM1.GT.0.AND.NRATM2.GT.0) THEN
         ITEMP = MOD(NSTEP,NRPNTS)
         IF(ITEMP.NE.0) NSTEP = NSTEP + NRPNTS - ITEMP
         INTRSTP= NSTEP/NRPNTS
         RINTRV=(RDIST2-RDIST1)/DBLE(NRPNTS)
      END IF
C
C     -- SWF COMMON BLOCK --
C
      DT      = DT/2.418884326505D-17
      DT2     = DT*DT
      TIMDFS  = TIMDFS/2.418884326505D-17
      TIMRALL = TIMRALL/2.418884326505D-17
      TIMGYRA = TIMGYRA/2.418884326505D-17
      VELMAX  = 0.2D+00/DT     !  10583.5 M/S FOR DT=1.0 FS
      SWRA2   = SWRA*SWRA
      ONESWRA = ONE/SWRA
      ONESWRA2= ONESWRA*ONESWRA
      SWRB2   = SWRB*SWRB
      ONESWRB = ONE/SWRB
      ONESWRB2= ONESWRB*ONESWRB
      ONESWRB4= ONESWRB2*ONESWRB2
      EPS1RB  = THREE*RXNEPS/(TWO*RXNEPS+ONE)*ONESWRB
      EPS1RB3 = (RXNEPS-ONE)/(TWO*RXNEPS+ONE)*ONESWRB*ONESWRB2
      SWFDUM1 = ONE/(SWRB2 - SWRA2)
      SWFDUM2 = SWFDUM1*SWFDUM1
      SWFDUM3 = SWFDUM2*SWFDUM1
      SWFDUM4 = SWFDUM2*SWFDUM2
      SWFDUM5 = SWFDUM2*SWFDUM3
      SWRAQ2  = SWRAQ*SWRAQ
      ONESWRAQ= ONE/SWRAQ
      ONESWRAQ2= ONESWRAQ*ONESWRAQ
      SWRBQ2  = SWRBQ*SWRBQ
      ONESWRBQ= ONE/SWRBQ
      ONESWRBQ2= ONESWRBQ*ONESWRBQ
      ONESWRBQ4= ONESWRBQ2*ONESWRBQ2
      SWFDUM1Q= ONE/(SWRBQ2 - SWRAQ2)
      SWFDUM2Q= SWFDUM1Q*SWFDUM1Q
      SWFDUM3Q= SWFDUM2Q*SWFDUM1Q
      SWFDUM4Q= SWFDUM2Q*SWFDUM2Q
      SWFDUM5Q= SWFDUM2Q*SWFDUM3Q
      ONEXBOX = ONE/XBOX
      ONEYBOX = ONE/YBOX
      ONEZBOX = ONE/ZBOX
C
C     -- SET UP ALL MEMORY POINTERS
C
      CALL VALFM(LOADFM)
      LFFATMNAM  = LOADFM     +          1
      LFFCORD    = LFFATMNAM  +   2*MXFFAT
      LFFCORDSV  = LFFCORD    +   3*MXFFAT
      LFFCORDSV2 = LFFCORDSV  +   3*MXFFAT
      LFFCORDSVQ = LFFCORDSV2 +   3*MXFFAT
      LFFOLDCORD = LFFCORDSVQ +   3*MXFFAT
      LFFLSTRAT  = LFFOLDCORD +   3*MXFFAT
      LFFDSTRAT  = LFFLSTRAT  +   2*(MXBOND+MXANGL)/NWDVAR + 1
      LFFMVFASTS2= LFFDSTRAT  +      MXBOND+MXANGL
      LFFMVFASTS3= LFFMVFASTS2+     MXFFAT/2/NWDVAR + 10
      LFFMVFASTS4= LFFMVFASTS3+     MXFFAT/2/NWDVAR + 10
      LFFMVFASTL2= LFFMVFASTS4+     MXFFAT/4/NWDVAR + 10
      LFFMVFASTL3= LFFMVFASTL2+     MXFFAT/2/NWDVAR + 10
      LFFMVFASTL4= LFFMVFASTL3+     MXFFAT/2/NWDVAR + 10
      LFFZANF    = LFFMVFASTL4+     MXFFAT/4/NWDVAR + 10
      LFFZMAS    = LFFZANF    +     MXFFAT
      LFFONEMAS  = LFFZMAS    +     MXFFAT
      LFFCHARG   = LFFONEMAS  +     MXFFAT
      LFFPOL     = LFFCHARG   +     MXFFAT
      LFFPOLSV   = LFFPOL     +     MXFFAT
      LFFDIP     = LFFPOLSV   +     MXFFAT
      LFFDIPOLD  = LFFDIP     +   3*MXFFAT
      LFFFIELD1  = LFFDIPOLD  +   3*MXFFAT
      LFFFIELD2  = LFFFIELD1  +   3*MXFFAT
      LFFFIELD3  = LFFFIELD2  +   3*MXFFAT
      LFFSIG     = LFFFIELD3  +   3*MXFFAT
      LFFEPS     = LFFSIG     +     MXFFAT
      LFFSIG2    = LFFEPS     +     MXFFAT
      LFFEPS2    = LFFSIG2    +     MXFFAT
      LFFBOND0   = LFFEPS2    +     MXFFAT
      LFFFCBOND  = LFFBOND0   +     MXBOND
      LFFANGL0   = LFFFCBOND  +     MXBOND
      LFFFCANGL  = LFFANGL0   +     MXANGL
      LFFFCWAGG  = LFFFCANGL  +     MXANGL
      LFFVROT    = LFFFCWAGG  +     MXWAGG
      LFFNNN     = LFFVROT    +     MXDIHR
      LFFGAMA    = LFFNNN     +     MXDIHR/NWDVAR + 1
      LFFIPAIR   = LFFGAMA    +     MXDIHR
      LFFDIHB0   = LFFIPAIR   +   2*MXBOND
      LFFFCDIHB  = LFFDIHB0   +     MXDIHB
      LFFNONLS1  = LFFFCDIHB  +     MXDIHB
      LFFNONLS2  = LFFNONLS1  +   (10+MXFFAT/NPROC)*MXLIST1/NWDVAR + 1
      IF(BUFWID2.EQ.BUFWID1)
     *LFFNONLS2  = LFFNONLS1
      LFFNONLSTQ = LFFNONLS2  +   (10+MXFFAT/NPROC)*MXLIST2/NWDVAR + 1
      LFFLSTCELL = LFFNONLSTQ +     MXFFAT/NWDVAR + 1
      LFFKLIST   = LFFLSTCELL +   2*MXFFAT/NWDVAR + 1
      LFFKBLST   = LFFKLIST   +   3*MXANGL/NWDVAR + 1
      LFFFCSTBD  = LFFKBLST   +   2*MXANGL/NWDVAR + 1
      LFFLLIST   = LFFFCSTBD  +   2*MXANGL
      LFFFCDIHR  = LFFLLIST   +   4*MXDIHR/NWDVAR + 1
      LFFMLIST   = LFFFCDIHR  +   3*MXDIHR
      LFFNLIST   = LFFMLIST   +   4*MXWAGG/NWDVAR + 1
      LFFMAPLST  = LFFNLIST   +   4*MXDIHB/NWDVAR + 1
      LFFCMAPCO  = LFFMAPLST  +   6*MXCMAP/NWDVAR + 1
      LFFL1213J  = LFFCMAPCO  +   4*4*24*24*3
      LFFL14J    = LFFL1213J  +   2*(MXBOND+MXANGL+NAT*NAT)/NWDVAR + 1
      LFFVEL     = LFFL14J    +   2*MXDIHR/NWDVAR + 1
      LFFVELSV   = LFFVEL     +   3*MXFFAT
      LFFFFGRD0  = LFFVELSV   +   3*MXFFAT
      LFFFFGRD1  = LFFFFGRD0  +   3*MXFFAT
      LFFFFGRD2  = LFFFFGRD1  +   3*MXFFAT
      LFFCLPR    = LFFFFGRD2  +   3*MXFFAT
      LFFZLPR    = LFFCLPR    +   4*MXFFAT
      LFFNLPR    = LFFZLPR    +   4*MXFFAT
      LFFNORDER  = LFFNLPR    +     MXFFAT
      LFFFCLJTP  = LFFNORDER  +   MIN(1,IDELETE+ISCOOP)*
     *                              MXFFAT/NWDVAR + 1
      LFFNTYPE   = LFFFCLJTP  +   2*MXMMTP*MXMMTP
      LAST       = LFFNTYPE   +     MXFFAT/NWDVAR + 1
C
C     FOR QMMM RUNS
C
      LFFDETMP   = LAST
      LFFQMGRD0  = LFFDETMP   +    3*MXATM
      LFFQMGRD1  = LFFQMGRD0  +    3*MXATM
      LFFQMGRD2  = LFFQMGRD1  +    3*MXATM
      LFFQMVEL   = LFFQMGRD2  +    3*MXATM
      LFFOLDC    = LFFQMVEL   +    3*MXATM
      LFFQMVELSV = LFFOLDC    +    3*MXATM
      LFFQMZMAS  = LFFQMVELSV +    3*MXATM
      LFFQM1MAS  = LFFQMZMAS  +      MXATM
      LFFDIPMP   = LFFQM1MAS  +      MXATM
      LFFDIPTA   = LFFDIPMP   +   3*MXFFAT
      LFFDIPXY   = LFFDIPTA   +   3*MXFFAT
      LFFLISTQM  = LFFDIPXY   +   3*MXFFAT
      LAST       = LFFLISTQM  +    (MXFFAT+MXATM+1)/NWDVAR + 1
C
C     FOR MEANFLD QMMM RUNS
C
      LFFMERGE   = LAST
      LFFCORDMN  = LFFMERGE   +   (MEANFLD/MFMERGE)
     *                             *MXFFAT/NPROC/NWDVAR   + 1
      LFFCORDM1  = LFFCORDMN  +   3*MXFFAT*MIN(1,MEANFLD)
     *                             *MEANSIZ/NPROC         + 1
      LFFCHGIMG  = LFFCORDM1  +   3*MXFFAT*MIN(1,MEANFLD) + 1
      LFFDIPIMG  = LFFCHGIMG  +      MXATM*MIN(1,MEANFLD) + 1
      LFFQADIMG  = LFFDIPIMG  +    3*MXATM*MIN(1,MEANFLD) + 1
      LFFOCTIMG  = LFFQADIMG  +    6*MXATM*MIN(1,MEANFLD) + 1
      LFFCRDIMG  = LFFOCTIMG  +   10*MXATM*MIN(1,MEANFLD) + 1
      LFFQMGRDMN = LFFCRDIMG  +    3*MXATM*MIN(1,MEANFLD) + 1
      LFFCHGIMB  = LFFQMGRDMN +    3*MXATM*MIN(1,MEANFLD) + 1
      LFFDIPIMB  = LFFCHGIMB  +      MXATM*MIN(1,MEANFLD) + 1
      LFFQADIMB  = LFFDIPIMB  +    3*MXATM*MIN(1,MEANFLD) + 1
      LFFOCTIMB  = LFFQADIMB  +    6*MXATM*MIN(1,MEANFLD) + 1
      LFFCRDIMB  = LFFOCTIMB  +   10*MXATM*MIN(1,MEANFLD) + 1
      LFFINTLST  = LFFCRDIMB  +    3*MXATM*MIN(1,MEANFLD) + 1
      LAST       = LFFINTLST  +     MXFFAT*MIN(1,MEANFLD)
     *                                          /NWDVAR   + 1
C
C     FOR FIXSOL
C
      MXTEMP     = 1
      IF(IFIXSOL.EQ.1) MXTEMP = MXFFAT+MXATM
      IF(IFIXSOL.EQ.1.AND.MXFFTS.EQ.1) MXFFTS=MXTEMP*NTSATM/4
      IF(MEANFLD.GT.0.AND.MFQMCHG.EQ.10) NTSATM = 240
      IF(MEANFLD.GT.0.AND.MFQMCHG.EQ.10) MXTEMP = MXATM + 1
      IF(MEANFLD.GT.0.AND.MFQMCHG.EQ.10) MXFFTS = MXTEMP*NTSATM/4
      LFFDAI     = LAST
      LFFDAIT    = LFFDAI     +     3*40*MXFFTS
      LFFIDDAI   = LFFDAIT    +     3*960*40
      LFFIDTMP   = LFFIDDAI   +     41*MXFFTS/NWDVAR + 1
      LFFTMPTS   = LFFIDTMP   +     41*960/NWDVAR + 1
      LFFXTSFIX  = LFFTMPTS   +     3*MXTEMP
      LFFYTSFIX  = LFFXTSFIX  +     MXFFTS
      LFFZTSFIX  = LFFYTSFIX  +     MXFFTS
      LFFAFIX    = LFFZTSFIX  +     MXFFTS
      LFFQFIX    = LFFAFIX    +     MXFFTS
      LFFVFIX1   = LFFQFIX    +     MXFFTS
      LFFVFIX2   = LFFVFIX1   +     MXFFTS
      LFFIDATOM  = LFFVFIX2   +     MXFFTS
      LFFRFIX    = LFFIDATOM  +     MXFFTS
      LFFQFIXMP  = LFFRFIX    +     MXTEMP
      LFFQFIXTA  = LFFQFIXMP  +     MXFFTS
      LFFQFIXXY  = LFFQFIXTA  +     MXFFTS
      LAST       = LFFQFIXXY  +     MXFFTS
C
C     FOR SPHERICAL BOUNDARY CONDITION SOLVATION MODEL (SPHSOL)
C
      NTS        = ISPHSOL
      NTS1       = MAX(NTS,1)
      LFFXTS     = LAST
      LFFYTS     = LFFXTS     +    NTS1
      LFFZTS     = LFFYTS     +    NTS1
      LFFCMAT1   = LFFZTS     +    NTS1
      LFFQRXN1   = LFFCMAT1   +    NTS1*NTS1
      LFFQRXN2   = LFFQRXN1   +    NTS1
      LFFPOT1    = LFFQRXN2   +    NTS1
      LFFPOT2    = LFFPOT1    +    NTS1
      LFFQRXNMP  = LFFPOT2    +    NTS1
      LFFQRXNTA  = LFFQRXNMP  +    NTS1
      LFFQRXNXY  = LFFQRXNTA  +    NTS1
      LAST       = LFFQRXNXY  +    NTS1
C
C     FOR RDF CALCULATION
C
      LFFGOFR    = LAST
      LFFNFRAG1  = LFFGOFR    +    1000*10
      LFFNFRAG2  = LFFNFRAG1  +    10
      LFFFRAG1   = LFFNFRAG2  +    10
      LFFFRAG2   = LFFFRAG1   +    20
      LAST       = LFFFRAG2   +    20
C
C     FOR DIELECTRIC CONSTANT CALCULATION
C
      LFFDIESTEP = LAST
      LFFDI1STEP = LFFDIESTEP +    3*1000
      LAST       = LFFDI1STEP +    3*1000
C
C     FOR VIBRATIONAL SPECTRUM CALCULATION
C
      JVIBOUT    = MAX(10,JOUT)
      LFFIVIBMM  = LAST
      LFFDIPSTEP = LFFIVIBMM  +    200
      LFFVELSTEP = LFFDIPSTEP +    3*JVIBOUT
      LFFDQMSTEP = LFFVELSTEP +    3*JVIBOUT
      LFFDMMSTEP = LFFDQMSTEP +    3*JVIBOUT
      LFFDM1STEP = LFFDMMSTEP +    3*JVIBOUT
      LFFVQMSTEP = LFFDM1STEP +    3*JVIBOUT
      LFFVMMSTEP = LFFVQMSTEP +    3*JVIBOUT
      LFFVM1STEP = LFFVMMSTEP +    3*JVIBOUT
      LFFQMVSTEP = LFFVM1STEP +    3*JVIBOUT
      LFFMMVSTEP = LFFQMVSTEP +    3*JVIBOUT*(NAT+1)
      LAST       = LFFMMVSTEP +    3*JVIBOUT*(NVIBMM+1)
C
C     FOR RDEN CALCULATION
C
      LFFPRO     = LAST
      LFFNRDPRATM= LFFPRO     +    1000*10
      LFFRDPRATM = LFFNRDPRATM+    10
      LAST       = LFFRDPRATM +    20
C
C     FOR DIFFUSION COEFFICIENT CALCULATION
C
      MXTEMP     = 1
      IF(NDFS.GT.0) MXTEMP = MXFFAT
      LFFDFSC    = LAST
      LFFDFSCAV  = LFFDFSC    +    30
      LFFDFSC0   = LFFDFSCAV  +    30
      LFFDFSA    = LFFDFSC0   +    3*MXTEMP
      LFFDFSN    = LFFDFSA    +    20
      LAST       = LFFDFSN    +    10
C
C     FOR RMS POSITION DEVIATION CALCULATION
C
      MXTEMP     = 1
      IF(NRMSD.EQ.1) MXTEMP = MXFFAT
      LFFRMSD0   = LAST
      LAST       = LFFRMSD0   +    3*MXTEMP
C
C     FOR INTERNUCLEAR DISTANCE CALCULATION
C
      MXTEMP     = 1
      IF(NRALL.EQ.1) MXTEMP = MXFFAT
      LFFRALL0   = LAST
      LAST       = LFFRALL0  + 3*MXTEMP
C
C     FOR FREE ENERGY PERTURBATION CALCULATION
C     (A FULL SET OF PARAMETERS FOR STATE B)
C
      IF(IFEPTOP.GT.0.OR.ICOMBIN.GT.0) THEN
      LFF2ATMNAM  = LAST
      LFF2CORD    = LFF2ATMNAM  +   2*MXFFAT
      LFF2ZANF    = LFF2CORD    +   3*MXFFAT
      LFF2ZMAS    = LFF2ZANF    +     MXFFAT
      LFF2ONEMAS  = LFF2ZMAS    +     MXFFAT
      LFF2CHARG   = LFF2ONEMAS  +     MXFFAT
      LFF2POL     = LFF2CHARG   +     MXFFAT
      LFF2SIG     = LFF2POL     +     MXFFAT
      LFF2EPS     = LFF2SIG     +     MXFFAT
      LFF2SIG2    = LFF2EPS     +     MXFFAT
      LFF2EPS2    = LFF2SIG2    +     MXFFAT
      LFF2BOND0   = LFF2EPS2    +     MXFFAT
      LFF2FCBOND  = LFF2BOND0   +     MXBOND
      LFF2ANGL0   = LFF2FCBOND  +     MXBOND
      LFF2FCANGL  = LFF2ANGL0   +     MXANGL
      LFF2FCWAGG  = LFF2FCANGL  +     MXANGL
      LFF2VROT    = LFF2FCWAGG  +     MXWAGG
      LFF2NNN     = LFF2VROT    +     MXDIHR
      LFF2GAMA    = LFF2NNN     +     MXDIHR/NWDVAR + 1
      LFF2IPAIR   = LFF2GAMA    +     MXDIHR
      LFF2DIHB0   = LFF2IPAIR   +   2*MXBOND/NWDVAR + 1
      LFF2FCDIHB  = LFF2DIHB0   +     MXDIHB
      LFF2KLIST   = LFF2FCDIHB  +     MXDIHB
      LFF2LLIST   = LFF2KLIST   +   3*MXANGL/NWDVAR + 1
      LFF2MLIST   = LFF2LLIST   +   4*MXDIHR/NWDVAR + 1
      LFF2NLIST   = LFF2MLIST   +   4*MXWAGG/NWDVAR + 1
      LFF2MAPLST  = LFF2NLIST   +   4*MXDIHB/NWDVAR + 1
      LFF2VEL     = LFF2MAPLST  +   6*MXCMAP/NWDVAR + 1
      LFF2CLPR    = LFF2VEL     +   3*MXFFAT
      LFF2ZLPR    = LFF2CLPR    +   4*MXFFAT
      LFF2NLPR    = LFF2ZLPR    +   4*MXFFAT
      LFF2QMVEL   = LFF2NLPR    +     MXFFAT/NWDVAR + 1
      LFFKFREEA   = LFF2QMVEL   +    3*MXATM
      LFFKFREEB   = LFFKFREEA   +        501/NWDVAR + 1
      LFFLISTB2A  = LFFKFREEB   +        501/NWDVAR + 1
      LFFNONLSA   = LFFLISTB2A  +     MXFFAT/NWDVAR + 1
      LFFNONLSB   = LFFNONLSA   +   501*MXLIST1/NWDVAR/NPROC + 1
      LFFL1213A   = LFFNONLSB   +   501*MXLIST1/NWDVAR/NPROC + 1
      LFFL1213B   = LFFL1213A   +  18*501/NWDVAR + 1
      LFFL14A     = LFFL1213B   +  18*501/NWDVAR + 1
      LFFL14B     = LFFL14A     +      9*501/NWDVAR + 1
      LFFLISTAQM  = LFFL14B     +      9*501/NWDVAR + 1
      LFFLISTBQM  = LFFLISTAQM  +      MXATM/NWDVAR + 1
      LFF2KBLST   = LFFLISTBQM  +      MXATM/NWDVAR + 1
      LFF2FCSTBD  = LFF2KBLST   +   2*MXANGL/NWDVAR + 1
      LFF2FCDIHR  = LFF2FCSTBD  +   2*MXANGL
      LFF2FCLJTP  = LFF2FCDIHR  +   3*MXDIHR/NWDVAR + 1
      LFF2NTYPE   = LFF2FCLJTP  +   2*MXMMTP*MXMMTP
      LAST        = LFF2NTYPE   +     MXFFAT/NWDVAR + 1
      END IF
C
C     FOR POTENTIAL OF MEAN FORCE CALCULATION
C
      IF(IFEPTYP.EQ.2) THEN
      LFFLSBONDPMA= LAST
      LFFLSANGLPMA= LFFLSBONDPMA+   9*501/NWDVAR + 1
      LFFLSDIHRPMA= LFFLSANGLPMA+   9*501/NWDVAR + 1
      LFFLSDIHBPMA= LFFLSDIHRPMA+   9*501/NWDVAR + 1
      LFFLSWAGGPMA= LFFLSDIHBPMA+   9*501/NWDVAR + 1
      LFFLSCMAPPMA= LFFLSWAGGPMA+   9*501/NWDVAR + 1
      LFFNONLSPMA = LFFLSCMAPPMA+   9*501/NWDVAR + 1
      LFFL1213PMA = LFFNONLSPMA +   501*MXLIST1/NWDVAR/NPROC + 1
      LFFL14PMA   = LFFL1213PMA +  18*501/NWDVAR + 1
      LFFLSBONDPMB= LFFL14PMA   +   9*501/NWDVAR + 1
      LFFLSANGLPMB= LFFLSBONDPMB+   9*501/NWDVAR + 1
      LFFLSDIHRPMB= LFFLSANGLPMB+   9*501/NWDVAR + 1
      LFFLSDIHBPMB= LFFLSDIHRPMB+   9*501/NWDVAR + 1
      LFFLSWAGGPMB= LFFLSDIHBPMB+   9*501/NWDVAR + 1
      LFFLSCMAPPMB= LFFLSWAGGPMB+   9*501/NWDVAR + 1
      LFFNONLSPMB = LFFLSCMAPPMB+   9*501/NWDVAR + 1
      LFFL1213PMB = LFFNONLSPMB +   501*MXLIST1/NWDVAR/NPROC + 1
      LFFL14PMB   = LFFL1213PMB +  18*501/NWDVAR + 1
      LAST        = LFFL14PMB   +   9*501/NWDVAR + 1
      END IF
C
C     FOR UMBRELLA SAMPLING
C
      LFFUMBHIS   = LAST
      LFFUM2HIS   = LFFUMBHIS   +  NUMBBIN
      LAST        = LFFUM2HIS   +  NUM2BIN*NUMBBIN
C
C     FOR QM/MM OR MMPOL STYLE FREE ENERGY METHODS
C
      IF(IFEPTOP.GT.0.AND.
     *   ((NAT.GT.0.AND.MATOMB.GT.0).OR.IDOPOL.GT.0
     *                              .OR.IEWALD.GT.0)) THEN
      LFFFFGRDA   = LAST
      LFFFFGRDB   = LFFFFGRDA   +   3*MXFFAT
      LFFQMGRDA   = LFFFFGRDB   +   3*MXFFAT
      LFFQMGRDB   = LFFQMGRDA   +   3*MXATM
      LFFCORDX    = LFFQMGRDB   +   3*MXATM
      LFFCHARGX   = LFFCORDX    +   3*MXFFAT
      LFFPOLX     = LFFCHARGX   +     MXFFAT
      LFFSIGX     = LFFPOLX     +     MXFFAT
      LFFEPSX     = LFFSIGX     +     MXFFAT
      LFFSIG2X    = LFFEPSX     +     MXFFAT
      LFFEPS2X    = LFFSIG2X    +     MXFFAT
      LFFCLPRX    = LFFEPS2X    +     MXFFAT
      LFFZLPRX    = LFFCLPRX    +   4*MXFFAT
      LFFCHGIMX   = LFFZLPRX    +   4*MXFFAT
      LFFDIPIMX   = LFFCHGIMX   +   60*MXATM*MIN(1,MEANFLD) + 1
      LFFQADIMX   = LFFDIPIMX   +    3*MXATM*MIN(1,MEANFLD) + 1
      LFFOCTIMX   = LFFQADIMX   +    6*MXATM*MIN(1,MEANFLD) + 1
      LFFCRDIMX   = LFFOCTIMX   +   10*MXATM*MIN(1,MEANFLD) + 1
      LAST        = LFFCRDIMX   + 3*60*MXATM*MIN(1,MEANFLD) + 1
      END IF
C
C     FOR EWALD SUMMATION
C
      IF(IEWALD.GT.0) THEN
      LFFRKEXPEL  = LAST
      LFFRKVEC    = LFFRKEXPEL  +     NKVEC/NPROC  + 1
      LFFKVEC     = LFFRKVEC    +   3*NKVEC/NPROC  + 1
      LFFTCHCH    = LFFKVEC     +   3*NKVEC/NPROC/NWDVAR + 1
      LFFCOSCH    = LFFTCHCH    +     NKVEC/NPROC  + 1
      LFFSINCH    = LFFCOSCH    +     NKVEC/NPROC  + 1
      LAST        = LFFSINCH    +     NKVEC/NPROC  + 1
      END IF
C
      NEED = LAST - LOADFM - 1
      CALL GETFM(NEED)
      CALL VCLR(X(LOADFM+1),1,NEED)
C     ***************************
C     WE DO NOT RETURN THE MEMORY
C     ***************************
C
C
      CALL TIMIT(1)
      IF(MASWRK)THEN
         WRITE(IW,'(/1X,A,I12,A)')
     *              'MEMORY REQUIRED BY QUANPOL IS ',
     *               NEED,' WORDS ON EACH PROCESSOR.'
         WRITE(IW,*)'INPUT SMALLER MXFFAT, MXBOND, ',
     *              'MXANGL, MXDIHR, MXDIHB AND MXWAGG.'
         WRITE(IW,*)'ACTUAL NFFAT, NBOND, NANGL, NDIHR, NDIHB',
     *              ' AND NWAGG ARE PRINTED BELOW.'
         WRITE(IW,*)' '
         IF(IFFDATA.EQ.1)WRITE(IW,*)'PROCESSING $FFDATA...'
         IF(IFFPDB .EQ.1)WRITE(IW,*)'PROCESSING $FFPDB...'
         WRITE(IW,*)' '
      END IF
      IF(MASWRK) WRITE(IW,*)' '
C
C     -- SET QM ATOMIC MASS AND CONVERT TO AU (ELECTRON MASS) --
C
      IF(NAT.GT.0) THEN
         CALL RAMS(RMASS,2)
         DO IAT = 1, NAT
            X(LFFQMZMAS+IAT-1) = RMASS(IAN(IAT))*1822.88850204D+00
            X(LFFQM1MAS+IAT-1) = ONE/X(LFFQMZMAS+IAT-1)
         ENDDO
      END IF
C
C     -- READ IN $FFDATA OR $FFPDB --
C
      INPQMV     = 0
      INPMMV     = 0
      IF((IFFDATA+IFFPDB).GT.0) THEN
         IEOF = 0
         CALL SEQREW(IR)
         IF(IFFDATA.EQ.1) CALL FNDGRP(IR,' $FFDATA',IEOF)
         IF(IFFPDB. EQ.1) CALL FNDGRP(IR,' $FFPDB ',IEOF)
         CALL OPNCRD(IR,-IW)
C
         CALL FFDATA(X(LFFATMNAM),X(LFFCORD),X(LFFZANF),
     *            X(LFFZMAS),X(LFFONEMAS),
     *            X(LFFCHARG),X(LFFPOL),
     *            X(LFFSIG),X(LFFEPS),
     *            X(LFFSIG2),X(LFFEPS2),
     *            X(LFFBOND0),X(LFFFCBOND),
     *            X(LFFANGL0),X(LFFFCANGL),X(LFFFCWAGG),
     *            X(LFFDIHB0),X(LFFFCDIHB),
     *            X(LFFVROT),X(LFFNNN),X(LFFGAMA),X(LFFIPAIR),
     *            X(LFFKLIST),X(LFFLLIST),
     *            X(LFFMLIST),X(LFFNLIST),
     *            X(LFFVEL),X(LFFQMVEL),
     *            X(LFFCLPR),X(LFFZLPR),X(LFFNLPR),
     *            MXFFAT,MXBOND,MXANGL,MXDIHR,MXCMAP,
     *            MXWAGG,MXDIHB,NFOLD,
     *            ITYPWAT,X(LFFMAPLST),
     *            INPQMV,INPMMV,IFFDATA,IFFPDB,
     *            IDELETE,X(LFFNORDER),ISCOOP,
     *            X(LFFKBLST),X(LFFFCSTBD),X(LFFFCDIHR),
     *            X(LFFFCLJTP),X(LFFNTYPE))
      END IF
C
      N1FFAT = NFFAT  
      N1BOND = NBOND
      N1ANGL = NANGL
      N1DIHR = NDIHR
      N1DIHB = NDIHB
      N1CMAP = NCMAP
      N1WAGG = NWAGG
      N2FFAT = 0
      N2BOND = 0
      N2ANGL = 0
      N2DIHR = 0
      N2DIHB = 0
      N2CMAP = 0
      N2WAGG = 0
      IF(IFEPTOP.GT.0 .OR. ICOMBIN.GT.0) THEN
         CALL FFDATA2(X(LFFKFREEA),X(LFFKFREEB),KFREEATMP,
     *                KFREEBTMP,ICOMBIN)
      END IF
C
      CALL VALFM(LOADFM)
      LLLIST2    = LOADFM     +   1
      LLNORDERA  = LLLIST2    + 4*MXDIHR/NWDVAR             + 1
      LLNORDERB  = LLNORDERA  +   NFFAT/NWDVAR              + 1
      LLLISTAB   = LLNORDERB  +   N2FFAT/NWDVAR             + 1
      LAST       = LLLISTAB   +  (NFFAT + N2FFAT+ 1)/NWDVAR + 1
      NEEDX      = LAST       -   LOADFM - 1
      CALL GETFM(NEEDX)
      CALL TIMIT(1)
      IF(MASWRK)WRITE(IW,'(/1X,A/)')
     *'CALL PREPARE...'
      CALL PREPARE(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *            X(LFFZMAS),X(LFFONEMAS),X(LFFQMZMAS),X(LFFQM1MAS),
     *            X(LFFCHARG),X(LFFPOL),X(LFFPOLSV),
     *            X(LFFSIG),X(LFFEPS),
     *            X(LFFSIG2),X(LFFEPS2),
     *            X(LFFBOND0),X(LFFFCBOND),
     *            X(LFFANGL0),X(LFFFCANGL),X(LFFFCWAGG),
     *            X(LFFDIHB0),X(LFFFCDIHB),
     *            X(LFFVROT),X(LFFNNN),X(LFFGAMA),X(LFFIPAIR),
     *            X(LFFKLIST),X(LFFLLIST),X(LLLIST2),
     *            X(LFFMLIST),X(LFFNLIST),
     *            X(LFFLISTQM),
     *            X(LFFL1213J),X(LFFL14J),
     *            X(LFFVEL),X(LFFQMVEL),
     *            X(LFFCLPR),X(LFFZLPR),X(LFFNLPR),
     *            X(LFFXTS),X(LFFYTS),X(LFFZTS),X(LFFCMAT1),
     *            LKQM,X(LFFNONLS1),X(LFFNONLSTQ),
     *            MXFFAT,MXBOND,MXANGL,MXDIHR,
     *            MXWAGG,MXDIHB,MXCMAP,NFOLD,RFOLD,RETAIN,
     *            IADDNA1,IADDK1,IADDCA2,IADDMG2,IADDCL1,
     *            JADDNA1,JADDK1,
     *            ITYPWAT,NTS,X(LFFMAPLST),X(LFFCMAPCO),
     *            FRAG1,FRAG2,X(LFFFRAG1),X(LFFFRAG2),
     *            DFSA,X(LFFDFSA),NQMREP,IATREP,CRPIAT,ZRPIAT,
     *            RDENATM,X(LFFRDPRATM),
     *            X(LFFLSTCELL),X(LFFNONLS2),
     *            X(LFFCORDSV2),X(LFFCORDSVQ),
     *            X(LFFMVFASTS2),X(LFFMVFASTS3),X(LFFMVFASTS4),
     *            X(LFFMVFASTL2),X(LFFMVFASTL3),X(LFFMVFASTL4),
     *            INPQMV,INPMMV,
     *            X(LFFKFREEA),X(LFFKFREEB),X(LFFLISTB2A),
     *            X(LFF2ATMNAM),X(LFF2CORD),X(LFF2ZANF),
     *            X(LFF2ZMAS),X(LFF2ONEMAS),
     *            X(LFF2CHARG),X(LFF2POL),
     *            X(LFF2SIG),X(LFF2EPS),
     *            X(LFF2SIG2),X(LFF2EPS2),
     *            X(LFF2BOND0),X(LFF2FCBOND),
     *            X(LFF2ANGL0),X(LFF2FCANGL),X(LFF2FCWAGG),
     *            X(LFF2DIHB0),X(LFF2FCDIHB),
     *            X(LFF2VROT),X(LFF2NNN),X(LFF2GAMA),X(LFF2IPAIR),
     *            X(LFF2KLIST),X(LFF2LLIST),
     *            X(LFF2MLIST),X(LFF2NLIST),X(LFF2MAPLST),
     *            X(LFF2VEL),X(LFF2QMVEL),
     *            X(LFF2CLPR),X(LFF2ZLPR),X(LFF2NLPR),
     *            X(LFFNONLSA),X(LFFNONLSB),X(LFFL1213A),X(LFFL1213B),
     *            X(LFFL14A),X(LFFL14B),X(LFFOLDCORD),X(LFFLSTRAT),
     *            X(LFFDSTRAT),LSTRATTMP,DSTRATTMP,
     *            X(LFFCRDIMG),X(LFFCHGIMG),X(LFFCRDIMB),X(LFFCHGIMB),
     *            ICOMBIN,IDELETE,ISCOOP,MPAIRA,MPAIRB,
     *            X(LFFL1213PMA),X(LFFL14PMA),X(LFFNONLSPMA),
     *            X(LFFLSBONDPMA),X(LFFLSANGLPMA),X(LFFLSDIHRPMA),
     *            X(LFFLSDIHBPMA),X(LFFLSWAGGPMA),X(LFFLSCMAPPMA),
     *            X(LFFL1213PMB),X(LFFL14PMB),X(LFFNONLSPMB),
     *            X(LFFLSBONDPMB),X(LFFLSANGLPMB),X(LFFLSDIHRPMB),
     *            X(LFFLSDIHBPMB),X(LFFLSWAGGPMB),X(LFFLSCMAPPMB),
     *            X(LFFLISTAQM),X(LFFLISTBQM),
     *            IVIBMMP,X(LFFIVIBMM),
     *            X(LFFKBLST),X(LFFFCSTBD),X(LFFFCDIHR),
     *            X(LFFFCLJTP),X(LFFNTYPE),
     *            X(LFF2KBLST),X(LFF2FCSTBD),X(LFF2FCDIHR),
     *            X(LFF2FCLJTP),X(LFF2NTYPE),LQATOM,RQATOM,
     *            IFFPDB,NMMFF94Q,
     *            X(LLNORDERA),X(LLNORDERB),X(LLLISTAB),X(LFFINTLST))
      CALL RETFM(NEEDX)
C
C     -- SET N1FFAT AGAIN IN CASES WATER AND IONS ARE ADDED --
C
      NADDATM = IADDWAT+IADDNA1+IADDK1+IADDCA2+IADDMG2+IADDCL1
     *         +JADDNA1+JADDK1
      IF(NADDATM.GT.0.AND.IFEPTOP.EQ.0) THEN
         N1FFAT = NFFAT  
         N1BOND = NBOND
         N1ANGL = NANGL
         N1DIHR = NDIHR
         N1DIHB = NDIHB
         N1CMAP = NCMAP
         N1WAGG = NWAGG
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK QUANPOL0
!>    
!> @brief    detect QuanPol
!>          
!> @author   Hui Li
!>           - May 2012
!>
      SUBROUTINE QUANPOL0
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
C
C     HUI LI, MAY 7, 2012
C
      NFFAT    = 0
      IQUANPO  = 0
      IFFDATA  = 0
      IFFPDB   = 0
C
      IEOF = 0
      CALL SEQREW(IR)
      CALL FNDGRP(IR,' $QUANPO',IEOF)
      IF(IEOF.EQ.0) IQUANPO = 1
C
      IEOF = 0
      CALL SEQREW(IR)
      CALL FNDGRP(IR,' $FFDATA',IEOF)
      IF(IEOF.EQ.0) IFFDATA = 1
C
      IEOF = 0
      CALL SEQREW(IR)
      CALL FNDGRP(IR,' $FFPDB ',IEOF)
      IF(IEOF.EQ.0) IFFPDB  = 1
C
      IF((IQUANPO+IFFDATA+IFFPDB).GT.0) NFFAT=1
      RETURN
      END
C*MODULE QUANPO  *DECK FFDATA
!>    
!> @brief    read $FFDATA
!>          
!> @author   Hui Li group
!>           - Nov 2015
!>          
!> @details  read in all $FFDATA sections
!>
      SUBROUTINE FFDATA(ATMNAM,CORD,ZANF,
     *                  ZMAS,ONEMAS,
     *                  CHARG,POL,
     *                  SIG,EPS,
     *                  SIG2,EPS2,
     *                  BOND0,FCBOND,
     *                  ANGL0,FCANGL,FCWAGG,
     *                  DIHB0,FCDIHB,
     *                  VROT,NNN,GAMA,IPAIR,
     *                  KLIST,LLIST,
     *                  MLIST,NLIST,
     *                  VEL,QMVEL,
     *                  CLPR,ZLPR,NLPR,
     *                  MXFFAT,MXBOND,MXANGL,MXDIHR,MXCMAP,
     *                  MXWAGG,MXDIHB,NFOLD,
     *                  ITYPWAT,MAPLST,
     *                  INPQMV,INPMMV,IFFDATA,IFFPDB,
     *                  IDELETE,NORDER,ISCOOP,
     *                  KBLST,FCSTBD,FCDIHR,
     *                  FCLJTP,NTYPE)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (PT5=0.5D+00, TWO=2.0D+00, HUGE=1.0D+30*TOBOHR)
C
      CHARACTER*10 WORD,ATMNAM
C
      DIMENSION ATMNAM(MXFFAT),CORD(3,MXFFAT),
     *          ZANF(MXFFAT),ZMAS(MXFFAT),ONEMAS(MXFFAT),
     *          CHARG(MXFFAT),POL(MXFFAT),SIG(MXFFAT),EPS(MXFFAT),
     *          SIG2(MXFFAT),EPS2(MXFFAT),
     *          BOND0(MXBOND),FCBOND(MXBOND), 
     *          ANGL0(MXANGL),FCANGL(MXANGL),
     *          FCWAGG(MXWAGG),
     *          DIHB0(MXDIHB),FCDIHB(MXDIHB),
     *          VROT(MXDIHR),NNN(MXDIHR),GAMA(MXDIHR),IPAIR(2,MXBOND),
     *          KLIST(3,MXANGL),
     *          LLIST(4,MXDIHR),MLIST(4,MXWAGG),
     *          NLIST(4,MXDIHB),
     *          VEL(3,MXFFAT),QMVEL(3,MXATM),
     *          CLPR(4,MXFFAT),ZLPR(4,MXFFAT),NLPR(MXFFAT),
     *          MAPLST(6,*),NORDER(MXFFAT),
     *          KBLST(2,*),FCSTBD(2,*),FCDIHR(3,*),
     *          FCLJTP(2,MXMMTP,*),NTYPE(*)
C
      COMMON /FFMPT2/ MXMMTP,LFFKBLST,LFFFCSTBD,LFFFCDIHR,
     *                LFFFCLJTP,LFFNTYPE,
     *                LFF2KBLST,LFF2FCSTBD,LFF2FCDIHR,
     *                LFF2FCLJTP,LFF2NTYPE
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FMCOM / X(1)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, DEJUN SI, HUI LI, MAR 2011, LINCOLN
C     HONGBO ZHU, HUI LI, OCT 30, 2012, LINCOLN
C
C     -- READ FROM INPUT FILE --
C
      CALL OPNCRD(IR,-IW)   
      IEOF = 0
      IF(IFFDATA.EQ.0.AND.IFFPDB.GT.0) GOTO 290
C
  110 CONTINUE
      CALL RDCARD('$FFDATA ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(IFFDATA.EQ.1)
     *      WRITE(IW,*)'ERROR: END OF FILE READING $FFDATA' 
         IF(IFFDATA.EQ.2) 
     *      WRITE(IW,*)'ERROR: END OF FILE READING $FFDATB'
         CALL ABRT
      END IF
      WORD ='          '
      KSIZE = -10
      CALL GSTRNG(WORD,KSIZE)
C
      IF(WORD.NE.'COORDINATE')GOTO 120
      CALL RDXYZ(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,MXFFAT,NFOLD)
      GOTO 110
C
  120 CONTINUE
      IF(WORD.NE.'MMVELOCITY')GOTO 125
      INPMMV = 1
      CALL RDMMVEL(VEL)
      GOTO 110
C
  125 CONTINUE
      IF(WORD.NE.'QMVELOCITY')GOTO 126
      INPQMV = 1
      CALL RDQMVEL(QMVEL)
      GOTO 110
C
  126 CONTINUE
      IF(WORD.NE.'PARAMETERS')GOTO 130
      CALL RDPARA(ATMNAM,ZMAS,ONEMAS,CHARG,POL,SIG,EPS,SIG2,EPS2)
      GOTO 110
C
  130 CONTINUE
      IF(WORD.NE.'QMMMREP   ')GOTO 135
      CALL RDQMMM(CLPR,ZLPR,NLPR)
      GOTO 110
C
  135 CONTINUE
      IF(WORD.NE.'BOND      ')GOTO 140
      CALL RDBOND(BOND0,FCBOND,IPAIR,MXBOND)
      GOTO 110
C
  140 CONTINUE
      IF(WORD.NE.'ANGLE     ')GOTO 150
      CALL RDANGL(ANGL0,FCANGL,KLIST,MXANGL)
      GOTO 110
C
  150 CONTINUE
      IF(WORD.NE.'DIHROT    ')GOTO 160
      CALL RDDIHR(LLIST,GAMA,NNN,VROT,MXDIHR)
      GOTO 110
C
  160 CONTINUE
      IF(WORD.NE.'DIHBND    ')GOTO 170
      CALL RDDIHB(NLIST,DIHB0,FCDIHB,MXDIHB)
      GOTO 110
C
  170 CONTINUE
      IF(WORD.NE.'WAGGING   ')GOTO 180
      CALL RDWAGG(MLIST,FCWAGG,MXWAGG)
      GOTO 110
C
  180 CONTINUE
      IF(WORD.NE.'CMAP      ')GOTO 190
      CALL RDCMAP(MAPLST,MXCMAP)
      GOTO 110
C
  190 CONTINUE
      IF(WORD.NE.'STRBEND   ')GOTO 200
      CALL RDSTRBEND(FCSTBD,KBLST)
      GOTO 110
C
  200 CONTINUE
      IF(WORD.NE.'DIHR3V    ')GOTO 210
      CALL RDDIHR3V(LLIST,FCDIHR)
      GOTO 110
C
  210 CONTINUE
      IF(WORD.NE.'MMFFLJ    ')GOTO 220
      CALL RDMMFFLJ(FCLJTP)
      GOTO 110
C
  220 CONTINUE
      IF(WORD.NE.'MMTYPE    ')GOTO 230
      CALL RDMMTYPE(NTYPE)
      GOTO 110
C
  230 CONTINUE
      IF(WORD.EQ.'$END      ') THEN
         GOTO 300
      ELSE
         IF(IFFDATA.EQ.1) 
     *   WRITE(IW,*)'ERROR: UNRECOGNIZED KEYWORD IN $FFDATA'
         IF(IFFDATA.EQ.2)
     *   WRITE(IW,*)'ERROR: UNRECOGNIZED KEYWORD IN $FFDATB'
         CALL ABRT
      END IF
C
  290 CONTINUE
C
C     --- READ $FFPDB AND LOAD PROTEIN PARAMETERS ---
C
      CALL VALFM(LOADFM)
      LSSBDID  = LOADFM   + 1
      LSSBOND  = LSSBDID  + MXFFAT/14
      LPDBNAM  = LSSBOND  + MXFFAT/14
      LRESNAM  = LPDBNAM  + MXFFAT
      LNATAAA  = LRESNAM  + MXFFAT
      LNNNCCC  = LNATAAA  + MXFFAT
      LAMBNAM  = LNNNCCC  + MXFFAT/7
      LLLIST1  = LAMBNAM  + MXFFAT
      LTEXTA   = LLLIST1  + MXDIHR*4
      LTEXTB   = LTEXTA   + 20000*100*2
      LTEXTC   = LTEXTB   + 20000*100*2
      LTEXTD   = LTEXTC   + 20000*100*2
      LAST     = LTEXTD   + 20000*100*2
      NEED     = LAST     - LOADFM -1
      CALL GETFM(NEED)
      CALL FFPDB(ATMNAM,CORD,ZANF,
     *           ZMAS,ONEMAS,
     *           CHARG,POL,SIG,EPS,
     *           SIG2,EPS2,
     *           BOND0,FCBOND,
     *           ANGL0,FCANGL,FCWAGG,
     *           DIHB0,FCDIHB,
     *           VROT,NNN,GAMA,IPAIR,
     *           KLIST,LLIST,MLIST,NLIST,
     *           CLPR,ZLPR,NLPR,
     *           X(LSSBDID),X(LSSBOND),
     *           X(LPDBNAM),X(LRESNAM),X(LNATAAA),
     *           X(LNNNCCC),
     *           MXFFAT,MXBOND,MXANGL,MXDIHR,
     *           MXWAGG,MXDIHB,
     *           ITYPWAT,MAPLST,X(LAMBNAM),X(LLLIST1),
     *           X(LTEXTA),X(LTEXTB),X(LTEXTC),X(LTEXTD))
      CALL RETFM(NEED)
      INPMMV  = 0
      CALL TIMIT(1)
 300  CONTINUE
C
C     -- APPLY IDELETE OR ISCOOP FUNCTION --
C
      IF(IDELETE.GT.0 .OR. ISCOOP.GT.0) THEN
         CALL VICLR(NORDER,1,NFFAT)
C
         IF(IDELETE.GT.0) THEN
            DO JFFAT = 1, IDELETE
               DO IFFAT = IDELETE+1, NFFAT
                  DX = CORD(1,IFFAT) - CORD(1,JFFAT)
                  DY = CORD(2,IFFAT) - CORD(2,JFFAT)
                  DZ = CORD(3,IFFAT) - CORD(3,JFFAT)
                  R2 = DX*DX+DY*DY+DZ*DZ
                  IF(R2.LT.3.571D+00) ZMAS(IFFAT) = -1.0D+00
               ENDDO
            ENDDO
         END IF
C
         IF(ISCOOP.GT.0) THEN
         IF(CENTX.EQ.HUGE.OR.CENTY.EQ.HUGE.OR.CENTZ.EQ.HUGE) THEN
            XMAX = -1.0D+30
            YMAX = -1.0D+30
            ZMAX = -1.0D+30
            XMIN =  1.0D+30
            YMIN =  1.0D+30
            ZMIN =  1.0D+30
            DO IFFAT = 1,NFFAT
               XMAX = MAX(XMAX,CORD(1,IFFAT))
               YMAX = MAX(YMAX,CORD(2,IFFAT))
               ZMAX = MAX(ZMAX,CORD(3,IFFAT))
               XMIN = MIN(XMIN,CORD(1,IFFAT))
               YMIN = MIN(YMIN,CORD(2,IFFAT))
               ZMIN = MIN(ZMIN,CORD(3,IFFAT))
            ENDDO
            CENTX= (XMAX+XMIN)*PT5
            CENTY= (YMAX+YMIN)*PT5
            CENTZ= (ZMAX+ZMIN)*PT5
         END IF
         END IF
C
         IF(ISCOOP.EQ.1) THEN
            DO IFFAT = 1, NFFAT
               DX = TWO*ABS(CORD(1,IFFAT) - CENTX)
               DY = TWO*ABS(CORD(2,IFFAT) - CENTY)
               DZ = TWO*ABS(CORD(3,IFFAT) - CENTZ)
               IF(DX.GT.XBOX.OR.DY.GT.YBOX.OR.DZ.GT.ZBOX)
     *         ZMAS(IFFAT) = -1.0D+00
            ENDDO
         END IF
C
         IF(ISCOOP.EQ.2) THEN
            TEST = SPHRAD**2
            DO IFFAT = 1, NFFAT
               DX = CORD(1,IFFAT) - CENTX
               DY = CORD(2,IFFAT) - CENTY
               DZ = CORD(3,IFFAT) - CENTZ
               R2 = DX*DX+DY*DY+DZ*DZ
               IF(R2.GT.TEST)
     *         ZMAS(IFFAT) = -1.0D+00
            ENDDO
         END IF
C
 310     CONTINUE
         ICOUNT = 0
         DO IBOND=1, NBOND
            IFFAT = IPAIR(1,IBOND)
            JFFAT = IPAIR(2,IBOND)
            IF(ZMAS(IFFAT).EQ.-1.0D+00.AND.ZMAS(JFFAT).NE.-1.0D+00) THEN
               ZMAS(JFFAT) = -1.0D+00
               ICOUNT = ICOUNT + 1
            END IF
            IF(ZMAS(JFFAT).EQ.-1.0D+00.AND.ZMAS(IFFAT).NE.-1.0D+00) THEN
               ZMAS(IFFAT) = -1.0D+00
               ICOUNT = ICOUNT + 1
            END IF
         ENDDO
         IF(ICOUNT.NE.0) GOTO 310
C
         KFFAT = 0
         DO IFFAT=1, NFFAT
            IF(ZMAS(IFFAT).GT.-1.0D+00) THEN
               KFFAT           = KFFAT + 1
               NORDER(IFFAT)   = KFFAT
               ATMNAM(KFFAT)   = ATMNAM(IFFAT)
               ZANF  (KFFAT)   = ZANF  (IFFAT)
               ZMAS  (KFFAT)   = ZMAS  (IFFAT)
               ONEMAS(KFFAT)   = ONEMAS(IFFAT)
               CHARG (KFFAT)   = CHARG (IFFAT)
               POL   (KFFAT)   = POL   (IFFAT)
               SIG   (KFFAT)   = SIG   (IFFAT)
               EPS   (KFFAT)   = EPS   (IFFAT)
               SIG2  (KFFAT)   = SIG2  (IFFAT)
               EPS2  (KFFAT)   = EPS2  (IFFAT)
               CORD  (1,KFFAT) = CORD  (1,IFFAT)
               CORD  (2,KFFAT) = CORD  (2,IFFAT)
               CORD  (3,KFFAT) = CORD  (3,IFFAT)
               VEL   (1,KFFAT) = VEL   (1,IFFAT)
               VEL   (2,KFFAT) = VEL   (2,IFFAT)
               VEL   (3,KFFAT) = VEL   (3,IFFAT)
               CLPR  (1,KFFAT) = CLPR  (1,IFFAT)
               CLPR  (2,KFFAT) = CLPR  (2,IFFAT)
               CLPR  (3,KFFAT) = CLPR  (3,IFFAT)
               CLPR  (4,KFFAT) = CLPR  (4,IFFAT)
               ZLPR  (1,KFFAT) = ZLPR  (1,IFFAT)
               ZLPR  (2,KFFAT) = ZLPR  (2,IFFAT)
               ZLPR  (3,KFFAT) = ZLPR  (3,IFFAT)
               ZLPR  (4,KFFAT) = ZLPR  (4,IFFAT)
               NLPR  (KFFAT)   = NLPR  (IFFAT)
               NTYPE (KFFAT)   = NTYPE (IFFAT)
            END IF
         ENDDO
         NFFAT = KFFAT
C
         KBOND = 0
         DO IBOND=1, NBOND
            IFFAT = IPAIR(1,IBOND)
            JFFAT = IPAIR(2,IBOND)
            IF(NORDER(IFFAT).GT.0) THEN
               KBOND          = KBOND + 1
               IPAIR(1,KBOND) = NORDER(IFFAT)
               IPAIR(2,KBOND) = NORDER(JFFAT)
               FCBOND (KBOND) = FCBOND(IBOND)
               BOND0  (KBOND) = BOND0 (IBOND)
            END IF
         ENDDO
         NBOND = KBOND
C
         KANGL = 0
         DO IANGL=1, NANGL
            IFFAT = KLIST(1,IANGL)
            JFFAT = KLIST(2,IANGL)
            KFFAT = KLIST(3,IANGL)
            IF(NORDER(IFFAT).GT.0) THEN
               KANGL          = KANGL + 1
               KLIST(1,KANGL) = NORDER(IFFAT)
               KLIST(2,KANGL) = NORDER(JFFAT)
               KLIST(3,KANGL) = NORDER(KFFAT)
               FCANGL (KANGL) = FCANGL(IANGL)
               ANGL0  (KANGL) = ANGL0 (IANGL)
               FCSTBD(1,KANGL)= FCSTBD(1,IANGL)
               FCSTBD(2,KANGL)= FCSTBD(2,IANGL)
            END IF
         ENDDO
         NANGL = KANGL
C        - MUST REDO KBLST -
         DO IANGL=1,NANGL
            K1 = KLIST(1,IANGL)
            K2 = KLIST(2,IANGL)
            K3 = KLIST(3,IANGL)
            DO IBOND=1,NBOND
               KK1 = IPAIR(1,IBOND)
               KK2 = IPAIR(2,IBOND)
               IF((KK1.EQ.K1.AND.KK2.EQ.K2).OR.
     *            (KK1.EQ.K2.AND.KK2.EQ.K1)) THEN
                  KBLST(1,IANGL) = IBOND
               END IF
               IF((KK1.EQ.K2.AND.KK2.EQ.K3).OR.
     *            (KK1.EQ.K3.AND.KK2.EQ.K2)) THEN
                  KBLST(2,IANGL) = IBOND
               END IF
            ENDDO
         ENDDO
C
         KDIHR = 0
         DO IDIHR=1, NDIHR
            IFFAT = LLIST(1,IDIHR)
            JFFAT = LLIST(2,IDIHR)
            KFFAT = LLIST(3,IDIHR)
            LFFAT = LLIST(4,IDIHR)
            IF(NORDER(IFFAT).GT.0) THEN
               KDIHR          = KDIHR + 1
               LLIST(1,KDIHR) = NORDER(IFFAT)
               LLIST(2,KDIHR) = NORDER(JFFAT)
               LLIST(3,KDIHR) = NORDER(KFFAT)
               LLIST(4,KDIHR) = NORDER(LFFAT)
               NNN    (KDIHR) = NNN (IDIHR)
               GAMA   (KDIHR) = GAMA(IDIHR)
               VROT   (KDIHR) = VROT(IDIHR)
               FCDIHR(1,KDIHR)= FCDIHR(1,IDIHR)
               FCDIHR(2,KDIHR)= FCDIHR(2,IDIHR)
               FCDIHR(3,KDIHR)= FCDIHR(3,IDIHR)
            END IF
         ENDDO
         NDIHR = KDIHR
C
         KDIHB = 0
         DO IDIHB=1, NDIHB
            IFFAT = NLIST(1,IDIHB)
            JFFAT = NLIST(2,IDIHB)
            KFFAT = NLIST(3,IDIHB)
            LFFAT = NLIST(4,IDIHB)
            IF(NORDER(IFFAT).GT.0) THEN
               KDIHB          = KDIHB + 1
               NLIST(1,KDIHB) = NORDER(IFFAT)
               NLIST(2,KDIHB) = NORDER(JFFAT)
               NLIST(3,KDIHB) = NORDER(KFFAT)
               NLIST(4,KDIHB) = NORDER(LFFAT)
               DIHB0 (KDIHB)  = DIHB0 (IDIHB)
               FCDIHB(KDIHB)  = FCDIHB(IDIHB)
            END IF
         ENDDO
         NDIHB = KDIHB
C
         KWAGG = 0
         DO IWAGG=1, NWAGG
            IFFAT = MLIST(1,IWAGG)
            JFFAT = MLIST(2,IWAGG)
            KFFAT = MLIST(3,IWAGG) 
            LFFAT = MLIST(4,IWAGG)
            IF(NORDER(IFFAT).GT.0) THEN
               KWAGG          = KWAGG + 1
               MLIST(1,KWAGG) = NORDER(IFFAT)
               MLIST(2,KWAGG) = NORDER(JFFAT)
               MLIST(3,KWAGG) = NORDER(KFFAT)
               MLIST(4,KWAGG) = NORDER(LFFAT)
               FCWAGG (KWAGG) = FCWAGG(IWAGG)
            END IF
         ENDDO
         NWAGG = KWAGG
C
         KCMAP = 0
         DO ICMAP=1, NCMAP
            II1 = MAPLST(1,ICMAP)
            II2 = MAPLST(2,ICMAP)
            II3 = MAPLST(3,ICMAP)
            II4 = MAPLST(4,ICMAP)
            II5 = MAPLST(5,ICMAP)
            II6 = MAPLST(6,ICMAP)
            IF(NORDER(II1).GT.0) THEN
               KCMAP = KCMAP + 1
               MAPLST(1,KCMAP) = II1
               MAPLST(2,KCMAP) = II2
               MAPLST(3,KCMAP) = II3
               MAPLST(4,KCMAP) = II4
               MAPLST(5,KCMAP) = II5
               MAPLST(6,KCMAP) = II6
            END IF
         ENDDO
         NCMAP = KCMAP
      END IF
C
C     -- FINE TUNE THE INPUT BOND, ANGLE LISTS --
C        FORCE THEM TO BE FROM LOWER TO HIGHER NUMBER.
C        WATER ADDED LATER WILL BE DONE SEPARATELY
C        IN THE SAME WAY.
C
      DO IBOND = 1, NBOND
         IF(IPAIR(1,IBOND).LE.0 .OR.
     *      IPAIR(2,IBOND).LE.0     ) THEN
            IF(MASWRK)WRITE(IW,'(2I7,/1X,A/)')
     *         IPAIR(1,IBOND),IPAIR(2,IBOND),
     *         'ERROR: BOND ATM1 OR ATM2 MUST BE > 0' 
            CALL ABRT
         END IF
         IF(IPAIR(2,IBOND).EQ.IPAIR(1,IBOND)) THEN
            IF(MASWRK)WRITE(IW,'(2I7,/1X,A/)')
     *         IPAIR(1,IBOND),IPAIR(2,IBOND),
     *         'ERROR: BOND ATM1, ATM2 MUST BE DIFFERENT'
            CALL ABRT
         END IF
         IF(IPAIR(2,IBOND).LT.IPAIR(1,IBOND)) THEN
            IZ5G9          = IPAIR(1,IBOND)
            IPAIR(1,IBOND) = IPAIR(2,IBOND)
            IPAIR(2,IBOND) = IZ5G9
          END IF
      ENDDO
C
      DO IANGL = 1, NANGL
         IF(KLIST(1,IANGL).LE.0.OR.
     *      KLIST(2,IANGL).LE.0.OR.
     *      KLIST(3,IANGL).LE.0    ) THEN
            IF(MASWRK)WRITE(IW,'(3I7,/1X,A/)')
     *         KLIST(1,IANGL),KLIST(2,IANGL),KLIST(3,IANGL),
     *         'ERROR: ANGLE ATM1, ATM2, ATM3 MUST BE > 0'
               CALL ABRT
         END IF
         IF(KLIST(1,IANGL).EQ.KLIST(2,IANGL).OR.
     *      KLIST(1,IANGL).EQ.KLIST(3,IANGL).OR.
     *      KLIST(2,IANGL).EQ.KLIST(3,IANGL)) THEN
            IF(MASWRK)WRITE(IW,'(3I7,/1X,A/)')
     *         KLIST(1,IANGL),KLIST(2,IANGL),KLIST(3,IANGL),
     *         'ERROR: ANGLE ATM1, ATM2, ATM3 MUST BE DIFFERENT'
               CALL ABRT
         END IF
         IF(KLIST(1,IANGL).GT.KLIST(3,IANGL)) THEN
            IZ5G9          = KLIST(1,IANGL)
            KLIST(1,IANGL) = KLIST(3,IANGL)
            KLIST(3,IANGL) = IZ5G9
            IZ5G9          = KBLST(1,IANGL)
            KBLST(1,IANGL) = KBLST(2,IANGL)
            KBLST(2,IANGL) = IZ5G9
            AZ5G9          = FCSTBD(1,IANGL)
            FCSTBD(1,IANGL)= FCSTBD(2,IANGL)
            FCSTBD(2,IANGL)= AZ5G9
         END IF
      ENDDO
C
      DO IDIHR = 1, NDIHR
         IF(LLIST(1,IDIHR).LE.0.OR.
     *      LLIST(2,IDIHR).LE.0.OR.
     *      LLIST(3,IDIHR).LE.0.OR.
     *      LLIST(4,IDIHR).LE.0    ) THEN
            IF(MASWRK)WRITE(IW,'(4I7,/1X,A/)')
     *         LLIST(1,IDIHR),LLIST(2,IDIHR),
     *         LLIST(3,IDIHR),LLIST(4,IDIHR),
     *        'ERROR: DIHR ATM1, ATM2, ATM3, ATM4 MUST BE > 0'
               CALL ABRT
         END IF
         IF(LLIST(1,IDIHR).EQ.LLIST(2,IDIHR).OR.
     *      LLIST(1,IDIHR).EQ.LLIST(3,IDIHR).OR.
     *      LLIST(1,IDIHR).EQ.LLIST(4,IDIHR).OR.
     *      LLIST(2,IDIHR).EQ.LLIST(3,IDIHR).OR.
     *      LLIST(2,IDIHR).EQ.LLIST(4,IDIHR).OR.
     *      LLIST(3,IDIHR).EQ.LLIST(4,IDIHR)) THEN
            IF(MASWRK)WRITE(IW,'(4I7,/1X,A/)') 
     *         LLIST(1,IDIHR),LLIST(2,IDIHR),
     *         LLIST(3,IDIHR),LLIST(4,IDIHR),
     *        'ERROR: DIHR ATM1, ATM2, ATM3, ATM4 MUST BE DIFFERENT'
               CALL ABRT
         END IF
         IF(LLIST(1,IDIHR).GT.LLIST(4,IDIHR)) THEN
            IZ5G9          = LLIST(1,IDIHR)
            LLIST(1,IDIHR) = LLIST(4,IDIHR)
            LLIST(4,IDIHR) = IZ5G9
            IZ5G9          = LLIST(2,IDIHR)
            LLIST(2,IDIHR) = LLIST(3,IDIHR)
            LLIST(3,IDIHR) = IZ5G9
         END IF
      ENDDO
C
      DO IDIHB = 1, NDIHB
         IF(NLIST(1,IDIHB).LE.0.OR.
     *      NLIST(2,IDIHB).LE.0.OR.
     *      NLIST(3,IDIHB).LE.0.OR.
     *      NLIST(4,IDIHB).LE.0    ) THEN
            IF(MASWRK)WRITE(IW,'(4I7,/1X,A/)')
     *         NLIST(1,IDIHB),NLIST(2,IDIHB),
     *         NLIST(3,IDIHB),NLIST(4,IDIHB),
     *        'ERROR: DIHB ATM1, ATM2, ATM3, ATM4 MUST BE > 0'
               CALL ABRT
         END IF
         IF(NLIST(1,IDIHB).EQ.NLIST(2,IDIHB).OR.
     *      NLIST(1,IDIHB).EQ.NLIST(3,IDIHB).OR.
     *      NLIST(1,IDIHB).EQ.NLIST(4,IDIHB).OR.
     *      NLIST(2,IDIHB).EQ.NLIST(3,IDIHB).OR.
     *      NLIST(2,IDIHB).EQ.NLIST(4,IDIHB).OR.
     *      NLIST(3,IDIHB).EQ.NLIST(4,IDIHB)) THEN
            IF(MASWRK)WRITE(IW,'(4I7,/1X,A/)')
     *         NLIST(1,IDIHB),NLIST(2,IDIHB),
     *         NLIST(3,IDIHB),NLIST(4,IDIHB),
     *        'ERROR: DIHB ATM1, ATM2, ATM3, ATM4 MUST BE DIFFERENT'
               CALL ABRT
         END IF
         IF(NLIST(1,IDIHB).GT.NLIST(4,IDIHB)) THEN
            IZ5G9          = NLIST(1,IDIHB)
            NLIST(1,IDIHB) = NLIST(4,IDIHB)
            NLIST(4,IDIHB) = IZ5G9
            IZ5G9          = NLIST(2,IDIHB)
            NLIST(2,IDIHB) = NLIST(3,IDIHB)
            NLIST(3,IDIHB) = IZ5G9
         END IF
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFDATA2
!>    
!> @brief    read in $FFDATB
!>          
!> @author   Hui Li group
!>          
!> @details  $FFDATB is for free energy simulation
!>           or file combination
!>
      SUBROUTINE FFDATA2(KFREEA,KFREEB,KFREEATMP,KFREEBTMP,
     *                   ICOMBIN)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION KFREEA(501),KFREEB(501)
C
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFMAX / MXFFAT,MXBOND,MXANGL,MXDIHR,MXDIHB,MXCMAP,
     *                MXWAGG
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFFRE2/ N1FFAT,N1BOND,N1ANGL,N1DIHR,N1DIHB,N1CMAP,N1WAGG,
     *                N2FFAT,N2BOND,N2ANGL,N2DIHR,N2DIHB,N2CMAP,N2WAGG,
     *                LFF2ATMNAM,LFF2CORD,LFF2ZANF,LFF2ZMAS,
     *                LFF2ONEMAS,LFF2CHARG,LFF2POL,
     *                LFF2SIG,LFF2EPS,LFF2SIG2,LFF2EPS2,
     *                LFF2BOND0,LFF2FCBOND,LFF2ANGL0,LFF2FCANGL,
     *                LFF2FCWAGG,LFF2DIHB0,LFF2FCDIHB,
     *                LFF2VROT,LFF2NNN,LFF2GAMA,LFF2IPAIR,
     *                LFF2KLIST,LFF2LLIST,LFF2MLIST,LFF2NLIST,
     *                LFF2VEL,LFF2QMVEL,LFF2CLPR,LFF2ZLPR,
     *                LFF2NLPR,LFF2MAPLST,LFFKFREEA,LFFKFREEB,
     *                LFFLISTB2A,NTODOA,LFFNONLSA,NTODOB,LFFNONLSB,
     *                N1213A,LFFL1213A,N1213B,LFFL1213B,
     *                N14A,LFFL14A,N14B,LFFL14B,
     *                NTODOPMA,LFFNONLSPMA,NBONDPMA,LFFLSBONDPMA,
     *                NANGLPMA,LFFLSANGLPMA,NDIHRPMA,LFFLSDIHRPMA,
     *                NDIHBPMA,LFFLSDIHBPMA,NWAGGPMA,LFFLSWAGGPMA,
     *                NCMAPPMA,LFFLSCMAPPMA,
     *                N1213PMA,LFFL1213PMA,
     *                N14PMA,LFFL14PMA,
     *                NTODOPMB,LFFNONLSPMB,NBONDPMB,LFFLSBONDPMB,
     *                NANGLPMB,LFFLSANGLPMB,NDIHRPMB,LFFLSDIHRPMB,
     *                NDIHBPMB,LFFLSDIHBPMB,NWAGGPMB,LFFLSWAGGPMB,
     *                NCMAPPMB,LFFLSCMAPPMB,
     *                N1213PMB,LFFL1213PMB,
     *                N14PMB,LFFL14PMB
      COMMON /FFMPT2/ MXMMTP,LFFKBLST,LFFFCSTBD,LFFFCDIHR,
     *                LFFFCLJTP,LFFNTYPE,
     *                LFF2KBLST,LFF2FCSTBD,LFF2FCDIHR,
     *                LFF2FCLJTP,LFF2NTYPE
      COMMON /FMCOM / X(1)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, DEC 27, 2011, LINCOLN
C
      N1FFAT = NFFAT  ! SAVE STATE A INFORMATION
      N1BOND = NBOND
      N1ANGL = NANGL
      N1DIHR = NDIHR
      N1DIHB = NDIHB
      N1CMAP = NCMAP
      N1WAGG = NWAGG
C
      NFFAT  = 0
      NBOND  = 0
      NANGL  = 0
      NDIHR  = 0
      NDIHB  = 0
      NCMAP  = 0
      NWAGG  = 0
C
C     -- SAVE SOME INFORMATION --
C
      IF(IFEPTOP.GT.0) THEN
         CALL ICOPY(501,KFREEATMP,1,KFREEA,1)
         CALL ICOPY(501,KFREEBTMP,1,KFREEB,1)
      END IF
C
C     -- COPY KFREEA TO KFREEB, IFIXMM TO IFIXMMB --
C
      IF(IFEPTOP.EQ.1) THEN
         CALL ICOPY(501,KFREEA,1,KFREEB ,1)
         CALL ICOPY(200,IFIXMM,1,IFIXMMB,1)
         NFIXMMB = NFIXMM
      END IF
C
C     -- POSITION THE INPUT TO $FFDATB --
C
      IFFDATA  = 0
      IFFPDB   = 0
C
      IEOF = 0
      CALL SEQREW(IR)
      CALL FNDGRP(IR,' $FFDATB',IEOF)
      IF(IEOF.EQ.0) IFFDATA = 2
C
      IF(IFEPTOP.GT.0 .AND. IFFDATA.EQ.0) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: IFEPTOP=1 AND 2 NEED $FFDATB.'
         CALL ABRT
      END IF
      IF(ICOMBIN.GT.0 .AND. IFFDATA.EQ.0) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: ICOMBIN=1 NEEDS $FFDATB.'
         CALL ABRT
      END IF
C
      IF(IFFDATA.EQ.2)THEN
         IEOF = 0
         CALL SEQREW(IR)
         CALL FNDGRP(IR,' $FFDATB',IEOF)
         CALL OPNCRD(IR,-IW)
      END IF
C
      IF(MASWRK)THEN
         WRITE(IW,*)' '
         IF(IFFDATA.EQ.2)WRITE(IW,*)'PROCESSING $FFDATB...'
         WRITE(IW,*)' '
      END IF
      CALL TIMIT(1)
      IF(MASWRK) WRITE(IW,*)' '
C
C     -- READ IN $FFDATB PARAMETERS --
C
      CALL FFDATA(X(LFF2ATMNAM),X(LFF2CORD),X(LFF2ZANF),
     *            X(LFF2ZMAS),X(LFF2ONEMAS),
     *            X(LFF2CHARG),X(LFF2POL),
     *            X(LFF2SIG),X(LFF2EPS),
     *            X(LFF2SIG2),X(LFF2EPS2),
     *            X(LFF2BOND0),X(LFF2FCBOND),
     *            X(LFF2ANGL0),X(LFF2FCANGL),X(LFF2FCWAGG),
     *            X(LFF2DIHB0),X(LFF2FCDIHB),
     *            X(LFF2VROT),X(LFF2NNN),X(LFF2GAMA),X(LFF2IPAIR),
     *            X(LFF2KLIST),X(LFF2LLIST),
     *            X(LFF2MLIST),X(LFF2NLIST),
     *            X(LFF2VEL),X(LFF2QMVEL),
     *            X(LFF2CLPR),X(LFF2ZLPR),X(LFF2NLPR),
     *            MXFFAT,MXBOND,MXANGL,MXDIHR,MXCMAP,
     *            MXWAGG,MXDIHB,0,
     *            0,X(LFF2MAPLST),
     *            INPQMV,INPMMV,IFFDATA,IFFPDB,0,DUMMY,0,
     *            X(LFF2KBLST),X(LFF2FCSTBD),X(LFF2FCDIHR),
     *            X(LFF2FCLJTP),X(LFF2NTYPE))
C
      N2FFAT = NFFAT
      N2BOND = NBOND
      N2ANGL = NANGL
      N2DIHR = NDIHR
      N2DIHB = NDIHB
      N2CMAP = NCMAP
      N2WAGG = NWAGG
C
      NFFAT  = N1FFAT
      NBOND  = N1BOND
      NANGL  = N1ANGL
      NDIHR  = N1DIHR
      NDIHB  = N1DIHB
      NCMAP  = N1CMAP
      NWAGG  = N1WAGG
C
      IF(IFEPTOP.GT.0) THEN
         IF((N1FFAT-KFREEA(501)).NE.(N2FFAT-KFREEB(501))) THEN
            IF(MASWRK) THEN
               WRITE(IW,*)
     *         'ERROR: NUMBER OF ATOMS DO NOT MATCH IN IFEPTOP SETUP.'
               WRITE(IW,*)'N1FFAT=',N1FFAT,' KFREEA(1)=',KFREEA(501)
               WRITE(IW,*)'N2FFAT=',N2FFAT,' KFREEB(1)=',KFREEB(501)
               WRITE(IW,'(1X,A/)')
     *         'PLEASE CHECK $FFDATA, $FFDATB, KFREEA= AND KFREEB=.'
            END IF
            CALL ABRT
         END IF
      END IF
C
C     - FOR SINGLE TOPOLOGY MM AND QM/MM,
C       MATOMA MAY BE > MATOMB, BUT N1FFAT MUST = N2FFAT)
C
      IF(IFEPTOP.EQ.1) THEN
         IF(N1FFAT.NE.N2FFAT.OR.N1BOND.NE.N2BOND.OR.
     *      N1ANGL.NE.N2ANGL.OR.N1DIHR.NE.N2DIHR.OR.
     *      N1DIHB.NE.N2DIHB.OR.N1CMAP.NE.N2CMAP.OR.
     *      N1WAGG.NE.N2WAGG    ) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: $FFDATA AND $FFDATB MUST HAVE THE SAME',
     *      ' TOPOLOGY FOR IFEPTOP=1.' 
            CALL ABRT
         END IF
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK PREPARE
!>    
!> @brief    main QuanPol preparation routine
!>          
!> @author   Hui Li group
!>           - Nov 2015
!>          
!> @details  set up all requested QuanPol calculations
!>           set up force field parameters
!>
      SUBROUTINE PREPARE(ATMNAM,CORD,CORDSV,ZANF,
     *                  ZMAS,ONEMAS,QMZMAS,QM1MAS,
     *                  CHARG,POL,POLSV,
     *                  SIG,EPS,
     *                  SIG2,EPS2,
     *                  BOND0,FCBOND,
     *                  ANGL0,FCANGL,FCWAGG,
     *                  DIHB0,FCDIHB,
     *                  VROT,NNN,GAMA,IPAIR,
     *                  KLIST,LLIST,LLIST2,
     *                  MLIST,NLIST,LISTQM,
     *                  L1213J,L14J,
     *                  VEL,QMVEL,
     *                  CLPR,ZLPR,NLPR,
     *                  XTS,YTS,ZTS,CMAT1,
     *                  LKQM,NONLS1,NONLSTQ,
     *                  MXFFAT,MXBOND,MXANGL,MXDIHR,
     *                  MXWAGG,MXDIHB,MXCMAP,NFOLD,RFOLD,
     *                  RETAIN,IADDNA1,IADDK1,
     *                  IADDCA2,IADDMG2,IADDCL1,JADDNA1,JADDK1,
     *                  ITYPWAT,NTS,
     *                  MAPLST,CMAPCO,FRAG1,FRAG2,FFFRAG1,FFFRAG2,
     *                  DFSA,FFDFSA,NQMREP,IATREP,CRPIAT,
     *                  ZRPIAT,RDENATM,FFRDPRATM,
     *                  LSTCELL,NONLS2,CORDSV2,CORDSVQ,
     *                  MVFASTS2,MVFASTS3,MVFASTS4,
     *                  MVFASTL2,MVFASTL3,MVFASTL4,
     *                  INPQMV,INPMMV,
     *                  KFREEA,KFREEB,LISTB2A,
     *                  ATMNAMB,CORDB,ZANFB,
     *                  ZMASB,ONEMASB,
     *                  CHARGB,POLB,
     *                  SIGB,EPSB,
     *                  SIG2B,EPS2B,
     *                  BOND0B,FCBONDB,
     *                  ANGL0B,FCANGLB,FCWAGGB,
     *                  DIHB0B,FCDIHBB,
     *                  VROTB,NNNB,GAMAB,IPAIRB,
     *                  KLISTB,LLISTB,
     *                  MLISTB,NLISTB,MAPLSTB,
     *                  VELB,QMVELB,
     *                  CLPRB,ZLPRB,NLPRB,
     *                  NONLSA,NONLSB,L1213A,L1213B,
     *                  L14A,L14B,OLDCORD,LSTRAT,DSTRAT,
     *                  LSTRATTMP,DSTRATTMP,
     *                  CRDIMG,CHGIMG,CRDIMB,CHGIMB,
     *                  ICOMBIN,IDELETE,ISCOOP,MPAIRA,MPAIRB,
     *                  L1213PMA,L14PMA,NONLSPMA,LSBONDPMA,LSANGLPMA,
     *                  LSDIHRPMA,LSDIHBPMA,LSWAGGPMA,LSCMAPPMA,
     *                  L1213PMB,L14PMB,NONLSPMB,LSBONDPMB,LSANGLPMB,
     *                  LSDIHRPMB,LSDIHBPMB,LSWAGGPMB,LSCMAPPMB,
     *                  LISTAQM,LISTBQM,IVIBMMP,IVIBMM,
     *                  KBLST,FCSTBD,FCDIHR,
     *                  FCLJTP,NTYPE,
     *                  KBLSTB,FCSTBDB,FCDIHRB,
     *                  FCLJTPB,NTYPEB,LQATOM,RQATOM,
     *                  IFFPDB,NMMFF94Q,
     *                  NORDERA,NORDERB,LISTAB,INTLST)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DOUBLE PRECISION MD
C
      LOGICAL GOPARR, DSKWRK, MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (DEGREE=57.2957795130823D+00)
      PARAMETER (TOKCAL=627.509469D+00)
      PARAMETER (TOKELVIN=3.15774646D+05)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, ONE=1.0D+00,
     *           HUGE=1.0D+30*TOBOHR)
C
      CHARACTER*10 ATMNAM,ATMNAMB
      CHARACTER*256 QPFILE
      CHARACTER*10 FRAG1(10),FRAG2(10),FFFRAG1(10),FFFRAG2(10)
      CHARACTER*10 DFSA(10),FFDFSA(10),RDENATM(10),FFRDPRATM(10)
C
      DIMENSION ATMNAM(MXFFAT),CORD(3,MXFFAT),CORDSV(3,MXFFAT),
     *          ZANF(MXFFAT),ZMAS(MXFFAT),ONEMAS(MXFFAT),
     *          QMZMAS(MXATM),QM1MAS(MXATM),
     *          CHARG(MXFFAT),POL(MXFFAT),SIG(MXFFAT),EPS(MXFFAT),
     *          SIG2(MXFFAT),EPS2(MXFFAT),
     *          BOND0(MXBOND),FCBOND(MXBOND), 
     *          ANGL0(MXANGL),FCANGL(MXANGL),
     *          FCWAGG(MXWAGG),
     *          DIHB0(MXDIHB),FCDIHB(MXDIHB),
     *          VROT(MXDIHR),NNN(MXDIHR),GAMA(MXDIHR),IPAIR(2,MXBOND),
     *          KLIST(3,MXANGL),
     *          LLIST(4,MXDIHR),LLIST2(4,MXDIHR),MLIST(4,MXWAGG),
     *          NLIST(4,MXDIHB),
     *          LISTQM(MXFFAT+MXATM+1),
     *          L1213J(2,*),L14J(2,MXDIHR),
     *          VEL(3,MXFFAT),QMVEL(3,MXATM),
     *          CLPR(4,MXFFAT),ZLPR(4,MXFFAT),NLPR(MXFFAT),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),CMAT1(NTS,NTS),LKQM(2,200),
     *          NONLS1(2,*),NONLSTQ(*),MAPLST(6,*),
     *          CMAPCO(4,4,24,24,3),
     *          IATREP(200),CRPIAT(4,200),ZRPIAT(4,200),
     *          CORDSV2(3,*),CORDSVQ(3,*),KFREEA(501),KFREEB(501),
     *          LISTB2A(*),ATMNAMB(*),CORDB(3,*),ZANFB(*),
     *          ZMASB(*),ONEMASB(*),
     *          CHARGB(*),POLB(*),
     *          SIGB(*),EPSB(*),
     *          SIG2B(*),EPS2B(*),
     *          BOND0B(*),FCBONDB(*),
     *          ANGL0B(*),FCANGLB(*),FCWAGGB(*),
     *          DIHB0B(*),FCDIHBB(*),
     *          VROTB(*),NNNB(*),GAMAB(*),IPAIRB(2,*),
     *          KLISTB(3,*),LLISTB(4,*),
     *          MLISTB(4,*),NLISTB(4,*),MAPLSTB(6,*),
     *          VELB(3,*),QMVELB(3,*),
     *          CLPRB(4,*),ZLPRB(4,*),NLPRB(*),
     *          NONLSA(2,*),NONLSB(2,*),L1213A(2,*),L1213B(2,*),
     *          L14A(2,*),L14B(2,*),OLDCORD(3,*),
     *          LSTRAT(2,*),DSTRAT(*),CRDIMG(3,*),CHGIMG(*),
     *          LSTRATTMP(2,*),DSTRATTMP(*),
     *          CRDIMB(3,*),CHGIMB(*),
     *          L1213PMA(2,*),L14PMA(2,*),LSBONDPMA(*),LSANGLPMA(*),
     *          LSDIHRPMA(*),LSDIHBPMA(*),LSWAGGPMA(*),LSCMAPPMA(*),
     *          L1213PMB(2,*),L14PMB(2,*),LSBONDPMB(*),LSANGLPMB(*),
     *          LSDIHRPMB(*),LSDIHBPMB(*),LSWAGGPMB(*),LSCMAPPMB(*),
     *          LISTAQM(*),LISTBQM(*),
     *          KBLST(2,*),FCSTBD(2,*),FCDIHR(3,*),FCLJTP(2,MXMMTP,*),
     *          NTYPE(*),KBLSTB(2,*),FCSTBDB(2,*),FCDIHRB(3,*),
     *          FCLJTPB(2,MXMMTP,*),NTYPEB(*),LQATOM(50),RQATOM(50),
     *          MPAIRA(2),MPAIRB(2),NORDERA(*),NORDERB(*),LISTAB(*),
     *          INTLST(*)
C
      COMMON /FFDAMP/ IPODAMP,IPO1213,SCRFAC,RSCRFAC,SCRF2,SCRF3,SCRF4
      COMMON /FFDFS / TIMDFS,NDFS,LFFDFSC,LFFDFSCAV,
     *                LFFDFSC0,LFFDFSA,LFFDFSN,KDFS
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFEWLD/ SPLIT,IEWALD,KEWALD,NKVEC,
     *                L1KVEC,L2KVEC,LFFRKEXPEL,LFFRKVEC,
     *                LFFKVEC,LFFTCHCH,LFFCOSCH,LFFSINCH
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFFRE2/ N1FFAT,N1BOND,N1ANGL,N1DIHR,N1DIHB,N1CMAP,N1WAGG,
     *                N2FFAT,N2BOND,N2ANGL,N2DIHR,N2DIHB,N2CMAP,N2WAGG,
     *                LFF2ATMNAM,LFF2CORD,LFF2ZANF,LFF2ZMAS,
     *                LFF2ONEMAS,LFF2CHARG,LFF2POL,
     *                LFF2SIG,LFF2EPS,LFF2SIG2,LFF2EPS2,
     *                LFF2BOND0,LFF2FCBOND,LFF2ANGL0,LFF2FCANGL,
     *                LFF2FCWAGG,LFF2DIHB0,LFF2FCDIHB,
     *                LFF2VROT,LFF2NNN,LFF2GAMA,LFF2IPAIR,
     *                LFF2KLIST,LFF2LLIST,LFF2MLIST,LFF2NLIST,
     *                LFF2VEL,LFF2QMVEL,LFF2CLPR,LFF2ZLPR,
     *                LFF2NLPR,LFF2MAPLST,LFFKFREEA,LFFKFREEB,
     *                LFFLISTB2A,NTODOA,LFFNONLSA,NTODOB,LFFNONLSB,
     *                N1213A,LFFL1213A,N1213B,LFFL1213B,
     *                N14A,LFFL14A,N14B,LFFL14B,
     *                NTODOPMA,LFFNONLSPMA,NBONDPMA,LFFLSBONDPMA,
     *                NANGLPMA,LFFLSANGLPMA,NDIHRPMA,LFFLSDIHRPMA,
     *                NDIHBPMA,LFFLSDIHBPMA,NWAGGPMA,LFFLSWAGGPMA,
     *                NCMAPPMA,LFFLSCMAPPMA,
     *                N1213PMA,LFFL1213PMA,
     *                N14PMA,LFFL14PMA,
     *                NTODOPMB,LFFNONLSPMB,NBONDPMB,LFFLSBONDPMB,
     *                NANGLPMB,LFFLSANGLPMB,NDIHRPMB,LFFLSDIHRPMB,
     *                NDIHBPMB,LFFLSDIHBPMB,NWAGGPMB,LFFLSWAGGPMB,
     *                NCMAPPMB,LFFLSCMAPPMB,
     *                N1213PMB,LFFL1213PMB,
     *                N14PMB,LFFL14PMB
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFMPT2/ MXMMTP,LFFKBLST,LFFFCSTBD,LFFFCDIHR,
     *                LFFFCLJTP,LFFNTYPE,
     *                LFF2KBLST,LFF2FCSTBD,LFF2FCDIHR,
     *                LFF2FCLJTP,LFF2NTYPE
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2,
     *                NRDEN,NBINRDEN,LFFPRO,LFFNRDPRATM,
     *                LFFRDPRATM,LFFDIESTEP,LFFDI1STEP
      COMMON /FFRMDF/ RDIST1,RDIST2,RINTRV,NRATM1,NRATM2,INTRSTP
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRNUM/ JJRAND(3),NRANDOM,NRANDOM0
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
      COMMON /FFUMBR/ UMBFC,UMBR0,UMBSIZE,
     *                NUMBBIN,NUMBATM(6),NUMBTYP,LFFUMBHIS,
     *                UM2FC,UM2R0,UM2SIZE,
     *                NUM2BIN,NUM2ATM(6),NUM2TYP,LFFUM2HIS
      COMMON /FFVIB / JVIBOUT,NVIBMM,LFFDIPSTEP,LFFVELSTEP,LFFIVIBMM,
     *                LFFDQMSTEP,LFFVQMSTEP,LFFDM1STEP,LFFVM1STEP,
     *                LFFDMMSTEP,LFFVMMSTEP,LFFQMVSTEP,LFFMMVSTEP
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /MACHIN/ NWDVAR,MAXFM,MAXSM,LIMFM,LIMSM
      COMMON /MASSES/ ZMASS(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
C
      DATA HSSIAN,MD      /8HHESSIAN ,8HMD      /
C
C     NANDUN THELLAMUREGE, DEJUN SI, HUI LI, MAR 2011, LINCOLN
C     HUI LI, DEC 28, 2011 (ADD FREE ENERGY PERTURBATION CODE)
C     FENGCHAO CUI, HUI LI, JUN 2012 (ADD FREE ENERGY CODE)
C
      QMVELB(1,1) = QMVELB(1,1)  ! THIS IS A NICE TOUCH
C
      IF(LOUT.EQ.1.AND.NFFTYP.EQ.0) THEN
         CALL LOUT1(ATMNAM,CORD,ZANF,ZMAS,CHARG,POL,
     *              SIG,EPS,SIG2,EPS2,BOND0,FCBOND,
     *              ANGL0,FCANGL,DIHB0,FCDIHB,
     *              VROT,NNN,GAMA,IPAIR,KLIST,LLIST,
     *              NLIST,CLPR,ZLPR,NLPR,
     *              MXFFAT,MXBOND,MXANGL,MXDIHR,
     *              MXDIHB,JRATTLE,LSTRATTMP)
         RETURN
      END IF
C
      IF(LOUT.EQ.1.AND.NFFTYP/10000.EQ.3) THEN
         IF(MASWRK)WRITE(IW,*)'READING AMBER TOP/PAR FILES ...'
         CALL VALFM(LOADFM)
         LSSBOND  = LOADFM   + 1
         LPDBNAM  = LSSBOND  + MXFFAT/14
         LRESNAM  = LPDBNAM  + MXFFAT
         LNATAAA  = LRESNAM  + MXFFAT
         LNNNCCC  = LNATAAA  + MXFFAT
         LAMBNAM  = LNNNCCC  + MXFFAT/7
         LLLIST1  = LAMBNAM  + MXFFAT
         LTEXTA   = LLLIST1  + MXDIHR*4
         LTEXTB   = LTEXTA   + 20000*100*2
         LTEXTC   = LTEXTB   + 20000*100*2
         LTEXTD   = LTEXTC   + 20000*100*2
         LAST     = LTEXTD   + 20000*100*2
         NEED     = LAST     - LOADFM -1
         CALL GETFM(NEED)
         NSSBD = 0
         NRES  = 0
         CALL RDAMBER(CORD,ZANF,X(LRESNAM),X(LAMBNAM),X(LPDBNAM),
     *                ZMAS,ONEMAS,
     *                CHARG,POL,SIG,EPS,
     *                SIG2,EPS2,
     *                X(LSSBOND),
     *                BOND0,FCBOND,
     *                ANGL0,FCANGL,
     *                VROT,NNN,GAMA,
     *                IPAIR,KLIST,LLIST,NLIST,
     *                NRES,X(LNATAAA),X(LNNNCCC),NSSBD,
     *                X(LLLIST1),ITYPWAT,
     *                X(LTEXTA),X(LTEXTB),X(LTEXTC),X(LTEXTD))
         CALL RETFM(NEED)
         DO IFFAT=1,NFFAT
            NLPR(IFFAT)= 2
            IF(ZANF(IFFAT).EQ.1.0D+00) THEN
               CLPR(1,IFFAT)= 2.0D+00
               ZLPR(1,IFFAT)= 2.0D+00
            END IF
            IF(ZANF(IFFAT).EQ.6.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.7D+00
            END IF
            IF(ZANF(IFFAT).EQ.7.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.6D+00
            END IF
            IF(ZANF(IFFAT).EQ.8.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.8D+00
            END IF
            IF(ZANF(IFFAT).EQ.16.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.6D+00
            END IF
         ENDDO
      END IF
C
      IF(LOUT.EQ.1.AND.NFFTYP/10000.EQ.5) THEN
         CALL VALFM(LOADFM)
         MAXMAX    =   MAX(MXWAGG,MAX(MXBOND,MAX(MXANGL,MXDIHR)))
         LENQMMFF  =   LOADFM     +   1
         LENBORDER =   LENQMMFF   +   MXFFAT
         LENLBOND  =   LENBORDER  +   MXBOND
         LENLISTRIN=   LENLBOND   +10*MXFFAT/NWDVAR + 1
         LENLISTRIB=   LENLISTRIN +10*MXFFAT/NWDVAR + 1
         LENNUMRIN =   LENLISTRIB +10*MXFFAT/NWDVAR + 1
         LENNSBTYP =   LENNUMRIN  +10*MXFFAT/NWDVAR + 1
         LENNRINTYP=   LENNSBTYP  +   MXANGL/NWDVAR + 1
         LENNBNDTYP=   LENNRINTYP +   MXFFAT/NWDVAR + 1
         LENIDATM  =   LENNBNDTYP +   MXBOND/NWDVAR + 1
         LENIMLTB  =   LENIDATM   + 2*MXMMTP/NWDVAR + 1
         LENIPILP  =   LENIMLTB   +   MXMMTP/NWDVAR + 1
         LENIVAL   =   LENIPILP   +   MXMMTP/NWDVAR + 1
         LENICRD   =   LENIVAL    +   MXMMTP/NWDVAR + 1
         LENLINH   =   LENICRD    +   MXMMTP/NWDVAR + 1
         LENNBNDT  =   LENLINH    +   MXMMTP/NWDVAR + 1
         LENNBNDT2 =   LENNBNDT   + 4*MXFFAT/NWDVAR + 1
         LENNANGTYP=   LENNBNDT2  + 4*MXFFAT/NWDVAR + 1
         LENITTN   =   LENNANGTYP +   MXANGL/NWDVAR + 1
         LENVDWIN  =   LENITTN    +   MXDIHR/NWDVAR + 1
         LENBNDCAG =   LENVDWIN   + 4*MXMMTP
         LENPCHAG  =   LENBNDCAG  +   MXBOND
         LENNLCBND =   LENPCHAG   + 2*MXMMTP
         LENIADTYP =   LENNLCBND  +   MAXMAX/NWDVAR + 1
         LENCHARGL =   LENIADTYP  +   MXMMTP/NWDVAR + 1
         LENANGLBC =   LENCHARGL  +   MXFFAT
         LENNTYPMP =   LENANGLBC  +      300/NWDVAR + 1
         LENNMPCNT =   LENNTYPMP  + 5*MXMMTP/NWDVAR + 1
         LAST      =   LENNMPCNT  + 2*MXMMTP/NWDVAR + 1
         NEED      =   LAST       -   LOADFM -1
         CALL GETFM(NEED)
         CALL MMFFTYPE(CORD,ZANF,IPAIR,
     *             KLIST,LLIST,
     *             NTYPE,X(LENQMMFF),X(LENBORDER),
     *             X(LENLBOND),X(LENLISTRIN),
     *             X(LENNUMRIN),X(LENLISTRIB),
     *             X(LENNRINTYP),
     *             X(LENNBNDT),X(LENNBNDT2),
     *             LQATOM,RQATOM,IFFPDB)
         CALL MMFFPAR(MXMMTP,ATMNAM,CORD,ZANF,ZMAS,CHARG,POL,
     *             SIG,EPS,SIG2,EPS2,IPAIR,
     *             KLIST,LLIST,MLIST,KBLST,
     *             FCBOND,BOND0,FCANGL,ANGL0,
     *             FCSTBD,FCWAGG,FCDIHR,
     *             CLPR,ZLPR,NLPR,
     *             FCLJTP,NTYPE,X(LENQMMFF),
     *             X(LENLBOND),X(LENNRINTYP),
     *             X(LENNSBTYP),X(LENNBNDTYP),X(LENIDATM),X(LENIMLTB),
     *             X(LENIPILP),
     *             X(LENNBNDT),X(LENNBNDT2),X(LENNANGTYP),
     *             X(LENITTN),X(LENVDWIN),X(LENBNDCAG),
     *             X(LENPCHAG),X(LENNLCBND),X(LENIADTYP),X(LENCHARGL),
     *             X(LENNUMRIN),X(LENBORDER),X(LENLISTRIN),X(LENANGLBC),
     *             X(LENNTYPMP),X(LENNMPCNT),X(LENICRD),X(LENLINH),
     *             X(LENIVAL))
         CALL RETFM(NEED)
      END IF
C
C     -- CHECK NFIXMM, NFIXMMB, NFIXQM, NFIXQMB --
C
      DO III=1,NFIXMM
         IF(IFIXMM(III).GT.N1FFAT) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: NFIXMM ATOMS EXCEEDED NFFAT IN $FFDATA.'
            CALL ABRT
         END IF
      ENDDO
      DO III=1,NFIXMMB
         IF(IFIXMMB(III).GT.N2FFAT) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: NFIXMMB ATOMS EXCEEDED NFFAT IN $FFDATB.'
            CALL ABRT
         END IF
      ENDDO
      DO III=1,NFIXQM
         IF(IFIXQM(III).GT.MATOMA) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: NFIXQM ATOMS EXCEEDED NAT OR MATOMA.'
            CALL ABRT
         END IF
      ENDDO
      DO III=1,NFIXQMB
         IF(IFIXQMB(III).GT.MATOMB) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: NFIXQMB ATOMS EXCEEDED MATOMB.'
            CALL ABRT
         END IF
      ENDDO
C
C     -- SAVE THE INFORMAION FOR VIBRATIONAL FREQUENCY CALCLATION --
C
      IF(NVIBMM.GT.0) CALL ICOPY(200,IVIBMMP,1,IVIBMM,1)
C
C     -- ESTABLISH QM AB LIST --
C
      IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
         CALL VICLR(LISTAQM,1,MXATM)
         CALL VICLR(LISTBQM,1,MXATM)
         DO IA=1,MATOMA
            DO IB=1,MATOMB
               DIFF=ABS(X(LFFCX+3*(IA-1)  )-X(LFFCX+3*(MATOMA+IB-1)  ))
     *             +ABS(X(LFFCX+3*(IA-1)+1)-X(LFFCX+3*(MATOMA+IB-1)+1))
     *             +ABS(X(LFFCX+3*(IA-1)+2)-X(LFFCX+3*(MATOMA+IB-1)+2))
               IF(DIFF.LT.0.01D+00) THEN
                  LISTAQM(IA) = IB
                  LISTBQM(IB) = IA
               END IF
            ENDDO
         ENDDO
         DO IB=1,MATOMB
            IF(LISTBQM(IB).EQ.0) THEN
               IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *         'ERROR: MATOMB ATOMS MUST HAVE THE SAME COORDINATES',
     *         ' AS MATOMA ATOMS FOR IFEPTOP=1 AND IFEPTYP=1.'
               CALL ABRT
            END IF
         ENDDO
      END IF
      IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
         CALL VICLR(LISTAQM,1,MXATM)
         CALL VICLR(LISTBQM,1,MXATM)
         DO IA=1,MATOMA
            IB = IA
            LISTAQM(IA) = IB
            LISTBQM(IB) = IA
         ENDDO
      END IF
C
      CHADDB = ZERO
C
      IF(MASWRK.AND.(IFEPTOP.GT.0 .OR. ICOMBIN.GT.0)) THEN
C
      IF(IFEPTOP.GT.0)
     *WRITE(IP,*)
     *'$FFDATA     ! ** IFEPTOP: MOLECULE A, GOOD FOR RESTART **'
      IF(ICOMBIN.GT.0)
     *WRITE(IP,*)'$FFDATA     ! ** ICOMBIN: MOLECULE A **'
      WRITE(IP,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
      DO IFFAT=1,NFFAT
         WRITE(IP,1010) ATMNAM(IFFAT),ZANF(IFFAT),
     *   CORD(1,IFFAT)*TOANGS,CORD(2,IFFAT)*TOANGS,
     *   CORD(3,IFFAT)*TOANGS
      ENDDO
      WRITE(IP,*)'STOP'
C
      IF(LJSIGMA.EQ.0) THEN
      WRITE(IP,*)'PARAMETERS       MASS         Q      ',
     *          'POL   RMIN/2  EPSILON   RMIN/2  EPSILON'
      DO IFFAT=1,NFFAT
         WRITE(IP,1020) ATMNAM(IFFAT),ZMAS(IFFAT)/1822.88850204D+00,
     *                 CHARG(IFFAT),POL(IFFAT)*TOANGS**3,
     *   SIG(IFFAT)*TOANGS/1.781797436280679D+00,EPS(IFFAT)*TOKCAL,
     *   SIG2(IFFAT)*TOANGS/1.781797436280679D+00,EPS2(IFFAT)*TOKCAL
      ENDDO
      ELSE
      WRITE(IP,*)'PARAMETERS       MASS         Q      ',
     *          'POL    SIGMA  EPSILON    SIGMA  EPSILON'
      DO IFFAT=1,NFFAT
         WRITE(IP,1020) ATMNAM(IFFAT),ZMAS(IFFAT)/1822.88850204D+00,
     *                 CHARG(IFFAT),POL(IFFAT)*TOANGS**3,
     *                 SIG(IFFAT)*TOANGS,EPS(IFFAT)*TOKCAL,
     *                 SIG2(IFFAT)*TOANGS,EPS2(IFFAT)*TOKCAL
      ENDDO
      END IF
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'QMMMREP    N       C1     Z1       C2     Z2',
     *          '       C3     Z3       C4     Z4'
      DO IFFAT=1,NFFAT
         WRITE(IP,1030) ATMNAM(IFFAT),4,
     *                 CLPR(1,IFFAT),ZLPR(1,IFFAT),
     *                 CLPR(2,IFFAT),ZLPR(2,IFFAT),
     *                 CLPR(3,IFFAT),ZLPR(3,IFFAT),
     *                 CLPR(4,IFFAT),ZLPR(4,IFFAT)
      ENDDO
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'BOND     #     ATM1     ATM2           FC        R0'
      DO IBOND=1,NBOND
         IF(FCBOND(IBOND).GT.-1.0D+05) THEN
         WRITE(IP,1040) IBOND,IPAIR(1,IBOND),IPAIR(2,IBOND),
     *                 FCBOND(IBOND)*TOKCAL*TOBOHR*TOBOHR,
     *                 BOND0(IBOND)*TOANGS
         ELSE
         WRITE(IP,1040) IBOND,IPAIR(1,IBOND),IPAIR(2,IBOND),
     *                -FCBOND(IBOND)*TOKCAL*TOBOHR*TOBOHR*1.0D-10,
     *                 BOND0(IBOND)*TOANGS
         END IF
      ENDDO
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'ANGLE    #     ATM1     ATM2     ATM3 ',
     *          '          FC      ANGLE0'
      DO IANGL=1,NANGL
         IF(FCANGL(IANGL).GT.-1.0D+05) THEN
         WRITE(IP,1050) IANGL,KLIST(1,IANGL),KLIST(2,IANGL),
     *                 KLIST(3,IANGL),FCANGL(IANGL)*TOKCAL,
     *                 ANGL0(IANGL)*DEGREE
         ELSE
         WRITE(IP,1050) IANGL,KLIST(1,IANGL),KLIST(2,IANGL),
     *                 KLIST(3,IANGL),-FCANGL(IANGL)*TOKCAL*1.0D-10,
     *                 ANGL0(IANGL)*DEGREE
         END IF
      ENDDO
      WRITE(IP,*)'STOP'
C
      IF(NFFTYP/10000.EQ.5) THEN
         WRITE(IP,*)'STRBEND  #    BOND1    BOND2',
     *          '          FC1          FC2'
         DO IANGL=1,NANGL
            WRITE(IP,1055)IANGL,KBLST(1,IANGL),KBLST(2,IANGL),
     *                    FCSTBD(1,IANGL)*TOBOHR*TOKCAL,
     *                    FCSTBD(2,IANGL)*TOBOHR*TOKCAL
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
      IF(NFFTYP/10000.NE.5) THEN
         WRITE(IP,*)'DIHROT   #     ATM1     ATM2     ATM3  ',
     *             '   ATM4        VROT     N    GAMMA'
         DO IDIHR=1,NDIHR
            IF(VROT(IDIHR).GT.-1.0D+05) THEN
            WRITE(IP,1060) IDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                    LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                    VROT(IDIHR)*TOKCAL,NNN(IDIHR),
     *                    GAMA(IDIHR)*DEGREE
            ELSE
            WRITE(IP,1060) IDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                    LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                    -VROT(IDIHR)*TOKCAL*1.0D-30,NNN(IDIHR),
     *                    GAMA(IDIHR)*DEGREE
            END IF
         ENDDO
         WRITE(IP,*)'STOP'
      ELSE
         WRITE(IP,*)'DIHR3V   #     ATM1     ATM2     ATM3  ',
     *              '   ATM4     VROT1     VROT2     VROT3'
         DO IDIHR=1,NDIHR
            WRITE(IP,1065)
     *                 IDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                 LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                 FCDIHR(1,IDIHR)*TOKCAL,
     *                 FCDIHR(2,IDIHR)*TOKCAL,
     *                 FCDIHR(3,IDIHR)*TOKCAL
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
      WRITE(IP,*)'DIHBND   #     ATM1     ATM2     ATM3  ',
     *          '   ATM4         FC    DIHB0'
      DO IDIHB=1,NDIHB
         WRITE(IP,1070) IDIHB,NLIST(1,IDIHB),NLIST(2,IDIHB),
     *                 NLIST(3,IDIHB),NLIST(4,IDIHB),
     *                 FCDIHB(IDIHB)*TOKCAL,
     *                 DIHB0(IDIHB)*DEGREE
      ENDDO
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'CMAP     #     ATM1     ATM2     ATM3  ',
     *          '   ATM4     ATM5    ITYPE'
      DO ICMAP=1,NCMAP
         WRITE(IP,1075) ICMAP,MAPLST(1,ICMAP),MAPLST(2,ICMAP),
     *                        MAPLST(3,ICMAP),MAPLST(4,ICMAP),
     *                        MAPLST(5,ICMAP),MAPLST(6,ICMAP)
      ENDDO
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'WAGGING  #     ATM2     ATM3     ATM4  ',
     *          '   ATM1         FC'
      DO IWAGG=1,NWAGG
         WRITE(IP,1080) IWAGG,MLIST(2,IWAGG),MLIST(3,IWAGG),
     *                 MLIST(4,IWAGG),MLIST(1,IWAGG),
     *                 FCWAGG(IWAGG)*TOKCAL
      ENDDO
      WRITE(IP,*)'STOP'
C
      IF(NFFTYP/10000.EQ.5) THEN
         WRITE(IP,*)'MMTYPE   #  MMFF94'
         WRITE(IP,'(2X,I9)')NFFAT
         NLINE = (NFFAT-1)/20 + 1
         DO I=1,NLINE
            JSTOP = 20
            IF(I.EQ.NLINE) JSTOP = NFFAT - (NLINE-1)*20
            WRITE(IP,'(I3,19(1X,I3))') (NTYPE((I-1)*20+J),J=1,JSTOP)
         ENDDO
         WRITE(IP,*)'STOP'
C
         WRITE(IP,*)
     *   'MMFFLJ   #                  I   J      RIJ    EPSIJ'
         WRITE(IP,'(2X,I9)')MXMMTP
         DO II=1,MXMMTP
            DO JJ=1,MXMMTP,3
               IF(JJ.LE.MXMMTP-2) THEN
                  WRITE(IP,'(3(1X,I3,1X,I3,1X,F8.6,1X,F8.6))')
     *            II,JJ  ,FCLJTP(1,JJ  ,II)*TOANGS,
     *                    FCLJTP(2,JJ  ,II)*TOKCAL,
     *            II,JJ+1,FCLJTP(1,JJ+1,II)*TOANGS,
     *                    FCLJTP(2,JJ+1,II)*TOKCAL,
     *            II,JJ+2,FCLJTP(1,JJ+2,II)*TOANGS,
     *                    FCLJTP(2,JJ+2,II)*TOKCAL
               END IF
               IF(JJ.EQ.MXMMTP-1) THEN
                  WRITE(IP,'(2(1X,I3,1X,I3,1X,F8.6,1X,F8.6))')
     *            II,JJ  ,FCLJTP(1,JJ  ,II)*TOANGS,
     *                    FCLJTP(2,JJ  ,II)*TOKCAL,
     *            II,JJ+1,FCLJTP(1,JJ+1,II)*TOANGS,
     *                    FCLJTP(2,JJ+1,II)*TOKCAL
               END IF
               IF(JJ.EQ.MXMMTP  ) THEN
                  WRITE(IP,'(1X,I3,1X,I3,1X,F8.6,1X,F8.6)')
     *            II,JJ  ,FCLJTP(1,JJ  ,II)*TOANGS,
     *                    FCLJTP(2,JJ  ,II)*TOKCAL
               END IF
            ENDDO
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
      WRITE(IP,*)'$END'
C
      IF(IFEPTOP.GT.0)
     *WRITE(IP,*)
     *'$FFDATB     ! ** IFEPTOP: MOLECULE B, GOOD FOR RESTART **'
      IF(ICOMBIN.GT.0)
     *WRITE(IP,*)'$FFDATB     ! ** ICOMBIN: MOLECULE B **'
      WRITE(IP,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
      DO IFFAT=1,N2FFAT
         WRITE(IP,1010) ATMNAMB(IFFAT),ZANFB(IFFAT),
     *   CORDB(1,IFFAT)*TOANGS,CORDB(2,IFFAT)*TOANGS,
     *   CORDB(3,IFFAT)*TOANGS
      ENDDO
      WRITE(IP,*)'STOP'
C
      IF(LJSIGMA.EQ.0) THEN
      WRITE(IP,*)'PARAMETERS       MASS         Q      ',
     *          'POL   RMIN/2  EPSILON   RMIN/2  EPSILON'
      DO IFFAT=1,N2FFAT
         WRITE(IP,1020) ATMNAMB(IFFAT),ZMASB(IFFAT)/1822.88850204D+00,
     *                 CHARGB(IFFAT),POLB(IFFAT)*TOANGS**3,
     *   SIGB(IFFAT)*TOANGS/1.781797436280679D+00,EPSB(IFFAT)*TOKCAL,
     *   SIG2B(IFFAT)*TOANGS/1.781797436280679D+00,EPS2B(IFFAT)*TOKCAL
      ENDDO
      ELSE
      WRITE(IP,*)'PARAMETERS       MASS         Q      ',
     *          'POL    SIGMA  EPSILON    SIGMA  EPSILON'
      DO IFFAT=1,N2FFAT
         WRITE(IP,1020) ATMNAMB(IFFAT),ZMASB(IFFAT)/1822.88850204D+00,
     *                 CHARGB(IFFAT),POLB(IFFAT)*TOANGS**3,
     *                 SIGB(IFFAT)*TOANGS,EPSB(IFFAT)*TOKCAL,
     *                 SIG2B(IFFAT)*TOANGS,EPS2B(IFFAT)*TOKCAL
      ENDDO
      END IF
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'QMMMREP    N       C1     Z1       C2     Z2',
     *          '       C3     Z3       C4     Z4'
      DO IFFAT=1,N2FFAT
         WRITE(IP,1030) ATMNAMB(IFFAT),4,
     *                 CLPRB(1,IFFAT),ZLPRB(1,IFFAT),
     *                 CLPRB(2,IFFAT),ZLPRB(2,IFFAT),
     *                 CLPRB(3,IFFAT),ZLPRB(3,IFFAT),
     *                 CLPRB(4,IFFAT),ZLPRB(4,IFFAT)
      ENDDO
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'BOND     #     ATM1     ATM2           FC        R0'
      DO IBOND=1,N2BOND
         IF(FCBONDB(IBOND).GT.-1.0D+05) THEN
         WRITE(IP,1040) IBOND,IPAIRB(1,IBOND),IPAIRB(2,IBOND),
     *                 FCBONDB(IBOND)*TOKCAL*TOBOHR*TOBOHR,
     *                 BOND0B(IBOND)*TOANGS
         ELSE
         WRITE(IP,1040) IBOND,IPAIRB(1,IBOND),IPAIRB(2,IBOND),
     *                -FCBONDB(IBOND)*TOKCAL*TOBOHR*TOBOHR*1.0D-10,
     *                 BOND0B(IBOND)*TOANGS
         END IF
      ENDDO
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'ANGLE    #     ATM1     ATM2     ATM3 ',
     *          '          FC      ANGLE0'
      DO IANGL=1,N2ANGL
         IF(FCANGLB(IANGL).GT.-1.0D+05) THEN
         WRITE(IP,1050) IANGL,KLISTB(1,IANGL),KLISTB(2,IANGL),
     *                 KLISTB(3,IANGL),FCANGLB(IANGL)*TOKCAL,
     *                 ANGL0B(IANGL)*DEGREE
         ELSE
         WRITE(IP,1050) IANGL,KLISTB(1,IANGL),KLISTB(2,IANGL),
     *                 KLISTB(3,IANGL),-FCANGLB(IANGL)*TOKCAL*1.0D-10,
     *                 ANGL0B(IANGL)*DEGREE
         END IF
      ENDDO
      WRITE(IP,*)'STOP'
C
      IF(NFFTYP/10000.EQ.5) THEN
         WRITE(IP,*)'STRBEND  #    BOND1    BOND2',
     *          '          FC1          FC2'
         DO IANGL=1,NANGL
            WRITE(IP,1055)IANGL,KBLSTB(1,IANGL),KBLSTB(2,IANGL),
     *                    FCSTBDB(1,IANGL)*TOANGS*TOKCAL,
     *                    FCSTBDB(2,IANGL)*TOANGS*TOKCAL
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
      IF(NFFTYP/10000.NE.5) THEN
         WRITE(IP,*)'DIHROT   #     ATM1     ATM2     ATM3  ',
     *             '   ATM4        VROT     N    GAMMA'
         DO IDIHR=1,N2DIHR
            IF(VROTB(IDIHR).GT.-1.0D+05) THEN
            WRITE(IP,1060) IDIHR,LLISTB(1,IDIHR),LLISTB(2,IDIHR),
     *                    LLISTB(3,IDIHR),LLISTB(4,IDIHR),
     *                    VROTB(IDIHR)*TOKCAL,NNNB(IDIHR),
     *                    GAMAB(IDIHR)*DEGREE
            ELSE
            WRITE(IP,1060) IDIHR,LLISTB(1,IDIHR),LLISTB(2,IDIHR),
     *                    LLISTB(3,IDIHR),LLISTB(4,IDIHR),
     *                    -VROTB(IDIHR)*TOKCAL*1.0D-10,NNNB(IDIHR),
     *                    GAMAB(IDIHR)*DEGREE
            END IF
         ENDDO
         WRITE(IP,*)'STOP'
      ELSE
         WRITE(IP,*)'DIHR3V   #     ATM1     ATM2     ATM3  ',
     *              '   ATM4     VROT1     VROT2     VROT3' 
         DO IDIHR=1,NDIHR
            WRITE(IP,1065)
     *                 IDIHR,LLISTB(1,IDIHR),LLISTB(2,IDIHR),
     *                 LLISTB(3,IDIHR),LLISTB(4,IDIHR),
     *                 FCDIHRB(1,IDIHR)*TOKCAL,
     *                 FCDIHRB(2,IDIHR)*TOKCAL,
     *                 FCDIHRB(3,IDIHR)*TOKCAL
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
      WRITE(IP,*)'DIHBND   #     ATM1     ATM2     ATM3  ',
     *          '   ATM4         FC    DIHB0'
      DO IDIHB=1,N2DIHB
         WRITE(IP,1070) IDIHB,NLISTB(1,IDIHB),NLISTB(2,IDIHB),
     *                 NLISTB(3,IDIHB),NLISTB(4,IDIHB),
     *                 FCDIHB(IDIHB)*TOKCAL,
     *                 DIHB0B(IDIHB)*DEGREE
      ENDDO
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'CMAP     #     ATM1     ATM2     ATM3  ',
     *          '   ATM4     ATM5    ITYPE'
      DO ICMAP=1,NCMAP
         WRITE(IP,1075) ICMAP,MAPLST(1,ICMAP),MAPLST(2,ICMAP),
     *                        MAPLST(3,ICMAP),MAPLST(4,ICMAP),
     *                        MAPLST(5,ICMAP),MAPLST(6,ICMAP)
      ENDDO
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'WAGGING  #     ATM2     ATM3     ATM4  ',
     *          '   ATM1         FC'
      DO IWAGG=1,N2WAGG
         WRITE(IP,1080) IWAGG,MLISTB(2,IWAGG),MLISTB(3,IWAGG),
     *                 MLISTB(4,IWAGG),MLISTB(1,IWAGG),
     *                 FCWAGGB(IWAGG)*TOKCAL
      ENDDO
      WRITE(IP,*)'STOP'
C
      IF(NFFTYP/10000.EQ.5) THEN
         WRITE(IP,*)'MMTYPE   #  MMFF94'
         WRITE(IP,'(2X,I9)')NFFAT
         NLINE = (NFFAT-1)/20 + 1
         DO I=1,NLINE
            JSTOP = 20
            IF(I.EQ.NLINE) JSTOP = NFFAT - (NLINE-1)*20
            WRITE(IP,'(I3,19(1X,I3))') (NTYPEB((I-1)*20+J),J=1,JSTOP)
         ENDDO
         WRITE(IP,*)'STOP'
C
         WRITE(IP,*)
     *   'MMFFLJ   #                  I   J      RIJ    EPSIJ'
         WRITE(IP,'(2X,I9)')MXMMTP
         DO II=1,MXMMTP
            DO JJ=1,MXMMTP,3
               IF(JJ.LE.MXMMTP-2) THEN
                  WRITE(IP,'(3(1X,I3,1X,I3,1X,F8.6,1X,F8.6))')
     *            II,JJ  ,FCLJTPB(1,JJ  ,II)*TOANGS,
     *                    FCLJTPB(2,JJ  ,II)*TOKCAL,
     *            II,JJ+1,FCLJTPB(1,JJ+1,II)*TOANGS,
     *                    FCLJTPB(2,JJ+1,II)*TOKCAL,
     *            II,JJ+2,FCLJTPB(1,JJ+2,II)*TOANGS,
     *                    FCLJTPB(2,JJ+2,II)*TOKCAL
               END IF
               IF(JJ.EQ.MXMMTP-1) THEN
                  WRITE(IP,'(2(1X,I3,1X,I3,1X,F8.6,1X,F8.6))')
     *            II,JJ  ,FCLJTPB(1,JJ  ,II)*TOANGS,
     *                    FCLJTPB(2,JJ  ,II)*TOKCAL,
     *            II,JJ+1,FCLJTPB(1,JJ+1,II)*TOANGS,
     *                    FCLJTPB(2,JJ+1,II)*TOKCAL
               END IF
               IF(JJ.EQ.MXMMTP  ) THEN
                  WRITE(IP,'(1X,I3,1X,I3,1X,F8.6,1X,F8.6)')
     *            II,JJ  ,FCLJTPB(1,JJ  ,II)*TOANGS,
     *                    FCLJTPB(2,JJ  ,II)*TOKCAL
               END IF
            ENDDO
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
      WRITE(IP,*)'$END'
C
      END IF
C
C
      IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
C
C        -- CHECK KFREEA, $FFDATA AND $FFDATB --
C
         IWRONG = ABS(N1FFAT-N2FFAT)
         DO I = 1, N1FFAT
            TEST = ABS(CORD(1,I) - CORDB(1,I)) +
     *             ABS(CORD(2,I) - CORDB(2,I)) +
     *             ABS(CORD(3,I) - CORDB(3,I))
            IF(TEST.GT.1.0D-4) THEN
               IWRONG = IWRONG + 1
            ELSE
               CORDB(1,I) = CORD(1,I)
               CORDB(2,I) = CORD(2,I)
               CORDB(3,I) = CORD(3,I)
            END IF
         ENDDO
         DO I = 1, N1FFAT
            TEST = ABS(ZMAS  (I) - ZMASB  (I)) +
     *             ABS(CHARG (I) - CHARGB (I)) +
     *             ABS(POL   (I) - POLB   (I)) +
     *             ABS(SIG   (I) - SIGB   (I)) +
     *             ABS(EPS   (I) - EPSB   (I)) +
     *             ABS(SIG2  (I) - SIG2B  (I)) +
     *             ABS(EPS2  (I) - EPS2B  (I)) +
     *             ABS(CLPR(1,I) - CLPRB(1,I)) +
     *             ABS(CLPR(2,I) - CLPRB(2,I)) +
     *             ABS(CLPR(3,I) - CLPRB(3,I)) +
     *             ABS(CLPR(4,I) - CLPRB(4,I)) +
     *             ABS(ZLPR(1,I) - ZLPRB(1,I)) +
     *             ABS(ZLPR(2,I) - ZLPRB(2,I)) +
     *             ABS(ZLPR(3,I) - ZLPRB(3,I)) +
     *             ABS(ZLPR(4,I) - ZLPRB(4,I))
            IF(TEST.GT.1.0D-10) IWRONG = IWRONG + 1
         ENDDO
         DO KKK=1, KFREEA(501)
            I = KFREEA(KKK)
            TEST = ABS(ZMAS  (I) - ZMASB  (I)) +
     *             ABS(CHARG (I) - CHARGB (I)) +
     *             ABS(POL   (I) - POLB   (I)) +
     *             ABS(SIG   (I) - SIGB   (I)) +
     *             ABS(EPS   (I) - EPSB   (I)) +
     *             ABS(SIG2  (I) - SIG2B  (I)) +
     *             ABS(EPS2  (I) - EPS2B  (I)) +
     *             ABS(CLPR(1,I) - CLPRB(1,I)) +
     *             ABS(CLPR(2,I) - CLPRB(2,I)) +
     *             ABS(CLPR(3,I) - CLPRB(3,I)) +
     *             ABS(CLPR(4,I) - CLPRB(4,I)) +
     *             ABS(ZLPR(1,I) - ZLPRB(1,I)) +
     *             ABS(ZLPR(2,I) - ZLPRB(2,I)) +
     *             ABS(ZLPR(3,I) - ZLPRB(3,I)) +
     *             ABS(ZLPR(4,I) - ZLPRB(4,I))
            IF(TEST.GT.1.0D-10) IWRONG = IWRONG - 1
         ENDDO
         IF(IWRONG.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: ATOMS DO NOT MATCH FOR IFEPTOP=1 AND IFEPTYP=1.',
     *      'PLEASE CHECK $FFDATA, $FFDATB AND KFREEA.'
            CALL ABRT      
         END IF
C
C        -- ESTABLISH 1-TO-1 LIST BETWEEN STATES A AND B --
C
         CALL VICLR(LISTB2A,1,N2FFAT)
         DO IB = 1, N2FFAT
            IA = IB
            LISTB2A(IB) = IA
         ENDDO
C
C        -- COMBINE A AND B MASSES AND COVALENT TERMS --
         DO III=1,KFREEA(501)
            IA         = KFREEA(III)
            ZMAS  (IA) = (ONE-WSIMUL)*ZMAS(IA) + WSIMUL*ZMASB(IA)
            ONEMAS(IA) = ONE/ZMAS(IA)
         ENDDO
         DO IBOND=1,N1BOND
            FCBOND(IBOND)=(ONE-WSIMUL)*FCBOND (IBOND)+
     *                          WSIMUL*FCBONDB(IBOND)
            BOND0 (IBOND)=(ONE-WSIMUL)*BOND0 (IBOND)+
     *                          WSIMUL*BOND0B(IBOND)
         ENDDO
         DO IANGL=1,N1ANGL
            FCANGL(IANGL)=(ONE-WSIMUL)*FCANGL (IANGL)+
     *                          WSIMUL*FCANGLB(IANGL)
            ANGL0 (IANGL)=(ONE-WSIMUL)*ANGL0 (IANGL)+
     *                          WSIMUL*ANGL0B(IANGL)
            FCSTBD(1,IANGL)=(ONE-WSIMUL)*FCSTBD (1,IANGL)+
     *                            WSIMUL*FCSTBDB(1,IANGL)
            FCSTBD(2,IANGL)=(ONE-WSIMUL)*FCSTBD (2,IANGL)+
     *                            WSIMUL*FCSTBDB(2,IANGL)
         ENDDO
         DO IDIHR=1,N1DIHR
            VROT(IDIHR)=(ONE-WSIMUL)*VROT (IDIHR)+
     *                        WSIMUL*VROTB(IDIHR)
            FCDIHR(1,IDIHR)=(ONE-WSIMUL)*FCDIHR (1,IDIHR)+
     *                            WSIMUL*FCDIHRB(1,IDIHR)
            FCDIHR(2,IDIHR)=(ONE-WSIMUL)*FCDIHR (2,IDIHR)+
     *                            WSIMUL*FCDIHRB(2,IDIHR)
            FCDIHR(3,IDIHR)=(ONE-WSIMUL)*FCDIHR (3,IDIHR)+
     *                            WSIMUL*FCDIHRB(3,IDIHR)
         ENDDO
         DO IDIHB=1,N1DIHB
            FCDIHB(IDIHB)=(ONE-WSIMUL)*FCDIHB (IDIHB)+
     *                          WSIMUL*FCDIHBB(IDIHB)
         ENDDO
         DO IWAGG=1,N1WAGG
            FCWAGG(IWAGG)=(ONE-WSIMUL)*FCWAGG (IWAGG)+
     *                          WSIMUL*FCWAGGB(IWAGG)
         ENDDO
         DO II=1,MXMMTP
            DO JJ=1,MXMMTP
               FCLJTP(1,JJ,II) = (ONE-WSIMUL)*FCLJTP (1,JJ,II)+
     *                                 WSIMUL*FCLJTPB(1,JJ,II)
               FCLJTP(2,JJ,II) = (ONE-WSIMUL)*FCLJTP (2,JJ,II)+
     *                                 WSIMUL*FCLJTPB(2,JJ,II)
            ENDDO
         ENDDO
      END IF
C
C
      IF(IFEPTOP.EQ.2.AND.IFEPTYP.EQ.1) THEN
C
C        -- ESTABLISH 1-TO-1 LIST BETWEEN STATES A AND B --
C           THIS REQUIRES A AND B BE HOMOGENEOUS
C
         CALL VICLR(LISTB2A,1,N2FFAT)
         KFFAT = NFFAT
         DO III=1,KFREEB(501)
            IB            = KFREEB(III)
            KFFAT         = KFFAT + 1
            LISTB2A(IB)   = KFFAT       ! MUST DO IT HERE
         ENDDO
         IA = 0
         DO 200 IB = 1, N2FFAT
            IF(LISTB2A(IB).GT.0) GOTO 200
 201        CONTINUE
            IA = IA + 1
            IF(IA.GT.N1FFAT) GOTO 200
            TEST = ABS(CORD(1,IA) - CORDB(1,IB)) +
     *             ABS(CORD(2,IA) - CORDB(2,IB)) +
     *             ABS(CORD(3,IA) - CORDB(3,IB))
            IF(TEST.GT.1.0D-4) THEN
               GOTO 201
            ELSE
               CORDB(1,IB) = CORD(1,IA)
               CORDB(2,IB) = CORD(2,IA)
               CORDB(3,IB) = CORD(3,IA)
            END IF
            TEST = ABS(ZMAS  (IA) - ZMASB  (IB)) +
     *             ABS(CHARG (IA) - CHARGB (IB)) +
     *             ABS(POL   (IA) - POLB   (IB)) +
     *             ABS(SIG   (IA) - SIGB   (IB)) +
     *             ABS(EPS   (IA) - EPSB   (IB)) +
     *             ABS(SIG2  (IA) - SIG2B  (IB)) +
     *             ABS(EPS2  (IA) - EPS2B  (IB)) +
     *             ABS(CLPR(1,IA) - CLPRB(1,IB)) +
     *             ABS(CLPR(2,IA) - CLPRB(2,IB)) +
     *             ABS(CLPR(3,IA) - CLPRB(3,IB)) +
     *             ABS(CLPR(4,IA) - CLPRB(4,IB)) +
     *             ABS(ZLPR(1,IA) - ZLPRB(1,IB)) +
     *             ABS(ZLPR(2,IA) - ZLPRB(2,IB)) +
     *             ABS(ZLPR(3,IA) - ZLPRB(3,IB)) +
     *             ABS(ZLPR(4,IA) - ZLPRB(4,IB))
            IF(TEST.GT.1.0D-10) GOTO 201
            LISTB2A(IB) = IA
 200     CONTINUE
         DO IB = 1, N2FFAT
            IF(LISTB2A(IB).EQ.0) THEN
              IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *        'ERROR: ATOMS DO NOT MATCH FOR IFEPTOP=2 AND IFEPTYP=1.',
     *        'PLEASE CHECK $FFDATA, $FFDATB, KFREEA= AND KFREEB=.' 
              CALL ABRT
            END IF
         ENDDO
C
         IF(NFIXMM.GT.0) THEN
C           -- ADD FIXED ATOMS OF B TO NFIXMM (EXPANSION) --
            DO JJJ=1, NFIXMMB
               NFIXMM         = NFIXMM + 1
               IFIXMM(NFIXMM) = LISTB2A(IFIXMMB(JJJ))
            ENDDO
         END IF
C
C        -- ADD ACTIVE ATOMS OF STATE B ON TOP OF STATE A --
C           (DUAL-TOPOLOGY)
C           (ALSO RECORD THE CHARG ADDED)
C
         DO III=1,KFREEB(501)
            IB            = KFREEB(III)
            NFFAT         = NFFAT + 1      ! NFFAT EXPAND
            ATMNAM(NFFAT) = ATMNAMB(IB)
            ZANF  (NFFAT) = ZANFB  (IB)
            CORD(1,NFFAT) = CORDB(1,IB)
            CORD(2,NFFAT) = CORDB(2,IB)
            CORD(3,NFFAT) = CORDB(3,IB)
            VEL (1,NFFAT) = VELB (1,IB)
            VEL (2,NFFAT) = VELB (2,IB)
            VEL (3,NFFAT) = VELB (3,IB)
            ZMAS  (NFFAT) = ZMASB  (IB)
            ONEMAS(NFFAT) = ONEMASB(IB)
            CHARG (NFFAT) = CHARGB (IB)
            CHADDB        = CHARGB (IB) + CHADDB
            POL   (NFFAT) = POLB   (IB)
            SIG   (NFFAT) = SIGB   (IB)
            EPS   (NFFAT) = EPSB   (IB)
            SIG2  (NFFAT) = SIG2B  (IB)
            EPS2  (NFFAT) = EPS2B  (IB)
            CLPR(1,NFFAT) = CLPRB(1,IB)
            CLPR(2,NFFAT) = CLPRB(2,IB)
            CLPR(3,NFFAT) = CLPRB(3,IB)
            CLPR(4,NFFAT) = CLPRB(4,IB)
            ZLPR(1,NFFAT) = ZLPRB(1,IB)
            ZLPR(2,NFFAT) = ZLPRB(2,IB)
            ZLPR(3,NFFAT) = ZLPRB(3,IB)
            ZLPR(4,NFFAT) = ZLPRB(4,IB)
            NLPR  (NFFAT) = NLPRB  (IB)
            NTYPE (NFFAT) = NTYPEB (IB)
         ENDDO
C
C        -- ADD COVALENT TERMS OF STATE B ON TOP OF STATE A --
C           (DUAL-TOPOLOGY)
C
         DO IBOND=1,N2BOND
            IBADD = 0
            DO III=1,KFREEB(501)
               IB=KFREEB(III)
               IF(IPAIRB(1,IBOND).EQ.IB .OR.
     *            IPAIRB(2,IBOND).EQ.IB)
     *         IBADD = IBADD + 1
            ENDDO
            IF(IBADD.GT.0)THEN
               NBOND         = NBOND + 1     !  EXPANDING
               BOND0(NBOND)  = BOND0B(IBOND)
               FCBOND(NBOND) = FCBONDB(IBOND)
               IPAIR(1,NBOND)= LISTB2A(IPAIRB(1,IBOND))
               IPAIR(2,NBOND)= LISTB2A(IPAIRB(2,IBOND))
            END IF
         ENDDO
         DO IANGL=1,N2ANGL
            IBADD = 0
            DO III=1,KFREEB(501)
               IB=KFREEB(III)
               IF(KLISTB(1,IANGL).EQ.IB .OR.
     *            KLISTB(2,IANGL).EQ.IB .OR.
     *            KLISTB(3,IANGL).EQ.IB)
     *         IBADD = IBADD + 1
            ENDDO
            IF(IBADD.GT.0)THEN
               NANGL         = NANGL + 1
               ANGL0(NANGL)  = ANGL0B(IANGL)
               FCANGL(NANGL) = FCANGLB(IANGL)
               KLIST(1,NANGL)= LISTB2A(KLISTB(1,IANGL))
               KLIST(2,NANGL)= LISTB2A(KLISTB(2,IANGL))
               KLIST(3,NANGL)= LISTB2A(KLISTB(3,IANGL))
               FCSTBD(1,NANGL)= FCSTBDB(1,IANGL)
               FCSTBD(2,NANGL)= FCSTBDB(2,IANGL)
            END IF
         ENDDO
C        - MUST REDO KBLST -
         DO IANGL=1,NANGL
            K1 = KLIST(1,IANGL)
            K2 = KLIST(2,IANGL)
            K3 = KLIST(3,IANGL)
            DO IBOND=1,NBOND
               KK1 = IPAIR(1,IBOND)
               KK2 = IPAIR(2,IBOND)
               IF((KK1.EQ.K1.AND.KK2.EQ.K2).OR.
     *            (KK1.EQ.K2.AND.KK2.EQ.K1)) THEN
                  KBLST(1,IANGL) = IBOND
               END IF
               IF((KK1.EQ.K2.AND.KK2.EQ.K3).OR.
     *            (KK1.EQ.K3.AND.KK2.EQ.K2)) THEN
                  KBLST(2,IANGL) = IBOND
               END IF
            ENDDO
         ENDDO
         DO IDIHR=1,N2DIHR
            IBADD = 0
            DO III=1,KFREEB(501)
               IB=KFREEB(III)
               IF(LLISTB(1,IDIHR).EQ.IB .OR.
     *         LLISTB(2,IDIHR).EQ.IB .OR.
     *         LLISTB(3,IDIHR).EQ.IB .OR.
     *         LLISTB(4,IDIHR).EQ.IB)
     *         IBADD = IBADD + 1
            ENDDO
            IF(IBADD.GT.0)THEN
               NDIHR         = NDIHR + 1
               NNN(NDIHR)    = NNNB(IDIHR)
               GAMA(NDIHR)   = GAMAB(IDIHR)
               VROT(NDIHR)   = VROTB(IDIHR)
               LLIST(1,NDIHR)= LISTB2A(LLISTB(1,IDIHR))
               LLIST(2,NDIHR)= LISTB2A(LLISTB(2,IDIHR))
               LLIST(3,NDIHR)= LISTB2A(LLISTB(3,IDIHR))
               LLIST(4,NDIHR)= LISTB2A(LLISTB(4,IDIHR))
               FCDIHR(1,NDIHR)=FCDIHRB(1,IDIHR)
               FCDIHR(2,NDIHR)=FCDIHRB(2,IDIHR)
               FCDIHR(3,NDIHR)=FCDIHRB(3,IDIHR)
            END IF
         ENDDO
         DO IDIHB=1,N2DIHB
            IBADD = 0
            DO III=1,KFREEB(501)
               IB=KFREEB(III)
               IF(NLISTB(1,IDIHB).EQ.IB .OR.
     *         NLISTB(2,IDIHB).EQ.IB .OR.
     *         NLISTB(3,IDIHB).EQ.IB .OR.
     *         NLISTB(4,IDIHB).EQ.IB)
     *         IBADD = IBADD + 1
            ENDDO
            IF(IBADD.GT.0)THEN
               NDIHB         = NDIHB + 1
               DIHB0(NDIHB)  = DIHB0B(IDIHB)
               FCDIHB(NDIHB) = FCDIHBB(IDIHB)
               NLIST(1,NDIHB)= LISTB2A(NLISTB(1,IDIHB))
               NLIST(2,NDIHB)= LISTB2A(NLISTB(2,IDIHB))
               NLIST(3,NDIHB)= LISTB2A(NLISTB(3,IDIHB))
               NLIST(4,NDIHB)= LISTB2A(NLISTB(4,IDIHB))
            END IF
         ENDDO
         DO IWAGG=1,N2WAGG
            IBADD = 0
            DO III=1,KFREEB(501)
               IB=KFREEB(III)
               IF(MLISTB(1,IWAGG).EQ.IB .OR.
     *            MLISTB(2,IWAGG).EQ.IB .OR.
     *            MLISTB(3,IWAGG).EQ.IB .OR.
     *            MLISTB(4,IWAGG).EQ.IB)
     *         IBADD = IBADD + 1
            ENDDO
            IF(IBADD.GT.0)THEN
               NWAGG         = NWAGG + 1
               FCWAGG(NWAGG) = FCWAGGB(IWAGG)
               MLIST(1,NWAGG)= LISTB2A(MLISTB(1,IWAGG))
               MLIST(2,NWAGG)= LISTB2A(MLISTB(2,IWAGG))
               MLIST(3,NWAGG)= LISTB2A(MLISTB(3,IWAGG))
               MLIST(4,NWAGG)= LISTB2A(MLISTB(4,IWAGG))
            END IF
         ENDDO
C
C        -- SET UP BONDS BETWEEN A AND B ATOMS --
C           THESE ARE FAKE BONDS WITH ZERO LENGTH AND ENERGY,
C           BUT HELP AVOID CHARGE AND LJ INTERACTIONS
C           (RATTLE WILL IGNORE THESE FAKE BONDS)
C
         DO III=1,KFREEA(501)
            IA=KFREEA(III)
            DO IB=N1FFAT+1,NFFAT   ! THESE ARE EXTRA ATOMS FROM B
               NBOND = NBOND + 1
               BOND0(NBOND)  = ZERO
               FCBOND(NBOND) = ZERO
               IPAIR(1,NBOND)= IA  ! LOWER
               IPAIR(2,NBOND)= IB  ! HIGHER
            ENDDO
         ENDDO
      END IF
C
C
      IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
C
C        -- CHECK KFREEA, $FFDATA AND $FFDATB --
C
         IWRONG = ABS(N1FFAT-N2FFAT)
         DO I = 1, N1FFAT
            TEST = ABS(CORD(1,I) - CORDB(1,I)) +
     *             ABS(CORD(2,I) - CORDB(2,I)) +
     *             ABS(CORD(3,I) - CORDB(3,I)) 
            IF(TEST.GT.1.0D-4) THEN
               IWRONG = IWRONG + 1
            ELSE
               CORDB(1,I) = CORD(1,I)
               CORDB(2,I) = CORD(2,I)
               CORDB(3,I) = CORD(3,I)
            END IF
         ENDDO
         DO KFIX=1, NFIXMM
            I = IFIXMM(KFIX)
            TEST = ABS(CORD(1,I) - CORDB(1,I)) +
     *             ABS(CORD(2,I) - CORDB(2,I)) +
     *             ABS(CORD(3,I) - CORDB(3,I))
            IF(TEST.GT.1.0D-4) IWRONG = IWRONG - 1
         ENDDO
         DO I = 1, N1FFAT
            TEST = ABS(ZMAS  (I) - ZMASB  (I)) +
     *             ABS(CHARG (I) - CHARGB (I)) +
     *             ABS(POL   (I) - POLB   (I)) +
     *             ABS(SIG   (I) - SIGB   (I)) +
     *             ABS(EPS   (I) - EPSB   (I)) +
     *             ABS(SIG2  (I) - SIG2B  (I)) +
     *             ABS(EPS2  (I) - EPS2B  (I)) +
     *             ABS(CLPR(1,I) - CLPRB(1,I)) +
     *             ABS(CLPR(2,I) - CLPRB(2,I)) +
     *             ABS(CLPR(3,I) - CLPRB(3,I)) +
     *             ABS(CLPR(4,I) - CLPRB(4,I)) +
     *             ABS(ZLPR(1,I) - ZLPRB(1,I)) +
     *             ABS(ZLPR(2,I) - ZLPRB(2,I)) +
     *             ABS(ZLPR(3,I) - ZLPRB(3,I)) +
     *             ABS(ZLPR(4,I) - ZLPRB(4,I)) 
            IF(TEST.GT.1.0D-10) IWRONG = IWRONG + 1
         ENDDO
         DO KKK=1, KFREEA(501)
            I = KFREEA(KKK)
            TEST = ABS(ZMAS  (I) - ZMASB  (I)) +
     *             ABS(CHARG (I) - CHARGB (I)) +
     *             ABS(POL   (I) - POLB   (I)) +
     *             ABS(SIG   (I) - SIGB   (I)) +
     *             ABS(EPS   (I) - EPSB   (I)) +
     *             ABS(SIG2  (I) - SIG2B  (I)) +
     *             ABS(EPS2  (I) - EPS2B  (I)) +
     *             ABS(CLPR(1,I) - CLPRB(1,I)) +
     *             ABS(CLPR(2,I) - CLPRB(2,I)) +
     *             ABS(CLPR(3,I) - CLPRB(3,I)) +
     *             ABS(CLPR(4,I) - CLPRB(4,I)) +
     *             ABS(ZLPR(1,I) - ZLPRB(1,I)) +
     *             ABS(ZLPR(2,I) - ZLPRB(2,I)) +
     *             ABS(ZLPR(3,I) - ZLPRB(3,I)) +
     *             ABS(ZLPR(4,I) - ZLPRB(4,I))
            IF(TEST.GT.1.0D-10) IWRONG = IWRONG - 1
         ENDDO
         IF(IWRONG.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: ATOMS DO NOT MATCH FOR IFEPTOP=1 AND IFEPTYP=2.',
     *      'PLEASE CHECK $FFDATA, $FFDATB AND KFREEA.'
            CALL ABRT
         END IF
C
C        -- ESTABLISH 1-TO-1 LIST BETWEEN STATES A AND B --
C
         CALL VICLR(LISTB2A,1,N2FFAT)
         DO IB = 1, N2FFAT
            IA = IB
            LISTB2A(IB) = IA
         ENDDO
C
      END IF
C
C     -- IDENTIFY COVALENT TERMS ASSOCIATED WITH PMF CALCULATION --
C
      NBONDPMA = 0
      NANGLPMA = 0
      NDIHRPMA = 0
      NDIHBPMA = 0
      NWAGGPMA = 0
      NCMAPPMA = 0
      NBONDPMB = 0
      NANGLPMB = 0
      NDIHRPMB = 0
      NDIHBPMB = 0
      NWAGGPMB = 0
      NCMAPPMB = 0
      IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
         DO IBOND = 1, NBOND
            I1    = IPAIR(1,IBOND)
            I2    = IPAIR(2,IBOND)
            IYESA  = 0
            JYESA  = 0
            DO III=1,KFREEA(501)
               IA = KFREEA(III)
               IF(I1.EQ.IA) IYESA = 1
               IF(I2.EQ.IA) JYESA = 1
            ENDDO
            IF(IYESA.EQ.1.AND.JYESA.EQ.1) THEN
               NBONDPMA            = NBONDPMA + 1
               LSBONDPMA(NBONDPMA) = IBOND
            END IF
         ENDDO
         DO IANGL = 1, NANGL
            I1    = KLIST(1,IANGL)
            I2    = KLIST(2,IANGL)
            I3    = KLIST(3,IANGL)
            IYESA  = 0
            JYESA  = 0
            KYESA  = 0
            DO III=1,KFREEA(501)
               IA = KFREEA(III)
               IF(I1.EQ.IA) IYESA = 1
               IF(I2.EQ.IA) JYESA = 1
               IF(I3.EQ.IA) KYESA = 1
            ENDDO
            IF(IYESA.EQ.1.AND.JYESA.EQ.1.AND.KYESA.EQ.1) THEN
               NANGLPMA            = NANGLPMA + 1
               LSANGLPMA(NANGLPMA) = IANGL
            END IF
         ENDDO
         DO IDIHR = 1, NDIHR
            I1    = LLIST(1,IDIHR)
            I2    = LLIST(2,IDIHR)
            I3    = LLIST(3,IDIHR)
            I4    = LLIST(4,IDIHR)
            IYESA  = 0
            JYESA  = 0
            KYESA  = 0
            LYESA  = 0
            DO III=1,KFREEA(501)
               IA = KFREEA(III)
               IF(I1.EQ.IA) IYESA = 1
               IF(I2.EQ.IA) JYESA = 1
               IF(I3.EQ.IA) KYESA = 1
               IF(I4.EQ.IA) LYESA = 1
            ENDDO
            IF(IYESA.EQ.1.AND.JYESA.EQ.1.AND.
     *         KYESA.EQ.1.AND.LYESA.EQ.1) THEN
               NDIHRPMA            = NDIHRPMA + 1
               LSDIHRPMA(NDIHRPMA) = IDIHR
            END IF
         ENDDO
         DO IDIHB = 1, NDIHB
            I1    = NLIST(1,IDIHB)
            I2    = NLIST(2,IDIHB)
            I3    = NLIST(3,IDIHB)
            I4    = NLIST(4,IDIHB)
            IYESA  = 0
            JYESA  = 0
            KYESA  = 0
            LYESA  = 0
            DO III=1,KFREEA(501)
               IA = KFREEA(III)
               IF(I1.EQ.IA) IYESA = 1
               IF(I2.EQ.IA) JYESA = 1
               IF(I3.EQ.IA) KYESA = 1
               IF(I4.EQ.IA) LYESA = 1
            ENDDO
            IF(IYESA.EQ.1.AND.JYESA.EQ.1.AND.
     *         KYESA.EQ.1.AND.LYESA.EQ.1) THEN
               NDIHBPMA            = NDIHBPMA + 1
               LSDIHBPMA(NDIHBPMA) = IDIHB
            END IF
         ENDDO
         DO IWAGG = 1, NWAGG
            I1    = MLIST(1,IWAGG)
            I2    = MLIST(2,IWAGG)
            I3    = MLIST(3,IWAGG)
            I4    = MLIST(4,IWAGG)
            IYESA  = 0
            JYESA  = 0
            KYESA  = 0
            LYESA  = 0
            DO III=1,KFREEA(501)
               IA = KFREEA(III)
               IF(I1.EQ.IA) IYESA = 1
               IF(I2.EQ.IA) JYESA = 1
               IF(I3.EQ.IA) KYESA = 1
               IF(I4.EQ.IA) LYESA = 1
            ENDDO
            IF(IYESA.EQ.1.AND.JYESA.EQ.1.AND.
     *         KYESA.EQ.1.AND.LYESA.EQ.1) THEN
               NWAGGPMA            = NWAGGPMA + 1
               LSWAGGPMA(NWAGGPMA) = IWAGG
            END IF
         ENDDO
         DO ICMAP = 1, NCMAP
            I1    = MAPLST(1,ICMAP)
            I2    = MAPLST(2,ICMAP)
            I3    = MAPLST(3,ICMAP)
            I4    = MAPLST(4,ICMAP)
            I5    = MAPLST(5,ICMAP)
            I6    = MAPLST(6,ICMAP)
            IYESA  = 0
            JYESA  = 0
            KYESA  = 0
            LYESA  = 0
            MYESA  = 0
            NYESA  = 0
            DO III=1,KFREEA(501)
               IA = KFREEA(III)
               IF(I1.EQ.IA) IYESA = 1
               IF(I2.EQ.IA) JYESA = 1
               IF(I3.EQ.IA) KYESA = 1
               IF(I4.EQ.IA) LYESA = 1
               IF(I5.EQ.IA) MYESA = 1
               IF(I6.EQ.IA) NYESA = 1
            ENDDO
            IF(IYESA.EQ.1.AND.JYESA.EQ.1.AND.
     *         KYESA.EQ.1.AND.LYESA.EQ.1.AND.
     *         MYESA.EQ.1.AND.NYESA.EQ.1) THEN
               NCMAPPMA            = NCMAPPMA + 1
               LSCMAPPMA(NCMAPPMA) = ICMAP
            END IF
         ENDDO
         NBONDPMB = NBONDPMA
         NANGLPMB = NANGLPMA
         NDIHRPMB = NDIHRPMA
         NDIHBPMB = NDIHBPMA
         NWAGGPMB = NWAGGPMA
         NCMAPPMB = NCMAPPMA
         CALL ICOPY(NBONDPMA,LSBONDPMA,1,LSBONDPMB,1)
         CALL ICOPY(NANGLPMA,LSANGLPMA,1,LSANGLPMB,1)
         CALL ICOPY(NDIHRPMA,LSDIHRPMA,1,LSDIHRPMB,1)
         CALL ICOPY(NDIHBPMA,LSDIHBPMA,1,LSDIHBPMB,1)
         CALL ICOPY(NWAGGPMA,LSWAGGPMA,1,LSWAGGPMB,1)
         CALL ICOPY(NCMAPPMA,LSCMAPPMA,1,LSCMAPPMB,1)
      END IF
C
C     -- APPLY ICOMBIN FUNCTION --
C
      IF(ICOMBIN.GT.0) THEN
         CALL VICLR(LISTB2A,1,N2FFAT)
         IF(ICOMBIN.EQ.1.OR.ICOMBIN.EQ.2) THEN
C        -- ADD ATOMS OF STATE B ON TOP OF STATE A --
C
         IF(ICOMBIN.EQ.2) THEN
            XMAX = -1.0D+30
            YMAX = -1.0D+30
            ZMAX = -1.0D+30
            XMIN =  1.0D+30
            YMIN =  1.0D+30
            ZMIN =  1.0D+30
            DO IA = 1,NFFAT
               XMAX = MAX(XMAX,CORD(1,IA))
               YMAX = MAX(YMAX,CORD(2,IA))
               ZMAX = MAX(ZMAX,CORD(3,IA))
               XMIN = MIN(XMIN,CORD(1,IA))
               YMIN = MIN(YMIN,CORD(2,IA))
               ZMIN = MIN(ZMIN,CORD(3,IA))
            ENDDO
            CENTXA= (XMAX+XMIN)*PT5
            CENTYA= (YMAX+YMIN)*PT5
            CENTZA= (ZMAX+ZMIN)*PT5
            XMAX = -1.0D+30
            YMAX = -1.0D+30
            ZMAX = -1.0D+30
            XMIN =  1.0D+30
            YMIN =  1.0D+30
            ZMIN =  1.0D+30
            DO IB = 1,N2FFAT
               XMAX = MAX(XMAX,CORDB(1,IB))
               YMAX = MAX(YMAX,CORDB(2,IB))
               ZMAX = MAX(ZMAX,CORDB(3,IB))
               XMIN = MIN(XMIN,CORDB(1,IB))
               YMIN = MIN(YMIN,CORDB(2,IB))
               ZMIN = MIN(ZMIN,CORDB(3,IB))
            ENDDO
            CENTXB= (XMAX+XMIN)*PT5
            CENTYB= (YMAX+YMIN)*PT5
            CENTZB= (ZMAX+ZMIN)*PT5
C
            DIFFX = CENTXA - CENTXB
            DIFFY = CENTYA - CENTYB
            DIFFZ = CENTZA - CENTZB
            DO IB=1, N2FFAT
               CORDB(1,IB) = CORDB(1,IB) + DIFFX
               CORDB(2,IB) = CORDB(2,IB) + DIFFY
               CORDB(3,IB) = CORDB(3,IB) + DIFFZ
            ENDDO
         END IF
C
         DO IB=1,N2FFAT
            NFFAT         = NFFAT + 1
            LISTB2A(IB)   = NFFAT
            ATMNAM(NFFAT) = ATMNAMB(IB)
            ZANF  (NFFAT) = ZANFB  (IB)
            CORD(1,NFFAT) = CORDB(1,IB)
            CORD(2,NFFAT) = CORDB(2,IB)
            CORD(3,NFFAT) = CORDB(3,IB)
            ZMAS  (NFFAT) = ZMASB  (IB)
            ONEMAS(NFFAT) = ONEMASB(IB)
            CHARG (NFFAT) = CHARGB (IB)
            POL   (NFFAT) = POLB   (IB)
            SIG   (NFFAT) = SIGB   (IB)
            EPS   (NFFAT) = EPSB   (IB)
            SIG2  (NFFAT) = SIG2B  (IB)
            EPS2  (NFFAT) = EPS2B  (IB)
            CLPR(1,NFFAT) = CLPRB(1,IB)
            CLPR(2,NFFAT) = CLPRB(2,IB)
            CLPR(3,NFFAT) = CLPRB(3,IB)
            CLPR(4,NFFAT) = CLPRB(4,IB)
            ZLPR(1,NFFAT) = ZLPRB(1,IB)
            ZLPR(2,NFFAT) = ZLPRB(2,IB)
            ZLPR(3,NFFAT) = ZLPRB(3,IB)
            ZLPR(4,NFFAT) = ZLPRB(4,IB)
            NLPR  (NFFAT) = NLPRB  (IB)
            NTYPE (NFFAT) = NTYPEB (IB)
         ENDDO
         IF(NFFAT.GE.MXFFAT) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'NFFAT EXCEEDED MXFFAT, PLEASE INCREASE MXFFAT.'
            CALL ABRT
         END IF
C        -- ADD COVALENT TERMS OF STATE B ON TOP OF STATE A --
         DO IBOND=1,N2BOND
            NBOND         = NBOND + 1
            BOND0(NBOND)  = BOND0B(IBOND)
            FCBOND(NBOND) = FCBONDB(IBOND)
            IPAIR(1,NBOND)= LISTB2A(IPAIRB(1,IBOND))
            IPAIR(2,NBOND)= LISTB2A(IPAIRB(2,IBOND))
         ENDDO
         IF(NBOND.GE.MXBOND) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'NBOND EXCEEDED MXBOND, PLEASE INCREASE MXBOND.'
            CALL ABRT
         END IF
         DO IANGL=1,N2ANGL
            NANGL         = NANGL + 1
            ANGL0(NANGL)  = ANGL0B(IANGL)
            FCANGL(NANGL) = FCANGLB(IANGL)
            KLIST(1,NANGL)= LISTB2A(KLISTB(1,IANGL))
            KLIST(2,NANGL)= LISTB2A(KLISTB(2,IANGL))
            KLIST(3,NANGL)= LISTB2A(KLISTB(3,IANGL))
            FCSTBD(1,NANGL)= FCSTBDB(1,IANGL)
            FCSTBD(2,NANGL)= FCSTBDB(2,IANGL)
         ENDDO
C        - MUST REDO KBLST -
         DO IANGL=1,NANGL
            K1 = KLIST(1,IANGL)
            K2 = KLIST(2,IANGL)
            K3 = KLIST(3,IANGL)
            DO IBOND=1,NBOND
               KK1 = IPAIR(1,IBOND)
               KK2 = IPAIR(2,IBOND)
               IF((KK1.EQ.K1.AND.KK2.EQ.K2).OR.
     *            (KK1.EQ.K2.AND.KK2.EQ.K1)) THEN
                  KBLST(1,IANGL) = IBOND
               END IF
               IF((KK1.EQ.K2.AND.KK2.EQ.K3).OR.
     *            (KK1.EQ.K3.AND.KK2.EQ.K2)) THEN
                  KBLST(2,IANGL) = IBOND
               END IF
            ENDDO
         ENDDO
         IF(NANGL.GE.MXANGL) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'NANGL EXCEEDED MXANGL, PLEASE INCREASE MXANGL.'
            CALL ABRT
         END IF
         DO IDIHR=1,N2DIHR
            NDIHR         = NDIHR + 1
            NNN(NDIHR)    = NNNB(IDIHR)
            GAMA(NDIHR)   = GAMAB(IDIHR)
            VROT(NDIHR)   = VROTB(IDIHR)
            LLIST(1,NDIHR)= LISTB2A(LLISTB(1,IDIHR))
            LLIST(2,NDIHR)= LISTB2A(LLISTB(2,IDIHR))
            LLIST(3,NDIHR)= LISTB2A(LLISTB(3,IDIHR))
            LLIST(4,NDIHR)= LISTB2A(LLISTB(4,IDIHR))
            FCDIHR(1,NDIHR)=FCDIHRB(1,IDIHR)
            FCDIHR(2,NDIHR)=FCDIHRB(2,IDIHR)
            FCDIHR(3,NDIHR)=FCDIHRB(3,IDIHR)
         ENDDO
         IF(NDIHR.GE.MXDIHR) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'NDIHR EXCEEDED MXDIHR, PLEASE INCREASE MXDIHR.'
            CALL ABRT
         END IF
         DO IDIHB=1,N2DIHB
            NDIHB         = NDIHB + 1
            DIHB0(NDIHB)  = DIHB0B(IDIHB)
            FCDIHB(NDIHB) = FCDIHBB(IDIHB)
            NLIST(1,NDIHB)= LISTB2A(NLISTB(1,IDIHB))
            NLIST(2,NDIHB)= LISTB2A(NLISTB(2,IDIHB))
            NLIST(3,NDIHB)= LISTB2A(NLISTB(3,IDIHB))
            NLIST(4,NDIHB)= LISTB2A(NLISTB(4,IDIHB))
         ENDDO
         IF(NDIHB.GE.MXDIHB) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'NDIHB EXCEEDED MXDIHB, PLEASE INCREASE MXDIHB.'
            CALL ABRT
         END IF
         DO IWAGG=1,N2WAGG
            NWAGG         = NWAGG + 1
            FCWAGG(NWAGG) = FCWAGGB(IWAGG)
            MLIST(1,NWAGG)= LISTB2A(MLISTB(1,IWAGG))
            MLIST(2,NWAGG)= LISTB2A(MLISTB(2,IWAGG))
            MLIST(3,NWAGG)= LISTB2A(MLISTB(3,IWAGG))
            MLIST(4,NWAGG)= LISTB2A(MLISTB(4,IWAGG))
         ENDDO
         IF(NWAGG.GE.MXWAGG) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'NWAGG EXCEEDED MXWAGG, PLEASE INCREASE MXWAGG.'
            CALL ABRT
         END IF
         DO ICMAP=1,N2CMAP
            NCMAP = NCMAP + 1
            MAPLST(1,NCMAP) = LISTB2A(MAPLSTB(1,ICMAP))
            MAPLST(2,NCMAP) = LISTB2A(MAPLSTB(2,ICMAP))
            MAPLST(3,NCMAP) = LISTB2A(MAPLSTB(3,ICMAP))
            MAPLST(4,NCMAP) = LISTB2A(MAPLSTB(4,ICMAP))
            MAPLST(5,NCMAP) = LISTB2A(MAPLSTB(5,ICMAP))
            MAPLST(6,NCMAP) = MAPLSTB(6,ICMAP)
         ENDDO
         IF(NCMAP.GE.MXCMAP) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'NCMAP EXCEEDED MXCMAP, PLEASE INCREASE MXCMAP.'
            CALL ABRT
         END IF
         END IF
C
         IF(ICOMBIN.EQ.3) THEN
C
            DO II =1, 2
               DIFF = ABS(CORD(1,MPAIRA(II)) - CORDB(1,MPAIRB(II))) +
     *                ABS(CORD(2,MPAIRA(II)) - CORDB(2,MPAIRB(II))) +
     *                ABS(CORD(3,MPAIRA(II)) - CORDB(3,MPAIRB(II)))
               IF(DIFF.GE.0.01D+00) THEN
                  IF(MASWRK) WRITE(IW,'(A,A)')
     *            ' ERROR: CARTESIAN COORDINATES OF THE ATOMS',
     *            ' SPECIFIED BY MATCHAB DO NOT MATCH.'
                  IF(MASWRK) WRITE(IW,*)' '
                  CALL ABRT
               END IF
            ENDDO
C
            CALL VICLR(LISTAB,1,NFFAT+N2FFAT+1)
C
            DO IA=1, NFFAT
               DO IB=1, N2FFAT
                  DIFF = ABS(CORD(1,IA)-CORDB(1,IB))+
     *                   ABS(CORD(2,IA)-CORDB(2,IB))+
     *                   ABS(CORD(3,IA)-CORDB(3,IB))
                  IF(DIFF.LT.0.01D+00) THEN
                     LISTAB(IA) = IB
                     LISTAB(NFFAT+IB) = IA
                     LISTAB(NFFAT+N2FFAT+1) = LISTAB(NFFAT+N2FFAT+1)+1
                  END IF
               ENDDO
            ENDDO
C
            ZMAS(MPAIRA(2)) = -1.0D+00
 250        CONTINUE
            ICOUNT = 0
            DO IBOND=1, NBOND
               IFFAT = IPAIR(1,IBOND)
               JFFAT = IPAIR(2,IBOND)
               IF(ZMAS(IFFAT).EQ.-1.0D+00.AND.
     *            ZMAS(JFFAT).NE.-1.0D+00.AND.
     *            JFFAT.NE.MPAIRA(1)          ) THEN
                  ZMAS(JFFAT) = -1.0D+00
                  ICOUNT = ICOUNT + 1
               END IF
               IF(ZMAS(JFFAT).EQ.-1.0D+00.AND.
     *            ZMAS(IFFAT).NE.-1.0D+00.AND.
     *            IFFAT.NE.MPAIRA(1)          ) THEN
                  ZMAS(IFFAT) = -1.0D+00
                  ICOUNT = ICOUNT + 1
               END IF
            ENDDO
            IF(ICOUNT.NE.0) GOTO 250
C
            NFFATSV = NFFAT          
            KFFAT = 0
            TDELCHA = 0.0D+00
            KCOUNT  = 0
            CALL VICLR(NORDERA,1,NFFAT)
            DO IFFAT=1, NFFAT
               IF(ZMAS(IFFAT).GT.-1.0D+00) THEN
                  KFFAT           = KFFAT + 1
                  NORDERA(IFFAT)   = KFFAT
                  ATMNAM(KFFAT)   = ATMNAM(IFFAT)
                  ZANF  (KFFAT)   = ZANF  (IFFAT)
                  ZMAS  (KFFAT)   = ZMAS  (IFFAT)
                  ONEMAS(KFFAT)   = ONEMAS(IFFAT)
                  CHARG (KFFAT)   = CHARG (IFFAT)
                  POL   (KFFAT)   = POL   (IFFAT)
                  SIG   (KFFAT)   = SIG   (IFFAT)
                  EPS   (KFFAT)   = EPS   (IFFAT)
                  SIG2  (KFFAT)   = SIG2  (IFFAT)
                  EPS2  (KFFAT)   = EPS2  (IFFAT)
                  CORD  (1,KFFAT) = CORD  (1,IFFAT)
                  CORD  (2,KFFAT) = CORD  (2,IFFAT)
                  CORD  (3,KFFAT) = CORD  (3,IFFAT)
                  VEL   (1,KFFAT) = VEL   (1,IFFAT)
                  VEL   (2,KFFAT) = VEL   (2,IFFAT)
                  VEL   (3,KFFAT) = VEL   (3,IFFAT)
                  CLPR  (1,KFFAT) = CLPR  (1,IFFAT)
                  CLPR  (2,KFFAT) = CLPR  (2,IFFAT)
                  CLPR  (3,KFFAT) = CLPR  (3,IFFAT)
                  CLPR  (4,KFFAT) = CLPR  (4,IFFAT)
                  ZLPR  (1,KFFAT) = ZLPR  (1,IFFAT)
                  ZLPR  (2,KFFAT) = ZLPR  (2,IFFAT)
                  ZLPR  (3,KFFAT) = ZLPR  (3,IFFAT)
                  ZLPR  (4,KFFAT) = ZLPR  (4,IFFAT)
                  NLPR  (KFFAT)   = NLPR  (IFFAT)
                  NTYPE (KFFAT)   = NTYPE (IFFAT)
               ELSE
                  KCOUNT  = KCOUNT  + 1
                  TDELCHA = TDELCHA + CHARG(IFFAT)                  
               END IF
            ENDDO
            NFFAT = KFFAT
            IF(MASWRK) WRITE(IW,'(1X,I6,1X,A)')KCOUNT,
     *         'ATOMS ARE DELETED IN $FFDATA WHEN ICOMBIN.EQ.3'
C
            ZMASB(MPAIRB(1)) = -1.0D+00
 260        CONTINUE
            ICOUNT = 0
            DO IBOND=1, N2BOND
               IFFAT = IPAIRB(1,IBOND)
               JFFAT = IPAIRB(2,IBOND)
               IF(ZMASB(IFFAT).EQ.-1.0D+00.AND.
     *            ZMASB(JFFAT).NE.-1.0D+00.AND.
     *            JFFAT.NE.MPAIRB(2)           ) THEN
                  ZMASB(JFFAT) = -1.0D+00
                  ICOUNT = ICOUNT + 1
               END IF
               IF(ZMASB(JFFAT).EQ.-1.0D+00.AND.
     *            ZMASB(IFFAT).NE.-1.0D+00.AND.
     *            IFFAT.NE.MPAIRB(2)           ) THEN
                  ZMASB(IFFAT) = -1.0D+00
                  ICOUNT = ICOUNT + 1
               END IF
            ENDDO
            IF(ICOUNT.NE.0) GOTO 260
C
            KFFAT = 0
            TDELCHB = 0.0D+00
            KCOUNT  = 0
            CALL VICLR(NORDERB,1,N2FFAT)
            DO IFFAT=1, N2FFAT
               IF(ZMASB(IFFAT).GT.-1.0D+00) THEN
                  KFFAT           = KFFAT + 1
                  NORDERB(IFFAT)  = KFFAT
                  ATMNAMB(KFFAT)   = ATMNAMB(IFFAT)
                  ZANFB  (KFFAT)   = ZANFB  (IFFAT)
                  ZMASB  (KFFAT)   = ZMASB  (IFFAT)
                  ONEMASB(KFFAT)   = ONEMASB(IFFAT)
                  CHARGB (KFFAT)   = CHARGB (IFFAT)
                  POLB   (KFFAT)   = POLB   (IFFAT)
                  SIGB   (KFFAT)   = SIGB   (IFFAT)
                  EPSB   (KFFAT)   = EPSB   (IFFAT)
                  SIG2B  (KFFAT)   = SIG2B  (IFFAT)
                  EPS2B  (KFFAT)   = EPS2B  (IFFAT)
                  CORDB  (1,KFFAT) = CORDB  (1,IFFAT)
                  CORDB  (2,KFFAT) = CORDB  (2,IFFAT)
                  CORDB  (3,KFFAT) = CORDB  (3,IFFAT)
                  VELB   (1,KFFAT) = VELB   (1,IFFAT)
                  VELB   (2,KFFAT) = VELB   (2,IFFAT)
                  VELB   (3,KFFAT) = VELB   (3,IFFAT)
                  CLPRB  (1,KFFAT) = CLPRB  (1,IFFAT)
                  CLPRB  (2,KFFAT) = CLPRB  (2,IFFAT)
                  CLPRB  (3,KFFAT) = CLPRB  (3,IFFAT)
                  CLPRB  (4,KFFAT) = CLPRB  (4,IFFAT)
                  ZLPRB  (1,KFFAT) = ZLPRB  (1,IFFAT)
                  ZLPRB  (2,KFFAT) = ZLPRB  (2,IFFAT)
                  ZLPRB  (3,KFFAT) = ZLPRB  (3,IFFAT)
                  ZLPRB  (4,KFFAT) = ZLPRB  (4,IFFAT)
                  NLPRB  (KFFAT)   = NLPRB  (IFFAT)
                  NTYPEB (KFFAT)   = NTYPEB (IFFAT)
               ELSE
                  KCOUNT  = KCOUNT  + 1
                  TDELCHB = TDELCHB + CHARGB(IFFAT)
               END IF
            ENDDO
            N2FFAT = KFFAT
            IF(MASWRK) WRITE(IW,'(1X,I6,1X,A)')KCOUNT,
     *         'ATOMS ARE DELETED IN $FFDATB WHEN ICOMBIN.EQ.3'
C
C           -- PUT THE ODD CHARGE AT BOUNDARY ATOMS 
C              BETWEEN $FFDATA AND $FFDATB --
            DELCHAB = TDELCHA + TDELCHB - DBLE(NINT(TDELCHA+TDELCHB))
            CHARG(NORDERA(MPAIRA(1)))   = CHARG(NORDERA(MPAIRA(1))) +
     *                                    DELCHAB*PT5
            CHARGB(NORDERB(MPAIRB(2))) = CHARGB(NORDERB(MPAIRB(2))) +
     *                                    DELCHAB*PT5
            DO IB=1,N2FFAT
               NFFAT         = NFFAT + 1
               LISTB2A(IB)   = NFFAT
               ATMNAM(NFFAT) = ATMNAMB(IB)
               ZANF  (NFFAT) = ZANFB  (IB)
               CORD(1,NFFAT) = CORDB(1,IB)
               CORD(2,NFFAT) = CORDB(2,IB)
               CORD(3,NFFAT) = CORDB(3,IB)
               ZMAS  (NFFAT) = ZMASB  (IB)
               ONEMAS(NFFAT) = ONEMASB(IB)
               CHARG (NFFAT) = CHARGB (IB)
               POL   (NFFAT) = POLB   (IB)
               SIG   (NFFAT) = SIGB   (IB)
               EPS   (NFFAT) = EPSB   (IB)
               SIG2  (NFFAT) = SIG2B  (IB)
               EPS2  (NFFAT) = EPS2B  (IB)
               CLPR(1,NFFAT) = CLPRB(1,IB)
               CLPR(2,NFFAT) = CLPRB(2,IB)
               CLPR(3,NFFAT) = CLPRB(3,IB)
               CLPR(4,NFFAT) = CLPRB(4,IB)
               ZLPR(1,NFFAT) = ZLPRB(1,IB)
               ZLPR(2,NFFAT) = ZLPRB(2,IB)
               ZLPR(3,NFFAT) = ZLPRB(3,IB)
               ZLPR(4,NFFAT) = ZLPRB(4,IB)
               NLPR  (NFFAT) = NLPRB  (IB)
               NTYPE (NFFAT) = NTYPEB (IB)
            ENDDO
            IF(NFFAT.GE.MXFFAT) THEN
               IF(MASWRK) WRITE(IW,'(1X,A/)')
     *         'NFFAT EXCEEDED MXFFAT, PLEASE INCREASE MXFFAT.'
               CALL ABRT
            END IF
C
            KBOND = 0
            DO IBOND =1, NBOND
               II1 = IPAIR(1,IBOND)
               II2 = IPAIR(2,IBOND)
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0) THEN
                  KBOND = KBOND + 1
                  IPAIR(1,KBOND) = NORDERA(II1)
                  IPAIR(2,KBOND) = NORDERA(II2)
                  BOND0 (KBOND)  = BOND0 (IBOND)
                  FCBOND(KBOND)  = FCBOND(IBOND)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).LE.0.AND.
     *            LISTAB(II2).GT.0                           ) THEN
                  KBOND = KBOND + 1
                  IPAIR(1,KBOND) = NORDERA(II1)
                  IPAIR(2,KBOND) = LISTB2A(NORDERB(LISTAB(II2)))
                  BOND0 (KBOND)  = BOND0 (IBOND)
                  FCBOND(KBOND)  = FCBOND(IBOND)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).GT.0.AND.
     *            LISTAB(II1) .GT.0                          ) THEN
                  KBOND = KBOND + 1
                  IPAIR(1,KBOND) = LISTB2A(NORDERB(LISTAB(II1)))
                  IPAIR(2,KBOND) = NORDERA(II2)
                  BOND0 (KBOND)  = BOND0 (IBOND)
                  FCBOND(KBOND)  = FCBOND(IBOND)
               END IF
            ENDDO
            NBOND = KBOND
C
            KBOND = 0
            DO IBOND =1, N2BOND
               II1 = IPAIRB(1,IBOND)
               II2 = IPAIRB(2,IBOND)
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0) THEN
                  KBOND = KBOND + 1
                  IPAIRB(1,KBOND) = LISTB2A(NORDERB(II1))
                  IPAIRB(2,KBOND) = LISTB2A(NORDERB(II2))
                  BOND0B (KBOND)  = BOND0B (IBOND)
                  FCBONDB(KBOND)  = FCBONDB(IBOND)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).LE.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0                   ) THEN
                  KBOND = KBOND + 1
                  IPAIRB(1,KBOND) = LISTB2A(NORDERB(II1))
                  IPAIRB(2,KBOND) = NORDERA(LISTAB(NFFATSV+II2))
                  BOND0B (KBOND)  = BOND0B (IBOND)
                  FCBONDB(KBOND)  = FCBONDB(IBOND)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).GT.0.AND.
     *            LISTAB(NFFATSV+II1) .GT.0                  ) THEN
                  KBOND = KBOND + 1
                  IPAIRB(1,KBOND) = NORDERA(LISTAB(NFFATSV+II1))
                  IPAIRB(2,KBOND) = LISTB2A(NORDERB(II2))
                  BOND0B (KBOND)  = BOND0B (IBOND)
                  FCBONDB(KBOND)  = FCBONDB(IBOND)
               END IF
            ENDDO
            N2BOND = KBOND
C
            KBOND = NBOND
            DO IBOND =1, N2BOND
               II1 = IPAIRB(1,IBOND)
               II2 = IPAIRB(2,IBOND)
               DO JBOND =1, NBOND
                  JJ1 = IPAIR(1,JBOND)
                  JJ2 = IPAIR(2,JBOND)
                  IF((II1.EQ.JJ1.AND.II2.EQ.JJ2).OR.
     *               (II1.EQ.JJ2.AND.II2.EQ.JJ1)   ) THEN
                     BOND0 (JBOND) = PT5*(BOND0 (JBOND)+BOND0B (IBOND))
                     FCBOND(JBOND) = PT5*(FCBOND(JBOND)+FCBONDB(IBOND))
                     GOTO 270
                  END IF
               ENDDO
               KBOND = KBOND + 1
               IPAIR(1,KBOND) = II1
               IPAIR(2,KBOND) = II2
               BOND0 (KBOND)  = BOND0B (IBOND)
               FCBOND(KBOND)  = FCBONDB(IBOND)
 270           CONTINUE
            ENDDO
            NBOND = KBOND
            IF(NBOND.GE.MXBOND) THEN
               IF(MASWRK) WRITE(IW,'(1X,A/)')
     *         'NBOND EXCEEDED MXBOND, PLEASE INCREASE MXBOND.'
               CALL ABRT
            END IF
C
            DO IBOND = 1, NBOND
               IF(IPAIR(1,IBOND).LE.0 .OR.
     *            IPAIR(2,IBOND).LE.0     ) THEN
                  IF(MASWRK)WRITE(IW,'(2I7,/1X,A)')
     *               IPAIR(1,IBOND),IPAIR(2,IBOND),
     *               'ERROR: BOND ATM1 OR ATM2 MUST BE > 0'
                  CALL ABRT
               END IF
               IF(IPAIR(2,IBOND).EQ.IPAIR(1,IBOND)) THEN
                  IF(MASWRK)WRITE(IW,'(2I7,/1X,A)')
     *               IPAIR(1,IBOND),IPAIR(2,IBOND),
     *               'ERROR: BOND ATM1, ATM2 MUST BE DIFFERENT'
                  CALL ABRT
               END IF
               IF(IPAIR(2,IBOND).LT.IPAIR(1,IBOND)) THEN
                  IZ5G9          = IPAIR(1,IBOND)
                  IPAIR(1,IBOND) = IPAIR(2,IBOND)
                  IPAIR(2,IBOND) = IZ5G9
               END IF
            ENDDO
C
            KANGL = 0
            DO IANGL =1, NANGL
               II1 = KLIST(1,IANGL)
               II2 = KLIST(2,IANGL)
               II3 = KLIST(3,IANGL)
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).GT.0                          ) THEN
                  KANGL = KANGL + 1
                  KLIST(1,KANGL) = NORDERA(II1)
                  KLIST(2,KANGL) = NORDERA(II2)
                  KLIST(3,KANGL) = NORDERA(II3)
                  FCANGL (KANGL) = FCANGL(IANGL)
                  ANGL0  (KANGL) = ANGL0 (IANGL)
                  FCSTBD(1,KANGL)= FCSTBD(1,IANGL)
                  FCSTBD(2,KANGL)= FCSTBD(2,IANGL)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).LE.0.AND.LISTAB (II3).GT.0    ) THEN
                  KANGL = KANGL + 1
                  KLIST(1,KANGL) = NORDERA(II1)
                  KLIST(2,KANGL) = NORDERA(II2)
                  KLIST(3,KANGL) = LISTB2A(NORDERB(LISTAB(II3)))
                  FCANGL (KANGL) = FCANGL(IANGL)
                  ANGL0  (KANGL) = ANGL0 (IANGL)
                  FCSTBD(1,KANGL)= FCSTBD(1,IANGL)
                  FCSTBD(2,KANGL)= FCSTBD(2,IANGL)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).GT.0.AND.LISTAB (II2).GT.0    ) THEN
                  KANGL = KANGL + 1
                  KLIST(1,KANGL) = NORDERA(II1)
                  KLIST(2,KANGL) = LISTB2A(NORDERB(LISTAB(II2)))
                  KLIST(3,KANGL) = NORDERA(II3)
                  FCANGL (KANGL) = FCANGL(IANGL)
                  ANGL0  (KANGL) = ANGL0 (IANGL)
                  FCSTBD(1,KANGL)= FCSTBD(1,IANGL)
                  FCSTBD(2,KANGL)= FCSTBD(2,IANGL)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).GT.0.AND.LISTAB (II1).GT.0    ) THEN
                  KANGL = KANGL + 1
                  KLIST(1,KANGL) = LISTB2A(NORDERB(LISTAB(II1)))
                  KLIST(2,KANGL) = NORDERA(II2)
                  KLIST(3,KANGL) = NORDERA(II3)
                  FCANGL (KANGL) = FCANGL(IANGL)
                  ANGL0  (KANGL) = ANGL0 (IANGL)
                  FCSTBD(1,KANGL)= FCSTBD(1,IANGL)
                  FCSTBD(2,KANGL)= FCSTBD(2,IANGL)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).LE.0.AND.LISTAB (II2).GT.0.AND.
     *            LISTAB(II3).GT.0                           ) THEN
                  KANGL = KANGL + 1
                  KLIST(1,KANGL) = NORDERA(II1)
                  KLIST(2,KANGL) = LISTB2A(NORDERB(LISTAB(II2)))
                  KLIST(3,KANGL) = LISTB2A(NORDERB(LISTAB(II3)))
                  FCANGL (KANGL) = FCANGL(IANGL)
                  ANGL0  (KANGL) = ANGL0 (IANGL)
                  FCSTBD(1,KANGL)= FCSTBD(1,IANGL)
                  FCSTBD(2,KANGL)= FCSTBD(2,IANGL)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).GT.0.AND.LISTAB (II1).GT.0.AND.
     *            LISTAB(II2).GT.0                           ) THEN
                  KANGL = KANGL + 1
                  KLIST(1,KANGL) = LISTB2A(NORDERB(LISTAB(II1)))
                  KLIST(2,KANGL) = LISTB2A(NORDERB(LISTAB(II2)))
                  KLIST(3,KANGL) = NORDERA(II3)
                  FCANGL (KANGL) = FCANGL(IANGL)
                  ANGL0  (KANGL) = ANGL0 (IANGL)
                  FCSTBD(1,KANGL)= FCSTBD(1,IANGL)
                  FCSTBD(2,KANGL)= FCSTBD(2,IANGL)
               END IF
            ENDDO
            NANGL = KANGL
C
            KANGL = 0
            DO IANGL =1, N2ANGL
               II1 = KLISTB(1,IANGL)
               II2 = KLISTB(2,IANGL)
               II3 = KLISTB(3,IANGL)
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).GT.0                          ) THEN
                  KANGL = KANGL + 1
                  KLISTB(1,KANGL) = LISTB2A(NORDERB(II1))
                  KLISTB(2,KANGL) = LISTB2A(NORDERB(II2))
                  KLISTB(3,KANGL) = LISTB2A(NORDERB(II3))
                  FCANGLB (KANGL) = FCANGLB(IANGL)
                  ANGL0B  (KANGL) = ANGL0B (IANGL)
                  FCSTBDB(1,KANGL)= FCSTBDB(1,IANGL)
                  FCSTBDB(2,KANGL)= FCSTBDB(2,IANGL)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).LE.0.AND.LISTAB(NFFATSV+II3).GT.0) THEN
                  KANGL = KANGL + 1
                  KLISTB(1,KANGL) = LISTB2A(NORDERB(II1))
                  KLISTB(2,KANGL) = LISTB2A(NORDERB(II2))
                  KLISTB(3,KANGL) = NORDERA(LISTAB(NFFATSV+II3))
                  FCANGLB (KANGL) = FCANGLB(IANGL)
                  ANGL0B  (KANGL) = ANGL0B (IANGL)
                  FCSTBDB(1,KANGL)= FCSTBDB(1,IANGL)
                  FCSTBDB(2,KANGL)= FCSTBDB(2,IANGL)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).GT.0.AND.LISTAB(NFFATSV+II2).GT.0) THEN
                  KANGL = KANGL + 1
                  KLISTB(1,KANGL) = LISTB2A(NORDERB(II1))
                  KLISTB(2,KANGL) = NORDERA(LISTAB(NFFATSV+II2))
                  KLISTB(3,KANGL) = LISTB2A(NORDERB(II3))
                  FCANGLB (KANGL) = FCANGLB(IANGL)
                  ANGL0B  (KANGL) = ANGL0B (IANGL)
                  FCSTBDB(1,KANGL)= FCSTBDB(1,IANGL)
                  FCSTBDB(2,KANGL)= FCSTBDB(2,IANGL)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).GT.0.AND.LISTAB(NFFATSV+II1).GT.0) THEN
                  KANGL = KANGL + 1
                  KLISTB(1,KANGL) = NORDERA(LISTAB(NFFATSV+II1))
                  KLISTB(2,KANGL) = LISTB2A(NORDERB(II2))
                  KLISTB(3,KANGL) = LISTB2A(NORDERB(II3))
                  FCANGLB (KANGL) = FCANGLB(IANGL)
                  ANGL0B  (KANGL) = ANGL0B (IANGL)
                  FCSTBDB(1,KANGL)= FCSTBDB(1,IANGL)
                  FCSTBDB(2,KANGL)= FCSTBDB(2,IANGL)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).LE.0.AND.LISTAB(NFFATSV+II2).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0                      ) THEN
                  KANGL = KANGL + 1
                  KLISTB(1,KANGL) = LISTB2A(NORDERB(II1))
                  KLISTB(2,KANGL) = NORDERA(LISTAB(NFFATSV+II2))
                  KLISTB(3,KANGL) = NORDERA(LISTAB(NFFATSV+II3))
                  FCANGLB (KANGL) = FCANGLB(IANGL)
                  ANGL0B  (KANGL) = ANGL0B (IANGL)
                  FCSTBDB(1,KANGL)= FCSTBDB(1,IANGL)
                  FCSTBDB(2,KANGL)= FCSTBDB(2,IANGL)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).GT.0.AND.LISTAB (NFFATSV+II1).GT.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0                       ) THEN
                  KANGL = KANGL + 1
                  KLISTB(1,KANGL) = NORDERA(LISTAB(NFFATSV+II1))
                  KLISTB(2,KANGL) = NORDERA(LISTAB(NFFATSV+II2))
                  KLISTB(3,KANGL) = LISTB2A(NORDERB(II3))
                  FCANGLB (KANGL) = FCANGLB(IANGL)
                  ANGL0B  (KANGL) = ANGL0B (IANGL)
                  FCSTBDB(1,KANGL)= FCSTBDB(1,IANGL)
                  FCSTBDB(2,KANGL)= FCSTBDB(2,IANGL)
               END IF
            ENDDO
            N2ANGL = KANGL
C
            KANGL = NANGL
            DO IANGL =1, N2ANGL
               II1 = KLISTB(1,IANGL)
               II2 = KLISTB(2,IANGL)
               II3 = KLISTB(3,IANGL)
               DO JANGL =1, NANGL
                  JJ1 = KLIST(1,JANGL)
                  JJ2 = KLIST(2,JANGL)
                  JJ3 = KLIST(3,JANGL)
                  IF((II1.EQ.JJ1.AND.II2.EQ.JJ2.AND.II3.EQ.JJ3).OR.
     *               (II1.EQ.JJ3.AND.II2.EQ.JJ2.AND.II3.EQ.JJ1)  )THEN
                     FCANGL(JANGL) = PT5*(FCANGL(JANGL)+FCANGLB(IANGL))
                     ANGL0 (JANGL) = PT5*(ANGL0 (JANGL)+ANGL0B (IANGL))
                     FCSTBD(1,JANGL) = PT5*(FCSTBDB(1,JANGL)+
     *                                      FCSTBDB(1,IANGL))
                     FCSTBD(2,JANGL) = PT5*(FCSTBDB(2,JANGL)+
     *                                      FCSTBDB(2,IANGL))
                     GOTO 271
                  END IF
               ENDDO
               KANGL = KANGL + 1
               KLIST(1,KANGL) = II1
               KLIST(2,KANGL) = II2
               KLIST(3,KANGL) = II3
               FCANGL (KANGL) = FCANGLB(IANGL)
               ANGL0  (KANGL) = ANGL0B (IANGL)
               FCSTBD(1,KANGL)= FCSTBDB(1,IANGL)
               FCSTBD(2,KANGL)= FCSTBDB(2,IANGL)
 271           CONTINUE
            ENDDO
            NANGL = KANGL
            IF(NANGL.GE.MXANGL) THEN
               IF(MASWRK) WRITE(IW,'(1X,A/)')
     *         'NANGL EXCEEDED MXANGL, PLEASE INCREASE MXANGL.'
               CALL ABRT
            END IF
C
            DO IANGL = 1, NANGL
               IF(KLIST(1,IANGL).LE.0.OR.
     *            KLIST(2,IANGL).LE.0.OR.
     *            KLIST(3,IANGL).LE.0    ) THEN
                  IF(MASWRK)WRITE(IW,'(3I7,/1X,A)')
     *               KLIST(1,IANGL),KLIST(2,IANGL),KLIST(3,IANGL),
     *               'ERROR: ANGLE ATM1, ATM2, ATM3 MUST BE > 0'
                     CALL ABRT
               END IF
               IF(KLIST(1,IANGL).EQ.KLIST(2,IANGL).OR.
     *            KLIST(1,IANGL).EQ.KLIST(3,IANGL).OR.
     *            KLIST(2,IANGL).EQ.KLIST(3,IANGL)) THEN
                  IF(MASWRK)WRITE(IW,'(3I7,/1X,A)')
     *               KLIST(1,IANGL),KLIST(2,IANGL),KLIST(3,IANGL),
     *              'ERROR: ANGLE ATM1, ATM2, ATM3 MUST BE DIFFERENT'
                     CALL ABRT
               END IF
               IF(KLIST(1,IANGL).GT.KLIST(3,IANGL)) THEN
                  IZ5G9          = KLIST(1,IANGL)
                  KLIST(1,IANGL) = KLIST(3,IANGL)
                  KLIST(3,IANGL) = IZ5G9
                  IZ5G9          = KBLST(1,IANGL)
                  KBLST(1,IANGL) = KBLST(2,IANGL)
                  KBLST(2,IANGL) = IZ5G9
                  AZ5G9          = FCSTBD(1,IANGL)
                  FCSTBD(1,IANGL)= FCSTBD(2,IANGL)
                  FCSTBD(2,IANGL)= AZ5G9
               END IF
            ENDDO
C           - MUST REDO KBLST -
            DO IANGL=1,NANGL
               K1 = KLIST(1,IANGL)
               K2 = KLIST(2,IANGL)
               K3 = KLIST(3,IANGL)
               DO IBOND=1,NBOND
                  KK1 = IPAIR(1,IBOND)
                  KK2 = IPAIR(2,IBOND)
                  IF((KK1.EQ.K1.AND.KK2.EQ.K2).OR.
     *               (KK1.EQ.K2.AND.KK2.EQ.K1)) THEN
                     KBLST(1,IANGL) = IBOND
                  END IF
                  IF((KK1.EQ.K2.AND.KK2.EQ.K3).OR.
     *               (KK1.EQ.K3.AND.KK2.EQ.K2)) THEN
                     KBLST(2,IANGL) = IBOND
                  END IF
               ENDDO
            ENDDO
C
            KDIHR = 0
            DO IDIHR =1, NDIHR
               II1 = LLIST(1,IDIHR)
               II2 = LLIST(2,IDIHR)
               II3 = LLIST(3,IDIHR)
               II4 = LLIST(4,IDIHR)
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).GT.0   ) THEN
                  KDIHR = KDIHR + 1
                  LLIST(1,KDIHR) = NORDERA(II1)
                  LLIST(2,KDIHR) = NORDERA(II2)
                  LLIST(3,KDIHR) = NORDERA(II3)
                  LLIST(4,KDIHR) = NORDERA(II4)
                  NNN    (KDIHR) = NNN (IDIHR)
                  GAMA   (KDIHR) = GAMA(IDIHR)
                  VROT   (KDIHR) = VROT(IDIHR)
                  FCDIHR(1,KDIHR)= FCDIHR(1,IDIHR)
                  FCDIHR(2,KDIHR)= FCDIHR(2,IDIHR)
                  FCDIHR(3,KDIHR)= FCDIHR(3,IDIHR)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II4).GT.0                        ) THEN
                  KDIHR = KDIHR + 1
                  LLIST(1,KDIHR) = NORDERA(II1)
                  LLIST(2,KDIHR) = NORDERA(II2)
                  LLIST(3,KDIHR) = NORDERA(II3)
                  LLIST(4,KDIHR) = LISTB2A(NORDERB(LISTAB(II4)))
                  NNN    (KDIHR) = NNN (IDIHR)
                  GAMA   (KDIHR) = GAMA(IDIHR)
                  VROT   (KDIHR) = VROT(IDIHR)
                  FCDIHR(1,KDIHR)= FCDIHR(1,IDIHR)
                  FCDIHR(2,KDIHR)= FCDIHR(2,IDIHR)
                  FCDIHR(3,KDIHR)= FCDIHR(3,IDIHR)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II3).GT.0                         ) THEN
                  KDIHR = KDIHR + 1
                  LLIST(1,KDIHR) = NORDERA(II1)
                  LLIST(2,KDIHR) = NORDERA(II2)
                  LLIST(3,KDIHR) = LISTB2A(NORDERB(LISTAB(II3)))
                  LLIST(4,KDIHR) = NORDERA(II4)
                  NNN    (KDIHR) = NNN (IDIHR)
                  GAMA   (KDIHR) = GAMA(IDIHR)
                  VROT   (KDIHR) = VROT(IDIHR)
                  FCDIHR(1,KDIHR)= FCDIHR(1,IDIHR)
                  FCDIHR(2,KDIHR)= FCDIHR(2,IDIHR)
                  FCDIHR(3,KDIHR)= FCDIHR(3,IDIHR)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II2).GT.0                         ) THEN
                  KDIHR = KDIHR + 1
                  LLIST(1,KDIHR) = NORDERA(II1)
                  LLIST(2,KDIHR) = LISTB2A(NORDERB(LISTAB(II2)))
                  LLIST(3,KDIHR) = NORDERA(II3)
                  LLIST(4,KDIHR) = NORDERA(II4)
                  NNN    (KDIHR) = NNN (IDIHR)
                  GAMA   (KDIHR) = GAMA(IDIHR)
                  VROT   (KDIHR) = VROT(IDIHR)
                  FCDIHR(1,KDIHR)= FCDIHR(1,IDIHR)
                  FCDIHR(2,KDIHR)= FCDIHR(2,IDIHR)
                  FCDIHR(3,KDIHR)= FCDIHR(3,IDIHR)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II1).GT.0                         ) THEN
                  KDIHR = KDIHR + 1
                  LLIST(1,KDIHR) = LISTB2A(NORDERB(LISTAB(II1)))
                  LLIST(2,KDIHR) = NORDERA(II2)
                  LLIST(3,KDIHR) = NORDERA(II3)
                  LLIST(4,KDIHR) = NORDERA(II4)
                  NNN    (KDIHR) = NNN (IDIHR)
                  GAMA   (KDIHR) = GAMA(IDIHR)
                  VROT   (KDIHR) = VROT(IDIHR)
                  FCDIHR(1,KDIHR)= FCDIHR(1,IDIHR)
                  FCDIHR(2,KDIHR)= FCDIHR(2,IDIHR)
                  FCDIHR(3,KDIHR)= FCDIHR(3,IDIHR)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II1).GT.0.AND.LISTAB(II2).GT.0.AND.
     *            LISTAB(II3).GT.0                         ) THEN
                  KDIHR = KDIHR + 1
                  LLIST(1,KDIHR) = LISTB2A(NORDERB(LISTAB(II1)))
                  LLIST(2,KDIHR) = LISTB2A(NORDERB(LISTAB(II2)))
                  LLIST(3,KDIHR) = LISTB2A(NORDERB(LISTAB(II3)))
                  LLIST(4,KDIHR) = NORDERA(II4)
                  NNN    (KDIHR) = NNN (IDIHR)
                  GAMA   (KDIHR) = GAMA(IDIHR)
                  VROT   (KDIHR) = VROT(IDIHR)
                  FCDIHR(1,KDIHR)= FCDIHR(1,IDIHR)
                  FCDIHR(2,KDIHR)= FCDIHR(2,IDIHR)
                  FCDIHR(3,KDIHR)= FCDIHR(3,IDIHR)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II1).GT.0.AND.LISTAB(II2).GT.0.AND.
     *            LISTAB(II4).GT.0                         ) THEN
                  KDIHR = KDIHR + 1
                  LLIST(1,KDIHR) = LISTB2A(NORDERB(LISTAB(II1)))
                  LLIST(2,KDIHR) = LISTB2A(NORDERB(LISTAB(II2)))
                  LLIST(3,KDIHR) = NORDERA(II3)
                  LLIST(4,KDIHR) = LISTB2A(NORDERB(LISTAB(II4)))
                  NNN    (KDIHR) = NNN (IDIHR)
                  GAMA   (KDIHR) = GAMA(IDIHR)
                  VROT   (KDIHR) = VROT(IDIHR)
                  FCDIHR(1,KDIHR)= FCDIHR(1,IDIHR)
                  FCDIHR(2,KDIHR)= FCDIHR(2,IDIHR)
                  FCDIHR(3,KDIHR)= FCDIHR(3,IDIHR)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II1).GT.0.AND.LISTAB(II3).GT.0.AND.
     *            LISTAB(II4).GT.0                         ) THEN
                  KDIHR = KDIHR + 1
                  LLIST(1,KDIHR) = LISTB2A(NORDERB(LISTAB(II1)))
                  LLIST(2,KDIHR) = NORDERA(II2)
                  LLIST(3,KDIHR) = LISTB2A(NORDERB(LISTAB(II3)))
                  LLIST(4,KDIHR) = LISTB2A(NORDERB(LISTAB(II4)))
                  NNN    (KDIHR) = NNN (IDIHR)
                  GAMA   (KDIHR) = GAMA(IDIHR)
                  VROT   (KDIHR) = VROT(IDIHR)
                  FCDIHR(1,KDIHR)= FCDIHR(1,IDIHR)
                  FCDIHR(2,KDIHR)= FCDIHR(2,IDIHR)
                  FCDIHR(3,KDIHR)= FCDIHR(3,IDIHR)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II2).GT.0.AND.LISTAB(II3).GT.0.AND.
     *            LISTAB(II4).GT.0                         ) THEN
                  KDIHR = KDIHR + 1
                  LLIST(1,KDIHR) = NORDERA(II1)
                  LLIST(2,KDIHR) = LISTB2A(NORDERB(LISTAB(II2)))
                  LLIST(3,KDIHR) = LISTB2A(NORDERB(LISTAB(II3)))
                  LLIST(4,KDIHR) = LISTB2A(NORDERB(LISTAB(II4)))
                  NNN    (KDIHR) = NNN (IDIHR)
                  GAMA   (KDIHR) = GAMA(IDIHR)
                  VROT   (KDIHR) = VROT(IDIHR)
                  FCDIHR(1,KDIHR)= FCDIHR(1,IDIHR)
                  FCDIHR(2,KDIHR)= FCDIHR(2,IDIHR)
                  FCDIHR(3,KDIHR)= FCDIHR(3,IDIHR)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II3).GT.0.AND.LISTAB(II4).GT.0      ) THEN
                  KDIHR = KDIHR + 1
                  LLIST(1,KDIHR) = NORDERA(II1)
                  LLIST(2,KDIHR) = NORDERA(II2)
                  LLIST(3,KDIHR) = LISTB2A(NORDERB(LISTAB(II3)))
                  LLIST(4,KDIHR) = LISTB2A(NORDERB(LISTAB(II4)))
                  NNN    (KDIHR) = NNN (IDIHR)
                  GAMA   (KDIHR) = GAMA(IDIHR)
                  VROT   (KDIHR) = VROT(IDIHR)
                  FCDIHR(1,KDIHR)= FCDIHR(1,IDIHR)
                  FCDIHR(2,KDIHR)= FCDIHR(2,IDIHR)
                  FCDIHR(3,KDIHR)= FCDIHR(3,IDIHR)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II1).GT.0.AND.LISTAB(II2).GT.0      ) THEN
                  KDIHR = KDIHR + 1
                  LLIST(1,KDIHR) = LISTB2A(NORDERB(LISTAB(II1)))
                  LLIST(2,KDIHR) = LISTB2A(NORDERB(LISTAB(II2)))
                  LLIST(3,KDIHR) = NORDERA(II3)
                  LLIST(4,KDIHR) = NORDERA(II4)
                  NNN    (KDIHR) = NNN (IDIHR)
                  GAMA   (KDIHR) = GAMA(IDIHR)
                  VROT   (KDIHR) = VROT(IDIHR)
                  FCDIHR(1,KDIHR)= FCDIHR(1,IDIHR)
                  FCDIHR(2,KDIHR)= FCDIHR(2,IDIHR)
                  FCDIHR(3,KDIHR)= FCDIHR(3,IDIHR)
               END IF
            ENDDO
            NDIHR = KDIHR
C
            KDIHR = 0
            DO IDIHR =1, N2DIHR
               II1 = LLISTB(1,IDIHR)
               II2 = LLISTB(2,IDIHR)
               II3 = LLISTB(3,IDIHR)
               II4 = LLISTB(4,IDIHR)
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).GT.0   ) THEN
                  KDIHR = KDIHR + 1
                  LLISTB(1,KDIHR) = LISTB2A(NORDERB(II1))
                  LLISTB(2,KDIHR) = LISTB2A(NORDERB(II2))
                  LLISTB(3,KDIHR) = LISTB2A(NORDERB(II3))
                  LLISTB(4,KDIHR) = LISTB2A(NORDERB(II4))
                  NNNB    (KDIHR) = NNNB (IDIHR)
                  GAMAB   (KDIHR) = GAMAB(IDIHR)
                  VROTB   (KDIHR) = VROTB(IDIHR)
                  FCDIHRB(1,KDIHR)= FCDIHRB(1,IDIHR)
                  FCDIHRB(2,KDIHR)= FCDIHRB(2,IDIHR)
                  FCDIHRB(3,KDIHR)= FCDIHRB(3,IDIHR)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                   ) THEN
                  KDIHR = KDIHR + 1
                  LLISTB(1,KDIHR) = LISTB2A(NORDERB(II1))
                  LLISTB(2,KDIHR) = LISTB2A(NORDERB(II2))
                  LLISTB(3,KDIHR) = LISTB2A(NORDERB(II3))
                  LLISTB(4,KDIHR) = NORDERA(LISTAB(NFFATSV+II4))
                  NNNB    (KDIHR) = NNNB (IDIHR)
                  GAMAB   (KDIHR) = GAMAB(IDIHR)
                  VROTB   (KDIHR) = VROTB(IDIHR)
                  FCDIHRB(1,KDIHR)= FCDIHRB(1,IDIHR)
                  FCDIHRB(2,KDIHR)= FCDIHRB(2,IDIHR)         
                  FCDIHRB(3,KDIHR)= FCDIHRB(3,IDIHR)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0                   ) THEN
                  KDIHR = KDIHR + 1
                  LLISTB(1,KDIHR) = LISTB2A(NORDERB(II1))
                  LLISTB(2,KDIHR) = LISTB2A(NORDERB(II2))
                  LLISTB(3,KDIHR) = NORDERA(LISTAB(NFFATSV+II3))
                  LLISTB(4,KDIHR) = LISTB2A(NORDERB(II4))
                  NNNB    (KDIHR) = NNNB (IDIHR)
                  GAMAB   (KDIHR) = GAMAB(IDIHR)
                  VROTB   (KDIHR) = VROTB(IDIHR)
                  FCDIHRB(1,KDIHR)= FCDIHRB(1,IDIHR)
                  FCDIHRB(2,KDIHR)= FCDIHRB(2,IDIHR)         
                  FCDIHRB(3,KDIHR)= FCDIHRB(3,IDIHR)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0                   ) THEN
                  KDIHR = KDIHR + 1
                  LLISTB(1,KDIHR) = LISTB2A(NORDERB(II1))
                  LLISTB(2,KDIHR) = NORDERA(LISTAB(NFFATSV+II2))
                  LLISTB(3,KDIHR) = LISTB2A(NORDERB(II3))
                  LLISTB(4,KDIHR) = LISTB2A(NORDERB(II4))
                  NNNB    (KDIHR) = NNNB (IDIHR)
                  GAMAB   (KDIHR) = GAMAB(IDIHR)
                  VROTB   (KDIHR) = VROTB(IDIHR)
                  FCDIHRB(1,KDIHR)= FCDIHRB(1,IDIHR)
                  FCDIHRB(2,KDIHR)= FCDIHRB(2,IDIHR)         
                  FCDIHRB(3,KDIHR)= FCDIHRB(3,IDIHR)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0                   ) THEN
                  KDIHR = KDIHR + 1
                  LLISTB(1,KDIHR) = NORDERA(LISTAB(NFFATSV+II1))
                  LLISTB(2,KDIHR) = LISTB2A(NORDERB(II2))
                  LLISTB(3,KDIHR) = LISTB2A(NORDERB(II3))
                  LLISTB(4,KDIHR) = LISTB2A(NORDERB(II4))
                  NNNB    (KDIHR) = NNNB (IDIHR)
                  GAMAB   (KDIHR) = GAMAB(IDIHR)
                  VROTB   (KDIHR) = VROTB(IDIHR)
                  FCDIHRB(1,KDIHR)= FCDIHRB(1,IDIHR)
                  FCDIHRB(2,KDIHR)= FCDIHRB(2,IDIHR)         
                  FCDIHRB(3,KDIHR)= FCDIHRB(3,IDIHR)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0                    ) THEN
                  KDIHR = KDIHR + 1
                  LLISTB(1,KDIHR) = NORDERA(LISTAB(NFFATSV+II1))
                  LLISTB(2,KDIHR) = NORDERA(LISTAB(NFFATSV+II2))
                  LLISTB(3,KDIHR) = NORDERA(LISTAB(NFFATSV+II3))
                  LLISTB(4,KDIHR) = LISTB2A(NORDERB(II4))
                  NNNB    (KDIHR) = NNNB (IDIHR)
                  GAMAB   (KDIHR) = GAMAB(IDIHR)
                  VROTB   (KDIHR) = VROTB(IDIHR)
                  FCDIHRB(1,KDIHR)= FCDIHRB(1,IDIHR)
                  FCDIHRB(2,KDIHR)= FCDIHRB(2,IDIHR)         
                  FCDIHRB(3,KDIHR)= FCDIHRB(3,IDIHR)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                    ) THEN
                  KDIHR = KDIHR + 1
                  LLISTB(1,KDIHR) = NORDERA(LISTAB(NFFATSV+II1))
                  LLISTB(2,KDIHR) = NORDERA(LISTAB(NFFATSV+II2))
                  LLISTB(3,KDIHR) = LISTB2A(NORDERB(II3))
                  LLISTB(4,KDIHR) = NORDERA(LISTAB(NFFATSV+II4))
                  NNNB    (KDIHR) = NNNB (IDIHR)
                  GAMAB   (KDIHR) = GAMAB(IDIHR)
                  VROTB   (KDIHR) = VROTB(IDIHR)
                  FCDIHRB(1,KDIHR)= FCDIHRB(1,IDIHR)
                  FCDIHRB(2,KDIHR)= FCDIHRB(2,IDIHR)         
                  FCDIHRB(3,KDIHR)= FCDIHRB(3,IDIHR)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                    ) THEN
                  KDIHR = KDIHR + 1
                  LLISTB(1,KDIHR) = NORDERA(LISTAB(NFFATSV+II1))
                  LLISTB(2,KDIHR) = LISTB2A(NORDERB(II2))
                  LLISTB(3,KDIHR) = NORDERA(LISTAB(NFFATSV+II3))
                  LLISTB(4,KDIHR) = NORDERA(LISTAB(NFFATSV+II4))
                  NNNB    (KDIHR) = NNNB (IDIHR)
                  GAMAB   (KDIHR) = GAMAB(IDIHR)
                  VROTB   (KDIHR) = VROTB(IDIHR)
                  FCDIHRB(1,KDIHR)= FCDIHRB(1,IDIHR)
                  FCDIHRB(2,KDIHR)= FCDIHRB(2,IDIHR)         
                  FCDIHRB(3,KDIHR)= FCDIHRB(3,IDIHR)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                    ) THEN
                  KDIHR = KDIHR + 1
                  LLISTB(1,KDIHR) = LISTB2A(NORDERB(II1))
                  LLISTB(2,KDIHR) = NORDERA(LISTAB(NFFATSV+II2))
                  LLISTB(3,KDIHR) = NORDERA(LISTAB(NFFATSV+II3))
                  LLISTB(4,KDIHR) = NORDERA(LISTAB(NFFATSV+II4))
                  NNNB    (KDIHR) = NNNB (IDIHR)
                  GAMAB   (KDIHR) = GAMAB(IDIHR)
                  VROTB   (KDIHR) = VROTB(IDIHR)
                  FCDIHRB(1,KDIHR)= FCDIHRB(1,IDIHR)
                  FCDIHRB(2,KDIHR)= FCDIHRB(2,IDIHR)         
                  FCDIHRB(3,KDIHR)= FCDIHRB(3,IDIHR)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                    ) THEN
                  KDIHR = KDIHR + 1
                  LLISTB(1,KDIHR) = LISTB2A(NORDERB(II1))
                  LLISTB(2,KDIHR) = LISTB2A(NORDERB(II2))
                  LLISTB(3,KDIHR) = NORDERA(LISTAB(NFFATSV+II3))
                  LLISTB(4,KDIHR) = NORDERA(LISTAB(NFFATSV+II4))
                  NNNB    (KDIHR) = NNNB (IDIHR)
                  GAMAB   (KDIHR) = GAMAB(IDIHR)
                  VROTB   (KDIHR) = VROTB(IDIHR)
                  FCDIHRB(1,KDIHR)= FCDIHRB(1,IDIHR)
                  FCDIHRB(2,KDIHR)= FCDIHRB(2,IDIHR)
                  FCDIHRB(3,KDIHR)= FCDIHRB(3,IDIHR)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0                    ) THEN
                  KDIHR = KDIHR + 1
                  LLISTB(1,KDIHR) = NORDERA(LISTAB(NFFATSV+II1))
                  LLISTB(2,KDIHR) = NORDERA(LISTAB(NFFATSV+II2))
                  LLISTB(3,KDIHR) = LISTB2A(NORDERB(II3))
                  LLISTB(4,KDIHR) = LISTB2A(NORDERB(II4))
                  NNNB    (KDIHR) = NNNB (IDIHR)
                  GAMAB   (KDIHR) = GAMAB(IDIHR)
                  VROTB   (KDIHR) = VROTB(IDIHR)
                  FCDIHRB(1,KDIHR)= FCDIHRB(1,IDIHR)
                  FCDIHRB(2,KDIHR)= FCDIHRB(2,IDIHR)
                  FCDIHRB(3,KDIHR)= FCDIHRB(3,IDIHR)
               END IF
            ENDDO
            N2DIHR = KDIHR
C
            KDIHR = NDIHR
            DO IDIHR =1, N2DIHR
               II1 = LLISTB(1,IDIHR)
               II2 = LLISTB(2,IDIHR)
               II3 = LLISTB(3,IDIHR)
               II4 = LLISTB(4,IDIHR)
               DO JDIHR =1, NDIHR
                  JJ1 = LLIST(1,JDIHR)
                  JJ2 = LLIST(2,JDIHR)
                  JJ3 = LLIST(3,JDIHR)
                  JJ4 = LLIST(4,JDIHR)
                  IF((II1.EQ.JJ1.AND.II2.EQ.JJ2.AND.
     *                II3.EQ.JJ3.AND.II4.EQ.JJ4).OR.
     *               (II1.EQ.JJ4.AND.II2.EQ.JJ3.AND.
     *                II3.EQ.JJ2.AND.II4.EQ.JJ1)   )THEN
                      GOTO 272
                  END IF
               ENDDO
               KDIHR = KDIHR + 1
               LLIST(1,KDIHR) = II1
               LLIST(2,KDIHR) = II2
               LLIST(3,KDIHR) = II3
               LLIST(4,KDIHR) = II4
               NNN    (KDIHR) = NNNB (IDIHR)
               GAMA   (KDIHR) = GAMAB(IDIHR)
               VROT   (KDIHR) = VROTB(IDIHR)
               FCDIHR(1,KDIHR)= FCDIHRB(1,IDIHR)
               FCDIHR(2,KDIHR)= FCDIHRB(2,IDIHR)
               FCDIHR(3,KDIHR)= FCDIHRB(3,IDIHR)
 272           CONTINUE
            ENDDO
            NDIHR = KDIHR
            IF(NDIHR.GE.MXDIHR) THEN
               IF(MASWRK) WRITE(IW,'(1X,A/)')
     *         'NDIHR EXCEEDED MXDIHR, PLEASE INCREASE MXDIHR.'
               CALL ABRT
            END IF
C
            DO IDIHR = 1, NDIHR
               IF(LLIST(1,IDIHR).LE.0.OR.
     *            LLIST(2,IDIHR).LE.0.OR.
     *            LLIST(3,IDIHR).LE.0.OR.
     *            LLIST(4,IDIHR).LE.0    ) THEN
                  IF(MASWRK)WRITE(IW,'(4I7,/1X,A)')
     *               LLIST(1,IDIHR),LLIST(2,IDIHR),
     *               LLIST(3,IDIHR),LLIST(4,IDIHR),
     *               'ERROR: DIHR ATM1, ATM2, ATM3, ATM4 MUST BE > 0'
                     CALL ABRT
               END IF
               IF(LLIST(1,IDIHR).EQ.LLIST(2,IDIHR).OR.
     *            LLIST(1,IDIHR).EQ.LLIST(3,IDIHR).OR.
     *            LLIST(1,IDIHR).EQ.LLIST(4,IDIHR).OR.
     *            LLIST(2,IDIHR).EQ.LLIST(3,IDIHR).OR.
     *            LLIST(2,IDIHR).EQ.LLIST(4,IDIHR).OR.
     *            LLIST(3,IDIHR).EQ.LLIST(4,IDIHR)) THEN
                  IF(MASWRK)WRITE(IW,'(4I7,/1X,A)')
     *               LLIST(1,IDIHR),LLIST(2,IDIHR),
     *               LLIST(3,IDIHR),LLIST(4,IDIHR),
     *            'ERROR: DIHR ATM1, ATM2, ATM3, ATM4 MUST BE DIFFERENT'
                     CALL ABRT
               END IF
               IF(LLIST(1,IDIHR).GT.LLIST(4,IDIHR)) THEN
                  IZ5G9          = LLIST(1,IDIHR)
                  LLIST(1,IDIHR) = LLIST(4,IDIHR)
                  LLIST(4,IDIHR) = IZ5G9
                  IZ5G9          = LLIST(2,IDIHR)
                  LLIST(2,IDIHR) = LLIST(3,IDIHR)
                  LLIST(3,IDIHR) = IZ5G9
               END IF
            ENDDO
C
            KDIHB = 0
            DO IDIHB =1, NDIHB
               II1 = NLIST(1,IDIHB)
               II2 = NLIST(2,IDIHB)
               II3 = NLIST(3,IDIHB)
               II4 = NLIST(4,IDIHB)
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).GT.0   ) THEN
                  KDIHB = KDIHB + 1
                  NLIST(1,KDIHB) = NORDERA(II1)
                  NLIST(2,KDIHB) = NORDERA(II2)
                  NLIST(3,KDIHB) = NORDERA(II3)
                  NLIST(4,KDIHB) = NORDERA(II4)
                  DIHB0 (KDIHB)  = DIHB0 (IDIHB)
                  FCDIHB(KDIHB)  = FCDIHB(IDIHB)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II4).GT.0                        ) THEN
                  KDIHB = KDIHB + 1
                  NLIST(1,KDIHB) = NORDERA(II1)
                  NLIST(2,KDIHB) = NORDERA(II2)
                  NLIST(3,KDIHB) = NORDERA(II3)
                  NLIST(4,KDIHB) = LISTB2A(NORDERB(LISTAB(II4)))
                  DIHB0 (KDIHB)  = DIHB0 (IDIHB)
                  FCDIHB(KDIHB)  = FCDIHB(IDIHB)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II3).GT.0                         ) THEN
                  KDIHB = KDIHB + 1
                  NLIST(1,KDIHB) = NORDERA(II1)
                  NLIST(2,KDIHB) = NORDERA(II2)
                  NLIST(3,KDIHB) = LISTB2A(NORDERB(LISTAB(II3)))
                  NLIST(4,KDIHB) = NORDERA(II4)
                  DIHB0 (KDIHB)  = DIHB0 (IDIHB)
                  FCDIHB(KDIHB)  = FCDIHB(IDIHB)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II2).GT.0                         ) THEN
                  KDIHB = KDIHB + 1
                  NLIST(1,KDIHB) = NORDERA(II1)
                  NLIST(2,KDIHB) = LISTB2A(NORDERB(LISTAB(II2)))
                  NLIST(3,KDIHB) = NORDERA(II3)
                  NLIST(4,KDIHB) = NORDERA(II4)
                  DIHB0 (KDIHB)  = DIHB0 (IDIHB)
                  FCDIHB(KDIHB)  = FCDIHB(IDIHB)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II1).GT.0                         ) THEN
                  KDIHB = KDIHB + 1
                  NLIST(1,KDIHB) = LISTB2A(NORDERB(LISTAB(II1)))
                  NLIST(2,KDIHB) = NORDERA(II2)
                  NLIST(3,KDIHB) = NORDERA(II3)
                  NLIST(4,KDIHB) = NORDERA(II4)
                  DIHB0 (KDIHB)  = DIHB0 (IDIHB)
                  FCDIHB(KDIHB)  = FCDIHB(IDIHB)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II1).GT.0.AND.LISTAB(II2).GT.0.AND.
     *            LISTAB(II3).GT.0                         ) THEN
                  KDIHB = KDIHB + 1
                  NLIST(1,KDIHB) = LISTB2A(NORDERB(LISTAB(II1)))
                  NLIST(2,KDIHB) = LISTB2A(NORDERB(LISTAB(II2)))
                  NLIST(3,KDIHB) = LISTB2A(NORDERB(LISTAB(II3)))
                  NLIST(4,KDIHB) = NORDERA(II4)
                  DIHB0 (KDIHB)  = DIHB0 (IDIHB)
                  FCDIHB(KDIHB)  = FCDIHB(IDIHB)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II1).GT.0.AND.LISTAB(II2).GT.0.AND.
     *            LISTAB(II4).GT.0                         ) THEN
                  KDIHB = KDIHB + 1
                  NLIST(1,KDIHB) = LISTB2A(NORDERB(LISTAB(II1)))
                  NLIST(2,KDIHB) = LISTB2A(NORDERB(LISTAB(II2)))
                  NLIST(3,KDIHB) = NORDERA(II3)
                  NLIST(4,KDIHB) = LISTB2A(NORDERB(LISTAB(II4)))
                  DIHB0 (KDIHB)  = DIHB0 (IDIHB)
                  FCDIHB(KDIHB)  = FCDIHB(IDIHB)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II1).GT.0.AND.LISTAB(II3).GT.0.AND.
     *            LISTAB(II4).GT.0                         ) THEN
                  KDIHB = KDIHB + 1
                  NLIST(1,KDIHB) = LISTB2A(NORDERB(LISTAB(II1)))
                  NLIST(2,KDIHB) = NORDERA(II2)
                  NLIST(3,KDIHB) = LISTB2A(NORDERB(LISTAB(II3)))
                  NLIST(4,KDIHB) = LISTB2A(NORDERB(LISTAB(II4)))
                  DIHB0 (KDIHB)  = DIHB0 (IDIHB)
                  FCDIHB(KDIHB)  = FCDIHB(IDIHB)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II2).GT.0.AND.LISTAB(II3).GT.0.AND.
     *            LISTAB(II4).GT.0                         ) THEN
                  KDIHB = KDIHB + 1
                  NLIST(1,KDIHB) = NORDERA(II1)
                  NLIST(2,KDIHB) = LISTB2A(NORDERB(LISTAB(II2)))
                  NLIST(3,KDIHB) = LISTB2A(NORDERB(LISTAB(II3)))
                  NLIST(4,KDIHB) = LISTB2A(NORDERB(LISTAB(II4)))
                  DIHB0 (KDIHB)  = DIHB0 (IDIHB)
                  FCDIHB(KDIHB)  = FCDIHB(IDIHB)
               END IF
            ENDDO
            NDIHB = KDIHB
C
            KDIHB = 0
            DO IDIHB =1, N2DIHB
               II1 = NLISTB(1,IDIHB)
               II2 = NLISTB(2,IDIHB)
               II3 = NLISTB(3,IDIHB)
               II4 = NLISTB(4,IDIHB)
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).GT.0   ) THEN
                  KDIHB = KDIHB + 1
                  NLISTB(1,KDIHB) = LISTB2A(NORDERB(II1))
                  NLISTB(2,KDIHB) = LISTB2A(NORDERB(II2))
                  NLISTB(3,KDIHB) = LISTB2A(NORDERB(II3))
                  NLISTB(4,KDIHB) = LISTB2A(NORDERB(II4))
                  DIHB0B (KDIHB)  = DIHB0B (IDIHB)
                  FCDIHBB(KDIHB)  = FCDIHBB(IDIHB)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                   ) THEN
                  KDIHB = KDIHB + 1
                  NLISTB(1,KDIHB) = LISTB2A(NORDERB(II1))
                  NLISTB(2,KDIHB) = LISTB2A(NORDERB(II2))
                  NLISTB(3,KDIHB) = LISTB2A(NORDERB(II3))
                  NLISTB(4,KDIHB) = NORDERA(LISTAB(NFFATSV+II4))
                  DIHB0B (KDIHB)  = DIHB0B (IDIHB)
                  FCDIHBB(KDIHB)  = FCDIHBB(IDIHB)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0                   ) THEN
                  KDIHB = KDIHB + 1
                  NLISTB(1,KDIHB) = LISTB2A(NORDERB(II1))
                  NLISTB(2,KDIHB) = LISTB2A(NORDERB(II2))
                  NLISTB(3,KDIHB) = NORDERA(LISTAB(NFFATSV+II3))
                  NLISTB(4,KDIHB) = LISTB2A(NORDERB(II4))
                  DIHB0B (KDIHB)  = DIHB0B (IDIHB)
                  FCDIHBB(KDIHB)  = FCDIHBB(IDIHB)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0                   ) THEN
                  KDIHB = KDIHB + 1
                  NLISTB(1,KDIHB) = LISTB2A(NORDERB(II1))
                  NLISTB(2,KDIHB) = NORDERA(LISTAB(NFFATSV+II2))
                  NLISTB(3,KDIHB) = LISTB2A(NORDERB(II3))
                  NLISTB(4,KDIHB) = LISTB2A(NORDERB(II4))
                  DIHB0B (KDIHB)  = DIHB0B (IDIHB)
                  FCDIHBB(KDIHB)  = FCDIHBB(IDIHB)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0                   ) THEN
                  KDIHB = KDIHB + 1
                  NLISTB(1,KDIHB) = NORDERA(LISTAB(NFFATSV+II1))
                  NLISTB(2,KDIHB) = LISTB2A(NORDERB(II2))
                  NLISTB(3,KDIHB) = LISTB2A(NORDERB(II3))
                  NLISTB(4,KDIHB) = LISTB2A(NORDERB(II4))
                  DIHB0B (KDIHB)  = DIHB0B (IDIHB)
                  FCDIHBB(KDIHB)  = FCDIHBB(IDIHB)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0                    ) THEN
                  KDIHB = KDIHB + 1
                  NLISTB(1,KDIHB) = NORDERA(LISTAB(NFFATSV+II1))
                  NLISTB(2,KDIHB) = NORDERA(LISTAB(NFFATSV+II2))
                  NLISTB(3,KDIHB) = NORDERA(LISTAB(NFFATSV+II3))
                  NLISTB(4,KDIHB) = LISTB2A(NORDERB(II4))
                  DIHB0B (KDIHB)  = DIHB0B (IDIHB)
                  FCDIHBB(KDIHB)  = FCDIHBB(IDIHB)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                    ) THEN
                  KDIHB = KDIHB + 1
                  NLISTB(1,KDIHB) = NORDERA(LISTAB(NFFATSV+II1))
                  NLISTB(2,KDIHB) = NORDERA(LISTAB(NFFATSV+II2))
                  NLISTB(3,KDIHB) = LISTB2A(NORDERB(II3))
                  NLISTB(4,KDIHB) = NORDERA(LISTAB(NFFATSV+II4))
                  DIHB0B (KDIHB)  = DIHB0B (IDIHB)
                  FCDIHBB(KDIHB)  = FCDIHBB(IDIHB)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                    ) THEN
                  KDIHB = KDIHB + 1
                  NLISTB(1,KDIHB) = NORDERA(LISTAB(NFFATSV+II1))
                  NLISTB(2,KDIHB) = LISTB2A(NORDERB(II2))
                  NLISTB(3,KDIHB) = NORDERA(LISTAB(NFFATSV+II3))
                  NLISTB(4,KDIHB) = NORDERA(LISTAB(NFFATSV+II4))
                  DIHB0B (KDIHB)  = DIHB0B (IDIHB)
                  FCDIHBB(KDIHB)  = FCDIHBB(IDIHB)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                    ) THEN
                  KDIHB = KDIHB + 1
                  NLISTB(1,KDIHB) = LISTB2A(NORDERB(II1))
                  NLISTB(2,KDIHB) = NORDERA(LISTAB(NFFATSV+II2))
                  NLISTB(3,KDIHB) = NORDERA(LISTAB(NFFATSV+II3))
                  NLISTB(4,KDIHB) = NORDERA(LISTAB(NFFATSV+II4))
                  DIHB0B (KDIHB)  = DIHB0B (IDIHB)
                  FCDIHBB(KDIHB)  = FCDIHBB(IDIHB)
               END IF
            ENDDO
            N2DIHB = KDIHB
C
            KDIHB = NDIHB
            DO IDIHB =1, N2DIHB
               II1 = NLISTB(1,IDIHB)
               II2 = NLISTB(2,IDIHB)
               II3 = NLISTB(3,IDIHB)
               II4 = NLISTB(4,IDIHB)
               DO JDIHB =1, NDIHB
                  JJ1 = NLIST(1,JDIHB)
                  JJ2 = NLIST(2,JDIHB)
                  JJ3 = NLIST(3,JDIHB)
                  JJ4 = NLIST(4,JDIHB)
                  IF((II1.EQ.JJ1.AND.II2.EQ.JJ2.AND.
     *                II3.EQ.JJ3.AND.II4.EQ.JJ4).OR.
     *               (II1.EQ.JJ4.AND.II2.EQ.JJ3.AND.
     *                II3.EQ.JJ2.AND.II4.EQ.JJ1)   )THEN
                      DIHB0 (JDIHB)  = PT5*(DIHB0 (JDIHB) +
     *                                      DIHB0B(IDIHB))
                      FCDIHB(JDIHB)  = PT5*(FCDIHB(JDIHB) +
     *                                      FCDIHBB(IDIHB))
                      GOTO 273
                  END IF
               ENDDO
               KDIHB = KDIHB + 1
               NLIST(1,KDIHB) = II1
               NLIST(2,KDIHB) = II2
               NLIST(3,KDIHB) = II3
               NLIST(4,KDIHB) = II4
               DIHB0(KDIHB)   = DIHB0B(IDIHB)
               FCDIHB(KDIHB)  = FCDIHBB(IDIHB)
 273           CONTINUE
            ENDDO
            NDIHB = KDIHB
            IF(NDIHB.GE.MXDIHB) THEN
               IF(MASWRK) WRITE(IW,'(1X,A/)')
     *         'NDIHB EXCEEDED MXDIHB, PLEASE INCREASE MXDIHB.'
               CALL ABRT
            END IF
C
            DO IDIHB = 1, NDIHB
               IF(NLIST(1,IDIHB).LE.0.OR.
     *            NLIST(2,IDIHB).LE.0.OR.
     *            NLIST(3,IDIHB).LE.0.OR.
     *            NLIST(4,IDIHB).LE.0    ) THEN
                  IF(MASWRK)WRITE(IW,'(4I7,/1X,A)')
     *               NLIST(1,IDIHB),NLIST(2,IDIHB),
     *               NLIST(3,IDIHB),NLIST(4,IDIHB),
     *              'ERROR: DIHB ATM1, ATM2, ATM3, ATM4 MUST BE > 0'
                     CALL ABRT
               END IF
               IF(NLIST(1,IDIHB).EQ.NLIST(2,IDIHB).OR.
     *            NLIST(1,IDIHB).EQ.NLIST(3,IDIHB).OR.
     *            NLIST(1,IDIHB).EQ.NLIST(4,IDIHB).OR.
     *            NLIST(2,IDIHB).EQ.NLIST(3,IDIHB).OR.
     *            NLIST(2,IDIHB).EQ.NLIST(4,IDIHB).OR.
     *            NLIST(3,IDIHB).EQ.NLIST(4,IDIHB)) THEN
                  IF(MASWRK)WRITE(IW,'(4I7,/1X,A)')
     *               NLIST(1,IDIHB),NLIST(2,IDIHB),
     *               NLIST(3,IDIHB),NLIST(4,IDIHB),
     *            'ERROR: DIHB ATM1, ATM2, ATM3, ATM4 MUST BE DIFFERENT'
                     CALL ABRT
               END IF
               IF(NLIST(1,IDIHB).GT.NLIST(4,IDIHB)) THEN
                  IZ5G9          = NLIST(1,IDIHB)
                  NLIST(1,IDIHB) = NLIST(4,IDIHB)
                  NLIST(4,IDIHB) = IZ5G9
                  IZ5G9          = NLIST(2,IDIHB)
                  NLIST(2,IDIHB) = NLIST(3,IDIHB)
                  NLIST(3,IDIHB) = IZ5G9
               END IF
            ENDDO
C
            KWAGG = 0
            DO IWAGG =1, NWAGG
               II1 = MLIST(1,IWAGG)
               II2 = MLIST(2,IWAGG)
               II3 = MLIST(3,IWAGG)
               II4 = MLIST(4,IWAGG)
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).GT.0   ) THEN
                  KWAGG = KWAGG + 1
                  MLIST(1,KWAGG) = NORDERA(II1)
                  MLIST(2,KWAGG) = NORDERA(II2)
                  MLIST(3,KWAGG) = NORDERA(II3)
                  MLIST(4,KWAGG) = NORDERA(II4)
                  FCWAGG(KWAGG)  = FCWAGG(IWAGG)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II4).GT.0                        ) THEN
                  KWAGG = KWAGG + 1
                  MLIST(1,KWAGG) = NORDERA(II1)
                  MLIST(2,KWAGG) = NORDERA(II2)
                  MLIST(3,KWAGG) = NORDERA(II3)
                  MLIST(4,KWAGG) = LISTB2A(NORDERB(LISTAB(II4)))
                  FCWAGG(KWAGG)  = FCWAGG(IWAGG)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II3).GT.0                         ) THEN
                  KWAGG = KWAGG + 1
                  MLIST(1,KWAGG) = NORDERA(II1)
                  MLIST(2,KWAGG) = NORDERA(II2)
                  MLIST(3,KWAGG) = LISTB2A(NORDERB(LISTAB(II3)))
                  MLIST(4,KWAGG) = NORDERA(II4)
                  FCWAGG(KWAGG)  = FCWAGG(IWAGG)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II2).GT.0                         ) THEN
                  KWAGG = KWAGG + 1
                  MLIST(1,KWAGG) = NORDERA(II1)
                  MLIST(2,KWAGG) = LISTB2A(NORDERB(LISTAB(II2)))
                  MLIST(3,KWAGG) = NORDERA(II3)
                  MLIST(4,KWAGG) = NORDERA(II4)
                  FCWAGG(KWAGG)  = FCWAGG(IWAGG)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II1).GT.0                         ) THEN
                  KWAGG = KWAGG + 1
                  MLIST(1,KWAGG) = LISTB2A(NORDERB(LISTAB(II1)))
                  MLIST(2,KWAGG) = NORDERA(II2)
                  MLIST(3,KWAGG) = NORDERA(II3)
                  MLIST(4,KWAGG) = NORDERA(II4)
                  FCWAGG(KWAGG)  = FCWAGG(IWAGG)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).GT.0.AND.
     *            LISTAB(II1).GT.0.AND.LISTAB(II2).GT.0.AND.
     *            LISTAB(II3).GT.0                         ) THEN
                  KWAGG = KWAGG + 1
                  MLIST(1,KWAGG) = LISTB2A(NORDERB(LISTAB(II1)))
                  MLIST(2,KWAGG) = LISTB2A(NORDERB(LISTAB(II2)))
                  MLIST(3,KWAGG) = LISTB2A(NORDERB(LISTAB(II3)))
                  MLIST(4,KWAGG) = NORDERA(II4)
                  FCWAGG(KWAGG)  = FCWAGG(IWAGG)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).GT.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II1).GT.0.AND.LISTAB(II2).GT.0.AND.
     *            LISTAB(II4).GT.0                         ) THEN
                  KWAGG = KWAGG + 1
                  MLIST(1,KWAGG) = LISTB2A(NORDERB(LISTAB(II1)))
                  MLIST(2,KWAGG) = LISTB2A(NORDERB(LISTAB(II2)))
                  MLIST(3,KWAGG) = NORDERA(II3)
                  MLIST(4,KWAGG) = LISTB2A(NORDERB(LISTAB(II4)))
                  FCWAGG(KWAGG)  = FCWAGG(IWAGG)
               END IF
               IF(NORDERA(II1).LE.0.AND.NORDERA(II2).GT.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II1).GT.0.AND.LISTAB(II3).GT.0.AND.
     *            LISTAB(II4).GT.0                         ) THEN
                  KWAGG = KWAGG + 1
                  MLIST(1,KWAGG) = LISTB2A(NORDERB(LISTAB(II1)))
                  MLIST(2,KWAGG) = NORDERA(II2)
                  MLIST(3,KWAGG) = LISTB2A(NORDERB(LISTAB(II3)))
                  MLIST(4,KWAGG) = LISTB2A(NORDERB(LISTAB(II4)))
                  FCWAGG(KWAGG)  = FCWAGG(IWAGG)
               END IF
               IF(NORDERA(II1).GT.0.AND.NORDERA(II2).LE.0.AND.
     *            NORDERA(II3).LE.0.AND.NORDERA(II4).LE.0.AND.
     *            LISTAB(II2).GT.0.AND.LISTAB(II3).GT.0.AND.
     *            LISTAB(II4).GT.0                         ) THEN
                  KWAGG = KWAGG + 1
                  MLIST(1,KWAGG) = NORDERA(II1)
                  MLIST(2,KWAGG) = LISTB2A(NORDERB(LISTAB(II2)))
                  MLIST(3,KWAGG) = LISTB2A(NORDERB(LISTAB(II3)))
                  MLIST(4,KWAGG) = LISTB2A(NORDERB(LISTAB(II4)))
                  FCWAGG(KWAGG)  = FCWAGG(IWAGG)
               END IF
            ENDDO
            NWAGG = KWAGG
C
            KWAGG = 0
            DO IWAGG =1, N2WAGG
               II1 = MLISTB(1,IWAGG)
               II2 = MLISTB(2,IWAGG)
               II3 = MLISTB(3,IWAGG)
               II4 = MLISTB(4,IWAGG)
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).GT.0   ) THEN
                  KWAGG = KWAGG + 1
                  MLISTB(1,KWAGG) = LISTB2A(NORDERB(II1))
                  MLISTB(2,KWAGG) = LISTB2A(NORDERB(II2))
                  MLISTB(3,KWAGG) = LISTB2A(NORDERB(II3))
                  MLISTB(4,KWAGG) = LISTB2A(NORDERB(II4))
                  FCWAGGB(KWAGG)  = FCWAGGB(IWAGG)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                   ) THEN
                  KWAGG = KWAGG + 1
                  MLISTB(1,KWAGG) = LISTB2A(NORDERB(II1))
                  MLISTB(2,KWAGG) = LISTB2A(NORDERB(II2))
                  MLISTB(3,KWAGG) = LISTB2A(NORDERB(II3))
                  MLISTB(4,KWAGG) = NORDERA(LISTAB(NFFATSV+II4))
                  FCWAGGB(KWAGG)  = FCWAGGB(IWAGG)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0                   ) THEN
                  KWAGG = KWAGG + 1
                  MLISTB(1,KWAGG) = LISTB2A(NORDERB(II1))
                  MLISTB(2,KWAGG) = LISTB2A(NORDERB(II2))
                  MLISTB(3,KWAGG) = NORDERA(LISTAB(NFFATSV+II3))
                  MLISTB(4,KWAGG) = LISTB2A(NORDERB(II4))
                  FCWAGGB(KWAGG)  = FCWAGGB(IWAGG)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0                   ) THEN
                  KWAGG = KWAGG + 1
                  MLISTB(1,KWAGG) = LISTB2A(NORDERB(II1))
                  MLISTB(2,KWAGG) = NORDERA(LISTAB(NFFATSV+II2))
                  MLISTB(3,KWAGG) = LISTB2A(NORDERB(II3))
                  MLISTB(4,KWAGG) = LISTB2A(NORDERB(II4))
                  FCWAGGB(KWAGG)  = FCWAGGB(IWAGG)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0                   ) THEN
                  KWAGG = KWAGG + 1
                  MLISTB(1,KWAGG) = NORDERA(LISTAB(NFFATSV+II1))
                  MLISTB(2,KWAGG) = LISTB2A(NORDERB(II2))
                  MLISTB(3,KWAGG) = LISTB2A(NORDERB(II3))
                  MLISTB(4,KWAGG) = LISTB2A(NORDERB(II4))
                  FCWAGGB(KWAGG)  = FCWAGGB(IWAGG)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).GT.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0                    ) THEN
                  KWAGG = KWAGG + 1
                  MLISTB(1,KWAGG) = NORDERA(LISTAB(NFFATSV+II1))
                  MLISTB(2,KWAGG) = NORDERA(LISTAB(NFFATSV+II2))
                  MLISTB(3,KWAGG) = NORDERA(LISTAB(NFFATSV+II3))
                  MLISTB(4,KWAGG) = LISTB2A(NORDERB(II4))
                  FCWAGGB(KWAGG)  = FCWAGGB(IWAGG)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).GT.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                    ) THEN
                  KWAGG = KWAGG + 1
                  MLISTB(1,KWAGG) = NORDERA(LISTAB(NFFATSV+II1))
                  MLISTB(2,KWAGG) = NORDERA(LISTAB(NFFATSV+II2))
                  MLISTB(3,KWAGG) = LISTB2A(NORDERB(II3))
                  MLISTB(4,KWAGG) = NORDERA(LISTAB(NFFATSV+II4))
                  FCWAGGB(KWAGG)  = FCWAGGB(IWAGG)
               END IF
               IF(NORDERB(II1).LE.0.AND.NORDERB(II2).GT.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II1).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                    ) THEN
                  KWAGG = KWAGG + 1
                  MLISTB(1,KWAGG) = NORDERA(LISTAB(NFFATSV+II1))
                  MLISTB(2,KWAGG) = LISTB2A(NORDERB(II2))
                  MLISTB(3,KWAGG) = NORDERA(LISTAB(NFFATSV+II3))
                  MLISTB(4,KWAGG) = NORDERA(LISTAB(NFFATSV+II4))
                  FCWAGGB(KWAGG)  = FCWAGGB(IWAGG)
               END IF
               IF(NORDERB(II1).GT.0.AND.NORDERB(II2).LE.0.AND.
     *            NORDERB(II3).LE.0.AND.NORDERB(II4).LE.0.AND.
     *            LISTAB(NFFATSV+II2).GT.0.AND.
     *            LISTAB(NFFATSV+II3).GT.0.AND.
     *            LISTAB(NFFATSV+II4).GT.0                    ) THEN
                  KWAGG = KWAGG + 1
                  MLISTB(1,KWAGG) = LISTB2A(NORDERB(II1))
                  MLISTB(2,KWAGG) = NORDERA(LISTAB(NFFATSV+II2))
                  MLISTB(3,KWAGG) = NORDERA(LISTAB(NFFATSV+II3))
                  MLISTB(4,KWAGG) = NORDERA(LISTAB(NFFATSV+II4))
                  FCWAGGB(KWAGG)  = FCWAGGB(IWAGG)
               END IF
            ENDDO
            N2WAGG = KWAGG
C
            KWAGG = NWAGG
            DO IWAGG =1, N2WAGG
               II1 = MLISTB(1,IWAGG)
               II2 = MLISTB(2,IWAGG)
               II3 = MLISTB(3,IWAGG)
               II4 = MLISTB(4,IWAGG)
               DO JWAGG =1, NWAGG
                  JJ1 = MLIST(1,JWAGG)
                  JJ2 = MLIST(2,JWAGG)
                  JJ3 = MLIST(3,JWAGG)
                  JJ4 = MLIST(4,JWAGG)
                  IF((II1.EQ.JJ1.AND.II2.EQ.JJ2.AND.
     *                II3.EQ.JJ3.AND.II4.EQ.JJ4).OR.
     *               (II1.EQ.JJ4.AND.II2.EQ.JJ3.AND.
     *                II3.EQ.JJ2.AND.II4.EQ.JJ1)   )THEN
                      FCWAGG(JDIHB)  = PT5*(FCWAGG(JWAGG) +
     *                                      FCWAGGB(IWAGG))
                      GOTO 274
                  END IF
               ENDDO
               KWAGG = KWAGG + 1
               MLIST(1,KWAGG) = II1
               MLIST(2,KWAGG) = II2
               MLIST(3,KWAGG) = II3
               MLIST(4,KWAGG) = II4
               FCWAGG(KWAGG)  = FCWAGGB(IWAGG)
 274           CONTINUE
            ENDDO
            NWAGG = KWAGG
            IF(NWAGG.GE.MXWAGG) THEN
               IF(MASWRK) WRITE(IW,'(1X,A/)')
     *         'NWAGG EXCEEDED MXWAGG, PLEASE INCREASE MXWAGG.'
               CALL ABRT
            END IF
C
            DO ICMAP=1, NCMAP
               II1   = MAPLST(1,ICMAP)
               II2   = MAPLST(2,ICMAP)
               II3   = MAPLST(3,ICMAP)
               II4   = MAPLST(4,ICMAP)
               II5   = MAPLST(5,ICMAP)
               II6   = MAPLST(6,ICMAP)
               IF(NORDERA(II1).LE.0.OR.NORDERA(II2).LE.0.OR.
     *            NORDERA(II3).LE.0.OR.NORDERA(II4).LE.0.OR.
     *            NORDERA(II5).LE.0                         ) THEN
                  IF(MASWRK) WRITE(IW,*)
     *            'ERROR: ICOMBINE=3 CANNOT HANDLE CMAP TERMS.'
                  IF(MASWRK) WRITE(IW,*)' '
                  CALL ABRT
               END IF
               MAPLST(1,ICMAP) = NORDERA(II1)
               MAPLST(2,ICMAP) = NORDERA(II2)
               MAPLST(3,ICMAP) = NORDERA(II3)
               MAPLST(4,ICMAP) = NORDERA(II4)
               MAPLST(5,ICMAP) = NORDERA(II5)
               MAPLST(6,ICMAP) = II6
            ENDDO
C
            DO ICMAP=1, N2CMAP
               II1   = MAPLSTB(1,ICMAP)
               II2   = MAPLSTB(2,ICMAP)
               II3   = MAPLSTB(3,ICMAP)
               II4   = MAPLSTB(4,ICMAP)
               II5   = MAPLSTB(5,ICMAP)
               II6   = MAPLSTB(6,ICMAP)
               IF(NORDERB(II1).LE.0.OR.NORDERB(II2).LE.0.OR.
     *            NORDERB(II3).LE.0.OR.NORDERB(II4).LE.0.OR.
     *            NORDERB(II5).LE.0                         ) THEN
                  IF(MASWRK) WRITE(IW,*)
     *            'ERROR: ICOMBINE=3 CANNOT HANDLE CMAP TERMS.'
                  IF(MASWRK) WRITE(IW,*)' '
                  CALL ABRT
               END IF
               NCMAP = NCMAP + 1
               MAPLST(1,NCMAP) = LISTB2A(NORDERB(II1))
               MAPLST(2,NCMAP) = LISTB2A(NORDERB(II2))
               MAPLST(3,NCMAP) = LISTB2A(NORDERB(II3))
               MAPLST(4,NCMAP) = LISTB2A(NORDERB(II4))
               MAPLST(5,NCMAP) = LISTB2A(NORDERB(II5))
               MAPLST(6,NCMAP) = II6
            ENDDO
            IF(NCMAP.GE.MXCMAP) THEN
               IF(MASWRK) WRITE(IW,'(1X,A/)')
     *         'NCMAP EXCEEDED MXCMAP, PLEASE INCREASE MXCMAP.'
               CALL ABRT
            END IF
         END IF
C
      END IF
C
C     -- SAVE SOME INFORMATION --
C
      DO I = 1, 10
         FFFRAG1(I)  = FRAG1(I)
         FFFRAG2(I)  = FRAG2(I)
         FFDFSA(I)   = DFSA(I)
         FFRDPRATM(I)= RDENATM(I)
      ENDDO
C
C     -- CHECK IF ANY MM ATOMS ARE NOT BONDED --
C        THIS HAPPENS WHEN ATOMS ARE MANUALLY ADDED
C
      DO IFFAT=1,NFFAT
         INBOND=0
         DO IBOND=1,NBOND
            KK1 = IPAIR(1,IBOND)
            KK2 = IPAIR(2,IBOND)
            FC  = FCBOND(IBOND)
            R0  = BOND0(IBOND)
            IF(KK1.EQ.IFFAT.OR.KK2.EQ.IFFAT) THEN
               IF(FC.GT.1.0D-6.AND.R0.GT.1.0D-6) INBOND=1
            END IF
         ENDDO
         IF(INBOND.EQ.0) THEN
            IF(INT(ZANF(IFFAT)).EQ.1.AND.IFFPDB.EQ.1) THEN
               IF(MASWRK) WRITE(IW,'(/A,I8,A/A/)')
     *         ' ERROR: ATOM ',IFFAT,
     *         ' FORMS NO BOND. THE BOND LENGTH MAY BE TOO LONG,',
     *         ' OR THE H IS ATTACHED TO A WRONG O OR N ATOM IN PDB.'
C              CALL ABRT
            ELSE
               IF(MASWRK) WRITE(IW,'(A,I8,A)')
     *         ' WARNING: ATOM ',IFFAT,' FORMS NO BOND.'
            END IF
         END IF
      ENDDO
C
C     -- GENERATE EXCLUSION LIST --
C        1-2 AND 1-3 INTERACTIONS ARE USUALLY EXCLUDED.
C        1-4 INTERACTIONS ARE USUALLY INCLUDED, BUT OFTEN SCALED.
C        SINCE LLIST MAY BE EMPTY OR INCOMPLETE, IT IS BETTER
C        TO GENERATE A TEMPORARY LLIST2.
C
      IF(MASWRK) WRITE(IW,*)' '
      IF(MASWRK) WRITE(IW,*)
     *           'GENERATING 1-2, 1-3, 1-4 EXCLUSION LISTS...'
      CALL FFDIHR(KLIST,NANGL,LLIST2,NDIHR2)
      N1213J = 0
      N14J   = 0
      DO 303 IBOND = 1, NBOND
         KK1 = IPAIR(1,IBOND)
         KK2 = IPAIR(2,IBOND)
         DO I1213J=1, N1213J
            LL1 = L1213J(1,I1213J)
            LL2 = L1213J(2,I1213J)
            IF((KK1.EQ.LL1 .AND. KK2.EQ.LL2) .OR.
     *         (KK1.EQ.LL2 .AND. KK2.EQ.LL1)) THEN
                 GOTO 303
            END IF
         ENDDO
         N1213J = N1213J + 1
         L1213J(1,N1213J)=KK1
         L1213J(2,N1213J)=KK2
 303  CONTINUE
      DO 304 IANGL = 1, NANGL
         KK1 = KLIST(1,IANGL)
         KK3 = KLIST(3,IANGL)
         DO I1213J=1, N1213J
            LL1 = L1213J(1,I1213J)
            LL2 = L1213J(2,I1213J)
            IF((KK1.EQ.LL1 .AND. KK3.EQ.LL2) .OR.
     *         (KK1.EQ.LL2 .AND. KK3.EQ.LL1)) THEN
                 GOTO 304
            END IF
         ENDDO
         N1213J = N1213J + 1
         L1213J(1,N1213J)=KK1
         L1213J(2,N1213J)=KK3
 304  CONTINUE
      DO 305 IDIHR2 = 1, NDIHR2
         KK1 = LLIST2(1,IDIHR2)
         KK2 = LLIST2(4,IDIHR2)
         DO I1213J=1,N1213J
            LL1 = L1213J(1,I1213J)
            LL2 = L1213J(2,I1213J)
            IF((KK1.EQ.LL1 .AND. KK2.EQ.LL2) .OR.
     *         (KK1.EQ.LL2 .AND. KK2.EQ.LL1)) THEN
                 GOTO 305
            END IF
         ENDDO
         DO I14J=1,N14J
            LL1 = L14J(1,I14J)
            LL2 = L14J(2,I14J)
            IF((KK1.EQ.LL1 .AND. KK2.EQ.LL2) .OR.
     *         (KK1.EQ.LL2 .AND. KK2.EQ.LL1)) THEN
                 GOTO 305
            END IF
         ENDDO
         N14J = N14J + 1
         L14J(1,N14J)=KK1
         L14J(2,N14J)=KK2
 305  CONTINUE
C     - IDENTIFY PAIRS ASSOCIATED WITH SOL FREE ENERGY CALCULATION
      N1213A = 0
      N1213B = 0
      N14A   = 0
      N14B   = 0
      IF(IFEPTOP.GT.0) THEN
         DO I = 1, N1213J
            I1    = L1213J(1,I)
            I2    = L1213J(2,I)
            I1YES = 0
            I2YES = 0
            DO III=1,KFREEA(501)
               IA=KFREEA(III)
               IF(I1.EQ.IA) I1YES = 1
               IF(I2.EQ.IA) I2YES = 1
            ENDDO
            IF((I1YES+I2YES).EQ.1) THEN
               N1213A           = N1213A + 1
               L1213A(1,N1213A) = (I1+I2)  - I1*I1YES - I2*I2YES
               L1213A(2,N1213A) =          + I1*I1YES + I2*I2YES
            END IF
            IF(IFEPTOP.EQ.2) THEN
               I1YES = 0
               I2YES = 0
               DO III=1,KFREEB(501)
                  IB=KFREEB(III)
                  IA=LISTB2A(IB)
                  IF(I1.EQ.IA) I1YES = 1
                  IF(I2.EQ.IA) I2YES = 1
               ENDDO
               IF((I1YES+I2YES).EQ.1) THEN
                  N1213B           = N1213B + 1
                  L1213B(1,N1213B) = (I1+I2)  - I1*I1YES - I2*I2YES
                  L1213B(2,N1213B) =          + I1*I1YES + I2*I2YES
               END IF
            END IF
         ENDDO
         IF(IFEPTOP.EQ.1) THEN
            N1213B = N1213A
            CALL ICOPY(2*N1213B,L1213A,1,L1213B,1)
         END IF
         DO I = 1, N14J
            I1    = L14J(1,I)
            I2    = L14J(2,I)
            I1YES = 0
            I2YES = 0
            DO III=1,KFREEA(501)
               IA=KFREEA(III)
               IF(I1.EQ.IA) I1YES = 1
               IF(I2.EQ.IA) I2YES = 1
            ENDDO
            IF((I1YES+I2YES).EQ.1) THEN
               N14A         = N14A + 1
               L14A(1,N14A) = (I1+I2)  - I1*I1YES - I2*I2YES
               L14A(2,N14A) =          + I1*I1YES + I2*I2YES
            END IF
            IF(IFEPTOP.EQ.2) THEN
               I1YES = 0
               I2YES = 0
               DO III=1,KFREEB(501)
                  IB=KFREEB(III)
                  IA=LISTB2A(IB)
                  IF(I1.EQ.IA) I1YES = 1
                  IF(I2.EQ.IA) I2YES = 1
               ENDDO
               IF((I1YES+I2YES).EQ.1) THEN
                  N14B         = N14B + 1
                  L14B(1,N14B) = (I1+I2)  - I1*I1YES - I2*I2YES
                  L14B(2,N14B) =          + I1*I1YES + I2*I2YES
               END IF
            END IF
         ENDDO
         IF(IFEPTOP.EQ.1) THEN
            N14B = N14A
            CALL ICOPY(2*N14B,L14A,1,L14B,1)
         END IF
      END IF
C     - IDENTIFY PAIRS ASSOCIATED WITH PMF FREE ENERGY CALCULATION
      N1213PMA = 0 
      N14PMA   = 0
      N1213PMB = 0
      N14PMB   = 0
      IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
         DO I = 1, N1213J
            I1    = L1213J(1,I)
            I2    = L1213J(2,I)
            IYESA  = 0
            JYESA  = 0
            DO III=1,NFIXMM
               IA = IFIXMM(III)
               IF(I1.EQ.IA) IYESA = 1
               IF(I2.EQ.IA) JYESA = 1
            ENDDO
            IF(IYESA.EQ.1.AND.JYESA.EQ.1) THEN
               N1213PMA             = N1213PMA + 1
               L1213PMA(1,N1213PMA) = I1
               L1213PMA(2,N1213PMA) = I2
            END IF
         ENDDO
         DO I = 1, N14J
            I1    = L14J(1,I)
            I2    = L14J(2,I)
            IYESA  = 0
            JYESA  = 0
            DO III=1,NFIXMM
               IA = IFIXMM(III)
               IF(I1.EQ.IA) IYESA = 1
               IF(I2.EQ.IA) JYESA = 1
            ENDDO
            IF(IYESA.EQ.1.AND.JYESA.EQ.1) THEN
               N14PMA           = N14PMA + 1
               L14PMA(1,N14PMA) = I1
               L14PMA(2,N14PMA) = I2
            END IF
         ENDDO
         N1213PMB = N1213PMA
         N14PMB   = N14PMA
         CALL ICOPY(2*N1213PMA,L1213PMA,1,L1213PMB,1)
         CALL ICOPY(2*N14PMA  ,L14PMA  ,1,L14PMB  ,1)
      END IF
C
C     -- SET UP RATTLE LIST --
C        MUST BE DONE BEFORE ADDING IONS/WATER
C        MUST BE DONE BEFORE ASSIGNING INITIAL VELOCITY
C
      NRATTLE = 0
      IF(IRATTLE.EQ.1) THEN
         CRITERI = 100.0D+00/(TOKCAL*TOBOHR*TOBOHR)
         DO IBOND = 1, NBOND
            NUC1 = INT(ZANF(IPAIR(1,IBOND)))
            NUC2 = INT(ZANF(IPAIR(2,IBOND)))
            IF(FCBOND(IBOND).GE.CRITERI.AND.BOND0(IBOND).GT.ONE.AND.
     *         (NUC1.EQ.1.OR.NUC2.EQ.1)) THEN
               NRATTLE = NRATTLE + 1
               LSTRAT(1,NRATTLE)=IPAIR(1,IBOND)
               LSTRAT(2,NRATTLE)=IPAIR(2,IBOND)
               DSTRAT(NRATTLE)  =BOND0(IBOND)
            END IF
         ENDDO
      END IF
      IF(IRATTLE.EQ.10) THEN
         CRITERI = 100.0D+00/(TOKCAL*TOBOHR*TOBOHR)
         DO IBOND = 1, NBOND
            NUC1 = INT(ZANF(IPAIR(1,IBOND)))
            NUC2 = INT(ZANF(IPAIR(2,IBOND)))
            IF(FCBOND(IBOND).GE.CRITERI.AND.BOND0(IBOND).GT.ONE.AND.
     *         (NUC1.EQ.1.OR.NUC2.EQ.1)) THEN
               NRATTLE = NRATTLE + 1
               LSTRAT(1,NRATTLE)=IPAIR(1,IBOND)
               LSTRAT(2,NRATTLE)=IPAIR(2,IBOND)
               DSTRAT(NRATTLE)  =BOND0(IBOND)
            END IF
            IF(FCBOND(IBOND).EQ.ZERO.AND.BOND0(IBOND).GT.ONE.AND.
     *         (NUC1.EQ.1.AND.NUC2.EQ.1)) THEN     ! RIGID WATER
               NRATTLE = NRATTLE + 1
               LSTRAT(1,NRATTLE)=IPAIR(1,IBOND)
               LSTRAT(2,NRATTLE)=IPAIR(2,IBOND)
               DSTRAT(NRATTLE)  =BOND0(IBOND)
            END IF
         ENDDO
      END IF
      IF(IRATTLE.EQ.2) THEN
         CRITERI = 100.0D+00/(TOKCAL*TOBOHR*TOBOHR)
         DO IBOND = 1, NBOND
            IF(FCBOND(IBOND).GE.CRITERI.AND.BOND0(IBOND).GT.ONE) THEN
               NRATTLE = NRATTLE + 1
               LSTRAT(1,NRATTLE)=IPAIR(1,IBOND)
               LSTRAT(2,NRATTLE)=IPAIR(2,IBOND)
               DSTRAT(NRATTLE)  =BOND0(IBOND)
            END IF
         ENDDO
      END IF
      IF(IRATTLE.EQ.20) THEN
         CRITERI = 100.0D+00/(TOKCAL*TOBOHR*TOBOHR)
         DO IBOND = 1, NBOND
            NUC1 = INT(ZANF(IPAIR(1,IBOND)))
            NUC2 = INT(ZANF(IPAIR(2,IBOND)))
            IF(FCBOND(IBOND).GE.CRITERI.AND.BOND0(IBOND).GT.ONE) THEN
               NRATTLE = NRATTLE + 1
               LSTRAT(1,NRATTLE)=IPAIR(1,IBOND)
               LSTRAT(2,NRATTLE)=IPAIR(2,IBOND)
               DSTRAT(NRATTLE)  =BOND0(IBOND)
            END IF
            IF(FCBOND(IBOND).EQ.ZERO.AND.BOND0(IBOND).GT.ONE.AND.
     *         (NUC1.EQ.1.AND.NUC2.EQ.1)) THEN     ! RIGID WATER
               NRATTLE = NRATTLE + 1
               LSTRAT(1,NRATTLE)=IPAIR(1,IBOND)
               LSTRAT(2,NRATTLE)=IPAIR(2,IBOND)
               DSTRAT(NRATTLE)  =BOND0(IBOND)
            END IF
         ENDDO
      END IF
      IF(JRATTLE.GT.0) THEN
         DO III = 1, JRATTLE
            JADD = 1
            DO IRATTLE=1,NRATTLE
               IF( (LSTRATTMP(1,III).EQ.LSTRAT(1,IRATTLE).AND.
     *              LSTRATTMP(2,III).EQ.LSTRAT(2,IRATTLE)     ).OR.
     *             (LSTRATTMP(2,III).EQ.LSTRAT(1,IRATTLE).AND.
     *              LSTRATTMP(1,III).EQ.LSTRAT(2,IRATTLE)     )    )
     *              JADD = 0
            ENDDO
            IF(JADD.EQ.1) THEN
               NRATTLE = NRATTLE + 1
               KKK1  = MIN(LSTRATTMP(1,III),LSTRATTMP(2,III))
               KKK2  = MAX(LSTRATTMP(1,III),LSTRATTMP(2,III))
               LSTRAT(1,NRATTLE)=KKK1
               LSTRAT(2,NRATTLE)=KKK2
               DSTRAT(NRATTLE)  =DSTRATTMP(III)
            END IF
         ENDDO
      END IF
      DO III =1,NRATTLE
         DSTRAT(III) = DSTRAT(III)*DSTRAT(III)
      ENDDO
C
C     -- USE A GEOMETRIC CENTER AS THE QM CENTER --
C
      IF(NAT.GT.0 .AND. NFFAT.GT.0 .AND. SWRB2.LT.1.0D+08) THEN
         XMAX = -1.0D+30
         YMAX = -1.0D+30
         ZMAX = -1.0D+30
         XMIN =  1.0D+30
         YMIN =  1.0D+30
         ZMIN =  1.0D+30
         DO IAT = 1, NAT
            XMAX = MAX(XMAX,C(1,IAT))
            YMAX = MAX(YMAX,C(2,IAT))
            ZMAX = MAX(ZMAX,C(3,IAT))
            XMIN = MIN(XMIN,C(1,IAT))
            YMIN = MIN(YMIN,C(2,IAT))
            ZMIN = MIN(ZMIN,C(3,IAT))
         ENDDO
         QMSIZE = ZERO
         QMSIZE = MAX(QMSIZE,XMAX-XMIN)
         QMSIZE = MAX(QMSIZE,YMAX-YMIN)
         QMSIZE = MAX(QMSIZE,ZMAX-ZMIN)
         QMSIZE = QMSIZE*1.732D+00
         QMCX   = (XMAX+XMIN)*PT5
         QMCY   = (YMAX+YMIN)*PT5
         QMCZ   = (ZMAX+ZMIN)*PT5
         R2NEAR = 100.0D+00
         NEAR   = 0
         DO IAT = 1,NAT
            XI = C(1,IAT) - QMCX
            YI = C(2,IAT) - QMCY
            ZI = C(3,IAT) - QMCZ
            R2 = XI**2 + YI**2 + ZI**2
            IF(R2.LT.R2NEAR) THEN
               R2NEAR = R2
               NEAR   = IAT
            END IF
         ENDDO
         LQMCT = NEAR
         IF(MASWRK) WRITE(IW,'(A,3(F16.10,1X),A,I4,A,I7)')
     *   ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *   'NEAR ATOM',LQMCT,' AT STEP ',0
      END IF
      QMCXSV = QMCX
      QMCYSV = QMCY
      QMCZSV = QMCZ
C
C     -- THE DEFAULT IS TO USE A GEOMETRIC CENTER AS PBC CENTER --
C        WE NEED A POINT TO DEFINE THE MASTER BOX.
C        THIS MUST BE DONE BEFORE ADDING WATER BOX
C
      IF(CENTX.EQ.HUGE.OR.CENTY.EQ.HUGE.OR.CENTZ.EQ.HUGE) THEN
         XMAX = -1.0D+30
         YMAX = -1.0D+30
         ZMAX = -1.0D+30
         XMIN =  1.0D+30
         YMIN =  1.0D+30
         ZMIN =  1.0D+30
         DO IAT = 1, NAT
            XMAX = MAX(XMAX,C(1,IAT))
            YMAX = MAX(YMAX,C(2,IAT))
            ZMAX = MAX(ZMAX,C(3,IAT))
            XMIN = MIN(XMIN,C(1,IAT))
            YMIN = MIN(YMIN,C(2,IAT))
            ZMIN = MIN(ZMIN,C(3,IAT))
         ENDDO
         DO IFFAT = 1,NFFAT
            XMAX = MAX(XMAX,CORD(1,IFFAT))
            YMAX = MAX(YMAX,CORD(2,IFFAT))
            ZMAX = MAX(ZMAX,CORD(3,IFFAT))
            XMIN = MIN(XMIN,CORD(1,IFFAT))
            YMIN = MIN(YMIN,CORD(2,IFFAT))
            ZMIN = MIN(ZMIN,CORD(3,IFFAT))
         ENDDO
         CENTX= (XMAX+XMIN)*PT5
         CENTY= (YMAX+YMIN)*PT5
         CENTZ= (ZMAX+ZMIN)*PT5
      END IF
C
C     -- ADD NA+ OR K+ IONS TO DNA/RNA PO4 SITES --
C        EVEN WHEN NO WATERS ARE ADDED
C
      IF(IADDWAT.EQ.0.AND.(JADDNA1.EQ.1.OR.JADDK1.EQ.1)) THEN
         CALL JADDIONS(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,CHARG,POL,
     *                 SIG,EPS,SIG2,EPS2,CLPR,ZLPR,NLPR,
     *                 JADDNA1,JADDK1)
         IF(MASWRK.AND.JADDNA1.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' THIS SYSTEM HAS ',JADDNA1,' NA+    IONS ADDED.'
         IF(MASWRK.AND.JADDK1 .GT.0)WRITE(IW,'(A,I8,A)')
     *      ' THIS SYSTEM HAS ',JADDK1, ' K+     IONS ADDED.'
      END IF
C
C     -- ADD WATER BOX IF REQUESTED --
C        ADD IONS BEFORE WATER
C
      IF(IADDWAT.EQ.1.AND.XBOX.LT.1890.0D+00.AND.
     *                    YBOX.LT.1890.0D+00.AND.
     *                    ZBOX.LT.1890.0D+00) THEN
         CALL VALFM(LOADFM)
         LWATO1 = LOADFM + 1
         LWATH2 = LWATO1 + 3*8*MXFFAT
         LWATH3 = LWATH2 + 3*8*MXFFAT
         LAST   = LWATH3 + 3*8*MXFFAT
         NEED   = LAST   - LOADFM  - 1
         CALL GETFM(NEED)
         IF(MASWRK) WRITE(IW,*)
     *   'ADDING WATER MOLECULES...'
         CALL ADDPBCWAT(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,CHARG,POL,
     *                  SIG,EPS,SIG2,EPS2,CLPR,ZLPR,NLPR,
     *                  IPAIR,FCBOND,BOND0,
     *                  KLIST,FCANGL,ANGL0,L1213J,
     *                  MXFFAT,MXBOND,MXANGL,
     *                  X(LWATO1),X(LWATH2),X(LWATH3),
     *                  NWATER,ITYPWAT,IADDNA1,IADDK1,
     *                  IADDCA2,IADDMG2,IADDCL1,JADDNA1,JADDK1,
     *                  LSTRAT,DSTRAT)
         CALL RETFM(NEED)
         IF(MASWRK)WRITE(IW,'(A,I8,A)')
     *      ' THIS PERIODIC BOUNDARY CONDITION SYSTEM HAS ',
     *      NWATER,' WATER ADDED.'
         IF(MASWRK.AND.(IADDNA1+JADDNA1).GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDNA1+JADDNA1,' NA+    IONS ADDED.'
         IF(MASWRK.AND.(IADDK1+JADDK1).GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDK1+JADDK1, ' K+     IONS ADDED.'
         IF(MASWRK.AND.IADDCL1.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDCL1,' CL-    IONS ADDED.'
         IF(MASWRK.AND.IADDCA2.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDCA2,' CA2+   IONS ADDED.'
         IF(MASWRK.AND.IADDMG2.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDMG2,' MG2+   IONS ADDED.'
         IF(MASWRK) WRITE(IW,*) ' '
      END IF
C
      IF(IADDWAT.EQ.2.AND.SPHRAD.LT.0.945D+03) THEN
         CALL VALFM(LOADFM)
         LWATO1 = LOADFM + 1
         LWATH2 = LWATO1 + 3*8*MXFFAT
         LWATH3 = LWATH2 + 3*8*MXFFAT
         LAST   = LWATH3 + 3*8*MXFFAT
         NEED   = LAST   - LOADFM  - 1
         CALL GETFM(NEED)
         IF(MASWRK) WRITE(IW,*)
     *   'ADDING WATER MOLECULES...'
         CALL ADDSPHWAT(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,CHARG,POL,
     *                  SIG,EPS,SIG2,EPS2,CLPR,ZLPR,NLPR,
     *                  IPAIR,FCBOND,BOND0,
     *                  KLIST,FCANGL,ANGL0,L1213J,
     *                  MXFFAT,MXBOND,MXANGL,
     *                  X(LWATO1),X(LWATH2),X(LWATH3),
     *                  NWATER,ITYPWAT,IADDNA1,IADDK1,
     *                  IADDCA2,IADDMG2,IADDCL1,JADDNA1,JADDK1,
     *                  LSTRAT,DSTRAT)
         CALL RETFM(NEED)
         IF(MASWRK)WRITE(IW,'(A,I8,A)')
     *      ' THIS SPHERICAL SYSTEM HAS ',
     *      NWATER,' WATER MOLECULES ADDED.'
         IF(MASWRK.AND.(IADDNA1+JADDNA1).GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDNA1+JADDNA1,' NA+    IONS ADDED.'
         IF(MASWRK.AND.(IADDK1+JADDK1).GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDK1+JADDK1, ' K+     IONS ADDED.'
         IF(MASWRK.AND.IADDCL1.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDCL1,' CL-    IONS ADDED.'
         IF(MASWRK.AND.IADDCA2.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDCA2,' CA2+   IONS ADDED.'
         IF(MASWRK.AND.IADDMG2.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDMG2,' MG2+   IONS ADDED.'
         IF(MASWRK) WRITE(IW,*) ' '
      END IF
      CALL TIMIT(1)
      IF(MASWRK) WRITE(IW,*)' '
C
C     -- CHECK IF IT IS POL OR NOT --
C
      IF(IDOPOL.GT.0) THEN
         IDOPOLSV = IDOPOL
         IDOPOL   = 0
         DO IFFAT=1, NFFAT
            IF(POL(IFFAT).NE.ZERO) IDOPOL = IDOPOLSV
         ENDDO
      END IF
C
      IF(IDOPOL.GT.0 .AND. IFEPTOP.EQ.2) THEN
         IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *   'ERROR: IFEPTOP=2 ONLY WORKS FOR MM',
     *   ' WITH NO INDUCED DIPOLES.'
         CALL ABRT
      END IF
      IF(IDOPOL.GT.0 .AND. IFEPTYP.EQ.1 .AND. NAT.LE.0) THEN
         IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *   'ERROR: IFEPTYP=1 SOLVATION FEP CANNOT WORK',
     *   ' FOR INDUCED DIPOLES.'
         CALL ABRT
      END IF
C
C     -- CHECK THE TOTAL CHARGE OF THE MM SYSTEM --
C        (FOR IFEPTOP=2, ONLY REPORT THE CHARGE OF A)
C
      QTOTAL = ZERO - CHADDB
      DO IFFAT=1,NFFAT
         QTOTAL = QTOTAL + CHARG(IFFAT)
      ENDDO
      DIFF = QTOTAL - DBLE(NINT(QTOTAL))
      IF(MASWRK) THEN
         IF(DIFF.GT.1.0D-7 .OR. DIFF.LT.-1.0D-7) THEN
            WRITE(IW,*) ' '
            WRITE(IW,*)
     *      ' ** WARNING: TOTAL MM CHARGE IN $FFDATA OR $FFPDB',
     *      ' IS NOT AN INTEGER **'
         END IF
         WRITE(IW,'(A,F15.7,A)') ' TOTAL MM    CHARGE = ',QTOTAL,
     *                           ' IN $FFDATA OR $FFPDB.'
         WRITE(IW,*)' '
      END IF
      QTOTALSV=QTOTAL
C
      IF(IEWALD.GT.0.AND.ABS(DIFF).GT.1.0D-07) THEN
         IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *   'ERROR: CURRENTLY EWALD CALCULATION IS ALLOWED',
     *   ' ONLY FOR NEUTRAL PURE MM SYSTEMS.'
         CALL ABRT 
      END IF
C
      IF(IFEPTOP.GT.0) THEN
         QTOTALB = ZERO
         DO IFFAT=1,N2FFAT
            QTOTALB = QTOTALB + CHARGB(IFFAT)
         ENDDO
         DIFFB = QTOTALB - DBLE(NINT(QTOTALB))
         IF(MASWRK) THEN
            IF(DIFFB.GT.1.0D-7 .OR. DIFFB.LT.-1.0D-7) THEN
               WRITE(IW,*) ' '
               WRITE(IW,*)
     *         ' ** WARNING: TOTAL MM CHARGE IN $FFDATB IS NOT',
     *         ' AN INTEGER **'
            END IF
            WRITE(IW,'(A,F15.7,A)') ' TOTAL MM    CHARGE = ',QTOTALB,
     *                              ' IN $FFDATB.'
            WRITE(IW,*)' '
         END IF
      END IF
C
C     -- DEFINE NUMBER OF POINTS FOR QM IMAGE IN MEANFLD --
C
      NIMGPT = NAT   *MIN(1,MEANFLD)*MIN(1,MFQMCHG)
      NIMBPT = MATOMB*MIN(1,MEANFLD)*MIN(1,MFQMCHG)
C
C     -- MATCH QM AND MM ATOMS -- 
C        (THIS CODE WORKS ONLY FOR IFEPTOP=1)
C
      CALL VICLR(LISTQM,1,NFFAT+NAT+1)
      NLAT = NAT
      KFREEACHECK = KFREEA(501)
      DO 310 IAT =1, NAT           !  ALWAYS QM A
         DO IFFAT =1,NFFAT         !  ALWAYS MM A
            DIFF = ABS(C(1,IAT)-CORD(1,IFFAT))
     *            +ABS(C(2,IAT)-CORD(2,IFFAT))
     *            +ABS(C(3,IAT)-CORD(3,IFFAT))
            IF(DIFF.LT.0.01D+00) THEN
               LISTQM(IFFAT    )   = IAT
               LISTQM(NFFAT+IAT)   = IFFAT
               LISTQM(NFFAT+NAT+1) = LISTQM(NFFAT+NAT+1) + 1
C              -- ENFORCE MM COORD, VEL AND MASS
C              -- WILL ENFORCE FORCES IN MD OR OPT
               C(1,IAT)      = CORD(1,IFFAT)
               C(2,IAT)      = CORD(2,IFFAT)
               C(3,IAT)      = CORD(3,IFFAT)
               QMVEL(1,IAT)  = VEL(1,IFFAT)
               QMVEL(2,IAT)  = VEL(2,IFFAT)
               QMVEL(3,IAT)  = VEL(3,IFFAT)
               ZMASS(IAT)    = ZMAS(IFFAT)/1822.88850204D+00
               QMZMAS(IAT)   = ZMAS(IFFAT)
               QM1MAS(IAT)   = ONEMAS(IFFAT)
               IF(ATMNAM(IFFAT  )(1:2).EQ.'O1'.AND.
     *            ATMNAM(IFFAT+1)(1:2).EQ.'H2'.AND.
     *            ATMNAM(IFFAT+2)(1:2).EQ.'H3'.AND.
     *            ATMNAM(IFFAT+3)(1:2).EQ.'L4'.AND.
     *            ATMNAM(IFFAT+4)(1:2).EQ.'L5') THEN
                  IRATQM          = 1
                  NLAT            = NLAT + 1
                  KFREEACHECK     = KFREEACHECK - 1
                  LISTQM(IFFAT+3) = NLAT
                  C(1,NLAT)       = CORD(1,IFFAT+3)
                  C(2,NLAT)       = CORD(2,IFFAT+3)
                  C(3,NLAT)       = CORD(3,IFFAT+3)
                  QMVEL(1,NLAT)   = VEL(1,IFFAT+3)
                  QMVEL(2,NLAT)   = VEL(2,IFFAT+3)
                  QMVEL(3,NLAT)   = VEL(3,IFFAT+3)
                  ZMASS(NLAT)     = ZMAS(IFFAT+3)/1822.88850204D+00
                  QMZMAS(NLAT)    = ZMAS(IFFAT+3)
                  QM1MAS(NLAT)    = ONEMAS(IFFAT+3)
                  NLAT            = NLAT + 1
                  KFREEACHECK     = KFREEACHECK - 1
                  LISTQM(IFFAT+4) = NLAT
                  C(1,NLAT)       = CORD(1,IFFAT+4)
                  C(2,NLAT)       = CORD(2,IFFAT+4)
                  C(3,NLAT)       = CORD(3,IFFAT+4)
                  QMVEL(1,NLAT)   = VEL(1,IFFAT+4)
                  QMVEL(2,NLAT)   = VEL(2,IFFAT+4)
                  QMVEL(3,NLAT)   = VEL(3,IFFAT+4)
                  QMZMAS(NLAT)    = ZMAS(IFFAT+4)
                  QM1MAS(NLAT)    = ONEMAS(IFFAT+4)
               END IF
               IF(NLAT.GT.MXATM) THEN
                  IF(MASWRK) WRITE(IW,'(1X,A/)')
     *            'ERROR: NLAT EXCEEDED MXATM.'
                  CALL ABRT             
               END IF
C              -- CREATE A CHARGE IMAGE OF THE QM REGION
               IF(MEANFLD.GT.0.AND.MFQMCHG.EQ.1) THEN
                  CHGIMG(IAT)   = CHARG(IFFAT)
                  CRDIMG(1,IAT) = CORD(1,IFFAT)
                  CRDIMG(2,IAT) = CORD(2,IFFAT)
                  CRDIMG(3,IAT) = CORD(3,IFFAT)
                  IF(IFEPTOP.EQ.1) THEN
                     JAT = LISTAQM(IAT)
                     IF(JAT.GT.0) THEN
                        CHGIMB(JAT)   = CHARGB(IFFAT)
                        CRDIMB(1,JAT) = CORDB(1,IFFAT)
                        CRDIMB(2,JAT) = CORDB(2,IFFAT)
                        CRDIMB(3,JAT) = CORDB(3,IFFAT)
                     END IF
                  END IF
                  IF(ATMNAM(IFFAT  )(1:2).EQ.'O1'.AND.
     *               ATMNAM(IFFAT+1)(1:2).EQ.'H2'.AND.
     *               ATMNAM(IFFAT+2)(1:2).EQ.'H3'.AND.
     *               ATMNAM(IFFAT+3)(1:2).EQ.'L4'.AND.
     *               ATMNAM(IFFAT+4)(1:2).EQ.'L5') THEN
                     NIMGPT = NIMGPT + 1
                     CHGIMG(NIMGPT)   = CHARG(IFFAT+3)
                     CRDIMG(1,NIMGPT) = CORD(1,IFFAT+3)
                     CRDIMG(2,NIMGPT) = CORD(2,IFFAT+3)
                     CRDIMG(3,NIMGPT) = CORD(3,IFFAT+3)
                     NIMGPT = NIMGPT + 1
                     CHGIMG(NIMGPT)   = CHARG(IFFAT+4)
                     CRDIMG(1,NIMGPT) = CORD(1,IFFAT+4)
                     CRDIMG(2,NIMGPT) = CORD(2,IFFAT+4)
                     CRDIMG(3,NIMGPT) = CORD(3,IFFAT+4)
                     IF(IFEPTOP.EQ.1) THEN
                        NIMBPT = NIMBPT + 1
                        CHGIMB(NIMBPT)   = CHARGB(IFFAT+3)
                        CRDIMB(1,NIMBPT) = CORDB(1,IFFAT+3)
                        CRDIMB(2,NIMBPT) = CORDB(2,IFFAT+3)
                        CRDIMB(3,NIMBPT) = CORDB(3,IFFAT+3)
                        NIMBPT = NIMBPT + 1
                        CHGIMB(NIMBPT)   = CHARGB(IFFAT+4)
                        CRDIMB(1,NIMBPT) = CORDB(1,IFFAT+4)
                        CRDIMB(2,NIMBPT) = CORDB(2,IFFAT+4)
                        CRDIMB(3,NIMBPT) = CORDB(3,IFFAT+4)
                     END IF
                  END IF
               END IF
               GOTO 310
            END IF
         ENDDO
         IF(MEANFLD.GT.0.AND.MFQMCHG.EQ.1) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: QM REGION MUST BE PART OF THE MM ',
     *      'REGION FOR MFQMCHG=1.'
            CALL ABRT 
         END IF
 310  CONTINUE
C
      IF(LISTQM(NFFAT+NAT+1).GT.0 .AND. MASWRK) THEN
         N = LISTQM(NFFAT+NAT+1)
         WRITE(IW,'(1X,A,1X,I4,1X,A)')
     *   'THE FOLLOWING',N,'MM ATOMS ARE QM ATOMS:'
         WRITE(IW,1003) (LISTQM(NFFAT+I),I=1,N)
         WRITE(IW,*)' '
      END IF
C
C     -- STOP THE JOB IF LISTQM DOES NOT MATCH KFREEA --
C
      IF(IFEPTYP.GT.0.AND.NAT.GT.0) THEN
         IWRONG = 0
         IF(NAT.NE.KFREEACHECK) IWRONG = 1
         IF(LISTQM(NFFAT+NAT+1).NE.KFREEACHECK) IWRONG = 1
         DO IAT=1, NAT
            IWRONG = IWRONG + 1
            IFFAT=LISTQM(NFFAT+IAT)
            DO JJJ=1,KFREEA(501)
               J = KFREEA(JJJ)
               IF(IFFAT.EQ.J) IWRONG = IWRONG - 1
            ENDDO
         ENDDO
         IF(IWRONG.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: KFREEA MUST INCLUDE ALL AND ONLY MM ATOMS',
     *      ' THAT ARE QM ATOMS.'
            CALL ABRT
         END IF
         IF(MATOMA.NE.KFREEACHECK) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: MATOMA NOT MATCH WITH KFREEA(1).'
            CALL ABRT
         END IF
      END IF
C
C     -- IF ALL QM ATOMS ARE MM ATOMS, SET INPQMV=1 --
C        (QM ATOMS WILL ACCEPT MM VELOCITIES LATER)
C
      IF(INPMMV.GT.0.AND.LISTQM(NFFAT+NAT+1).EQ.NAT) INPQMV = 1
C
C     -- GENERATE LACTMM AND LACTQM FROM LACTMM AND LACTQM --
C        THE RESULTED LACTMM AND LACTQM ARE IN FULL AGREEMENT:
C        1. IF LACTMM FIX, LACTQM MAY NOT FIX, BUT WILL NOT MOVE.
C        2. IF LACTMM MOVE, LACTQM MAY NOT MOVE, BUT WILL NOT FIX.
C
      NSVMM = NACTMM
      NSVQM = NACTQM
      IF((NACTMM.GT.0.AND.NACTMM.LE.10).OR.
     *   (NACTQM.GT.0.AND.NACTQM.LE.10)    ) THEN
         IF(NSVMM.LE.10) NACTMM = 0
         DO IFFAT=1,NFFAT
            IYES = 0
            IF(NSVMM.LE.10) THEN
            DO I=1,NSVMM
               LFFAT = LACTMM(2020-2*I+2)
               XACT = CORD(1,LFFAT)
               YACT = CORD(2,LFFAT)
               ZACT = CORD(3,LFFAT)
               RACT = DBLE(LACTMM(2020-2*I+1))*1.0D-10
               RACT2= RACT*RACT
               DX   = CORD(1,IFFAT) - XACT
               DY   = CORD(2,IFFAT) - YACT
               DZ   = CORD(3,IFFAT) - ZACT
               PBCX = XBOX * ANINT(DX*ONEXBOX)
               PBCY = YBOX * ANINT(DY*ONEYBOX)
               PBCZ = ZBOX * ANINT(DZ*ONEZBOX)
               DX   = DX - PBCX
               DY   = DY - PBCY
               DZ   = DZ - PBCZ
               R2   = DX*DX+DY*DY+DZ*DZ
               IF(R2.LE.RACT2) IYES = 1
            ENDDO
            END IF
            IF(NSVQM.LE.10) THEN
            DO I=1,NSVQM
               LAT = LACTQM(2020-2*I+2)
               XACT = C(1,LAT)
               YACT = C(2,LAT)
               ZACT = C(3,LAT)
               RACT = DBLE(LACTQM(2020-2*I+1))*1.0D-10
               RACT2= RACT*RACT
               DX   = CORD(1,IFFAT) - XACT
               DY   = CORD(2,IFFAT) - YACT
               DZ   = CORD(3,IFFAT) - ZACT
               PBCX = XBOX * ANINT(DX*ONEXBOX)
               PBCY = YBOX * ANINT(DY*ONEYBOX)
               PBCZ = ZBOX * ANINT(DZ*ONEZBOX)
               DX   = DX - PBCX
               DY   = DY - PBCY
               DZ   = DZ - PBCZ
               R2   = DX*DX+DY*DY+DZ*DZ
               IF(R2.LE.RACT2) IYES = 1
            ENDDO
            END IF
            IF(IYES.EQ.1) THEN
               NACTMM = NACTMM + 1
               LACTMM(NACTMM) = IFFAT
            END IF
         ENDDO
         IF(NACTMM.GT.2000) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: LACTMM EXCEEDED 2000 DUE TO LARGE LACTMM RADIUS.'
            CALL ABRT
         END IF
         IF(NSVQM.LE.10) NACTQM = 0
         DO IAT=1,NAT
            IYES = 0
            IF(NSVMM.LE.10) THEN
            DO I=1,NSVMM
               LFFAT = LACTMM(2020-2*I+2)
               XACT = CORD(1,LFFAT)
               YACT = CORD(2,LFFAT)
               ZACT = CORD(3,LFFAT)
               RACT = DBLE(LACTMM(2020-2*I+1))*1.0D-10
               RACT2= RACT*RACT
               DX   = C(1,IAT) - XACT
               DY   = C(2,IAT) - YACT
               DZ   = C(3,IAT) - ZACT
               PBCX = XBOX * ANINT(DX*ONEXBOX)
               PBCY = YBOX * ANINT(DY*ONEYBOX)
               PBCZ = ZBOX * ANINT(DZ*ONEZBOX)
               DX   = DX - PBCX
               DY   = DY - PBCY
               DZ   = DZ - PBCZ
               R2   = DX*DX+DY*DY+DZ*DZ
               IF(R2.LE.RACT2) IYES = 1
            ENDDO
            END IF
            IF(NSVQM.LE.10) THEN
            DO I=1,NSVQM
               LAT = LACTQM(2020-2*I+2)
               XACT = C(1,LAT)
               YACT = C(2,LAT)
               ZACT = C(3,LAT)
               RACT = DBLE(LACTQM(2020-2*I+1))*1.0D-10
               RACT2= RACT*RACT
               DX   = C(1,IAT) - XACT
               DY   = C(2,IAT) - YACT
               DZ   = C(3,IAT) - ZACT
               PBCX = XBOX * ANINT(DX*ONEXBOX)
               PBCY = YBOX * ANINT(DY*ONEYBOX)
               PBCZ = ZBOX * ANINT(DZ*ONEZBOX)
               DX   = DX - PBCX
               DY   = DY - PBCY
               DZ   = DZ - PBCZ
               R2   = DX*DX+DY*DY+DZ*DZ
               IF(R2.LE.RACT2) IYES = 1
            ENDDO
            END IF
            IF(IYES.EQ.1) THEN
               NACTQM = NACTQM + 1
               LACTQM(NACTQM) = IAT
            END IF
            IF(IYES.EQ.0) THEN
               IF(MASWRK)WRITE(IW,*)' '
               IF(MASWRK)WRITE(IW,*)
     *         'WARNING: SOME QM ATOMS ARE NOT IN LACTMM SPHERES.'
               IF(MASWRK)WRITE(IW,*)' '
            END IF
         ENDDO
      END IF
C
C     -- UPDATE LACTQM AND LACTMM USING LISTQM --
C
      IF(LISTQM(NFFAT+NAT+1).GT.0.AND.(NACTQM+NACTMM).GT.0) THEN
         DO IAT=1,NAT
            IFFAT=LISTQM(NFFAT+IAT)
            IATYES   = 0
            IFFATYES = 0
            DO I=1,NACTMM
               JFFAT = LACTMM(I)
               IF(IFFAT.EQ.JFFAT) IFFATYES = 1
            ENDDO
            DO I=1,NACTQM
               JAT = LACTQM(I)
               IF(IAT.EQ.JAT) IATYES = 1
            ENDDO
            IF(IATYES.EQ.0.AND.IFFATYES.EQ.1) THEN
               NACTQM = NACTQM + 1
               LACTQM(NACTQM) = IAT
            END IF
            IF(IATYES.EQ.1.AND.IFFATYES.EQ.0) THEN
               NACTMM = NACTMM + 1
               LACTMM(NACTMM) = IFFAT
            END IF
         ENDDO
      END IF
      IF(NACTQM.GT.2000) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: LACTQM EXCEEDED 2000 DUE TO LARGE LACTQM RADIUS.'
         CALL ABRT
      END IF
      IF(NACTMM.GT.2000) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: LACTMM EXCEEDED 2000 DUE TO LARGE LACTMM RADIUS.'
         CALL ABRT
      END IF
C
C     -- GOOD PLACE TO CHECK IF HESSIAN IS DOABLE --
C        HESSIAN ATOMS MUST MOVE FREELY: NO FIX, NO RATTLE
C
      IF(RUNTYP.EQ.HSSIAN) THEN
         IYES = 1
         IF((NACTMM+NACTQM).EQ.0) THEN
            IF(NAT.EQ.0.AND.NFFAT.GT.2000) IYES = 0
            IF(NAT.EQ.0.AND.NFIXMM.GT.0)   IYES = 0
         END IF
         IF(NAT.GT.0.AND.NFIXQM.GT.0)      IYES = 0
         IF(IYES.EQ.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: RUNTYP=HESSIAN CANNOT BE PERFORMED DUE TO TOO',
     *      'LARGE SYSTEM, NFIXMM, OR NFIXQM.'
            CALL ABRT
         END IF
      END IF
C
C     -- UPDATE (CLEAN) THE RATTLE LIST FOR IRATQM=0 --
C
      IF(IRATTLE.EQ.0) IRATQM = 0
      IF(IRATQM.EQ.0) THEN
         DO III =1,NRATTLE
            IFFAT = LSTRAT(1,III)
            JFFAT = LSTRAT(2,III)
            IAT   = LISTQM(IFFAT)
            JAT   = LISTQM(JFFAT)
            IF((IAT+JAT).GT.0) DSTRAT(III) = ZERO
         ENDDO
         KRATTLE = 0
         DO III =1,NRATTLE
            IF(DSTRAT(III).GT.ZERO) THEN
               KRATTLE = KRATTLE + 1
               LSTRAT(1,KRATTLE) = LSTRAT(1,III)
               LSTRAT(2,KRATTLE) = LSTRAT(2,III)
               DSTRAT(KRATTLE)   = DSTRAT(III)
            END IF
         ENDDO
         NRATTLE = KRATTLE
      END IF
C
C     -- UPDATE (REMOVE) RATTLE FOR IRMDF ATOMS --
C
      IF(NRATM1.GT.0.AND.NRATM2.GT.0) THEN
         DO III =1,NRATTLE
            IFFAT = LSTRAT(1,III)
            JFFAT = LSTRAT(2,III)
            IF(IFFAT.EQ.NRATM1) DSTRAT(III) = ZERO
            IF(IFFAT.EQ.NRATM2) DSTRAT(III) = ZERO
            IF(JFFAT.EQ.NRATM1) DSTRAT(III) = ZERO
            IF(JFFAT.EQ.NRATM2) DSTRAT(III) = ZERO
         ENDDO
         KRATTLE = 0
         DO III =1,NRATTLE
            IF(DSTRAT(III).GT.ZERO) THEN
               KRATTLE = KRATTLE + 1
               LSTRAT(1,KRATTLE) = LSTRAT(1,III)
               LSTRAT(2,KRATTLE) = LSTRAT(2,III)
               DSTRAT(KRATTLE)   = DSTRAT(III)
            END IF
         ENDDO
         NRATTLE = KRATTLE
      END IF
C
C     -- UPDATE NFIXMM AND NFIXQM AFTER MATCHING --
C
      IF(LISTQM(NFFAT+NAT+1).GT.0) THEN
         DO IAT =1, NAT
            IFFAT = LISTQM(NFFAT+IAT)
            IF(IFFAT.GT.0) THEN
               KDOQM = 0
               DO KFIX=1,NFIXMM
                  IF(IFFAT.EQ.IFIXMM(KFIX)) KDOQM=1
               ENDDO
               DO KFIX=1,NFIXQM
                  IF(IAT  .EQ.IFIXQM(KFIX)) KDOQM=0
               ENDDO
               IF(KDOQM.EQ.1) THEN
                  NFIXQM = NFIXQM + 1
                  IFIXQM(NFIXQM) = IAT
               END IF
               KDOMM = 0
               DO KFIX=1,NFIXQM
                  IF(IAT  .EQ.IFIXQM(KFIX)) KDOMM=1
               ENDDO
               DO KFIX=1,NFIXMM
                  IF(IFFAT.EQ.IFIXMM(KFIX)) KDOMM=0
               ENDDO
               IF(KDOMM.EQ.1) THEN
                  NFIXMM = NFIXMM + 1
                  IFIXMM(NFIXMM) = IFFAT
               END IF
            END IF
         ENDDO
      END IF
      IF(NACTQM.GT.0.AND.NACTQM.LE.NFIXQM) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: LACTQM MUST BE GREATER THAN NFIXQM.'
         CALL ABRT
      END IF
      IF(NACTMM.GT.0.AND.NACTMM.LE.NFIXMM) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: LACTMM MUST BE GREATER THAN NFIXMM.'
         CALL ABRT
      END IF
C
C     -- AUTOMATICALLY GENERATE LKQM LIST --
C        LKQM(1,*) = QM ATOM (E.G. PROTEIN ALPHA CARBON)
C                    IT CAN BE A WEAK QM H ATOM
C        LKQM(2,*) = QM ATOM (E.G. PROTEIN BETA CARBON)
C
      NLKQMM = 0
      IF(NAT.GT.0.AND.NFFAT.GT.0) THEN
      DO IANGL=1,NANGL
         KK1 = KLIST(1,IANGL)
         KK2 = KLIST(2,IANGL)
         KK3 = KLIST(3,IANGL)
         IF(LISTQM(KK1).EQ.0 .AND. LISTQM(KK2).GT.0 .AND.
     *      LISTQM(KK3).GT.0) THEN
            KADD = 1
            DO ILKQMM =1, NLKQMM
               IF(LKQM(1,ILKQMM).EQ.LISTQM(KK2) .AND.
     *            LKQM(2,ILKQMM).EQ.LISTQM(KK3)) KADD = 0
            ENDDO
C           - FOR TIP5P -
            IF((ATMNAM(KK1)(1:2).EQ.'L4'.OR.ATMNAM(KK1)(1:2).EQ.'L5').
     *         AND.ZANF(KK1).EQ.ONE)THEN
               KADD = 0
               CHARG(KK1) = ZERO
            END IF
            IF(KADD.EQ.1) THEN
               NLKQMM = NLKQMM + 1
               LKQM(1,NLKQMM) = LISTQM(KK2)
               LKQM(2,NLKQMM) = LISTQM(KK3)
            END IF
         END IF
         IF(LISTQM(KK3).EQ.0 .AND. LISTQM(KK2).GT.0 .AND.
     *      LISTQM(KK1).GT.0) THEN
            KADD = 1
            DO ILKQMM =1, NLKQMM
               IF(LKQM(1,ILKQMM).EQ.LISTQM(KK2) .AND.
     *            LKQM(2,ILKQMM).EQ.LISTQM(KK1)) KADD = 0
            ENDDO
C           - FOR TIP5P -
            IF((ATMNAM(KK3)(1:2).EQ.'L4'.OR.ATMNAM(KK3)(1:2).EQ.'L5').
     *         AND.ZANF(KK3).EQ.ONE)THEN
               KADD = 0
               CHARG(KK3) = ZERO
            END IF
            IF(KADD.EQ.1) THEN
               NLKQMM = NLKQMM + 1
               LKQM(1,NLKQMM) = LISTQM(KK2)
               LKQM(2,NLKQMM) = LISTQM(KK1)
            END IF
         END IF
         IF(NLKQMM.GT.200) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: TOO MANY QM/MM BOUNDARY COVALENT BONDS'
            CALL ABRT
         END IF
      ENDDO
      END IF
C
C     -- STOP IF LKQM(1,*) OR LKQM(2,*) IS H ATOM IN MM REGION --
C
      DO I=1,NLKQMM
         IF(ZANF(LISTQM(NFFAT+LKQM(1,I))).LT.1.001D+00.OR.
     *      ZANF(LISTQM(NFFAT+LKQM(2,I))).LT.1.001D+00    ) THEN
            IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *      'ERROR: THE MM OR QM BOUNDARY ATOMS CANNOT BE H ATOMS,',
     *      ' OR L* POINTS.'
            CALL ABRT
         END IF
      ENDDO
C
C     -- ZERO OFF MM NONBOND INTERACTIONS IF PART OF QM
C        (WE ALSO ZERO OFF MM B)
C
      LINKOK = 0
      DO 340 IFFAT =1,NFFAT
         KK = LISTQM(IFFAT)
         IF(KK.GT.0) THEN
            CLPR(1,IFFAT) = ZERO
            CLPR(2,IFFAT) = ZERO
            CLPR(3,IFFAT) = ZERO
            CLPR(4,IFFAT) = ZERO
            ZLPR(1,IFFAT) = ZERO
            ZLPR(2,IFFAT) = ZERO
            ZLPR(3,IFFAT) = ZERO
            ZLPR(4,IFFAT) = ZERO
            CHARG(IFFAT)  = ZERO
            POL(IFFAT)    = ZERO
            IF(LJQMMM.EQ.0) THEN
               SIG(IFFAT)    = ZERO
               EPS(IFFAT)    = ZERO
               SIG2(IFFAT)   = ZERO
               EPS2(IFFAT)   = ZERO
            END IF
            IF(IFEPTOP.EQ.1) THEN
               CLPRB(1,IFFAT) = ZERO
               CLPRB(2,IFFAT) = ZERO
               CLPRB(3,IFFAT) = ZERO
               CLPRB(4,IFFAT) = ZERO
               ZLPRB(1,IFFAT) = ZERO
               ZLPRB(2,IFFAT) = ZERO
               ZLPRB(3,IFFAT) = ZERO
               ZLPRB(4,IFFAT) = ZERO
               CHARGB(IFFAT)  = ZERO
               POLB(IFFAT)    = ZERO
               IF(LJQMMM.EQ.0) THEN
                  SIGB(IFFAT)    = ZERO
                  EPSB(IFFAT)    = ZERO
                  SIG2B(IFFAT)   = ZERO
                  EPS2B(IFFAT)   = ZERO
               END IF
            END IF
C
            LNK = 0
            DO III = 1, NLKQMM
               IF(KK.EQ.LKQM(1,III)) LNK=LNK + 1
            ENDDO
            LINKOK = LINKOK + LNK
C
         END IF
 340  CONTINUE
      IF(LINKOK.NE.NLKQMM) THEN
         IF(MASWRK) WRITE(IW,*)'LINKOK=',LINKOK,'NLKQMM=',NLKQMM
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: FAILED TO LINK QM-MM ATOMS.'
         CALL ABRT
      END IF
C
C     -- APPLY DEFAULT QMREP IF BOTH LKQM(1,*) AND LKQM(2,*) ARE
C        CARBON ATOMS IN MM REGION, AND LKQM(1,*) IS H --
C
      DO I=1,NLKQMM
         IFFAT = LISTQM(NFFAT+LKQM(1,I))
         JFFAT = LISTQM(NFFAT+LKQM(2,I))
         IAT   = LKQM(1,I)
         JAT   = LKQM(2,I)
         IF(NINT(ZANF(IFFAT)).NE.1.AND.NINT(ZANF(JFFAT)).NE.1.AND.
     *      NINT(ZAN(IAT)).EQ.1.AND.NINT(ZAN(JAT)).NE.1)   THEN 
            IF(MASWRK)WRITE(IW,'(A,1X,I6,A)')
     *      ' APPLYING DEFAULT QMREP TO QM CAPPING H ATOM', IAT,
     *      ': C=3.0  Z=3.0'
            CLPR(1,IFFAT) = 3.0D+00
            CLPR(2,IFFAT) = ZERO
            CLPR(3,IFFAT) = ZERO
            CLPR(4,IFFAT) = ZERO
            ZLPR(1,IFFAT) = 3.0D+00
            ZLPR(2,IFFAT) = ZERO
            ZLPR(3,IFFAT) = ZERO
            ZLPR(4,IFFAT) = ZERO
            IF(IFEPTOP.EQ.1) THEN
               CLPRB(1,IFFAT) = CLPR(1,IFFAT)
               CLPRB(2,IFFAT) = CLPR(2,IFFAT)
               CLPRB(3,IFFAT) = CLPR(3,IFFAT)
               CLPRB(4,IFFAT) = CLPR(4,IFFAT)
               ZLPRB(1,IFFAT) = ZLPR(1,IFFAT)
               ZLPRB(2,IFFAT) = ZLPR(2,IFFAT)
               ZLPRB(3,IFFAT) = ZLPR(3,IFFAT)
               ZLPRB(4,IFFAT) = ZLPR(4,IFFAT)
            END IF
         END IF
      ENDDO
      IF(NLKQMM.GT.0.AND.MASWRK) WRITE(IW,*)' '
C
C     -- APPLY INPUT QMREP VALUES --
C
      DO III = 1, NQMREP
         IIIOK = 0
         DO I=1,NLKQMM
            IF(IATREP(III).EQ.LKQM(1,I)) IIIOK = 1
         ENDDO
         IF(IIIOK.EQ.0.AND.MASWRK) THEN
            WRITE(IW,'(A,1X,I6,1X,A)')' WARNING: QMREP ATOM',
     *      IATREP(III),'IS NOT A QM CAPPING ATOM.'
         END IF
         IFFAT = LISTQM(NFFAT+IATREP(III))
         IF(IFFAT.GT.0) THEN
            IF(MASWRK)WRITE(IW,'(A,1X,I6)')
     *      ' APPLYING INPUT QMREP TO QM CAPPING H ATOM', IATREP(III)
            CLPR(1,IFFAT) = CRPIAT(1,III)
            CLPR(2,IFFAT) = CRPIAT(2,III)
            CLPR(3,IFFAT) = CRPIAT(3,III)
            CLPR(4,IFFAT) = CRPIAT(4,III)
            ZLPR(1,IFFAT) = ZRPIAT(1,III)
            ZLPR(2,IFFAT) = ZRPIAT(2,III)
            ZLPR(3,IFFAT) = ZRPIAT(3,III)
            ZLPR(4,IFFAT) = ZRPIAT(4,III)
            IF(IFEPTOP.EQ.1) THEN
               CLPRB(1,IFFAT) = CRPIAT(1,III)
               CLPRB(2,IFFAT) = CRPIAT(2,III)
               CLPRB(3,IFFAT) = CRPIAT(3,III)
               CLPRB(4,IFFAT) = CRPIAT(4,III)
               ZLPRB(1,IFFAT) = ZRPIAT(1,III)
               ZLPRB(2,IFFAT) = ZRPIAT(2,III)
               ZLPRB(3,IFFAT) = ZRPIAT(3,III)
               ZLPRB(4,IFFAT) = ZRPIAT(4,III)
            END IF
         END IF
      ENDDO
C
C     -- CHECK QMREP FOR CAPPING QM ATOMS
C
      DO I=1,NLKQMM
         IFFAT = LISTQM(NFFAT+LKQM(1,I))
         IAT   = LKQM(1,I)
         IF(CLPR(1,IFFAT).EQ.ZERO.OR.ZLPR(1,IFFAT).EQ.ZERO) THEN
            IF(MASWRK)WRITE(IW,'(A,1X,I6)')
     *      ' WARNING: NO QMREP IS USED FOR QM CAPPING ATOM', IAT
         END IF
      ENDDO
      IF(NLKQMM.GT.0.AND.MASWRK) WRITE(IW,*)' '
C
C     -- ESTABLISH EXCLUSION LIST FOR QM ATOMS --
C
      IF(NAT.GT.0 .AND. LJQMMM.EQ.1) THEN
C        - MAKE IT LOOK LIKE L1213J LIST.
C          HUI: NO NEED TO TOUCH L1213A, L1213B, L1213PMA, L1213PMB
         DO 341 IAT = 1, NAT
            IF(LISTQM(NFFAT+IAT).GT.0) THEN
               KK1 = LISTQM(NFFAT+IAT)
               DO 342 JAT = IAT+1, NAT
                  IF(LISTQM(NFFAT+JAT).GT.0) THEN
                     KK2 = LISTQM(NFFAT+JAT)
                     DO I1213J=1, N1213J
                        LL1 = L1213J(1,I1213J)
                        LL2 = L1213J(2,I1213J)
                        IF((KK1.EQ.LL1 .AND. KK2.EQ.LL2) .OR.
     *                     (KK1.EQ.LL2 .AND. KK2.EQ.LL1)) THEN
                           GOTO 342
                        END IF
                     ENDDO
                     N1213J = N1213J + 1
                     L1213J(1,N1213J)=KK1
                     L1213J(2,N1213J)=KK2
                  END IF
 342           CONTINUE
            ELSE
               IF(MASWRK) WRITE(IW,'(1X,A,A/)')
     *         'ERROR: QM REGION MUST BE PART OF THE MM REGION ',
     *         'TO USE LJQMMM=1.'
               CALL ABRT 
            END IF
 341     CONTINUE
C
C        - SHRINK THE L14J LIST
C          HUI: NO NEED TO TOUCH L14A, L14B, L14PMA, L14PMB
         N14JNEW = 0
         DO I14J = 1, N14J
            LL1 = L14J(1,I14J)
            LL2 = L14J(2,I14J)
            IF(LISTQM(LL1).GT.0.AND.LISTQM(LL2).GT.0)THEN
            ELSE
               N14JNEW = N14JNEW + 1
               L14J(1,N14JNEW) = LL1
               L14J(2,N14JNEW) = LL2
            END IF
         ENDDO
         DO I14J = N14JNEW+1, N14J
            L14J(1,I14J) = 0
            L14J(2,I14J) = 0
         ENDDO
         N14J = N14JNEW
      END IF
C
C
C     -- ZERO OFF QMMMREP FOR MM ATOMS THAT FORM
C        BONDS TO QM ATOMS (TYPICALLY H).
C
      DO IBOND=1,NBOND
         KK1 = IPAIR(1,IBOND)
         KK2 = IPAIR(2,IBOND)
         IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).EQ.0 .OR.
     *      LISTQM(KK1).EQ.0 .AND. LISTQM(KK2).GT.0) THEN
            IF(LISTQM(KK2).EQ.0) IFFAT = KK2
            IF(LISTQM(KK1).EQ.0) IFFAT = KK1
            DO III = 1, 4
               CLPR(III,IFFAT) = ZERO
               ZLPR(III,IFFAT) = ZERO
               IF(IFEPTOP.EQ.1) THEN
                  CLPRB(III,IFFAT) = ZERO
                  ZLPRB(III,IFFAT) = ZERO
               END IF
            ENDDO
         END IF
      ENDDO
C
C     -- ZERO OFF MM COVALENT TERMS FOR QM ATOMS
C        SOME MAY RETAIN
C
      DO IBOND=1,NBOND
         KK1 = IPAIR(1,IBOND)
         KK2 = IPAIR(2,IBOND)
         IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).GT.0) THEN
            LNK = 0
            DO III = 1, NLKQMM
               JJ1 = LKQM(1,III)
               JJ2 = LKQM(2,III)
               IF((LISTQM(KK1).EQ.JJ1.AND.LISTQM(KK2).EQ.JJ2) .OR.
     *            (LISTQM(KK2).EQ.JJ1.AND.LISTQM(KK1).EQ.JJ2))
     *             LNK = 1
            ENDDO
            IF(LNK.EQ.0) THEN
               IF(IFEPTOP.EQ.1) THEN
                  IB1 = LISTAQM(LISTQM(KK1))
                  IB2 = LISTAQM(LISTQM(KK2))
                  IF(IB1.GT.0.AND.IB2.GT.0) THEN
                     FCBOND (IBOND) = ZERO
                     FCBONDB(IBOND) = ZERO
                  ELSE
C                    - IT IS SAFE TO SIMPLY SCALE IT BECAUSE $FFDATA
C                      AND $FFDATB HAVE ALREADY BEEN PRINTED OUT.
                     FCBOND (IBOND) = FCBOND (IBOND)*WSIMUL
                     FCBONDB(IBOND) = FCBONDB(IBOND)*WSIMUL
                  END IF
               ELSE
                  FCBOND(IBOND) = ZERO
               END IF
            END IF
            IF(LNK.EQ.1) FCBOND(IBOND) = -ABS(FCBOND(IBOND))*1.0D+10
         END IF
      ENDDO
      DO IANGL=1,NANGL
         KK1 = KLIST(1,IANGL)
         KK2 = KLIST(2,IANGL)
         KK3 = KLIST(3,IANGL)
         IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).GT.0
     *                       .AND. LISTQM(KK3).GT.0) THEN
            LNK = 0
            DO III = 1, NLKQMM
               JJ1 = LKQM(1,III)
               JJ2 = LKQM(2,III)
               IF((LISTQM(KK1).EQ.JJ1.AND.LISTQM(KK2).EQ.JJ2) .OR.
     *            (LISTQM(KK3).EQ.JJ1.AND.LISTQM(KK2).EQ.JJ2))
     *             LNK = 1
            ENDDO
            IF(LNK.EQ.0) THEN
               IF(IFEPTOP.EQ.1) THEN
                  IB1 = LISTAQM(LISTQM(KK1))
                  IB2 = LISTAQM(LISTQM(KK2))
                  IB3 = LISTAQM(LISTQM(KK3))
                  IF(IB1.GT.0.AND.IB2.GT.0.AND.IB3.GT.0) THEN
                     FCANGL (IANGL) = ZERO
                     FCANGLB(IANGL) = ZERO
                     FCSTBD(1,IANGL)= ZERO
                     FCSTBD(2,IANGL)= ZERO
                  ELSE
C                    - IT IS SAFE TO SIMPLY SCALE IT BECAUSE $FFDATA
C                      AND $FFDATB HAVE ALREADY BEEN PRINTED OUT.
                     FCANGL (IANGL) = FCANGL (IANGL)*WSIMUL
                     FCANGLB(IANGL) = FCANGLB(IANGL)*WSIMUL
                  END IF
               ELSE
                  FCANGL(IANGL) = ZERO
               END IF
            END IF
            IF(LNK.EQ.1) FCANGL(IANGL) = -ABS(FCANGL(IANGL))*1.0D+10
         END IF
      ENDDO
      DO IDIHR=1,NDIHR
         KK1 = LLIST(1,IDIHR)
         KK2 = LLIST(2,IDIHR)
         KK3 = LLIST(3,IDIHR)
         KK4 = LLIST(4,IDIHR)
         IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).GT.0 .AND.
     *      LISTQM(KK3).GT.0 .AND. LISTQM(KK4).GT.0) THEN
            LNK = 0
            DO III = 1, NLKQMM
               JJ1 = LKQM(1,III)
               JJ2 = LKQM(2,III)
               IF((LISTQM(KK1).EQ.JJ1.AND.LISTQM(KK2).EQ.JJ2) .OR.
     *            (LISTQM(KK4).EQ.JJ1.AND.LISTQM(KK3).EQ.JJ2))
     *             LNK = 1
            ENDDO
            IF(LNK.EQ.0) THEN
               IF(IFEPTOP.EQ.1) THEN
                  IB1 = LISTAQM(LISTQM(KK1))
                  IB2 = LISTAQM(LISTQM(KK2))
                  IB3 = LISTAQM(LISTQM(KK3))
                  IB4 = LISTAQM(LISTQM(KK4))
                  IF(IB1.GT.0.AND.IB2.GT.0.AND.
     *               IB3.GT.0.AND.IB4.GT.0) THEN
                     VROT (IDIHR) = ZERO
                     VROTB(IDIHR) = ZERO
                  ELSE
C                    - IT IS SAFE TO SIMPLY SCALE IT BECAUSE $FFDATA
C                      AND $FFDATB HAVE ALREADY BEEN PRINTED OUT.
                     VROT (IDIHR) = VROT (IDIHR)*WSIMUL
                     VROTB(IDIHR) = VROTB(IDIHR)*WSIMUL
                  END IF
               ELSE
                  VROT(IDIHR) = ZERO
               END IF
            END IF
            IF(LNK.EQ.1) VROT(IDIHR) = -ABS(VROT(IDIHR))*1.0D+30
         END IF
      ENDDO
      DO IDIHB=1,NDIHB
         KK1 = NLIST(1,IDIHB)
         KK2 = NLIST(2,IDIHB)
         KK3 = NLIST(3,IDIHB)
         KK4 = NLIST(4,IDIHB)
         IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).GT.0 .AND.
     *      LISTQM(KK3).GT.0 .AND. LISTQM(KK4).GT.0) THEN
            IF(IFEPTOP.EQ.1) THEN
               IB1 = LISTAQM(LISTQM(KK1))
               IB2 = LISTAQM(LISTQM(KK2))
               IB3 = LISTAQM(LISTQM(KK3))
               IB4 = LISTAQM(LISTQM(KK4))
               IF(IB1.GT.0.AND.IB2.GT.0.AND.
     *            IB3.GT.0.AND.IB4.GT.0) THEN
                  FCDIHB (IDIHB) = ZERO
                  FCDIHBB(IDIHB) = ZERO
               ELSE
C                 - IT IS SAFE TO SIMPLY SCALE IT BECAUSE $FFDATA
C                   AND $FFDATB HAVE ALREADY BEEN PRINTED OUT.
                  FCDIHB (IDIHB) = FCDIHB (IDIHB)*WSIMUL
                  FCDIHBB(IDIHB) = FCDIHBB(IDIHB)*WSIMUL
               END IF
            ELSE
               FCDIHB(IDIHB) = ZERO
            END IF
         END IF
      ENDDO
      DO IWAGG=1,NWAGG
         KK1 = MLIST(1,IWAGG)
         KK2 = MLIST(2,IWAGG)
         KK3 = MLIST(3,IWAGG)
         KK4 = MLIST(4,IWAGG)
         IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).GT.0 .AND.
     *      LISTQM(KK3).GT.0 .AND. LISTQM(KK4).GT.0) THEN
            IF(IFEPTOP.EQ.1) THEN
               IB1 = LISTAQM(LISTQM(KK1))
               IB2 = LISTAQM(LISTQM(KK2))
               IB3 = LISTAQM(LISTQM(KK3))
               IB4 = LISTAQM(LISTQM(KK4))
               IF(IB1.GT.0.AND.IB2.GT.0.AND.
     *            IB3.GT.0.AND.IB4.GT.0) THEN
                  FCWAGG (IWAGG) = ZERO
                  FCWAGGB(IWAGG) = ZERO
               ELSE
C                 - IT IS SAFE TO SIMPLY SCALE IT BECAUSE $FFDATA
C                   AND $FFDATB HAVE ALREADY BEEN PRINTED OUT.
                  FCWAGG (IWAGG) = FCWAGG (IWAGG)*WSIMUL
                  FCWAGGB(IWAGG) = FCWAGGB(IWAGG)*WSIMUL
               END IF
            ELSE
               FCWAGG(IWAGG) = ZERO
            END IF
         END IF
      ENDDO
C
C     -- DUPLICATE THE READ IN MM MOLECULE 'NCOPY' TIMES --
C        HUI LI
C
      IF(NFOLD.EQ.0) GOTO 350
C
      IF(NFOLD.GT.0) THEN
         IF(NCMAP.GT.0) THEN
            IF(MASWRK) WRITE(IW,'(1X,A/)')
     *      'ERROR: NFOLD CANNOT BE APPLIED TO CMAP.'
            CALL ABRT
         END IF
      END IF
      NCOPY = 2**NFOLD
      DO KCOPY=2, NCOPY
         KK = (KCOPY-1)*NFFAT+1
         DO IFFAT=1, NFFAT
            ATMNAM(KK+IFFAT-1) =ATMNAM(IFFAT)
         ENDDO
         CALL DCOPY(3*NFFAT,   VEL,1, VEL(1,KK),1)
         CALL DCOPY(  NFFAT,  ZANF,1,  ZANF(KK),1)
         CALL DCOPY(  NFFAT,  ZMAS,1,  ZMAS(KK),1)
         CALL DCOPY(  NFFAT,ONEMAS,1,ONEMAS(KK),1)
         CALL DCOPY(  NFFAT, CHARG,1, CHARG(KK),1)
         CALL DCOPY(  NFFAT,   POL,1,   POL(KK),1)
         CALL DCOPY(  NFFAT,   SIG,1,   SIG(KK),1)
         CALL DCOPY(  NFFAT,   EPS,1,   EPS(KK),1)
         CALL DCOPY(  NFFAT,  SIG2,1,  SIG2(KK),1)
         CALL DCOPY(  NFFAT,  EPS2,1,  EPS2(KK),1)
         CALL DCOPY(4*NFFAT,  CLPR,1,CLPR(1,KK),1)
         CALL DCOPY(4*NFFAT,  ZLPR,1,ZLPR(1,KK),1)
         CALL ICOPY(  NFFAT,  NLPR,1,  NLPR(KK),1)
         CALL ICOPY(  NFFAT, NTYPE,1, NTYPE(KK),1)
         KK = (KCOPY-1)*NBOND+1
         CALL DCOPY(  NBOND, BOND0,1, BOND0(KK),1)
         CALL DCOPY(  NBOND,FCBOND,1,FCBOND(KK),1)
         KK = (KCOPY-1)*NANGL+1
         CALL DCOPY(  NANGL, ANGL0,1, ANGL0(KK),1)
         CALL DCOPY(  NANGL,FCANGL,1,FCANGL(KK),1)
         CALL DCOPY(2*NANGL,FCSTBD,1,FCSTBD(1,KK),1)
         KK = (KCOPY-1)*NDIHR+1
         CALL DCOPY(  NDIHR,  GAMA,1,  GAMA(KK),1)
         CALL ICOPY(  NDIHR,   NNN,1,   NNN(KK),1)
         CALL DCOPY(  NDIHR,  VROT,1,  VROT(KK),1)
         CALL DCOPY(3*NDIHR,FCDIHR,1,FCDIHR(1,KK),1)
         KK = (KCOPY-1)*NDIHB+1
         CALL DCOPY(  NDIHB, DIHB0,1, DIHB0(KK),1)
         CALL DCOPY(  NDIHB,FCDIHB,1,FCDIHB(KK),1)
         KK = (KCOPY-1)*NWAGG+1
         CALL DCOPY(  NWAGG,FCWAGG,1,FCWAGG(KK),1)
      ENDDO
      SIZE =RFOLD/2.0D+00
      DO IFOLD = 1, NFOLD
         IXYZ1 = MOD(IFOLD,3)
         IF(IXYZ1.EQ.1) IXYZ2 = 2
         IF(IXYZ1.EQ.1) IXYZ3 = 3
         IF(IXYZ1.EQ.2) IXYZ2 = 1
         IF(IXYZ1.EQ.2) IXYZ3 = 3
         IF(IXYZ1.EQ.0) IXYZ2 = 1
         IF(IXYZ1.EQ.0) IXYZ3 = 2
         IF(IXYZ1.EQ.0) IXYZ1 = 3
         IF(IXYZ1.EQ.1) SIZE  = SIZE*2.0D+00
         NDONE  = 2**(IFOLD-1)
         LENGTH = NFFAT*NDONE
         DO III = 1, LENGTH
            CORD(IXYZ1,LENGTH+III) = CORD(IXYZ1,III) + SIZE
            CORD(IXYZ2,LENGTH+III) = CORD(IXYZ2,III)
            CORD(IXYZ3,LENGTH+III) = CORD(IXYZ3,III)
         ENDDO
         LENBOND= NBOND*NDONE
         DO III = 1, LENBOND
            IPAIR(1,   LENBOND+III) = IPAIR(1,   III) + LENGTH
            IPAIR(2,   LENBOND+III) = IPAIR(2,   III) + LENGTH
         ENDDO
         LENANGL= NANGL*NDONE
         DO III = 1, LENANGL
            KLIST(1,   LENANGL+III) = KLIST(1,   III) + LENGTH
            KLIST(2,   LENANGL+III) = KLIST(2,   III) + LENGTH
            KLIST(3,   LENANGL+III) = KLIST(3,   III) + LENGTH
            KBLST(1,   LENANGL+III) = KBLST(1,   III) + LENBOND
            KBLST(2,   LENANGL+III) = KBLST(2,   III) + LENBOND
         ENDDO
         LENDIHR= NDIHR*NDONE
         DO III = 1, LENDIHR
            LLIST(1,   LENDIHR+III) = LLIST(1,   III) + LENGTH
            LLIST(2,   LENDIHR+III) = LLIST(2,   III) + LENGTH
            LLIST(3,   LENDIHR+III) = LLIST(3,   III) + LENGTH
            LLIST(4,   LENDIHR+III) = LLIST(4,   III) + LENGTH
         ENDDO
         LENDIHB= NDIHB*NDONE
         DO III = 1, LENDIHB
            NLIST(1,   LENDIHB+III) = NLIST(1,   III) + LENGTH
            NLIST(2,   LENDIHB+III) = NLIST(2,   III) + LENGTH
            NLIST(3,   LENDIHB+III) = NLIST(3,   III) + LENGTH
            NLIST(4,   LENDIHB+III) = NLIST(4,   III) + LENGTH
         ENDDO
         LENWAGG= NWAGG*NDONE
         DO III = 1, LENWAGG
            MLIST(1,   LENWAGG+III) = MLIST(1,   III) + LENGTH
            MLIST(2,   LENWAGG+III) = MLIST(2,   III) + LENGTH
            MLIST(3,   LENWAGG+III) = MLIST(3,   III) + LENGTH
            MLIST(4,   LENWAGG+III) = MLIST(4,   III) + LENGTH
         ENDDO
         LEN1213J= N1213J*NDONE
         DO III = 1, LEN1213J
            L1213J(1, LEN1213J+III) = L1213J(1,  III) + LENGTH
            L1213J(2, LEN1213J+III) = L1213J(2,  III) + LENGTH
         ENDDO
         LEN14J= N14J*NDONE
         DO III = 1, LEN14J
            L14J(1,     LEN14J+III) = L14J(1,    III) + LENGTH
            L14J(2,     LEN14J+III) = L14J(2,    III) + LENGTH
         ENDDO
      ENDDO
      NFFAT=NFFAT*NCOPY
      NBOND=NBOND*NCOPY
      NANGL=NANGL*NCOPY
      NDIHR=NDIHR*NCOPY
      NDIHB=NDIHB*NCOPY
      NWAGG=NWAGG*NCOPY
      N1213J=N1213J*NCOPY
      N14J = N14J*NCOPY
 350  CONTINUE
C
C     -- ASSIGN INITIAL VELOCITY --
C        (BOTH QM AND MM WILL BE ASSIGNED)
C
      IF((NAT.GT.0.AND.INPQMV.EQ.0).OR.INPMMV.EQ.0.OR.IADDWAT.GT.0)THEN
         IF(MASWRK) WRITE(IW,*) 'ASSIGNING INITIAL VELOCITY...'
         CALL VALFM(LOADFM)
         LSET   = LOADFM   + 1        
         LDX    = LSET     + 3*(NFFAT+NAT)
         LDY    = LDX      + NFFAT+NAT
         LDZ    = LDY      + NFFAT+NAT  
         LAST   = LDZ      + NFFAT+NAT
         NEED   = LAST     - LOADFM -1
         CALL GETFM(NEED)
         CALL INIVEL(VEL,QMVEL,ONEMAS,QM1MAS,
     *               CORD,ZMAS,QMZMAS,X(LSET),X(LDX),X(LDY),X(LDZ),
     *               LISTQM)
         CALL RETFM(NEED)
         CALL TIMIT(1)
         IF(MASWRK) WRITE(IW,*)' '
      END IF
C
C     -- CHECK THE TOTAL CHARGE OF THE QM/MM SYSTEM --
C
      IF(NFFAT.GT.0 .AND. NAT.GT.0)THEN
         QTOTAL = ZERO - CHADDB
         DO IFFAT=1,NFFAT
            QTOTAL = QTOTAL + CHARG(IFFAT)
         ENDDO
         DIFFCHG = QTOTAL - QTOTALSV + DBLE(ICH)
         IF((QTOTAL-QTOTALSV).EQ.ZERO) DIFFCHG = ZERO
C        -- PUT THE ODD CHARGE AT THE MM ATOMS THAT FORM
C           BONDS TO QM ATOMS
C           (ALSO AT THE CHGIMG IF NECESSARY)
         IF(INTCHG.EQ.1) THEN
            NDIVID = 0
            DO IBOND=1,NBOND
               KK1 = IPAIR(1,IBOND)
               KK2 = IPAIR(2,IBOND)
               IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).EQ.0 .OR.
     *            LISTQM(KK1).EQ.0 .AND. LISTQM(KK2).GT.0) THEN
                  NDIVID = NDIVID + 1
               END IF
            ENDDO
            CHGADD = -DIFFCHG/NDIVID
            IF(NDIVID.EQ.0) CHGADD  = ZERO
            IF(NDIVID.EQ.0) DIFFCHG = ZERO
            DO IBOND=1,NBOND
               KK1 = IPAIR(1,IBOND)
               KK2 = IPAIR(2,IBOND)
               IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).EQ.0 .OR.
     *            LISTQM(KK1).EQ.0 .AND. LISTQM(KK2).GT.0) THEN
                  IF(LISTQM(KK2).EQ.0) IFFAT = KK2
                  IF(LISTQM(KK1).EQ.0) IFFAT = KK1
                  CHARG(IFFAT)  = CHARG(IFFAT)  + CHGADD
                  IF(IFEPTOP.EQ.1) THEN
                     CHARGB(IFFAT) = CHARGB(IFFAT) + CHGADD
                  END IF
                  IF(MEANFLD.GT.0.AND.MFQMCHG.EQ.1) THEN
                     IAT = LISTQM(KK1 + KK2 - IFFAT)
                     IF(IAT.GT.0) CHGIMG(IAT) = CHGIMG(IAT) - CHGADD
                     IF(IFEPTOP.EQ.1) THEN
                        IATB = LISTAQM(IAT)
                        IF(IATB.GT.0) CHGIMB(IATB)=CHGIMB(IATB)-CHGADD
                     END IF
                  END IF
               END IF
            ENDDO
         END IF
      END IF
C
C     -- PRINT OUT $QUANPO OPTIONS
C
      IF(MASWRK) THEN
      WRITE(IW,'(1X,3(A,I12,7X))')'NFFAT   =',NFFAT,'NBOND   =',NBOND,
     *                            'NANGL   =',NANGL
      WRITE(IW,'(1X,3(A,I12,7X))')'NDIHR   =',NDIHR,'NDIHB   =',NDIHB,
     *                            'NWAGG   =',NWAGG
      WRITE(IW,*)' '
C
      WRITE(IW,*)' '
      WRITE(IW,*)'    $QUANPO OPTIONS'
      WRITE(IW,*)'    ---------------'
      WRITE(IW,'(/1X,3(A,I12,7X))')
     *   'MXFFAT  =',MXFFAT,'MXBOND  =',MXBOND,'MXANGL  =',MXANGL
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'MXDIHR  =',MXDIHR,'MXDIHB  =',MXDIHB,'MXWAGG  =',MXWAGG
      WRITE(IW,'( 1X,3(A,1P,E12.5,0P,7X))')
     *   'XBOX    =',XBOX*TOANGS,
     *   'YBOX    =',YBOX*TOANGS,
     *   'ZBOX    =',ZBOX*TOANGS
      WRITE(IW,'( 1X,3(A,1P,E12.5,0P,7X))')
     *   'CENTX   =',CENTX*TOANGS,
     *   'CENTY   =',CENTY*TOANGS,
     *   'CENTZ   =',CENTZ*TOANGS
      WRITE(IW,'( 1X,A,I12,7X,A,I12,7X,A,F12.4)')
     *   'IEWALD  =',IEWALD ,'KEWALD  =',KEWALD,'SPLIT   =',SPLIT
      WRITE(IW,'( 1X,A,I12,7X,A,1P,E12.5,7X,A,E12.5,0P)')
     *   'ISHIFT  =',ISHIFT,
     *   'SWRA    =',SWRA*TOANGS,
     *   'SWRB    =',SWRB*TOANGS
      WRITE(IW,'( 1X,A,I12,7X,A,1P,E12.5,7X,A,E12.5,0P)')
     *   'ISWITCH =',ISWITCH,
     *   'SWRAQ   =',SWRAQ*TOANGS,
     *   'SWRBQ   =',SWRBQ*TOANGS
      WRITE(IW,'( 1X,(A,I12,7X),(A,F12.4,7X),(A,1P,E12.5,0P,7X))')
     *   'ISPHSOL =',ISPHSOL,
     *   'RXNEPS  =',RXNEPS,
     *   'RSPHSOL =',RSPHSOL*TOANGS
      WRITE(IW,'( 1X,2(A,F12.4,7X),(A,1P,E12.5,0P,7X))')
     *   'SPHSIG  =',SPHSIG*TOANGS,
     *   'SPHEPS  =',SPHEPS*TOKCAL,
     *   'SPHRAD  =',SPHRAD*TOANGS
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'IDOCHG  =',IDOCHG,'IDOPOL  =',IDOPOL,'IDOLJ   =',IDOLJ
      WRITE(IW,'( 1X,(A,1P,E12.5,0P,7X),2(A,I12,7X))')
     *   'DT      =',DT*2.418884326505D-17,
     *   'NSTEP   =',NSTEP,'INTALG  =',INTALG
      WRITE(IW,'( 1X,A,F12.4,7X,A,I12,7X,A,I12)')
     *   'TEMP0   =',TEMP0,  'ITSTAT  =',ITSTAT,'LJSIGMA =',LJSIGMA
      WRITE(IW,'( 1X,A,F12.4,7X,A,I12,7X,A,I12)')
     *   'PRES0   =',PRES0,  'IPSTAT  =',IPSTAT,'NATPDB  =',NATPDB
      WRITE(IW,'( 1X,A,I12,7X,A,F12.4,7X,A,I12)')
     *   'MXLIST1 =',MXLIST1,'BUFWID1 =',BUFWID1*TOANGS,
     *   'IRMDF   =',NRATM1
      WRITE(IW,'( 1X,A,I12,7X,A,F12.4,7X,A,I12)')
     *   'MXLIST2 =',MXLIST2,'BUFWID2 =',BUFWID2*TOANGS,
     *   'KOUTPBC =',KOUTPBC
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'JOUT    =',JOUT,  'KOUT    =',KOUT,  'LOUT    =',LOUT
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'NFFTYP  =',NFFTYP,'NFFFILE =',NFFFILE,'MMHESS  =',MMHESS
      WRITE(IW,'( 1X,A,F12.7,7X,A,F12.7,7X,A,I12)')
     *   'WT14LJ  =',WT14LJ,'WT14CH  =',WT14CH,'IDOCMAP =',IDOCMAP
      WRITE(IW,'( 1X,A,I12,7X,A,1P,E12.5,0P,7X,A,I12)')
     *   'IHESS   =',IHESS,'POLTOL  =',POLTOL, 'MXCHECK =',MXCHECK
      WRITE(IW,'( 1X,A,I12,7X,A,F12.4,7X,A,I12)')
     *   'NRDF    =',NRDF,'DELRDF  =',DELRDF*TOANGS,'DIFFUSE =',NDFS
      WRITE(IW,'( 1X,A,I12,7X,A,I12,7X,A,I12)')
     *   'NRALL   =',NRALL,'NRMSD   =',NRMSD,'NGYRA   =',NGYRA
      WRITE(IW,'( 1X,3(A,1P,E12.5,0P,7X))')
     *   'TIMRALL =',TIMRALL*2.418884326505D-17,
     *   'TIMGYRA =',TIMGYRA*2.418884326505D-17,
     *   'TIMDFS  =',TIMDFS *2.418884326505D-17
      WRITE(IW,'( 1X,A,I12,7X,A,I12,7X,A,I12)')
     *   'NRIJMM  =',NRIJMM,'NDIEL   =',NDIEL,'JUMBUP  =',JUMBUP
      WRITE(IW,'( 1X,A,I12,7X,A,I12,7X,A,I12)')
     *   'NRIJQM  =',NRIJQM,'NAIJKMM =',NAIJKMM,'NAIJKQM =',NAIJKQM
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'IADDNA1 =',IADDNA1, 'IADDK1  =',IADDK1,'IADDCL1 =',IADDCL1
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'IADDCA2 =',IADDCA2, 'IADDMG2 =',IADDMG2,'IADDWAT =',IADDWAT
      WRITE(IW,'( 1X,A,I12,7X,A,I12,7X,A,I12)')
     *   'ITYPWAT =',ITYPWAT,
     *   'JADDNA1 =',MIN(1,JADDNA1),
     *   'JADDK1  =',MIN(1,JADDK1)
      WRITE(IW,'( 1X,A,I12,7X,A,I12,7X,A,F12.4)')
     *   'NRANDOM =',NRANDOM0,'NFOLD   =',NFOLD,
     *   'RFOLD   =',RFOLD*TOANGS
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'ICOMBIN =',ICOMBIN,'IDELETE =',IDELETE,'ISCOOP  =',ISCOOP
      WRITE(IW,'( 1X,A,F12.4,7X,A,I12,7X,A,I12)')
     *   'RETAIN  =',RETAIN,'QMREP   =',NQMREP,'LJQMMM  =',LJQMMM
      WRITE(IW,'( 1X,A,F12.4,7X,A,I12,7X,A,1P,E12.5,0P)')
     *   'RDAMP   =',RDAMP*TOANGS,'INTCHG  =',INTCHG,
     *   'FIXTOL  =',FIXTOL
      WRITE(IW,'( 1X,A,I12,7X,A,I12,7X,A,I12)')
     *   'IFIXSOL =',IFIXSOL,'MXFFTS  =',MXFFTS,'NTSATM  =',NTSATM
      WRITE(IW,'( 1X,A,I12,7X,A,I12,7X,A,I12)')
     *   'NFIXQM  =',NFIXQM, 'NFIXMM  =',NFIXMM,'IPOLSHF =',IPOLSHF
      WRITE(IW,'( 1X,A,I12,7X,A,I12,7X,A,I12)')
     *   'NFIXQMB =',NFIXQMB,'NFIXMMB =',NFIXMMB,'IFEPTYP =',IFEPTYP
      WRITE(IW,'( 1X,A,I12,7X,A,I12,7X,A,I12)')
     *   'IFEPTOP =',IFEPTOP,'KFREEA  =',KFREEA(501)*MIN(1,IFEPTOP),
     *                       'KFREEB  =',KFREEB(501)*MIN(1,IFEPTOP)
      WRITE(IW,'( 1X,A,F12.4,7X,A,F12.4,7X,A,F12.4)')
     *   'WSIMUL  =',WSIMUL ,'WPERT1  =',WPERT1,'WPERT2  =',WPERT2
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'MATOMA  =',MATOMA, 'MCHARGA =',MCHARGA,'MULTA   =',MULTA
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'MATOMB  =',MATOMB, 'MCHARGB =',MCHARGB,'MULTB   =',MULTB
      WRITE(IW,'( 1X,A,I12,7X,A,F12.4,7X,A,F12.4)')
     *   'ISOFTCR =',ISOFTCR,'SOFTALJ =',SOFTALJ,
     *   'SOFTACH =',SOFTACH*TOANGS*TOANGS
      WRITE(IW,'( 1X,A,I12,7X,A,1P,E12.5,0P,7X,A,1P,E12.5,0P)')
     *   'IRATTLE =',IRATTLE,'RATOLC  =',RATOLC,'RATOLV  =',RATOLV
      WRITE(IW,'( 1X,A,I12,7X,A,I12,7X,A,F12.4)')
     *   'JRATTLE =',JRATTLE,'MXRATT  =',MXRATT,'SCALRAT =',SCALRAT
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'MEANFLD =',MEANFLD,'MFMERGE =',MFMERGE,'MFQMCHG =',MFQMCHG
      WRITE(IW,'( 1X,3(A,A12,7X))')
     *   'SCFTYP2 =',SCFTYP2,'TDDFT2  =',TDDFT2, 'CITYP2  =',CITYP2
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'MPLEVL2 =',MPLEVL2,'ICHARG2 =',ICHARG2,'MULT2   =',MULT2
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'IRATQM  =',IRATQM,'JUMBPOT =',NUMBTYP,'JUM2POT =',NUM2TYP
      WRITE(IW,'( 1X,2(A,I12,7X),A,1P,E12.5,0P)')
     *   'MMFF94Q =',NMMFF94Q,'IVIBMM  =',NVIBMM, 'BEREND  =',BERENDT
      WRITE(IW,'( 1X,2(A,I12,7X),A,I12)')
     *   'MXCMAP  =',MXCMAP, 'NRDEN   =',NRDEN , 'MATCHAB =',MPAIRA(1)
      WRITE(IW,'( 1X,3(A,5X,A,7X))')
     *   'PARFILE =','PARFILE',
     *   'TOPFILE =','TOPFILE',
     *   'TOPAMIA =','TOPAMIA'
      WRITE(IW,'( 1X,3(A,5X,A,7X))')
     *   'TOPCTER =','TOPCTER',
     *   'TOPNTER =','TOPNTER',
     *   'TOPNUCA =','TOPNUCA'
      WRITE(IW,'( 1X,3(A,I12,7X))')
     *   'IPODAMP =',IPODAMP,'LACTQM  =',NACTQM,'LACTMM  =',NACTMM
      APODAMP = SCRFAC
      WRITE(IW,'( 1X,(A,F12.6,7X),(A,I12,7X),(A,5X,A,7X))')
     *   'APODAMP =',APODAMP,'IPO1213 =',IPO1213,'PARFIL2 =','PARFIL2'
      WRITE(IW,'( 1X,(A,5X,A,7X),2(A,I12,7X))')
     *   'PARFIL3 =','PARFIL3','NRADMM  =',NRADMM,'NRADQM  =',NRADQM
      WRITE(IW,'( 1X,2(A,F12.6,7X),A,I12,7X)')
     *   'RALLMM  =',RALLMM*TOANGS,'RALLQM  =',RALLQM*TOANGS,
     *   'KOUTACT =',KOUTACT(1)
C
      WRITE(IW,*)' '
C
      IF(NAT.GT.0.AND.NFFAT.GT.0.AND.NLKQMM.GT.0) THEN
         WRITE(IW,'(A,I4,A)')' THIS IS A QM/MM SYSTEM WITH ',
     *               NLKQMM, ' BOUNDARY COVALENT BONDS.'
         WRITE(IW,*)
     *   'MM COVALENT TERMS RETAIN IN THE QM REGION IF THEY',
     *   ' INVOLVE A "WEAK"'
         WRITE(IW,'(A,F6.4,A)')' BOUNDARY H ATOM, AND ARE SCALED BY ',
     *   RETAIN,' AS DEFINED BY "RETAIN".'
      END IF
      WRITE(IW,*)' '
C
C     -- PRINT THE TOTAL CHARGE OF THE QM/MM SYSTEM --
C
      IF(NFFAT.GT.0 .AND. NAT.GT.0)THEN
         WRITE(IW,'(A,F15.7,A)')' TOTAL MM    CHARGE = ',QTOTAL,
     *                        ' IN THE QM/MM SYSTEM'
         WRITE(IW,'(A,F15.7)')' TOTAL QM/MM CHARGE = ',QTOTAL+DBLE(ICH)
         IF(DIFFCHG.GT.1.0D-7 .OR. DIFFCHG.LT.-1.0D-7) THEN
            WRITE(IW,*) ' '
            WRITE(IW,*) 
     *      ' ** WARNING: TOTAL MM CHARGE IS NOT AN INTEGER',
     *      ' IN THE QM/MM SYSTEM **'
            IF(INTCHG.EQ.0)WRITE(IW,*)'INPUT INTCHG=1 TO FORCE',
     *                                 ' INTEGER MM CHARGE.'
C
            IF(INTCHG.EQ.1) THEN
               WRITE(IW,*)' '
               WRITE(IW,'(A,F12.7,A)')
     *         ' QUANPOL ADDS ',CHGADD,
     *         ' CHARGE TO THE FOLLOWING MM ATOMS:'
               WRITE(IW,'(21X,A)')'   BEFORE ADDING    AFTER ADDING'
               DO IBOND=1,NBOND
                  KK1 = IPAIR(1,IBOND)
                  KK2 = IPAIR(2,IBOND)
                  IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).EQ.0 .OR.
     *               LISTQM(KK1).EQ.0 .AND. LISTQM(KK2).GT.0) THEN
                     IF(LISTQM(KK2).EQ.0) IFFAT = KK2
                     IF(LISTQM(KK1).EQ.0) IFFAT = KK1
                     WRITE(IW,'(A,I10,2X,2F16.7)')' MM ATOM ',IFFAT,
     *               CHARG(IFFAT)-CHGADD,CHARG(IFFAT)
                  END IF
               ENDDO
               WRITE(IW,'(A,F15.7,A)') ' NOW TOTAL MM    CHARGE = ',
     *                            QTOTAL-DIFFCHG,' IN THE QM/MM SYSTEM'
               WRITE(IW,'(A,F15.7)') ' NOW TOTAL QM/MM CHARGE = ',
     *                            QTOTAL-DIFFCHG+DBLE(ICH)
               WRITE(IW,*)'INPUT INTCHG=0 IF NO',
     *                    ' INTENTION TO USE INTEGER MM CHARGE.'
               WRITE(IW,*)'CHARGES CAN BE MODIFIED IN INPUT $FFDATA.'
            END IF
         END IF
         WRITE(IW,*)' '
      END IF
C
      WRITE(IW,*)'    *****************************************'
      WRITE(IW,*)'    $FFDATA GROUP IS PRINTED IN THE .DAT FILE'
      WRITE(IW,*)'    *****************************************'
      WRITE(IW,*)' '
C
C     -- PRINT COORDINATES AND PARAMETERS INTO DAT FILE --
C
      WRITE(IP,'(A,3(A,F15.10,1X))')
     *' $QUANPO ',
     *'CENTX=',CENTX*TOANGS,
     *'CENTY=',CENTY*TOANGS,
     *'CENTZ=',CENTZ*TOANGS
      IF(NACTQM.GT.0) THEN
         N = NACTQM
         WRITE(IP,1001) 'LACTQM=',N
         IF(NACTQM.LE.10) WRITE(IP,1002) (LACTQM(I),I=1,N)
         IF(NACTQM.GT.10) WRITE(IP,1003) (LACTQM(I),I=1,N)
      END IF
      IF(NACTMM.GT.0) THEN
         N = NACTMM
         WRITE(IP,1001) 'LACTMM=',N
         IF(NACTMM.LE.10) WRITE(IP,1002) (LACTMM(I),I=1,N)
         IF(NACTMM.GT.10) WRITE(IP,1003) (LACTMM(I),I=1,N)
      END IF
 1001 FORMAT(9X,A,I7,' >')
 1002 FORMAT(9X,I7,' 0.1 ',I7,' 0.1 ',I7,' 0.1 ',I7,' 0.1 ',I7,' 0.1 >')
 1003 FORMAT(9X,I7,1X,I7,1X,I7,1X,I7,1X,I7,1X,I7,1X,I7,1X,I7,1X,' >')
      WRITE(IP,*)'$END'
C
      IF(LOUT.EQ.1.AND.NFFTYP/10000.EQ.5) GOTO 499
C
      IF(IFEPTOP.GT.0) THEN
         WRITE(IP,*)'$FFDATA+$FFDATB  ! ** NOT GOOD FOR RESTART **'
      ELSE IF(ICOMBIN.EQ.1) THEN
         WRITE(IP,*)'$FFDATA          ! ** FROM ICOMBIN=1 **'
      ELSE IF(ICOMBIN.EQ.2) THEN
         WRITE(IP,*)'$FFDATA          ! ** FROM ICOMBIN=2 **'
      ELSE IF(ICOMBIN.EQ.3) THEN
         WRITE(IP,*)'$FFDATA          ! ** FROM ICOMBIN=3 **'
      ELSE
         IF(LISTQM(NFFAT+NAT+1).EQ.0)
     *   WRITE(IP,*)'$FFDATA          ! ** GOOD FOR RESTART **'
         IF(LISTQM(NFFAT+NAT+1).GT.0)
     *   WRITE(IP,*)'$FFDATA+$DATA    ! ** NOT GOOD FOR RESTART **'
      END IF
      WRITE(IP,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
      DO IFFAT=1,NFFAT
         WRITE(IP,1010) ATMNAM(IFFAT),ZANF(IFFAT),
     *   CORD(1,IFFAT)*TOANGS,CORD(2,IFFAT)*TOANGS,CORD(3,IFFAT)*TOANGS
      ENDDO
      WRITE(IP,*)'STOP'
C
      IF(LJSIGMA.EQ.0) THEN
      WRITE(IP,*)'PARAMETERS       MASS         Q      ',
     *          'POL   RMIN/2  EPSILON   RMIN/2  EPSILON'
      DO IFFAT=1,NFFAT
         WRITE(IP,1020) ATMNAM(IFFAT),ZMAS(IFFAT)/1822.88850204D+00,
     *                 CHARG(IFFAT),POL(IFFAT)*TOANGS**3,
     *   SIG(IFFAT)*TOANGS/1.781797436280679D+00,EPS(IFFAT)*TOKCAL,
     *   SIG2(IFFAT)*TOANGS/1.781797436280679D+00,EPS2(IFFAT)*TOKCAL
      ENDDO
      ELSE
      WRITE(IP,*)'PARAMETERS       MASS         Q      ',
     *          'POL    SIGMA  EPSILON    SIGMA  EPSILON'
      DO IFFAT=1,NFFAT
         WRITE(IP,1020) ATMNAM(IFFAT),ZMAS(IFFAT)/1822.88850204D+00,
     *                 CHARG(IFFAT),POL(IFFAT)*TOANGS**3,
     *                 SIG(IFFAT)*TOANGS,EPS(IFFAT)*TOKCAL,
     *                 SIG2(IFFAT)*TOANGS,EPS2(IFFAT)*TOKCAL
      ENDDO
      END IF
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'QMMMREP    N       C1     Z1       C2     Z2',
     *          '       C3     Z3       C4     Z4'
      DO IFFAT=1,NFFAT
         WRITE(IP,1030) ATMNAM(IFFAT),4,
     *                 CLPR(1,IFFAT),ZLPR(1,IFFAT),
     *                 CLPR(2,IFFAT),ZLPR(2,IFFAT),
     *                 CLPR(3,IFFAT),ZLPR(3,IFFAT),
     *                 CLPR(4,IFFAT),ZLPR(4,IFFAT)
      ENDDO
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'BOND     #     ATM1     ATM2           FC        R0'
      DO IBOND=1,NBOND
         IF(FCBOND(IBOND).GT.-1.0D+05) THEN
         WRITE(IP,1040) IBOND,IPAIR(1,IBOND),IPAIR(2,IBOND),
     *                 FCBOND(IBOND)*TOKCAL*TOBOHR*TOBOHR,
     *                 BOND0(IBOND)*TOANGS
         ELSE
         WRITE(IP,1040) IBOND,IPAIR(1,IBOND),IPAIR(2,IBOND),
     *                -FCBOND(IBOND)*TOKCAL*TOBOHR*TOBOHR*1.0D-10,
     *                 BOND0(IBOND)*TOANGS
         END IF
      ENDDO
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'ANGLE    #     ATM1     ATM2     ATM3 ',
     *          '          FC      ANGLE0'
      DO IANGL=1,NANGL
         IF(FCANGL(IANGL).GT.-1.0D+05) THEN
         WRITE(IP,1050) IANGL,KLIST(1,IANGL),KLIST(2,IANGL),
     *                 KLIST(3,IANGL),FCANGL(IANGL)*TOKCAL,
     *                 ANGL0(IANGL)*DEGREE
         ELSE
         WRITE(IP,1050) IANGL,KLIST(1,IANGL),KLIST(2,IANGL),
     *                 KLIST(3,IANGL),-FCANGL(IANGL)*TOKCAL*1.0D-10,
     *                 ANGL0(IANGL)*DEGREE
         END IF
      ENDDO
      WRITE(IP,*)'STOP'
C
      IF(NFFTYP/10000.EQ.5) THEN
         WRITE(IP,*)'STRBEND  #    BOND1    BOND2',
     *          '          FC1          FC2'
         DO IANGL=1,NANGL
            WRITE(IP,1055)IANGL,KBLST(1,IANGL),KBLST(2,IANGL),
     *                    FCSTBD(1,IANGL)*TOBOHR*TOKCAL,
     *                    FCSTBD(2,IANGL)*TOBOHR*TOKCAL
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
      IF(NFFTYP/10000.NE.5) THEN
         WRITE(IP,*)'DIHROT   #     ATM1     ATM2     ATM3  ',
     *             '   ATM4        VROT     N    GAMMA'
         DO IDIHR=1,NDIHR
            IF(VROT(IDIHR).GT.-1.0D+05) THEN
            WRITE(IP,1060) IDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                    LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                    VROT(IDIHR)*TOKCAL,NNN(IDIHR),
     *                    GAMA(IDIHR)*DEGREE
            ELSE
            WRITE(IP,1060) IDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                    LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                    -VROT(IDIHR)*TOKCAL*1.0D-30,NNN(IDIHR),
     *                    GAMA(IDIHR)*DEGREE
            END IF
         ENDDO
         WRITE(IP,*)'STOP'
      ELSE
         WRITE(IP,*)'DIHR3V   #     ATM1     ATM2     ATM3  ',
     *              '   ATM4     VROT1     VROT2     VROT3'
         DO IDIHR=1,NDIHR
            WRITE(IP,1065)
     *                 IDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                 LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                 FCDIHR(1,IDIHR)*TOKCAL,
     *                 FCDIHR(2,IDIHR)*TOKCAL,
     *                 FCDIHR(3,IDIHR)*TOKCAL
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
      WRITE(IP,*)'DIHBND   #     ATM1     ATM2     ATM3  ',
     *          '   ATM4         FC    DIHB0'
      DO IDIHB=1,NDIHB
         WRITE(IP,1070) IDIHB,NLIST(1,IDIHB),NLIST(2,IDIHB),
     *                 NLIST(3,IDIHB),NLIST(4,IDIHB),
     *                 FCDIHB(IDIHB)*TOKCAL,
     *                 DIHB0(IDIHB)*DEGREE
      ENDDO
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'CMAP     #     ATM1     ATM2     ATM3  ',
     *          '   ATM4     ATM5    ITYPE'
      DO ICMAP=1,NCMAP
         WRITE(IP,1075) ICMAP,MAPLST(1,ICMAP),MAPLST(2,ICMAP),
     *                        MAPLST(3,ICMAP),MAPLST(4,ICMAP),
     *                        MAPLST(5,ICMAP),MAPLST(6,ICMAP)
      ENDDO
      WRITE(IP,*)'STOP'
C
      WRITE(IP,*)'WAGGING  #     ATM2     ATM3     ATM4  ',
     *          '   ATM1         FC'
      DO IWAGG=1,NWAGG
         WRITE(IP,1080) IWAGG,MLIST(2,IWAGG),MLIST(3,IWAGG),
     *                 MLIST(4,IWAGG),MLIST(1,IWAGG),
     *                 FCWAGG(IWAGG)*TOKCAL
      ENDDO
      WRITE(IP,*)'STOP'
C
      IF(NFFTYP/10000.EQ.5) THEN
         WRITE(IP,*)'MMTYPE   #  MMFF94'
         WRITE(IP,'(2X,I9)')NFFAT
         NLINE = (NFFAT-1)/20 + 1
         DO I=1,NLINE
            JSTOP = 20
            IF(I.EQ.NLINE) JSTOP = NFFAT - (NLINE-1)*20
            WRITE(IP,'(I3,19(1X,I3))') (NTYPE((I-1)*20+J),J=1,JSTOP)
         ENDDO
         WRITE(IP,*)'STOP'
C
         WRITE(IP,*)
     *   'MMFFLJ   #                  I   J      RIJ    EPSIJ'
         WRITE(IP,'(2X,I9)')MXMMTP
         DO II=1,MXMMTP
            DO JJ=1,MXMMTP,3
               IF(JJ.LE.MXMMTP-2) THEN
                  WRITE(IP,'(3(1X,I3,1X,I3,1X,F8.6,1X,F8.6))')
     *            II,JJ  ,FCLJTP(1,JJ  ,II)*TOANGS,
     *                    FCLJTP(2,JJ  ,II)*TOKCAL,
     *            II,JJ+1,FCLJTP(1,JJ+1,II)*TOANGS,
     *                    FCLJTP(2,JJ+1,II)*TOKCAL,
     *            II,JJ+2,FCLJTP(1,JJ+2,II)*TOANGS,
     *                    FCLJTP(2,JJ+2,II)*TOKCAL
               END IF
               IF(JJ.EQ.MXMMTP-1) THEN
                  WRITE(IP,'(2(1X,I3,1X,I3,1X,F8.6,1X,F8.6))')
     *            II,JJ  ,FCLJTP(1,JJ  ,II)*TOANGS,
     *                    FCLJTP(2,JJ  ,II)*TOKCAL,
     *            II,JJ+1,FCLJTP(1,JJ+1,II)*TOANGS,
     *                    FCLJTP(2,JJ+1,II)*TOKCAL
               END IF
               IF(JJ.EQ.MXMMTP  ) THEN
                  WRITE(IP,'(1X,I3,1X,I3,1X,F8.6,1X,F8.6)')
     *            II,JJ  ,FCLJTP(1,JJ  ,II)*TOANGS,
     *                    FCLJTP(2,JJ  ,II)*TOKCAL
               END IF
            ENDDO
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
      WRITE(IP,*)'$END'
 499  CONTINUE
C
      END IF
C
      IF(NFOLD.GT.0) RETURN
C
      DO IBOND=1,NBOND
         IF(FCBOND(IBOND).LT.-1.0D+05) THEN
         FCBOND(IBOND) = -FCBOND(IBOND)*1.0D-10*RETAIN
         IF(IFEPTOP.EQ.1) FCBONDB(IBOND)=FCBOND(IBOND)
         END IF
      ENDDO
      DO IANGL=1,NANGL
         IF(FCANGL(IANGL).LT.-1.0D+05) THEN
         FCANGL(IANGL) = -FCANGL(IANGL)*1.0D-10*RETAIN
         IF(IFEPTOP.EQ.1) FCANGLB(IANGL)=FCANGL(IANGL)
         END IF
      ENDDO
      DO IDIHR=1,NDIHR
         IF(VROT(IDIHR).LT.-1.0D+05) THEN
         VROT(IDIHR) = -VROT(IDIHR)*(1.0D-30)*RETAIN
         IF(IFEPTOP.EQ.1) VROTB(IDIHR)=VROT(IDIHR)
         END IF
      ENDDO
C
C
C     -- WHEN LJQMMM=1, ZERO OFF ALL MM CLPR(*,*) IF NOT PART OF QM.
C        QM PART HAS ALREADY BEEN ZERO ABOVE (EXCEPT FOR NQMREP POINTS).
C        THIS SHOULD BE DONE AFTER PRINTING OUT $FFDATA
C
      IF(LJQMMM.EQ.1) THEN
         DO IFFAT =1,NFFAT
            KK = LISTQM(IFFAT)
            IF(KK.EQ.0) THEN
               CLPR(1,IFFAT) = ZERO
               CLPR(2,IFFAT) = ZERO
               CLPR(3,IFFAT) = ZERO
               CLPR(4,IFFAT) = ZERO
               ZLPR(1,IFFAT) = ZERO
               ZLPR(2,IFFAT) = ZERO
               ZLPR(3,IFFAT) = ZERO
               ZLPR(4,IFFAT) = ZERO
               IF(IFEPTOP.EQ.1) THEN
                  CLPRB(1,IFFAT) = ZERO
                  CLPRB(2,IFFAT) = ZERO
                  CLPRB(3,IFFAT) = ZERO
                  CLPRB(4,IFFAT) = ZERO
                  ZLPRB(1,IFFAT) = ZERO
                  ZLPRB(2,IFFAT) = ZERO
                  ZLPRB(3,IFFAT) = ZERO
                  ZLPRB(4,IFFAT) = ZERO
               END IF
            END IF
         ENDDO
      END IF
C
C     -- READ INVERSED C MATRIX --
C
      IF(MASWRK.AND.NTS.GE.60 .AND. RSPHSOL.LT.1.0D+30) THEN
         IF(NTS.EQ.60) THEN
            CALL GENQPFILE('RXNFLD0060.DAT ',QPFILE,LENQP)
            OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
         ELSE IF(NTS.EQ.240) THEN
            CALL GENQPFILE('RXNFLD0240.DAT ',QPFILE,LENQP)
            OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
         ELSE IF(NTS.EQ.960) THEN
            CALL GENQPFILE('RXNFLD0960.DAT ',QPFILE,LENQP)
            OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
         ELSE IF(NTS.EQ.3840) THEN
            CALL GENQPFILE('RXNFLD3840.DAT ',QPFILE,LENQP)
            OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
         END IF
         DO ITS=1,NTS
            DO JTS=1,NTS
               IF(MOD(JTS,8).EQ.1) THEN
                  IF((JTS+7).LE.ITS) THEN
                     READ (12,'(8F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS),
     *                           CMAT1(JTS+2,ITS),
     *                           CMAT1(JTS+3,ITS),
     *                           CMAT1(JTS+4,ITS),
     *                           CMAT1(JTS+5,ITS),
     *                           CMAT1(JTS+6,ITS),
     *                           CMAT1(JTS+7,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RSPHSOL
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RSPHSOL
                     CMAT1(JTS+2,ITS) = CMAT1(JTS+2,ITS)*RSPHSOL
                     CMAT1(JTS+3,ITS) = CMAT1(JTS+3,ITS)*RSPHSOL
                     CMAT1(JTS+4,ITS) = CMAT1(JTS+4,ITS)*RSPHSOL
                     CMAT1(JTS+5,ITS) = CMAT1(JTS+5,ITS)*RSPHSOL
                     CMAT1(JTS+6,ITS) = CMAT1(JTS+6,ITS)*RSPHSOL
                     CMAT1(JTS+7,ITS) = CMAT1(JTS+7,ITS)*RSPHSOL
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                     CMAT1(ITS,JTS+2) = CMAT1(JTS+2,ITS)
                     CMAT1(ITS,JTS+3) = CMAT1(JTS+3,ITS)
                     CMAT1(ITS,JTS+4) = CMAT1(JTS+4,ITS)
                     CMAT1(ITS,JTS+5) = CMAT1(JTS+5,ITS)
                     CMAT1(ITS,JTS+6) = CMAT1(JTS+6,ITS)
                     CMAT1(ITS,JTS+7) = CMAT1(JTS+7,ITS)
                  ELSE IF((JTS+6).EQ.ITS) THEN
                     READ (12,'(7F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS),
     *                           CMAT1(JTS+2,ITS),
     *                           CMAT1(JTS+3,ITS),
     *                           CMAT1(JTS+4,ITS),
     *                           CMAT1(JTS+5,ITS),
     *                           CMAT1(JTS+6,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RSPHSOL
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RSPHSOL
                     CMAT1(JTS+2,ITS) = CMAT1(JTS+2,ITS)*RSPHSOL
                     CMAT1(JTS+3,ITS) = CMAT1(JTS+3,ITS)*RSPHSOL
                     CMAT1(JTS+4,ITS) = CMAT1(JTS+4,ITS)*RSPHSOL
                     CMAT1(JTS+5,ITS) = CMAT1(JTS+5,ITS)*RSPHSOL
                     CMAT1(JTS+6,ITS) = CMAT1(JTS+6,ITS)*RSPHSOL
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                     CMAT1(ITS,JTS+2) = CMAT1(JTS+2,ITS)
                     CMAT1(ITS,JTS+3) = CMAT1(JTS+3,ITS)
                     CMAT1(ITS,JTS+4) = CMAT1(JTS+4,ITS)
                     CMAT1(ITS,JTS+5) = CMAT1(JTS+5,ITS)
                     CMAT1(ITS,JTS+6) = CMAT1(JTS+6,ITS)
                  ELSE IF((JTS+5).EQ.ITS) THEN
                     READ (12,'(6F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS),
     *                           CMAT1(JTS+2,ITS),
     *                           CMAT1(JTS+3,ITS),
     *                           CMAT1(JTS+4,ITS),
     *                           CMAT1(JTS+5,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RSPHSOL
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RSPHSOL
                     CMAT1(JTS+2,ITS) = CMAT1(JTS+2,ITS)*RSPHSOL
                     CMAT1(JTS+3,ITS) = CMAT1(JTS+3,ITS)*RSPHSOL
                     CMAT1(JTS+4,ITS) = CMAT1(JTS+4,ITS)*RSPHSOL
                     CMAT1(JTS+5,ITS) = CMAT1(JTS+5,ITS)*RSPHSOL
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                     CMAT1(ITS,JTS+2) = CMAT1(JTS+2,ITS)
                     CMAT1(ITS,JTS+3) = CMAT1(JTS+3,ITS)
                     CMAT1(ITS,JTS+4) = CMAT1(JTS+4,ITS)
                     CMAT1(ITS,JTS+5) = CMAT1(JTS+5,ITS)
                  ELSE IF((JTS+4).EQ.ITS) THEN
                     READ (12,'(5F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS),
     *                           CMAT1(JTS+2,ITS),
     *                           CMAT1(JTS+3,ITS),
     *                           CMAT1(JTS+4,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RSPHSOL
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RSPHSOL
                     CMAT1(JTS+2,ITS) = CMAT1(JTS+2,ITS)*RSPHSOL
                     CMAT1(JTS+3,ITS) = CMAT1(JTS+3,ITS)*RSPHSOL
                     CMAT1(JTS+4,ITS) = CMAT1(JTS+4,ITS)*RSPHSOL
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                     CMAT1(ITS,JTS+2) = CMAT1(JTS+2,ITS)
                     CMAT1(ITS,JTS+3) = CMAT1(JTS+3,ITS)
                     CMAT1(ITS,JTS+4) = CMAT1(JTS+4,ITS)
                  ELSE IF((JTS+3).EQ.ITS) THEN
                     READ (12,'(4F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS),
     *                           CMAT1(JTS+2,ITS),
     *                           CMAT1(JTS+3,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RSPHSOL
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RSPHSOL
                     CMAT1(JTS+2,ITS) = CMAT1(JTS+2,ITS)*RSPHSOL
                     CMAT1(JTS+3,ITS) = CMAT1(JTS+3,ITS)*RSPHSOL
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                     CMAT1(ITS,JTS+2) = CMAT1(JTS+2,ITS)
                     CMAT1(ITS,JTS+3) = CMAT1(JTS+3,ITS)
                  ELSE IF((JTS+2).EQ.ITS) THEN
                     READ (12,'(3F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS),
     *                           CMAT1(JTS+2,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RSPHSOL
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RSPHSOL
                     CMAT1(JTS+2,ITS) = CMAT1(JTS+2,ITS)*RSPHSOL
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                     CMAT1(ITS,JTS+2) = CMAT1(JTS+2,ITS)
                  ELSE IF((JTS+1).EQ.ITS) THEN
                     READ (12,'(2F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RSPHSOL
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RSPHSOL
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                  ELSE IF((JTS+0).EQ.ITS) THEN
                     READ (12,'(F10.7)')
     *                           CMAT1(JTS  ,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RSPHSOL
                  END IF
               END IF
            ENDDO
         ENDDO
         DO ITS=1,NTS,2
            READ (12,'(6F10.7)')
     *      XTS(ITS),YTS(ITS),ZTS(ITS),
     *      XTS(ITS+1),YTS(ITS+1),ZTS(ITS+1)
            XTS(ITS  ) = XTS(ITS  )*RSPHSOL+CENTX
            YTS(ITS  ) = YTS(ITS  )*RSPHSOL+CENTY
            ZTS(ITS  ) = ZTS(ITS  )*RSPHSOL+CENTZ
            XTS(ITS+1) = XTS(ITS+1)*RSPHSOL+CENTX
            YTS(ITS+1) = YTS(ITS+1)*RSPHSOL+CENTY
            ZTS(ITS+1) = ZTS(ITS+1)*RSPHSOL+CENTZ
         ENDDO
         CLOSE(12)
      END IF
      IF(GOPARR) CALL DDI_BCAST(450,'F',CMAT1,NTS*NTS,MASTER)
      IF(GOPARR) CALL DDI_BCAST(451,'F',XTS,NTS,MASTER)
      IF(GOPARR) CALL DDI_BCAST(452,'F',YTS,NTS,MASTER)
      IF(GOPARR) CALL DDI_BCAST(453,'F',ZTS,NTS,MASTER)
C
C     -- READ IN CMAP COEFFICIENTS --
C
      IF(MASWRK.AND.IDOCMAP.EQ.1.AND.NFFTYP/10000.EQ.2) THEN
         CALL GENQPFILE('CHARMM22.CMAP ',QPFILE,LENQP)
         OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
         DO ITYPE=1, 3
            DO IPHI=1,24
               DO JPSI=1,24
                  DO ICPHI=1,3,2
                     READ(12,'(8F10.6)')
     *               CMAPCO(1,ICPHI  ,JPSI,IPHI,ITYPE),
     *               CMAPCO(2,ICPHI  ,JPSI,IPHI,ITYPE),
     *               CMAPCO(3,ICPHI  ,JPSI,IPHI,ITYPE),
     *               CMAPCO(4,ICPHI  ,JPSI,IPHI,ITYPE),
     *               CMAPCO(1,ICPHI+1,JPSI,IPHI,ITYPE),
     *               CMAPCO(2,ICPHI+1,JPSI,IPHI,ITYPE),
     *               CMAPCO(3,ICPHI+1,JPSI,IPHI,ITYPE),
     *               CMAPCO(4,ICPHI+1,JPSI,IPHI,ITYPE)
                  ENDDO
               ENDDO
            ENDDO
         ENDDO
         CLOSE(12)
      END IF
      IF(GOPARR) CALL DDI_BCAST(454,'F',CMAPCO,4*4*24*24*3,MASTER)
C
C     -- PREPARE FOR PARALLEL RUNS --
C        NOTE: 'ME' STARTS AT 0
C
      LEACH  = NFFAT/NPROC
      LTAIL  = NFFAT - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1FFAT =     ME*LEACH + LTAI1 + 1
      L2FFAT = (ME+1)*LEACH + LTAI2
C
      III = 0
      DO IPROC=1, NPROC
         DO IFFAT=IPROC, NFFAT, NPROC
            III = III + 1
            INTLST(IFFAT) = III
         ENDDO
      ENDDO
C
      LEACH  = NBOND/NPROC
      LTAIL  = NBOND - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1BOND =     ME*LEACH + LTAI1 + 1
      L2BOND = (ME+1)*LEACH + LTAI2
C
      LEACH  = NANGL/NPROC  
      LTAIL  = NANGL - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1ANGL =     ME*LEACH + LTAI1 + 1
      L2ANGL = (ME+1)*LEACH + LTAI2
C
      LEACH  = NDIHR/NPROC  
      LTAIL  = NDIHR - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1DIHR =     ME*LEACH + LTAI1 + 1
      L2DIHR = (ME+1)*LEACH + LTAI2
C
      LEACH  = NDIHB/NPROC  
      LTAIL  = NDIHB - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1DIHB =     ME*LEACH + LTAI1 + 1
      L2DIHB = (ME+1)*LEACH + LTAI2
C
      LEACH  = NCMAP/NPROC  
      LTAIL  = NCMAP - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1CMAP =     ME*LEACH + LTAI1 + 1
      L2CMAP = (ME+1)*LEACH + LTAI2
C
      LEACH  = NWAGG/NPROC  
      LTAIL  = NWAGG - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1WAGG =     ME*LEACH + LTAI1 + 1
      L2WAGG = (ME+1)*LEACH + LTAI2
C
      LEACH  = N1213J/NPROC  
      LTAIL  = N1213J - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L11213 =     ME*LEACH + LTAI1 + 1
      L21213 = (ME+1)*LEACH + LTAI2
C
      LEACH  = N14J/NPROC  
      LTAIL  = N14J - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1N14J =     ME*LEACH + LTAI1 + 1
      L2N14J = (ME+1)*LEACH + LTAI2
C
      LEACH  = N1213A/NPROC
      LTAIL  = N1213A - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L11213A=     ME*LEACH + LTAI1 + 1
      L21213A= (ME+1)*LEACH + LTAI2
C
      LEACH  = N1213B/NPROC
      LTAIL  = N1213B - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L11213B=     ME*LEACH + LTAI1 + 1
      L21213B= (ME+1)*LEACH + LTAI2
C
      LEACH  = N14A/NPROC
      LTAIL  = N14A - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1N14A =     ME*LEACH + LTAI1 + 1
      L2N14A = (ME+1)*LEACH + LTAI2
C
      LEACH  = N14B/NPROC
      LTAIL  = N14B - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1N14B =     ME*LEACH + LTAI1 + 1
      L2N14B = (ME+1)*LEACH + LTAI2
C
      LEACH  = N1213PMA/NPROC  
      LTAIL  = N1213PMA - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L11213PMA =     ME*LEACH + LTAI1 + 1
      L21213PMA = (ME+1)*LEACH + LTAI2
C
      LEACH  = N14PMA/NPROC  
      LTAIL  = N14PMA - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1N14PMA =     ME*LEACH + LTAI1 + 1
      L2N14PMA = (ME+1)*LEACH + LTAI2
C
      LEACH  = NBONDPMA/NPROC
      LTAIL  = NBONDPMA - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1BONDPMA =     ME*LEACH + LTAI1 + 1
      L2BONDPMA = (ME+1)*LEACH + LTAI2
C
      LEACH  = NANGLPMA/NPROC
      LTAIL  = NANGLPMA - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1ANGLPMA =     ME*LEACH + LTAI1 + 1
      L2ANGLPMA = (ME+1)*LEACH + LTAI2
C
      LEACH  = NDIHRPMA/NPROC
      LTAIL  = NDIHRPMA - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1DIHRPMA =     ME*LEACH + LTAI1 + 1
      L2DIHRPMA = (ME+1)*LEACH + LTAI2
C
      LEACH  = NDIHBPMA/NPROC
      LTAIL  = NDIHBPMA - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1DIHBPMA =     ME*LEACH + LTAI1 + 1
      L2DIHBPMA = (ME+1)*LEACH + LTAI2
C
      LEACH  = NWAGGPMA/NPROC
      LTAIL  = NWAGGPMA - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1WAGGPMA =     ME*LEACH + LTAI1 + 1
      L2WAGGPMA = (ME+1)*LEACH + LTAI2
C
      LEACH  = NCMAPPMA/NPROC
      LTAIL  = NCMAPPMA - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1CMAPPMA =     ME*LEACH + LTAI1 + 1
      L2CMAPPMA = (ME+1)*LEACH + LTAI2
C
      LEACH  = N1213PMB/NPROC  
      LTAIL  = N1213PMB - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L11213PMB =     ME*LEACH + LTAI1 + 1
      L21213PMB = (ME+1)*LEACH + LTAI2
C
      LEACH  = N14PMB/NPROC  
      LTAIL  = N14PMB - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1N14PMB =     ME*LEACH + LTAI1 + 1
      L2N14PMB = (ME+1)*LEACH + LTAI2
C
      LEACH  = NBONDPMB/NPROC
      LTAIL  = NBONDPMB - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1BONDPMB =     ME*LEACH + LTAI1 + 1
      L2BONDPMB = (ME+1)*LEACH + LTAI2
C
      LEACH  = NANGLPMB/NPROC
      LTAIL  = NANGLPMB - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1ANGLPMB =     ME*LEACH + LTAI1 + 1
      L2ANGLPMB = (ME+1)*LEACH + LTAI2
C
      LEACH  = NDIHRPMB/NPROC
      LTAIL  = NDIHRPMB - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1DIHRPMB =     ME*LEACH + LTAI1 + 1
      L2DIHRPMB = (ME+1)*LEACH + LTAI2
C
      LEACH  = NDIHBPMB/NPROC
      LTAIL  = NDIHBPMB - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1DIHBPMB =     ME*LEACH + LTAI1 + 1
      L2DIHBPMB = (ME+1)*LEACH + LTAI2
C
      LEACH  = NWAGGPMB/NPROC
      LTAIL  = NWAGGPMB - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1WAGGPMB =     ME*LEACH + LTAI1 + 1
      L2WAGGPMB = (ME+1)*LEACH + LTAI2
C
      LEACH  = NCMAPPMB/NPROC
      LTAIL  = NCMAPPMB - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1CMAPPMB =     ME*LEACH + LTAI1 + 1
      L2CMAPPMB = (ME+1)*LEACH + LTAI2
C
      LEACH  = NKVEC/NPROC
      LTAIL  = NKVEC - LEACH*NPROC
      LTAI1  = 0
      IF((ME+1).LE.LTAIL) LTAI1 = ME*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI1 = LTAIL
      LTAI2  = 0
      IF((ME+1).LE.LTAIL) LTAI2 = (ME+1)*MIN(1,LTAIL)
      IF((ME+1).GT.LTAIL) LTAI2 = LTAIL
      L1KVEC =     ME*LEACH + LTAI1 + 1
      L2KVEC = (ME+1)*LEACH + LTAI2
C
C     -- PREPARE THE INITIAL NEIGHBOR LISTS --
C
      MXLIST1 = (10+MXFFAT/NPROC)*MXLIST1/NWDVAR/2
      MXLIST2 = (10+MXFFAT/NPROC)*MXLIST2/NWDVAR/2
      CALL NONBOND(0,CORD,CORDSV,CORDSV2,CORDSVQ,
     *             NONLS1,NONLS2,
     *             NONLSTQ,LSTCELL,
     *             MVFASTS2,MVFASTS3,MVFASTS4,
     *             MVFASTL2,MVFASTL3,MVFASTL4,
     *             NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *             NONLSPMA,NONLSPMB)
      CALL DCOPY(NFFAT,POL,1,POLSV,1)
      DO IFFAT=1,NFFAT 
         EPS(IFFAT)  = 2.0D+00*SQRT(EPS(IFFAT))
         EPS2(IFFAT) = 2.0D+00*SQRT(EPS2(IFFAT))
      ENDDO
      DO IFFAT=1,N2FFAT
         EPSB(IFFAT)  = 2.0D+00*SQRT(EPSB(IFFAT))
         EPS2B(IFFAT) = 2.0D+00*SQRT(EPS2B(IFFAT))
      ENDDO
C
C     -- PREPARE FOR RATTLE CALCULATION --
C        1. THIS WILL AFFECT INITIAL COORDINATES AND
C           VELOCITY IF NOT A RESTART JOB
C        2. THIS WILL NOT AFFECT RESTART JOBS
C
      IF(NRATTLE.GT.0.OR.NRATM1.GT.0) THEN
         DO IFFAT = 1, NFFAT
            DO III = 1, 3
               CHANGE = -VEL(III,IFFAT)*DT
               OLDCORD(III,IFFAT)=CORD(III,IFFAT)+CHANGE
            ENDDO
         ENDDO
         IF(NACTMM.GT.0) THEN
            DO IFFAT = 1, NFFAT
               DO III = 1, 3
                  OLDCORD(III,IFFAT)=CORD(III,IFFAT)
               ENDDO
            ENDDO
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0) THEN
                  DO III = 1, 3
                     OLDCORD(III,IFFAT)
     *                 =CORD(III,IFFAT)-VEL(III,IFFAT)*DT
                  ENDDO
               END IF
            ENDDO
         END IF
C
         IF(NRATM1.GT.0) THEN
            DO KFIX=1,NFIXMM
               IF(KFIX.EQ.IFFAT.OR.KFIX.EQ.JFFAT) THEN
                  IF(MASWRK) WRITE(IW,'(1X,A/)')
     *            'ERROR: NFIXMM ATOMS CANNOT BE IRMDF ATOMS'
                  CALL ABRT
               END IF
            ENDDO
         END IF
C
         DO KFIX=1,NFIXMM
            DO III = 1, 3
               OLDCORD(III,IFIXMM(KFIX)) = CORD(III,IFIXMM(KFIX))
            ENDDO
         ENDDO
C        - FIXED ATOMS DO NOT MOVE, SO MAKE THE MASS INFINITE
         IF(NACTMM.GT.0) THEN
            DO IFFAT = 1, NFFAT
               ONEMAS(IFFAT) = 0.0D+00
            ENDDO
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0) ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
            ENDDO
         END IF
         DO KFIX = 1, NFIXMM
            KFFAT = IFIXMM(KFIX)
            IF(KFFAT.GT.0) ONEMAS(KFFAT) = 0.0D+00
         ENDDO
C
         IF(NRATTLE.GT.0) THEN
            CALL RATTLE1(CORD,OLDCORD,VEL,DSTRAT,ONEMAS,LSTRAT,0)
            CALL RATTLE2a(CORD,VEL,DSTRAT,ONEMAS,LSTRAT,0)
         END IF
C
         IF(NRATM1.GT.0.AND.RUNTYP.EQ.MD) THEN
            CALL IRMDF1(CORD,OLDCORD,VEL,ONEMAS,0,RMDFCE)
            CALL IRMDF2(CORD,VEL,ONEMAS,0)
         END IF
C
         DO KFIX = 1, NFIXMM
            KFFAT = IFIXMM(KFIX)
            IF(KFFAT.GT.0) ONEMAS(KFFAT) = 1.0D+00/ZMAS(KFFAT)
         ENDDO
C
         IF(NACTMM.GT.0) THEN
            DO IFFAT = 1, NFFAT
               ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
            ENDDO
         END IF
C        - RATTLE CODE WORKS DIRECTLY ON MM ATOMS, BUT NOW PASS TO QM
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IFFAT = 1, NFFAT
               KAT = LISTQM(IFFAT)
               IF(KAT.GT.0) THEN
                  C(1,KAT)     = CORD(1,IFFAT) ! INCLUDING TIP5P L4,L5
                  C(2,KAT)     = CORD(2,IFFAT)
                  C(3,KAT)     = CORD(3,IFFAT)
                  QMVEL(1,KAT) = VEL(1,IFFAT)
                  QMVEL(2,KAT) = VEL(2,IFFAT)
                  QMVEL(3,KAT) = VEL(3,IFFAT)
               END IF
            ENDDO
         END IF
C        - RESCALE INITIAL VELOCITY AFTER RATTLE -
         IF((NAT.GT.0.AND.INPQMV.EQ.0).OR.INPMMV.EQ.0.OR.
     *                                   IADDWAT.GT.0)THEN
            NNNATM = NFFAT + NAT - LISTQM(NFFAT+NAT+1)
            IF(NNNATM.GT.2)     NDOF = 3*NNNATM - 6
            IF(NNNATM.EQ.2)     NDOF = 3*NNNATM - 5
            IF(NRATTLE.GT.0)    NDOF = NDOF - NRATTLE
            IF(NRATM1.GT.0)     NDOF = NDOF - 1
            IF(XBOX.LT.1.0D+30) NDOF = NDOF + 1
            IF(YBOX.LT.1.0D+30) NDOF = NDOF + 1
            IF(ZBOX.LT.1.0D+30) NDOF = NDOF + 1
            IF(NNNATM.EQ.1)     NDOF = 3
            AMU2QM = ZERO
            DO IAT =1, NAT
               DUMY = ZERO
               DO III = 1, 3
                  DUMY = DUMY + QMVEL(III,IAT)*QMVEL(III,IAT)
               ENDDO
               AMU2QM = AMU2QM + DUMY*QMZMAS(IAT)
            ENDDO
            AMU2MM = ZERO
            DO IFFAT = 1, NFFAT
               IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NAT) THEN
                  DUMY = ZERO
                  DO III = 1, 3
                     DUMY = DUMY + VEL(III,IFFAT)*VEL(III,IFFAT)
                  ENDDO
                  AMU2MM = AMU2MM + DUMY*ZMAS(IFFAT)
               END IF
            ENDDO
            AMU2  = AMU2QM + AMU2MM
            TEMP  = TOKELVIN*AMU2/NDOF
            TFACT = SQRT(TEMP0/TEMP)
            DO IAT = 1, NAT
               QMVEL(1,IAT) = QMVEL(1,IAT)*TFACT
               QMVEL(2,IAT) = QMVEL(2,IAT)*TFACT
               QMVEL(3,IAT) = QMVEL(3,IAT)*TFACT
               IF(LISTQM(NFFAT+IAT).GT.0)THEN
                  IFFAT=LISTQM(NFFAT+IAT)
                  VEL(1,IFFAT)=QMVEL(1,IAT)
                  VEL(2,IFFAT)=QMVEL(2,IAT)
                  VEL(3,IFFAT)=QMVEL(3,IAT)
               END IF
            ENDDO
            DO IFFAT = 1, NFFAT
               IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NAT) THEN
                  VEL(1,IFFAT) = VEL(1,IFFAT)*TFACT
                  VEL(2,IFFAT) = VEL(2,IFFAT)*TFACT
                  VEL(3,IFFAT) = VEL(3,IFFAT)*TFACT
               END IF
            ENDDO
         END IF
      END IF
C
C     -- PREPARE EWALD LIST AND UNIT KVECTOR --
      IF(IEWALD.GT.0) CALL EWALDPREPARE(X(LFFKVEC))
C
C     -- ZERO ALL ENERGIES --
      EN12    = ZERO
      EN123   = ZERO
      EN123R4 = ZERO
      EN123B4 = ZERO
      EN234W1 = ZERO
      ENCHAR  = ZERO
      ENLJR   = ZERO
      ENLJD   = ZERO
      ENPOL   = ZERO
      XENPOL  = ZERO
      ENRXNPOL= ZERO
      ENFIXSO = ZERO
      ENUCCH  = ZERO
      ENRXN   = ZERO
      XENRXN  = ZERO
      ENRXNR  = ZERO
      ENCENT  = ZERO
      ENCMAP  = ZERO
      ENBIAS  = ZERO
      EN12312 = ZERO
      SOL1CH  = ZERO
      SOL1LJ  = ZERO
      SOL1IM  = ZERO
      SOL2CH  = ZERO
      SOL2LJ  = ZERO
      SOL2IM  = ZERO
      PMF1BD  = ZERO
      PMF1AG  = ZERO
      PMF1DR  = ZERO
      PMF1DB  = ZERO
      PMF1WG  = ZERO
      PMF1CM  = ZERO
      PMF1CH  = ZERO
      PMF1LJ  = ZERO
      CALL VCLR(ENQUANP,1,30)
C
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'  ** QUANPOL IS SUCCESSFULLY LOADED **'
         WRITE(IW,*)' '
      END IF
      CALL TIMIT(1)
C
 1010 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1020 FORMAT(1X,A10,1X,F10.6,1X,F9.5,1X,F8.6,1X,
     *       F8.6,1X,F8.6,1X,F8.6,1X,F8.6)
 1030 FORMAT(1X,A10,1X,I1,1X,F8.5,1X,F6.4,1X,F8.5,1X,F6.4,
     *                    1X,F8.5,1X,F6.4,1X,F8.5,1X,F6.4,
     *                    1X,F8.5,1X,F6.4,1X,F8.5,1X,F6.4)
 1040 FORMAT(1X,I10,1X,I8,1X,I8,1X,F12.6,1X,F9.6)
 1050 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,F12.6,1X,F11.5)
 1055 FORMAT(1X,I10,1X,I8,1X,I8,1X,F12.6,1X,F12.6)
 1060 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,I8,1X,F11.6,1X,I5,1X,F8.2)
 1065 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,I8,1X,F9.5,1X,F9.5,1X,F9.5)
 1070 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,I8,1X,F10.4,1X,F8.2)
 1075 FORMAT(1X,I10,6(1X,I8))
 1080 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,I8,1X,F10.6)
C
      CALL FLSHBF(IW)
      CALL FLSHBF(IP)
      RETURN
      END
C*MODULE QUANPO  *DECK RDXYZ
!>    
!> @brief    read in $FFDATA COORDINATE section
!>
      SUBROUTINE RDXYZ(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,MXFFAT,NFOLD)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 ATMNAM,NAME
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION RMASS(200)
      DIMENSION ATMNAM(*),CORD(3,*),ZANF(*),ZMAS(*),ONEMAS(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN COORDINATES IN $FFDATA --
C
      IERR = 0
      IEOF = 0
      NFFAT= 0
      NCOPY= 2**NFOLD
C
  100 CONTINUE
      IF((NFFAT*NCOPY).GT.MXFFAT-10) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: TOO MANY ATOMS. INCREASE MXFFAT' 
         CALL ABRT
      END IF
C
      CALL RDCARD('RDXYZ   ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: END OF FILE READING $FFDATA COORDINATES'
         CALL ABRT
      END IF
C
      NAME='          '
      LGSTR=-10
      CALL GSTRNG(NAME,LGSTR)
      IF(NAME.EQ.'STOP      ') GOTO 200
C
      NFFAT=NFFAT+1
      ATMNAM(NFFAT) = NAME
      ZANF(NFFAT) = RFIND('ZANF    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR READING $FFDATA NUC CHARGE'
         CALL ABRT
      END IF
      ZDIFF = ABS(ZANF(NFFAT)) - ABS(NINT(ZANF(NFFAT)))
      IF(ZANF(NFFAT).LT.0.0D+00 .OR. ZDIFF.GT.1.0D-07) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING $FFDATA NUC CHARGE'
         CALL ABRT
      END IF
C
      CORD(1,NFFAT) = RFIND('XCORD   ',IERR)*TOBOHR
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING $FFDATA X COORD'
         CALL ABRT
      END IF
C
      CORD(2,NFFAT) = RFIND('YCORD   ',IERR)*TOBOHR
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING $FFDATA Y COORD'
         CALL ABRT
      END IF
C
      CORD(3,NFFAT) = RFIND('ZCORD   ',IERR)*TOBOHR
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING $FFDATA Z COORD'
         CALL ABRT
      END IF
C
      GOTO 100
C
  200 CONTINUE
C
C     -- SET ATOMIC MASS AND CONVERT TO AU (ELECTRON MASS)
C
      CALL RAMS(RMASS,2)
      DO IFFAT = 1, NFFAT
         ZMAS(IFFAT)  = RMASS(INT(ZANF(IFFAT)))*1822.88850204D+00
         ONEMAS(IFFAT)= 1.0D+00/ZMAS(IFFAT)
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK RDQMVEL
!>    
!> @brief    read in QM atom velocity
!>
      SUBROUTINE RDQMVEL(QMVEL)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 NAME
C
      DIMENSION QMVEL(3,*)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C
C     -- READ IN QM INITIAL VELOCITIES IN $FFDATA --
C
      IERR = 0
      IEOF = 0
      IAT  = 0
C
 100  CONTINUE
      CALL RDCARD('RDVEL    ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,'(1X,A/)')
     *   'ERROR: END OF FILE READING $FFDATA QMVELOCITY'
         CALL ABRT
      END IF
C
      NAME='          '
      LGSTR=-10
      CALL GSTRNG(NAME,LGSTR)
      IF(NAME.EQ.'STOP      ') RETURN
C
      IAT=IAT+1
C
      QMVEL(1,IAT) = RFIND('VELX    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING X VELOCITY'
         CALL ABRT
      END IF
C
      QMVEL(2,IAT) = RFIND('VELY    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING Y VELOCITY'
         CALL ABRT
      END IF
C
      QMVEL(3,IAT) = RFIND('VELZ    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING Z VELOCITY'
         CALL ABRT
      END IF
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDMMVEL
!>
!> @brief    read in MM atom velocity
!>
      SUBROUTINE RDMMVEL(VEL)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      CHARACTER*10 NAME
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION VEL(3,*)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN INITIAL VELOCITIES IN $FFDATA --
C
      IERR = 0
      IEOF = 0
      IFFAT= 0
C
 100  CONTINUE
      CALL RDCARD('RDVEL    ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: END OF FILE READING $FFDATA MMVELOCITY'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      NAME='          '
      LGSTR=-10
      CALL GSTRNG(NAME,LGSTR)
      IF(NAME.EQ.'STOP      ') RETURN
C
      IFFAT=IFFAT+1
C
      VEL(1,IFFAT) = RFIND('VELX    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING X VELOCITY'
         CALL ABRT
      END IF
C
      VEL(2,IFFAT) = RFIND('VELY    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING Y VELOCITY'
         CALL ABRT
      END IF
C
      VEL(3,IFFAT) = RFIND('VELZ    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING Z VELOCITY'
         CALL ABRT
      END IF
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDPARA
!>
!> @brief    read in $FFDATA PARAMETER section
!>
      SUBROUTINE RDPARA(ATMNAM,ZMAS,ONEMAS,CHARG,POL,SIG,EPS,SIG2,EPS2)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
C
      CHARACTER*10 ATMNAM,FFNAME
C
      DIMENSION ATMNAM(*),ZMAS(*),ONEMAS(*),
     *          CHARG(*),POL(*),SIG(*),EPS(*),SIG2(*),EPS2(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C
      IERR = 0
      IEOF = 0
      K    = 0
  100 CONTINUE
      CALL RDCARD('RDPARAMT',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: END OF FILE READING FFDATA PARAMETERS'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      FFNAME = '          '
      LGSTR=-10
      CALL GSTRNG(FFNAME,LGSTR)
      IF(FFNAME.EQ.'STOP      ') GOTO 200
      K = K + 1
      IF(K.GT.NFFAT) THEN
         IF(MASWRK)WRITE(IW,9000) K,NFFAT
         CALL ABRT
      END IF
      IF(FFNAME.NE.ATMNAM(K)) THEN
         IF(MASWRK)WRITE(IW,'(4A)')
     *   'ERROR: ',FFNAME,' MUST EQUAL TO ',ATMNAM(K)
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      ZMAS(K)  = RFIND('FFMASS  ',IERR)*1822.88850204D+00
      ONEMAS(K)= 1.0D+00/ZMAS(K)
      CHARG(K) = RFIND('FFCHARGE',IERR)
      IF(NFFTYP/10000.EQ.5) CHARG(K) = 
     *                      DBLE(NINT(CHARG(K)*3.0D+04))/3.0D+04
      POL(K)   = RFIND('FFPOL   ',IERR)*TOBOHR**3
      SIG(K)   = RFIND('FFSIGMA ',IERR)*TOBOHR
      EPS(K)   = RFIND('FFEPSILN',IERR)*TOHART
      SIG2(K)  = RFIND('FFSIGMA ',IERR)*TOBOHR
      EPS2(K)  = RFIND('FFEPSILN',IERR)*TOHART
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING $FFDATA PARAMETERS'
         CALL ABRT
      END IF
      GOTO 100
C
 200  CONTINUE
C
C     -- LJSIGMA = 1 MEANS USING SIGMA --
C        LJSIGMA = 0 MEANS USING RMIN/2 --
C
      IF(LJSIGMA.EQ.0) THEN
         DO IPTS = 1, K
            SIG(IPTS)  = SIG(IPTS) *1.781797436280679D+00
            SIG2(IPTS) = SIG2(IPTS)*1.781797436280679D+00
         ENDDO
         IF(NFFTYP/10000.EQ.4) THEN
            DO IPTS = 1, K
               SIG (IPTS)=DBLE(NINT(SIG (IPTS)*TOANGS*1.0D+05))
     *                    *TOBOHR*1.0D-05
               SIG2(IPTS)=DBLE(NINT(SIG2(IPTS)*TOANGS*1.0D+05))
     *                    *TOBOHR*1.0D-05
            ENDDO
         END IF
      END IF
C
 9000 FORMAT(1X,'ERROR IN READING $FFDATA PARAMETERS',I10,
     *          ' EXCEEDED NFFAT=',I10)
      END
C*MODULE QUANPO  *DECK RDQMMM
      SUBROUTINE RDQMMM(CLPR,ZLPR,NLPR)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00)
C
      CHARACTER*10 FFNAME
C
      DIMENSION CLPR(4,*),ZLPR(4,*),NLPR(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C
      IERR = 0
      IEOF = 0
      NPTS = 0
  100 CONTINUE
      K = NPTS+1
      IF(NPTS.GT.NFFAT) THEN
         IF(MASWRK) WRITE(IW,9000) NFFAT
         CALL ABRT
      END IF
      CALL RDCARD('RDQMMMREP ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *     'ERROR: END OF FILE READING QMMMREP DATA'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      FFNAME = '          '
      LGSTR=-10
      CALL GSTRNG(FFNAME,LGSTR)
      IF(FFNAME.EQ.'STOP      ') GOTO 400
C
      NTERMS = IFIND('NTERM   ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*) 'QMMMREP: ERROR READING NTERMS'
         CALL ABRT
      END IF
      IF(NTERMS.GT.4) THEN
         IF(MASWRK) WRITE(IW,*) 'QMMMREP: NTERMS CANNOT BE > 4'
         CALL ABRT
      END IF
      DO 300 II = 1, NTERMS
C
         CLPR(II,K) = RFIND('CLPR    ',IERR)
         IF(IERR.NE.0) THEN
            IF(MASWRK) WRITE(IW,*) 'QMMMREP: ERORR READING CLPR'
            CALL ABRT
         END IF
C
         ZLPR(II,K) = RFIND('ZLPR    ',IERR)
         IF(IERR.NE.0) THEN
            IF(MASWRK) WRITE(IW,*) 'QMMMREP: ERORR READING ZLPR'
            CALL ABRT
         END IF
         IF(CLPR(II,K).NE.ZERO .AND. ZLPR(II,K).EQ.ZERO) THEN
            IF(MASWRK) WRITE(IW,*) 'QMMMREP: ZETA CANNOT BE ZERO'
            CALL ABRT
         END IF
  300 CONTINUE
C      -- THE CURRENT CODE ONLY USES POTENTIAL = R**2.  
      NLPR(K) = 2
C
      NPTS = NPTS + 1
      GOTO 100
C
  400 CONTINUE
      RETURN
 9000 FORMAT(1X,'ERROR IN READING QMMMREP POINTS,',
     *          ' EXCEEDED NFFAT=',I8)
      END
C*MODULE QUANPO  *DECK RDBOND
      SUBROUTINE RDBOND(BOND0,FCBOND,IPAIR,MXBOND)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION BOND0(MXBOND),FCBOND(MXBOND),IPAIR(2,MXBOND)
C
      CHARACTER*10 HEAD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C
C     -- READ IN BOND INFO IN $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NBOND=0
C
  100 CONTINUE
      IF(NBOND.GT.MXBOND) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY BONDS. INCREASE MXBOND'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      CALL RDCARD('RDBOND  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR: END OF FILE READING BOND INFO'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NBOND = NBOND + 1
      IPAIR(1,NBOND) = IFIND('IPAIR  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING BOND ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      IPAIR(2,NBOND) = IFIND('IPAIR  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING BOND ATM2 IN $FFDATA'
         CALL ABRT
      END IF
C
      FCBOND(NBOND) = RFIND('FCBOND  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING FCBOND IN $FFDATA'
         CALL ABRT
      END IF
C     -INPUT KCAL/(MOL*A*A), CONVERT TO HARTREE/(BOHR*BOHR)
      FCBOND(NBOND) = FCBOND(NBOND)*TOANGS*TOANGS*TOHART
C
      BOND0(NBOND) = RFIND('BOND0   ',IERR)*TOBOHR
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING BOND0 IN $FFDATA'
         CALL ABRT
      END IF
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDANGL
      SUBROUTINE RDANGL(ANGL0,FCANGL,KLIST,MXANGL)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      DIMENSION ANGL0(MXANGL),FCANGL(MXANGL),KLIST(3,MXANGL)
C
      CHARACTER*10 HEAD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN ANGLE INFO FROM $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NANGL  = 0
C
  100 CONTINUE
      IF(NANGL.GT.MXANGL) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY ANGLES. INCREASE MXANGL'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      CALL RDCARD('RDANGL  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR: END OF FILE READING ANGLE INFO'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NANGL = NANGL + 1
      KLIST(1,NANGL) = IFIND('KLIST1  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING ANGLE ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      KLIST(2,NANGL) = IFIND('KLIST2  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING ANGLE ATM2 IN $FFDATA'
         CALL ABRT
      END IF
      KLIST(3,NANGL) = IFIND('KLIST3  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING ANGLE ATM3 IN $FFDATA'
         CALL ABRT
      END IF
C
      FCANGL(NANGL) = RFIND('FCANGL  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING FCANGL IN $FFDATA'
         CALL ABRT
      END IF
C     -INPUT KCAL/(MOL*RAD*RAD), CONVERT TO HARTREE/(RAD*RAD)
      FCANGL(NANGL) = FCANGL(NANGL)*TOHART
C
      ANGL0(NANGL) = RFIND('ANGL0   ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING ANGL0 IN $FFDATA'
         CALL ABRT
      END IF
C     - INPUT DEGREES, CONVERT TO RADIANS
      ANGL0(NANGL) = ANGL0(NANGL)*TORAD
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDDIHR
      SUBROUTINE RDDIHR(LLIST,GAMA,NNN,VROT,MXDIHR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      DIMENSION LLIST(4,MXDIHR),GAMA(MXDIHR),NNN(MXDIHR),VROT(MXDIHR)
C
      CHARACTER*10 HEAD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN DIHEDRAL ROTATION ANGLE INFO FROM $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NDIHR  = 0
C
  100 CONTINUE
      IF(NDIHR.GT.MXDIHR) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY DIHR. INCREASE MXDIHR'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      CALL RDCARD('RDDIHR  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: END OF FILE READING DIHROT GROUP IN $FFDATA'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NDIHR = NDIHR + 1
      LLIST(1,NDIHR) = IFIND('LLIST1  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      LLIST(2,NDIHR) = IFIND('LLIST2  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT ATM2 IN $FFDATA'
         CALL ABRT
      END IF
      LLIST(3,NDIHR) = IFIND('LLIST3  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT ATM3 IN $FFDATA'
         CALL ABRT
      END IF
      LLIST(4,NDIHR) = IFIND('LLIST4  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT ATM4 IN $FFDATA'
         CALL ABRT
      END IF
      VROT(NDIHR) = RFIND('VROT    ',IERR)
C     -INPUT KCAL/MOL, CONVERT TO HARTREE
      VROT(NDIHR) = VROT(NDIHR)*TOHART
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT VROT IN $FFDATA'
         CALL ABRT
      END IF
C
      NNN(NDIHR) = IFIND('NNN     ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT NNN IN $FFDATA'
         CALL ABRT
      END IF
C
      GAMA(NDIHR) = RFIND('GAMA   ',IERR)
C     - INPUT DEGREES, CONVERT TO RADIANS
      GAMA(NDIHR) = GAMA(NDIHR)*TORAD
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT GAMA IN $FFDATA'
         CALL ABRT
      END IF
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDDIHB
      SUBROUTINE RDDIHB(NLIST,DIHB0,FCDIHB,MXDIHB)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      DIMENSION NLIST(4,MXDIHB),DIHB0(MXDIHB),FCDIHB(MXDIHB)
C
      CHARACTER*10 HEAD
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, FEB 2011, LINCOLN
C
C     -- READ IN DIHEDRAL BENDING INFO FROM $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NDIHB  = 0
C
  100 CONTINUE
      IF(NDIHB.GT.MXDIHB) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY DIHB. INCREASE MXDIHB'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      CALL RDCARD('RDDIHB  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR: END OF FILE READING DIHBND GROUP IN $FFDATA'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NDIHB = NDIHB + 1
      NLIST(1,NDIHB) = IFIND('NLIST1  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR READING DIHBND ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      NLIST(2,NDIHB) = IFIND('NLIST2  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *       'ERROR READING DIHBND ATM2 IN $FFDATA'
         CALL ABRT
      END IF
      NLIST(3,NDIHB) = IFIND('NLIST3  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR READING DIHBND ATM3 IN $FFDATA'
         CALL ABRT
      END IF
      NLIST(4,NDIHB) = IFIND('NLIST4  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR READING DIHBND ATM4 IN $FFDATA'
         CALL ABRT
      END IF
      FCDIHB(NDIHB) = RFIND('FCDIHB  ',IERR)
C     -INPUT KCAL/(MOL*RAD*RAD), CONVERT TO HARTREE/(RAD*RAD)
      FCDIHB(NDIHB) = FCDIHB(NDIHB)*TOHART
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR READING DIHBND FCDIHB IN $FFDATA'
         CALL ABRT
      END IF
C
      DIHB0(NDIHB)  = RFIND('DIHB0   ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR READING DIHBND DIHB0 IN $FFDATA'
         CALL ABRT
      END IF
      IF(DIHB0(NDIHB).NE.  0.0D+00 .AND.
     *   DIHB0(NDIHB).NE.180.0D+00) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR: DIHB0 MUST BE 0.0 OR 180.0 DEGREES'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      DIHB0(NDIHB)  = DIHB0(NDIHB)*TORAD
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDCMAP
      SUBROUTINE RDCMAP(MAPLST,MXCMAP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION MAPLST(6,MXCMAP)
C
      CHARACTER*10 HEAD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, APR 2011, LINCOLN
C
C     -- READ IN CMAP LIST FROM $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NCMAP  = 0
C
  100 CONTINUE
      IF(NCMAP.GT.MXCMAP) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY NCMAP. INCREASE MXCMAP'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      CALL RDCARD('RDCMAP  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: END OF FILE READING CMAP GROUP IN $FFDATA'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NCMAP = NCMAP + 1
      MAPLST(1,NCMAP) = IFIND('MAPLST1 ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING CMAP ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      MAPLST(2,NCMAP) = IFIND('MAPLST2 ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING CMAP ATM2 IN $FFDATA'
         CALL ABRT
      END IF
      MAPLST(3,NCMAP) = IFIND('MAPLST3 ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING CMAP ATM3 IN $FFDATA'
         CALL ABRT
      END IF
      MAPLST(4,NCMAP) = IFIND('MAPLST4 ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING CMAP ATM4 IN $FFDATA'
         CALL ABRT
      END IF
      MAPLST(5,NCMAP) = IFIND('MAPLST5 ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING CMAP ATM5 IN $FFDATA'
         CALL ABRT
      END IF
      MAPLST(6,NCMAP) = IFIND('MAPLST6 ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING CMAP ITYPE IN $FFDATA'
         CALL ABRT
      END IF
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDWAGG
      SUBROUTINE RDWAGG(MLIST,FCWAGG,MXWAGG)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
C
      DIMENSION MLIST(4,MXWAGG),FCWAGG(MXWAGG)
C
      CHARACTER*10 HEAD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN WAGGING INFO FROM $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NWAGG  = 0
C
  100 CONTINUE
      IF(NWAGG.GT.MXWAGG) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY WAGG. INCREASE MXWAGG'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      CALL RDCARD('RDWAGG  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR: END OF FILE READING WAGGING GROUP IN $FFDATA'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NWAGG = NWAGG + 1
      MLIST(2,NWAGG) = IFIND('MLIST2  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR READING WAGGING ATM2 IN $FFDATA'
         CALL ABRT
      END IF
      MLIST(3,NWAGG) = IFIND('MLIST3  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR READING WAGGING ATM3 IN $FFDATA'
         CALL ABRT
      END IF
      MLIST(4,NWAGG) = IFIND('MLIST4  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR READING WAGGING ATM4 IN $FFDATA'
         CALL ABRT
      END IF
      MLIST(1,NWAGG) = IFIND('MLIST1  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR READING WAGGING ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      FCWAGG(NWAGG) = RFIND('FCWAGG  ',IERR)
C     -INPUT KCAL/(MOL*RAD*RAD), CONVERT TO HARTREE/(RAD*RAD)
      FCWAGG(NWAGG) = FCWAGG(NWAGG)*TOHART
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR READING FCWAGG IN $FFDATA'
         CALL ABRT
      END IF
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDSTRBEND
!>
!> @brief    read in MMFF94 stretch-bending parameters
!>
!> @author   Hui Li group
!>
!> @details  read $FFDATA RDFCSTBD section
!>
      SUBROUTINE RDSTRBEND(FCSTBD,KBLST)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (TOANGS=0.52917724924D+00)
C
      DIMENSION FCSTBD(2,*),KBLST(2,*)
C
      CHARACTER*10 HEAD
C
      COMMON /FFMAX / MXFFAT,MXBOND,MXANGL,MXDIHR,MXDIHB,MXCMAP,
     *                MXWAGG
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HONGBO ZHU, OCT 30, 2012, LINCOLN
C
C     -- READ IN STRETCHING-BENDING INFORMATION IN $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      KANGL  = 0
C
  100 CONTINUE
      IF(KANGL.GT.MXANGL) THEN
         IF(MASWRK)WRITE(IW,*)
     *     'ERROR: TOO MANY STRETCH-BEND. INCREASE MXANGL'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      CALL RDCARD('RDFCSTBD',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*) 
     *     'ERROR: END OF FILE READING STRETCH-BEND INFO'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') THEN
         IF(KANGL.NE.NANGL) THEN
            IF(MASWRK)WRITE(IW,*)
     *        'ERROR: NUMBER OF ENTRIES IN STRBEND NOT',
     *        ' EQUAL TO THAT IN ANGLE.'
            IF(MASWRK)WRITE(IW,*)' '
            CALL ABRT
         END IF
         RETURN
      END IF
C
      KANGL = KANGL + 1
      KBLST(1,KANGL) = IFIND('KBLST1',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *     'ERROR READING STRETCH-BEND BOND1 IN $FFDATA'
         CALL ABRT
      END IF
      KBLST(2,KANGL) = IFIND('KBLST2',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 
     *     'ERROR READING STRETCH-BEND BOND2 IN $FFDATA'
         CALL ABRT
      END IF
C
      FCSTBD(1,KANGL) = RFIND('KBAIJK',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING KBAIJK IN $FFDATA'
         CALL ABRT
      END IF
      FCSTBD(2,KANGL) = RFIND('KBAKJI',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING KBAKJI IN $FFDATA'
         CALL ABRT
      END IF
C
C     -INPUT KCAL/(MOL*RAD*ANGSTROM), CONVERT TO HARTREE/(RAD*BOHR)
      FCSTBD(1,KANGL) = FCSTBD(1,KANGL)*TOANGS*TOHART
      FCSTBD(2,KANGL) = FCSTBD(2,KANGL)*TOANGS*TOHART
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDDIHR3V
!>       
!> @brief    read in MMFF94 dihedral rotation parameters
!>       
!> @author   Hui Li group
!>    
!> @details  read $FFDATA RDDIHR3V section
!>
      SUBROUTINE RDDIHR3V(LLIST,FCDIHR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
C
      DIMENSION LLIST(4,MXDIHR),FCDIHR(3,MXDIHR)
C
      CHARACTER*10 HEAD
C
      COMMON /FFMAX / MXFFAT,MXBOND,MXANGL,MXDIHR,MXDIHB,MXCMAP,
     *                MXWAGG
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HONGBO ZHU, OCT 30, 2012, LINCOLN
C
C     -- READ IN DIHEDRAL ROTATION ANGLE INFO FROM $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NDIHR  = 0
C
  100 CONTINUE
      IF(NDIHR.GT.MXDIHR) THEN
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: TOO MANY DIHR3V. INCREASE MXDIHR'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      CALL RDCARD('RDDIHR3V',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: END OF FILE READING DIHR3V SECTION IN $FFDATA'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NDIHR = NDIHR + 1
      LLIST(1,NDIHR) = IFIND('LLIST1  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHR3V ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      LLIST(2,NDIHR) = IFIND('LLIST2  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHR3V ATM2 IN $FFDATA'
         CALL ABRT
      END IF
      LLIST(3,NDIHR) = IFIND('LLIST3  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHR3V ATM3 IN $FFDATA'
         CALL ABRT
      END IF
      LLIST(4,NDIHR) = IFIND('LLIST4  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHR3V ATM4 IN $FFDATA'
         CALL ABRT
      END IF
      FCDIHR(1,NDIHR) = RFIND('VROT1   ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 
     *      'ERROR READING DIHR3V VROT1 IN $FFDATA'
         CALL ABRT
      END IF
      FCDIHR(2,NDIHR) = RFIND('VROT2   ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 
     *      'ERROR READING DIHR3V VROT2 IN $FFDATA'
         CALL ABRT
      END IF
      FCDIHR(3,NDIHR) = RFIND('VROT3   ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 
     *      'ERROR READING DIHR3V VROT3 IN $FFDATA'
         CALL ABRT
      END IF
C
C     -INPUT KCAL/MOL, CONVERT TO HARTREE
      FCDIHR(1,NDIHR) = FCDIHR(1,NDIHR)*TOHART
      FCDIHR(2,NDIHR) = FCDIHR(2,NDIHR)*TOHART
      FCDIHR(3,NDIHR) = FCDIHR(3,NDIHR)*TOHART
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDMMFFLJ
!>          
!> @brief    read in MMFF94 LJ parameters
!>       
!> @author   Hui Li group
!>    
!> @details  read $FFDATA MMFFLJ section
!>
      SUBROUTINE RDMMFFLJ(FCLJTP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION FCLJTP(2,MXMMTP,*)
C
      CHARACTER*10 HEAD
C
      COMMON /FFMPT2/ MXMMTP,LFFKBLST,LFFFCSTBD,LFFFCDIHR,
     *                LFFFCLJTP,LFFNTYPE,
     *                LFF2KBLST,LFF2FCSTBD,LFF2FCDIHR,
     *                LFF2FCLJTP,LFF2NTYPE
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, OCT 31, 2012, LINCOLN
C
C     -- READ IN MMFF LJ TABLE FROM $FFDATA --
C
      IEOF   = 0
      IERR   = 0
      CALL RDCARD('MMFFLJ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: END OF FILE READING MMFFLJ SECTION IN $FFDATA'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      NMMTP = IFIND('NMMTP',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR READING NMMTP IN MMFFLJ SECTION OF $FFDATA'
         CALL ABRT
      END IF
      IF(NMMTP.GT.MXMMTP) THEN
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: TOO MANY MM TYPE. INCREASE MXMMTP'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      IERR   = 0
      IEOF   = 0
C
      DO II=1,NMMTP
         DO JJ=1,NMMTP,3
            CALL RDCARD('MMFFLJ',IEOF)
            IF(IEOF.EQ.1) THEN
               IF(MASWRK)WRITE(IW,*)
     *         'ERROR: END OF FILE READING FCLJTP IN MMFFLJ SECTION'
               IF(MASWRK)WRITE(IW,*)' '
               CALL ABRT
            END IF
            IF(JJ.LE.NMMTP-2) THEN
               LLII = IFIND('II',IERR)
               LLJJ = IFIND('JJ',IERR)
               FCLJTP(1,JJ  ,II)=RFIND('FCLJTP1',IERR)*TOBOHR
               FCLJTP(2,JJ  ,II)=RFIND('FCLJTP2',IERR)*TOHART
               LLII = IFIND('II',IERR)
               LLJJ = IFIND('JJ',IERR)
               FCLJTP(1,JJ+1,II)=RFIND('FCLJTP1',IERR)*TOBOHR
               FCLJTP(2,JJ+1,II)=RFIND('FCLJTP2',IERR)*TOHART
               LLII = IFIND('II',IERR)
               LLJJ = IFIND('JJ',IERR)
               FCLJTP(1,JJ+2,II)=RFIND('FCLJTP1',IERR)*TOBOHR
               FCLJTP(2,JJ+2,II)=RFIND('FCLJTP2',IERR)*TOHART
            END IF
            IF(JJ.EQ.NMMTP-1) THEN
               LLII = IFIND('II',IERR)
               LLJJ = IFIND('JJ',IERR)
               FCLJTP(1,JJ  ,II)=RFIND('FCLJTP1',IERR)*TOBOHR
               FCLJTP(2,JJ  ,II)=RFIND('FCLJTP2',IERR)*TOHART
               LLII = IFIND('II',IERR)
               LLJJ = IFIND('JJ',IERR)
               FCLJTP(1,JJ+1,II)=RFIND('FCLJTP1',IERR)*TOBOHR
               FCLJTP(2,JJ+1,II)=RFIND('FCLJTP2',IERR)*TOHART
            END IF
            IF(JJ.EQ.NMMTP  ) THEN
               LLII = IFIND('II',IERR)
               LLJJ = IFIND('JJ',IERR)
               FCLJTP(1,JJ  ,II)=RFIND('FCLJTP1',IERR)*TOBOHR
               FCLJTP(2,JJ  ,II)=RFIND('FCLJTP2',IERR)*TOHART
            END IF
         ENDDO
      ENDDO
      LLII = LLII
      LLJJ = LLJJ
C
      CALL RDCARD('MMFFLJ',IEOF)
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') THEN
         RETURN
      ELSE
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: MMFFLJ SECTION MUST HAVE A "STOP" AT THE END'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      END
C*MODULE QUANPO  *DECK RDMMTYPE
!>          
!> @brief    read in MMFF94 atomic types
!>           
!> @author   Hui Li group
!>    
!> @details  read $FFDATA MMTYPE section
!>
      SUBROUTINE RDMMTYPE(NTYPE)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION NTYPE(*)
C
      CHARACTER*10 HEAD
C
      COMMON /FFMAX / MXFFAT,MXBOND,MXANGL,MXDIHR,MXDIHB,MXCMAP,
     *                MXWAGG
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, OCT 31, 2012, LINCOLN
C
C     -- READ IN MMFF NTYPE FROM $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      CALL RDCARD('MMTYPE',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: END OF FILE READING MMTYPE SECTION IN $FFDATA'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      NATOM = IFIND('NATOM',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR READING NATOM IN MMTYPE SECTION OF $FFDATA'
         CALL ABRT
      END IF
      IF(NATOM.GT.MXFFAT) THEN
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: TOO MANY MM ATOMS. INCREASE MXFFAT'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      IERR   = 0
      IEOF   = 0
C
      NLINE = (NATOM-1)/20 + 1
      DO I=1,NLINE
         CALL RDCARD('MMTYPE',IEOF)
         JSTOP = 20
         IF(I.EQ.NLINE) JSTOP = NATOM - (NLINE-1)*20
         DO J = 1, JSTOP
            NTYPE((I-1)*20+J) = IFIND('NTYPE',IERR)
         ENDDO
      ENDDO
C
      CALL RDCARD('MMTYPE',IEOF)
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') THEN
         RETURN
      ELSE
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: MMTYPE SECTION MUST HAVE A "STOP" AT THE END'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      END
C*MODULE QUANPO  *DECK FFPDB
!>          
!> @brief    read in $FFPDB
!>           
!> @author   Hui Li group
!>    
!> @details  read in $FFPDB, which is a PDB file
!>
      SUBROUTINE FFPDB(ATMNAM,CORD,ZANF,
     *                 ZMAS,ONEMAS,
     *                 CHARG,POL,SIG,EPS,
     *                 SIG2,EPS2,
     *                 BOND0,FCBOND,
     *                 ANGL0,FCANGL,FCWAGG,
     *                 DIHB0,FCDIHB,
     *                 VROT,NNN,GAMA,IPAIR,
     *                 KLIST,LLIST,MLIST,NLIST,
     *                 CLPR,ZLPR,NLPR,
     *                 SSBDID,SSBOND,
     *                 PDBNAM,RESNAM,NATAAA,
     *                 NNNCCC,
     *                 MXFFAT,MXBOND,MXANGL,MXDIHR,
     *                 MXWAGG,MXDIHB,
     *                 ITYPWAT,MAPLST,AMBNAM,LLIST1,
     *                 TEXTA,TEXTB,TEXTC,TEXTD)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INTEGER CMSG(100)
      INTEGER SSBOND(4,*)
      CHARACTER*1 SSBDID(2,*)
      CHARACTER*256 QPFILE
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*100 WD100
      CHARACTER*9   TEXT9
      CHARACTER*10  ATMNAM,TEXT10
      CHARACTER*8   RESNAM,RNAME,TEXT8
      CHARACTER*6   NAME6,NAME6A
      CHARACTER*5   AMBNAM
      CHARACTER*4   NAME4,PDBNAM
      CHARACTER*3   AAA,A3
      CHARACTER*2   SYMBOL,ACHARG
      CHARACTER*1   ALTLOC,A1,CHNID,CHNID0,ICODE,CHNID1,CHNID2
C
      DIMENSION ATMNAM(MXFFAT),CORD(3,MXFFAT),ZANF(MXFFAT),
     *          ZMAS(MXFFAT),ONEMAS(MXFFAT),CHARG(MXFFAT),POL(MXFFAT),
     *          SIG(MXFFAT),EPS(MXFFAT),
     *          SIG2(MXFFAT),EPS2(MXFFAT),
     *          BOND0(MXBOND),FCBOND(MXBOND),
     *          ANGL0(MXANGL),FCANGL(MXANGL),
     *          FCWAGG(MXWAGG),
     *          DIHB0(MXDIHB),FCDIHB(MXDIHB),
     *          VROT(MXDIHR),NNN(MXDIHR),
     *          GAMA(MXDIHR),IPAIR(2,MXBOND),
     *          KLIST(3,MXANGL),LLIST(4,MXDIHR),MLIST(4,MXWAGG),
     *          NLIST(4,MXDIHB),
     *          CLPR(4,MXFFAT),ZLPR(4,MXFFAT),NLPR(MXFFAT),
     *          MAPLST(6,*),AMBNAM(*)
      DIMENSION PDBNAM(*),RESNAM(*),NATAAA(*),
     *          NNNCCC(*)
      DIMENSION O1(3),H2(3),H3(3)
      DIMENSION RMASS(200)
C
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C
C     -- READ THE $FFPDB GROUP IN THE INPUT FILE --
C
      NFFAT = 0
      NBOND = 0
      NANGL = 0
      NDIHR = 0
      NDIHB = 0
      NCMAP = 0
      NWAGG = 0
      NSSBD = 0
C
C     -- READ THE PDB FILE IN THE $FFPDB GROUP --
C
      NUMOLD = -100000
      NRES   = 0
      CHNID0 = ' '
      NCHAIN = 0
      NAME6  = '      '
      NAME6A = '      '
      AAA    = '   '
      KNTHOH = 0
      KNTION = 0
      NATPDB0= 0
  100 CONTINUE
      IEOF = 0
      IF(MASWRK) THEN
         READ(IR,'(A100)',END=101)WD100
         DO I=1,100
            CMSG(I) = ICHAR(WD100(I:I))
         ENDDO
         GOTO 102
  101    IEOF = 1
  102    CONTINUE
      END IF
      IF(GOPARR) CALL DDI_BCAST(275,'I',IEOF,1,MASTER)
      IF (IEOF.EQ.1) GOTO 110
      IF (GOPARR) CALL DDI_BCAST(301,'I',CMSG,100,MASTER)
      IF (.NOT.MASWRK) THEN
         DO I=1,100
            WD100(I:I) = CHAR(CMSG(I))
         ENDDO
      END IF
C
      NAME6A = NAME6
      READ(WD100,'(A6)')NAME6
C
C     -- HIT THE END OF THE PDB FILE OR $END --
      LLLEND = 0
      IF(NAME6.EQ.'END   '.OR.NAME6.EQ.'$END  '.OR.
     *   NAME6.EQ.' END  '.OR.NAME6.EQ.' $END '.OR.
     *   NAME6.EQ.'  END '.OR.NAME6.EQ.'  $END'.OR.
     *   NAME6.EQ.'   END'.OR.NAME6.EQ.'ENDMDL') THEN
         IF(NAME6A.EQ.'ATOM  '.OR.NAME6A.EQ.'HETATM') LLLEND = 1
      END IF
      IF(NAME6.EQ.'TER   '.OR.LLLEND.EQ.1) THEN
         IF(NAME6A.EQ.'ATOM  ') NNNCCC(NRES) = 9
         IF(NAME6A.EQ.'HETATM') NNNCCC(NRES) = 0
         IF(LLLEND.EQ.1) GOTO 110
         GOTO 100
      END IF
      IF(NAME6.EQ.'SSBOND') THEN
         READ(WD100,1000)NAME6,TEXT9,CHNID1,LSS1,TEXT8,CHNID2,LSS2
         I5ZW9G = 20110301
         IF(I5ZW9G.EQ.20110300) THEN
         WRITE(IW,1000)NAME6,TEXT9,CHNID1,LSS1,TEXT8,CHNID2,LSS2
         END IF
         NSSBD           = NSSBD + 1
         SSBDID(1,NSSBD) = CHNID1
         SSBDID(2,NSSBD) = CHNID2
         SSBOND(1,NSSBD) = LSS1
         SSBOND(2,NSSBD) = LSS2
         GOTO 100
      END IF
      IF(NAME6.EQ.'ATOM  '.OR. NAME6.EQ.'HETATM') THEN
C
C     - COLUMN  1- 6 IS 'ATOM  ' OR 'HETATM'
C     - COLUMN  7-11 IS ATOM SERIAL NUMBER
C     - COLUMN    12 IS BLANK
C     - COLUMN 13-16 IS ATOM NAME
C     - COLUMN 17    IS ALTERNATE LOCATION INDICATOR
C     - COLUMN 18-20 IS RESIDUE NAME
C     - COLUMN 21    IS BLANK
C     - COLUMN 22    IS CHAIN ID: A, B, C, D ...
C     - COLUMN 23-26 IS RESIDUAL SEQUENCE NUMBER
C     - COLUMN 27    IS INSERTION CODE BUT IS COMMONLY USED AS RES NUM
C     - COLUMN 28-30 IS BLANK
C     - COLUMN 31-38, 39-46, 47-54 ARE X, Y, Z
C     -        55 - 60 REAL(6.2)  OCCUPANCY.
C     -        61 - 66 REAL(6.2)  TEMPERATURE FACTOR.
C     -        77 - 78 LSTRING(2) ELEMENT SYMBOL, RIGHT-JUSTIFIED.
C     -        79 - 80 LSTRING(2) CHARGE ON THE ATOM.
C
         READ(WD100,1010) NAME6,NATOM,A1,NAME4,ALTLOC,AAA,A1,
     *                    CHNID,NUMAAA,ICODE,A3,XXX,YYY,ZZZ,
     *                    OCC,TEMFAC,TEXT10,SYMBOL,ACHARG
         I5ZW9G = 20110301
         IF(I5ZW9G.EQ.20110300) THEN
            WRITE(IW,1010)NAME6,NATOM,A1,NAME4,ALTLOC,AAA,A1,
     *                    CHNID,NUMAAA,ICODE,A3,XXX,YYY,ZZZ,
     *                    OCC,TEMFAC,TEXT10,SYMBOL,ACHARG
         END IF
         DO KKK = 1, 3
            IF(AAA(3:3).EQ.' ') AAA = ' '//AAA(1:2)
         ENDDO
         IF(AAA.EQ.'WAT') AAA = 'HOH'
         IF(AAA.EQ.'HSD') AAA = 'HIS'
         IF(AAA.EQ.'HSE') AAA = 'HIS'
         IF(AAA.EQ.'HSP') AAA = 'HIS'
         IF(AAA.EQ.'HID') AAA = 'HIS'
         IF(AAA.EQ.'HIE') AAA = 'HIS'
         IF(AAA.EQ.'HIP') AAA = 'HIS'
         IF(AAA.EQ.'LSN') AAA = 'LYS'
         IF(AAA.EQ.'LYN') AAA = 'LYS'
         IF(AAA.EQ.'CYX') AAA = 'CYS'
         IF(AAA.EQ.'ASH') AAA = 'ASP'
         IF(AAA.EQ.'GLH') AAA = 'GLU'
         DO KKK = 1, 4
            IF(NAME4(1:1).EQ.' ') NAME4 = NAME4(2:4)
         ENDDO
         IF(NAME4(1:1).EQ.'1' .OR.
     *      NAME4(1:1).EQ.'2' .OR.
     *      NAME4(1:1).EQ.'3' .OR.
     *      NAME4(1:1).EQ.'4'     ) THEN
            IF(NAME4(3:3).EQ.' ') THEN
               NAME4=NAME4(2:2)//NAME4(1:1)
            ELSE IF(NAME4(4:4).EQ.' ') THEN
               NAME4=NAME4(2:3)//NAME4(1:1)
            ELSE
               NAME4=NAME4(2:4)//NAME4(1:1)
            END IF
         END IF
      END IF
 1000 FORMAT(A6,A9,A,I5,A8,A,I5)
 1010 FORMAT(A6,I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A10,A2,A2)
      IF(NAME6.EQ.'ENDMDL') GOTO 110
      IF(NAME6.EQ.'END   ') GOTO 110
      IF(NAME6.EQ.' END  ') GOTO 110
      IF(NAME6.EQ.'  END ') GOTO 110
      IF(NAME6.EQ.'   END') GOTO 110
      IF(NAME6.EQ.'MASTER') GOTO 110
      IF(NAME6.EQ.'CONECT') GOTO 110
      IF(NAME6.EQ.'$END  ') GOTO 110
      IF(NAME6.EQ.' $END ') GOTO 110
      IF(NAME6.EQ.'  $END') GOTO 110
C
C     -- ADD UP NFFAT --
C
      IF(NAME6.NE.'ATOM  '.AND.NAME6.NE.'HETATM') THEN
         IF(NFFAT.EQ.0) THEN
C           - WE SHOULD NOT COME HERE IF IT IS NOT AN ATOM
            IF(MASWRK)WRITE(IW,*)
     *      'ERROR: IN THE LINE STARTING WITH "',NAME6,
     *      '" IN $FFPDB.',
     *      '       YOU MAY HAVE MISSED A ">".'
            IF(MASWRK)WRITE(IW,*)' '
            CALL ABRT
         ELSE
            GOTO 100
         END IF
      END IF
C
      NFFAT= NFFAT+1
      IF(NFFAT.GT.MXFFAT-10) THEN
         IF(MASWRK)WRITE(IW,*) 
     *       'ERROR: TOO MANY ATOMS IN $FFPDB. INCREASE MXFFAT'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      PDBNAM(NFFAT)=NAME4
      DO I=1,2
         J = IACHAR(SYMBOL(I:I))
         IF(J.GE.97.AND.J.LE.122) J = J - 32
         SYMBOL(I:I) = CHAR(J)
      ENDDO
      IF(SYMBOL(1:1).EQ.' ') THEN
         ATMNAM(NFFAT)=SYMBOL(2:2)
      ELSE
         ATMNAM(NFFAT)=SYMBOL
      END IF
      CORD(1,NFFAT)=XXX*TOBOHR
      CORD(2,NFFAT)=YYY*TOBOHR
      CORD(3,NFFAT)=ZZZ*TOBOHR
                         ZANF(NFFAT)  = -1.0D+00
      IF(SYMBOL.EQ.' H') ZANF(NFFAT)  =  1.0D+00
      IF(SYMBOL.EQ.'HE') ZANF(NFFAT)  =  2.0D+00
      IF(SYMBOL.EQ.'LI') ZANF(NFFAT)  =  3.0D+00
      IF(SYMBOL.EQ.'BE') ZANF(NFFAT)  =  4.0D+00
      IF(SYMBOL.EQ.' B') ZANF(NFFAT)  =  5.0D+00
      IF(SYMBOL.EQ.' C') ZANF(NFFAT)  =  6.0D+00
      IF(SYMBOL.EQ.' N') ZANF(NFFAT)  =  7.0D+00
      IF(SYMBOL.EQ.' O') ZANF(NFFAT)  =  8.0D+00
      IF(SYMBOL.EQ.' F') ZANF(NFFAT)  =  9.0D+00
      IF(SYMBOL.EQ.'NE') ZANF(NFFAT)  = 10.0D+00
      IF(SYMBOL.EQ.'NA') ZANF(NFFAT)  = 11.0D+00
      IF(SYMBOL.EQ.'MG') ZANF(NFFAT)  = 12.0D+00
      IF(SYMBOL.EQ.'AL') ZANF(NFFAT)  = 13.0D+00
      IF(SYMBOL.EQ.'SI') ZANF(NFFAT)  = 14.0D+00
      IF(SYMBOL.EQ.' P') ZANF(NFFAT)  = 15.0D+00
      IF(SYMBOL.EQ.' S') ZANF(NFFAT)  = 16.0D+00
      IF(SYMBOL.EQ.'CL') ZANF(NFFAT)  = 17.0D+00
      IF(SYMBOL.EQ.'AR') ZANF(NFFAT)  = 18.0D+00
      IF(SYMBOL.EQ.' K') ZANF(NFFAT)  = 19.0D+00
      IF(SYMBOL.EQ.'CA') ZANF(NFFAT)  = 20.0D+00
      IF(SYMBOL.EQ.'SC') ZANF(NFFAT)  = 21.0D+00
      IF(SYMBOL.EQ.'TI') ZANF(NFFAT)  = 22.0D+00
      IF(SYMBOL.EQ.' V') ZANF(NFFAT)  = 23.0D+00
      IF(SYMBOL.EQ.'CR') ZANF(NFFAT)  = 24.0D+00
      IF(SYMBOL.EQ.'MN') ZANF(NFFAT)  = 25.0D+00
      IF(SYMBOL.EQ.'FE') ZANF(NFFAT)  = 26.0D+00
      IF(SYMBOL.EQ.'CO') ZANF(NFFAT)  = 27.0D+00
      IF(SYMBOL.EQ.'NI') ZANF(NFFAT)  = 28.0D+00
      IF(SYMBOL.EQ.'CU') ZANF(NFFAT)  = 29.0D+00
      IF(SYMBOL.EQ.'ZN') ZANF(NFFAT)  = 30.0D+00
      IF(SYMBOL.EQ.'GA') ZANF(NFFAT)  = 31.0D+00
      IF(SYMBOL.EQ.'GE') ZANF(NFFAT)  = 32.0D+00
      IF(SYMBOL.EQ.'AS') ZANF(NFFAT)  = 33.0D+00
      IF(SYMBOL.EQ.'SE') ZANF(NFFAT)  = 34.0D+00
      IF(SYMBOL.EQ.'BR') ZANF(NFFAT)  = 35.0D+00
      IF(SYMBOL.EQ.'KR') ZANF(NFFAT)  = 36.0D+00
      IF(SYMBOL.EQ.'RB') ZANF(NFFAT)  = 37.0D+00
      IF(SYMBOL.EQ.'SR') ZANF(NFFAT)  = 38.0D+00
      IF(SYMBOL.EQ.' Y') ZANF(NFFAT)  = 39.0D+00
      IF(SYMBOL.EQ.'ZR') ZANF(NFFAT)  = 40.0D+00
      IF(SYMBOL.EQ.'NB') ZANF(NFFAT)  = 41.0D+00
      IF(SYMBOL.EQ.'MO') ZANF(NFFAT)  = 42.0D+00
      IF(SYMBOL.EQ.'TC') ZANF(NFFAT)  = 43.0D+00
      IF(SYMBOL.EQ.'RU') ZANF(NFFAT)  = 44.0D+00
      IF(SYMBOL.EQ.'RH') ZANF(NFFAT)  = 45.0D+00
      IF(SYMBOL.EQ.'PD') ZANF(NFFAT)  = 46.0D+00
      IF(SYMBOL.EQ.'AG') ZANF(NFFAT)  = 47.0D+00
      IF(SYMBOL.EQ.'CD') ZANF(NFFAT)  = 48.0D+00
      IF(SYMBOL.EQ.'IN') ZANF(NFFAT)  = 49.0D+00
      IF(SYMBOL.EQ.'SN') ZANF(NFFAT)  = 50.0D+00
      IF(SYMBOL.EQ.'SB') ZANF(NFFAT)  = 51.0D+00
      IF(SYMBOL.EQ.'TE') ZANF(NFFAT)  = 52.0D+00
      IF(SYMBOL.EQ.' I') ZANF(NFFAT)  = 53.0D+00
      IF(SYMBOL.EQ.'XE') ZANF(NFFAT)  = 54.0D+00
      IF(SYMBOL.EQ.'CS') ZANF(NFFAT)  = 55.0D+00
      IF(SYMBOL.EQ.'BA') ZANF(NFFAT)  = 56.0D+00
      IF(SYMBOL.EQ.'LA') ZANF(NFFAT)  = 57.0D+00
      IF(SYMBOL.EQ.'CE') ZANF(NFFAT)  = 58.0D+00
      IF(SYMBOL.EQ.'PR') ZANF(NFFAT)  = 59.0D+00
      IF(SYMBOL.EQ.'ND') ZANF(NFFAT)  = 60.0D+00
      IF(SYMBOL.EQ.'PM') ZANF(NFFAT)  = 61.0D+00
      IF(SYMBOL.EQ.'SM') ZANF(NFFAT)  = 62.0D+00
      IF(SYMBOL.EQ.'EU') ZANF(NFFAT)  = 63.0D+00
      IF(SYMBOL.EQ.'GD') ZANF(NFFAT)  = 64.0D+00
      IF(SYMBOL.EQ.'TB') ZANF(NFFAT)  = 65.0D+00
      IF(SYMBOL.EQ.'DY') ZANF(NFFAT)  = 66.0D+00
      IF(SYMBOL.EQ.'HO') ZANF(NFFAT)  = 67.0D+00
      IF(SYMBOL.EQ.'ER') ZANF(NFFAT)  = 68.0D+00
      IF(SYMBOL.EQ.'TM') ZANF(NFFAT)  = 69.0D+00
      IF(SYMBOL.EQ.'YB') ZANF(NFFAT)  = 70.0D+00
      IF(SYMBOL.EQ.'LU') ZANF(NFFAT)  = 71.0D+00
      IF(SYMBOL.EQ.'HF') ZANF(NFFAT)  = 72.0D+00
      IF(SYMBOL.EQ.'TA') ZANF(NFFAT)  = 73.0D+00
      IF(SYMBOL.EQ.' W') ZANF(NFFAT)  = 74.0D+00
      IF(SYMBOL.EQ.'RE') ZANF(NFFAT)  = 75.0D+00
      IF(SYMBOL.EQ.'OS') ZANF(NFFAT)  = 76.0D+00
      IF(SYMBOL.EQ.'IR') ZANF(NFFAT)  = 77.0D+00
      IF(SYMBOL.EQ.'PT') ZANF(NFFAT)  = 78.0D+00
      IF(SYMBOL.EQ.'AU') ZANF(NFFAT)  = 79.0D+00
      IF(SYMBOL.EQ.'HG') ZANF(NFFAT)  = 80.0D+00
      IF(SYMBOL.EQ.'TL') ZANF(NFFAT)  = 81.0D+00
      IF(SYMBOL.EQ.'PB') ZANF(NFFAT)  = 82.0D+00
      IF(SYMBOL.EQ.'BI') ZANF(NFFAT)  = 83.0D+00
      IF(SYMBOL.EQ.'PO') ZANF(NFFAT)  = 84.0D+00
      IF(SYMBOL.EQ.'AT') ZANF(NFFAT)  = 85.0D+00
      IF(SYMBOL.EQ.'RN') ZANF(NFFAT)  = 86.0D+00
      IF(SYMBOL.EQ.'FR') ZANF(NFFAT)  = 87.0D+00
      IF(SYMBOL.EQ.'RA') ZANF(NFFAT)  = 88.0D+00
      IF(SYMBOL.EQ.'AC') ZANF(NFFAT)  = 89.0D+00
      IF(SYMBOL.EQ.'TH') ZANF(NFFAT)  = 90.0D+00
      IF(SYMBOL.EQ.'PA') ZANF(NFFAT)  = 91.0D+00
      IF(SYMBOL.EQ.' U') ZANF(NFFAT)  = 92.0D+00
      IF(SYMBOL.EQ.'NP') ZANF(NFFAT)  = 93.0D+00
      IF(SYMBOL.EQ.'PU') ZANF(NFFAT)  = 94.0D+00
      IF(SYMBOL.EQ.'AM') ZANF(NFFAT)  = 95.0D+00
      IF(SYMBOL.EQ.'CM') ZANF(NFFAT)  = 96.0D+00
      IF(SYMBOL.EQ.'BK') ZANF(NFFAT)  = 97.0D+00
      IF(SYMBOL.EQ.'CF') ZANF(NFFAT)  = 98.0D+00
      IF(SYMBOL.EQ.'ES') ZANF(NFFAT)  = 99.0D+00
      IF(SYMBOL.EQ.'FM') ZANF(NFFAT)  =100.0D+00
      IF(SYMBOL.EQ.'MD') ZANF(NFFAT)  =101.0D+00
      IF(SYMBOL.EQ.'NO') ZANF(NFFAT)  =102.0D+00
      IF(SYMBOL.EQ.'LR') ZANF(NFFAT)  =103.0D+00
      IF(SYMBOL.EQ.'RF') ZANF(NFFAT)  =104.0D+00
      IF(SYMBOL.EQ.'DB') ZANF(NFFAT)  =105.0D+00
      IF(SYMBOL.EQ.'SG') ZANF(NFFAT)  =106.0D+00
      IF(SYMBOL.EQ.'BH') ZANF(NFFAT)  =107.0D+00
      IF(SYMBOL.EQ.'HS') ZANF(NFFAT)  =108.0D+00
      IF(SYMBOL.EQ.'MT') ZANF(NFFAT)  =109.0D+00
      IF(SYMBOL.EQ.'DS') ZANF(NFFAT)  =110.0D+00
      IF(SYMBOL.EQ.'RG') ZANF(NFFAT)  =111.0D+00
      IF(SYMBOL.EQ.'CN') ZANF(NFFAT)  =112.0D+00
      IF(ZANF(NFFAT).EQ.-1.0D+00) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: CHEMICAL SYMBOL IN $FFPDB IS WRONG: "',SYMBOL,'"'
         IF(MASWRK) WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      IF(NAME6.EQ.'ATOM  '.AND.NFFAT.EQ.4) THEN
         IF(AAA.EQ.'  A'.OR.AAA.EQ.'  C'.OR.
     *      AAA.EQ.'  G'.OR.AAA.EQ.'  U'.OR.
     *      AAA.EQ.' DA'.OR.AAA.EQ.' DC'.OR.
     *      AAA.EQ.' DG'.OR.AAA.EQ.' DT'.OR.
     *      AAA.EQ.' LI'.OR.AAA.EQ.' BE'.OR.
     *      AAA.EQ.'  B'.OR.AAA.EQ.'  F'.OR.
     *      AAA.EQ.' NA'.OR.AAA.EQ.' MG'.OR.
     *      AAA.EQ.' AL'.OR.AAA.EQ.' SI'.OR.
     *      AAA.EQ.' CL'.OR.AAA.EQ.'  K'.OR.
     *      AAA.EQ.' CA'.OR.AAA.EQ.' SC'.OR.
     *      AAA.EQ.' TI'.OR.AAA.EQ.'  V'.OR.
     *      AAA.EQ.' CR'.OR.AAA.EQ.' MN'.OR.
     *      AAA.EQ.' FE'.OR.AAA.EQ.' CO'.OR.
     *      AAA.EQ.' NI'.OR.AAA.EQ.' CU'.OR.
     *      AAA.EQ.'CU1'.OR.AAA.EQ.' ZN'.OR.
     *      AAA.EQ.' GA'.OR.AAA.EQ.' GE'.OR.
     *      AAA.EQ.' AS'.OR.AAA.EQ.' SE'.OR.
     *      AAA.EQ.' BR'.OR.AAA.EQ.' KR'.OR.
     *      AAA.EQ.' RB'.OR.AAA.EQ.' SR'.OR.
     *      AAA.EQ.'  Y'.OR.AAA.EQ.' ZR'.OR.
     *      AAA.EQ.' NB'.OR.AAA.EQ.' MO'.OR.
     *      AAA.EQ.' TC'.OR.AAA.EQ.' RU'.OR.
     *      AAA.EQ.' RH'.OR.AAA.EQ.' PD'.OR.
     *      AAA.EQ.' AG'.OR.AAA.EQ.' CD'.OR.
     *      AAA.EQ.' IN'.OR.AAA.EQ.' SN'.OR.
     *      AAA.EQ.' SB'.OR.AAA.EQ.' TE'.OR.
     *      AAA.EQ.'  I'.OR.AAA.EQ.' XE'.OR.
     *      AAA.EQ.' CS'.OR.AAA.EQ.' BA'.OR.
     *      AAA.EQ.' LA'.OR.AAA.EQ.' CE'.OR.
     *      AAA.EQ.' PR'.OR.AAA.EQ.' ND'.OR.
     *      AAA.EQ.' PM'.OR.AAA.EQ.' SM'.OR.
     *      AAA.EQ.' EU'.OR.AAA.EQ.' GD'.OR.
     *      AAA.EQ.' TB'.OR.AAA.EQ.' DY'.OR.
     *      AAA.EQ.' HO'.OR.AAA.EQ.' ER'.OR.
     *      AAA.EQ.' TM'.OR.AAA.EQ.' YB'.OR.
     *      AAA.EQ.' LU'.OR.AAA.EQ.' HF'.OR.
     *      AAA.EQ.' TA'.OR.AAA.EQ.'  W'.OR.
     *      AAA.EQ.' RE'.OR.AAA.EQ.' OS'.OR.
     *      AAA.EQ.' IR'.OR.AAA.EQ.' PT'.OR.
     *      AAA.EQ.' AU'.OR.AAA.EQ.' HG'.OR.
     *      AAA.EQ.' TI'.OR.AAA.EQ.' PB'.OR.
     *      AAA.EQ.' BI'.OR.AAA.EQ.' PO'.OR.
     *      AAA.EQ.' AT'.OR.AAA.EQ.' RN'.OR.
     *      AAA.EQ.' FR'.OR.AAA.EQ.' RA'.OR.
     *      AAA.EQ.' AC'.OR.AAA.EQ.' TH'.OR.
     *      AAA.EQ.' PA'.OR.
     *      AAA.EQ.' NP'.OR.AAA.EQ.' PU'.OR.
     *      AAA.EQ.' AM'.OR.AAA.EQ.' CM'.OR.
     *      AAA.EQ.' BK'.OR.AAA.EQ.' CF'.OR.
     *      AAA.EQ.' ES'.OR.AAA.EQ.' FM'.OR.
     *      AAA.EQ.' MD'.OR.AAA.EQ.' NO'.OR.
     *      AAA.EQ.' LR'.OR.AAA.EQ.' RF'.OR.
     *      AAA.EQ.' DB'.OR.AAA.EQ.' SG'.OR.
     *      AAA.EQ.' BH'.OR.AAA.EQ.' HS'.OR.
     *      AAA.EQ.' MT'.OR.AAA.EQ.' DS'.OR.
     *      AAA.EQ.' RG'.OR.AAA.EQ.' CN'.OR.
     *      AAA.EQ.'TI2'.OR.AAA.EQ.' V2'.OR.
     *      AAA.EQ.'CR2'.OR.AAA.EQ.'FE2'.OR.
     *      AAA.EQ.'AG2'.OR.AAA.EQ.'SM2'.OR.
     *      AAA.EQ.'YB2'.OR.AAA.EQ.'MN3'.OR.
     *      AAA.EQ.'3CO'.OR.AAA.EQ.'EU3'.OR.
     *      AAA.EQ.'AU3'.OR.AAA.EQ.'HOH'.OR.
     *      AAA.EQ.'ACE'                    ) THEN
         ELSE
            IF(PDBNAM(1).EQ.'N   '.AND.
     *         PDBNAM(2).EQ.'CA  '.AND.
     *         PDBNAM(3).EQ.'C   '.AND.
     *         PDBNAM(4).EQ.'O   '    ) THEN
            ELSE IF(NFFTYP/10000.NE.5.AND.NFFTYP.NE.0)  THEN
               IF(MASWRK)WRITE(IW,*)
     *         'ERROR: PROTEIN PDB MUST START WITH N, CA, C, O.'
               IF(MASWRK)WRITE(IW,*)' '
               CALL ABRT
            END IF
         END IF
      END IF
C
C     -- CHANGE PDB NAMES
      IF(PDBNAM(NFFAT).EQ."O1P ") PDBNAM(NFFAT) = "OP1 "
      IF(PDBNAM(NFFAT).EQ."O2P ") PDBNAM(NFFAT) = "OP2 "
      IF(PDBNAM(NFFAT).EQ."H5T ") PDBNAM(NFFAT) = "HO5'"
      IF(PDBNAM(NFFAT).EQ."H3T ") PDBNAM(NFFAT) = "HO3'"
      IF(PDBNAM(NFFAT).EQ."H5'1") PDBNAM(NFFAT) = "H5' "
      IF(PDBNAM(NFFAT).EQ."H5'2") PDBNAM(NFFAT) = "H5''"
      IF(PDBNAM(NFFAT).EQ."H2'1") PDBNAM(NFFAT) = "H2' "
      IF(PDBNAM(NFFAT).EQ."H2'2") PDBNAM(NFFAT) = "H2''"
      IF(PDBNAM(NFFAT).EQ."HO'2") PDBNAM(NFFAT) = "HO2'"
      IF(PDBNAM(NFFAT).EQ."H51 ") PDBNAM(NFFAT) = "H71 "
      IF(PDBNAM(NFFAT).EQ."H52 ") PDBNAM(NFFAT) = "H72 "
      IF(PDBNAM(NFFAT).EQ."H53 ") PDBNAM(NFFAT) = "H73 "
C
      IF(NFFAT.LE.50) THEN
         IF(PDBNAM(1).EQ.'N   '.AND.
     *      PDBNAM(2).EQ.'CA  '.AND.
     *      PDBNAM(3).EQ.'C   '.AND.
     *      PDBNAM(4).EQ.'O   '    ) THEN
            IF(PDBNAM(NFFAT-1).EQ.'H1  '.AND.
     *         PDBNAM(NFFAT  ).EQ.'H2  '     ) THEN
               IF(MASWRK)WRITE(IW,*)
     *         "WARNING: N-TER 1ST H ATOM SHOULD BE 'H', NOT 'H1'."
               IF(MASWRK)WRITE(IW,*)' ' 
               PDBNAM(NFFAT-1) = 'H   '
            END IF
         END IF
      END IF
      IF(NFFAT.LE.200) THEN
         IF(ATMNAM(NFFAT-1)(1:2).EQ.'H '.AND.
     *      ATMNAM(NFFAT  )(1:2).EQ.'C '     ) THEN
            IF(MASWRK)WRITE(IW,*)
     *      'ERROR: RESIDUALS IN PDB MUST HAVE HEAVY ATOMS ',
     *      'APPEARING BEFORE H ATOMS.'
            IF(MASWRK)WRITE(IW,*)' '
            CALL ABRT
         END IF
      END IF
C
      IF(AAA.EQ.' LI'.OR.AAA.EQ.' BE'.OR.
     *   AAA.EQ.'  B'.OR.AAA.EQ.'  F'.OR.
     *   AAA.EQ.' NA'.OR.AAA.EQ.' MG'.OR.
     *   AAA.EQ.' AL'.OR.AAA.EQ.' SI'.OR.
     *   AAA.EQ.' CL'.OR.AAA.EQ.'  K'.OR.
     *   AAA.EQ.' CA'.OR.AAA.EQ.' SC'.OR.
     *   AAA.EQ.' TI'.OR.AAA.EQ.'  V'.OR.
     *   AAA.EQ.' CR'.OR.AAA.EQ.' MN'.OR.
     *   AAA.EQ.' FE'.OR.AAA.EQ.' CO'.OR.
     *   AAA.EQ.' NI'.OR.AAA.EQ.' CU'.OR.
     *   AAA.EQ.'CU1'.OR.AAA.EQ.' ZN'.OR.
     *   AAA.EQ.' GA'.OR.AAA.EQ.' GE'.OR.
     *   AAA.EQ.' AS'.OR.AAA.EQ.' SE'.OR.
     *   AAA.EQ.' BR'.OR.AAA.EQ.' KR'.OR.
     *   AAA.EQ.' RB'.OR.AAA.EQ.' SR'.OR.
     *   AAA.EQ.'  Y'.OR.AAA.EQ.' ZR'.OR.
     *   AAA.EQ.' NB'.OR.AAA.EQ.' MO'.OR.
     *   AAA.EQ.' TC'.OR.AAA.EQ.' RU'.OR.
     *   AAA.EQ.' RH'.OR.AAA.EQ.' PD'.OR.
     *   AAA.EQ.' AG'.OR.AAA.EQ.' CD'.OR.
     *   AAA.EQ.' IN'.OR.AAA.EQ.' SN'.OR.
     *   AAA.EQ.' SB'.OR.AAA.EQ.' TE'.OR.
     *   AAA.EQ.'  I'.OR.AAA.EQ.' XE'.OR.
     *   AAA.EQ.' CS'.OR.AAA.EQ.' BA'.OR.
     *   AAA.EQ.' LA'.OR.AAA.EQ.' CE'.OR.
     *   AAA.EQ.' PR'.OR.AAA.EQ.' ND'.OR.
     *   AAA.EQ.' PM'.OR.AAA.EQ.' SM'.OR.
     *   AAA.EQ.' EU'.OR.AAA.EQ.' GD'.OR.
     *   AAA.EQ.' TB'.OR.AAA.EQ.' DY'.OR.
     *   AAA.EQ.' HO'.OR.AAA.EQ.' ER'.OR.
     *   AAA.EQ.' TM'.OR.AAA.EQ.' YB'.OR.
     *   AAA.EQ.' LU'.OR.AAA.EQ.' HF'.OR.
     *   AAA.EQ.' TA'.OR.AAA.EQ.'  W'.OR.
     *   AAA.EQ.' RE'.OR.AAA.EQ.' OS'.OR.
     *   AAA.EQ.' IR'.OR.AAA.EQ.' PT'.OR.
     *   AAA.EQ.' AU'.OR.AAA.EQ.' HG'.OR.
     *   AAA.EQ.' TI'.OR.AAA.EQ.' PB'.OR.
     *   AAA.EQ.' BI'.OR.AAA.EQ.' PO'.OR.
     *   AAA.EQ.' AT'.OR.AAA.EQ.' RN'.OR.
     *   AAA.EQ.' FR'.OR.AAA.EQ.' RA'.OR.
     *   AAA.EQ.' AC'.OR.AAA.EQ.' TH'.OR.
     *   AAA.EQ.' PA'.OR.
     *   AAA.EQ.' NP'.OR.AAA.EQ.' PU'.OR.
     *   AAA.EQ.' AM'.OR.AAA.EQ.' CM'.OR.
     *   AAA.EQ.' BK'.OR.AAA.EQ.' CF'.OR.
     *   AAA.EQ.' ES'.OR.AAA.EQ.' FM'.OR.
     *   AAA.EQ.' MD'.OR.AAA.EQ.' NO'.OR.
     *   AAA.EQ.' LR'.OR.AAA.EQ.' RF'.OR.
     *   AAA.EQ.' DB'.OR.AAA.EQ.' SG'.OR.
     *   AAA.EQ.' BH'.OR.AAA.EQ.' HS'.OR.
     *   AAA.EQ.' MT'.OR.AAA.EQ.' DS'.OR.
     *   AAA.EQ.' RG'.OR.AAA.EQ.' CN'.OR.
     *   AAA.EQ.'TI2'.OR.AAA.EQ.' V2'.OR.
     *   AAA.EQ.'CR2'.OR.AAA.EQ.'FE2'.OR.
     *   AAA.EQ.'AG2'.OR.AAA.EQ.'SM2'.OR.
     *   AAA.EQ.'YB2'.OR.AAA.EQ.'MN3'.OR.
     *   AAA.EQ.'3CO'.OR.AAA.EQ.'EU3'.OR.
     *   AAA.EQ.'AU3'.OR.AAA.EQ.'HOH'    )KNTION = KNTION + 1
      IF(KNTION.EQ.0) NATPDB0 = NFFAT
C
      IF(AAA.EQ.'HOH') KNTHOH = KNTHOH + 1
      IF(KNTHOH.EQ.0)  NATPDB = NFFAT
      IF(KNTHOH.EQ.1.AND.LOUT.NE.1) THEN
         IF(ITYPWAT/100.NE.3.AND.ITYPWAT/100.NE.5)THEN
            IF(MASWRK) WRITE(IW,*)'ERROR: ITYPWAT MUST BE 3XX OR 5XX.'
            IF(MASWRK) WRITE(IW,*)' '
            CALL ABRT
         END IF
      END IF
      IF(AAA.EQ.'HOH'.AND.MOD(KNTHOH,3).EQ.0.AND.ITYPWAT/100.EQ.3)THEN
         ATMNAM(NFFAT-2) = 'O1'
         ATMNAM(NFFAT-1) = 'H2'
         ATMNAM(NFFAT  ) = 'H3'
      END IF
      IF(AAA.EQ.'HOH'.AND.MOD(KNTHOH,3).EQ.0.AND.ITYPWAT/100.EQ.5)THEN
         O1(1) = CORD(1,NFFAT-2)
         O1(2) = CORD(2,NFFAT-2)
         O1(3) = CORD(3,NFFAT-2)
         H2(1) = CORD(1,NFFAT-1)
         H2(2) = CORD(2,NFFAT-1)
         H2(3) = CORD(3,NFFAT-1)
         H3(1) = CORD(1,NFFAT-0)
         H3(2) = CORD(2,NFFAT-0)
         H3(3) = CORD(3,NFFAT-0)
         X12   = O1(1) - H2(1)
         Y12   = O1(2) - H2(2)
         Z12   = O1(3) - H2(3)
         X13   = O1(1) - H3(1)
         Y13   = O1(2) - H3(2)
         Z13   = O1(3) - H3(3)
         X14   = Y12*Z13 - Z12*Y13
         Y14   = Z12*X13 - X12*Z13
         Z14   = X12*Y13 - Y12*X13
         R14   = SQRT(X14*X14 + Y14*Y14 + Z14*Z14)
         ONER14= 1.0D+00/R14
         X14   = X14*ONER14
         Y14   = Y14*ONER14
         Z14   = Z14*ONER14
         X1T   = X12+X13
         Y1T   = Y12+Y13
         Z1T   = Z12+Z13
         R1T   = SQRT(X1T*X1T + Y1T*Y1T + Z1T*Z1T)
         ONER1T= 1.0D+00/R1T
         X1T   = X1T*ONER1T
         Y1T   = Y1T*ONER1T
         Z1T   = Z1T*ONER1T
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = O1(1) + X14 + X1T
         CORD(2,NFFAT) = O1(2) + Y14 + Y1T
         CORD(3,NFFAT) = O1(3) + Z14 + Z1T
         ZANF  (NFFAT) = 1.0D+00
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = O1(1) - X14 + X1T
         CORD(2,NFFAT) = O1(2) - Y14 + Y1T
         CORD(3,NFFAT) = O1(3) - Z14 + Z1T
         ZANF  (NFFAT) = 1.0D+00
         ATMNAM(NFFAT-4) = 'O1'
         ATMNAM(NFFAT-3) = 'H2'
         ATMNAM(NFFAT-2) = 'H3'
         ATMNAM(NFFAT-1) = 'L4'
         ATMNAM(NFFAT  ) = 'L5'
      END IF
C
C     -- CHECK THE END OF THE PDB CHAINS --
C
      IF(CHNID.NE.CHNID0) THEN
         NCHAIN = NCHAIN + 1
         CHNID0 = CHNID
         IF(NCHAIN.GE.2) THEN
            NNNCCC(NRES) = 9
         END IF
      END IF
C
C     -- ADD UP NRES --
C
      IF(NUMAAA.NE.NUMOLD) THEN
         NRES = NRES + 1
         RESNAM(NRES) = AAA
         NNNCCC(NRES) = 2
         IF(NNNCCC(NRES-1).EQ.9 .AND. NAME6.EQ.'ATOM  ') THEN
            NNNCCC(NRES) = 1
         END IF
         DO ISSBD = 1, NSSBD
            IF(SSBDID(1,ISSBD).EQ.CHNID .AND.
     *         SSBOND(1,ISSBD).EQ.NUMAAA) THEN
               SSBDID(1,ISSBD) = ' '
               SSBOND(1,ISSBD) = NRES
            END IF
            IF(SSBDID(2,ISSBD).EQ.CHNID .AND. 
     *         SSBOND(2,ISSBD).EQ.NUMAAA) THEN
               SSBDID(2,ISSBD) = ' '
               SSBOND(2,ISSBD) = NRES
            END IF
         ENDDO
         NATAAA(NRES) = 0
         NUMOLD       = NUMAAA
      END IF
      IF(NFFAT.EQ.1.AND.NAME6.EQ.'ATOM  ') NNNCCC(NRES) = 1
      IF(NAME4.EQ.'OXT ')   NNNCCC(NRES) = 9
      IF(NAME4.EQ.'HXT ')   NNNCCC(NRES) = 9
      IF(NAME6.NE.'ATOM  ') NNNCCC(NRES) = 0
      NATAAA(NRES) = NATAAA(NRES) + 1
      IF(AAA.EQ.'HOH'.AND.MOD(KNTHOH,3).EQ.0.AND.(ITYPWAT/100).EQ.5) 
     *NATAAA(NRES) = NATAAA(NRES) + 2
C
      GOTO 100
  110 CONTINUE
C
C     -- ANY WAY, ASSIGN THE MASSES --
C
      CALL RAMS(RMASS,2)
      DO IFFAT = 1, NFFAT
         ZMAS(IFFAT)  = RMASS(INT(ZANF(IFFAT)))*1822.88850204D+00
         ONEMAS(IFFAT)= 1.0D+00/ZMAS(IFFAT)
      ENDDO
C
C     -- GENERATE BONDS FOR MMFF94
C
      IF(NFFTYP/10000.EQ.5)THEN
         CALL FFBOND(NFFAT,IPAIR,ZANF,CORD,NBOND)
      END IF
C      
C     -- READ CHARMM OR AMBER STYLE TOP/PAR FILES --
C
      IF(NFFFILE.EQ.2.OR.NFFFILE.EQ.3) THEN
         NFFATSV = NFFAT
         NFFAT   = NATPDB0
         IF(NFFFILE.EQ.2) THEN
            IF(MASWRK)WRITE(IW,*)'READING CHARMM TOP/PAR FILES ...'
            CALL RDCHARMM(CORD,ZANF,RESNAM,AMBNAM,PDBNAM,
     *                 ZMAS,ONEMAS,
     *                 CHARG,SIG,EPS,
     *                 SIG2,EPS2,
     *                 SSBOND,
     *                 BOND0,FCBOND,
     *                 ANGL0,FCANGL,
     *                 DIHB0,FCDIHB,
     *                 VROT,NNN,GAMA,
     *                 IPAIR,KLIST,LLIST,NLIST,
     *                 NRES,NATAAA,NSSBD,NNNCCC,MAPLST,
     *                 ITYPWAT,LLIST1,TEXTA)
         END IF
         IF(NFFFILE.EQ.3) THEN
            IF(MASWRK)WRITE(IW,*)'READING AMBER TOP/PAR FILES ...'
            CALL RDAMBER(CORD,ZANF,RESNAM,AMBNAM,PDBNAM,
     *                ZMAS,ONEMAS,
     *                CHARG,POL,SIG,EPS,
     *                SIG2,EPS2,
     *                SSBOND,
     *                BOND0,FCBOND,
     *                ANGL0,FCANGL,
     *                VROT,NNN,GAMA,
     *                IPAIR,KLIST,LLIST,NLIST,
     *                NRES,NATAAA,NNNCCC,NSSBD,LLIST1,ITYPWAT,
     *                TEXTA,TEXTB,TEXTC,TEXTD)
         END IF
         DO IFFAT=1,NFFAT
            NLPR(IFFAT)= 2
            IF(ZANF(IFFAT).EQ.1.0D+00) THEN
               CLPR(1,IFFAT)= 2.0D+00
               ZLPR(1,IFFAT)= 2.0D+00
            END IF
            IF(ZANF(IFFAT).EQ.6.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.7D+00
            END IF
            IF(ZANF(IFFAT).EQ.7.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.6D+00
            END IF
            IF(ZANF(IFFAT).EQ.8.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.8D+00
            END IF
            IF(ZANF(IFFAT).EQ.16.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.6D+00
            END IF
         ENDDO
         IF(MASWRK)WRITE(IW,*)'DONE READING TOP/PAR FILES.'
         IF(MASWRK)WRITE(IW,*)' '
         NFFAT = NFFATSV
C
         IF(MASWRK) THEN
            CALL GENQPFILE('WATERIONS.LIB ',QPFILE,LENQP)
            OPEN(13,FILE=QPFILE(1:LENQP),STATUS='OLD')
         END IF
         LFFAT = 0
         MMRES = 0
         DO IRES = 1, NRES
            MMRES  = MMRES + 1
            AAA    = RESNAM(IRES)(1:3)
            JATOM  = NATAAA(IRES)
C           -- READ IN HOH AND IONS PARAMETERS FROM LIBRARY --
C
            IF(AAA.EQ.' LI'.OR.AAA.EQ.' BE'.OR.
     *         AAA.EQ.'  B'.OR.AAA.EQ.'  F'.OR.
     *         AAA.EQ.' NA'.OR.AAA.EQ.' MG'.OR.
     *         AAA.EQ.' AL'.OR.AAA.EQ.' SI'.OR.
     *         AAA.EQ.' CL'.OR.AAA.EQ.'  K'.OR.
     *         AAA.EQ.' CA'.OR.AAA.EQ.' SC'.OR.
     *         AAA.EQ.' TI'.OR.AAA.EQ.'  V'.OR.
     *         AAA.EQ.' CR'.OR.AAA.EQ.' MN'.OR.
     *         AAA.EQ.' FE'.OR.AAA.EQ.' CO'.OR.
     *         AAA.EQ.' NI'.OR.AAA.EQ.' CU'.OR.
     *         AAA.EQ.'CU1'.OR.AAA.EQ.' ZN'.OR.
     *         AAA.EQ.' GA'.OR.AAA.EQ.' GE'.OR.
     *         AAA.EQ.' AS'.OR.AAA.EQ.' SE'.OR.
     *         AAA.EQ.' BR'.OR.AAA.EQ.' KR'.OR.
     *         AAA.EQ.' RB'.OR.AAA.EQ.' SR'.OR.
     *         AAA.EQ.'  Y'.OR.AAA.EQ.' ZR'.OR.
     *         AAA.EQ.' NB'.OR.AAA.EQ.' MO'.OR.
     *         AAA.EQ.' TC'.OR.AAA.EQ.' RU'.OR.
     *         AAA.EQ.' RH'.OR.AAA.EQ.' PD'.OR.
     *         AAA.EQ.' AG'.OR.AAA.EQ.' CD'.OR.
     *         AAA.EQ.' IN'.OR.AAA.EQ.' SN'.OR.
     *         AAA.EQ.' SB'.OR.AAA.EQ.' TE'.OR.
     *         AAA.EQ.'  I'.OR.AAA.EQ.' XE'.OR.
     *         AAA.EQ.' CS'.OR.AAA.EQ.' BA'.OR.
     *         AAA.EQ.' LA'.OR.AAA.EQ.' CE'.OR.
     *         AAA.EQ.' PR'.OR.AAA.EQ.' ND'.OR.
     *         AAA.EQ.' PM'.OR.AAA.EQ.' SM'.OR.
     *         AAA.EQ.' EU'.OR.AAA.EQ.' GD'.OR.
     *         AAA.EQ.' TB'.OR.AAA.EQ.' DY'.OR.
     *         AAA.EQ.' HO'.OR.AAA.EQ.' ER'.OR.
     *         AAA.EQ.' TM'.OR.AAA.EQ.' YB'.OR.
     *         AAA.EQ.' LU'.OR.AAA.EQ.' HF'.OR.
     *         AAA.EQ.' TA'.OR.AAA.EQ.'  W'.OR.
     *         AAA.EQ.' RE'.OR.AAA.EQ.' OS'.OR.
     *         AAA.EQ.' IR'.OR.AAA.EQ.' PT'.OR.
     *         AAA.EQ.' AU'.OR.AAA.EQ.' HG'.OR.
     *         AAA.EQ.' TI'.OR.AAA.EQ.' PB'.OR.
     *         AAA.EQ.' BI'.OR.AAA.EQ.' PO'.OR.
     *         AAA.EQ.' AT'.OR.AAA.EQ.' RN'.OR.
     *         AAA.EQ.' FR'.OR.AAA.EQ.' RA'.OR.
     *         AAA.EQ.' AC'.OR.AAA.EQ.' TH'.OR.
     *         AAA.EQ.' PA'.OR.
     *         AAA.EQ.' NP'.OR.AAA.EQ.' PU'.OR.
     *         AAA.EQ.' AM'.OR.AAA.EQ.' CM'.OR.
     *         AAA.EQ.' BK'.OR.AAA.EQ.' CF'.OR.
     *         AAA.EQ.' ES'.OR.AAA.EQ.' FM'.OR.
     *         AAA.EQ.' MD'.OR.AAA.EQ.' NO'.OR.
     *         AAA.EQ.' LR'.OR.AAA.EQ.' RF'.OR.
     *         AAA.EQ.' DB'.OR.AAA.EQ.' SG'.OR.
     *         AAA.EQ.' BH'.OR.AAA.EQ.' HS'.OR.
     *         AAA.EQ.' MT'.OR.AAA.EQ.' DS'.OR.
     *         AAA.EQ.' RG'.OR.AAA.EQ.' CN'.OR.
     *         AAA.EQ.'TI2'.OR.AAA.EQ.' V2'.OR.
     *         AAA.EQ.'CR2'.OR.AAA.EQ.'FE2'.OR.
     *         AAA.EQ.'AG2'.OR.AAA.EQ.'SM2'.OR.
     *         AAA.EQ.'YB2'.OR.AAA.EQ.'MN3'.OR.
     *         AAA.EQ.'3CO'.OR.AAA.EQ.'EU3'.OR.
     *         AAA.EQ.'AU3'.OR.AAA.EQ.'HOH'    ) THEN
               IF(AAA.EQ.' NA'.OR.AAA.EQ.' CL') THEN
                  WRITE(RESNAM(IRES),'(A2,I1,I1)') AAA(2:3),1,
     *                                             NFFTYP/10000
                  RNAME = ' $'//RESNAM(IRES)(1:4)
               ELSE IF(AAA.EQ.'  K') THEN
                  WRITE(RESNAM(IRES),'(A1,I1,I1)') AAA(3:3),1,
     *                                             NFFTYP/10000
                  RNAME = ' $'//RESNAM(IRES)(1:3)
               ELSE IF(AAA.EQ.' MG'.OR.AAA.EQ.' CA') THEN
                  WRITE(RESNAM(IRES),'(A2,I1,I1)') AAA(2:3),2,
     *                                             NFFTYP/10000
                  RNAME = ' $'//RESNAM(IRES)(1:4)
               ELSE IF (AAA.EQ.'HOH') THEN
                  RNAME = ' $'//RESNAM(IRES)(1:6)
               ELSE IF(AAA.EQ.'  F'.OR.AAA.EQ.'  I'.OR.
     *                 AAA.EQ.'  V'.OR.AAA.EQ.'  W'.OR.
     *                 AAA.EQ.'  Y'.OR.AAA.EQ.'  U'    ) THEN
                  RNAME = ' $'//AAA(3:3)
               ELSE IF(AAA.EQ.'CU1'.OR.AAA.EQ.'TI2'.OR.
     *                 AAA.EQ.'CR2'.OR.AAA.EQ.'FE2'.OR.
     *                 AAA.EQ.'AG2'.OR.AAA.EQ.'SM2'.OR.
     *                 AAA.EQ.'YB2'.OR.AAA.EQ.'MN3'.OR.
     *                 AAA.EQ.'3CO'.OR.AAA.EQ.'EU3'.OR.
     *                 AAA.EQ.'AU3'                    ) THEN
                  RNAME = ' $'//AAA(1:3)
               ELSE
                  RNAME = ' $'//AAA(2:3)
               END IF
               NLIBFILE = 13
               CALL RDLIBFILE(NLIBFILE,RNAME,
     *                  ZMAS,ONEMAS,
     *                  CHARG,POL,SIG,EPS,
     *                  SIG2,EPS2,
     *                  BOND0,FCBOND,
     *                  ANGL0,FCANGL,FCWAGG,
     *                  DIHB0,FCDIHB,
     *                  VROT,NNN,GAMA,
     *                  IPAIR,
     *                  KLIST,LLIST,MLIST,NLIST,
     *                  CLPR,ZLPR,NLPR,
     *                  LFFAT,
     *                  MXFFAT,MXBOND,MXANGL,MXDIHR,
     *                  MXWAGG,MXDIHB)
            END IF
            LFFAT = LFFAT + JATOM
         ENDDO
         IF(MASWRK) CLOSE(13)
      END IF
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK RDLIBFILE
      SUBROUTINE RDLIBFILE(NLIBFILE,RNAME,
     *                     ZMAS,ONEMAS,
     *                     CHARG,POL,SIG,EPS,
     *                     SIG2,EPS2,
     *                     BOND0,FCBOND,
     *                     ANGL0,FCANGL,FCWAGG,
     *                     DIHB0,FCDIHB,
     *                     VROT,NNN,GAMA,
     *                     IPAIR,
     *                     KLIST,LLIST,MLIST,NLIST,
     *                     CLPR,ZLPR,NLPR,
     *                     LFFAT,
     *                     MXFFAT,MXBOND,MXANGL,MXDIHR,
     *                     MXWAGG,MXDIHB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 WORD
      CHARACTER*8  RNAME
C
      DIMENSION ZMAS(MXFFAT),ONEMAS(MXFFAT),CHARG(MXFFAT),POL(MXFFAT),
     *          SIG(MXFFAT),EPS(MXFFAT),
     *          SIG2(MXFFAT),EPS2(MXFFAT),
     *          BOND0(MXBOND),FCBOND(MXBOND),
     *          ANGL0(MXANGL),FCANGL(MXANGL),
     *          FCWAGG(MXWAGG),
     *          DIHB0(MXDIHB),FCDIHB(MXDIHB),
     *          VROT(MXDIHR),NNN(MXDIHR),
     *          GAMA(MXDIHR),IPAIR(2,MXBOND),
     *          KLIST(3,MXANGL),LLIST(4,MXDIHR),MLIST(4,MXWAGG),
     *          NLIST(4,MXDIHB),
     *          CLPR(4,MXFFAT),ZLPR(4,MXFFAT),NLPR(MXFFAT)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN ALL PARAMETERS FROM LIBRARY --
C
      IEOF=0
      CALL SEQREW(NLIBFILE)
      CALL FNDGRP(NLIBFILE,RNAME,IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: ',RNAME,' NOT IN LIBRARY'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      CALL OPNCRD(NLIBFILE,-IW)
C
  100 CONTINUE
      CALL RDCARD('LIBRARY ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      WORD ='          '
      KSIZE = -10
      CALL GSTRNG(WORD,KSIZE)
C
      IF(WORD.EQ.'COORDINATE'.OR.WORD.EQ.'CMAP      ') THEN
         CALL FNDGRP(NLIBFILE,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'PARAMETERS') THEN
         CALL RDPDBPARA(ZMAS,ONEMAS,CHARG,POL,SIG,EPS,
     *                  SIG2,EPS2,LFFAT)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'QMMMREP   ') THEN
         CALL RDPDBQMMM(CLPR,ZLPR,NLPR,LFFAT)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'BOND      ') THEN
         CALL RDPDBBOND(BOND0,FCBOND,IPAIR,MXBOND,LFFAT)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'ANGLE     ') THEN
         CALL RDPDBANGL(ANGL0,FCANGL,KLIST,MXANGL,LFFAT)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'DIHROT    ') THEN
         CALL RDPDBDIHR(LLIST,GAMA,NNN,VROT,MXDIHR,LFFAT)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'DIHBND    ')THEN
         CALL RDPDBDIHB(NLIST,DIHB0,FCDIHB,MXDIHB,LFFAT)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'WAGGING   ') THEN
         CALL RDPDBWAGG(FCWAGG,MLIST,MXWAGG,LFFAT)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'$END      ') RETURN
C
      END
C*MODULE QUANPO  *DECK RDPDBPARA
      SUBROUTINE RDPDBPARA(ZMAS,ONEMAS,CHARG,POL,SIG,EPS,
     *                     SIG2,EPS2,LFFAT)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
C
      CHARACTER*10 FFNAME
C
      DIMENSION ZMAS(*),ONEMAS(*),CHARG(*),POL(*),SIG(*),EPS(*),
     *          SIG2(*),EPS2(*)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C
C     -- READ IN PARAMETERS FROM LIBRARY --
C
      IERR = 0
      IEOF = 0
      K    = LFFAT
  100 CONTINUE
      K = K + 1
      CALL RDCARD('RDPARAMT',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      FFNAME = '          '
      LGSTR=-10
      CALL GSTRNG(FFNAME,LGSTR)
      IF(FFNAME.EQ.'STOP      ') GOTO 200
      ZMAS(K)  = RFIND('FFMASS  ',IERR)*1822.88850204D+00
      ONEMAS(K)= 1.0D+00/ZMAS(K)
      CHARG(K) = RFIND('FFCHARGE',IERR)
      POL(K)   = RFIND('FFPOL   ',IERR)*TOBOHR**3
      SIG(K)   = RFIND('FFSIGMA ',IERR)*TOBOHR
      EPS(K)   = RFIND('FFEPSILN',IERR)*TOHART
      SIG2(K)  = RFIND('FFSIGMA ',IERR)*TOBOHR
      EPS2(K)  = RFIND('FFEPSILN',IERR)*TOHART
C     - WATERIONS.LIB USES RMIN/2
      SIG(K)  = SIG(K) *1.781797436280679D+00
      SIG2(K) = SIG2(K)*1.781797436280679D+00
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR READING PARAMETERS IN LIBRARY'
         CALL ABRT
      END IF
      GOTO 100
C
 200  CONTINUE
      CALL FLSHBF(IW)
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK RDPDBQMMM
      SUBROUTINE RDPDBQMMM(CLPR,ZLPR,NLPR,LFFAT)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (ZERO=0.0D+00)
C
      CHARACTER*10 FFNAME
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CLPR(4,*),ZLPR(4,*),NLPR(*)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, MAR 2011, LINCOLN
C
C     -- READ IN QMMMREP FROM LIBRARY --
C
      IERR = 0
      IEOF = 0
      K    = LFFAT
  100 CONTINUE
      K = K + 1
      CALL RDCARD('RDQMMMPDB',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      FFNAME = '          '
      LGSTR=-10
      CALL GSTRNG(FFNAME,LGSTR)
      IF(FFNAME.EQ.'STOP      ') GOTO 200
      NTERMS = IFIND('NTERM   ',IERR)
      IF(NTERMS.GT.4) THEN
         IF(MASWRK) WRITE(IW,*) 'QMMMREP: NTERMS CANNOT BE > 4'
         CALL ABRT
      END IF
      DO 110 II = 1, NTERMS
         CLPR(II,K) = RFIND('CLPR    ',IERR)
         IF(IERR.NE.0) THEN
            IF(MASWRK) WRITE(IW,*) 'QMMMREP: ERORR READING CLPR'
            CALL ABRT
         END IF
         ZLPR(II,K) = RFIND('ZLPR    ',IERR)
         IF(IERR.NE.0) THEN
            IF(MASWRK) WRITE(IW,*) 'QMMMREP: ERORR READING ZLPR'
            CALL ABRT
         END IF
         IF(CLPR(II,K).NE.ZERO .AND. ZLPR(II,K).EQ.ZERO) THEN
            IF(MASWRK) WRITE(IW,*) 'QMMMREP: ZETA CANNOT BE ZERO'
            CALL ABRT
         END IF
  110 CONTINUE
C      -- THE CURRENT CODE ONLY USES POTENTIAL = R**2.
      NLPR(K) = 2
      GOTO 100
C
 200  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK RDPDBBOND
      SUBROUTINE RDPDBBOND(BOND0,FCBOND,IPAIR,MXBOND,LFFAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 HEAD
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION BOND0(MXBOND),FCBOND(MXBOND),IPAIR(2,MXBOND)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C
C     -- READ IN BOND INFO FROM LIBRARY --
C
      IERR   = 0
      IEOF   = 0
  100 CONTINUE
      CALL RDCARD('RDBOND  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') GOTO 200
      NBOND = NBOND + 1
      IPAIR(1,NBOND) = IFIND('IPAIR  ',IERR)+LFFAT
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING ATM1 IN LIBRARY'
         CALL ABRT
      END IF
      IPAIR(2,NBOND) = IFIND('IPAIR  ',IERR)+LFFAT
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING ATM2 IN LIBRARY'
         CALL ABRT
      END IF
      FCBOND(NBOND) = RFIND('FCBOND  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING FCBOND IN LIBRARY'
         CALL ABRT
      END IF
C     -INPUT KCAL/(MOL*A*A), CONVERT TO HARTREE/(BOHR*BOHR)
      FCBOND(NBOND) = FCBOND(NBOND)*TOANGS*TOANGS*TOHART
      BOND0(NBOND) = RFIND('R0      ',IERR)*TOBOHR
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING R0 IN LIBRARY'
         CALL ABRT
      END IF
C
      GOTO 100
C
 200  CONTINUE
C
      IF(NBOND.GT.MXBOND) THEN
         IF(MASWRK) WRITE(IW,*) 'ERROR: TOO MANY BONDS. INCREASE MXBOND'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK RDPDBANGL
      SUBROUTINE RDPDBANGL(ANGL0,FCANGL,KLIST,MXANGL,LFFAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 HEAD
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      DIMENSION ANGL0(MXANGL),FCANGL(MXANGL),KLIST(3,MXANGL)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN ANGLE INFO FROM LIBRARY  --
C
      IERR   = 0
      IEOF   = 0
  100 CONTINUE
      CALL RDCARD('RDANGL  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*) 
     *   'ERROR: END OF FILE READING LIBRARY'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') GOTO 200
      NANGL = NANGL + 1
      KLIST(1,NANGL) = IFIND('KLIST1  ',IERR) + LFFAT
      KLIST(2,NANGL) = IFIND('KLIST2  ',IERR) + LFFAT
      KLIST(3,NANGL) = IFIND('KLIST3  ',IERR) + LFFAT
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING ANGLE IN LIBRARY'
         CALL ABRT
      END IF
      FCANGL(NANGL) = RFIND('FCANGL  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING FCANGL IN LIBRARY'
         CALL ABRT
      END IF
      FCANGL(NANGL) = FCANGL(NANGL)*TOHART
      ANGL0(NANGL) = RFIND('ANGL0   ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING ANGL0 IN LIBRARY'
         CALL ABRT
      END IF
      ANGL0(NANGL) = ANGL0(NANGL)*TORAD
C
      GOTO 100
C
 200  CONTINUE
C
      IF(NANGL.GT.MXANGL) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY ANGLES. INCREASE MXANGL'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK RDPDBDIHR
      SUBROUTINE RDPDBDIHR(LLIST,GAMA,NNN,VROT,MXDIHR,LFFAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 HEAD
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      DIMENSION LLIST(4,MXDIHR),GAMA(MXDIHR),NNN(MXDIHR),VROT(MXDIHR)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C
C     -- READ IN DIHEDRAL ROTATION ANGLE INFO FROM LIBRARY  --
C
      IERR   = 0
      IEOF   = 0
  100 CONTINUE
      CALL RDCARD('RDDIHR  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') GOTO 200
      NDIHR = NDIHR + 1
      LLIST(1,NDIHR) = IFIND('LLIST1  ',IERR) + LFFAT
      LLIST(2,NDIHR) = IFIND('LLIST2  ',IERR) + LFFAT
      LLIST(3,NDIHR) = IFIND('LLIST3  ',IERR) + LFFAT
      LLIST(4,NDIHR) = IFIND('LLIST4  ',IERR) + LFFAT
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *       'ERROR READING DIHROT ANGLE LIST IN LIBRARY'
         CALL ABRT
      END IF
C
      VROT(NDIHR) = RFIND('VROT    ',IERR)
C     -INPUT KCAL/MOL, CONVERT TO HARTREE
      VROT(NDIHR) = VROT(NDIHR)*TOHART
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING VROT IN LIBRARY'
         CALL ABRT
      END IF
C
      NNN(NDIHR) = IFIND('NNN     ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING NNN IN LIBRARY'
         CALL ABRT
      END IF
C
      GAMA(NDIHR) = RFIND('GAMA   ',IERR)
C     - INPUT DEGREES, CONVERT TO RADIANS
      GAMA(NDIHR) = GAMA(NDIHR)*TORAD
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING GAMA IN LIBRARY'
         CALL ABRT
      END IF
C
      GOTO 100
C
 200  CONTINUE
C
      IF(NDIHR.GT.MXDIHR) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: TOO MANY DIHROT ANGLES. INCREASE MXDIHR'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK RDPDBDIHB
      SUBROUTINE RDPDBDIHB(NLIST,DIHB0,FCDIHB,MXDIHB,
     *                     LFFAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 HEAD
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      DIMENSION NLIST(4,MXDIHB),DIHB0(MXDIHB),FCDIHB(MXDIHB)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C
C     -- READ IN DIHEDRAL BENDING ANGLE INFO FROM LIBRARY --
C
      IERR   = 0
      IEOF   = 0
  100 CONTINUE
      CALL RDCARD('RDDIHB  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR) 
      IF(HEAD.EQ.'STOP      ') GOTO 200
      NDIHB = NDIHB + 1
      NLIST(1,NDIHB) = IFIND('NLIST1  ',IERR) + LFFAT
      NLIST(2,NDIHB) = IFIND('NLIST2  ',IERR) + LFFAT
      NLIST(3,NDIHB) = IFIND('NLIST3  ',IERR) + LFFAT
      NLIST(4,NDIHB) = IFIND('NLIST4  ',IERR) + LFFAT
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR READING DIHBND ANGLES IN LIBRARY'
         CALL ABRT
      END IF
      FCDIHB(NDIHB) = RFIND('FDIHBG  ',IERR)*TOHART
      DIHB0(NDIHB) = RFIND('DIHB0   ',IERR)
      IF(DIHB0(NDIHB).NE.  0.0D+00 .AND.
     *   DIHB0(NDIHB).NE.180.0D+00) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR: DIHB0=', DIHB0(NDIHB)
         IF(MASWRK)WRITE(IW,*) 'DIHB0 MUST BE 0.0 OR 180.0 DEGREES'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      DIHB0(NDIHB) = DIHB0(NDIHB)*TORAD
C
      GOTO 100
C
 200  CONTINUE
C
      IF(NDIHB.GT.MXDIHB) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: TOO MANY DIHBND ANGLES. INCREASE MXDIHB'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK RDPDBWAGG
      SUBROUTINE RDPDBWAGG(FCWAGG,MLIST,MXWAGG,LFFAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00,TOHART=1.0D+00/TOKCAL)
C
      DIMENSION MLIST(4,MXWAGG),FCWAGG(MXWAGG)
C
      CHARACTER*10 HEAD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN WAGGING ANGLE INFO FROM $FFPDB --
C
      IERR   = 0
      IEOF   = 0
  100 CONTINUE
      CALL RDCARD('RDWAGG  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') GOTO 200
      NWAGG = NWAGG + 1
      MLIST(1,NWAGG) = IFIND('MLIST1  ',IERR) + LFFAT
      MLIST(2,NWAGG) = IFIND('MLIST2  ',IERR) + LFFAT
      MLIST(3,NWAGG) = IFIND('MLIST3  ',IERR) + LFFAT
      MLIST(4,NWAGG) = IFIND('MLIST3  ',IERR) + LFFAT
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR READING WAGGING IN LIBRARY'
         CALL ABRT
      END IF
      FCWAGG(NWAGG) = RFIND('FCWAGG  ',IERR)
C     -INPUT KCAL/(MOL*RAD*RAD), CONVERT TO HARTREE/(RAD*RAD)
      FCWAGG(NWAGG) = FCWAGG(NWAGG)*TOHART
C
      GOTO 100
C
 200  CONTINUE
C
      IF(NWAGG.GT.MXWAGG) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: TOO MANY WAGGING ANGLES. INCREASE MXWAGG'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK JADDIONS
!>
!> @brief    ADD NA+ OR K+ IONS TO DNA/RNA PO4 SITES
!>
!> @author   Hui Li
!>           - Dec 2011
!>
!> @details  ADD NA+ OR K+ IONS TO DNA/RNA PO4 SITES
!>
      SUBROUTINE JADDIONS(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,CHARG,POL,
     *                    SIG,EPS,SIG2,EPS2,CLPR,ZLPR,NLPR,
     *                    JADDNA1,JADDK1)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      CHARACTER*8  RNAME
      CHARACTER*10 ATMNAM
C
      PARAMETER (PT5=0.5D+00, FOUR=4.0D+00)
C
      DIMENSION ATMNAM(*),CORD(3,*),ZANF(*),ZMAS(*),
     *          ONEMAS(*),CHARG(*),POL(*),
     *          SIG(*),EPS(*),SIG2(*),EPS2(*),CLPR(4,*),ZLPR(4,*),
     *          NLPR(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
C
C     ADD NA+ OR K+ IONS TO DNA/RNA PO4 SITES.
C
C     HUI LI, DEC 6, 2011, LINCOLN
C
      IF(JADDNA1.EQ.0 .AND. JADDK1.EQ.0) RETURN
C
      MADDNA1= 0
      MADDK1 = 0
      DO IFFAT = 1, NFFAT
         IF(ATMNAM(IFFAT  ).EQ.'P         '.AND.
     *      ATMNAM(IFFAT+1).EQ.'O         '.AND.
     *      ATMNAM(IFFAT+2).EQ.'O         ') THEN
            DIS1 = (CORD(1,IFFAT)-CORD(1,IFFAT+1))**2 +
     *             (CORD(2,IFFAT)-CORD(2,IFFAT+1))**2 +
     *             (CORD(3,IFFAT)-CORD(3,IFFAT+1))**2
            DIS2 = (CORD(1,IFFAT)-CORD(1,IFFAT+2))**2 +
     *             (CORD(2,IFFAT)-CORD(2,IFFAT+2))**2 +
     *             (CORD(3,IFFAT)-CORD(3,IFFAT+2))**2
            IF(DIS1.LT.11.6D+00 .AND. DIS2.LT.11.6D+00) THEN
               XXX = CORD(1,IFFAT)
     *             + ((CORD(1,IFFAT+1)+CORD(1,IFFAT+2))*PT5
     *                -CORD(1,IFFAT))*FOUR
               YYY = CORD(2,IFFAT)
     *             + ((CORD(2,IFFAT+1)+CORD(2,IFFAT+2))*PT5
     *                -CORD(2,IFFAT))*FOUR
               ZZZ = CORD(3,IFFAT)
     *             + ((CORD(3,IFFAT+1)+CORD(3,IFFAT+2))*PT5
     *                -CORD(3,IFFAT))*FOUR
               IF(JADDNA1.EQ.1) THEN
                  MADDNA1         = MADDNA1 + 1
                  NFFAT           = NFFAT + 1
                  CORD(1,NFFAT)   = XXX
                  CORD(2,NFFAT)   = YYY
                  CORD(3,NFFAT)   = ZZZ
                  ZANF  (NFFAT)   = 11.0D+00
                  ATMNAM(NFFAT)   = 'NA'
                  IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A5,I1,A2)')
     *                           ' $NA1',NFFTYP/10000,'  '
                  IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A5,I2,A1)')
     *                           ' $NA1',NFFTYP/10000,' '
                  CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *                        CHARG,POL,SIG,EPS,
     *                        SIG2,EPS2,
     *                        CLPR,ZLPR,NLPR,NFFAT)
               ELSE IF(JADDK1.EQ.1) THEN
                  MADDK1          = MADDK1 + 1
                  NFFAT           = NFFAT + 1
                  CORD(1,NFFAT)   = XXX
                  CORD(2,NFFAT)   = YYY
                  CORD(3,NFFAT)   = ZZZ
                  ZANF  (NFFAT)   = 19.0D+00
                  ATMNAM(NFFAT)   = 'K'
                  IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A4,I1,A3)')
     *                           ' $K1',NFFTYP/10000,'   '
                  IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A4,I2,A2)')
     *                           ' $K1',NFFTYP/10000,'  '
                  CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *                        CHARG,POL,SIG,EPS,
     *                        SIG2,EPS2,
     *                        CLPR,ZLPR,NLPR,NFFAT)
               END IF
            END IF
         END IF
      ENDDO
      JADDNA1 = MADDNA1
      JADDK1  = MADDK1
C
      RETURN
      END
C*MODULE QUANPO  *DECK ADDPBCWAT
!>          
!> @brief    Add water molecules to a PBC box
!>   
!> @author   Hui Li 
!>           - Mar 2011
!>   
!> @details  add ions first
!>           water parameters from external file
!>
      SUBROUTINE ADDPBCWAT(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,CHARG,POL,
     *                     SIG,EPS,SIG2,EPS2,CLPR,ZLPR,NLPR,
     *                     IPAIR,FCBOND,BOND0,
     *                     KLIST,FCANGL,ANGL0,L1213J,
     *                     MXFFAT,MXBOND,MXANGL,
     *                     WATO1,WATH2,WATH3,NWATER,ITYPWAT,
     *                     IADDNA1,IADDK1,IADDCA2,IADDMG2,IADDCL1,
     *                     JADDNA1,JADDK1,LSTRAT,DSTRAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      CHARACTER*8  RNAME
      CHARACTER*10 ATMNAM
      CHARACTER*256 QPFILE
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, FOUR=4.0D+00)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION ATMNAM(*),CORD(3,*),ZANF(*),ZMAS(*),
     *          ONEMAS(*),CHARG(*),POL(*),
     *          SIG(*),EPS(*),SIG2(*),EPS2(*),CLPR(4,*),ZLPR(4,*),
     *          NLPR(*),IPAIR(2,*),FCBOND(*),BOND0(*),
     *          KLIST(3,*),FCANGL(*),ANGL0(*),L1213J(2,*),
     *          WATO1(3,*),WATH2(3,*),WATH3(3,*),
     *          O1(3),H2(3),H3(3),LSTRAT(2,*),DSTRAT(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     ADD WATER MOLECULES TO THE SYSTEM TO FILL A RECTANGULAR PBC BOX.
C
C     HUI LI, MAR 2011, LINCOLN
C
      NFFAT0 = NFFAT
C
      XMAXMOL = -1.0D+30
      YMAXMOL = -1.0D+30
      ZMAXMOL = -1.0D+30
      XMINMOL =  1.0D+30
      YMINMOL =  1.0D+30
      ZMINMOL =  1.0D+30
      DO IAT = 1,NAT
         XMAXMOL = MAX(XMAXMOL,C(1,IAT))
         YMAXMOL = MAX(YMAXMOL,C(2,IAT))
         ZMAXMOL = MAX(ZMAXMOL,C(3,IAT))
         XMINMOL = MIN(XMINMOL,C(1,IAT))
         YMINMOL = MIN(YMINMOL,C(2,IAT))
         ZMINMOL = MIN(ZMINMOL,C(3,IAT))
      ENDDO
      DO IFFAT = 1,NFFAT0
         XMAXMOL = MAX(XMAXMOL,CORD(1,IFFAT))
         YMAXMOL = MAX(YMAXMOL,CORD(2,IFFAT))
         ZMAXMOL = MAX(ZMAXMOL,CORD(3,IFFAT))
         XMINMOL = MIN(XMINMOL,CORD(1,IFFAT))
         YMINMOL = MIN(YMINMOL,CORD(2,IFFAT))
         ZMINMOL = MIN(ZMINMOL,CORD(3,IFFAT))
      ENDDO
      IF(XMAXMOL.EQ.-1.0D+30) XMAXMOL = ZERO
      IF(YMAXMOL.EQ.-1.0D+30) YMAXMOL = ZERO
      IF(ZMAXMOL.EQ.-1.0D+30) ZMAXMOL = ZERO
      IF(XMINMOL.EQ. 1.0D+30) XMINMOL = ZERO
      IF(YMINMOL.EQ. 1.0D+30) YMINMOL = ZERO
      IF(ZMINMOL.EQ. 1.0D+30) ZMINMOL = ZERO
      IF(MASWRK) THEN
         WRITE(IW,*)'THE DIMENSION OF THE SOLUTE MOLECULE IS (A):'
         WRITE(IW,'(6(1X,A,F8.2))')
     *     'XMIN=',XMINMOL*TOANGS,'XMAX=',XMAXMOL*TOANGS,
     *     'YMIN=',YMINMOL*TOANGS,'YMAX=',YMAXMOL*TOANGS,
     *     'ZMIN=',ZMINMOL*TOANGS,'ZMAX=',ZMAXMOL*TOANGS
      END IF
C     - THE AVERAGE DISTANCE BETWEEN AN ATOM
C       AND WATER OXYGEN ATOM SHOULD BE 2.3 ANGSTROM
C       THIS VALUE DOES NOT AFFECT THE NUMBER OF WATER
C       BECAUSE IT IS USED ONLY FOR PRE-SCREENING
      VDW     = 2.3D+00*TOBOHR
      XMAXMOL = XMAXMOL + VDW
      YMAXMOL = YMAXMOL + VDW
      ZMAXMOL = ZMAXMOL + VDW
      XMINMOL = XMINMOL - VDW
      YMINMOL = YMINMOL - VDW
      ZMINMOL = ZMINMOL - VDW
      IF((XBOX-(XMAXMOL-XMINMOL)).LT.ZERO)THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: XBOX MUST BE LARGER THAN ',
     *      (XMAXMOL-XMINMOL)*TOANGS,' ANGSTROM.'
         IF(MASWRK) WRITE(IW,*) XMAXMOL*TOANGS,XMINMOL*TOANGS
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      IF((YBOX-(YMAXMOL-YMINMOL)).LT.ZERO)THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: YBOX MUST BE LARGER THAN ',
     *      (YMAXMOL-YMINMOL)*TOANGS,' ANGSTROM.'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      IF((ZBOX-(ZMAXMOL-ZMINMOL)).LT.ZERO)THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: ZBOX MUST BE LARGER THAN ',
     *      (ZMAXMOL-ZMINMOL)*TOANGS,' ANGSTROM.'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C 
C     -- SET UP A WATER BOX CENTERED AT THE DEFINED PBC CENTER
      XMAX    = CENTX + PT5*XBOX 
      YMAX    = CENTY + PT5*YBOX
      ZMAX    = CENTZ + PT5*ZBOX
      XMIN    = CENTX - PT5*XBOX
      YMIN    = CENTY - PT5*YBOX
      ZMIN    = CENTZ - PT5*ZBOX
C
C     - DETERMINE THE MAXIMUM NUMBER OF WATER
      VOLM    = (MAX(XBOX,YBOX,ZBOX))**3
C     - VOLUME OF ONE WATER =  29.998696 A**3 AT 298.15 K, 1 BAR
C                           = 202.441191 BOHR**3
      MAXWAT  = INT(VOLM/202.441191D+00) + 10
      NFOLD   = 0
      DO K = 0, 30, 3
         IF(MAXWAT.GT.4096*(2**K)) NFOLD = K+3
      ENDDO
      KKKWAT = 4096*(2**NFOLD)
      IF(KKKWAT.GT.8*MXFFAT) THEN
         IF(MASWRK) WRITE(IW,*)
     *      'ERROR: TOO MANY WATER IN ADDPBCWAT. INCREASE MXFFAT'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
C     -- READ IN 4096 WATER MOLECULES --
C        THEY ARE IN A CUBE WITH SIDE LENGTH = 49.7150 A.
C        CREATE MORE WATER IF NECESSARY
C
      IF(MASWRK) THEN
      CALL GENQPFILE('WATER4096.DAT ',QPFILE,LENQP)
      OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
      DO IWAT=1,4096
         READ(12,*) WATO1(1,IWAT),WATO1(2,IWAT),WATO1(3,IWAT),
     *              WATH2(1,IWAT),WATH2(2,IWAT),WATH2(3,IWAT),
     *              WATH3(1,IWAT),WATH3(2,IWAT),WATH3(3,IWAT)
      ENDDO
      CLOSE(12)
      END IF
      IF(GOPARR) CALL DDI_BCAST(457,'F',WATO1,3*4096,MASTER)
      IF(GOPARR) CALL DDI_BCAST(458,'F',WATH2,3*4096,MASTER)
      IF(GOPARR) CALL DDI_BCAST(459,'F',WATH3,3*4096,MASTER)
      SIZE  = 49.7150D+00*TOBOHR*PT5
      DO IFOLD = 1, NFOLD
         IXYZ1 = MOD(IFOLD,3)
         IF(IXYZ1.EQ.1) IXYZ2 = 2
         IF(IXYZ1.EQ.1) IXYZ3 = 3
         IF(IXYZ1.EQ.2) IXYZ2 = 1
         IF(IXYZ1.EQ.2) IXYZ3 = 3
         IF(IXYZ1.EQ.0) IXYZ2 = 1
         IF(IXYZ1.EQ.0) IXYZ3 = 2
         IF(IXYZ1.EQ.0) IXYZ1 = 3
         IF(IXYZ1.EQ.1) SIZE  = SIZE*2.0D+00
         NDONE  = 2**(IFOLD-1)
         LENGTH = NDONE*4096
         DO III = 1, LENGTH
            WATO1(IXYZ1,LENGTH+III) = WATO1(IXYZ1,III) + SIZE
            WATO1(IXYZ2,LENGTH+III) = WATO1(IXYZ2,III) 
            WATO1(IXYZ3,LENGTH+III) = WATO1(IXYZ3,III)
            WATH2(IXYZ1,LENGTH+III) = WATH2(IXYZ1,III) + SIZE
            WATH2(IXYZ2,LENGTH+III) = WATH2(IXYZ2,III)
            WATH2(IXYZ3,LENGTH+III) = WATH2(IXYZ3,III)
            WATH3(IXYZ1,LENGTH+III) = WATH3(IXYZ1,III) + SIZE
            WATH3(IXYZ2,LENGTH+III) = WATH3(IXYZ2,III)
            WATH3(IXYZ3,LENGTH+III) = WATH3(IXYZ3,III)
         ENDDO
      ENDDO
C
C     -- ADD IONS BEFORE WATER --
C        (1) ADD NA+ OR K+ TO DNA/RNA, IF REQUESTED.
C        (2) ADD OTHER IONS
C
      MADDNA1= 0
      MADDK1 = 0
      IF(JADDNA1.EQ.1 .OR. JADDK1.EQ.1) THEN
      DO IFFAT = 1, NFFAT
         IF(ATMNAM(IFFAT  ).EQ.'P         '.AND.
     *      ATMNAM(IFFAT+1).EQ.'O         '.AND.
     *      ATMNAM(IFFAT+2).EQ.'O         ') THEN
            DIS1 = (CORD(1,IFFAT)-CORD(1,IFFAT+1))**2 +
     *             (CORD(2,IFFAT)-CORD(2,IFFAT+1))**2 +
     *             (CORD(3,IFFAT)-CORD(3,IFFAT+1))**2
            DIS2 = (CORD(1,IFFAT)-CORD(1,IFFAT+2))**2 +
     *             (CORD(2,IFFAT)-CORD(2,IFFAT+2))**2 +
     *             (CORD(3,IFFAT)-CORD(3,IFFAT+2))**2
            IF(DIS1.LT.11.6D+00 .AND. DIS2.LT.11.6D+00) THEN
               XXX = CORD(1,IFFAT)
     *             + ((CORD(1,IFFAT+1)+CORD(1,IFFAT+2))*PT5
     *                -CORD(1,IFFAT))*FOUR
               YYY = CORD(2,IFFAT)
     *             + ((CORD(2,IFFAT+1)+CORD(2,IFFAT+2))*PT5
     *                -CORD(2,IFFAT))*FOUR
               ZZZ = CORD(3,IFFAT)
     *             + ((CORD(3,IFFAT+1)+CORD(3,IFFAT+2))*PT5
     *                -CORD(3,IFFAT))*FOUR
               IF(JADDNA1.EQ.1) THEN
                  MADDNA1         = MADDNA1 + 1
                  NFFAT           = NFFAT + 1
                  CORD(1,NFFAT)   = XXX
                  CORD(2,NFFAT)   = YYY
                  CORD(3,NFFAT)   = ZZZ
                  ZANF  (NFFAT)   = 11.0D+00
                  ATMNAM(NFFAT)   = 'NA'
                  IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A5,I1,A2)')
     *                           ' $NA1',NFFTYP/10000,'  '
                  IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A5,I2,A1)')
     *                           ' $NA1',NFFTYP/10000,' '
                  CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *                        CHARG,POL,SIG,EPS,
     *                        SIG2,EPS2,
     *                        CLPR,ZLPR,NLPR,NFFAT)
               ELSE IF(JADDK1.EQ.1) THEN
                  MADDK1          = MADDK1 + 1
                  NFFAT           = NFFAT + 1
                  CORD(1,NFFAT)   = XXX
                  CORD(2,NFFAT)   = YYY
                  CORD(3,NFFAT)   = ZZZ
                  ZANF  (NFFAT)   = 19.0D+00
                  ATMNAM(NFFAT)   = 'K'
                  IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A4,I1,A3)')
     *                           ' $K1',NFFTYP/10000,'   '
                  IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A4,I2,A2)')
     *                           ' $K1',NFFTYP/10000,'  '
                  CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *                        CHARG,POL,SIG,EPS,
     *                        SIG2,EPS2,
     *                        CLPR,ZLPR,NLPR,NFFAT)
               END IF
            END IF
         END IF
      ENDDO
      JADDNA1 = MADDNA1
      JADDK1  = MADDK1
      END IF
C
      NADDNA1= 0
      NADDK1 = 0
      NADDMG2= 0
      NADDCA2= 0
      NADDCL1= 0
C
 100  CONTINUE
      IF(IADDNA1.EQ.0) GOTO 101
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = CENTX + XBOX*(XXX-PT5)
      YYY   = CENTY + YBOX*(YYY-PT5)
      ZZZ   = CENTZ + ZBOX*(ZZZ-PT5)
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX*ONEXBOX)
         PBCY  = YBOX*ANINT(CY*ONEYBOX)
         PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 100
      ENDDO
      NADDNA1         = NADDNA1 + 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 11.0D+00
      ATMNAM(NFFAT)   = 'NA'
      IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A5,I1,A2)')
     *                     ' $NA1',NFFTYP/10000,'  '
      IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A5,I2,A1)')
     *                     ' $NA1',NFFTYP/10000,' '
      CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDNA1.LT.IADDNA1) GOTO 100
C
 101  CONTINUE
      IF(IADDCL1.EQ.0) GOTO 102
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = CENTX + XBOX*(XXX-PT5)
      YYY   = CENTY + YBOX*(YYY-PT5)
      ZZZ   = CENTZ + ZBOX*(ZZZ-PT5)
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX*ONEXBOX)
         PBCY  = YBOX*ANINT(CY*ONEYBOX)
         PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 101
      ENDDO
      NADDCL1         = NADDCL1 + 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 17.0D+00
      ATMNAM(NFFAT)   = 'CL'
      IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A5,I1,A2)')
     *                     ' $CL1',NFFTYP/10000,'  '
      IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A5,I2,A1)')
     *                     ' $CL1',NFFTYP/10000,' '
      CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDCL1.LT.IADDCL1) GOTO 101
C
 102  CONTINUE
      IF(IADDK1.EQ.0) GOTO 103
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = CENTX + XBOX*(XXX-PT5)
      YYY   = CENTY + YBOX*(YYY-PT5)
      ZZZ   = CENTZ + ZBOX*(ZZZ-PT5)
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX*ONEXBOX)
         PBCY  = YBOX*ANINT(CY*ONEYBOX)
         PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 102
      ENDDO
      NADDK1          = NADDK1 + 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 19.0D+00
      ATMNAM(NFFAT)   = 'K'
      IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A4,I1,A3)')
     *                     ' $K1',NFFTYP/10000,'   '
      IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A4,I2,A2)')
     *                     ' $K1',NFFTYP/10000,'  '
      CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDK1.LT.IADDK1) GOTO 102
C
 103  CONTINUE
      IF(IADDCA2.EQ.0) GOTO 104
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = CENTX + XBOX*(XXX-PT5)
      YYY   = CENTY + YBOX*(YYY-PT5)
      ZZZ   = CENTZ + ZBOX*(ZZZ-PT5)
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX*ONEXBOX)
         PBCY  = YBOX*ANINT(CY*ONEYBOX)
         PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 103
      ENDDO
      NADDCA2         = NADDCA2+ 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 20.0D+00
      ATMNAM(NFFAT)   = 'CA'
      IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A5,I1,A2)')
     *                     ' $CA2',NFFTYP/10000,'  '
      IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A5,I2,A1)')
     *                     ' $CA2',NFFTYP/10000,' '
      CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDCA2.LT.IADDCA2) GOTO 103
C
 104  CONTINUE
      IF(IADDMG2.EQ.0) GOTO 105
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = CENTX + XBOX*(XXX-PT5)
      YYY   = CENTY + YBOX*(YYY-PT5)
      ZZZ   = CENTZ + ZBOX*(ZZZ-PT5)
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX*ONEXBOX)
         PBCY  = YBOX*ANINT(CY*ONEYBOX)
         PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 104
      ENDDO
      NADDMG2         = NADDMG2+ 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 12.0D+00
      ATMNAM(NFFAT)   = 'MG'
      IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A5,I1,A2)')
     *                     ' $MG2',NFFTYP/10000,'  '
      IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A5,I2,A1)')
     *                     ' $MG2',NFFTYP/10000,' '
      CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDMG2.LT.IADDMG2) GOTO 104
C
 105  CONTINUE
C
C     -- MUST UPDATE NFFAT0
      NFFAT0 = NFFAT
C
C     -- CHECK EACH WATER MOLECULE --
C
      LPTS = ITYPWAT/100
      NWATER = 0
      DO 200 IWAT = 1, KKKWAT
         O1(1) = WATO1(1,IWAT) + XMIN
         O1(2) = WATO1(2,IWAT) + YMIN
         O1(3) = WATO1(3,IWAT) + ZMIN
         H2(1) = WATH2(1,IWAT) + XMIN
         H2(2) = WATH2(2,IWAT) + YMIN
         H2(3) = WATH2(3,IWAT) + ZMIN
         H3(1) = WATH3(1,IWAT) + XMIN
         H3(2) = WATH3(2,IWAT) + YMIN
         H3(3) = WATH3(3,IWAT) + ZMIN
C        - IF A BIG BOX, USE SMALLER BOX
         IF(KKKWAT.GT.4096*8) THEN
            IF(O1(1).GT.(XMAX-3.0D+00).OR.
     *         O1(2).GT.(YMAX-3.0D+00).OR.
     *         O1(3).GT.(ZMAX-3.0D+00)    )THEN
               GOTO 200
            ELSE
               IF(NFFAT0.EQ.0.AND.NAT.EQ.0) THEN
                  NEAR = 0
                  GOTO 221
               END IF
            END IF
         ELSE
            IF(O1(1).GT.(XMAX+9.0D+00).OR.
     *         O1(2).GT.(YMAX+9.0D+00).OR.
     *         O1(3).GT.(ZMAX+9.0D+00))THEN
               GOTO 200
            END IF
         END IF
C        - WATER TOO CLOSE TO PROTEIN ATOMS AND ALREADY ADDED WATERS
C          IS EXCLUDED, SO USE NFFAT
         NEAR = 0
         DO 210 IFFAT = 1, NFFAT
            IF(ZANF(IFFAT).GT.1.0001D+00) THEN
               CX    = O1(1) - CORD(1,IFFAT)
               CY    = O1(2) - CORD(2,IFFAT)
               CZ    = O1(3) - CORD(3,IFFAT)
               PBCX  = XBOX*ANINT(CX*ONEXBOX)
               PBCY  = YBOX*ANINT(CY*ONEYBOX)
               PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
               CX    = CX - PBCX
               CY    = CY - PBCY
               CZ    = CZ - PBCZ
               IF(ABS(CX).GT.5.68D+00) GOTO 210
               IF(ABS(CY).GT.5.68D+00) GOTO 210
               IF(ABS(CZ).GT.5.68D+00) GOTO 210
               R2    = CX*CX+CY*CY+CZ*CZ
               DUM   = 32.14D+00   !  3.0 A
               IF(IFFAT.LE.NFFAT0.AND.R2.LT.DUM) NEAR=NEAR+1
C              -- WATER-WATER CANNOT BE SMALLER THAN 2.4 ANGSTROM
               IF(IFFAT.GT.NFFAT0.AND.R2.LT.20.57D+00) NEAR=NEAR+1
            END IF
 210     CONTINUE
         DO 220 IAT = 1, NAT
            IF(ZAN(IAT).NE.1.0D+00) THEN
               CX    = O1(1) - C(1,IAT)
               CY    = O1(2) - C(2,IAT)
               CZ    = O1(3) - C(3,IAT)
               PBCX  = XBOX*ANINT(CX*ONEXBOX)
               PBCY  = YBOX*ANINT(CY*ONEYBOX)
               PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
               CX    = CX - PBCX
               CY    = CY - PBCY
               CZ    = CZ - PBCZ
               IF(ABS(CX).GT.5.68D+00) GOTO 220
               IF(ABS(CY).GT.5.68D+00) GOTO 220
               IF(ABS(CZ).GT.5.68D+00) GOTO 220
               R2    = CX*CX+CY*CY+CZ*CZ
C              -- CANNOT BE SMALLER THAN 3.0 ANGSTROM
               IF(R2.LT.32.14D+00) NEAR=NEAR+1
            END IF
 220     CONTINUE
 221     CONTINUE
         IF(NEAR.GT.0) GOTO 200
C        - WATER NOT CLOSE TO PROTEIN ATOMS MUST STAY
         NWATER= NWATER+ 1
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = O1(1)
         CORD(2,NFFAT) = O1(2)
         CORD(3,NFFAT) = O1(3)
         ZANF  (NFFAT) = 8.0D+00
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = H2(1)
         CORD(2,NFFAT) = H2(2)
         CORD(3,NFFAT) = H2(3)
         ZANF  (NFFAT) = 1.0D+00
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = H3(1)
         CORD(2,NFFAT) = H3(2)
         CORD(3,NFFAT) = H3(3)
         ZANF  (NFFAT) = 1.0D+00
         IF(LPTS.EQ.5) THEN
            X12   = O1(1) - H2(1)
            Y12   = O1(2) - H2(2)
            Z12   = O1(3) - H2(3)
            X13   = O1(1) - H3(1)
            Y13   = O1(2) - H3(2)
            Z13   = O1(3) - H3(3)
            X14   = Y12*Z13 - Z12*Y13
            Y14   = Z12*X13 - X12*Z13
            Z14   = X12*Y13 - Y12*X13
            R14   = SQRT(X14*X14 + Y14*Y14 + Z14*Z14)
            ONER14= 1.0D+00/R14
            X14   = X14*ONER14
            Y14   = Y14*ONER14
            Z14   = Z14*ONER14
            X1T   = X12+X13
            Y1T   = Y12+Y13
            Z1T   = Z12+Z13
            R1T   = SQRT(X1T*X1T + Y1T*Y1T + Z1T*Z1T)
            ONER1T= 1.0D+00/R1T
            X1T   = X1T*ONER1T
            Y1T   = Y1T*ONER1T
            Z1T   = Z1T*ONER1T
            NFFAT = NFFAT + 1
            CORD(1,NFFAT) = O1(1) + X14 + X1T
            CORD(2,NFFAT) = O1(2) + Y14 + Y1T
            CORD(3,NFFAT) = O1(3) + Z14 + Z1T
            ZANF  (NFFAT) = 1.0D+00
            NFFAT = NFFAT + 1
            CORD(1,NFFAT) = O1(1) - X14 + X1T
            CORD(2,NFFAT) = O1(2) - Y14 + Y1T
            CORD(3,NFFAT) = O1(3) - Z14 + Z1T
            ZANF  (NFFAT) = 1.0D+00
         END IF
 200  CONTINUE
C
      IF(NFFAT.GT.MXFFAT-10) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: TOO MANY NFFAT ATOMS IN ADDPBCWAT. INCREASE MXFFAT'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      LPTS = ITYPWAT/100
      IF(LPTS.EQ.3) LREAL = 2
      IF(LPTS.EQ.5) LREAL = 4
      IF(LPTS.EQ.3) LBON = 3
      IF(LPTS.EQ.5) LBON = 9
      IF(LPTS.EQ.3) LANG = 1
      IF(LPTS.EQ.5) LANG = 6
      IF(LPTS.EQ.3) L123 = 3
      IF(LPTS.EQ.5) L123 =10
C
      DO IFFAT = NFFAT0+1, NFFAT-LPTS+1, LPTS
         IF(IFFAT.EQ.NFFAT0+1) THEN
            CALL RDHOH(ATMNAM,ZMAS,ONEMAS,CHARG,POL,SIG,EPS,
     *                 SIG2,EPS2,BOND0,FCBOND,
     *                 ANGL0,FCANGL,IPAIR,KLIST,
     *                 CLPR,ZLPR,NLPR,NFFAT0+1,L1213J,ITYPWAT,
     *                 LSTRAT,DSTRAT)
         ELSE
            DO KK = 0, LPTS-1
               ATMNAM(IFFAT+KK) = ATMNAM(IFFAT+KK-LPTS)
               ZMAS  (IFFAT+KK) = ZMAS(IFFAT+KK-LPTS)
               ONEMAS(IFFAT+KK) = ONEMAS(IFFAT+KK-LPTS)
               CHARG (IFFAT+KK) = CHARG(IFFAT+KK-LPTS)
               POL   (IFFAT+KK) = POL(IFFAT+KK-LPTS)
               SIG   (IFFAT+KK) = SIG(IFFAT+KK-LPTS)
               EPS   (IFFAT+KK) = EPS(IFFAT+KK-LPTS)
               SIG2  (IFFAT+KK) = SIG2(IFFAT+KK-LPTS)
               EPS2  (IFFAT+KK) = EPS2(IFFAT+KK-LPTS)
               CLPR(1,IFFAT+KK) = CLPR(1,IFFAT+KK-LPTS)
               ZLPR(1,IFFAT+KK) = ZLPR(1,IFFAT+KK-LPTS)
               CLPR(2,IFFAT+KK) = CLPR(2,IFFAT+KK-LPTS)
               ZLPR(2,IFFAT+KK) = ZLPR(2,IFFAT+KK-LPTS)
               CLPR(3,IFFAT+KK) = CLPR(3,IFFAT+KK-LPTS)
               ZLPR(3,IFFAT+KK) = ZLPR(3,IFFAT+KK-LPTS)
               CLPR(4,IFFAT+KK) = CLPR(4,IFFAT+KK-LPTS)
               ZLPR(4,IFFAT+KK) = ZLPR(4,IFFAT+KK-LPTS)
               NLPR  (IFFAT+KK) = 2
            ENDDO
C
            DO KK=1, LBON
               NBOND = NBOND + 1
               IPAIR(1,NBOND)  = IPAIR(1,NBOND-LBON)+LPTS
               IPAIR(2,NBOND)  = IPAIR(2,NBOND-LBON)+LPTS
               FCBOND(NBOND)   = FCBOND(NBOND-LBON)
               BOND0(NBOND)    = BOND0(NBOND-LBON)
               IF((IRATTLE.GT.0.AND.KK.LE.LREAL)  .OR.
     *           ((IRATTLE.EQ.10.OR.IRATTLE.EQ.20).AND.
     *             KK.GT.LREAL))THEN
                  NRATTLE = NRATTLE + 1
                  LSTRAT(1,NRATTLE)=IPAIR(1,NBOND)
                  LSTRAT(2,NRATTLE)=IPAIR(2,NBOND)
                  DSTRAT(NRATTLE)  =BOND0(NBOND)*BOND0(NBOND)
               END IF
            ENDDO
C
            DO KK=1, LANG
               NANGL = NANGL + 1
               KLIST(1,NANGL)  = KLIST(1,NANGL-LANG)+LPTS
               KLIST(2,NANGL)  = KLIST(2,NANGL-LANG)+LPTS
               KLIST(3,NANGL)  = KLIST(3,NANGL-LANG)+LPTS
               FCANGL (NANGL)  = FCANGL (NANGL-LANG)
               ANGL0  (NANGL)  = ANGL0  (NANGL-LANG)
            ENDDO
C
            DO KK=1, L123
               N1213J = N1213J + 1
               L1213J(1,N1213J) = L1213J(1,N1213J-L123)+LPTS
               L1213J(2,N1213J) = L1213J(2,N1213J-L123)+LPTS
            ENDDO
         END IF
      ENDDO
      IF(NBOND.GT.MXBOND) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: TOO MANY BONDS IN ADDPBCWAT. INCREASE MXBOND'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      IF(NANGL.GT.MXANGL) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: TOO MANY ANGLES IN ADDPBCWAT. INCREASE MXANGL'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK ADDSPHWAT
!>                    
!> @brief    Add water molecules to a sphere
!>   
!> @author   Hui Li   
!>           - Mar 2011
!>   
!> @details  add ions first
!>           water parameters from external file
!>
      SUBROUTINE ADDSPHWAT(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,CHARG,POL,
     *                     SIG,EPS,SIG2,EPS2,CLPR,ZLPR,NLPR,
     *                     IPAIR,FCBOND,BOND0,
     *                     KLIST,FCANGL,ANGL0,L1213J,
     *                     MXFFAT,MXBOND,MXANGL,
     *                     WATO1,WATH2,WATH3,NWATER,ITYPWAT,
     *                     IADDNA1,IADDK1,IADDCA2,IADDMG2,IADDCL1,
     *                     JADDNA1,JADDK1,LSTRAT,DSTRAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      CHARACTER*8  RNAME
      CHARACTER*10 ATMNAM
      CHARACTER*256 QPFILE
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, TWO=2.0D+00,
     *           FOUR=4.0D+00)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION ATMNAM(*),CORD(3,*),ZANF(*),ZMAS(*),
     *          ONEMAS(*),CHARG(*),POL(*),
     *          SIG(*),EPS(*),SIG2(*),EPS2(*),CLPR(4,*),ZLPR(4,*),
     *          NLPR(*),IPAIR(2,*),FCBOND(*),BOND0(*),
     *          KLIST(3,*),FCANGL(*),ANGL0(*),L1213J(2,*),
     *          WATO1(3,*),WATH2(3,*),WATH3(3,*),
     *          O1(3),H2(3),H3(3),LSTRAT(2,*),DSTRAT(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     ADD WATER MOLECULES TO THE SYSTEM TO FILL A SPHERICAL SPACE
C     WITH R=SPHRAD, AND CENTERTED AT (CENTX,CENTY,CENTZ).
C     NOTE: SPHERICAL SYSTEMS HAVE 10E+6 BAR PRESSURE (SURFACE TENSION).
C           ISPHSOL MAY REDUCE THE PRESSURE.
C
C     HUI LI, MAR 2011, LINCOLN
C
      NFFAT0 = NFFAT
C
      RRMOL   = ZERO
      DO IAT = 1, NAT
         DX      = C(1,IAT) - CENTX
         DY      = C(2,IAT) - CENTY
         DZ      = C(3,IAT) - CENTZ
         RR      = DX*DX+DY*DY+DZ*DZ
         RRMOL   = MAX(RRMOL,RR)
      ENDDO
      DO IFFAT = 1,NFFAT0
         DX      = CORD(1,IFFAT) - CENTX
         DY      = CORD(2,IFFAT) - CENTY
         DZ      = CORD(3,IFFAT) - CENTZ
         RR      = DX*DX+DY*DY+DZ*DZ
         RRMOL   = MAX(RRMOL,RR)
      ENDDO
      RMOL = SQRT(RRMOL)
      IF(MASWRK) THEN
         WRITE(IW,'(1X,A,F8.2," ANGSTROM")')
     *     'RMOL=',RMOL*TOANGS
      END IF
C     - THE AVERAGE DISTANCE BETWEEN AN ATOM
C       AND WATER OXYGEN ATOM SHOULD BE 2.3 ANGSTROM
C       THIS VALUE DOES NOT AFFECT THE NUMBER OF WATER
C       BECAUSE IT IS USED FOR PRE-SCREENING
      VDW     = 2.3D+00*TOBOHR
      RMOL    = RMOL + VDW
      IF((SPHRAD-RMOL).LT.ZERO)THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: SPHRAD MUST BE LARGER THAN ',
     *      RMOL*TOANGS,' ANGSTROM.'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C     - DETERMINE THE BOUNDARY OF THE WATER BOX
      XMAX    = CENTX + SPHRAD
      YMAX    = CENTY + SPHRAD
      ZMAX    = CENTZ + SPHRAD
      XMIN    = CENTX - SPHRAD
      YMIN    = CENTY - SPHRAD
      ZMIN    = CENTZ - SPHRAD
C     - DETERMINE THE MAXIMUM NUMBER OF WATER
      VOLM    = (TWO*SPHRAD)**3
C     - VOLUME OF ONE WATER =  29.998696 A**3 AT 298.15 K, 1 BAR
C                           = 202.441191 BOHR**3
      MAXWAT  = INT(VOLM/202.441191D+00)
      NFOLD   = 0
      DO K = 0, 30, 3
         IF(MAXWAT.GT.4096*(2**K)) NFOLD = K+3
      ENDDO
      KKKWAT  = 4096*(2**NFOLD)
      IF(KKKWAT.GT.8*MXFFAT) THEN
         IF(MASWRK) WRITE(IW,*)
     *      'ERROR: TOO MANY WATER IN ADDSPHWAT. INCREASE MXFFAT'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
C     -- READ IN 4096 WATER MOLECULES --
C        THEY ARE IN A CUBE WITH SIDE LENGTH = 49.7150 A.
C        CREATE MORE WATER IF NECESSARY
C
      IF(MASWRK) THEN
      CALL GENQPFILE('WATER4096.DAT ',QPFILE,LENQP)
      OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
      DO IWAT=1,4096
         READ(12,*) WATO1(1,IWAT),WATO1(2,IWAT),WATO1(3,IWAT),
     *              WATH2(1,IWAT),WATH2(2,IWAT),WATH2(3,IWAT),
     *              WATH3(1,IWAT),WATH3(2,IWAT),WATH3(3,IWAT)
      ENDDO
      CLOSE(12)
      END IF
      IF(GOPARR) CALL DDI_BCAST(457,'F',WATO1,3*4096,MASTER)
      IF(GOPARR) CALL DDI_BCAST(458,'F',WATH2,3*4096,MASTER)
      IF(GOPARR) CALL DDI_BCAST(459,'F',WATH3,3*4096,MASTER)
      SIZE  = 49.7150D+00*TOBOHR*PT5
      DO IFOLD = 1, NFOLD
         IXYZ1 = MOD(IFOLD,3)
         IF(IXYZ1.EQ.1) IXYZ2 = 2
         IF(IXYZ1.EQ.1) IXYZ3 = 3
         IF(IXYZ1.EQ.2) IXYZ2 = 1
         IF(IXYZ1.EQ.2) IXYZ3 = 3
         IF(IXYZ1.EQ.0) IXYZ2 = 1
         IF(IXYZ1.EQ.0) IXYZ3 = 2
         IF(IXYZ1.EQ.0) IXYZ1 = 3
         IF(IXYZ1.EQ.1) SIZE  = SIZE*2.0D+00
         NDONE  = 2**(IFOLD-1)
         LENGTH = NDONE*4096
         DO III = 1, LENGTH
            WATO1(IXYZ1,LENGTH+III) = WATO1(IXYZ1,III) + SIZE
            WATO1(IXYZ2,LENGTH+III) = WATO1(IXYZ2,III)
            WATO1(IXYZ3,LENGTH+III) = WATO1(IXYZ3,III)
            WATH2(IXYZ1,LENGTH+III) = WATH2(IXYZ1,III) + SIZE
            WATH2(IXYZ2,LENGTH+III) = WATH2(IXYZ2,III)
            WATH2(IXYZ3,LENGTH+III) = WATH2(IXYZ3,III)
            WATH3(IXYZ1,LENGTH+III) = WATH3(IXYZ1,III) + SIZE
            WATH3(IXYZ2,LENGTH+III) = WATH3(IXYZ2,III)
            WATH3(IXYZ3,LENGTH+III) = WATH3(IXYZ3,III)
         ENDDO
      ENDDO
C
C     -- ADD IONS BEFORE WATER --
C        (1) ADD NA+ OR K+ TO DNA/RNA, IF REQUESTED.
C        (2) ADD OTHER IONS
C
      MADDNA1= 0
      MADDK1 = 0
      IF(JADDNA1.EQ.1 .OR. JADDK1.EQ.1) THEN
      DO IFFAT = 1, NFFAT
         IF(ATMNAM(IFFAT  ).EQ.'P         '.AND.
     *      ATMNAM(IFFAT+1).EQ.'O         '.AND.
     *      ATMNAM(IFFAT+2).EQ.'O         ') THEN
            DIS1 = (CORD(1,IFFAT)-CORD(1,IFFAT+1))**2 +
     *             (CORD(2,IFFAT)-CORD(2,IFFAT+1))**2 +
     *             (CORD(3,IFFAT)-CORD(3,IFFAT+1))**2
            DIS2 = (CORD(1,IFFAT)-CORD(1,IFFAT+2))**2 +
     *             (CORD(2,IFFAT)-CORD(2,IFFAT+2))**2 +
     *             (CORD(3,IFFAT)-CORD(3,IFFAT+2))**2
            IF(DIS1.LT.11.6D+00 .AND. DIS2.LT.11.6D+00) THEN
               XXX = CORD(1,IFFAT) 
     *             + ((CORD(1,IFFAT+1)+CORD(1,IFFAT+2))*PT5
     *                -CORD(1,IFFAT))*FOUR
               YYY = CORD(2,IFFAT) 
     *             + ((CORD(2,IFFAT+1)+CORD(2,IFFAT+2))*PT5
     *                -CORD(2,IFFAT))*FOUR
               ZZZ = CORD(3,IFFAT) 
     *             + ((CORD(3,IFFAT+1)+CORD(3,IFFAT+2))*PT5
     *                -CORD(3,IFFAT))*FOUR
               IF(JADDNA1.EQ.1) THEN
               MADDNA1         = MADDNA1 + 1
               NFFAT           = NFFAT + 1
               CORD(1,NFFAT)   = XXX
               CORD(2,NFFAT)   = YYY
               CORD(3,NFFAT)   = ZZZ
               ZANF  (NFFAT)   = 11.0D+00
               ATMNAM(NFFAT)   = 'NA'
               IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A5,I1,A2)')
     *                        ' $NA1',NFFTYP/10000,'  '
               IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A5,I2,A1)')
     *                        ' $NA1',NFFTYP/10000,' '
               CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *                     CHARG,POL,SIG,EPS,
     *                     SIG2,EPS2,
     *                     CLPR,ZLPR,NLPR,NFFAT)
               ELSE IF(JADDK1.EQ.1) THEN
               MADDK1          = MADDK1 + 1
               NFFAT           = NFFAT + 1
               CORD(1,NFFAT)   = XXX
               CORD(2,NFFAT)   = YYY
               CORD(3,NFFAT)   = ZZZ
               ZANF  (NFFAT)   = 19.0D+00
               ATMNAM(NFFAT)   = 'K'
               IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A4,I1,A3)')
     *                        ' $K1',NFFTYP/10000,'   '
               IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A4,I2,A2)')
     *                        ' $K1',NFFTYP/10000,'  '
               CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *                     CHARG,POL,SIG,EPS,
     *                     SIG2,EPS2,
     *                     CLPR,ZLPR,NLPR,NFFAT)
               END IF
            END IF
         END IF
      ENDDO
      JADDNA1 = MADDNA1
      JADDK1  = MADDK1
      END IF
C
      NADDNA1= 0
      NADDK1 = 0
      NADDMG2= 0
      NADDCA2= 0
      NADDCL1= 0
C
 100  CONTINUE
      IF(IADDNA1.EQ.0) GOTO 101
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = TWO*SPHRAD*(XXX-PT5)
      YYY   = TWO*SPHRAD*(YYY-PT5)
      ZZZ   = TWO*SPHRAD*(ZZZ-PT5)
C     - IONS BEYOND THE SPHRAD-RWAT LIMIT IS EXCLUDED
      RR = XXX**2 + YYY**2 + ZZZ**2
      R  = SQRT(RR)
      IF(R.GT.(SPHRAD-2.936D+00)) GOTO 100
      XXX   = CENTX + XXX
      YYY   = CENTY + YYY
      ZZZ   = CENTZ + ZZZ
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 100
      ENDDO
      NADDNA1         = NADDNA1 + 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 11.0D+00
      ATMNAM(NFFAT)   = 'NA'
      IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A5,I1,A2)')
     *                     ' $NA1',NFFTYP/10000,'  '
      IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A5,I2,A1)')
     *                     ' $NA1',NFFTYP/10000,' '
      CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDNA1.LT.IADDNA1) GOTO 100
C
 101  CONTINUE
      IF(IADDCL1.EQ.0) GOTO 102
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = TWO*SPHRAD*(XXX-PT5)
      YYY   = TWO*SPHRAD*(YYY-PT5)
      ZZZ   = TWO*SPHRAD*(ZZZ-PT5)
C     - IONS BEYOND THE SPHRAD-RWAT LIMIT IS EXCLUDED
      RR = XXX**2 + YYY**2 + ZZZ**2
      R  = SQRT(RR)
      IF(R.GT.(SPHRAD-2.936D+00)) GOTO 101
      XXX   = CENTX + XXX
      YYY   = CENTY + YYY
      ZZZ   = CENTZ + ZZZ
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 101
      ENDDO
      NADDCL1         = NADDCL1 + 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 17.0D+00
      ATMNAM(NFFAT)   = 'CL'
      IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A5,I1,A2)')
     *                     ' $CL1',NFFTYP/10000,'  '
      IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A5,I2,A1)')
     *                     ' $CL1',NFFTYP/10000,' '
      CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDCL1.LT.IADDCL1) GOTO 101
C
 102  CONTINUE
      IF(IADDK1.EQ.0) GOTO 103
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = TWO*SPHRAD*(XXX-PT5)
      YYY   = TWO*SPHRAD*(YYY-PT5)
      ZZZ   = TWO*SPHRAD*(ZZZ-PT5)
C     - IONS BEYOND THE SPHRAD-RWAT LIMIT IS EXCLUDED
      RR = XXX**2 + YYY**2 + ZZZ**2
      R  = SQRT(RR)
      IF(R.GT.(SPHRAD-2.936D+00)) GOTO 102
      XXX   = CENTX + XXX
      YYY   = CENTY + YYY
      ZZZ   = CENTZ + ZZZ
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 102
      ENDDO
      NADDK1          = NADDK1 + 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 19.0D+00
      ATMNAM(NFFAT)   = 'K'
      IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A4,I1,A3)')
     *                     ' $K1',NFFTYP/10000,'   '
      IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A4,I2,A2)')
     *                     ' $K1',NFFTYP/10000,'  '
      CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDK1.LT.IADDK1) GOTO 102
C
 103  CONTINUE
      IF(IADDCA2.EQ.0) GOTO 104
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = TWO*SPHRAD*(XXX-PT5)
      YYY   = TWO*SPHRAD*(YYY-PT5)
      ZZZ   = TWO*SPHRAD*(ZZZ-PT5)
C     - IONS BEYOND THE SPHRAD-RWAT LIMIT IS EXCLUDED
      RR = XXX**2 + YYY**2 + ZZZ**2
      R  = SQRT(RR)   
      IF(R.GT.(SPHRAD-2.936D+00)) GOTO 103
      XXX   = CENTX + XXX
      YYY   = CENTY + YYY
      ZZZ   = CENTZ + ZZZ
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX*ONEXBOX)
         PBCY  = YBOX*ANINT(CY*ONEYBOX)
         PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 103
      ENDDO
      NADDCA2         = NADDCA2+ 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 20.0D+00
      ATMNAM(NFFAT)   = 'CA'
      IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A5,I1,A2)')
     *                     ' $CA2',NFFTYP/10000,'  '
      IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A5,I2,A1)')
     *                     ' $CA2',NFFTYP/10000,' '
      CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDCA2.LT.IADDCA2) GOTO 103
C
 104  CONTINUE
      IF(IADDMG2.EQ.0) GOTO 105
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = TWO*SPHRAD*(XXX-PT5)
      YYY   = TWO*SPHRAD*(YYY-PT5)
      ZZZ   = TWO*SPHRAD*(ZZZ-PT5)
C     - IONS BEYOND THE SPHRAD-RWAT LIMIT IS EXCLUDED
      RR = XXX**2 + YYY**2 + ZZZ**2
      R  = SQRT(RR)   
      IF(R.GT.(SPHRAD-2.936D+00)) GOTO 104
      XXX   = CENTX + XXX
      YYY   = CENTY + YYY
      ZZZ   = CENTZ + ZZZ
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX*ONEXBOX)
         PBCY  = YBOX*ANINT(CY*ONEYBOX)
         PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 104
      ENDDO
      NADDMG2         = NADDMG2+ 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 12.0D+00
      ATMNAM(NFFAT)   = 'MG'
      IF(NFFTYP/10000.LE.9)WRITE(RNAME,'(A5,I1,A2)')
     *                     ' $MG2',NFFTYP/10000,'  '
      IF(NFFTYP/10000.GT.9)WRITE(RNAME,'(A5,I2,A1)')
     *                     ' $MG2',NFFTYP/10000,' '
      CALL RDIONS(RNAME,ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDMG2.LT.IADDMG2) GOTO 104
C
 105  CONTINUE
C
C     -- MUST UPDATE NFFAT0
      NFFAT0 = NFFAT
C
C     -- CHECK EACH WATER MOLECULE --
C
      LPTS = ITYPWAT/100
      NWATER = 0
      DO 200 IWAT = 1, KKKWAT
         O1(1) = WATO1(1,IWAT) + XMIN
         O1(2) = WATO1(2,IWAT) + YMIN
         O1(3) = WATO1(3,IWAT) + ZMIN
         H2(1) = WATH2(1,IWAT) + XMIN
         H2(2) = WATH2(2,IWAT) + YMIN
         H2(3) = WATH2(3,IWAT) + ZMIN
         H3(1) = WATH3(1,IWAT) + XMIN
         H3(2) = WATH3(2,IWAT) + YMIN
         H3(3) = WATH3(3,IWAT) + ZMIN
C        - WATER BEYOND THE LIMIT IS EXCLUDED
         IF(O1(1).GT.XMAX.OR.O1(2).GT.YMAX.OR.O1(3).GT.ZMAX)THEN
            GOTO 200
         END IF
C        - WATER BEYOND THE SPHRAD LIMIT IS EXCLUDED
         RR = (O1(1)-CENTX)**2
     *      + (O1(2)-CENTY)**2
     *      + (O1(3)-CENTZ)**2
         R  = SQRT(RR)
         IF(R.GT.SPHRAD) GOTO 200
         IF(NFFAT0.EQ.0.AND.NAT.EQ.0) THEN
            NEAR = 0
            GOTO 221
         END IF
C        - WATER TOO CLOSE TO PROTEIN ATOMS IS EXCLUDED 
C          NO PBC HERE, SO USE 'NFFAT0'.
         NEAR = 0
         DO 210 IFFAT = 1, NFFAT0
            IF(ZANF(IFFAT).GT.1.0001D+00) THEN
               CX    = O1(1) - CORD(1,IFFAT)
               CY    = O1(2) - CORD(2,IFFAT)
               CZ    = O1(3) - CORD(3,IFFAT)
               IF(ABS(CX).GT.5.68D+00) GOTO 210
               IF(ABS(CY).GT.5.68D+00) GOTO 210
               IF(ABS(CZ).GT.5.68D+00) GOTO 210
               R2    = CX*CX+CY*CY+CZ*CZ
C              -- CANNOT BE SMALLER THAN 3.0 ANGSTROM
               DUM   = 32.14D+00   !  3.0 A
               IF(R2.LT.DUM) NEAR=NEAR+1
            END IF
 210     CONTINUE
         DO 220 IAT = 1, NAT
            IF(ZAN(IAT).NE.1.0D+00) THEN
               CX    = O1(1) - C(1,IAT)
               CY    = O1(2) - C(2,IAT)
               CZ    = O1(3) - C(3,IAT)
               IF(ABS(CX).GT.5.68D+00) GOTO 220
               IF(ABS(CY).GT.5.68D+00) GOTO 220
               IF(ABS(CZ).GT.5.68D+00) GOTO 220
               R2    = CX*CX+CY*CY+CZ*CZ
C              -- CANNOT BE SMALLER THAN 3.0 ANGSTROM
               IF(R2.LT.32.14D+00) NEAR=NEAR+1
            END IF
 220     CONTINUE
 221     CONTINUE
         IF(NEAR.GT.0) GOTO 200
C        - WATER NOT CLOSE TO PROTEIN ATOMS MUST STAY
         NWATER= NWATER+ 1
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = O1(1)
         CORD(2,NFFAT) = O1(2)
         CORD(3,NFFAT) = O1(3)
         ZANF  (NFFAT) = 8.0D+00
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = H2(1)
         CORD(2,NFFAT) = H2(2)
         CORD(3,NFFAT) = H2(3)
         ZANF  (NFFAT) = 1.0D+00
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = H3(1)
         CORD(2,NFFAT) = H3(2)
         CORD(3,NFFAT) = H3(3)
         ZANF  (NFFAT) = 1.0D+00
         IF(LPTS.EQ.5) THEN
            X12   = O1(1) - H2(1)
            Y12   = O1(2) - H2(2)
            Z12   = O1(3) - H2(3)
            X13   = O1(1) - H3(1)
            Y13   = O1(2) - H3(2)
            Z13   = O1(3) - H3(3)
            X14   = Y12*Z13 - Z12*Y13
            Y14   = Z12*X13 - X12*Z13
            Z14   = X12*Y13 - Y12*X13
            R14   = SQRT(X14*X14 + Y14*Y14 + Z14*Z14)
            ONER14= 1.0D+00/R14
            X14   = X14*ONER14
            Y14   = Y14*ONER14
            Z14   = Z14*ONER14
            X1T   = X12+X13
            Y1T   = Y12+Y13
            Z1T   = Z12+Z13
            R1T   = SQRT(X1T*X1T + Y1T*Y1T + Z1T*Z1T)
            ONER1T= 1.0D+00/R1T
            X1T   = X1T*ONER1T
            Y1T   = Y1T*ONER1T
            Z1T   = Z1T*ONER1T
            NFFAT = NFFAT + 1
            CORD(1,NFFAT) = O1(1) + X14 + X1T
            CORD(2,NFFAT) = O1(2) + Y14 + Y1T
            CORD(3,NFFAT) = O1(3) + Z14 + Z1T
            ZANF  (NFFAT) = 1.0D+00
            NFFAT = NFFAT + 1
            CORD(1,NFFAT) = O1(1) - X14 + X1T
            CORD(2,NFFAT) = O1(2) - Y14 + Y1T
            CORD(3,NFFAT) = O1(3) - Z14 + Z1T
            ZANF  (NFFAT) = 1.0D+00
         END IF
 200  CONTINUE
C
      IF(NFFAT.GT.MXFFAT-10) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: TOO MANY NFFAT ATOMS IN ADDSPHWAT. INCREASE MXFFAT'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      LPTS = ITYPWAT/100
      IF(LPTS.EQ.3) LREAL = 2
      IF(LPTS.EQ.5) LREAL = 4
      IF(LPTS.EQ.3) LBON = 3
      IF(LPTS.EQ.5) LBON = 9
      IF(LPTS.EQ.3) LANG = 1
      IF(LPTS.EQ.5) LANG = 6
      IF(LPTS.EQ.3) L123 = 3
      IF(LPTS.EQ.5) L123 =10
C
      DO IFFAT = NFFAT0+1, NFFAT-LPTS+1, LPTS
         IF(IFFAT.EQ.NFFAT0+1) THEN
            CALL RDHOH(ATMNAM,ZMAS,ONEMAS,CHARG,POL,SIG,EPS,
     *                 SIG2,EPS2,BOND0,FCBOND,
     *                 ANGL0,FCANGL,IPAIR,KLIST,
     *                 CLPR,ZLPR,NLPR,NFFAT0+1,L1213J,ITYPWAT,
     *                 LSTRAT,DSTRAT)
         ELSE
            DO KK = 0, LPTS-1
               ATMNAM(IFFAT+KK) = ATMNAM(IFFAT+KK-LPTS)
               ZMAS  (IFFAT+KK) = ZMAS(IFFAT+KK-LPTS)
               ONEMAS(IFFAT+KK) = ONEMAS(IFFAT+KK-LPTS)
               CHARG (IFFAT+KK) = CHARG(IFFAT+KK-LPTS)
               POL   (IFFAT+KK) = POL(IFFAT+KK-LPTS)
               SIG   (IFFAT+KK) = SIG(IFFAT+KK-LPTS)
               EPS   (IFFAT+KK) = EPS(IFFAT+KK-LPTS)
               SIG2  (IFFAT+KK) = SIG2(IFFAT+KK-LPTS)
               EPS2  (IFFAT+KK) = EPS2(IFFAT+KK-LPTS)
               CLPR(1,IFFAT+KK) = CLPR(1,IFFAT+KK-LPTS)
               ZLPR(1,IFFAT+KK) = ZLPR(1,IFFAT+KK-LPTS)
               CLPR(2,IFFAT+KK) = CLPR(2,IFFAT+KK-LPTS)
               ZLPR(2,IFFAT+KK) = ZLPR(2,IFFAT+KK-LPTS)
               CLPR(3,IFFAT+KK) = CLPR(3,IFFAT+KK-LPTS)
               ZLPR(3,IFFAT+KK) = ZLPR(3,IFFAT+KK-LPTS)
               CLPR(4,IFFAT+KK) = CLPR(4,IFFAT+KK-LPTS)
               ZLPR(4,IFFAT+KK) = ZLPR(4,IFFAT+KK-LPTS)
               NLPR  (IFFAT+KK) = 2
            ENDDO
C
            DO KK=1, LBON
               NBOND = NBOND + 1
               IPAIR(1,NBOND)  = IPAIR(1,NBOND-LBON)+LPTS
               IPAIR(2,NBOND)  = IPAIR(2,NBOND-LBON)+LPTS
               FCBOND (NBOND)  = FCBOND (NBOND-LBON)
               BOND0  (NBOND)  = BOND0  (NBOND-LBON)
               IF((IRATTLE.GT.0.AND.KK.LE.LREAL)  .OR.
     *           ((IRATTLE.EQ.10.OR.IRATTLE.EQ.20).AND.
     *             KK.GT.LREAL))THEN
                  NRATTLE = NRATTLE + 1
                  LSTRAT(1,NRATTLE)=IPAIR(1,NBOND)
                  LSTRAT(2,NRATTLE)=IPAIR(2,NBOND)
                  DSTRAT(NRATTLE)  =BOND0(NBOND)*BOND0(NBOND)
               END IF
            ENDDO
C
            DO KK=1, LANG
               NANGL = NANGL + 1
               KLIST(1,NANGL)  = KLIST(1,NANGL-LANG)+LPTS
               KLIST(2,NANGL)  = KLIST(2,NANGL-LANG)+LPTS
               KLIST(3,NANGL)  = KLIST(3,NANGL-LANG)+LPTS
               FCANGL (NANGL)  = FCANGL (NANGL-LANG)
               ANGL0  (NANGL)  = ANGL0  (NANGL-LANG)
            ENDDO
C
            DO KK=1, L123
               N1213J = N1213J + 1
               L1213J(1,N1213J) = L1213J(1,N1213J-L123)+LPTS
               L1213J(2,N1213J) = L1213J(2,N1213J-L123)+LPTS
            ENDDO
         END IF
      ENDDO
      IF(NBOND.GT.MXBOND) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: TOO MANY BONDS IN ADDSPHWAT. INCREASE MXBOND'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      IF(NANGL.GT.MXANGL) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: TOO MANY ANGLES IN ADDSPHWAT. INCREASE MXANGL'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK RDIONS
      SUBROUTINE RDIONS(RNAME,ZMAS,ONEMAS,
     *                  CHARG,POL,SIG,EPS,
     *                  SIG2,EPS2,
     *                  CLPR,ZLPR,NLPR,IFFAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
C
      CHARACTER*8 RNAME
      CHARACTER*10 WORD,FFNAME
      CHARACTER*256 QPFILE
C
      DIMENSION ZMAS(*),ONEMAS(*),CHARG(*),POL(*),
     *          SIG(*),EPS(*),
     *          SIG2(*),EPS2(*),
     *          CLPR(4,*),ZLPR(4,*),NLPR(*)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, MAY 2011, LINCOLN
C
C     -- READ IN IONS PARAMETERS FROM WATERIONS.LIB --
C
      IF(MASWRK) THEN
         CALL GENQPFILE('WATERIONS.LIB ',QPFILE,LENQP)
         OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
      END IF
      IEOF=0
      CALL SEQREW(12)
      CALL FNDGRP(12,RNAME,IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: ',RNAME,' NOT IN WATERIONS.LIB'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      CALL OPNCRD(12,-IW)
C
  100 CONTINUE
      CALL RDCARD('WATERION',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING WATERIONS.LIB'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      WORD ='          '
      KSIZE = -10
      CALL GSTRNG(WORD,KSIZE)
C
      IF(WORD.EQ.'COORDINATE'.OR.
     *   WORD.EQ.'BOND      '.OR.
     *   WORD.EQ.'ANGLE     '.OR.
     *   WORD.EQ.'DIHROT    '.OR.
     *   WORD.EQ.'DIHBND    '.OR.
     *   WORD.EQ.'WAGGING   ') THEN
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'PARAMETERS') THEN
         IERR = 0
         IEOF = 0
         CALL RDCARD('RDPARAMT',IEOF)
         FFNAME = '          '
         LGSTR=-10
         CALL GSTRNG(FFNAME,LGSTR)
         ZMAS(IFFAT)  = RFIND('FFMASS  ',IERR)*1822.88850204D+00
         ONEMAS(IFFAT)= 1.0D+00/ZMAS(IFFAT)
         CHARG(IFFAT) = RFIND('FFCHARGE',IERR)
         POL(IFFAT)   = RFIND('FFPOL   ',IERR)*TOBOHR**3
         SIG(IFFAT)   = RFIND('FFSIGMA ',IERR)*TOBOHR
         EPS(IFFAT)   = RFIND('FFEPSILN',IERR)*TOHART
         SIG2(IFFAT)  = RFIND('FFSIGMA ',IERR)*TOBOHR
         EPS2(IFFAT)  = RFIND('FFEPSILN',IERR)*TOHART
C        - WATERIONS.LIB USES RMIN/2 INSTAED OF SIGMA
         SIG(IFFAT)  = SIG(IFFAT) *1.781797436280679D+00
         SIG2(IFFAT) = SIG2(IFFAT)*1.781797436280679D+00
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'QMMMREP   ') THEN
         IERR = 0
         IEOF = 0
         CALL RDCARD('RDQMMMPDB',IEOF)
         FFNAME = '          '
         LGSTR=-10
         CALL GSTRNG(FFNAME,LGSTR)
         NTERMS = IFIND('NTERM   ',IERR)
         DO II = 1, NTERMS
            CLPR(II,IFFAT) = RFIND('CLPR    ',IERR)
            ZLPR(II,IFFAT) = RFIND('ZLPR    ',IERR)
         ENDDO
         NLPR(IFFAT) = 2
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'$END      ') THEN
         IF(MASWRK) CLOSE(12)      
         RETURN
      END IF
C
      END
C*MODULE QUANPO  *DECK RDHOH
!>                    
!> @brief    read water parameters
!>   
!> @author   Hui Li   
!>           - May 2011
!>   
!> @details  read water parameters from WATERIONS.LIB
!>
      SUBROUTINE RDHOH(ATMNAM,ZMAS,ONEMAS,CHARG,POL,SIG,EPS,
     *                 SIG2,EPS2,BOND0,FCBOND,ANGL0,FCANGL,
     *                 IPAIR,KLIST,CLPR,ZLPR,NLPR,IFFAT,
     *                 L1213J,ITYPWAT,LSTRAT,DSTRAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
C
      CHARACTER*8 RNAME
      CHARACTER*10 WORD,ATMNAM,FFNAME,HEAD
      CHARACTER*256 QPFILE
C
      DIMENSION ATMNAM(*),ZMAS(*),ONEMAS(*),CHARG(*),POL(*),
     *          SIG(*),EPS(*),SIG2(*),EPS2(*),BOND0(*),FCBOND(*),
     *          ANGL0(*),FCANGL(*),IPAIR(2,*),KLIST(3,*),CLPR(4,*),
     *          ZLPR(4,*),NLPR(*),L1213J(2,*),LSTRAT(2,*),DSTRAT(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, MAY 2011, LINCOLN
C
C     -- READ IN WATER PARAMETERS FROM WATERIONS.LIB --
C
      WRITE(RNAME,'(A5,I3)') ' $HOH', ITYPWAT
      IF(MASWRK) THEN
         CALL GENQPFILE('WATERIONS.LIB ',QPFILE,LENQP)
         OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
      END IF
      IEOF=0
      CALL SEQREW(12)
      CALL FNDGRP(12,RNAME,IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: ',RNAME,' NOT IN WATERIONS.LIB'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      CALL OPNCRD(12,-IW)
C
  100 CONTINUE
      CALL RDCARD('WATERION',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING WATERIONS.LIB'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
      WORD ='          '
      KSIZE = -10
      CALL GSTRNG(WORD,KSIZE)
C
      IF(WORD.EQ.'COORDINATE'.OR.
     *   WORD.EQ.'DIHROT    '.OR.
     *   WORD.EQ.'DIHBND    '.OR.
     *   WORD.EQ.'WAGGING   ') THEN
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'PARAMETERS') THEN
         IERR = 0
         IEOF = 0
         DO K=0,ITYPWAT/100-1
            CALL RDCARD('RDPARAMT',IEOF)
            FFNAME = '          '
            LGSTR=-10
            CALL GSTRNG(FFNAME,LGSTR)
            ATMNAM(IFFAT+K) = FFNAME
            ZMAS(IFFAT+K)  = RFIND('FFMASS  ',IERR)*1822.88850204D+00
            ONEMAS(IFFAT+K)= 1.0D+00/ZMAS(IFFAT+K)
            CHARG(IFFAT+K) = RFIND('FFCHARGE',IERR)
            POL(IFFAT+K)   = RFIND('FFPOL   ',IERR)*TOBOHR**3
            SIG(IFFAT+K)   = RFIND('FFSIGMA ',IERR)*TOBOHR
            EPS(IFFAT+K)   = RFIND('FFEPSILN',IERR)*TOHART
            SIG2(IFFAT+K)  = RFIND('FFSIGMA ',IERR)*TOBOHR
            EPS2(IFFAT+K)  = RFIND('FFEPSILN',IERR)*TOHART
C           - WATERIONS.LIB USES RMIN/2 INSTAED OF SIGMA
            SIG(IFFAT+K)  = SIG(IFFAT+K) *1.781797436280679D+00
            SIG2(IFFAT+K) = SIG2(IFFAT+K)*1.781797436280679D+00
         ENDDO
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'QMMMREP   ') THEN
         IERR = 0
         IEOF = 0
         DO K=0,ITYPWAT/100-1
            CALL RDCARD('RDQMMMPDB',IEOF)
            FFNAME = '          '
            LGSTR=-10
            CALL GSTRNG(FFNAME,LGSTR)
            NTERMS = IFIND('NTERM   ',IERR)
            DO II = 1, NTERMS
               CLPR(II,IFFAT+K) = RFIND('CLPR    ',IERR)
               ZLPR(II,IFFAT+K) = RFIND('ZLPR    ',IERR)
            ENDDO
            NLPR(IFFAT+K) = 2
         ENDDO
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'BOND      ') THEN
         IERR = 0
         IEOF = 0
C        - REAL BONDS FOR ENERGY -
         IF(ITYPWAT/100.EQ.3) NREAL = 2
         IF(ITYPWAT/100.EQ.5) NREAL = 4
         DO K=1,NREAL
            CALL RDCARD('RDBOND  ',IEOF)
            HEAD='          '
            LGSTR=-10  
            CALL GSTRNG(HEAD,LGSTR)
            NBOND = NBOND + 1
            IPAIR(1,NBOND) = IFIND('IPAIR  ',IERR) + IFFAT - 1
            IPAIR(2,NBOND) = IFIND('IPAIR  ',IERR) + IFFAT - 1
            FCBOND(NBOND)  = RFIND('FCBOND  ',IERR)*TOANGS**2*TOHART
            BOND0(NBOND)   = RFIND('R0      ',IERR)*TOBOHR
            N1213J = N1213J + 1
            L1213J(1,N1213J) = IPAIR(1,NBOND)
            L1213J(2,N1213J) = IPAIR(2,NBOND)
            IF(IRATTLE.GT.0) THEN
               NRATTLE = NRATTLE + 1
               LSTRAT(1,NRATTLE)=IPAIR(1,NBOND)
               LSTRAT(2,NRATTLE)=IPAIR(2,NBOND)
               DSTRAT(NRATTLE)  =BOND0(NBOND)*BOND0(NBOND)
            END IF
         ENDDO
C        - FAKE BONDS FOR CONSTRAINT -
         IF(ITYPWAT/100.EQ.3) NFAKE = 1
         IF(ITYPWAT/100.EQ.5) NFAKE = 5
         DO K=1,NFAKE
            CALL RDCARD('RDBOND  ',IEOF)
            HEAD='          '
            LGSTR=-10
            CALL GSTRNG(HEAD,LGSTR)
            NBOND = NBOND + 1
            IPAIR(1,NBOND) = IFIND('IPAIR  ',IERR) + IFFAT - 1
            IPAIR(2,NBOND) = IFIND('IPAIR  ',IERR) + IFFAT - 1
            FCBOND(NBOND)  = RFIND('FCBOND  ',IERR)*TOANGS**2*TOHART
            BOND0(NBOND)   = RFIND('R0      ',IERR)*TOBOHR
            IF(IRATTLE.EQ.10.OR.IRATTLE.EQ.20) THEN
               NRATTLE = NRATTLE + 1
               LSTRAT(1,NRATTLE)=IPAIR(1,NBOND)
               LSTRAT(2,NRATTLE)=IPAIR(2,NBOND)
               DSTRAT(NRATTLE)  =BOND0(NBOND)*BOND0(NBOND)
            END IF
         ENDDO
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'ANGLE     ') THEN
         IERR = 0
         IEOF = 0
         IF(ITYPWAT/100.EQ.3) NANG = 1
         IF(ITYPWAT/100.EQ.5) NANG = 6
         DO K=1,NANG
            CALL RDCARD('RDANGL  ',IEOF)
            HEAD='          '
            LGSTR=-10
            CALL GSTRNG(HEAD,LGSTR)
            NANGL = NANGL + 1
            KLIST(1,NANGL) = IFIND('KLIST1  ',IERR) + IFFAT - 1
            KLIST(2,NANGL) = IFIND('KLIST2  ',IERR) + IFFAT - 1
            KLIST(3,NANGL) = IFIND('KLIST3  ',IERR) + IFFAT - 1
            FCANGL(NANGL)  = RFIND('FCANGL  ',IERR)*TOHART
            ANGL0(NANGL)   = RFIND('ANGL0   ',IERR)*TORAD
            N1213J = N1213J + 1
            L1213J(1,N1213J) = KLIST(1,NANGL)
            L1213J(2,N1213J) = KLIST(3,NANGL)
         ENDDO
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'$END      ') THEN
         IF(MASWRK) CLOSE(12)      
         RETURN
      END IF
C
      END
C*MODULE QUANPO  *DECK FFBOND
      SUBROUTINE FFBOND(KFFAT,IPAIR,ZANF,CORD,KBOND)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION RCOV(86),ZANF(*),CORD(3,*)
C
      PARAMETER (TOANGS=0.52917724924D+00)
C
      DIMENSION IPAIR(2,*)
C
C      COVALENT RADII FROM J.EMSLEY, "THE ELEMENTS", 2ND EDITION, 1991
C      EXCEPT VAN DER WAALS RADII FOR HE,NE,AR,KR (SAME SOURCE),
C      AND GUESSES FOR NA,V,CR,RB,TC,PM,EU,YB,AT,RN
C
      DATA (RCOV(NUCZ),NUCZ=1,2)/0.30D+00,1.22D+00/
      DATA (RCOV(NUCZ),NUCZ=3,10)
     *  /1.23D+00,0.89D+00,0.88D+00,0.77D+00,
     *   0.70D+00,0.66D+00,0.58D+00,1.60D+00/
      DATA (RCOV(NUCZ),NUCZ=11,18)
     *  /1.66D+00,1.36D+00,1.25D+00,1.09D+00,
     *   1.10D+00,1.04D+00,1.02D+00,1.91D+00/
      DATA (RCOV(NUCZ),NUCZ=19,36)
     *  /2.03D+00,1.74D+00,
     *   1.44D+00,1.32D+00,1.22D+00,1.19D+00,1.17D+00,
     *   1.165D+00,1.16D+00,1.15D+00,1.17D+00,1.25D+00,
     *   1.25D+00,1.22D+00,1.21D+00,1.17D+00,1.14D+00,1.98D+00/
      DATA (RCOV(NUCZ),NUCZ=37,54)
     *  /2.22D+00,1.92D+00,
     *   1.62D+00,1.45D+00,1.34D+00,1.29D+00,1.27D+00,
     *   1.24D+00,1.25D+00,1.28D+00,1.34D+00,1.41D+00,
     *   1.50D+00,1.40D+00,1.41D+00,1.37D+00,1.33D+00,2.09D+00/
      DATA (RCOV(NUCZ),NUCZ=55,86)
     *  /2.35D+00,1.98D+00,
     *   1.69D+00,1.65D+00,1.65D+00,1.64D+00,1.65D+00,1.66D+00,1.65D+00,
     *   1.61D+00,1.59D+00,1.59D+00,1.58D+00,1.57D+00,1.56D+00,1.56D+00,
     *   1.56D+00,1.44D+00,1.34D+00,1.30D+00,1.28D+00,
     *   1.26D+00,1.26D+00,1.29D+00,1.34D+00,1.44D+00,
     *   1.55D+00,1.54D+00,1.52D+00,1.53D+00,1.50D+00,2.20D+00/
C
C     ADAPTED BY NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
      KBOND=0
      DO 130 I=1,KFFAT
         INUCZ = INT(ZANF(I)) 
         RADI = 1.6D+00
         IF(INUCZ.EQ.1)                 RADI =         RCOV(1)
         IF(INUCZ.GT.1.AND.INUCZ.LE.86) RADI = 1.2D+00*RCOV(INUCZ)
         DO 120 J=I+1,KFFAT
            JNUCZ = INT(ZANF(J))
            RADJ = 1.6D+00
            IF(JNUCZ.EQ.1)                 RADJ =         RCOV(1)
            IF(JNUCZ.GT.1.AND.JNUCZ.LE.86) RADJ = 1.2D+00*RCOV(JNUCZ)
            DIST = SQRT((CORD(1,I)*TOANGS-CORD(1,J)*TOANGS)**2
     *                + (CORD(2,I)*TOANGS-CORD(2,J)*TOANGS)**2
     *                + (CORD(3,I)*TOANGS-CORD(3,J)*TOANGS)**2) 
            BOND = RADI + RADJ
            IF(DIST.LE.BOND) THEN
               KBOND = KBOND + 1
               IPAIR(1,KBOND) = I
               IPAIR(2,KBOND) = J
            END IF
  120    CONTINUE
  130 CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFANGL
      SUBROUTINE FFANGL(IPAIR,KBOND,KLIST,KANGL)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INTEGER P1,P2,P3,P4
C
      DIMENSION IPAIR(2,*),KLIST(3,*)
C
C     HUI LI, MAR 2011, LINCOLN
C
C     ---- GET ANGLE LIST ----
C
      KANGL=0
      DO IBOND = 1, KBOND
         P1 = IPAIR(1,IBOND)
         P2 = IPAIR(2,IBOND)
         DO JBOND = IBOND+1, KBOND
            P3 = IPAIR(1,JBOND)
            P4 = IPAIR(2,JBOND)
            IF(P3.EQ.P2) THEN
               KANGL = KANGL + 1
               KLIST(1,KANGL) = MIN(P1,P4)
               KLIST(2,KANGL) = P2
               KLIST(3,KANGL) = MAX(P1,P4)
            END IF
         ENDDO
      ENDDO
      DO IBOND = 1, KBOND
         P1 = IPAIR(1,IBOND)
         P2 = IPAIR(2,IBOND)
         DO JBOND = IBOND+1, KBOND
            P3 = IPAIR(1,JBOND)
            P4 = IPAIR(2,JBOND)
            IF(P3.EQ.P1) THEN
               KANGL = KANGL + 1
               KLIST(1,KANGL) = MIN(P2,P4)
               KLIST(2,KANGL) = P1
               KLIST(3,KANGL) = MAX(P2,P4)
            END IF
         ENDDO
      ENDDO
      DO IBOND = 1, KBOND
         P1 = IPAIR(1,IBOND)
         P2 = IPAIR(2,IBOND)
         DO JBOND = IBOND+1, KBOND
            P3 = IPAIR(1,JBOND)
            P4 = IPAIR(2,JBOND)
            IF(P2.EQ.P4) THEN
               KANGL = KANGL + 1
               KLIST(1,KANGL) = MIN(P1,P3)
               KLIST(2,KANGL) = P2
               KLIST(3,KANGL) = MAX(P1,P3)
            END IF
         ENDDO
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFDIHR
      SUBROUTINE FFDIHR(KLIST,KANGL,LLIST,KDIHR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION KLIST(3,*),LLIST(4,*)
C
C     HUI LI, APR 2011, LINCOLN
C
C     ---- GET DIHEDRAL ROTATION ANGLE LIST ----
C          USE ONLY THE ANGLE LIST
C
      KDIHR=0
      DO I=1, KANGL
         DO J=I+1,KANGL
            IF(KLIST(2,I).EQ.KLIST(1,J).AND.
     *         KLIST(3,I).EQ.KLIST(2,J).AND.
     *         KLIST(1,I).LT.KLIST(3,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(1,I)
                  LLIST(2,KDIHR)=KLIST(2,I)
                  LLIST(3,KDIHR)=KLIST(3,I)
                  LLIST(4,KDIHR)=KLIST(3,J)
            END IF
            IF(KLIST(2,I).EQ.KLIST(1,J).AND.
     *         KLIST(3,I).EQ.KLIST(2,J).AND.
     *         KLIST(1,I).GT.KLIST(3,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(3,J)
                  LLIST(2,KDIHR)=KLIST(3,I)
                  LLIST(3,KDIHR)=KLIST(2,I)
                  LLIST(4,KDIHR)=KLIST(1,I)
            END IF
            IF(KLIST(2,I).EQ.KLIST(3,J).AND.
     *         KLIST(3,I).EQ.KLIST(2,J).AND.
     *         KLIST(1,I).LT.KLIST(1,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(1,I)
                  LLIST(2,KDIHR)=KLIST(2,I)
                  LLIST(3,KDIHR)=KLIST(3,I)
                  LLIST(4,KDIHR)=KLIST(1,J)
            END IF
            IF(KLIST(2,I).EQ.KLIST(3,J).AND.
     *         KLIST(3,I).EQ.KLIST(2,J).AND.
     *         KLIST(1,I).GT.KLIST(1,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(1,J)
                  LLIST(2,KDIHR)=KLIST(3,I)
                  LLIST(3,KDIHR)=KLIST(2,I)
                  LLIST(4,KDIHR)=KLIST(1,I)
            END IF
            IF(KLIST(1,I).EQ.KLIST(2,J).AND.
     *         KLIST(2,I).EQ.KLIST(1,J).AND.
     *         KLIST(3,I).LT.KLIST(3,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(3,I)
                  LLIST(2,KDIHR)=KLIST(2,I)
                  LLIST(3,KDIHR)=KLIST(1,I)
                  LLIST(4,KDIHR)=KLIST(3,J)
            END IF
            IF(KLIST(1,I).EQ.KLIST(2,J).AND.
     *         KLIST(2,I).EQ.KLIST(1,J).AND.
     *         KLIST(3,I).GT.KLIST(3,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(3,J)
                  LLIST(2,KDIHR)=KLIST(1,I)
                  LLIST(3,KDIHR)=KLIST(2,I)
                  LLIST(4,KDIHR)=KLIST(3,I)
            END IF
            IF(KLIST(1,I).EQ.KLIST(2,J).AND.
     *         KLIST(2,I).EQ.KLIST(3,J).AND.
     *         KLIST(3,I).LT.KLIST(1,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(3,I)
                  LLIST(2,KDIHR)=KLIST(2,I)
                  LLIST(3,KDIHR)=KLIST(1,I)
                  LLIST(4,KDIHR)=KLIST(1,J)
            END IF
            IF(KLIST(1,I).EQ.KLIST(2,J).AND.
     *         KLIST(2,I).EQ.KLIST(3,J).AND.
     *         KLIST(3,I).GT.KLIST(1,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(1,J)
                  LLIST(2,KDIHR)=KLIST(1,I)
                  LLIST(3,KDIHR)=KLIST(2,I)
                  LLIST(4,KDIHR)=KLIST(3,I)
            END IF
         ENDDO
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFDIHB
!>
!> @brief    determine dihedral bending cases
!>    
!> @author   Hui Li   
!>           - Mar 2011
!>    
!> @details  check all possible cases but save those
!>           close to 0 or 180 degree
!>
      SUBROUTINE FFDIHB(CORD,IPAIR,KLIST,NLIST,AAA)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
      PARAMETER (PT5=0.5D+00, ONE=1.0D+00)
C
      INTEGER P1, P2, P3, P4
C
      DIMENSION CORD(3,*),IPAIR(2,*),KLIST(3,*),NLIST(4,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
C
C     HUI LI, MAR 2011, LINCOLN
C
C     ---- GET DIHEDRAL BENDING ANGLE LIST ----
C          ONLY THOSE CLOSE TO 0.0 OR 180.0 DEGREE
C          WILL BE SAVED.
C
      COSAAA = COS(AAA*TORAD)
C
      NDIHB=0
      DO I=1, NANGL
         DO J=1,NBOND
            IF((KLIST(2,I).EQ.IPAIR(1,J)).AND.
     *         (KLIST(1,I).NE.IPAIR(2,J)).AND.
     *         (KLIST(3,I).NE.IPAIR(2,J)))THEN
                  P1=KLIST(2,I)
                  P2=KLIST(1,I)
                  P3=KLIST(3,I)
                  P4=IPAIR(2,J)
                  GOTO 100
            END IF
            IF((KLIST(2,I).EQ.IPAIR(2,J)).AND.
     *         (KLIST(1,I).NE.IPAIR(1,J)).AND.
     *         (KLIST(3,I).NE.IPAIR(1,J)))THEN
                  P1=KLIST(2,I)
                  P2=KLIST(1,I)
                  P3=KLIST(3,I)
                  P4=IPAIR(1,J)
                  GOTO 100
            END IF
            GOTO 200
C
 100        CONTINUE
            X12=CORD(1,P1)-CORD(1,P2)
            Y12=CORD(2,P1)-CORD(2,P2)
            Z12=CORD(3,P1)-CORD(3,P2)
            X13=CORD(1,P1)-CORD(1,P3)
            Y13=CORD(2,P1)-CORD(2,P3)
            Z13=CORD(3,P1)-CORD(3,P3)
            X14=CORD(1,P1)-CORD(1,P4)
            Y14=CORD(2,P1)-CORD(2,P4)
            Z14=CORD(3,P1)-CORD(3,P4)
            X23=CORD(1,P2)-CORD(1,P3)
            Y23=CORD(2,P2)-CORD(2,P3)
            Z23=CORD(3,P2)-CORD(3,P3)
            X34=CORD(1,P3)-CORD(1,P4)
            Y34=CORD(2,P3)-CORD(2,P4)
            Z34=CORD(3,P3)-CORD(3,P4)
            X24=CORD(1,P2)-CORD(1,P4)
            Y24=CORD(2,P2)-CORD(2,P4)
            Z24=CORD(3,P2)-CORD(3,P4)
C
            R14=SQRT(X14*X14+Y14*Y14+Z14*Z14)
            R13=SQRT(X13*X13+Y13*Y13+Z13*Z13)
            R12=SQRT(X12*X12+Y12*Y12+Z12*Z12)
            R23=SQRT(X23*X23+Y23*Y23+Z23*Z23)
            R34=SQRT(X34*X34+Y34*Y34+Z34*Z34)
            R24=SQRT(X24*X24+Y24*Y24+Z24*Z24)
C
C           HERE WE CHECK THE THREE ANGLES: 213, 214, 314
C
            ONEBC  =ONE/(R12*R13)
            COSA   =(R12*R12 + R13*R13 - R23*R23)*ONEBC*PT5
            IF(COSA.GT. ONE) COSA = ONE
            IF(COSA.LT.-ONE) COSA =-ONE
            ALPHA213 =ACOS(COSA)
            ONEBC  =ONE/(R12*R14)
            COSA   =(R12*R12 + R14*R14 - R24*R24)*ONEBC*PT5
            IF(COSA.GT. ONE) COSA = ONE
            IF(COSA.LT.-ONE) COSA =-ONE
            ALPHA214 =ACOS(COSA)
            ONEBC  =ONE/(R13*R14)
            COSA   =(R13*R13 + R14*R14 - R34*R34)*ONEBC*PT5
            IF(COSA.GT. ONE) COSA = ONE
            IF(COSA.LT.-ONE) COSA =-ONE
            ALPHA314 =ACOS(COSA)
            IF(ALPHA213*DEGREE.GE.160.0D+00) GOTO 200
            IF(ALPHA214*DEGREE.GE.160.0D+00) GOTO 200
            IF(ALPHA314*DEGREE.GE.160.0D+00) GOTO 200
C
            COS123=(-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
            COS234=(-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
            SIN2123= 1.0D+00-COS123*COS123
            SIN2234= 1.0D+00-COS234*COS234
            SIN123 = SQRT(ABS(SIN2123))
            SIN234 = SQRT(ABS(SIN2234))
            IF(ABS(SIN123).LT.1.0D-06) GOTO 200
            IF(ABS(SIN234).LT.1.0D-06) GOTO 200
            ONESIN = 1.0D+00/(SIN123*SIN234)
C
            COSTOR = ONESIN*(COS123*COS234-
     *               ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
            IF(ABS(COSTOR).GT.COSAAA) THEN   !   5 OR 30 DEGREE
               NDIHB=NDIHB+1
               NLIST(1,NDIHB)=P1
               NLIST(2,NDIHB)=P2
               NLIST(3,NDIHB)=P3
               NLIST(4,NDIHB)=P4
            END IF
 200        CONTINUE
         ENDDO
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFWAGG
!>
!> @brief    MMFF94 wagging terms
!>    
!> @author   Hongbo Zhu and Hui Li
!>           - Oct 2012
!>    
!> @details  determine wagging terms for MMFF
!>
      SUBROUTINE FFWAGG(MLIST,NFFAT,NBOND,NWAGG,IPAIR,CORD)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      INTEGER P1, P2, P3, P4
      PARAMETER (PI=3.14159265358979323846264338D+00)
C
      DIMENSION MLIST(4,*),IPAIR(2,*),CORD(3,*)
C
      COMMON /FFMAX / MXFFAT,MXBOND,MXANGL,MXDIHR,MXDIHB,MXCMAP,
     *                MXWAGG
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HONGBO ZHU, HUI LI, OCT 29, 2012, LINCOLN
C
C     -- ATOM 4 IS THE CENTRAL (LINKING) ATOM
C
      CALL VICLR(MLIST,1,4*MXWAGG)
      IWAGG=0
      DO IFFAT=1,NFFAT
         P4 = IFFAT
         LCOUNT1=0
         DO IBOND=1,NBOND
            J1=IPAIR(1,IBOND)
            J2=IPAIR(2,IBOND)
            IF(IFFAT.EQ.J1.OR.IFFAT.EQ.J2) THEN
               LCOUNT1=LCOUNT1+1
               IF(LCOUNT1.EQ.1) THEN
                  P1 = J1+J2-IFFAT
               END IF
               IF(LCOUNT1.EQ.2) THEN
                  P2 = J1+J2-IFFAT
               END IF
               IF(LCOUNT1.EQ.3) THEN
                  P3 = J1+J2-IFFAT
               END IF
            END IF
         ENDDO
         IF(LCOUNT1.EQ.3)THEN
            X41    = CORD(1,P4)-CORD(1,P1)
            Y41    = CORD(2,P4)-CORD(2,P1)
            Z41    = CORD(3,P4)-CORD(3,P1)
            X42    = CORD(1,P4)-CORD(1,P2)
            Y42    = CORD(2,P4)-CORD(2,P2)
            Z42    = CORD(3,P4)-CORD(3,P2)
            X43    = CORD(1,P4)-CORD(1,P3)
            Y43    = CORD(2,P4)-CORD(2,P3)
            Z43    = CORD(3,P4)-CORD(3,P3)
            X23    = CORD(1,P2)-CORD(1,P3)
            Y23    = CORD(2,P2)-CORD(2,P3)
            Z23    = CORD(3,P2)-CORD(3,P3)
C
            R41SQ  = X41*X41 + Y41*Y41 + Z41*Z41
            R41    = SQRT(R41SQ)
            ONER41 = 1.0D+00/R41
            R42SQ  = X42*X42 +Y42*Y42 + Z42*Z42
            R42    = SQRT(R42SQ)
            R43SQ  = X43*X43 + Y43*Y43 + Z43*Z43
            R43    = SQRT(R43SQ)
            R23SQ  = X23*X23 + Y23*Y23 + Z23*Z23
            R23    = SQRT(R23SQ)
            P4243X = Y42*Z43 - Z42*Y43
            P4243Y = Z42*X43 - X42*Z43
            P4243Z = X42*Y43 - Y42*X43
C
C           --- ANGLE 243 CAN BE 90 TO 120 ---
            COS243 = (R42*R42 + R43*R43 - R23*R23)/(2.0D+00*R42*R43)
            SIN243 = SQRT(ABS(1.0D+00 - COS243*COS243))
            DUM    = 1.0D+00/(SIN243*R42*R43)
            AX     = P4243X*DUM
            AY     = P4243Y*DUM
            AZ     = P4243Z*DUM
C           --- WWW IS LIKELY -90 TO +90 ---
            SINW   = -(AX*X41 + AY*Y41 + AZ*Z41)*ONER41
            WWW    = ASIN(SINW)
            AL     = PI/2.0D+00
            IF(ABS(WWW).LT.AL)THEN
               IWAGG=IWAGG+1
               MLIST(1,IWAGG) = P1
               MLIST(2,IWAGG) = P2
               MLIST(3,IWAGG) = P3
               MLIST(4,IWAGG) = P4
               IWAGG=IWAGG+1
               MLIST(1,IWAGG) = P2
               MLIST(2,IWAGG) = P3
               MLIST(3,IWAGG) = P1
               MLIST(4,IWAGG) = P4
               IWAGG=IWAGG+1
               MLIST(1,IWAGG) = P3
               MLIST(2,IWAGG) = P1
               MLIST(3,IWAGG) = P2
               MLIST(4,IWAGG) = P4
            END IF
         END IF
      ENDDO
      NWAGG=IWAGG
      IF(NWAGG.GT.MXWAGG) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: TOO MANY NWAGG. INCREASE MXWAGG.'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK NONBOND
!>
!> @brief    cell-list
!>
!> @author   Hui Li
!>           - Mar 2011
!>
!> @details  use the fast-list method
!>
      SUBROUTINE NONBOND(ISTEP,CORD,CORDSV,CORDSV2,CORDSVQ,
     *                   NONLS1,NONLS2,
     *                   NONLSTQ,LSTCELL,
     *                   MVFASTS2,MVFASTS3,MVFASTS4,
     *                   MVFASTL2,MVFASTL3,MVFASTL4,
     *                   NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                   NONLSPMA,NONLSPMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR, DSKWRK, MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (PT5=0.50D+00, HUGE=1.0D+30*TOBOHR)
C
      DIMENSION CORD(3,*),CORDSV(3,*),NONLS1(2,*),NONLS2(2,*),
     *          NONLSTQ(*),
     *          LSTCELL(*),CORDSV2(3,*),CORDSVQ(3,*)
      DIMENSION MVFASTS2(*),MVFASTS3(*),MVFASTS4(*),
     *          MVFASTS5(300),MVFASTS6(100),MVFASTS7(100),
     *          MVFASTL2(*),MVFASTL3(*),MVFASTL4(*),
     *          MVFASTL5(300),MVFASTL6(100),MVFASTL7(100)
      DIMENSION NFASTS(8),NFASTL(8)
      DIMENSION NONLSA(2,*),NONLSB(2,*),KFREEA(*),KFREEB(*),
     *          LISTB2A(*),NONLSPMA(2,*),NONLSPMB(2,*)
C
      COMMON /FFFAST/ KLARGE(6),KSMALL(6),KQMMM(6)
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFFRE2/ N1FFAT,N1BOND,N1ANGL,N1DIHR,N1DIHB,N1CMAP,N1WAGG,
     *                N2FFAT,N2BOND,N2ANGL,N2DIHR,N2DIHB,N2CMAP,N2WAGG,
     *                LFF2ATMNAM,LFF2CORD,LFF2ZANF,LFF2ZMAS,
     *                LFF2ONEMAS,LFF2CHARG,LFF2POL,
     *                LFF2SIG,LFF2EPS,LFF2SIG2,LFF2EPS2,
     *                LFF2BOND0,LFF2FCBOND,LFF2ANGL0,LFF2FCANGL,
     *                LFF2FCWAGG,LFF2DIHB0,LFF2FCDIHB,
     *                LFF2VROT,LFF2NNN,LFF2GAMA,LFF2IPAIR,
     *                LFF2KLIST,LFF2LLIST,LFF2MLIST,LFF2NLIST,
     *                LFF2VEL,LFF2QMVEL,LFF2CLPR,LFF2ZLPR,
     *                LFF2NLPR,LFF2MAPLST,LFFKFREEA,LFFKFREEB,
     *                LFFLISTB2A,NTODOA,LFFNONLSA,NTODOB,LFFNONLSB,
     *                N1213A,LFFL1213A,N1213B,LFFL1213B,
     *                N14A,LFFL14A,N14B,LFFL14B,
     *                NTODOPMA,LFFNONLSPMA,NBONDPMA,LFFLSBONDPMA,
     *                NANGLPMA,LFFLSANGLPMA,NDIHRPMA,LFFLSDIHRPMA,
     *                NDIHBPMA,LFFLSDIHBPMA,NWAGGPMA,LFFLSWAGGPMA,
     *                NCMAPPMA,LFFLSCMAPPMA,
     *                N1213PMA,LFFL1213PMA,
     *                N14PMA,LFFL14PMA,
     *                NTODOPMB,LFFNONLSPMB,NBONDPMB,LFFLSBONDPMB,
     *                NANGLPMB,LFFLSANGLPMB,NDIHRPMB,LFFLSDIHRPMB,
     *                NDIHBPMB,LFFLSDIHBPMB,NWAGGPMB,LFFLSWAGGPMB,
     *                NCMAPPMB,LFFLSCMAPPMB,
     *                N1213PMB,LFFL1213PMB,
     *                N14PMB,LFFL14PMB
      COMMON /FFMAX / MXFFAT,MXBOND,MXANGL,MXDIHR,MXDIHB,MXCMAP,
     *                MXWAGG
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, MAR 2011, LINCOLN
C     HUI LI AND FENGCHAO CUI, OCT 2011, LINCOLN, 
C     ADD CELL-LIST AND FAST-LIST METHODS, AND LARGE-TO-SMALL SCHEME
C
C     -- DO NOT UPDATE NEIGHBOR LISTS IF SPHSOL OR FIXSOL IS USED --
C
      IF(ISTEP.EQ.0) THEN
         CALL VICLR(KLARGE,1,6)
         CALL VICLR(KSMALL,1,6)
         CALL VICLR(KQMMM,1,6)
      END IF
      IF(ISTEP.GT.0 .AND. (ISTEP.LT.100.AND.IADDWAT.EQ.2)) RETURN
      IF(ISTEP.GT.0 .AND. (ISPHSOL.GT.0.OR. IFIXSOL.GT.0)) RETURN
C
C     -- SOMETIMES IT IS SAFE TO SKIP CHECKING THE SMALL AND QMMM LISTS
      IF((ISTEP-KSMALL(5)).LT.KSMALL(6) .AND. NAT.LE.0) RETURN
      IF((ISTEP-KSMALL(5)).LT.KSMALL(6) .AND. NAT.GT.0) THEN
         IF((ISTEP-KQMMM(5)).LT.KQMMM(6)) THEN
            RETURN
         ELSE
            GOTO 299
         END IF
      END IF
C
      NTODO   = NTODOSV      ! NTODOSV  IS DIFFERENT AT DIFFERENT CPUS
      TSMALL2 = (0.20D+00*BUFWID1)**2
      TSMALL3 = (0.30D+00*BUFWID1)**2
      TSMALL4 = (0.40D+00*BUFWID1)**2
      TSMALL5 = (0.50D+00*BUFWID1)**2
      TSMALL6 = (0.60D+00*BUFWID1)**2
      TSMALL7 = (0.70D+00*BUFWID1)**2
      TSMALL8 = (0.80D+00*BUFWID1)**2
      RSMALL  = SWRB + BUFWID1
      R2SMAL  = RSMALL**2
C
      NTODO2  = NTODO2SV     ! NTODO2SV IS DIFFERENT AT DIFFERENT CPUS
      TLARGE2 = (0.20D+00*(BUFWID2-BUFWID1))**2
      TLARGE3 = (0.30D+00*(BUFWID2-BUFWID1))**2
      TLARGE4 = (0.40D+00*(BUFWID2-BUFWID1))**2
      TLARGE5 = (0.50D+00*(BUFWID2-BUFWID1))**2
      TLARGE6 = (0.60D+00*(BUFWID2-BUFWID1))**2
      TLARGE7 = (0.70D+00*(BUFWID2-BUFWID1))**2
      TLARGE8 = (0.80D+00*(BUFWID2-BUFWID1))**2
      RLARGE  = SWRB + BUFWID2
      R2LARG  = RLARGE**2
C
      CALL VICLR(NFASTS,1,8)
      DO IFFAT=1, NFFAT
         DX = CORD(1,IFFAT)-CORDSV(1,IFFAT)
         DY = CORD(2,IFFAT)-CORDSV(2,IFFAT)
         DZ = CORD(3,IFFAT)-CORDSV(3,IFFAT)
         DIS= DX*DX+DY*DY+DZ*DZ
         IF     (DIS.GT.TSMALL8.AND.NFASTS(8).LT.100)THEN
            NFASTS(8)           = NFASTS(8) + 1
         ELSE IF(DIS.GT.TSMALL7.AND.NFASTS(7).LT.100)THEN
            NFASTS(7)           = NFASTS(7) + 1
            MVFASTS7(NFASTS(7)) = IFFAT
         ELSE IF(DIS.GT.TSMALL6.AND.NFASTS(6).LT.100)THEN
            NFASTS(6)           = NFASTS(6) + 1
            MVFASTS6(NFASTS(6)) = IFFAT
         ELSE IF(DIS.GT.TSMALL5.AND.NFASTS(5).LT.300)THEN
            NFASTS(5)           = NFASTS(5) + 1
            MVFASTS5(NFASTS(5)) = IFFAT
         ELSE IF(DIS.GT.TSMALL4.AND.NFASTS(4).LT.(NFFAT/4 +10))THEN
            NFASTS(4)           = NFASTS(4) + 1
            MVFASTS4(NFASTS(4)) = IFFAT
         ELSE IF(DIS.GT.TSMALL3.AND.NFASTS(3).LT.(NFFAT/2 +10))THEN
            NFASTS(3)           = NFASTS(3) + 1
            MVFASTS3(NFASTS(3)) = IFFAT
         ELSE IF(DIS.GT.TSMALL2.AND.NFASTS(2).LT.(NFFAT/2 +10))THEN
            NFASTS(2)           = NFASTS(2) + 1
            MVFASTS2(NFASTS(2)) = IFFAT
         END IF
      ENDDO
      ISMALL = 0
      IF(NFASTS(2).GE.(NFFAT/2 +10).OR.
     *   NFASTS(3).GE.(NFFAT/2 +10).OR.
     *   NFASTS(4).GE.(NFFAT/4 +10).OR.
     *   NFASTS(5).GE.MXCHECK.OR.
     *   NFASTS(6).GE.100.OR.
     *   NFASTS(7).GE.100.OR.
     *   NFASTS(8).GE.1) THEN
         ISMALL = 1
      ELSE IF((NFASTS(5)+NFASTS(6)+NFASTS(7)).EQ.0)THEN
         ISMALL = 0
      ELSE
         DO IBIN=5,7
         DO IFAST=1,NFASTS(IBIN)
            IF(IBIN.EQ.5) I=MVFASTS5(IFAST)
            IF(IBIN.EQ.6) I=MVFASTS6(IFAST)
            IF(IBIN.EQ.7) I=MVFASTS7(IFAST)
            XISV=CORDSV(1,I)
            YISV=CORDSV(2,I)
            ZISV=CORDSV(3,I)
            XI  =CORD(1,I)
            YI  =CORD(2,I)
            ZI  =CORD(3,I)
            DO 51 JBIN=2,7
               IF(JBIN.EQ.2.AND.IBIN.LT.7) GOTO 51
               IF(JBIN.EQ.3.AND.IBIN.LT.6) GOTO 51
               IF(JBIN.EQ.5.AND.IBIN.GT.5) GOTO 51
               IF(JBIN.EQ.6.AND.IBIN.GT.6) GOTO 51
               DO 52 JFAST=1,NFASTS(JBIN)
               IF(JBIN.EQ.2) J=MVFASTS2(JFAST)
               IF(JBIN.EQ.3) J=MVFASTS3(JFAST)
               IF(JBIN.EQ.4) J=MVFASTS4(JFAST)
               IF(JBIN.EQ.5) J=MVFASTS5(JFAST)
               IF(JBIN.EQ.6) J=MVFASTS6(JFAST)
               IF(JBIN.EQ.7) J=MVFASTS7(JFAST)
               IF(IBIN.EQ.JBIN .AND. J.LE.I) GOTO 52
               XJSV=CORDSV(1,J)
               YJSV=CORDSV(2,J)
               ZJSV=CORDSV(3,J)
               XJ  =CORD(1,J)
               YJ  =CORD(2,J)
               ZJ  =CORD(3,J)
               DX  =XI-XJ
               DY  =YI-YJ
               DZ  =ZI-ZJ
               PBCX=XBOX*ANINT(DX*ONEXBOX)
               PBCY=YBOX*ANINT(DY*ONEYBOX)
               PBCZ=ZBOX*ANINT(DZ*ONEZBOX)
               DX  =DX - PBCX
               DY  =DY - PBCY
               DZ  =DZ - PBCZ
               IF(ABS(DX).GT.SWRB) GOTO 52
               IF(ABS(DY).GT.SWRB) GOTO 52
               IF(ABS(DZ).GT.SWRB) GOTO 52
               DIS=DX*DX+DY*DY+DZ*DZ
               IF(DIS.LE.SWRB2) THEN
                  DX  =XISV-XJSV
                  DY  =YISV-YJSV
                  DZ  =ZISV-ZJSV
                  PBCX=XBOX*ANINT(DX*ONEXBOX)
                  PBCY=YBOX*ANINT(DY*ONEYBOX)
                  PBCZ=ZBOX*ANINT(DZ*ONEZBOX)
                  DX  =DX - PBCX
                  DY  =DY - PBCY
                  DZ  =DZ - PBCZ
                  DISSV=DX*DX+DY*DY+DZ*DZ
                  IF(DISSV.GT.R2SMAL) THEN
                     IF(MASWRK) THEN
                        NTODO           = NTODO + 1
                        NONLS1(1,NTODO) = I
                        NONLS1(2,NTODO) = J
                        IF(NTODO.GE.MXLIST1-100) THEN
                           WRITE(IW,*)
     *                     'ERROR: SMALL NEIGHBOR LIST IS FULL.',
     *                     ' INCREASE MXLIST1.'
                           WRITE(IW,*)' '
                           CALL ABRT
                        END IF
                     END IF
                  END IF
               END IF
  52           CONTINUE
  51        CONTINUE
         ENDDO
         ENDDO
      END IF
C
C     -- NO NEED TO UPDATE THE LARGE LIST IF THE SMALL LIST
C        DOES NOT NEED TO UPDATE
      IF(ISMALL.EQ.0.AND.ISTEP.GT.0.AND.NAT.LE.0) RETURN
      IF(ISMALL.EQ.0.AND.ISTEP.GT.0.AND.NAT.GT.0) GOTO 299
C
      IF(ISMALL.GT.0 .AND. BUFWID2.EQ.BUFWID1) THEN
         ILARGE = 1
         CALL ICOPY(8,NFASTS,1,NFASTL,1)
         GOTO 69
      END IF
C
C     -- SOMETIMES IT IS SAFE TO SKIP CHECKING THE LARGE LIST
C        AND GO DIRECTLY TO UPDATE THE SMALL LIST --
      IF((ISTEP-KLARGE(5)).LT.KLARGE(6)) GOTO 230
C
      CALL VICLR(NFASTL,1,8)
      DO IFFAT=1, NFFAT
         DX = CORD(1,IFFAT)-CORDSV2(1,IFFAT)
         DY = CORD(2,IFFAT)-CORDSV2(2,IFFAT)
         DZ = CORD(3,IFFAT)-CORDSV2(3,IFFAT)
         DIS= DX*DX+DY*DY+DZ*DZ
         IF     (DIS.GT.TLARGE8.AND.NFASTL(8).LT.100)THEN
            NFASTL(8)           = NFASTL(8) + 1
         ELSE IF(DIS.GT.TLARGE7.AND.NFASTL(7).LT.100)THEN
            NFASTL(7)           = NFASTL(7) + 1
            MVFASTL7(NFASTL(7)) = IFFAT
         ELSE IF(DIS.GT.TLARGE6.AND.NFASTL(6).LT.100)THEN
            NFASTL(6)           = NFASTL(6) + 1
            MVFASTL6(NFASTL(6)) = IFFAT
         ELSE IF(DIS.GT.TLARGE5.AND.NFASTL(5).LT.300)THEN
            NFASTL(5)           = NFASTL(5) + 1
            MVFASTL5(NFASTL(5)) = IFFAT
         ELSE IF(DIS.GT.TLARGE4.AND.NFASTL(4).LT.(NFFAT/4 -1))THEN
            NFASTL(4)           = NFASTL(4) + 1
            MVFASTL4(NFASTL(4)) = IFFAT
         ELSE IF(DIS.GT.TLARGE3.AND.NFASTL(3).LT.(NFFAT/2 -1))THEN
            NFASTL(3)           = NFASTL(3) + 1
            MVFASTL3(NFASTL(3)) = IFFAT
         ELSE IF(DIS.GT.TLARGE2.AND.NFASTL(2).LT.(NFFAT/2 -1))THEN
            NFASTL(2)           = NFASTL(2) + 1
            MVFASTL2(NFASTL(2)) = IFFAT
         END IF
      ENDDO
      ILARGE = 0
      IF(NFASTL(2).GE.(NFFAT/2-1).OR.
     *   NFASTL(3).GE.(NFFAT/2-1).OR.
     *   NFASTL(4).GE.(NFFAT/4-1).OR.
     *   NFASTL(5).GE.MXCHECK.OR.
     *   NFASTL(6).GE.100.OR.
     *   NFASTL(7).GE.100.OR.
     *   NFASTL(8).GE.1) THEN
         ILARGE = 1
      ELSE IF((NFASTL(5)+NFASTL(6)+NFASTL(7)).EQ.0)THEN
         ILARGE = 0
      ELSE
         DO IBIN=5,7
         DO IFAST=1,NFASTL(IBIN)
            IF(IBIN.EQ.5) I=MVFASTL5(IFAST)
            IF(IBIN.EQ.6) I=MVFASTL6(IFAST)
            IF(IBIN.EQ.7) I=MVFASTL7(IFAST)
            XISV=CORDSV2(1,I)
            YISV=CORDSV2(2,I)
            ZISV=CORDSV2(3,I)
            XI  =CORD(1,I)
            YI  =CORD(2,I)
            ZI  =CORD(3,I)
            DO 61 JBIN=2,7
               IF(JBIN.EQ.2.AND.IBIN.LT.7) GOTO 61
               IF(JBIN.EQ.3.AND.IBIN.LT.6) GOTO 61
               IF(JBIN.EQ.5.AND.IBIN.GT.5) GOTO 61
               IF(JBIN.EQ.6.AND.IBIN.GT.6) GOTO 61
               DO 62 JFAST=1,NFASTL(JBIN)
               IF(JBIN.EQ.2) J=MVFASTL2(JFAST)
               IF(JBIN.EQ.3) J=MVFASTL3(JFAST)
               IF(JBIN.EQ.4) J=MVFASTL4(JFAST)
               IF(JBIN.EQ.5) J=MVFASTL5(JFAST)
               IF(JBIN.EQ.6) J=MVFASTL6(JFAST)
               IF(JBIN.EQ.7) J=MVFASTL7(JFAST)
               IF(IBIN.EQ.JBIN .AND. J.LE.I) GOTO 62
               XJSV=CORDSV2(1,J)
               YJSV=CORDSV2(2,J)
               ZJSV=CORDSV2(3,J)
               XJ  =CORD(1,J)
               YJ  =CORD(2,J)
               ZJ  =CORD(3,J)
               DX  =XI-XJ
               DY  =YI-YJ
               DZ  =ZI-ZJ
               PBCX=XBOX*ANINT(DX*ONEXBOX)
               PBCY=YBOX*ANINT(DY*ONEYBOX)
               PBCZ=ZBOX*ANINT(DZ*ONEZBOX)
               DX  =DX - PBCX
               DY  =DY - PBCY
               DZ  =DZ - PBCZ
               IF(ABS(DX).GT.RSMALL) GOTO 62
               IF(ABS(DY).GT.RSMALL) GOTO 62
               IF(ABS(DZ).GT.RSMALL) GOTO 62
               DIS=DX*DX+DY*DY+DZ*DZ
               IF(DIS.LT.R2SMAL) THEN
                  DX  =XISV-XJSV
                  DY  =YISV-YJSV
                  DZ  =ZISV-ZJSV
                  PBCX=XBOX*ANINT(DX*ONEXBOX)
                  PBCY=YBOX*ANINT(DY*ONEYBOX)
                  PBCZ=ZBOX*ANINT(DZ*ONEZBOX)
                  DX  =DX - PBCX
                  DY  =DY - PBCY
                  DZ  =DZ - PBCZ
                  DISSV=DX*DX+DY*DY+DZ*DZ
                  IF(DISSV.GT.R2LARG) THEN
                     IF(MASWRK) THEN
                        NTODO2           = NTODO2 + 1
                        NONLS2(1,NTODO2) = I
                        NONLS2(2,NTODO2) = J
                        IF(NTODO2.GE.MXLIST2-100) THEN
                           WRITE(IW,*)
     *                     'ERROR: LARGE NEIGHBOR LIST IS FULL.',
     *                     ' INCREASE MXLIST2 (OR MXFFAT).'
                           WRITE(IW,*)' '
                           CALL ABRT
                        END IF
                     END IF
                  END IF
               END IF
  62           CONTINUE
  61        CONTINUE
         ENDDO
         ENDDO
      END IF
  69  CONTINUE
C
C     -- UPDATE ONLY THE SMALL NEIGHBOR LIST --
      IF(ILARGE.EQ.0 .AND. ISTEP.GT.0) GOTO 230
C
C
C     -- UPDATE BOTH LARGE AND SMALL NEIGHBOR LISTS --
C
      IF(MASWRK.AND.ISTEP.EQ.0) WRITE(IW,*)' '
      IF(ISTEP.EQ.0) CALL TIMIT(1)
      IF(MASWRK.AND.ISTEP.EQ.0) THEN
         WRITE(IW,*)' '
         WRITE(IW,'(1X,A,I10)')
     *           'UPDATING LARGE NEIGHBOR LIST AT STEP ',ISTEP
         WRITE(IW,*)' '
      END IF
      IF(MASWRK.AND.ISTEP.LE.10000) WRITE(IP,'(1X,A,I10)')
     *           'UPDATING LARGE NEIGHBOR LIST AT STEP ',ISTEP
      KLARGE(1) = KLARGE(2)
      KLARGE(2) = KLARGE(3)
      KLARGE(3) = KLARGE(4)
      KLARGE(4) = KLARGE(5)
      KLARGE(5) = ISTEP
      KLARGE(6) = (KLARGE(5) - KLARGE(1))/4
      KLARGE(6) = KLARGE(6) - NINT(SQRT(DBLE(KLARGE(6))))
      IF(MASWRK.AND.ISTEP.GT.0.AND.ISTEP.LE.10000)THEN
         WRITE(IP,'(A,I10,6I9)')' LARGE FAST-LIST:',
     *                     (IBIN,IBIN=2,8)
         WRITE(IP,'(A,I10,6I9)')' NUMBER OF ATOMS:',
     *                     (NFASTL(IBIN),IBIN=2,8)
      END IF
      CALL DCOPY(3*NFFAT,CORD,1,CORDSV2,1)
C
C     -- CREATE A CELL LIST --
      IF(XBOX.EQ.HUGE.OR.YBOX.EQ.HUGE.OR.ZBOX.EQ.HUGE) THEN
         NCELX    = 1
         NCELY    = 1
         NCELZ    = 1
      ELSE
         NCELX    = MAX(1,INT(XBOX/RLARGE))
         NCELY    = MAX(1,INT(YBOX/RLARGE))
         NCELZ    = MAX(1,INT(ZBOX/RLARGE))
      END IF
      MXATCEL  = MIN(MXFFAT,2*MXFFAT/(NCELX*NCELY*NCELZ))
      CALL VICLR(LSTCELL,1,MXATCEL*NCELZ*NCELY*NCELX)
      DO IFFAT=1, NFFAT
         XGRP  = CORD(1,IFFAT)
         YGRP  = CORD(2,IFFAT)
         ZGRP  = CORD(3,IFFAT)
         PBCX  = XBOX * ANINT(XGRP*ONEXBOX)
         PBCY  = YBOX * ANINT(YGRP*ONEYBOX)
         PBCZ  = ZBOX * ANINT(ZGRP*ONEZBOX)
         XGRP  = XGRP - PBCX + PT5*XBOX
         YGRP  = YGRP - PBCY + PT5*YBOX
         ZGRP  = ZGRP - PBCZ + PT5*ZBOX
         IIX   = INT(NCELX*XGRP*ONEXBOX) + 1
         IIY   = INT(NCELY*YGRP*ONEYBOX) + 1
         IIZ   = INT(NCELZ*ZGRP*ONEZBOX) + 1
         INUM  = ((IIX-1)*NCELY+IIY-1)*NCELZ+IIZ
         LSTCELL(INUM*MXATCEL)=LSTCELL(INUM*MXATCEL)+1
         IKK   = LSTCELL(INUM*MXATCEL)
         LSTCELL((INUM-1)*MXATCEL+IKK) =IFFAT
      ENDDO
C
      KFULL    = 0
      NTODO2   = 0    !  NTODO2 IS DIFFERENT FOR DIFFERENT CPUS.
      IPCOUNT  = ME - 1
      DO 201 ICELX = 1, NCELX
      DO 202 ICELY = 1, NCELY
      DO 203 ICELZ = 1, NCELZ
         INUM= ((ICELX-1)*NCELY+ICELY-1)*NCELZ+ICELZ
         DO 211 JCELX = 1, NCELX
         DO 212 JCELY = 1, NCELY
         DO 213 JCELZ = 1, NCELZ
            JNUM= ((JCELX-1)*NCELY+JCELY-1)*NCELZ+JCELZ
            IF(JNUM.LT.INUM)                   GOTO 213
            IDIFX = ABS(JCELX-ICELX)
            IF(JCELX.EQ.NCELX.AND.ICELX.EQ.1) IDIFX = 1
            IF(ICELX.EQ.NCELX.AND.JCELX.EQ.1) IDIFX = 1
            IF(JCELX.EQ.ICELX               ) IDIFX = 0
            IF(IDIFX.GE.2)                     GOTO 213
            IDIFY = ABS(JCELY-ICELY)
            IF(JCELY.EQ.NCELY.AND.ICELY.EQ.1) IDIFY = 1
            IF(ICELY.EQ.NCELY.AND.JCELY.EQ.1) IDIFY = 1
            IF(JCELY.EQ.ICELY               ) IDIFY = 0
            IF(IDIFY.GE.2)                     GOTO 213
            IDIFZ = ABS(JCELZ-ICELZ)
            IF(JCELZ.EQ.NCELZ.AND.ICELZ.EQ.1) IDIFZ = 1
            IF(ICELZ.EQ.NCELZ.AND.JCELZ.EQ.1) IDIFZ = 1
            IF(JCELZ.EQ.ICELZ               ) IDIFZ = 0
            IF(IDIFZ.GE.2)                     GOTO 213
            DO 200 IKK = 1, LSTCELL(INUM*MXATCEL)
               IFFAT = LSTCELL((INUM-1)*MXATCEL+IKK)
               IF(IFFAT.EQ.0) GOTO 200
C              -- HUI LI: THE PARALLEL DISTRIBUTION MUST BE HERE
C                 TO ACHIEVE EVEN-LOADING AND SCALABILITY:
C                    N_TASK = N_ATOM * (N_CELL + 1)/2
               IF(GOPARR) THEN
                  IPCOUNT = IPCOUNT + 1
                  IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 200
               END IF
               DO 210 JKK = 1, LSTCELL(JNUM*MXATCEL)
                  JFFAT = LSTCELL((JNUM-1)*MXATCEL+JKK)
                  IF(JFFAT.EQ.0) GOTO 210
                  IF(INUM.EQ.JNUM.AND.JFFAT.LE.IFFAT) GOTO 210
                  XGRP=CORD(1,IFFAT)-CORD(1,JFFAT)
                  YGRP=CORD(2,IFFAT)-CORD(2,JFFAT)
                  ZGRP=CORD(3,IFFAT)-CORD(3,JFFAT)
                  PBCX=XBOX * ANINT(XGRP*ONEXBOX)
                  PBCY=YBOX * ANINT(YGRP*ONEYBOX)
                  PBCZ=ZBOX * ANINT(ZGRP*ONEZBOX)
                  XGRP=XGRP - PBCX
                  YGRP=YGRP - PBCY
                  ZGRP=ZGRP - PBCZ
                  IF(ABS(XGRP).GT.RLARGE) GOTO 210
                  IF(ABS(YGRP).GT.RLARGE) GOTO 210
                  IF(ABS(ZGRP).GT.RLARGE) GOTO 210
                  R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
                  IF(R2.GT.R2LARG) GOTO 210
                  NTODO2 = NTODO2 + 1
                  NONLS2(1,NTODO2) = IFFAT
                  NONLS2(2,NTODO2) = JFFAT
 210           CONTINUE
               IF(NTODO2.GT.MXLIST2-MXATCEL) THEN
                  KFULL = 1
                  GOTO 220
               END IF
 200        CONTINUE
 213     CONTINUE
 212     CONTINUE
 211     CONTINUE
 203  CONTINUE
 202  CONTINUE
 201  CONTINUE
C
 220  CONTINUE
      NTODO2SV = NTODO2
      IF(GOPARR) CALL DDI_GSUMI(2408,KFULL,1)
      IF(MASWRK.AND.KFULL.GT.0) THEN
         WRITE(IW,*)'ERROR: LARGE NEIGHBOR LIST IS FULL (MXATCEL).',
     *              ' INCREASE MXLIST2 (OR MXFFAT).'
         WRITE(IW,*)' '
         CALL ABRT
      END IF
C
 230  CONTINUE
C
C     -- UPDATE THE SMALL MM-MM NEIGHBOR LIST --
C
      IF(BUFWID2.GT.BUFWID1) THEN
         IF(ISTEP.EQ.0) CALL TIMIT(1)
         IF(MASWRK.AND.ISTEP.EQ.0) THEN
            WRITE(IW,*)' '
            WRITE(IW,'(1X,A,I10)')
     *           'UPDATING SMALL NEIGHBOR LIST AT STEP ',ISTEP
            WRITE(IW,*)' '
         END IF
         IF(MASWRK.AND.ISTEP.LE.10000) WRITE(IP,'(1X,A,I10)')
     *           'UPDATING SMALL NEIGHBOR LIST AT STEP ',ISTEP
         KSMALL(1) = KSMALL(2)
         KSMALL(2) = KSMALL(3)
         KSMALL(3) = KSMALL(4)
         KSMALL(4) = KSMALL(5)
         KSMALL(5) = ISTEP
         KSMALL(6) = (KSMALL(5) - KSMALL(1))/4
         KSMALL(6) = KSMALL(6) - NINT(SQRT(DBLE(KSMALL(6))))
         IF(MASWRK.AND.ISTEP.GT.0.AND.ISTEP.LE.10000)THEN
            WRITE(IP,'(A,I10,6I9)')' SMALL FAST-LIST:',
     *                        (IBIN,IBIN=2,8)
            WRITE(IP,'(A,I10,6I9)')' NUMBER OF ATOMS:',
     *                        (NFASTS(IBIN),IBIN=2,8)
         END IF
      END IF
      CALL DCOPY(3*NFFAT,CORD,1,CORDSV,1)
C
C     - A SPECIAL CASE IS BUFWID2 = BUFWID1 -
C       NOTE IN THIS CASE, LFFNONLS2 = LFFNONLS1
C       SO SIMPLY DEFINING NTODO=NTODO2 IS ENOUGH
      IF(BUFWID2.EQ.BUFWID1) THEN
         KFULL = 0
         NTODO = NTODO2
         GOTO 250
      END IF
C
      KFULL   = 0
      NTODO   = 0    !  NTODO IS DIFFERENT FOR DIFFERENT PROCESSOR.
      DO 240 III=1,NTODO2    !  NTODO2 IS DIFFERENT FOR DIFFERENT PROCESSOR.
         I=NONLS2(1,III)
         J=NONLS2(2,III)
         XGRP=CORD(1,I)-CORD(1,J)
         YGRP=CORD(2,I)-CORD(2,J)
         ZGRP=CORD(3,I)-CORD(3,J)
         PBCX=XBOX * ANINT(XGRP*ONEXBOX)
         PBCY=YBOX * ANINT(YGRP*ONEYBOX)
         PBCZ=ZBOX * ANINT(ZGRP*ONEZBOX)
         XGRP=XGRP - PBCX
         YGRP=YGRP - PBCY
         ZGRP=ZGRP - PBCZ
         IF(ABS(XGRP).GT.RSMALL) GOTO 240
         IF(ABS(YGRP).GT.RSMALL) GOTO 240
         IF(ABS(ZGRP).GT.RSMALL) GOTO 240
         R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
         IF(R2.GT.R2SMAL) GOTO 240
         NTODO = NTODO + 1
         NONLS1(1,NTODO) = I
         NONLS1(2,NTODO) = J
         IF(NTODO.GT.MXLIST1-NFFAT)THEN
            KFULL = 1
            GOTO 250
         END IF
 240  CONTINUE
C
 250  CONTINUE
      NTODOSV = NTODO
      IF(GOPARR) CALL DDI_GSUMI(2408,KFULL,1)
      IF(MASWRK.AND.KFULL.GT.0) THEN
         WRITE(IW,*)'ERROR: SMALL NEIGHBOR LIST IS FULL.',
     *              ' INCREASE MXLIST1.'
         WRITE(IW,*)' '
         CALL ABRT
      END IF
C
C     - IDENTIFY PAIRS ASSOCIATED WITH SOL FREE ENERGY CALCULATION -
C
      NTODOA = 0
      NTODOB = 0
      IF(IFEPTOP.GT.0) THEN
         DO I=1,NTODO
            I1    = NONLS1(1,I)
            I2    = NONLS1(2,I)
            I1YES = 0
            I2YES = 0
            DO III=1,KFREEA(501)
               IA=KFREEA(III)
               IF(I1.EQ.IA) I1YES = 1
               IF(I2.EQ.IA) I2YES = 1
            ENDDO
            IF((I1YES+I2YES).EQ.1) THEN
               NTODOA           = NTODOA + 1
               NONLSA(1,NTODOA) = (I1+I2)  - I1*I1YES - I2*I2YES
               NONLSA(2,NTODOA) =            I1*I1YES + I2*I2YES
            END IF
            IF(IFEPTOP.EQ.2) THEN
               I1YES = 0
               I2YES = 0
               DO III=1,KFREEB(501)
                  IB=KFREEB(III)
                  IA=LISTB2A(IB)
                  IF(I1.EQ.IA) I1YES = 1
                  IF(I2.EQ.IA) I2YES = 1
               ENDDO
               IF((I1YES+I2YES).EQ.1) THEN
                  NTODOB           = NTODOB + 1
                  NONLSB(1,NTODOB) = (I1+I2)  - I1*I1YES - I2*I2YES
                  NONLSB(2,NTODOB) =            I1*I1YES + I2*I2YES
               END IF
            END IF
         ENDDO
         IF(IFEPTOP.EQ.1) THEN
            NTODOB = NTODOA
            CALL ICOPY(2*NTODOB,NONLSA,1,NONLSB,1)
         END IF
      END IF
C
C     - IDENTIFY PAIRS ASSOCIATED WITH PMF FREE ENERGY CALCULATION -
C
      NTODOPMA = 0
      NTODOPMB = 0
      IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
         DO I=1,NTODO
            I1    = NONLS1(1,I)
            I2    = NONLS1(2,I)
            IYESA  = 0
            JYESA  = 0
            DO III=1,NFIXMM
               IA = IFIXMM(III)
               IF(I1.EQ.IA) IYESA = 1
               IF(I2.EQ.IA) JYESA = 1
            ENDDO
            IF(IYESA.EQ.1.AND.JYESA.EQ.1) THEN
               NTODOPMA             = NTODOPMA + 1
               NONLSPMA(1,NTODOPMA) = I1
               NONLSPMA(2,NTODOPMA) = I2
            END IF
         ENDDO
         NTODOPMB = NTODOPMA
         CALL ICOPY(2*NTODOPMA,NONLSPMA,1,NONLSPMB,1)
      END IF
C
      IF(ISTEP.EQ.0) CALL TIMIT(1)
      IF(MASWRK.AND.ISTEP.EQ.0) WRITE(IW,*)' '
C
 299  CONTINUE
C
C     -- CHECK IF A NEW QM-MM LIST IS NEEDED --
C
      IF(NAT.GT.0) THEN
      DISMAX = -1.0D+30
      DO IFFAT=1, NFFAT
         DX = CORD(1,IFFAT)-CORDSVQ(1,IFFAT)
         DY = CORD(2,IFFAT)-CORDSVQ(2,IFFAT)
         DZ = CORD(3,IFFAT)-CORDSVQ(3,IFFAT)
         DIS= DX*DX+DY*DY+DZ*DZ
         DISMAX = MAX(DISMAX,DIS)
      ENDDO
      QDX = QMCX-QMCXSV
      QDY = QMCY-QMCYSV
      QDZ = QMCZ-QMCZSV
      DIS = QDX*QDX+QDY*QDY+QDZ*QDZ
      DISMAX = MAX(DISMAX,DIS)
      IF(ISTEP.GT.0.AND.DISMAX.LT.(BUFWID2/2.0D+00)**2) GOTO 999
C
      IF(MASWRK.AND.ISTEP.EQ.0) THEN
         WRITE(IW,'(1X,A,I10)')
     *           'UPDATING QM/MM NEIGHBOR LIST AT STEP ',ISTEP
         WRITE(IW,*) ' '
      END IF
      IF(MASWRK.AND.ISTEP.LE.10000) WRITE(IP,'(1X,A,I10)')
     *           'UPDATING QM/MM NEIGHBOR LIST AT STEP ',ISTEP
      KQMMM(1) = KQMMM(2)
      KQMMM(2) = KQMMM(3)
      KQMMM(3) = KQMMM(4)
      KQMMM(4) = KQMMM(5)
      KQMMM(5) = ISTEP
      KQMMM(6) = (KQMMM(5) - KQMMM(1))/4
      KQMMM(6) = KQMMM(6) - NINT(SQRT(DBLE(KQMMM(6))))
      CALL DCOPY(3*NFFAT,CORD,1,CORDSVQ,1)
      QMCXSV = QMCX
      QMCYSV = QMCY
      QMCZSV = QMCZ
      END IF
C
C     -- GENERATE QM-MM LIST: MM ATOMS CLOSE TO QMCX,Y,Z
C        THIS IS DONE ON EVERY CPU BECAUSE
C        WE NEED THE CORRECT AND TOTAL NTODOQ EVERYWHERE.
C        PARALLEL IS AT THE QM LEVEL, NOT MM.
C
      RSMALLQ  = SWRBQ + BUFWID2
      RSMALLQ2 = RSMALLQ*RSMALLQ
C
      NTODOQ  = 0
      IF(NAT.GT.0) THEN
      DO 300 IFFAT=1, NFFAT
         XGRP  = CORD(1,IFFAT) - QMCX
         YGRP  = CORD(2,IFFAT) - QMCY
         ZGRP  = CORD(3,IFFAT) - QMCZ
         PBCX  = XBOX * ANINT(XGRP*ONEXBOX)
         PBCY  = YBOX * ANINT(YGRP*ONEYBOX)
         PBCZ  = ZBOX * ANINT(ZGRP*ONEZBOX)
         XGRP  = XGRP - PBCX
         YGRP  = YGRP - PBCY
         ZGRP  = ZGRP - PBCZ
         IF(ABS(XGRP).GT.RSMALLQ) GOTO 300
         IF(ABS(YGRP).GT.RSMALLQ) GOTO 300
         IF(ABS(ZGRP).GT.RSMALLQ) GOTO 300
         R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
         IF(R2.GT.RSMALLQ2) GOTO 300
         NTODOQ = NTODOQ + 1
         NONLSTQ(NTODOQ) = IFFAT
 300  CONTINUE
      END IF
C
 999  CONTINUE
C
      CALL FLSHBF(IW)
      RETURN
      END
C*MODULE QUANPO  *DECK E00012
!>
!> @brief    bond stretching energy
!>
!> @author   Nandun Thellamurege
!>           - Jan 2011
!>
!> @details  force field bond stretching energy
!>
      SUBROUTINE E00012(CORD,FFGRD,BOND0,FCBOND,IPAIR,CORDB,
     *                  LSBONDPMA,LSBONDPMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INTEGER P1, P2
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TWO=2.0D+00,THREE=3.0D+00)
      PARAMETER (FOUR=4.0D+00,ONE=1.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),IPAIR(2,*),BOND0(*),FCBOND(*),
     *          CORDB(3,*),LSBONDPMA(*),LSBONDPMB(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C     FENGCHAO CUI, HUI LI, MAY 2012
C     HONGBO ZHU, HUI LI, NOV 1, 2012
C
C     FORMULA:  E = K*(R-R0)**2
C               E = K*(R-R0)**2*[1+C3*(R-R0)+C4*(R-R0)**2]
C
      NERROR = 0
C
      PMF1BD = 0.0D+00
      EN12   = 0.0D+00
      DO 100 IBOND=L1BOND,L2BOND
         FCONST  = FCBOND(IBOND)
         IF(FCONST.EQ.0.0D+00) GOTO 100
         P1      = IPAIR(1,IBOND)
         P2      = IPAIR(2,IBOND)
         R0      = BOND0(IBOND)
         X       = CORD(1,P1) - CORD(1,P2)
         Y       = CORD(2,P1) - CORD(2,P2)
         Z       = CORD(3,P1) - CORD(3,P2)
         R2      = X*X + Y*Y + Z*Z
         IF(R2.LE.1.0D-10) GOTO 100
         IF(R2.GT.100.0D+00) THEN
            WRITE(*,'(1X,A/1X,A,1X,I8,1X,A,1X,I8,1X,A,1X,F10.4,1X,A/)')
     *      'ERROR: TOO LONG BOND LENGTH.',
     *      'ATOM1=',P1,'ATOM2=',P2,'R=',SQRT(R2),' BOHR.'
            NERROR = NERROR + 1
         END IF
         R       = SQRT(R2)
         DR      = R-R0
         DR2     = DR*DR
         DR3     = DR*DR2
         EN12    = EN12+FCONST*DR2*
     *             (ONE+C3BOND*DR+C4BOND*DR2)
         DUM     = FCONST*(TWO*DR+THREE*C3BOND*DR2+
     *                     FOUR*C4BOND*DR3)/R
         DEX     = DUM*X
         DEY     = DUM*Y
         DEZ     = DUM*Z
         FFGRD(1,P1)=FFGRD(1,P1) + DEX
         FFGRD(2,P1)=FFGRD(2,P1) + DEY
         FFGRD(3,P1)=FFGRD(3,P1) + DEZ
         FFGRD(1,P2)=FFGRD(1,P2) - DEX
         FFGRD(2,P2)=FFGRD(2,P2) - DEY
         FFGRD(3,P2)=FFGRD(3,P2) - DEZ
         VIR(1)     =VIR(1)      + DEX*X
         VIR(2)     =VIR(2)      + DEY*Y
         VIR(3)     =VIR(3)      + DEZ*Z
         IYES = 0
         JYES = 0
         DO KFIX=1,NFIXMM
            IF(P1.EQ.IFIXMM(KFIX)) IYES = 1
            IF(P2.EQ.IFIXMM(KFIX)) JYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.JYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX*X
            VIR(2)    =VIR(2)     - DEY*Y
            VIR(3)    =VIR(3)     - DEZ*Z
         END IF
 100  CONTINUE
C
      DO 200 III=L1BONDPMA,L2BONDPMA
         IBOND   = LSBONDPMA(III)
         FCONST  = FCBOND(IBOND)
         IF(FCONST.EQ.0.0D+00) GOTO 200
         P1      = IPAIR(1,IBOND)
         P2      = IPAIR(2,IBOND)
         R0      = BOND0(IBOND)
         X       = CORD(1,P1) - CORD(1,P2)
         Y       = CORD(2,P1) - CORD(2,P2)
         Z       = CORD(3,P1) - CORD(3,P2)
         R2      = X*X + Y*Y + Z*Z
         IF(R2.LE.1.0D-10) GOTO 200
         R       = SQRT(R2)
         DR      = R-R0
         DR2     = DR*DR
         PMF1BD  = PMF1BD - FCONST*DR2*
     *             (ONE+C3BOND*DR+C4BOND*DR2)
 200  CONTINUE
C
      DO 210 III=L1BONDPMB,L2BONDPMB
         IBOND   = LSBONDPMB(III)
         FCONST  = FCBOND(IBOND)
         IF(FCONST.EQ.0.0D+00) GOTO 210
         P1      = IPAIR(1,IBOND)
         P2      = IPAIR(2,IBOND)
         R0      = BOND0(IBOND)
         X       = CORD(1,P1) - CORD(1,P2)
         Y       = CORD(2,P1) - CORD(2,P2)
         Z       = CORD(3,P1) - CORD(3,P2)
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            DO KFIX=1,NFIXMM
               IF(P1.EQ.IFIXMM(KFIX)) THEN
                  X = X - CORD(1,P1) + CORDB(1,P1)
                  Y = Y - CORD(2,P1) + CORDB(2,P1)
                  Z = Z - CORD(3,P1) + CORDB(3,P1)
               END IF
               IF(P2.EQ.IFIXMM(KFIX)) THEN
                  X = X + CORD(1,P2) - CORDB(1,P2)
                  Y = Y + CORD(2,P2) - CORDB(2,P2)
                  Z = Z + CORD(3,P2) - CORDB(3,P2)
               END IF
            ENDDO
         END IF
         R2      = X*X + Y*Y + Z*Z
         IF(R2.LE.1.0D-10) GOTO 210
         R       = SQRT(R2)
         R       = SQRT(R2)
         DR      = R-R0
         DR2     = DR*DR
         PMF1BD  = PMF1BD + FCONST*DR2*
     *             (ONE+C3BOND*DR+C4BOND*DR2)
 210  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMI(2422,NERROR,1)
      IF(NERROR.GT.0) THEN
         IF(LOUT.EQ.-31415926535897932) CALL ABRT
         LOUT = -31415926535897932
         JOUT = 1
         KOUT = 1
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK E00123
!>    
!> @brief    angle bending energy
!>   
!> @author   Nandun Thellamurege
!>           - Jan 2011
!>   
!> @details  force field angle bending energy
!>
      SUBROUTINE E00123(CORD,FFGRD,ANGL0,FCANGL,KLIST,CORDB,
     *                  LSANGLPMA,LSANGLPMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INTEGER P1, P2, P3
C
      PARAMETER (PI=3.14159265358979323846264338D+00, PT5=0.5D+00,
     *           ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00, 
     *           THREE=3.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),KLIST(3,*),ANGL0(*),FCANGL(*),
     *          CORDB(3,*),LSANGLPMA(*),LSANGLPMB(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C     FENGCHAO CUI, HUI LI, MAY 2012
C     HONGBO ZHU, HUI LI, NOV 1, 2012
C
C     FORMULA:  E = K*[(A-A0)**2]*[1 + C3*(A-A0)]
C                 + 4.0*K*(A-A0-20)**2  (TOO LARGE POSITIVE DEVIATION)
C                 + 4.0*K*(A-A0+20)**2  (TOO LARGE NEGATIVE DEVIATION)
C     FORMULA:  E = 2*K*(1+COS(A))       (FOR A0 = 180 DEGREE)
C
      PMF1AG = ZERO
      EN123  = ZERO
      DO 100 IANGL=L1ANGL,L2ANGL
         FCONST =FCANGL(IANGL)
         IF(FCONST.EQ.ZERO) GOTO 100
         P1     =KLIST(1,IANGL)
         P2     =KLIST(2,IANGL)
         P3     =KLIST(3,IANGL)
         X13    =CORD(1,P1)-CORD(1,P3)
         Y13    =CORD(2,P1)-CORD(2,P3)
         Z13    =CORD(3,P1)-CORD(3,P3)
         X12    =CORD(1,P1)-CORD(1,P2)
         Y12    =CORD(2,P1)-CORD(2,P2)
         Z12    =CORD(3,P1)-CORD(3,P2)
         X23    =CORD(1,P2)-CORD(1,P3)
         Y23    =CORD(2,P2)-CORD(2,P3)
         Z23    =CORD(3,P2)-CORD(3,P3)
C
         R13R13 =X13*X13+Y13*Y13+Z13*Z13
         R12R12 =X12*X12+Y12*Y12+Z12*Z12
         R23R23 =X23*X23+Y23*Y23+Z23*Z23
         R12    =SQRT(R12R12)
         R23    =SQRT(R23R23)
C
         ONEBC  =ONE/(R12*R23)
         COSA   =(R12R12 + R23R23 - R13R13)*ONEBC*PT5
C
         IF(ABS(ANGL0(IANGL)-PI).GT.0.053D+00) THEN
            IF(COSA.GT. ONE) COSA = ONE
            IF(COSA.LT.-ONE) COSA =-ONE
            ALPHA  =ACOS(COSA)
            SINA   =SQRT(ABS(ONE - COSA*COSA))
            DELT   =ALPHA - ANGL0(IANGL)
            DELT2  =DELT*DELT
            EN123  =EN123 + FCONST*DELT2*(ONE+C3ANGL*DELT)
            DUMY   =-FCONST*(TWO*DELT+THREE*C3ANGL*DELT2)/SINA
         ELSE
            EN123 = EN123 + TWO*FCONST*(ONE+COSA)
            DUMY   = TWO*FCONST
         END IF
C
C        - CALCULATE BENDING ENERGY GRADIENTS
C
         DR23X2 =-X23*ONEBC
         DR23Y2 =-Y23*ONEBC
         DR23Z2 =-Z23*ONEBC
         DR12X1A=-COSA*X12/R12R12
         DR12Y1A=-COSA*Y12/R12R12
         DR12Z1A=-COSA*Z12/R12R12
C
         DR23X2A=COSA*X23/R23R23
         DR23Y2A=COSA*Y23/R23R23
         DR23Z2A=COSA*Z23/R23R23
         DR12X1 =X12*ONEBC
         DR12Y1 =Y12*ONEBC
         DR12Z1 =Z12*ONEBC
C
         DEX1   = DUMY*(DR12X1A+DR23X2)
         DEY1   = DUMY*(DR12Y1A+DR23Y2)
         DEZ1   = DUMY*(DR12Z1A+DR23Z2)
         FFGRD(1,P1)=FFGRD(1,P1) + DEX1
         FFGRD(2,P1)=FFGRD(2,P1) + DEY1
         FFGRD(3,P1)=FFGRD(3,P1) + DEZ1
C
         DEX3   = DUMY*(DR23X2A+DR12X1)
         DEY3   = DUMY*(DR23Y2A+DR12Y1)
         DEZ3   = DUMY*(DR23Z2A+DR12Z1)
         FFGRD(1,P3)=FFGRD(1,P3)+DEX3
         FFGRD(2,P3)=FFGRD(2,P3)+DEY3
         FFGRD(3,P3)=FFGRD(3,P3)+DEZ3
C
         FFGRD(1,P2)=FFGRD(1,P2)-DEX1-DEX3
         FFGRD(2,P2)=FFGRD(2,P2)-DEY1-DEY3
         FFGRD(3,P2)=FFGRD(3,P2)-DEZ1-DEZ3
C
         VIR(1)     =VIR(1)  + DEX1*X12 - DEX3*X23
         VIR(2)     =VIR(2)  + DEY1*Y12 - DEY3*Y23
         VIR(3)     =VIR(3)  + DEZ1*Z12 - DEZ3*Z23
         IYES = 0
         JYES = 0
         KYES = 0
         DO KFIX=1,NFIXMM
            IF(P1.EQ.IFIXMM(KFIX)) IYES = 1
            IF(P2.EQ.IFIXMM(KFIX)) JYES = 1
            IF(P3.EQ.IFIXMM(KFIX)) KYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.JYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX1*X12
            VIR(2)    =VIR(2)     - DEY1*Y12
            VIR(3)    =VIR(3)     - DEZ1*Z12
         END IF
         IF(JYES.EQ.1.AND.KYES.EQ.1) THEN
            VIR(1)    =VIR(1)     + DEX3*X23
            VIR(2)    =VIR(2)     + DEY3*Y23
            VIR(3)    =VIR(3)     + DEZ3*Z23
         END IF
 100  CONTINUE
C
      DO 200 III=L1ANGLPMA,L2ANGLPMA
         IANGL  =LSANGLPMA(III)
         FCONST =FCANGL(IANGL)
         IF(FCONST.EQ.ZERO) GOTO 200
         P1     =KLIST(1,IANGL)
         P2     =KLIST(2,IANGL)
         P3     =KLIST(3,IANGL)
         X13    =CORD(1,P1)-CORD(1,P3)
         Y13    =CORD(2,P1)-CORD(2,P3)
         Z13    =CORD(3,P1)-CORD(3,P3)
         X12    =CORD(1,P1)-CORD(1,P2)
         Y12    =CORD(2,P1)-CORD(2,P2)
         Z12    =CORD(3,P1)-CORD(3,P2)
         X23    =CORD(1,P2)-CORD(1,P3)
         Y23    =CORD(2,P2)-CORD(2,P3)
         Z23    =CORD(3,P2)-CORD(3,P3)
C
         R13R13 =X13*X13+Y13*Y13+Z13*Z13
         R12R12 =X12*X12+Y12*Y12+Z12*Z12
         R23R23 =X23*X23+Y23*Y23+Z23*Z23
         R12    =SQRT(R12R12)
         R23    =SQRT(R23R23)
C
         ONEBC  =ONE/(R12*R23)
         COSA   =(R12R12 + R23R23 - R13R13)*ONEBC*PT5
C
         IF(ABS(ANGL0(IANGL)-PI).GT.0.053D+00) THEN
            IF(COSA.GT. ONE) COSA = ONE
            IF(COSA.LT.-ONE) COSA =-ONE
            ALPHA  =ACOS(COSA)
            DELT   =ALPHA - ANGL0(IANGL)
            DELT2  =DELT*DELT
            PMF1AG =PMF1AG - FCONST*DELT2*(ONE+C3ANGL*DELT)
         ELSE
            PMF1AG = PMF1AG - TWO*FCONST*(ONE+COSA)
         END IF
 200  CONTINUE
C
      DO 210 III=L1ANGLPMB,L2ANGLPMB
         IANGL  =LSANGLPMB(III)
         FCONST =FCANGL(IANGL)
         IF(FCONST.EQ.ZERO) GOTO 210
         P1     =KLIST(1,IANGL)
         P2     =KLIST(2,IANGL)
         P3     =KLIST(3,IANGL)
         X13    =CORD(1,P1)-CORD(1,P3)
         Y13    =CORD(2,P1)-CORD(2,P3)
         Z13    =CORD(3,P1)-CORD(3,P3)
         X12    =CORD(1,P1)-CORD(1,P2)
         Y12    =CORD(2,P1)-CORD(2,P2)
         Z12    =CORD(3,P1)-CORD(3,P2)
         X23    =CORD(1,P2)-CORD(1,P3)
         Y23    =CORD(2,P2)-CORD(2,P3)
         Z23    =CORD(3,P2)-CORD(3,P3)
C
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            DO KFIX=1,NFIXMM
               IF(P1.EQ.IFIXMM(KFIX)) THEN
                  X13 = X13 - CORD(1,P1) + CORDB(1,P1)
                  Y13 = Y13 - CORD(2,P1) + CORDB(2,P1)
                  Z13 = Z13 - CORD(3,P1) + CORDB(3,P1)
                  X12 = X12 - CORD(1,P1) + CORDB(1,P1)
                  Y12 = Y12 - CORD(2,P1) + CORDB(2,P1)
                  Z12 = Z12 - CORD(3,P1) + CORDB(3,P1)
               END IF
               IF(P2.EQ.IFIXMM(KFIX)) THEN
                  X12 = X12 + CORD(1,P2) - CORDB(1,P2)
                  Y12 = Y12 + CORD(2,P2) - CORDB(2,P2)
                  Z12 = Z12 + CORD(3,P2) - CORDB(3,P2)
                  X23 = X23 - CORD(1,P2) + CORDB(1,P2)
                  Y23 = Y23 - CORD(2,P2) + CORDB(2,P2)
                  Z23 = Z23 - CORD(3,P2) + CORDB(3,P2)
               END IF
               IF(P3.EQ.IFIXMM(KFIX)) THEN
                  X13 = X13 + CORD(1,P3) - CORDB(1,P3)
                  Y13 = Y13 + CORD(2,P3) - CORDB(2,P3)
                  Z13 = Z13 + CORD(3,P3) - CORDB(3,P3)
                  X23 = X23 + CORD(1,P3) - CORDB(1,P3)
                  Y23 = Y23 + CORD(2,P3) - CORDB(2,P3)
                  Z23 = Z23 + CORD(3,P3) - CORDB(3,P3)
               END IF
            ENDDO
         END IF
C
         R13R13 =X13*X13+Y13*Y13+Z13*Z13
         R12R12 =X12*X12+Y12*Y12+Z12*Z12
         R23R23 =X23*X23+Y23*Y23+Z23*Z23
         R12    =SQRT(R12R12)
         R23    =SQRT(R23R23)
C
         ONEBC  =ONE/(R12*R23)
         COSA   =(R12R12 + R23R23 - R13R13)*ONEBC*PT5
C
         IF(ABS(ANGL0(IANGL)-PI).GT.0.053D+00) THEN
            IF(COSA.GT. ONE) COSA = ONE
            IF(COSA.LT.-ONE) COSA =-ONE
            ALPHA  =ACOS(COSA)
            DELT   =ALPHA - ANGL0(IANGL)
            PMF1AG =PMF1AG + FCONST*DELT2*(ONE+C3ANGL*DELT)
         ELSE
            PMF1AG = PMF1AG + TWO*FCONST*(ONE+COSA)
         END IF
 210  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK E12312
!>
!> @brief    MMFF94 bond-angle energy
!>
!> @author   Hongbo Zhu
!>           - Nov 2012
!>
!> @details  force field bond-angle coupled term
!>
      SUBROUTINE E12312(CORD,FFGRD,ANGL0,KLIST,BOND0,FCSTBD,
     *                  KBLST,CORDB,LSANGLPMA,LSANGLPMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (PT5=0.5D+00, ZERO=0.0D+00, ONE=1.0D+00)
C
      DIMENSION CORD(3,*),KLIST(3,*),FCSTBD(2,*),ANGL0(*),
     *          BOND0(*),FFGRD(3,*),KBLST(2,*),CORDB(3,*),
     *          LSANGLPMA(*),LSANGLPMB(*)
C
      INTEGER P1, P2, P3
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
C
C     HONGBO ZHU, HUI LI, NOV 5, 2012, LINCOLN
C
      EN12312=ZERO
C
      IF(NFFTYP/10000.NE.5) RETURN
C
      DO 100 IANGL=L1ANGL,L2ANGL
         IF(FCSTBD(1,IANGL).EQ.ZERO.AND.FCSTBD(2,IANGL).EQ.ZERO)
     *   GOTO 100
         A0     =ANGL0(IANGL)
         P1     =KLIST(1,IANGL)
         P2     =KLIST(2,IANGL)
         P3     =KLIST(3,IANGL)
         X13    =CORD(1,P1)-CORD(1,P3)
         Y13    =CORD(2,P1)-CORD(2,P3)
         Z13    =CORD(3,P1)-CORD(3,P3)
         X12    =CORD(1,P1)-CORD(1,P2)
         Y12    =CORD(2,P1)-CORD(2,P2)
         Z12    =CORD(3,P1)-CORD(3,P2)
         X23    =CORD(1,P2)-CORD(1,P3)
         Y23    =CORD(2,P2)-CORD(2,P3)
         Z23    =CORD(3,P2)-CORD(3,P3)
C
         R13R13 =X13*X13+Y13*Y13+Z13*Z13
         R12R12 =X12*X12+Y12*Y12+Z12*Z12
         R23R23 =X23*X23+Y23*Y23+Z23*Z23
         R12    =SQRT(R12R12)
         R23    =SQRT(R23R23)
C
         ONEBC  =ONE/(R12*R23)
         COSA   =(R12R12 + R23R23 - R13R13)*ONEBC*PT5
         IF(COSA.GT. ONE) COSA = ONE
         IF(COSA.LT.-ONE) COSA =-ONE
C
         ALPHA  =ACOS(COSA)
         SINA   =SQRT(ABS(ONE - COSA*COSA))
         DELT   =ALPHA - A0
         IBOND  =KBLST(1,IANGL)
         JBOND  =KBLST(2,IANGL)
         R0IJ   =BOND0(IBOND)
         DRIJ   =R12-R0IJ
         R0JK   =BOND0(JBOND)
         DRJK   =R23-R0JK
         CCC1   =FCSTBD(1,IANGL)*DRIJ+FCSTBD(2,IANGL)*DRJK
         EN12312=EN12312+CCC1*DELT
         DUMY1  =DELT*FCSTBD(1,IANGL)/R12
         DUMY2  =-CCC1/SINA
         DUMY3  =DELT*FCSTBD(2,IANGL)/R23
C
C        - CALCULATE BENDING ENERGY GRADIENTS
C
         DR23X2 =-X23*ONEBC
         DR23Y2 =-Y23*ONEBC
         DR23Z2 =-Z23*ONEBC
         DR12X1A=-COSA*X12/R12R12
         DR12Y1A=-COSA*Y12/R12R12
         DR12Z1A=-COSA*Z12/R12R12
C
         DR23X2A=COSA*X23/R23R23
         DR23Y2A=COSA*Y23/R23R23
         DR23Z2A=COSA*Z23/R23R23
         DR12X1 =X12*ONEBC
         DR12Y1 =Y12*ONEBC
         DR12Z1 =Z12*ONEBC
C
         DEX1   = DUMY1*X12
         DEY1   = DUMY1*Y12
         DEZ1   = DUMY1*Z12
         FFGRD(1,P1)=FFGRD(1,P1) + DEX1
         FFGRD(2,P1)=FFGRD(2,P1) + DEY1
         FFGRD(3,P1)=FFGRD(3,P1) + DEZ1
         DEX3   = DUMY3*X23
         DEY3   = DUMY3*Y23
         DEZ3   = DUMY3*Z23
         FFGRD(1,P3)=FFGRD(1,P3) - DEX3
         FFGRD(2,P3)=FFGRD(2,P3) - DEY3
         FFGRD(3,P3)=FFGRD(3,P3) - DEZ3
C
         FFGRD(1,P2)=FFGRD(1,P2)-DEX1+DEX3
         FFGRD(2,P2)=FFGRD(2,P2)-DEY1+DEY3
         FFGRD(3,P2)=FFGRD(3,P2)-DEZ1+DEZ3
C
         VIR(1)     =VIR(1)  + DEX1*X12 + DEX3*X23
         VIR(2)     =VIR(2)  + DEY1*Y12 + DEY3*Y23
         VIR(3)     =VIR(3)  + DEZ1*Z12 + DEZ3*Z23
         IYES = 0
         JYES = 0
         KYES = 0
         DO KFIX=1,NFIXMM
            IF(P1.EQ.IFIXMM(KFIX)) IYES = 1
            IF(P2.EQ.IFIXMM(KFIX)) JYES = 1
            IF(P3.EQ.IFIXMM(KFIX)) KYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.JYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX1*X12
            VIR(2)    =VIR(2)     - DEY1*Y12
            VIR(3)    =VIR(3)     - DEZ1*Z12
         END IF
         IF(JYES.EQ.1.AND.KYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX3*X23
            VIR(2)    =VIR(2)     - DEY3*Y23
            VIR(3)    =VIR(3)     - DEZ3*Z23
         END IF
C
         DEX1   = DUMY2*(DR12X1A+DR23X2)
         DEY1   = DUMY2*(DR12Y1A+DR23Y2)
         DEZ1   = DUMY2*(DR12Z1A+DR23Z2)
         FFGRD(1,P1)=FFGRD(1,P1) + DEX1
         FFGRD(2,P1)=FFGRD(2,P1) + DEY1
         FFGRD(3,P1)=FFGRD(3,P1) + DEZ1
C
         DEX3   = DUMY2*(DR23X2A+DR12X1)
         DEY3   = DUMY2*(DR23Y2A+DR12Y1)
         DEZ3   = DUMY2*(DR23Z2A+DR12Z1)
         FFGRD(1,P3)=FFGRD(1,P3)+DEX3
         FFGRD(2,P3)=FFGRD(2,P3)+DEY3
         FFGRD(3,P3)=FFGRD(3,P3)+DEZ3
C
         FFGRD(1,P2)=FFGRD(1,P2)-DEX1-DEX3
         FFGRD(2,P2)=FFGRD(2,P2)-DEY1-DEY3
         FFGRD(3,P2)=FFGRD(3,P2)-DEZ1-DEZ3
C
         VIR(1)     =VIR(1)  + DEX1*X12 - DEX3*X23
         VIR(2)     =VIR(2)  + DEY1*Y12 - DEY3*Y23
         VIR(3)     =VIR(3)  + DEZ1*Z12 - DEZ3*Z23
         IYES = 0
         JYES = 0
         KYES = 0
         DO KFIX=1,NFIXMM
            IF(P1.EQ.IFIXMM(KFIX)) IYES = 1
            IF(P2.EQ.IFIXMM(KFIX)) JYES = 1
            IF(P3.EQ.IFIXMM(KFIX)) KYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.JYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX1*X12
            VIR(2)    =VIR(2)     - DEY1*Y12
            VIR(3)    =VIR(3)     - DEZ1*Z12
         END IF
         IF(JYES.EQ.1.AND.KYES.EQ.1) THEN
            VIR(1)    =VIR(1)     + DEX3*X23
            VIR(2)    =VIR(2)     + DEY3*Y23
            VIR(3)    =VIR(3)     + DEZ3*Z23
         END IF
 100  CONTINUE
C
      DO 200 III=L1ANGLPMA,L2ANGLPMA
         IANGL  =LSANGLPMA(III)
         IF(FCSTBD(1,IANGL).EQ.ZERO.AND.FCSTBD(2,IANGL).EQ.ZERO)
     *   GOTO 200
         P1     =KLIST(1,IANGL)
         P2     =KLIST(2,IANGL)
         P3     =KLIST(3,IANGL)
         X13    =CORD(1,P1)-CORD(1,P3)
         Y13    =CORD(2,P1)-CORD(2,P3)
         Z13    =CORD(3,P1)-CORD(3,P3)
         X12    =CORD(1,P1)-CORD(1,P2)
         Y12    =CORD(2,P1)-CORD(2,P2)
         Z12    =CORD(3,P1)-CORD(3,P2)
         X23    =CORD(1,P2)-CORD(1,P3)
         Y23    =CORD(2,P2)-CORD(2,P3)
         Z23    =CORD(3,P2)-CORD(3,P3)
C
         R13R13 =X13*X13+Y13*Y13+Z13*Z13
         R12R12 =X12*X12+Y12*Y12+Z12*Z12
         R23R23 =X23*X23+Y23*Y23+Z23*Z23
         R12    =SQRT(R12R12)
         R23    =SQRT(R23R23)
C
         ONEBC  =ONE/(R12*R23)
         COSA   =(R12R12 + R23R23 - R13R13)*ONEBC*PT5
         IF(COSA.GT. ONE) COSA = ONE
         IF(COSA.LT.-ONE) COSA =-ONE
C
         ALPHA  =ACOS(COSA)
         SINA   =SQRT(ABS(ONE - COSA*COSA))
         DELT   =ALPHA - A0
         IBOND  =KBLST(1,IANGL)
         JBOND  =KBLST(2,IANGL)
         R0IJ   =BOND0(IBOND)
         DRIJ   =R12-R0IJ
         R0JK   =BOND0(JBOND)
         DRJK   =R23-R0JK
         CCC1   =FCSTBD(1,IANGL)*DRIJ+FCSTBD(2,IANGL)*DRJK
         PMF1AG = PMF1AG-CCC1*DELT
 200  CONTINUE
C
      DO 210 III=L1ANGLPMB,L2ANGLPMB
         IANGL  =LSANGLPMB(III)
         IF(FCSTBD(1,IANGL).EQ.ZERO.AND.FCSTBD(2,IANGL).EQ.ZERO)
     *   GOTO 210
         P1     =KLIST(1,IANGL)
         P2     =KLIST(2,IANGL)
         P3     =KLIST(3,IANGL)
         X13    =CORD(1,P1)-CORD(1,P3)
         Y13    =CORD(2,P1)-CORD(2,P3)
         Z13    =CORD(3,P1)-CORD(3,P3)
         X12    =CORD(1,P1)-CORD(1,P2)
         Y12    =CORD(2,P1)-CORD(2,P2)
         Z12    =CORD(3,P1)-CORD(3,P2)
         X23    =CORD(1,P2)-CORD(1,P3)
         Y23    =CORD(2,P2)-CORD(2,P3)
         Z23    =CORD(3,P2)-CORD(3,P3)
C
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            DO KFIX=1,NFIXMM
               IF(P1.EQ.IFIXMM(KFIX)) THEN
                  X13 = X13 - CORD(1,P1) + CORDB(1,P1)
                  Y13 = Y13 - CORD(2,P1) + CORDB(2,P1)
                  Z13 = Z13 - CORD(3,P1) + CORDB(3,P1)
                  X12 = X12 - CORD(1,P1) + CORDB(1,P1)
                  Y12 = Y12 - CORD(2,P1) + CORDB(2,P1)
                  Z12 = Z12 - CORD(3,P1) + CORDB(3,P1)
               END IF
               IF(P2.EQ.IFIXMM(KFIX)) THEN
                  X12 = X12 + CORD(1,P2) - CORDB(1,P2)
                  Y12 = Y12 + CORD(2,P2) - CORDB(2,P2)
                  Z12 = Z12 + CORD(3,P2) - CORDB(3,P2)
                  X23 = X23 - CORD(1,P2) + CORDB(1,P2)
                  Y23 = Y23 - CORD(2,P2) + CORDB(2,P2)
                  Z23 = Z23 - CORD(3,P2) + CORDB(3,P2)
               END IF
               IF(P3.EQ.IFIXMM(KFIX)) THEN
                  X13 = X13 + CORD(1,P3) - CORDB(1,P3)
                  Y13 = Y13 + CORD(2,P3) - CORDB(2,P3)
                  Z13 = Z13 + CORD(3,P3) - CORDB(3,P3)
                  X23 = X23 + CORD(1,P3) - CORDB(1,P3)
                  Y23 = Y23 + CORD(2,P3) - CORDB(2,P3)
                  Z23 = Z23 + CORD(3,P3) - CORDB(3,P3)
               END IF
            ENDDO
         END IF
C
         R13R13 =X13*X13+Y13*Y13+Z13*Z13
         R12R12 =X12*X12+Y12*Y12+Z12*Z12
         R23R23 =X23*X23+Y23*Y23+Z23*Z23
         R12    =SQRT(R12R12)
         R23    =SQRT(R23R23)
C
         ONEBC  =ONE/(R12*R23)
         COSA   =(R12R12 + R23R23 - R13R13)*ONEBC*PT5
         IF(COSA.GT. ONE) COSA = ONE
         IF(COSA.LT.-ONE) COSA =-ONE
C
         ALPHA  =ACOS(COSA) 
         SINA   =SQRT(ABS(ONE - COSA*COSA))
         DELT   =ALPHA - A0
         IBOND  =KBLST(1,IANGL)
         JBOND  =KBLST(2,IANGL)
         R0IJ   =BOND0(IBOND)
         DRIJ   =R12-R0IJ
         R0JK   =BOND0(JBOND)
         DRJK   =R23-R0JK
         CCC1   =FCSTBD(1,IANGL)*DRIJ+FCSTBD(2,IANGL)*DRJK
         PMF1AG = PMF1AG+CCC1*DELT
 210  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK E123R4
!>
!> @brief    dihedral rotation
!>
!> @author   Nandun Thellamurege
!>           - Jan 2011
!>
!> @details  force field dihedral rotation energy
!>
      SUBROUTINE E123R4(CORD,FFGRD,VROT,GAMA,NNN,LLIST,CORDB,
     *                  LSDIHRPMA,LSDIHRPMB,FCDIHR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INTEGER P1, P2, P3, P4
C
      PARAMETER (PI=3.14159265358979323846264338D+00, ONE=1.0D+00)
      PARAMETER (PT5=0.5D+00,TWO=2.0D+00,FOUR=4.0D+00,THREE=3.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),VROT(*),
     *          GAMA(*),NNN(*),LLIST(4,*),CORDB(3,*),LSDIHRPMA(*),
     *          LSDIHRPMB(*),FCDIHR(3,*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C     FENGCHAO CUI, HUI LI, MAY 2012
C
C     FORMULA:  E = VROT*[1 + COS(NNN*TOR - GAMA)]
C     FORMULA:  E = 0.5*(VROT1*(1+COS(1TOR))
C                       +VROT2*(1-COS(2TOR))
C                       +VROT3*(1+COS(3TOR)))
C
      PMF1DR   =0.0D+00
      EN123R4  =0.0D+00
C
      DO 100 I=L1DIHR,L2DIHR
         IF     (NFFTYP/10000.NE.5) THEN
            VR    = VROT(I)
            IF(VR.EQ.0.0D+00) GOTO 100
            REALN = DBLE(NNN(I))
            IF(REALN.EQ.0.0D+00) GOTO 100
            GAMMA = GAMA(I)
         ELSE IF(NFFTYP/10000.EQ.5) THEN
            VROT1   = FCDIHR(1,I)
            VROT2   = FCDIHR(2,I)
            VROT3   = FCDIHR(3,I)
         END IF
         P1=LLIST(1,I)
         P2=LLIST(2,I)
         P3=LLIST(3,I)
         P4=LLIST(4,I)
C
         X12=CORD(1,P1)-CORD(1,P2)
         Y12=CORD(2,P1)-CORD(2,P2)
         Z12=CORD(3,P1)-CORD(3,P2)
         X13=CORD(1,P1)-CORD(1,P3)
         Y13=CORD(2,P1)-CORD(2,P3)
         Z13=CORD(3,P1)-CORD(3,P3)
         X23=CORD(1,P2)-CORD(1,P3)
         Y23=CORD(2,P2)-CORD(2,P3)
         Z23=CORD(3,P2)-CORD(3,P3)
         X34=CORD(1,P3)-CORD(1,P4)
         Y34=CORD(2,P3)-CORD(2,P4)
         Z34=CORD(3,P3)-CORD(3,P4)
C
         R12=SQRT(X12*X12+Y12*Y12+Z12*Z12)
         R23=SQRT(X23*X23+Y23*Y23+Z23*Z23)
         R34=SQRT(X34*X34+Y34*Y34+Z34*Z34)
C
         COS123=(-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
         COS234=(-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
         SIN2123= 1.0D+00-COS123*COS123
         SIN2234= 1.0D+00-COS234*COS234
         SIN123 = SQRT(ABS(SIN2123))
         SIN234 = SQRT(ABS(SIN2234))
         IF(ABS(SIN123).LT.1.0D-06) GOTO 100
         IF(ABS(SIN234).LT.1.0D-06) GOTO 100
         ONESIN = 1.0D+00/(SIN123*SIN234)
C
         COSTOR = ONESIN*(COS123*COS234-
     *                    ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
         IF(COSTOR.GT. ONE) COSTOR= ONE
         IF(COSTOR.LT.-ONE) COSTOR=-ONE
         TOR    = ACOS(COSTOR)
C        -- DIHEDRAL ANGLE IS 0 - 360 DEGREES
         XNORM  = -Y23*Z34 + Z23*Y34
         YNORM  = -Z23*X34 + X23*Z34
         ZNORM  = -X23*Y34 + Y23*X34
         DOTN12 = X12*XNORM + Y12*YNORM + Z12*ZNORM
         IF(DOTN12.LT.0.0D+00) TOR = 2.0D+00*PI - TOR
C
         IF(NFFTYP/10000.NE.5) THEN
            ROTA    = REALN*TOR-GAMMA
            EN123R4 = EN123R4 + VR*(ONE + COS(ROTA))
            FACT    = VR*REALN*(-SIN(ROTA))
         ELSE IF(NFFTYP/10000.EQ.5) THEN
            COSTOR2 = COSTOR*COSTOR
            SINTOR  = SIN(TOR)
            EN123R4 = EN123R4+PT5*
     *                (VROT1*(ONE+COSTOR)+
     *                 VROT2*(TWO-TWO*COSTOR2)+
     *                 VROT3*(ONE+COSTOR*(FOUR*COSTOR2-THREE)))
            FACT    = PT5*(-SINTOR)*(+VROT1
     *                               -VROT2*FOUR*COSTOR
     *                               +VROT3*(12.0D+00*COSTOR2-THREE))
         END IF
C
C        - CALCULATING DERIVATIVES
C
         A123=1.0D+00/(R12*SIN2123)
         A432=1.0D+00/(R34*SIN2234)
         B123=R12*COS123/R23
         B432=R34*COS234/R23
         C123=B123-1.0D+00
C
         DUMY       =  FACT*A123/(R12*R23)
         DEX1       =  DUMY*(-Y12*Z23+Z12*Y23)
         DEY1       =  DUMY*(-Z12*X23+X12*Z23)
         DEZ1       =  DUMY*(-X12*Y23+Y12*X23)
         FFGRD(1,P1)=FFGRD(1,P1)+DEX1
         FFGRD(2,P1)=FFGRD(2,P1)+DEY1
         FFGRD(3,P1)=FFGRD(3,P1)+DEZ1
C
         DUMY       =  FACT*(-A432)/(R23*R34)
         DEX4       =  DUMY*(-Y23*Z34+Z23*Y34)
         DEY4       =  DUMY*(-Z23*X34+X23*Z34)
         DEZ4       =  DUMY*(-X23*Y34+Y23*X34)
         FFGRD(1,P4)=FFGRD(1,P4)+DEX4
         FFGRD(2,P4)=FFGRD(2,P4)+DEY4
         FFGRD(3,P4)=FFGRD(3,P4)+DEZ4
C
         DEX2       =  C123*DEX1 - B432*DEX4
         DEY2       =  C123*DEY1 - B432*DEY4
         DEZ2       =  C123*DEZ1 - B432*DEZ4
         FFGRD(1,P2)=FFGRD(1,P2)+DEX2
         FFGRD(2,P2)=FFGRD(2,P2)+DEY2
         FFGRD(3,P2)=FFGRD(3,P2)+DEZ2
C
         FFGRD(1,P3)=FFGRD(1,P3)-DEX1-DEX2-DEX4
         FFGRD(2,P3)=FFGRD(2,P3)-DEY1-DEY2-DEY4
         FFGRD(3,P3)=FFGRD(3,P3)-DEZ1-DEZ2-DEZ4
C
         VIR(1)     =VIR(1)  + DEX1*X13 + DEX2*X23 - DEX4*X34
         VIR(2)     =VIR(2)  + DEY1*Y13 + DEY2*Y23 - DEY4*Y34
         VIR(3)     =VIR(3)  + DEZ1*Z13 + DEZ2*Z23 - DEZ4*Z34
         IYES = 0
         JYES = 0
         KYES = 0
         LYES = 0
         DO KFIX=1,NFIXMM
            IF(P1.EQ.IFIXMM(KFIX)) IYES = 1
            IF(P2.EQ.IFIXMM(KFIX)) JYES = 1
            IF(P3.EQ.IFIXMM(KFIX)) KYES = 1
            IF(P4.EQ.IFIXMM(KFIX)) LYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.KYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX1*X13
            VIR(2)    =VIR(2)     - DEY1*Y13
            VIR(3)    =VIR(3)     - DEZ1*Z13
         END IF
         IF(JYES.EQ.1.AND.KYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX2*X23
            VIR(2)    =VIR(2)     - DEY2*Y23
            VIR(3)    =VIR(3)     - DEZ2*Z23
         END IF
         IF(KYES.EQ.1.AND.LYES.EQ.1) THEN
            VIR(1)    =VIR(1)     + DEX4*X34
            VIR(2)    =VIR(2)     + DEY4*Y34
            VIR(3)    =VIR(3)     + DEZ4*Z34
         END IF
 100  CONTINUE
C
      DO 200 III=L1DIHRPMA,L2DIHRPMA
         IDIHR = LSDIHRPMA(III)
         IF     (NFFTYP/10000.NE.5) THEN
            VR    = VROT(I)
            IF(VR.EQ.0.0D+00) GOTO 200
            REALN = DBLE(NNN(I))
            IF(REALN.EQ.0.0D+00) GOTO 200
            GAMMA = GAMA(I)
         ELSE IF(NFFTYP/10000.EQ.5) THEN
            VROT1   = FCDIHR(1,IDIHR)
            VROT2   = FCDIHR(2,IDIHR)
            VROT3   = FCDIHR(3,IDIHR)
         END IF
         P1=LLIST(1,IDIHR)
         P2=LLIST(2,IDIHR)
         P3=LLIST(3,IDIHR)
         P4=LLIST(4,IDIHR)
C
         X12=CORD(1,P1)-CORD(1,P2)
         Y12=CORD(2,P1)-CORD(2,P2)
         Z12=CORD(3,P1)-CORD(3,P2)
         X13=CORD(1,P1)-CORD(1,P3)
         Y13=CORD(2,P1)-CORD(2,P3)
         Z13=CORD(3,P1)-CORD(3,P3)
         X23=CORD(1,P2)-CORD(1,P3)
         Y23=CORD(2,P2)-CORD(2,P3)
         Z23=CORD(3,P2)-CORD(3,P3)
         X34=CORD(1,P3)-CORD(1,P4)
         Y34=CORD(2,P3)-CORD(2,P4)
         Z34=CORD(3,P3)-CORD(3,P4)
C
         R12=SQRT(X12*X12+Y12*Y12+Z12*Z12)
         R23=SQRT(X23*X23+Y23*Y23+Z23*Z23)
         R34=SQRT(X34*X34+Y34*Y34+Z34*Z34)
C
         COS123=(-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
         COS234=(-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
         SIN2123= 1.0D+00-COS123*COS123
         SIN2234= 1.0D+00-COS234*COS234
         SIN123 = SQRT(ABS(SIN2123))
         SIN234 = SQRT(ABS(SIN2234))
         IF(ABS(SIN123).LT.1.0D-06) GOTO 200
         IF(ABS(SIN234).LT.1.0D-06) GOTO 200
         ONESIN = 1.0D+00/(SIN123*SIN234)
C
         COSTOR = ONESIN*(COS123*COS234-
     *                    ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
         IF(COSTOR.GT. ONE) COSTOR= ONE
         IF(COSTOR.LT.-ONE) COSTOR=-ONE
         TOR    = ACOS(COSTOR)
C        -- DIHEDRAL ANGLE IS 0 - 360 DEGREES
         XNORM  = -Y23*Z34 + Z23*Y34
         YNORM  = -Z23*X34 + X23*Z34
         ZNORM  = -X23*Y34 + Y23*X34
         DOTN12 = X12*XNORM + Y12*YNORM + Z12*ZNORM
         IF(DOTN12.LT.0.0D+00) TOR = 2.0D+00*PI - TOR
C
         IF(NFFTYP/10000.NE.5) THEN
            ROTA    = REALN*TOR-GAMMA
            PMF1DR  = PMF1DR - VR*(ONE + COS(ROTA))
         ELSE IF(NFFTYP/10000.EQ.5) THEN
            COSTOR2 = COSTOR*COSTOR
            PMF1DR  = PMF1DR - PT5*
     *                (VROT1*(ONE+COSTOR)+
     *                 VROT2*(TWO-TWO*COSTOR2)+
     *                 VROT3*(ONE+COSTOR*(FOUR*COSTOR2-THREE)))
         END IF
 200  CONTINUE
C
      DO 210 III=L1DIHRPMB,L2DIHRPMB
         IDIHR = LSDIHRPMB(III)
         IF     (NFFTYP/10000.NE.5) THEN
            VR    = VROT(I)
            IF(VR.EQ.0.0D+00) GOTO 210
            REALN = DBLE(NNN(I))
            IF(REALN.EQ.0.0D+00) GOTO 210
            GAMMA = GAMA(I)
         ELSE IF(NFFTYP/10000.EQ.5) THEN
            VROT1   = FCDIHR(1,IDIHR)
            VROT2   = FCDIHR(2,IDIHR)
            VROT3   = FCDIHR(3,IDIHR)
         END IF
         P1=LLIST(1,IDIHR)
         P2=LLIST(2,IDIHR)
         P3=LLIST(3,IDIHR)
         P4=LLIST(4,IDIHR)
C
         X12=CORD(1,P1)-CORD(1,P2)
         Y12=CORD(2,P1)-CORD(2,P2)
         Z12=CORD(3,P1)-CORD(3,P2)
         X13=CORD(1,P1)-CORD(1,P3)
         Y13=CORD(2,P1)-CORD(2,P3)
         Z13=CORD(3,P1)-CORD(3,P3)
         X23=CORD(1,P2)-CORD(1,P3)
         Y23=CORD(2,P2)-CORD(2,P3)
         Z23=CORD(3,P2)-CORD(3,P3)
         X34=CORD(1,P3)-CORD(1,P4)
         Y34=CORD(2,P3)-CORD(2,P4)
         Z34=CORD(3,P3)-CORD(3,P4)
C
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            DO KFIX=1,NFIXMM
               IF(P1.EQ.IFIXMM(KFIX)) THEN
                  X12 = X12 - CORD(1,P1) + CORDB(1,P1)
                  Y12 = Y12 - CORD(2,P1) + CORDB(2,P1)
                  Z12 = Z12 - CORD(3,P1) + CORDB(3,P1)
                  X13 = X13 - CORD(1,P1) + CORDB(1,P1)
                  Y13 = Y13 - CORD(2,P1) + CORDB(2,P1)
                  Z13 = Z13 - CORD(3,P1) + CORDB(3,P1)
               END IF
               IF(P2.EQ.IFIXMM(KFIX)) THEN
                  X12 = X12 + CORD(1,P2) - CORDB(1,P2)
                  Y12 = Y12 + CORD(2,P2) - CORDB(2,P2)
                  Z12 = Z12 + CORD(3,P2) - CORDB(3,P2)
                  X23 = X23 - CORD(1,P2) + CORDB(1,P2)
                  Y23 = Y23 - CORD(2,P2) + CORDB(2,P2)
                  Z23 = Z23 - CORD(3,P2) + CORDB(3,P2)
               END IF
               IF(P3.EQ.IFIXMM(KFIX)) THEN
                  X13 = X13 + CORD(1,P3) - CORDB(1,P3)
                  Y13 = Y13 + CORD(2,P3) - CORDB(2,P3)
                  Z13 = Z13 + CORD(3,P3) - CORDB(3,P3)
                  X23 = X23 + CORD(1,P3) - CORDB(1,P3)
                  Y23 = Y23 + CORD(2,P3) - CORDB(2,P3)
                  Z23 = Z23 + CORD(3,P3) - CORDB(3,P3)
                  X34 = X34 - CORD(1,P3) + CORDB(1,P3)
                  Y34 = Y34 - CORD(2,P3) + CORDB(2,P3)
                  Z34 = Z34 - CORD(3,P3) + CORDB(3,P3)
               END IF
               IF(P4.EQ.IFIXMM(KFIX)) THEN
                  X34 = X34 + CORD(1,P4) - CORDB(1,P4)
                  Y34 = Y34 + CORD(2,P4) - CORDB(2,P4)
                  Z34 = Z34 + CORD(3,P4) - CORDB(3,P4)
               END IF
            ENDDO
         END IF
C
         R12=SQRT(X12*X12+Y12*Y12+Z12*Z12)
         R23=SQRT(X23*X23+Y23*Y23+Z23*Z23)
         R34=SQRT(X34*X34+Y34*Y34+Z34*Z34)
C
         COS123=(-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
         COS234=(-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
         SIN2123= 1.0D+00-COS123*COS123
         SIN2234= 1.0D+00-COS234*COS234
         SIN123 = SQRT(ABS(SIN2123))
         SIN234 = SQRT(ABS(SIN2234))
         IF(ABS(SIN123).LT.1.0D-06) GOTO 210
         IF(ABS(SIN234).LT.1.0D-06) GOTO 210
         ONESIN = 1.0D+00/(SIN123*SIN234)
C
         COSTOR = ONESIN*(COS123*COS234-
     *                    ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
         IF(COSTOR.GT. ONE) COSTOR= ONE
         IF(COSTOR.LT.-ONE) COSTOR=-ONE
         TOR    = ACOS(COSTOR)
C        -- DIHEDRAL ANGLE IS 0 - 360 DEGREES
         XNORM  = -Y23*Z34 + Z23*Y34
         YNORM  = -Z23*X34 + X23*Z34
         ZNORM  = -X23*Y34 + Y23*X34
         DOTN12 = X12*XNORM + Y12*YNORM + Z12*ZNORM
         IF(DOTN12.LT.0.0D+00) TOR = 2.0D+00*PI - TOR
C
         IF(NFFTYP/10000.NE.5) THEN
            ROTA    = REALN*TOR-GAMMA
            PMF1DR  = PMF1DR + VR*(ONE + COS(ROTA))
         ELSE IF(NFFTYP/10000.EQ.5) THEN
            COSTOR2 = COSTOR*COSTOR
            PMF1DR  = PMF1DR + PT5*
     *                (VROT1*(ONE+COSTOR)+
     *                 VROT2*(TWO-TWO*COSTOR2)+
     *                 VROT3*(ONE+COSTOR*(FOUR*COSTOR2-THREE)))
         END IF
 210  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK E123B4
!>   
!> @brief    dihedral bending
!>   
!> @author   Nandun Thellamurege
!>           - Feb 2011
!>    
!> @details  force field dihedral bending energy
!>           (out-of-plane energy)
!>
      SUBROUTINE E123B4(CORD,FFGRD,DIHB0,FCDIHB,NLIST,CORDB,
     *                  LSDIHBPMA,LSDIHBPMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INTEGER P1, P2, P3, P4
C
      PARAMETER (PI=3.14159265358979323846264338D+00, TWO=2.0D+00,
     *           ONE=1.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),DIHB0(*),FCDIHB(*),NLIST(4,*),
     *          CORDB(3,*),LSDIHBPMA(*),LSDIHBPMB(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
C
C     NANDUN THELLAMUREGE, FEB 2011, LINCOLN
C     FENGCHAO CUI, HUI LI, MAY 2012
C
C     FORMULA:  E = K*(B-B0)**2
C
      PMF1DB =0.0D+00
      EN123B4=0.0D+00
      DO 100 I=L1DIHB,L2DIHB
         IF(FCDIHB(I).EQ.0.0D+00) GOTO 100
         FC=FCDIHB(I)
         A0=DIHB0(I)
         P1=NLIST(1,I)
         P2=NLIST(2,I)
         P3=NLIST(3,I)
         P4=NLIST(4,I)
C
         X12=CORD(1,P1)-CORD(1,P2)
         Y12=CORD(2,P1)-CORD(2,P2)
         Z12=CORD(3,P1)-CORD(3,P2)
         X13=CORD(1,P1)-CORD(1,P3)
         Y13=CORD(2,P1)-CORD(2,P3)
         Z13=CORD(3,P1)-CORD(3,P3)
         X23=CORD(1,P2)-CORD(1,P3)
         Y23=CORD(2,P2)-CORD(2,P3)
         Z23=CORD(3,P2)-CORD(3,P3)
         X34=CORD(1,P3)-CORD(1,P4)
         Y34=CORD(2,P3)-CORD(2,P4)
         Z34=CORD(3,P3)-CORD(3,P4)
C
         R12=SQRT(X12*X12+Y12*Y12+Z12*Z12)
         R23=SQRT(X23*X23+Y23*Y23+Z23*Z23)
         R34=SQRT(X34*X34+Y34*Y34+Z34*Z34)
C
         COS123=(-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
         COS234=(-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
         SIN2123= 1.0D+00-COS123*COS123
         SIN2234= 1.0D+00-COS234*COS234
         SIN123 = SQRT(ABS(SIN2123))
         SIN234 = SQRT(ABS(SIN2234))
         IF(ABS(SIN123).LT.1.0D-06) GOTO 100
         IF(ABS(SIN234).LT.1.0D-06) GOTO 100
         ONESIN = 1.0D+00/(SIN123*SIN234)
C
         COSTOR = ONESIN*(COS123*COS234-
     *                    ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
         IF(COSTOR.GT. ONE) COSTOR= ONE
         IF(COSTOR.LT.-ONE) COSTOR=-ONE
         TOR    = ACOS(COSTOR)
         XNORM  = -Y23*Z34 + Z23*Y34
         YNORM  = -Z23*X34 + X23*Z34
         ZNORM  = -X23*Y34 + Y23*X34
         DOTN12 = X12*XNORM + Y12*YNORM + Z12*ZNORM
C
C        -- TOR FROM ACOS() IS ALWAYS 0 - 180 DEGREE
C           IF A0 =   0, TOR SHOULD BE  -20 TO  +20 DEGREE
C           IF A0 = 180, TOR SHOULD BE +160 TO +200 DEGREE
C
         IF(ABS(A0).LE.0.2D+00.AND.DOTN12.LT.0.0D+00)
     *      TOR= -TOR
         IF(ABS(A0-PI).LE.0.2D+00.AND.DOTN12.LT.0.0D+00)
     *      TOR = 2.0D+00*PI - TOR
C
         EN123B4 = EN123B4 + FC*(TOR-A0)*(TOR-A0)
C
C        -- DERIVATIVES --
C
         A123=1.0D+00/(R12*SIN2123)
         A432=1.0D+00/(R34*SIN2234)
         B123=R12*COS123/R23
         B432=R34*COS234/R23
         C123=B123-1.0D+00
         FACT=TWO*FC*(TOR-A0)
C
         DUMY       =  FACT*A123/(R12*R23)
         DEX1       =  DUMY*(-Y12*Z23+Z12*Y23)
         DEY1       =  DUMY*(-Z12*X23+X12*Z23)
         DEZ1       =  DUMY*(-X12*Y23+Y12*X23)
         FFGRD(1,P1)=FFGRD(1,P1)+DEX1
         FFGRD(2,P1)=FFGRD(2,P1)+DEY1
         FFGRD(3,P1)=FFGRD(3,P1)+DEZ1
C
         DUMY       =  FACT*(-A432)/(R23*R34)
         DEX4       =  DUMY*(-Y23*Z34+Z23*Y34)
         DEY4       =  DUMY*(-Z23*X34+X23*Z34)
         DEZ4       =  DUMY*(-X23*Y34+Y23*X34)
         FFGRD(1,P4)=FFGRD(1,P4)+DEX4
         FFGRD(2,P4)=FFGRD(2,P4)+DEY4
         FFGRD(3,P4)=FFGRD(3,P4)+DEZ4
C
         DEX2       =  C123*DEX1 - B432*DEX4
         DEY2       =  C123*DEY1 - B432*DEY4
         DEZ2       =  C123*DEZ1 - B432*DEZ4
         FFGRD(1,P2)=FFGRD(1,P2)+DEX2
         FFGRD(2,P2)=FFGRD(2,P2)+DEY2
         FFGRD(3,P2)=FFGRD(3,P2)+DEZ2
C
         FFGRD(1,P3)=FFGRD(1,P3)-DEX1-DEX2-DEX4
         FFGRD(2,P3)=FFGRD(2,P3)-DEY1-DEY2-DEY4
         FFGRD(3,P3)=FFGRD(3,P3)-DEZ1-DEZ2-DEZ4
C
         VIR(1)     =VIR(1)  + DEX1*X13 + DEX2*X23 - DEX4*X34
         VIR(2)     =VIR(2)  + DEY1*Y13 + DEY2*Y23 - DEY4*Y34
         VIR(3)     =VIR(3)  + DEZ1*Z13 + DEZ2*Z23 - DEZ4*Z34
         IYES = 0
         JYES = 0
         KYES = 0
         LYES = 0
         DO KFIX=1,NFIXMM
            IF(P1.EQ.IFIXMM(KFIX)) IYES = 1
            IF(P2.EQ.IFIXMM(KFIX)) JYES = 1
            IF(P3.EQ.IFIXMM(KFIX)) KYES = 1
            IF(P4.EQ.IFIXMM(KFIX)) LYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.KYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX1*X13
            VIR(2)    =VIR(2)     - DEY1*Y13
            VIR(3)    =VIR(3)     - DEZ1*Z13
         END IF
         IF(JYES.EQ.1.AND.KYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX2*X23
            VIR(2)    =VIR(2)     - DEY2*Y23
            VIR(3)    =VIR(3)     - DEZ2*Z23
         END IF
         IF(KYES.EQ.1.AND.LYES.EQ.1) THEN
            VIR(1)    =VIR(1)     + DEX4*X34
            VIR(2)    =VIR(2)     + DEY4*Y34
            VIR(3)    =VIR(3)     + DEZ4*Z34
         END IF
 100  CONTINUE
C
C
      DO 200 III=L1DIHBPMA,L2DIHBPMA
         IDIHB = LSDIHBPMA(III)
         IF(FCDIHB(IDIHB).EQ.0.0D+00) GOTO 200
         FC=FCDIHB(IDIHB)
         A0=DIHB0(IDIHB)
         P1=NLIST(1,IDIHB)
         P2=NLIST(2,IDIHB)
         P3=NLIST(3,IDIHB)
         P4=NLIST(4,IDIHB)
C
         X12=CORD(1,P1)-CORD(1,P2)
         Y12=CORD(2,P1)-CORD(2,P2)
         Z12=CORD(3,P1)-CORD(3,P2)
         X13=CORD(1,P1)-CORD(1,P3)
         Y13=CORD(2,P1)-CORD(2,P3)
         Z13=CORD(3,P1)-CORD(3,P3)
         X23=CORD(1,P2)-CORD(1,P3)
         Y23=CORD(2,P2)-CORD(2,P3)
         Z23=CORD(3,P2)-CORD(3,P3)
         X34=CORD(1,P3)-CORD(1,P4)
         Y34=CORD(2,P3)-CORD(2,P4)
         Z34=CORD(3,P3)-CORD(3,P4)
C
         R12=SQRT(X12*X12+Y12*Y12+Z12*Z12)
         R23=SQRT(X23*X23+Y23*Y23+Z23*Z23)
         R34=SQRT(X34*X34+Y34*Y34+Z34*Z34)
C
         COS123=(-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
         COS234=(-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
         SIN2123= 1.0D+00-COS123*COS123
         SIN2234= 1.0D+00-COS234*COS234
         SIN123 = SQRT(ABS(SIN2123))
         SIN234 = SQRT(ABS(SIN2234))
         IF(ABS(SIN123).LT.1.0D-06) GOTO 200
         IF(ABS(SIN234).LT.1.0D-06) GOTO 200
         ONESIN = 1.0D+00/(SIN123*SIN234)
C
         COSTOR = ONESIN*(COS123*COS234-
     *                    ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
         IF(COSTOR.GT. ONE) COSTOR= ONE
         IF(COSTOR.LT.-ONE) COSTOR=-ONE
         TOR    = ACOS(COSTOR)
         XNORM  = -Y23*Z34 + Z23*Y34
         YNORM  = -Z23*X34 + X23*Z34
         ZNORM  = -X23*Y34 + Y23*X34
         DOTN12 = X12*XNORM + Y12*YNORM + Z12*ZNORM
C
C        -- TOR FROM ACOS() IS ALWAYS 0 - 180 DEGREE
C           IF A0 =   0, TOR SHOULD BE  -20 TO  +20 DEGREE
C           IF A0 = 180, TOR SHOULD BE +160 TO +200 DEGREE
C
         IF(ABS(A0).LE.0.2D+00.AND.DOTN12.LT.0.0D+00)
     *      TOR  = -TOR
         IF(ABS(A0-PI).LE.0.2D+00.AND.DOTN12.LT.0.0D+00)
     *      TOR  = 2.0D+00*PI - TOR
C
         PMF1DB  = PMF1DB - FC*(TOR-A0)*(TOR-A0)
 200  CONTINUE
C
      DO 210 III=L1DIHBPMB,L2DIHBPMB
         IDIHB = LSDIHBPMB(III)
         IF(FCDIHB(IDIHB).EQ.0.0D+00) GOTO 210
         FC=FCDIHB(IDIHB)
         A0=DIHB0(IDIHB)
         P1=NLIST(1,IDIHB) 
         P2=NLIST(2,IDIHB) 
         P3=NLIST(3,IDIHB) 
         P4=NLIST(4,IDIHB)
C
         X12=CORD(1,P1)-CORD(1,P2)
         Y12=CORD(2,P1)-CORD(2,P2)
         Z12=CORD(3,P1)-CORD(3,P2)
         X13=CORD(1,P1)-CORD(1,P3)
         Y13=CORD(2,P1)-CORD(2,P3)
         Z13=CORD(3,P1)-CORD(3,P3)
         X23=CORD(1,P2)-CORD(1,P3)
         Y23=CORD(2,P2)-CORD(2,P3)
         Z23=CORD(3,P2)-CORD(3,P3)
         X34=CORD(1,P3)-CORD(1,P4)
         Y34=CORD(2,P3)-CORD(2,P4)
         Z34=CORD(3,P3)-CORD(3,P4)
C
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            DO KFIX=1,NFIXMM
               IF(P1.EQ.IFIXMM(KFIX)) THEN
                  X12 = X12 - CORD(1,P1) + CORDB(1,P1)
                  Y12 = Y12 - CORD(2,P1) + CORDB(2,P1)
                  Z12 = Z12 - CORD(3,P1) + CORDB(3,P1)
                  X13 = X13 - CORD(1,P1) + CORDB(1,P1)
                  Y13 = Y13 - CORD(2,P1) + CORDB(2,P1)
                  Z13 = Z13 - CORD(3,P1) + CORDB(3,P1)
               END IF
               IF(P2.EQ.IFIXMM(KFIX)) THEN
                  X12 = X12 + CORD(1,P2) - CORDB(1,P2)
                  Y12 = Y12 + CORD(2,P2) - CORDB(2,P2)
                  Z12 = Z12 + CORD(3,P2) - CORDB(3,P2)
                  X23 = X23 - CORD(1,P2) + CORDB(1,P2)
                  Y23 = Y23 - CORD(2,P2) + CORDB(2,P2)
                  Z23 = Z23 - CORD(3,P2) + CORDB(3,P2)
               END IF
               IF(P3.EQ.IFIXMM(KFIX)) THEN
                  X13 = X13 + CORD(1,P3) - CORDB(1,P3)
                  Y13 = Y13 + CORD(2,P3) - CORDB(2,P3)
                  Z13 = Z13 + CORD(3,P3) - CORDB(3,P3)
                  X23 = X23 + CORD(1,P3) - CORDB(1,P3)
                  Y23 = Y23 + CORD(2,P3) - CORDB(2,P3)
                  Z23 = Z23 + CORD(3,P3) - CORDB(3,P3)
                  X34 = X34 - CORD(1,P3) + CORDB(1,P3)
                  Y34 = Y34 - CORD(2,P3) + CORDB(2,P3)
                  Z34 = Z34 - CORD(3,P3) + CORDB(3,P3)
               END IF
               IF(P4.EQ.IFIXMM(KFIX)) THEN
                  X34 = X34 + CORD(1,P4) - CORDB(1,P4)
                  Y34 = Y34 + CORD(2,P4) - CORDB(2,P4)
                  Z34 = Z34 + CORD(3,P4) - CORDB(3,P4)
               END IF
            ENDDO
         END IF
C
         R12=SQRT(X12*X12+Y12*Y12+Z12*Z12) 
         R23=SQRT(X23*X23+Y23*Y23+Z23*Z23)
         R34=SQRT(X34*X34+Y34*Y34+Z34*Z34)
C
         COS123=(-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
         COS234=(-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
         SIN2123= 1.0D+00-COS123*COS123
         SIN2234= 1.0D+00-COS234*COS234
         SIN123 = SQRT(ABS(SIN2123))
         SIN234 = SQRT(ABS(SIN2234))
         IF(ABS(SIN123).LT.1.0D-06) GOTO 210
         IF(ABS(SIN234).LT.1.0D-06) GOTO 210
         ONESIN = 1.0D+00/(SIN123*SIN234)
C
         COSTOR = ONESIN*(COS123*COS234-
     *                    ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
         IF(COSTOR.GT. ONE) COSTOR= ONE
         IF(COSTOR.LT.-ONE) COSTOR=-ONE
         TOR    = ACOS(COSTOR)
         XNORM  = -Y23*Z34 + Z23*Y34
         YNORM  = -Z23*X34 + X23*Z34
         ZNORM  = -X23*Y34 + Y23*X34
         DOTN12 = X12*XNORM + Y12*YNORM + Z12*ZNORM
C
C        -- TOR FROM ACOS() IS ALWAYS 0 - 180 DEGREE
C           IF A0 =   0, TOR SHOULD BE  -20 TO  +20 DEGREE
C           IF A0 = 180, TOR SHOULD BE +160 TO +200 DEGREE
C
         IF(ABS(A0).LE.0.2D+00.AND.DOTN12.LT.0.0D+00)
     *      TOR  = -TOR
         IF(ABS(A0-PI).LE.0.2D+00.AND.DOTN12.LT.0.0D+00)
     *      TOR  = 2.0D+00*PI - TOR
C
         PMF1DB  = PMF1DB + FC*(TOR-A0)*(TOR-A0)
 210  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK E234W1
!>   
!> @brief    wagging energy
!>   
!> @author   Nandun Thellamurege
!>           - Jan 2011
!>    
!> @details  force field wagging energy
!>
      SUBROUTINE E234W1(CORD,FFGRD,FCWAGG,MLIST,CORDB,LSWAGGPMA,
     *                  LSWAGGPMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INTEGER P1, P2, P3, P4
C
      DIMENSION CORD(3,*),FFGRD(3,*),MLIST(4,*),FCWAGG(*),
     *          CORDB(3,*),LSWAGGPMA(*),LSWAGGPMB(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C     FENGCHAO CUI, HUI LI, MAY 2012
C
C     FORMULA:  E = K*W**2
C
      PMF1WG  = 0.0D+00
      EN234W1 = 0.0D+00
      DO 100 IWAGG = L1WAGG, L2WAGG
         FCONST = FCWAGG(IWAGG)
         IF(FCONST.EQ.0.0D+00) GOTO 100
C
C        --- P1 IS THE WAGGING ATOM, P4 IS THE CENTER LINKING ATOM ---
C
         P1     = MLIST(1,IWAGG)
         P2     = MLIST(2,IWAGG)
         P3     = MLIST(3,IWAGG)
         P4     = MLIST(4,IWAGG)
C
         X41    = CORD(1,P4)-CORD(1,P1)
         Y41    = CORD(2,P4)-CORD(2,P1)
         Z41    = CORD(3,P4)-CORD(3,P1)
         X42    = CORD(1,P4)-CORD(1,P2)
         Y42    = CORD(2,P4)-CORD(2,P2)
         Z42    = CORD(3,P4)-CORD(3,P2)
         X43    = CORD(1,P4)-CORD(1,P3)
         Y43    = CORD(2,P4)-CORD(2,P3)
         Z43    = CORD(3,P4)-CORD(3,P3)
         X23    = CORD(1,P2)-CORD(1,P3)
         Y23    = CORD(2,P2)-CORD(2,P3)
         Z23    = CORD(3,P2)-CORD(3,P3)
C
         R41SQ  = X41*X41 + Y41*Y41 + Z41*Z41
         R41    = SQRT(R41SQ)
         ONER41 = 1.0D+00/R41
         R42SQ  = X42*X42 +Y42*Y42 + Z42*Z42
         R42    = SQRT(R42SQ)
         ONER42 = 1.0D+00/R42
         R43SQ  = X43*X43 + Y43*Y43 + Z43*Z43
         R43    = SQRT(R43SQ)
         ONER43 = 1.0D+00/R43
         R23SQ  = X23*X23 + Y23*Y23 + Z23*Z23
         R23    = SQRT(R23SQ)
         P4243X = Y42*Z43 - Z42*Y43
         P4243Y = Z42*X43 - X42*Z43
         P4243Z = X42*Y43 - Y42*X43
C
C        --- ANGLE 243 CAN BE 90 -120 ---
         COS243 = (R42*R42 + R43*R43 - R23*R23)/(2.0D+00*R42*R43)
         SIN243 = SQRT(ABS(1.0D+00 - COS243*COS243))
         DUM    = 1.0D+00/(SIN243*R42*R43)
         AX     = P4243X*DUM 
         AY     = P4243Y*DUM 
         AZ     = P4243Z*DUM 
C        --- WWW IS LIKELY -30 TO +30 ---
         SINW   = -(AX*X41 + AY*Y41 + AZ*Z41)*ONER41
         COSW   = SQRT(ABS(1.0D+00 - SINW*SINW))
         ONECOSW= 1.0D+00/COSW
         WWW    = ASIN(SINW)
         EN234W1= EN234W1 + FCONST*WWW*WWW
C
         C243   = 1.0D+00/(R42*SIN243)
         C342   = 1.0D+00/(R43*SIN243)
         B2     = R42*SINW
         B3     = R43*SINW
C
C        --- CALCULATING DERIVATIVES ---
C
         FACT   = 2.0D+00*FCONST*WWW*ONECOSW
C
         DEX1   = FACT*ONER41*(AX - SINW*(-X41)*ONER41)
         DEY1   = FACT*ONER41*(AY - SINW*(-Y41)*ONER41)
         DEZ1   = FACT*ONER41*(AZ - SINW*(-Z41)*ONER41)
C
         D2X    = -B3*ONER43*(X43*COS243*ONER43 - X42*ONER42)/SIN243
         D2Y    = -B3*ONER43*(Y43*COS243*ONER43 - Y42*ONER42)/SIN243
         D2Z    = -B3*ONER43*(Z43*COS243*ONER43 - Z42*ONER42)/SIN243
         P4341X = (Y43*Z41 - Z43*Y41)/(R43*R41)
         P4341Y = (Z43*X41 - X43*Z41)/(R43*R41)
         P4341Z = (X43*Y41 - Y43*X41)/(R43*R41)
         DEX2   = FACT*C243*(D2X + P4341X)
         DEY2   = FACT*C243*(D2Y + P4341Y)
         DEZ2   = FACT*C243*(D2Z + P4341Z)
C
         D3X    = -B2*ONER42*(X42*COS243*ONER42 - X43*ONER43)/SIN243
         D3Y    = -B2*ONER42*(Y42*COS243*ONER42 - Y43*ONER43)/SIN243
         D3Z    = -B2*ONER42*(Z42*COS243*ONER42 - Z43*ONER43)/SIN243
         P4142X = (Y41*Z42 - Z41*Y42)/(R41*R42)
         P4142Y = (Z41*X42 - X41*Z42)/(R41*R42)
         P4142Z = (X41*Y42 - Y41*X42)/(R41*R42)
         DEX3   = FACT*C342*(D3X + P4142X)
         DEY3   = FACT*C342*(D3Y + P4142Y)
         DEZ3   = FACT*C342*(D3Z + P4142Z)
C
         FFGRD(1,P1)=FFGRD(1,P1)+DEX1
         FFGRD(2,P1)=FFGRD(2,P1)+DEY1
         FFGRD(3,P1)=FFGRD(3,P1)+DEZ1
         FFGRD(1,P2)=FFGRD(1,P2)+DEX2
         FFGRD(2,P2)=FFGRD(2,P2)+DEY2
         FFGRD(3,P2)=FFGRD(3,P2)+DEZ2
         FFGRD(1,P3)=FFGRD(1,P3)+DEX3
         FFGRD(2,P3)=FFGRD(2,P3)+DEY3
         FFGRD(3,P3)=FFGRD(3,P3)+DEZ3
         FFGRD(1,P4)=FFGRD(1,P4)-DEX1-DEX2-DEX3
         FFGRD(2,P4)=FFGRD(2,P4)-DEY1-DEY2-DEY3
         FFGRD(3,P4)=FFGRD(3,P4)-DEZ1-DEZ2-DEZ3
C
         VIR(1)     =VIR(1)  - DEX1*X41 - DEX2*X42 - DEX3*X43
         VIR(2)     =VIR(2)  - DEY1*Y41 - DEY2*Y42 - DEY3*Y43
         VIR(3)     =VIR(3)  - DEZ1*Z41 - DEZ2*Z42 - DEZ3*Z43
         IYES = 0
         JYES = 0
         KYES = 0
         LYES = 0
         DO KFIX=1,NFIXMM
            IF(P1.EQ.IFIXMM(KFIX)) IYES = 1
            IF(P2.EQ.IFIXMM(KFIX)) JYES = 1
            IF(P3.EQ.IFIXMM(KFIX)) KYES = 1
            IF(P4.EQ.IFIXMM(KFIX)) LYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.LYES.EQ.1) THEN
            VIR(1)    =VIR(1)     + DEX1*X41
            VIR(2)    =VIR(2)     + DEY1*Y41
            VIR(3)    =VIR(3)     + DEZ1*Z41
         END IF
         IF(JYES.EQ.1.AND.LYES.EQ.1) THEN
            VIR(1)    =VIR(1)     + DEX2*X42
            VIR(2)    =VIR(2)     + DEY2*Y42
            VIR(3)    =VIR(3)     + DEZ2*Z42
         END IF
         IF(KYES.EQ.1.AND.LYES.EQ.1) THEN
            VIR(1)    =VIR(1)     + DEX3*X43
            VIR(2)    =VIR(2)     + DEY3*Y43
            VIR(3)    =VIR(3)     + DEZ3*Z43
         END IF
 100  CONTINUE
C
      DO 200 III=L1WAGGPMA,L2WAGGPMA
         IWAGG  = LSWAGGPMA(III)
         FCONST = FCWAGG(IWAGG)
         IF(FCONST.EQ.0.0D+00) GOTO 200
C
C        --- P1 IS THE WAGGING ATOM, P4 IS THE LINKING ATOM ---
C
         P1     = MLIST(1,IWAGG)
         P2     = MLIST(2,IWAGG)
         P3     = MLIST(3,IWAGG)
         P4     = MLIST(4,IWAGG)
C
         X41    = CORD(1,P4)-CORD(1,P1)
         Y41    = CORD(2,P4)-CORD(2,P1)
         Z41    = CORD(3,P4)-CORD(3,P1)
         X42    = CORD(1,P4)-CORD(1,P2)
         Y42    = CORD(2,P4)-CORD(2,P2)
         Z42    = CORD(3,P4)-CORD(3,P2)
         X43    = CORD(1,P4)-CORD(1,P3)
         Y43    = CORD(2,P4)-CORD(2,P3)
         Z43    = CORD(3,P4)-CORD(3,P3)
         X23    = CORD(1,P2)-CORD(1,P3)
         Y23    = CORD(2,P2)-CORD(2,P3)
         Z23    = CORD(3,P2)-CORD(3,P3)
C
         R41SQ  = X41*X41 + Y41*Y41 + Z41*Z41
         R41    = SQRT(R41SQ)
         ONER41 = 1.0D+00/R41
         R42SQ  = X42*X42 +Y42*Y42 + Z42*Z42
         R42    = SQRT(R42SQ)
         ONER42 = 1.0D+00/R42
         R43SQ  = X43*X43 + Y43*Y43 + Z43*Z43
         R43    = SQRT(R43SQ)
         ONER43 = 1.0D+00/R43
         R23SQ  = X23*X23 + Y23*Y23 + Z23*Z23
         R23    = SQRT(R23SQ)
         P4243X = Y42*Z43 - Z42*Y43
         P4243Y = Z42*X43 - X42*Z43
         P4243Z = X42*Y43 - Y42*X43
C
C        --- ANGLE 243 CAN BE 90 -120 ---
         COS243 = (R42*R42 + R43*R43 - R23*R23)/(2.0D+00*R42*R43)
         SIN243 = SQRT(ABS(1.0D+00 - COS243*COS243))
         DUM    = 1.0D+00/(SIN243*R42*R43)
         AX     = P4243X*DUM 
         AY     = P4243Y*DUM 
         AZ     = P4243Z*DUM 
C        --- WWW IS LIKELY -30 TO +30 ---
         SINW   = -(AX*X41 + AY*Y41 + AZ*Z41)*ONER41
         COSW   = SQRT(ABS(1.0D+00 - SINW*SINW))
         ONECOSW= 1.0D+00/COSW
         WWW     = ASIN(SINW)
C
         PMF1WG = PMF1WG - FCONST*WWW*WWW
 200  CONTINUE
C
      DO 210 III=L1WAGGPMB,L2WAGGPMB
         IWAGG  = LSWAGGPMB(III)
         FCONST = FCWAGG(IWAGG)
         IF(FCONST.EQ.0.0D+00) GOTO 210
C
C        --- P1 IS THE WAGGING ATOM, P4 IS THE LINKING ATOM ---
C
         P1     = MLIST(1,IWAGG)
         P2     = MLIST(2,IWAGG)
         P3     = MLIST(3,IWAGG)
         P4     = MLIST(4,IWAGG)
C
         X41    = CORD(1,P4)-CORD(1,P1)
         Y41    = CORD(2,P4)-CORD(2,P1)
         Z41    = CORD(3,P4)-CORD(3,P1)
         X42    = CORD(1,P4)-CORD(1,P2)
         Y42    = CORD(2,P4)-CORD(2,P2)
         Z42    = CORD(3,P4)-CORD(3,P2)
         X43    = CORD(1,P4)-CORD(1,P3)
         Y43    = CORD(2,P4)-CORD(2,P3)
         Z43    = CORD(3,P4)-CORD(3,P3)
         X23    = CORD(1,P2)-CORD(1,P3)
         Y23    = CORD(2,P2)-CORD(2,P3)
         Z23    = CORD(3,P2)-CORD(3,P3)
C
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            DO KFIX=1,NFIXMM
               IF(P1.EQ.IFIXMM(KFIX)) THEN
                  X41 = X41 + CORD(1,P1) - CORDB(1,P1)
                  Y41 = Y41 + CORD(2,P1) - CORDB(2,P1)
                  Z41 = Z41 + CORD(3,P1) - CORDB(3,P1)
               END IF
               IF(P2.EQ.IFIXMM(KFIX)) THEN
                  X42 = X42 + CORD(1,P2) - CORDB(1,P2)
                  Y42 = Y42 + CORD(2,P2) - CORDB(2,P2)
                  Z42 = Z42 + CORD(3,P2) - CORDB(3,P2)
                  X23 = X23 - CORD(1,P2) + CORDB(1,P2)
                  Y23 = Y23 - CORD(2,P2) + CORDB(2,P2)
                  Z23 = Z23 - CORD(3,P2) + CORDB(3,P2)
               END IF
               IF(P3.EQ.IFIXMM(KFIX)) THEN
                  X43 = X43 + CORD(1,P3) - CORDB(1,P3)
                  Y43 = Y43 + CORD(2,P3) - CORDB(2,P3)
                  Z43 = Z43 + CORD(3,P3) - CORDB(3,P3)
                  X23 = X23 + CORD(1,P3) - CORDB(1,P3)
                  Y23 = Y23 + CORD(2,P3) - CORDB(2,P3)
                  Z23 = Z23 + CORD(3,P3) - CORDB(3,P3)
               END IF
               IF(P4.EQ.IFIXMM(KFIX)) THEN
                  X41 = X41 - CORD(1,P4) + CORDB(1,P4)
                  Y41 = Y41 - CORD(2,P4) + CORDB(2,P4)
                  Z41 = Z41 - CORD(3,P4) + CORDB(3,P4)
                  X42 = X42 - CORD(1,P4) + CORDB(1,P4)
                  Y42 = Y42 - CORD(2,P4) + CORDB(2,P4)
                  Z42 = Z42 - CORD(3,P4) + CORDB(3,P4)
                  X43 = X43 - CORD(1,P4) + CORDB(1,P4)
                  Y43 = Y43 - CORD(2,P4) + CORDB(2,P4)
                  Z43 = Z43 - CORD(3,P4) + CORDB(3,P4)
               END IF
            ENDDO
         END IF
C
         R41SQ  = X41*X41 + Y41*Y41 + Z41*Z41
         R41    = SQRT(R41SQ)
         ONER41 = 1.0D+00/R41
         R42SQ  = X42*X42 +Y42*Y42 + Z42*Z42
         R42    = SQRT(R42SQ)
         ONER42 = 1.0D+00/R42
         R43SQ  = X43*X43 + Y43*Y43 + Z43*Z43
         R43    = SQRT(R43SQ)
         ONER43 = 1.0D+00/R43
         R23SQ  = X23*X23 + Y23*Y23 + Z23*Z23
         R23    = SQRT(R23SQ)
         P4243X = Y42*Z43 - Z42*Y43
         P4243Y = Z42*X43 - X42*Z43
         P4243Z = X42*Y43 - Y42*X43
C
C        --- ANGLE 243 CAN BE 90 -120 ---
         COS243 = (R42*R42 + R43*R43 - R23*R23)/(2.0D+00*R42*R43)
         SIN243 = SQRT(ABS(1.0D+00 - COS243*COS243))
         DUM    = 1.0D+00/(SIN243*R42*R43)
         AX     = P4243X*DUM
         AY     = P4243Y*DUM
         AZ     = P4243Z*DUM
C        --- WWW IS LIKELY -30 TO +30 ---
         SINW   = -(AX*X41 + AY*Y41 + AZ*Z41)*ONER41
         COSW   = SQRT(ABS(1.0D+00 - SINW*SINW))
         ONECOSW= 1.0D+00/COSW
         WWW     = ASIN(SINW)
C
         PMF1WG = PMF1WG + FCONST*WWW*WWW
 210  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK ECMAP
!>   
!> @brief    charmm correction map
!>   
!> @author   Nandun Thellamurege
!>           - Apr 2011
!>    
!> @details  this is slightly different from charmm
!>
      SUBROUTINE ECMAP(CORD,FFGRD,MAPLST,CMAPCO,CORDB,LSCMAPPMA,
     *                 LSCMAPPMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (DEGREE=57.2957795130823D+00)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (ONEFIF=1.0D+00/15.0D+00, ONE=1.0D+00)
C
      INTEGER P1PSI, P2PSI, P3PSI, P4PSI, P1PHI, P2PHI, P3PHI, P4PHI
C
      DIMENSION CORD(3,*),FFGRD(3,*),MAPLST(6,*),CMAPCO(4,4,24,24,3),
     *          CORDB(3,*),LSCMAPPMA(*),LSCMAPPMB(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
C
C     NANDUN THELLAMUREGE, APR 2011, LINCOLN
C     FENGCHAO CUI, HUI LI, MAY 2012
C
      PMF1CM=0.0D+00
      ENCMAP=0.0D+00
      IF(IDOCMAP.EQ.0 .OR. NFFTYP/10000.NE.2) RETURN
C
      DO 100 ICMAP=L1CMAP,L2CMAP
C        -- CALCULATE PHI AND PSI --
         ITYPE=MAPLST(6,ICMAP)
         P1PHI=MAPLST(1,ICMAP)
         P2PHI=MAPLST(2,ICMAP)
         P3PHI=MAPLST(3,ICMAP)
         P4PHI=MAPLST(4,ICMAP)
         X12PHI=CORD(1,P1PHI)-CORD(1,P2PHI)
         Y12PHI=CORD(2,P1PHI)-CORD(2,P2PHI)
         Z12PHI=CORD(3,P1PHI)-CORD(3,P2PHI)
         X13PHI=CORD(1,P1PHI)-CORD(1,P3PHI)
         Y13PHI=CORD(2,P1PHI)-CORD(2,P3PHI)
         Z13PHI=CORD(3,P1PHI)-CORD(3,P3PHI)
         X23PHI=CORD(1,P2PHI)-CORD(1,P3PHI)
         Y23PHI=CORD(2,P2PHI)-CORD(2,P3PHI)
         Z23PHI=CORD(3,P2PHI)-CORD(3,P3PHI)
         X34PHI=CORD(1,P3PHI)-CORD(1,P4PHI)
         Y34PHI=CORD(2,P3PHI)-CORD(2,P4PHI)
         Z34PHI=CORD(3,P3PHI)-CORD(3,P4PHI)
         R12PHI=SQRT(X12PHI*X12PHI+Y12PHI*Y12PHI+Z12PHI*Z12PHI)
         R23PHI=SQRT(X23PHI*X23PHI+Y23PHI*Y23PHI+Z23PHI*Z23PHI)
         R34PHI=SQRT(X34PHI*X34PHI+Y34PHI*Y34PHI+Z34PHI*Z34PHI)
         COS123PHI=(-(X12PHI*X23PHI)-(Y12PHI*Y23PHI)-(Z12PHI*Z23PHI))/
     *               (R12PHI*R23PHI)
         COS234PHI=(-(X23PHI*X34PHI)-(Y23PHI*Y34PHI)-(Z23PHI*Z34PHI))/
     *               (R23PHI*R34PHI)
         SIN2123PHI= 1.0D+00-COS123PHI*COS123PHI
         SIN2234PHI= 1.0D+00-COS234PHI*COS234PHI
         SIN123PHI = SQRT(ABS(SIN2123PHI))
         SIN234PHI = SQRT(ABS(SIN2234PHI))
         IF(ABS(SIN123PHI).LT.1.0D-06) GOTO 100
         IF(ABS(SIN234PHI).LT.1.0D-06) GOTO 100
         ONESINPHI = 1.0D+00/(SIN123PHI*SIN234PHI)
         COSPHI = ONESINPHI*(COS123PHI*COS234PHI-
     *             ((+X12PHI*X34PHI+Y12PHI*Y34PHI+Z12PHI*Z34PHI)/
     *              (R12PHI*R34PHI)))
         IF(COSPHI.GT. ONE) COSPHI= ONE
         IF(COSPHI.LT.-ONE) COSPHI=-ONE
         PHI   = ACOS(COSPHI)
C        -- DIHEDRAL ANGLE IS -180 TO +180 DEGREE
         XNORMPHI  = -Y23PHI*Z34PHI + Z23PHI*Y34PHI
         YNORMPHI  = -Z23PHI*X34PHI + X23PHI*Z34PHI
         ZNORMPHI  = -X23PHI*Y34PHI + Y23PHI*X34PHI
         DOTN12PHI =  X12PHI*XNORMPHI + Y12PHI*YNORMPHI +
     *                Z12PHI*ZNORMPHI
         IF(DOTN12PHI.LT.0.0D+00) PHI = -PHI       !  -180 TO 0 DEGREE
         PHI = PHI*DEGREE
C
C
         P1PSI=MAPLST(2,ICMAP)
         P2PSI=MAPLST(3,ICMAP)
         P3PSI=MAPLST(4,ICMAP)
         P4PSI=MAPLST(5,ICMAP)
         X12PSI=CORD(1,P1PSI)-CORD(1,P2PSI)
         Y12PSI=CORD(2,P1PSI)-CORD(2,P2PSI)
         Z12PSI=CORD(3,P1PSI)-CORD(3,P2PSI)
         X13PSI=CORD(1,P1PSI)-CORD(1,P3PSI)
         Y13PSI=CORD(2,P1PSI)-CORD(2,P3PSI)
         Z13PSI=CORD(3,P1PSI)-CORD(3,P3PSI)
         X23PSI=CORD(1,P2PSI)-CORD(1,P3PSI)
         Y23PSI=CORD(2,P2PSI)-CORD(2,P3PSI)
         Z23PSI=CORD(3,P2PSI)-CORD(3,P3PSI)
         X34PSI=CORD(1,P3PSI)-CORD(1,P4PSI)
         Y34PSI=CORD(2,P3PSI)-CORD(2,P4PSI)
         Z34PSI=CORD(3,P3PSI)-CORD(3,P4PSI)
         R12PSI=SQRT(X12PSI*X12PSI+Y12PSI*Y12PSI+Z12PSI*Z12PSI)
         R23PSI=SQRT(X23PSI*X23PSI+Y23PSI*Y23PSI+Z23PSI*Z23PSI)
         R34PSI=SQRT(X34PSI*X34PSI+Y34PSI*Y34PSI+Z34PSI*Z34PSI)
         COS123PSI=(-(X12PSI*X23PSI)-(Y12PSI*Y23PSI)-(Z12PSI*Z23PSI))/
     *               (R12PSI*R23PSI)
         COS234PSI=(-(X23PSI*X34PSI)-(Y23PSI*Y34PSI)-(Z23PSI*Z34PSI))/
     *               (R23PSI*R34PSI)
         SIN2123PSI= 1.0D+00-COS123PSI*COS123PSI
         SIN2234PSI= 1.0D+00-COS234PSI*COS234PSI
         SIN123PSI = SQRT(ABS(SIN2123PSI))
         SIN234PSI = SQRT(ABS(SIN2234PSI))
         IF(ABS(SIN123PSI).LT.1.0D-06) GOTO 100
         IF(ABS(SIN234PSI).LT.1.0D-06) GOTO 100
         ONESINPSI = 1.0D+00/(SIN123PSI*SIN234PSI)
         COSPSI = ONESINPSI*(COS123PSI*COS234PSI-
     *             ((+X12PSI*X34PSI+Y12PSI*Y34PSI+Z12PSI*Z34PSI)/
     *              (R12PSI*R34PSI)))
         IF(COSPSI.GT. ONE) COSPHI= ONE
         IF(COSPSI.LT.-ONE) COSPHI=-ONE
         PSI   = ACOS(COSPSI)
C        -- DIHEDRAL ANGLE IS -180 TO +180 DEGREE
         XNORMPSI  = -Y23PSI*Z34PSI + Z23PSI*Y34PSI
         YNORMPSI  = -Z23PSI*X34PSI + X23PSI*Z34PSI
         ZNORMPSI  = -X23PSI*Y34PSI + Y23PSI*X34PSI
         DOTN12PSI =  X12PSI*XNORMPSI + Y12PSI*YNORMPSI +
     *                Z12PSI*ZNORMPSI
         IF(DOTN12PSI.LT.0.0D+00) PSI = -PSI       !  -180 TO 0 DEGREE
         PSI = PSI*DEGREE
C
C
         IPHI  = INT((PHI+180.0D+00)*ONEFIF) + 1  ! FROM 1 TO 24
         IF(IPHI.EQ.25) IPHI = 1
         JPSI  = INT((PSI+180.0D+00)*ONEFIF) + 1  ! FROM 1 TO 24
         IF(JPSI.EQ.25) JPSI = 1
         DPHI  = (PHI+180.0D+00)*ONEFIF - IPHI + 1
         DPSI  = (PSI+180.0D+00)*ONEFIF - JPSI + 1
C
C
         DO ICPHI =1,4
            CCCPHI = 1.0D+00
            IF(ICPHI.GT.1) CCCPHI = DPHI**(ICPHI-1)
            DO JCPSI=1,4
               CCCPSI = 1.0D+00
               IF(JCPSI.GT.1) CCCPSI = DPSI**(JCPSI-1)
               CIJ = CMAPCO(JCPSI,ICPHI,JPSI,IPHI,ITYPE)
               ENCMAP=ENCMAP + CIJ*CCCPHI*CCCPSI
            ENDDO
         ENDDO
C
C        - CALCULATING DERIVATIVES
C
         PHIFAC = 0.0D+00
         DO ICPHI =1,4
            DO JCPSI=1,4
               CIJ = CMAPCO(JCPSI,ICPHI,JPSI,IPHI,ITYPE)
               PHIFAC=PHIFAC +
     *                (ICPHI-1)*CIJ*DPHI**(ICPHI-2)*DPSI**(JCPSI-1)
            ENDDO
         ENDDO
         PHIFAC = PHIFAC*TOHART*ONEFIF*DEGREE
C
         A123PHI = 1.0D+00/(R12PHI*SIN2123PHI)
         A432PHI = 1.0D+00/(R34PHI*SIN2234PHI)
         B123PHI = R12PHI*COS123PHI/R23PHI
         B432PHI = R34PHI*COS234PHI/R23PHI
         C123PHI = B123PHI-1.0D+00
C
         DUMY        =  PHIFAC*A123PHI/(R12PHI*R23PHI)
         DEX1        =  DUMY*(-Y12PHI*Z23PHI+Z12PHI*Y23PHI)
         DEY1        =  DUMY*(-Z12PHI*X23PHI+X12PHI*Z23PHI)
         DEZ1        =  DUMY*(-X12PHI*Y23PHI+Y12PHI*X23PHI)
         FFGRD(1,P1PHI)=FFGRD(1,P1PHI)+DEX1
         FFGRD(2,P1PHI)=FFGRD(2,P1PHI)+DEY1
         FFGRD(3,P1PHI)=FFGRD(3,P1PHI)+DEZ1
C
         DUMY        =  PHIFAC*(-A432PHI)/(R23PHI*R34PHI)
         DEX4        =  DUMY*(-Y23PHI*Z34PHI+Z23PHI*Y34PHI)
         DEY4        =  DUMY*(-Z23PHI*X34PHI+X23PHI*Z34PHI)
         DEZ4        =  DUMY*(-X23PHI*Y34PHI+Y23PHI*X34PHI)
         FFGRD(1,P4PHI)=FFGRD(1,P4PHI)+DEX4
         FFGRD(2,P4PHI)=FFGRD(2,P4PHI)+DEY4
         FFGRD(3,P4PHI)=FFGRD(3,P4PHI)+DEZ4
C
         DEX2        =  C123PHI*DEX1 - B432PHI*DEX4
         DEY2        =  C123PHI*DEY1 - B432PHI*DEY4
         DEZ2        =  C123PHI*DEZ1 - B432PHI*DEZ4
         FFGRD(1,P2PHI)=FFGRD(1,P2PHI)+DEX2
         FFGRD(2,P2PHI)=FFGRD(2,P2PHI)+DEY2
         FFGRD(3,P2PHI)=FFGRD(3,P2PHI)+DEZ2
C
         FFGRD(1,P3PHI)=FFGRD(1,P3PHI)-DEX1-DEX2-DEX4
         FFGRD(2,P3PHI)=FFGRD(2,P3PHI)-DEY1-DEY2-DEY4
         FFGRD(3,P3PHI)=FFGRD(3,P3PHI)-DEZ1-DEZ2-DEZ4
C
         VIR(1)  =VIR(1) + DEX1*X13PHI + DEX2*X23PHI - DEX4*X34PHI
         VIR(2)  =VIR(2) + DEY1*Y13PHI + DEY2*Y23PHI - DEY4*Y34PHI
         VIR(3)  =VIR(3) + DEZ1*Z13PHI + DEZ2*Z23PHI - DEZ4*Z34PHI
         IYES = 0
         JYES = 0
         KYES = 0
         LYES = 0
         DO KFIX=1,NFIXMM
            IF(P1PHI.EQ.IFIXMM(KFIX)) IYES = 1
            IF(P2PHI.EQ.IFIXMM(KFIX)) JYES = 1
            IF(P3PHI.EQ.IFIXMM(KFIX)) KYES = 1
            IF(P4PHI.EQ.IFIXMM(KFIX)) LYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.KYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX1*X13PHI
            VIR(2)    =VIR(2)     - DEY1*Y13PHI
            VIR(3)    =VIR(3)     - DEZ1*Z13PHI
         END IF
         IF(JYES.EQ.1.AND.KYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX2*X23PHI
            VIR(2)    =VIR(2)     - DEY2*Y23PHI
            VIR(3)    =VIR(3)     - DEZ2*Z23PHI
         END IF
         IF(KYES.EQ.1.AND.LYES.EQ.1) THEN
            VIR(1)    =VIR(1)     + DEX4*X34PHI
            VIR(2)    =VIR(2)     + DEY4*Y34PHI
            VIR(3)    =VIR(3)     + DEZ4*Z34PHI
         END IF
C
C
         PSIFAC=0.0D+00
         DO ICPHI =1,4
            DO JCPSI=1,4
               CIJ = CMAPCO(JCPSI,ICPHI,JPSI,IPHI,ITYPE)
               PSIFAC=PSIFAC+
     *                (JCPSI-1)*CIJ*DPHI**(ICPHI-1)*DPSI**(JCPSI-2)
            ENDDO
         ENDDO
         PSIFAC = PSIFAC*TOHART*ONEFIF*DEGREE
C
         A123PSI = 1.0D+00/(R12PSI*SIN2123PSI)
         A432PSI = 1.0D+00/(R34PSI*SIN2234PSI)
         B123PSI = R12PSI*COS123PSI/R23PSI
         B432PSI = R34PSI*COS234PSI/R23PSI
         C123PSI = B123PSI-1.0D+00
C
         DUMY         = PSIFAC*A123PSI/(R12PSI*R23PSI)
         DEX1         = DUMY*(-Y12PSI*Z23PSI+Z12PSI*Y23PSI)
         DEY1         = DUMY*(-Z12PSI*X23PSI+X12PSI*Z23PSI)
         DEZ1         = DUMY*(-X12PSI*Y23PSI+Y12PSI*X23PSI)
         FFGRD(1,P1PSI) = FFGRD(1,P1PSI)+DEX1
         FFGRD(2,P1PSI) = FFGRD(2,P1PSI)+DEY1
         FFGRD(3,P1PSI) = FFGRD(3,P1PSI)+DEZ1
C
         DUMY         = PSIFAC*(-A432PSI)/(R23PSI*R34PSI)
         DEX4         = DUMY*(-Y23PSI*Z34PSI+Z23PSI*Y34PSI)
         DEY4         = DUMY*(-Z23PSI*X34PSI+X23PSI*Z34PSI)
         DEZ4         = DUMY*(-X23PSI*Y34PSI+Y23PSI*X34PSI)
         FFGRD(1,P4PSI) = FFGRD(1,P4PSI)+DEX4
         FFGRD(2,P4PSI) = FFGRD(2,P4PSI)+DEY4
         FFGRD(3,P4PSI) = FFGRD(3,P4PSI)+DEZ4
C
         DEX2         = C123PSI*DEX1 - B432PSI*DEX4
         DEY2         = C123PSI*DEY1 - B432PSI*DEY4
         DEZ2         = C123PSI*DEZ1 - B432PSI*DEZ4
         FFGRD(1,P2PSI) = FFGRD(1,P2PSI)+DEX2
         FFGRD(2,P2PSI) = FFGRD(2,P2PSI)+DEY2
         FFGRD(3,P2PSI) = FFGRD(3,P2PSI)+DEZ2
C
         FFGRD(1,P3PSI) = FFGRD(1,P3PSI)-DEX1-DEX2-DEX4
         FFGRD(2,P3PSI) = FFGRD(2,P3PSI)-DEY1-DEY2-DEY4
         FFGRD(3,P3PSI) = FFGRD(3,P3PSI)-DEZ1-DEZ2-DEZ4
C
         VIR(1)  =VIR(1) + DEX1*X13PSI + DEX2*X23PSI - DEX4*X34PSI
         VIR(2)  =VIR(2) + DEY1*Y13PSI + DEY2*Y23PSI - DEY4*Y34PSI
         VIR(3)  =VIR(3) + DEZ1*Z13PSI + DEZ2*Z23PSI - DEZ4*Z34PSI
         IYES = 0
         JYES = 0
         KYES = 0
         LYES = 0
         DO KFIX=1,NFIXMM
            IF(P1PSI.EQ.IFIXMM(KFIX)) IYES = 1
            IF(P2PSI.EQ.IFIXMM(KFIX)) JYES = 1
            IF(P3PSI.EQ.IFIXMM(KFIX)) KYES = 1
            IF(P4PSI.EQ.IFIXMM(KFIX)) LYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.KYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX1*X13PSI
            VIR(2)    =VIR(2)     - DEY1*Y13PSI
            VIR(3)    =VIR(3)     - DEZ1*Z13PSI
         END IF
         IF(JYES.EQ.1.AND.KYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX2*X23PSI
            VIR(2)    =VIR(2)     - DEY2*Y23PSI
            VIR(3)    =VIR(3)     - DEZ2*Z23PSI
         END IF
         IF(KYES.EQ.1.AND.LYES.EQ.1) THEN
            VIR(1)    =VIR(1)     + DEX4*X34PSI
            VIR(2)    =VIR(2)     + DEY4*Y34PSI
            VIR(3)    =VIR(3)     + DEZ4*Z34PSI
         END IF
 100  CONTINUE
      ENCMAP = ENCMAP*TOHART
C
C
      DO 200 III=L1CMAPPMA,L2CMAPPMA
C        -- CALCULATE PHI AND PSI --
         ICMAP=LSCMAPPMA(III)
         ITYPE=MAPLST(6,ICMAP)
         P1PHI=MAPLST(1,ICMAP)
         P2PHI=MAPLST(2,ICMAP)
         P3PHI=MAPLST(3,ICMAP)
         P4PHI=MAPLST(4,ICMAP)
         P1PSI=MAPLST(2,ICMAP)
         P2PSI=MAPLST(3,ICMAP)
         P3PSI=MAPLST(4,ICMAP)
         P4PSI=MAPLST(5,ICMAP)
         X12PHI=CORD(1,P1PHI)-CORD(1,P2PHI)
         Y12PHI=CORD(2,P1PHI)-CORD(2,P2PHI)
         Z12PHI=CORD(3,P1PHI)-CORD(3,P2PHI)
         X13PHI=CORD(1,P1PHI)-CORD(1,P3PHI)
         Y13PHI=CORD(2,P1PHI)-CORD(2,P3PHI)
         Z13PHI=CORD(3,P1PHI)-CORD(3,P3PHI)
         X23PHI=CORD(1,P2PHI)-CORD(1,P3PHI)
         Y23PHI=CORD(2,P2PHI)-CORD(2,P3PHI)
         Z23PHI=CORD(3,P2PHI)-CORD(3,P3PHI)
         X34PHI=CORD(1,P3PHI)-CORD(1,P4PHI)
         Y34PHI=CORD(2,P3PHI)-CORD(2,P4PHI)
         Z34PHI=CORD(3,P3PHI)-CORD(3,P4PHI)
         R12PHI=SQRT(X12PHI*X12PHI+Y12PHI*Y12PHI+Z12PHI*Z12PHI)
         R23PHI=SQRT(X23PHI*X23PHI+Y23PHI*Y23PHI+Z23PHI*Z23PHI)
         R34PHI=SQRT(X34PHI*X34PHI+Y34PHI*Y34PHI+Z34PHI*Z34PHI)
         COS123PHI=(-(X12PHI*X23PHI)-(Y12PHI*Y23PHI)-(Z12PHI*Z23PHI))/
     *               (R12PHI*R23PHI)
         COS234PHI=(-(X23PHI*X34PHI)-(Y23PHI*Y34PHI)-(Z23PHI*Z34PHI))/
     *               (R23PHI*R34PHI)
         SIN2123PHI= 1.0D+00-COS123PHI*COS123PHI
         SIN2234PHI= 1.0D+00-COS234PHI*COS234PHI
         SIN123PHI = SQRT(ABS(SIN2123PHI))
         SIN234PHI = SQRT(ABS(SIN2234PHI))
         IF(ABS(SIN123PHI).LT.1.0D-06) GOTO 200
         IF(ABS(SIN234PHI).LT.1.0D-06) GOTO 200
         ONESINPHI = 1.0D+00/(SIN123PHI*SIN234PHI)
         COSPHI = ONESINPHI*(COS123PHI*COS234PHI-
     *             ((+X12PHI*X34PHI+Y12PHI*Y34PHI+Z12PHI*Z34PHI)/
     *              (R12PHI*R34PHI)))
         IF(COSPHI.GT. ONE) COSPHI= ONE
         IF(COSPHI.LT.-ONE) COSPHI=-ONE
         PHI   = ACOS(COSPHI)
C        -- DIHEDRAL ANGLE IS -180 TO +180 DEGREE
         XNORMPHI  = -Y23PHI*Z34PHI + Z23PHI*Y34PHI
         YNORMPHI  = -Z23PHI*X34PHI + X23PHI*Z34PHI
         ZNORMPHI  = -X23PHI*Y34PHI + Y23PHI*X34PHI
         DOTN12PHI =  X12PHI*XNORMPHI + Y12PHI*YNORMPHI +
     *                Z12PHI*ZNORMPHI
         IF(DOTN12PHI.LT.0.0D+00) PHI = -PHI       !  -180 TO 0 DEGREE
         PHI  = PHI*DEGREE
C
C
         X12PSI=CORD(1,P1PSI)-CORD(1,P2PSI)
         Y12PSI=CORD(2,P1PSI)-CORD(2,P2PSI)
         Z12PSI=CORD(3,P1PSI)-CORD(3,P2PSI)
         X13PSI=CORD(1,P1PSI)-CORD(1,P3PSI)
         Y13PSI=CORD(2,P1PSI)-CORD(2,P3PSI)
         Z13PSI=CORD(3,P1PSI)-CORD(3,P3PSI)
         X23PSI=CORD(1,P2PSI)-CORD(1,P3PSI)
         Y23PSI=CORD(2,P2PSI)-CORD(2,P3PSI)
         Z23PSI=CORD(3,P2PSI)-CORD(3,P3PSI)
         X34PSI=CORD(1,P3PSI)-CORD(1,P4PSI)
         Y34PSI=CORD(2,P3PSI)-CORD(2,P4PSI)
         Z34PSI=CORD(3,P3PSI)-CORD(3,P4PSI)
         R12PSI=SQRT(X12PSI*X12PSI+Y12PSI*Y12PSI+Z12PSI*Z12PSI)
         R23PSI=SQRT(X23PSI*X23PSI+Y23PSI*Y23PSI+Z23PSI*Z23PSI)
         R34PSI=SQRT(X34PSI*X34PSI+Y34PSI*Y34PSI+Z34PSI*Z34PSI)
         COS123PSI=(-(X12PSI*X23PSI)-(Y12PSI*Y23PSI)-(Z12PSI*Z23PSI))/
     *               (R12PSI*R23PSI)
         COS234PSI=(-(X23PSI*X34PSI)-(Y23PSI*Y34PSI)-(Z23PSI*Z34PSI))/
     *               (R23PSI*R34PSI)
         SIN2123PSI= 1.0D+00-COS123PSI*COS123PSI
         SIN2234PSI= 1.0D+00-COS234PSI*COS234PSI
         SIN123PSI = SQRT(ABS(SIN2123PSI))
         SIN234PSI = SQRT(ABS(SIN2234PSI))
         IF(ABS(SIN123PSI).LT.1.0D-06) GOTO 200
         IF(ABS(SIN234PSI).LT.1.0D-06) GOTO 200
         ONESINPSI = 1.0D+00/(SIN123PSI*SIN234PSI)
         COSPSI = ONESINPSI*(COS123PSI*COS234PSI-
     *             ((+X12PSI*X34PSI+Y12PSI*Y34PSI+Z12PSI*Z34PSI)/
     *              (R12PSI*R34PSI)))
         IF(COSPSI.GT. ONE) COSPHI= ONE
         IF(COSPSI.LT.-ONE) COSPHI=-ONE
         PSI   = ACOS(COSPSI)
C        -- DIHEDRAL ANGLE IS -180 TO +180 DEGREE
         XNORMPSI  = -Y23PSI*Z34PSI + Z23PSI*Y34PSI
         YNORMPSI  = -Z23PSI*X34PSI + X23PSI*Z34PSI
         ZNORMPSI  = -X23PSI*Y34PSI + Y23PSI*X34PSI
         DOTN12PSI =  X12PSI*XNORMPSI + Y12PSI*YNORMPSI +
     *                Z12PSI*ZNORMPSI
         IF(DOTN12PSI.LT.0.0D+00) PSI = -PSI       !  -180 TO 0 DEGREE
         PSI  = PSI*DEGREE
C
C
         IPHI  = INT((PHI+180.0D+00)*ONEFIF) + 1  ! FROM 1 TO 24
         IF(IPHI.EQ.25) IPHI = 1
         JPSI  = INT((PSI+180.0D+00)*ONEFIF) + 1  ! FROM 1 TO 24
         IF(JPSI.EQ.25) JPSI = 1
         DPHI  = (PHI+180.0D+00)*ONEFIF - IPHI + 1
         DPSI  = (PSI+180.0D+00)*ONEFIF - JPSI + 1
C
C
         DO ICPHI =1,4
            CCCPHI = 1.0D+00
            IF(ICPHI.GT.1) CCCPHI = DPHI**(ICPHI-1)
            DO JCPSI=1,4
               CCCPSI = 1.0D+00
               IF(JCPSI.GT.1) CCCPSI = DPSI**(JCPSI-1)
               CIJ = CMAPCO(JCPSI,ICPHI,JPSI,IPHI,ITYPE)
               PMF1CM = PMF1CM - CIJ*CCCPHI*CCCPSI
            ENDDO
         ENDDO
C
 200  CONTINUE
C
C
      DO 210 III=L1CMAPPMB,L2CMAPPMB
C        -- CALCULATE PHI AND PSI --
         ICMAP=LSCMAPPMB(III)
         ITYPE=MAPLST(6,ICMAP)
         P1PHI=MAPLST(1,ICMAP)
         P2PHI=MAPLST(2,ICMAP)
         P3PHI=MAPLST(3,ICMAP)
         P4PHI=MAPLST(4,ICMAP)
         P1PSI=MAPLST(2,ICMAP)
         P2PSI=MAPLST(3,ICMAP)
         P3PSI=MAPLST(4,ICMAP)
         P4PSI=MAPLST(5,ICMAP)
         X12PHI=CORD(1,P1PHI)-CORD(1,P2PHI)
         Y12PHI=CORD(2,P1PHI)-CORD(2,P2PHI)
         Z12PHI=CORD(3,P1PHI)-CORD(3,P2PHI)
         X13PHI=CORD(1,P1PHI)-CORD(1,P3PHI)
         Y13PHI=CORD(2,P1PHI)-CORD(2,P3PHI)
         Z13PHI=CORD(3,P1PHI)-CORD(3,P3PHI)
         X23PHI=CORD(1,P2PHI)-CORD(1,P3PHI)
         Y23PHI=CORD(2,P2PHI)-CORD(2,P3PHI)
         Z23PHI=CORD(3,P2PHI)-CORD(3,P3PHI)
         X34PHI=CORD(1,P3PHI)-CORD(1,P4PHI)
         Y34PHI=CORD(2,P3PHI)-CORD(2,P4PHI)
         Z34PHI=CORD(3,P3PHI)-CORD(3,P4PHI)
C
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            DO KFIX=1,NFIXMM
               IF(P1PHI.EQ.IFIXMM(KFIX)) THEN
                  X12PHI = X12PHI - CORD(1,P1PHI) + CORDB(1,P1PHI)
                  Y12PHI = Y12PHI - CORD(2,P1PHI) + CORDB(2,P1PHI)
                  Z12PHI = Z12PHI - CORD(3,P1PHI) + CORDB(3,P1PHI)
                  X13PHI = X13PHI - CORD(1,P1PHI) + CORDB(1,P1PHI)
                  Y13PHI = Y13PHI - CORD(2,P1PHI) + CORDB(2,P1PHI)
                  Z13PHI = Z13PHI - CORD(3,P1PHI) + CORDB(3,P1PHI)
               END IF
               IF(P2PHI.EQ.IFIXMM(KFIX)) THEN
                  X12PHI = X12PHI + CORD(1,P2PHI) - CORDB(1,P2PHI)
                  Y12PHI = Y12PHI + CORD(2,P2PHI) - CORDB(2,P2PHI)
                  Z12PHI = Z12PHI + CORD(3,P2PHI) - CORDB(3,P2PHI)
                  X23PHI = X23PHI - CORD(1,P2PHI) + CORDB(1,P2PHI)
                  Y23PHI = Y23PHI - CORD(2,P2PHI) + CORDB(2,P2PHI)
                  Z23PHI = Z23PHI - CORD(3,P2PHI) + CORDB(3,P2PHI)
               END IF
               IF(P3PHI.EQ.IFIXMM(KFIX)) THEN
                  X13PHI = X13PHI + CORD(1,P3PHI) - CORDB(1,P3PHI)
                  Y13PHI = Y13PHI + CORD(2,P3PHI) - CORDB(2,P3PHI)
                  Z13PHI = Z13PHI + CORD(3,P3PHI) - CORDB(3,P3PHI)
                  X23PHI = X23PHI + CORD(1,P3PHI) - CORDB(1,P3PHI)
                  Y23PHI = Y23PHI + CORD(2,P3PHI) - CORDB(2,P3PHI)
                  Z23PHI = Z23PHI + CORD(3,P3PHI) - CORDB(3,P3PHI)
                  X34PHI = X34PHI - CORD(1,P3PHI) + CORDB(1,P3PHI)
                  Y34PHI = Y34PHI - CORD(2,P3PHI) + CORDB(2,P3PHI)
                  Z34PHI = Z34PHI - CORD(3,P3PHI) + CORDB(3,P3PHI)
               END IF
               IF(P4PHI.EQ.IFIXMM(KFIX)) THEN
                  X34PHI = X34PHI + CORD(1,P4PHI) - CORDB(1,P4PHI)
                  Y34PHI = Y34PHI + CORD(2,P4PHI) - CORDB(2,P4PHI)
                  Z34PHI = Z34PHI + CORD(3,P4PHI) - CORDB(3,P4PHI)
               END IF
            ENDDO
         END IF
C
         R12PHI=SQRT(X12PHI*X12PHI+Y12PHI*Y12PHI+Z12PHI*Z12PHI)
         R23PHI=SQRT(X23PHI*X23PHI+Y23PHI*Y23PHI+Z23PHI*Z23PHI)
         R34PHI=SQRT(X34PHI*X34PHI+Y34PHI*Y34PHI+Z34PHI*Z34PHI)
         COS123PHI=(-(X12PHI*X23PHI)-(Y12PHI*Y23PHI)-(Z12PHI*Z23PHI))/
     *               (R12PHI*R23PHI)
         COS234PHI=(-(X23PHI*X34PHI)-(Y23PHI*Y34PHI)-(Z23PHI*Z34PHI))/
     *               (R23PHI*R34PHI)
         SIN2123PHI= 1.0D+00-COS123PHI*COS123PHI
         SIN2234PHI= 1.0D+00-COS234PHI*COS234PHI
         SIN123PHI = SQRT(ABS(SIN2123PHI))
         SIN234PHI = SQRT(ABS(SIN2234PHI))
         IF(ABS(SIN123PHI).LT.1.0D-06) GOTO 210
         IF(ABS(SIN234PHI).LT.1.0D-06) GOTO 210
         ONESINPHI = 1.0D+00/(SIN123PHI*SIN234PHI)
         COSPHI = ONESINPHI*(COS123PHI*COS234PHI-
     *             ((+X12PHI*X34PHI+Y12PHI*Y34PHI+Z12PHI*Z34PHI)/
     *              (R12PHI*R34PHI)))
         IF(COSPHI.GT. ONE) COSPHI= ONE
         IF(COSPHI.LT.-ONE) COSPHI=-ONE
         PHI   = ACOS(COSPHI)
C        -- DIHEDRAL ANGLE IS -180 TO +180 DEGREE
         XNORMPHI  = -Y23PHI*Z34PHI + Z23PHI*Y34PHI
         YNORMPHI  = -Z23PHI*X34PHI + X23PHI*Z34PHI
         ZNORMPHI  = -X23PHI*Y34PHI + Y23PHI*X34PHI
         DOTN12PHI =  X12PHI*XNORMPHI + Y12PHI*YNORMPHI +
     *                Z12PHI*ZNORMPHI
         IF(DOTN12PHI.LT.0.0D+00) PHI = -PHI       !  -180 TO 0 DEGREE
         PHI  = PHI*DEGREE
C
C
         X12PSI=CORD(1,P1PSI)-CORD(1,P2PSI)
         Y12PSI=CORD(2,P1PSI)-CORD(2,P2PSI)
         Z12PSI=CORD(3,P1PSI)-CORD(3,P2PSI)
         X13PSI=CORD(1,P1PSI)-CORD(1,P3PSI)
         Y13PSI=CORD(2,P1PSI)-CORD(2,P3PSI)
         Z13PSI=CORD(3,P1PSI)-CORD(3,P3PSI)
         X23PSI=CORD(1,P2PSI)-CORD(1,P3PSI)
         Y23PSI=CORD(2,P2PSI)-CORD(2,P3PSI)
         Z23PSI=CORD(3,P2PSI)-CORD(3,P3PSI)
         X34PSI=CORD(1,P3PSI)-CORD(1,P4PSI)
         Y34PSI=CORD(2,P3PSI)-CORD(2,P4PSI)
         Z34PSI=CORD(3,P3PSI)-CORD(3,P4PSI)
C
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            DO KFIX=1,NFIXMM
               IF(P1PSI.EQ.IFIXMM(KFIX)) THEN
                  X12PSI = X12PSI - CORD(1,P1PSI) + CORDB(1,P1PSI)
                  Y12PSI = Y12PSI - CORD(2,P1PSI) + CORDB(2,P1PSI)
                  Z12PSI = Z12PSI - CORD(3,P1PSI) + CORDB(3,P1PSI)
                  X13PSI = X13PSI - CORD(1,P1PSI) + CORDB(1,P1PSI)
                  Y13PSI = Y13PSI - CORD(2,P1PSI) + CORDB(2,P1PSI)
                  Z13PSI = Z13PSI - CORD(3,P1PSI) + CORDB(3,P1PSI)
               END IF
               IF(P2PSI.EQ.IFIXMM(KFIX)) THEN
                  X12PSI = X12PSI + CORD(1,P2PSI) - CORDB(1,P2PSI)
                  Y12PSI = Y12PSI + CORD(2,P2PSI) - CORDB(2,P2PSI)
                  Z12PSI = Z12PSI + CORD(3,P2PSI) - CORDB(3,P2PSI)
                  X23PSI = X23PSI - CORD(1,P2PSI) + CORDB(1,P2PSI)
                  Y23PSI = Y23PSI - CORD(2,P2PSI) + CORDB(2,P2PSI)
                  Z23PSI = Z23PSI - CORD(3,P2PSI) + CORDB(3,P2PSI)
               END IF
               IF(P3PSI.EQ.IFIXMM(KFIX)) THEN
                  X13PSI = X13PSI + CORD(1,P3PSI) - CORDB(1,P3PSI)
                  Y13PSI = Y13PSI + CORD(2,P3PSI) - CORDB(2,P3PSI)
                  Z13PSI = Z13PSI + CORD(3,P3PSI) - CORDB(3,P3PSI)
                  X23PSI = X23PSI + CORD(1,P3PSI) - CORDB(1,P3PSI)
                  Y23PSI = Y23PSI + CORD(2,P3PSI) - CORDB(2,P3PSI)
                  Z23PSI = Z23PSI + CORD(3,P3PSI) - CORDB(3,P3PSI)
                  X34PSI = X34PSI - CORD(1,P3PSI) + CORDB(1,P3PSI)
                  Y34PSI = Y34PSI - CORD(2,P3PSI) + CORDB(2,P3PSI)
                  Z34PSI = Z34PSI - CORD(3,P3PSI) + CORDB(3,P3PSI)
               END IF
               IF(P4PSI.EQ.IFIXMM(KFIX)) THEN
                  X34PSI = X34PSI + CORD(1,P4PSI) - CORDB(1,P4PSI)
                  Y34PSI = Y34PSI + CORD(2,P4PSI) - CORDB(2,P4PSI)
                  Z34PSI = Z34PSI + CORD(3,P4PSI) - CORDB(3,P4PSI)
               END IF
            ENDDO
         END IF
C
         R12PSI=SQRT(X12PSI*X12PSI+Y12PSI*Y12PSI+Z12PSI*Z12PSI)
         R23PSI=SQRT(X23PSI*X23PSI+Y23PSI*Y23PSI+Z23PSI*Z23PSI)
         R34PSI=SQRT(X34PSI*X34PSI+Y34PSI*Y34PSI+Z34PSI*Z34PSI)
         COS123PSI=(-(X12PSI*X23PSI)-(Y12PSI*Y23PSI)-(Z12PSI*Z23PSI))/
     *               (R12PSI*R23PSI)
         COS234PSI=(-(X23PSI*X34PSI)-(Y23PSI*Y34PSI)-(Z23PSI*Z34PSI))/
     *               (R23PSI*R34PSI)
         SIN2123PSI= 1.0D+00-COS123PSI*COS123PSI
         SIN2234PSI= 1.0D+00-COS234PSI*COS234PSI
         SIN123PSI = SQRT(ABS(SIN2123PSI))
         SIN234PSI = SQRT(ABS(SIN2234PSI))
         IF(ABS(SIN123PSI).LT.1.0D-06) GOTO 210
         IF(ABS(SIN234PSI).LT.1.0D-06) GOTO 210
         ONESINPSI = 1.0D+00/(SIN123PSI*SIN234PSI)
         COSPSI = ONESINPSI*(COS123PSI*COS234PSI-
     *             ((+X12PSI*X34PSI+Y12PSI*Y34PSI+Z12PSI*Z34PSI)/
     *              (R12PSI*R34PSI)))
         IF(COSPSI.GT. ONE) COSPHI= ONE
         IF(COSPSI.LT.-ONE) COSPHI=-ONE
         PSI   = ACOS(COSPSI)
C        -- DIHEDRAL ANGLE IS -180 TO +180 DEGREE
         XNORMPSI  = -Y23PSI*Z34PSI + Z23PSI*Y34PSI
         YNORMPSI  = -Z23PSI*X34PSI + X23PSI*Z34PSI
         ZNORMPSI  = -X23PSI*Y34PSI + Y23PSI*X34PSI
         DOTN12PSI =  X12PSI*XNORMPSI + Y12PSI*YNORMPSI +
     *                Z12PSI*ZNORMPSI
         IF(DOTN12PSI.LT.0.0D+00) PSI = -PSI       !  -180 TO 0 DEGREE
         PSI  = PSI*DEGREE
C
C
         IPHI  = INT((PHI+180.0D+00)*ONEFIF) + 1  ! FROM 1 TO 24
         IF(IPHI.EQ.25) IPHI = 1
         JPSI  = INT((PSI+180.0D+00)*ONEFIF) + 1  ! FROM 1 TO 24
         IF(JPSI.EQ.25) JPSI = 1
         DPHI  = (PHI+180.0D+00)*ONEFIF - IPHI + 1
         DPSI  = (PSI+180.0D+00)*ONEFIF - JPSI + 1
C
C
         DO ICPHI =1,4
            CCCPHI = 1.0D+00
            IF(ICPHI.GT.1) CCCPHI = DPHI**(ICPHI-1)
            DO JCPSI=1,4
               CCCPSI = 1.0D+00
               IF(JCPSI.GT.1) CCCPSI = DPSI**(JCPSI-1)
               CIJ = CMAPCO(JCPSI,ICPHI,JPSI,IPHI,ITYPE)
               PMF1CM = PMF1CM + CIJ*CCCPHI*CCCPSI
            ENDDO
         ENDDO
C
 210  CONTINUE
C
      PMF1CM = PMF1CM*TOHART
C
      RETURN
      END
C*MODULE QUANPO  *DECK ELJ126
!>   
!> @brief    LJ energy
!>   
!> @author   Nandun Thellamurege, Hui Li
!>           - Jan 2011
!>    
!> @details  force field LJ term
!>
      SUBROUTINE ELJ126(CORD,FFGRD,SIG,EPS,SIG2,EPS2,L14J,
     *                  NONLS1,L1213J,
     *                  SIGB,EPSB,SIG2B,EPS2B,
     *                  NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                  NONLSPMA,L1213PMA,L14PMA,CORDB,
     *                  NONLSPMB,L1213PMB,L14PMB,FCLJTP,
     *                  NTYPE)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
      PARAMETER (SEVEN=7.0D+00,TWO=2.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),SIG(*),EPS(*),SIG2(*),EPS2(*),
     *          L14J(2,*),NONLS1(2,*),
     *          L1213J(2,*),SIGB(*),EPSB(*),SIG2B(*),EPS2B(*),
     *          NONLSA(2,*),NONLSB(2,*),L1213A(2,*),L1213B(2,*),
     *          L14A(2,*),L14B(2,*),NONLSPMA(2,*),L1213PMA(2,*),
     *          L14PMA(2,*),CORDB(3,*),
     *          NONLSPMB(2,*),L1213PMB(2,*),L14PMB(2,*),
     *          FCLJTP(2,MXMMTP,*),NTYPE(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFEWLD/ SPLIT,IEWALD,KEWALD,NKVEC,
     *                L1KVEC,L2KVEC,LFFRKEXPEL,LFFRKVEC,
     *                LFFKVEC,LFFTCHCH,LFFCOSCH,LFFSINCH
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFFRE2/ N1FFAT,N1BOND,N1ANGL,N1DIHR,N1DIHB,N1CMAP,N1WAGG,
     *                N2FFAT,N2BOND,N2ANGL,N2DIHR,N2DIHB,N2CMAP,N2WAGG,
     *                LFF2ATMNAM,LFF2CORD,LFF2ZANF,LFF2ZMAS,
     *                LFF2ONEMAS,LFF2CHARG,LFF2POL,
     *                LFF2SIG,LFF2EPS,LFF2SIG2,LFF2EPS2,
     *                LFF2BOND0,LFF2FCBOND,LFF2ANGL0,LFF2FCANGL,
     *                LFF2FCWAGG,LFF2DIHB0,LFF2FCDIHB,
     *                LFF2VROT,LFF2NNN,LFF2GAMA,LFF2IPAIR,
     *                LFF2KLIST,LFF2LLIST,LFF2MLIST,LFF2NLIST,
     *                LFF2VEL,LFF2QMVEL,LFF2CLPR,LFF2ZLPR,
     *                LFF2NLPR,LFF2MAPLST,LFFKFREEA,LFFKFREEB,
     *                LFFLISTB2A,NTODOA,LFFNONLSA,NTODOB,LFFNONLSB,
     *                N1213A,LFFL1213A,N1213B,LFFL1213B,
     *                N14A,LFFL14A,N14B,LFFL14B,
     *                NTODOPMA,LFFNONLSPMA,NBONDPMA,LFFLSBONDPMA,
     *                NANGLPMA,LFFLSANGLPMA,NDIHRPMA,LFFLSDIHRPMA,
     *                NDIHBPMA,LFFLSDIHBPMA,NWAGGPMA,LFFLSWAGGPMA,
     *                NCMAPPMA,LFFLSCMAPPMA,
     *                N1213PMA,LFFL1213PMA,
     *                N14PMA,LFFL14PMA,
     *                NTODOPMB,LFFNONLSPMB,NBONDPMB,LFFLSBONDPMB,
     *                NANGLPMB,LFFLSANGLPMB,NDIHRPMB,LFFLSDIHRPMB,
     *                NDIHBPMB,LFFLSDIHBPMB,NWAGGPMB,LFFLSWAGGPMB,
     *                NCMAPPMB,LFFLSCMAPPMB,
     *                N1213PMB,LFFL1213PMB,
     *                N14PMB,LFFL14PMB
      COMMON /FFMPT2/ MXMMTP,LFFKBLST,LFFFCSTBD,LFFFCDIHR,
     *                LFFFCLJTP,LFFNTYPE,
     *                LFF2KBLST,LFF2FCSTBD,LFF2FCDIHR,
     *                LFF2FCLJTP,LFF2NTYPE
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C     FENGCHAO CUI, HUI LI, MAY 2012, LINCOLN
C     HONGBO ZHU, HUI LI, NOV 3, LINCOLN
C
C     FORMULA:  E = 4*EPSILON*[(SIGMA/R)**12 - (SIGMA/R)**6)]
C
C               SIGMA(I,J)   = 0.5*(SIGMA_I   + SIGMA_J  )
C                         OR = SQRT(SIGMA_I*SIGMA_J)
C               EPSILON(I,J) = SQRT(EPSILON_I * EPSILON_J)
C
      ENLJR  =ZERO
      ENLJD  =ZERO
      SOL1LJ =ZERO
      SOL2LJ =ZERO
      PMF1LJ =ZERO
      IF(IDOLJ.EQ.0) RETURN
C
      LLTODO = 2
      IF(IFEPTOP.GT.0.AND.IDOPOL.EQ.0.AND.IEWALD.EQ.0) THEN
         IF(    NAT.LE.0.OR.         ! FFMD1
     *      MEANFLD.GT.0) THEN       ! FFMD3
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1.AND.NAT.GT.0)LLTODO= 8
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1.AND.NAT.LE.0)LLTODO= 8
C           IF(IFEPTOP.EQ.2.AND.IFEPTYP.EQ.1.AND.NAT.GT.0)LLTODO= 0
            IF(IFEPTOP.EQ.2.AND.IFEPTYP.EQ.1.AND.NAT.LE.0)LLTODO=10
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.GT.0)LLTODO= 8
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.LE.0)LLTODO=14 ! NO (9,10)
         END IF
      END IF
      DO 110 LL=1,LLTODO
      IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.LE.0)THEN
         IF(LL.GE.9.AND.LL.LE.10) GOTO 110
      END IF
      IF(LL.EQ.1) THEN
         NN1  = 1
         NN2  = NTODO
         SIGN = 1.0D+00
         DWT1 = SIGN
         DWT2 = SIGN
      END IF
      IF(LL.EQ.2) THEN
         NN1  = L11213
         NN2  = L21213
         SIGN = -1.0D+00
         DWT1 = SIGN
         DWT2 = SIGN
      END IF
      IF(LL.EQ.3) THEN
         NN1  = 1
         NN2  = NTODOA            ! REMOVE A SOL
         SIGN = -1.0D+00
         DWT1 = SIGN
         DWT2 = SIGN
      END IF
      IF(LL.EQ.4) THEN
         NN1  = L11213A
         NN2  = L21213A
         SIGN = 1.0D+00
         DWT1 = SIGN
         DWT2 = SIGN
      END IF
      IF(LL.EQ.5) THEN
         NN1  = 1
         NN2  = NTODOA
         SIGN = 1 - WSIMUL        ! ADD (1-WSIMUL) A SOL
         DWT1 = 1 - WPERT1
         DWT2 = 1 - WPERT2
         SCAN = 1 - WSIMUL
         SCAN1= 1 - WPERT1
         SCAN2= 1 - WPERT2
      END IF
      IF(LL.EQ.6) THEN
         NN1  = L11213A
         NN2  = L21213A
         SIGN = -1 + WSIMUL
         DWT1 = -1 + WPERT1
         DWT2 = -1 + WPERT2
         SCAN =  1 - WSIMUL
         SCAN1=  1 - WPERT1
         SCAN2=  1 - WPERT2
      END IF
      IF(LL.EQ.7) THEN
         NN1  = 1
         NN2  = NTODOB
         SIGN = WSIMUL            ! ADD WSIMUL B SOL
         DWT1 = WPERT1
         DWT2 = WPERT2
         SCAN = WSIMUL
         SCAN1= WPERT1
         SCAN2= WPERT2
      END IF
      IF(LL.EQ.8) THEN
         NN1  = L11213B
         NN2  = L21213B
         SIGN = -WSIMUL
         DWT1 = -WPERT1
         DWT2 = -WPERT2
         SCAN =  WSIMUL
         SCAN1=  WPERT1
         SCAN2=  WPERT2
      END IF
      IF(LL.EQ.9) THEN
         NN1  = 1
         NN2  = NTODOB            ! REMOVE B SOL
         SIGN = -1.0D+00
         DWT1 = SIGN
         DWT2 = SIGN
      END IF
      IF(LL.EQ.10) THEN
         NN1  = L11213B
         NN2  = L21213B
         SIGN = 1.0D+00
         DWT1 = SIGN
         DWT2 = SIGN
      END IF
      IF(LL.EQ.11) THEN
         NN1  = 1
         NN2  = NTODOPMA
         SIGN = -WSIMUL
         DWT1 = -WPERT1     !  NEGATIVE A
         DWT2 = -WPERT2
      END IF
      IF(LL.EQ.12) THEN
         NN1  = L11213PMA
         NN2  = L21213PMA
         SIGN = +WSIMUL
         DWT1 = +WPERT1
         DWT2 = +WPERT2
      END IF
      IF(LL.EQ.13) THEN
         NN1  = 1
         NN2  = NTODOPMB
         SIGN = +WSIMUL
         DWT1 = +WPERT1     !  POSITIVE B
         DWT2 = +WPERT2
      END IF
      IF(LL.EQ.14) THEN
         NN1  = L11213PMB
         NN2  = L21213PMB
         SIGN = -WSIMUL
         DWT1 = -WPERT1
         DWT2 = -WPERT2
      END IF
      DO 100 III=NN1, NN2
         IF(LL.EQ.1) THEN
            I = NONLS1(1,III)
            J = NONLS1(2,III)
         END IF
         IF(LL.EQ.2) THEN
            I = L1213J(1,III)
            J = L1213J(2,III)
         END IF
         IF(LL.EQ.3) THEN
            I = NONLSA(1,III)
            J = NONLSA(2,III)
         END IF
         IF(LL.EQ.4) THEN
            I = L1213A(1,III)
            J = L1213A(2,III)
         END IF
         IF(LL.EQ.5) THEN
            I = NONLSA(1,III)
            J = NONLSA(2,III)
         END IF
         IF(LL.EQ.6) THEN
            I = L1213A(1,III)
            J = L1213A(2,III)
         END IF
         IF(LL.EQ.7) THEN
            I = NONLSB(1,III)
            J = NONLSB(2,III)
         END IF
         IF(LL.EQ.8) THEN
            I = L1213B(1,III)
            J = L1213B(2,III)
         END IF
         IF(LL.EQ.9) THEN
            I = NONLSB(1,III)
            J = NONLSB(2,III)
         END IF
         IF(LL.EQ.10) THEN
            I = L1213B(1,III)
            J = L1213B(2,III)
         END IF
         IF(LL.EQ.11) THEN
            I = NONLSPMA(1,III)
            J = NONLSPMA(2,III)
         END IF
         IF(LL.EQ.12) THEN
            I = L1213PMA(1,III)
            J = L1213PMA(2,III)
         END IF
         IF(LL.EQ.13) THEN
            I = NONLSPMB(1,III)
            J = NONLSPMB(2,III)
         END IF
         IF(LL.EQ.14) THEN
            I = L1213PMB(1,III)
            J = L1213PMB(2,III)
         END IF
         IF(I.EQ.0.OR.J.EQ.0) GOTO 100
C
         IF(NFFTYP/10000.NE.5) THEN
            SIGI  = SIG(I)
            EPSI  = EPS(I)
            SIGJ  = SIG(J)
            EPSJ  = EPS(J)
            IF(IFEPTOP.EQ.1.AND.(LL.EQ. 7.OR.LL.EQ. 8.OR.
     *                           LL.EQ.13.OR.LL.EQ.14)) THEN
               SIGI  = SIGB(I)
               EPSI  = EPSB(I)
               SIGJ  = SIGB(J)
               EPSJ  = EPSB(J)
            END IF
            IF(SIGI.EQ.ZERO .OR. EPSI.EQ.ZERO) GOTO 100
            IF(SIGJ.EQ.ZERO .OR. EPSJ.EQ.ZERO) GOTO 100
         END IF
         IF(NFFTYP/10000.EQ.5) THEN
            II    = NTYPE(I)
            JJ    = NTYPE(J)
            RRIJ  = FCLJTP(1,JJ,II)
            EPSNO = FCLJTP(2,JJ,II)
            IF(RRIJ.EQ.ZERO.OR.EPSNO.EQ.ZERO) GOTO 100
            RRIJ2 = RRIJ*RRIJ
            RRIJ6 = RRIJ2*RRIJ2*RRIJ2
            RRIJ7 = RRIJ6*RRIJ
         END IF
C
         X     = CORD(1,I) - CORD(1,J)
         Y     = CORD(2,I) - CORD(2,J)
         Z     = CORD(3,I) - CORD(3,J)
         IF(IFEPTOP.EQ.1.AND.(LL.EQ. 7.OR.LL.EQ. 8.OR.
     *                        LL.EQ.13.OR.LL.EQ.14)) THEN
            DO IFIXB = 1, NFIXMMB
               IF(I.EQ.IFIXMMB(IFIXB)) THEN
                  X = X + CORDB(1,I) - CORD(1,I)
                  Y = Y + CORDB(2,I) - CORD(2,I)
                  Z = Z + CORDB(3,I) - CORD(3,I)
               END IF
               IF(J.EQ.IFIXMMB(IFIXB)) THEN
                  X = X - CORDB(1,J) + CORD(1,J)
                  Y = Y - CORDB(2,J) + CORD(2,J)
                  Z = Z - CORDB(3,J) + CORD(3,J)
               END IF
            ENDDO
         END IF
         PBCX  = XBOX * ANINT(X*ONEXBOX)
         PBCY  = YBOX * ANINT(Y*ONEYBOX)
         PBCZ  = ZBOX * ANINT(Z*ONEZBOX)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         IF(R2.GT.SWRB2) GOTO 100
         IF(R2.LT.0.01D+00) GOTO 100
         CALL SWFUNC(R2,X,Y,Z)
         ONER2 = ONE/R2
C
         IF(NFFTYP/10000.NE.5) THEN
            SIG1  = 0.5D+00*(SIGI+SIGJ)
            FOUREP= EPSI*EPSJ
            SIGSQ = SIG1*SIG1*ONER2
            IF(NFFTYP/10000.EQ.4) SIGSQ  = SIGI*SIGJ*ONER2
            DISP  = -SIGSQ*SIGSQ*SIGSQ
            REP   = DISP*DISP
C
            IF(ISOFTCR.GT.0 .AND. LL.GT.4.AND.LL.LT.9) THEN
               DISSOFT  =-ONE/DISP
               SOFT     = SOFTALJ*(ONE-SCAN)*(ONE-SCAN)+DISSOFT
               ONESOFT  = ONE/SOFT
               ONESOF2  = ONESOFT*ONESOFT
               ONESOF3  = ONESOFT*ONESOF2
               SOFTW1   = SOFTALJ*(ONE-SCAN1)*(ONE-SCAN1)+DISSOFT
               ONESOFTW1= ONE/SOFTW1
               ONESOF2W1= ONESOFTW1*ONESOFTW1
               SOFTW2   = SOFTALJ*(ONE-SCAN2)*(ONE-SCAN2)+DISSOFT
               ONESOFTW2= ONE/SOFTW2
               ONESOF2W2= ONESOFTW2*ONESOFTW2
C
               EPAIRR  = FOUREP*ONESOF2
               EPAIRD  =-FOUREP*ONESOFT
               EPAIRR  = EPAIRR*SIGN
               EPAIRD  = EPAIRD*SIGN
               DUM     =-SWF*6.0D+00*FOUREP*(2.0D+00*ONESOF3
     *                                -ONESOF2)*DISSOFT*ONER2*SIGN
               EPAIRRW1= FOUREP*ONESOF2W1*DWT1
               EPAIRDW1=-FOUREP*ONESOFTW1*DWT1
               EPAIRRW2= FOUREP*ONESOF2W2*DWT2
               EPAIRDW2=-FOUREP*ONESOFTW2*DWT2
            ELSE
               EPAIRR  = FOUREP*REP
               EPAIRD  = FOUREP*DISP
               EPAIRR  = EPAIRR*SIGN
               EPAIRD  = EPAIRD*SIGN
               DUM     =-SWF*6.0D+00*FOUREP*(2.0D+00*REP+DISP)*
     *                   ONER2*SIGN
               IF(LL.GT.4.AND.LL.NE.9.AND.LL.NE.10) THEN
                  EPAIRRW = FOUREP*REP
                  EPAIRDW = FOUREP*DISP
                  EPAIRRW1= EPAIRRW*DWT1
                  EPAIRDW1= EPAIRDW*DWT1
                  EPAIRRW2= EPAIRRW*DWT2
                  EPAIRDW2= EPAIRDW*DWT2
               END IF
            END IF
         END IF
         IF(NFFTYP/10000.EQ.5) THEN
            R       = SQRT(R2)
            ONER    = ONE/R
            R6      = R2*R2*R2
            R7      = R6*R
            C1LJ    = ONE/(R+0.07D+00*RRIJ)
            C2LJ    = ONE/(R7+0.12D+00*RRIJ7)
            FM1VDW  = 1.07D+00*RRIJ*C1LJ
            FM1VDW2 = FM1VDW*FM1VDW
            FM1VDW6 = FM1VDW2*FM1VDW2*FM1VDW2
            FM1VDW7 = FM1VDW6*FM1VDW
            FM2VDW  = 1.12D+00*RRIJ7*C2LJ
C
            EPAIRR   = EPSNO*FM1VDW7*FM2VDW
            EPAIRD   =-EPSNO*FM1VDW7*TWO
            EPAIRR   = EPAIRR*SIGN
            EPAIRD   = EPAIRD*SIGN
            DUM      = -SWF*EPSNO*SEVEN*FM1VDW7*
     *                 ( (FM2VDW-TWO)*C1LJ + FM2VDW*C2LJ*R6 )
     *                 *ONER*SIGN
            IF(LL.GT.4.AND.LL.NE.9.AND.LL.NE.10) THEN
               EPAIRRW = EPSNO*FM1VDW7*FM2VDW
               EPAIRDW =-EPSNO*FM1VDW7*TWO
               EPAIRRW1= EPAIRRW*DWT1
               EPAIRDW1= EPAIRDW*DWT1
               EPAIRRW2= EPAIRRW*DWT2
               EPAIRDW2= EPAIRDW*DWT2
            END IF
         END IF
C
         EPAIR = EPAIRR+EPAIRD
         ENLJR = ENLJR + EPAIRR*SWF
         ENLJD = ENLJD + EPAIRD*SWF
         IF(LL.GE. 5.AND.LL.LE. 8) THEN
            SOL1LJ= SOL1LJ + (EPAIRRW1+EPAIRDW1-EPAIRR-EPAIRD)*SWF
            SOL2LJ= SOL2LJ + (EPAIRRW2+EPAIRDW2-EPAIRR-EPAIRD)*SWF
         END IF
         IF(LL.GE.11.AND.LL.LE.14) THEN
            PMF1LJ= PMF1LJ + (EPAIRRW1+EPAIRDW1-EPAIRR-EPAIRD)*SWF
         END IF
C
         DEX   = DUM*X + EPAIR*SWFDX
         DEY   = DUM*Y + EPAIR*SWFDY
         DEZ   = DUM*Z + EPAIR*SWFDZ
         FFGRD(1,I)=FFGRD(1,I) + DEX
         FFGRD(2,I)=FFGRD(2,I) + DEY
         FFGRD(3,I)=FFGRD(3,I) + DEZ
         FFGRD(1,J)=FFGRD(1,J) - DEX
         FFGRD(2,J)=FFGRD(2,J) - DEY
         FFGRD(3,J)=FFGRD(3,J) - DEZ
         VIR(1)    =VIR(1)     + DEX*X
         VIR(2)    =VIR(2)     + DEY*Y
         VIR(3)    =VIR(3)     + DEZ*Z
         IYES = 0
         JYES = 0
         DO KFIX=1,NFIXMM
            IF(I.EQ.IFIXMM(KFIX)) IYES = 1
            IF(J.EQ.IFIXMM(KFIX)) JYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.JYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX*X
            VIR(2)    =VIR(2)     - DEY*Y
            VIR(3)    =VIR(3)     - DEZ*Z
         END IF
 100  CONTINUE
 110  CONTINUE
C
C
C     -- REMOVE ALL 1-4 PAIRS, THEN ADD THEM BACK.
C        WHEN ADD BACK, SELECT THE CORRECT 
C        L-J PARAMETERS. -HL.
C
      IF(WT14LJ.EQ.1.0D+00) THEN
      LLTODO = 1
      IF(IFEPTOP.GT.0.AND.IDOPOL.EQ.0) THEN
         IF(    NAT.LE.0.OR.         ! FFMD1
     *      MEANFLD.GT.0) THEN       ! FFMD3
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1.AND.NAT.GT.0)LLTODO= 4
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1.AND.NAT.LE.0)LLTODO= 4
C           IF(IFEPTOP.EQ.2.AND.IFEPTYP.EQ.1.AND.NAT.GT.0)LLTODO= 0 
            IF(IFEPTOP.EQ.2.AND.IFEPTYP.EQ.1.AND.NAT.LE.0)LLTODO= 5
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.GT.0)LLTODO= 4
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.LE.0)LLTODO= 7
         END IF
      END IF
      DO 390 LL=1,LLTODO
      IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.LE.0)THEN
         IF(LL.EQ.5) GOTO 390
      END IF
      IF(LL.EQ.1) THEN
         NN1  = L1N14J
         NN2  = L2N14J 
         SIGN = 1.0D+00
         DWT1 = ZERO
         DWT2 = ZERO
      END IF
      IF(LL.EQ.2) THEN
         NN1  = L1N14A
         NN2  = L2N14A
         SIGN = -1.0D+00
         DWT1 = ZERO
         DWT2 = ZERO
      END IF
      IF(LL.EQ.3) THEN
         NN1  = L1N14A
         NN2  = L2N14A
         SIGN = 1 - WSIMUL
         DWT1 = 1 - WPERT1
         DWT2 = 1 - WPERT2
         SCAN = 1 - WSIMUL
         SCAN1= 1 - WPERT1
         SCAN2= 1 - WPERT2
      END IF
      IF(LL.EQ.4) THEN
         NN1  = L1N14B 
         NN2  = L2N14B 
         SIGN = WSIMUL
         DWT1 = WPERT1
         DWT2 = WPERT2
         SCAN = WSIMUL
         SCAN1= WPERT1
         SCAN2= WPERT2
      END IF
      IF(LL.EQ.5) THEN
         NN1  = L1N14B
         NN2  = L2N14B
         SIGN = -1.0D+00
         DWT1 = ZERO
         DWT2 = ZERO
      END IF
      IF(LL.EQ.6) THEN
         NN1  = L1N14PMA
         NN2  = L2N14PMA
         SIGN = -WSIMUL
         DWT1 = -WPERT1
         DWT2 = -WPERT2
      END IF
      IF(LL.EQ.7) THEN
         NN1  = L1N14PMB
         NN2  = L2N14PMB
         SIGN = +WSIMUL
         DWT1 = +WPERT1
         DWT2 = +WPERT2
      END IF
      DO 400 III=NN1, NN2
         IF(LL.EQ.1) THEN
            I = L14J(1,III)
            J = L14J(2,III)
         END IF
         IF(LL.EQ.2) THEN
            I = L14A(1,III)
            J = L14A(2,III)
         END IF
         IF(LL.EQ.3) THEN
            I = L14A(1,III)
            J = L14A(2,III)
         END IF
         IF(LL.EQ.4) THEN
            I = L14B(1,III)
            J = L14B(2,III)
         END IF
         IF(LL.EQ.5) THEN
            I = L14B(1,III)
            J = L14B(2,III)
         END IF
         IF(LL.EQ.6) THEN
            I = L14PMA(1,III)
            J = L14PMA(2,III)
         END IF
         IF(LL.EQ.7) THEN
            I = L14PMB(1,III)
            J = L14PMB(2,III)
         END IF
         IF(I.LE.0.OR.J.LE.0) GOTO 400
         SIG2I  = SIG2(I)
         EPS2I  = EPS2(I)
         SIG2J  = SIG2(J)
         EPS2J  = EPS2(J)
         IF(IFEPTOP.EQ.1.AND.(LL.EQ.4.OR.LL.EQ.7))THEN
            SIG2I = SIG2B(I)
            EPS2I = EPS2B(I)
            SIG2J = SIG2B(J)
            EPS2J = EPS2B(J)
         END IF
         IF(SIG2I.EQ.ZERO.AND.EPS2I.EQ.ZERO .AND.
     *      SIG2J.EQ.ZERO.AND.EPS2J.EQ.ZERO) GOTO 400
         DO 410 LLL = 1, 2
            IF(LLL.EQ.1) THEN
               FACT = -1.0D+00     ! REMOVE
               SIGI  = SIG(I)
               EPSI  = EPS(I)
               SIGJ  = SIG(J)
               EPSJ  = EPS(J)
               IF(IFEPTOP.EQ.1.AND.(LL.EQ.4.OR.LL.EQ.7))THEN
                  SIGI  = SIGB(I)
                  EPSI  = EPSB(I)
                  SIGJ  = SIGB(J)
                  EPSJ  = EPSB(J)
               END IF
            END IF
            IF(LLL.EQ.2) THEN
               FACT =  1.0D+00     ! ADD
               SIGI  = SIG(I)
               EPSI  = EPS(I)
               SIGJ  = SIG(J)
               EPSJ  = EPS(J)
               IF(SIG2I.GT.ZERO.AND.EPS2I.GT.ZERO) THEN
                  SIGI = SIG2I
                  EPSI = EPS2I
               END IF
               IF(SIG2J.GT.ZERO.AND.EPS2J.GT.ZERO) THEN
                  SIGJ = SIG2J
                  EPSJ = EPS2J
               END IF
            END IF
            IF(SIGI.EQ.ZERO .OR. EPSI.EQ.ZERO) GOTO 410
            IF(SIGJ.EQ.ZERO .OR. EPSJ.EQ.ZERO) GOTO 410
            X     = CORD(1,I) - CORD(1,J)
            Y     = CORD(2,I) - CORD(2,J)
            Z     = CORD(3,I) - CORD(3,J)
            IF(IFEPTOP.EQ.1.AND.(LL.EQ.4.OR.LL.EQ.7))THEN
               DO IFIXB = 1, NFIXMMB
                  IF(I.EQ.IFIXMMB(IFIXB)) THEN
                     X = X + CORDB(1,I) - CORD(1,I)
                     Y = Y + CORDB(2,I) - CORD(2,I)
                     Z = Z + CORDB(3,I) - CORD(3,I)
                  END IF
                  IF(J.EQ.IFIXMMB(IFIXB)) THEN
                     X = X - CORDB(1,J) + CORD(1,J)
                     Y = Y - CORDB(2,J) + CORD(2,J)
                     Z = Z - CORDB(3,J) + CORD(3,J)
                  END IF
               ENDDO
            END IF
            R2    = X*X+Y*Y+Z*Z
            CALL SWFUNC(R2,X,Y,Z)
            ONER2 = ONE/R2
C
            SIG1  = 0.5D+00*(SIGI+SIGJ)
            FOUREP= EPSI*EPSJ
            SIGSQ = SIG1*SIG1*ONER2
            IF(NFFTYP/10000.EQ.4) SIGSQ  = SIGI*SIGJ*ONER2
            DISP  = -SIGSQ*SIGSQ*SIGSQ
            REP   = DISP*DISP
C
            IF(ISOFTCR.GT.0.AND.LL.GT.2.AND.LL.LT.5) THEN
               DISSOFT  =-ONE/DISP
               SOFT     = SOFTALJ*(ONE-SCAN)*(ONE-SCAN)+DISSOFT
               ONESOFT  = ONE/SOFT
               ONESOF2  = ONESOFT*ONESOFT
               ONESOF3  = ONESOFT*ONESOF2
               SOFTW1   = SOFTALJ*(ONE-SCAN1)*(ONE-SCAN1)+DISSOFT
               ONESOFTW1= ONE/SOFTW1
               ONESOF2W1= ONESOFTW1*ONESOFTW1
               SOFTW2   = SOFTALJ*(ONE-SCAN2)*(ONE-SCAN2)+DISSOFT
               ONESOFTW2= ONE/SOFTW2
               ONESOF2W2= ONESOFTW2*ONESOFTW2
C
               EPAIRR  = FOUREP*ONESOF2
               EPAIRD  =-FOUREP*ONESOFT
               EPAIRR  = EPAIRR*FACT*SIGN
               EPAIRD  = EPAIRD*FACT*SIGN
               DUM     =-SWF*6.0D+00*FOUREP*(2.0D+00*ONESOF3
     *                               -ONESOF2)*DISSOFT*ONER2*FACT*SIGN
               EPAIRRW = FOUREP*FACT
               EPAIRDW =-FOUREP*FACT
               EPAIRRW1= EPAIRRW*ONESOF2W1*DWT1
               EPAIRDW1= EPAIRDW*ONESOFTW1*DWT1
               EPAIRRW2= EPAIRRW*ONESOF2W2*DWT2
               EPAIRDW2= EPAIRDW*ONESOFTW2*DWT2
            ELSE
               EPAIRR  = FOUREP*REP
               EPAIRD  = FOUREP*DISP
               EPAIRR  = EPAIRR*FACT*SIGN
               EPAIRD  = EPAIRD*FACT*SIGN
               DUM     =-SWF*6.0D+00*FOUREP*(2.0D+00*REP
     *                                      +DISP)*ONER2*FACT*SIGN
               IF(LL.GT.2.AND.LL.NE.5) THEN
                  EPAIRRW = FOUREP*REP*FACT
                  EPAIRDW = FOUREP*DISP*FACT
                  EPAIRRW1= EPAIRRW*DWT1
                  EPAIRDW1= EPAIRDW*DWT1
                  EPAIRRW2= EPAIRRW*DWT2
                  EPAIRDW2= EPAIRDW*DWT2
               END IF
            END IF
C
            EPAIR = EPAIRR+EPAIRD
            ENLJR = ENLJR + EPAIRR*SWF
            ENLJD = ENLJD + EPAIRD*SWF
            IF(LL.GE. 3.AND.LL.LE. 4) THEN
               SOL1LJ= SOL1LJ + (EPAIRRW1+EPAIRDW1-EPAIRR-EPAIRD)*SWF
               SOL2LJ= SOL2LJ + (EPAIRRW2+EPAIRDW2-EPAIRR-EPAIRD)*SWF
            END IF
            IF(LL.GE. 6.AND.LL.LE. 7) THEN
               PMF1LJ= PMF1LJ + (EPAIRRW1+EPAIRDW1-EPAIRR-EPAIRD)*SWF
            END IF
            DEX   = DUM*X + EPAIR*SWFDX
            DEY   = DUM*Y + EPAIR*SWFDY
            DEZ   = DUM*Z + EPAIR*SWFDZ
            FFGRD(1,I)=FFGRD(1,I) + DEX
            FFGRD(2,I)=FFGRD(2,I) + DEY
            FFGRD(3,I)=FFGRD(3,I) + DEZ
            FFGRD(1,J)=FFGRD(1,J) - DEX
            FFGRD(2,J)=FFGRD(2,J) - DEY
            FFGRD(3,J)=FFGRD(3,J) - DEZ
            VIR(1)    =VIR(1)     + DEX*X
            VIR(2)    =VIR(2)     + DEY*Y
            VIR(3)    =VIR(3)     + DEZ*Z
            IYES = 0
            JYES = 0
            DO KFIX=1,NFIXMM
               IF(I.EQ.IFIXMM(KFIX)) IYES = 1
               IF(J.EQ.IFIXMM(KFIX)) JYES = 1
            ENDDO
            IF(IYES.EQ.1.AND.JYES.EQ.1) THEN
               VIR(1)    =VIR(1)     - DEX*X
               VIR(2)    =VIR(2)     - DEY*Y
               VIR(3)    =VIR(3)     - DEZ*Z
            END IF
 410     CONTINUE
 400  CONTINUE
 390  CONTINUE
      END IF
C
C     -- IF WT14LJ IS NOT 1.0, ADD (WT14LJ-1)
C
      IF(WT14LJ.NE.1.0D+00) THEN
         FACT   =  WT14LJ - 1.0D+00
         LLTODO = 1
         IF(IFEPTOP.GT.0.AND.IDOPOL.EQ.0) THEN
            IF(    NAT.LE.0.OR.         ! FFMD1
     *         MEANFLD.GT.0) THEN       ! FFMD3
               IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1.AND.NAT.GT.0)LLTODO= 4
               IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1.AND.NAT.LE.0)LLTODO= 4
C              IF(IFEPTOP.EQ.2.AND.IFEPTYP.EQ.1.AND.NAT.GT.0)LLTODO= 0
               IF(IFEPTOP.EQ.2.AND.IFEPTYP.EQ.1.AND.NAT.LE.0)LLTODO= 5
               IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.GT.0)LLTODO= 4
               IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.LE.0)LLTODO= 7
            END IF
         END IF
         DO 490 LL=1,LLTODO
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.LE.0)THEN
            IF(LL.EQ.5) GOTO 490
         END IF
         IF(LL.EQ.1) THEN
            NN1  = L1N14J
            NN2  = L2N14J 
            SIGN = 1.0D+00
            DWT1 = ZERO
            DWT2 = ZERO
         END IF
         IF(LL.EQ.2) THEN
            NN1  = L1N14A
            NN2  = L2N14A
            SIGN = -1.0D+00
            DWT1 = ZERO
            DWT2 = ZERO
         END IF
         IF(LL.EQ.3) THEN
            NN1  = L1N14A
            NN2  = L2N14A
            SIGN = 1 - WSIMUL
            DWT1 = 1 - WPERT1
            DWT2 = 1 - WPERT2
            SCAN = 1 - WSIMUL
            SCAN1= 1 - WPERT1
            SCAN2= 1 - WPERT2
         END IF
         IF(LL.EQ.4) THEN
            NN1  = L1N14B
            NN2  = L2N14B
            SIGN = WSIMUL
            DWT1 = WPERT1
            DWT2 = WPERT2
            SCAN = WSIMUL
            SCAN1= WPERT1
            SCAN2= WPERT2
         END IF
         IF(LL.EQ.5) THEN
            NN1  = L1N14B
            NN2  = L2N14B
            SIGN = -1.0D+00
            DWT1 = ZERO
            DWT2 = ZERO
         END IF
         IF(LL.EQ.6) THEN
            NN1  = L1N14PMA
            NN2  = L2N14PMA
            SIGN = -WSIMUL
            DWT1 = -WPERT1
            DWT2 = -WPERT2
         END IF
         IF(LL.EQ.7) THEN
            NN1  = L1N14PMB
            NN2  = L2N14PMB
            SIGN = +WSIMUL
            DWT1 = +WPERT1
            DWT2 = +WPERT2
         END IF
         DO 500 III=NN1, NN2
            IF(LL.EQ.1) THEN
               I = L14J(1,III)
               J = L14J(2,III)
            END IF
            IF(LL.EQ.2) THEN
               I = L14A(1,III)
               J = L14A(2,III)
            END IF
            IF(LL.EQ.3) THEN
               I = L14A(1,III)
               J = L14A(2,III)
            END IF
            IF(LL.EQ.4) THEN
               I = L14B(1,III)
               J = L14B(2,III)
            END IF
            IF(LL.EQ.5) THEN
               I = L14B(1,III)
               J = L14B(2,III)
            END IF
            IF(LL.EQ.6) THEN
               I = L14PMA(1,III)
               J = L14PMA(2,III)
            END IF
            IF(LL.EQ.7) THEN
               I = L14PMB(1,III)
               J = L14PMB(2,III)
            END IF
            SIGI  = SIG(I)
            EPSI  = EPS(I)
            SIGJ  = SIG(J)
            EPSJ  = EPS(J)
            IF(IFEPTOP.EQ.1.AND.(LL.EQ.4.OR.LL.EQ.7))THEN
               SIGI = SIGB(I)
               EPSI = EPSB(I)
               SIGJ = SIGB(J)
               EPSJ = EPSB(J)
            END IF
            IF(SIGI.EQ.ZERO .OR. EPSI.EQ.ZERO) GOTO 500
            IF(SIGJ.EQ.ZERO .OR. EPSJ.EQ.ZERO) GOTO 500
            X     = CORD(1,I) - CORD(1,J)
            Y     = CORD(2,I) - CORD(2,J)
            Z     = CORD(3,I) - CORD(3,J)
            IF(IFEPTOP.EQ.1.AND.(LL.EQ.4.OR.LL.EQ.7))THEN
               DO IFIXB = 1, NFIXMMB
                  IF(I.EQ.IFIXMMB(IFIXB)) THEN
                     X = X + CORDB(1,I) - CORD(1,I)
                     Y = Y + CORDB(2,I) - CORD(2,I)
                     Z = Z + CORDB(3,I) - CORD(3,I)
                  END IF
                  IF(J.EQ.IFIXMMB(IFIXB)) THEN
                     X = X - CORDB(1,J) + CORD(1,J)
                     Y = Y - CORDB(2,J) + CORD(2,J)
                     Z = Z - CORDB(3,J) + CORD(3,J)
                  END IF
               ENDDO
            END IF
            R2    = X*X+Y*Y+Z*Z
            CALL SWFUNC(R2,X,Y,Z)
            ONER2 = ONE/R2
C
            SIG1  = 0.5D+00*(SIGI+SIGJ)
            FOUREP= EPSI*EPSJ
            SIGSQ = SIG1*SIG1*ONER2
            IF(NFFTYP/10000.EQ.4) SIGSQ  = SIGI*SIGJ*ONER2
            DISP  = -SIGSQ*SIGSQ*SIGSQ
            REP   = DISP*DISP
C
            IF(ISOFTCR.GT.0 .AND. LL.GT.2.AND.LL.LT.5) THEN
               DISSOFT  =-ONE/DISP
               SOFT     = SOFTALJ*(ONE-SCAN)*(ONE-SCAN)+DISSOFT
               ONESOFT  = ONE/SOFT
               ONESOF2  = ONESOFT*ONESOFT
               ONESOF3  = ONESOFT*ONESOF2
               SOFTW1   = SOFTALJ*(ONE-SCAN1)*(ONE-SCAN1)+DISSOFT
               ONESOFTW1= ONE/SOFTW1
               ONESOF2W1= ONESOFTW1*ONESOFTW1
               SOFTW2   = SOFTALJ*(ONE-SCAN2)*(ONE-SCAN2)+DISSOFT
               ONESOFTW2= ONE/SOFTW2
               ONESOF2W2= ONESOFTW2*ONESOFTW2
C
               EPAIRR  = FOUREP*ONESOF2
               EPAIRD  =-FOUREP*ONESOFT
               EPAIRR  = EPAIRR*FACT*SIGN
               EPAIRD  = EPAIRD*FACT*SIGN
               DUM     =-SWF*6.0D+00*FOUREP*(2.0D+00*ONESOF3
     *                               -ONESOF2)*DISSOFT*ONER2*FACT*SIGN
               EPAIRRW = FOUREP*FACT
               EPAIRDW =-FOUREP*FACT
               EPAIRRW1= EPAIRRW*ONESOF2W1*DWT1
               EPAIRDW1= EPAIRDW*ONESOFTW1*DWT1
               EPAIRRW2= EPAIRRW*ONESOF2W2*DWT2
               EPAIRDW2= EPAIRDW*ONESOFTW2*DWT2
            ELSE
               EPAIRR  = FOUREP*REP
               EPAIRD  = FOUREP*DISP
               EPAIRR  = EPAIRR*FACT*SIGN
               EPAIRD  = EPAIRD*FACT*SIGN
               DUM     =-SWF*6.0D+00*FOUREP*(2.0D+00*REP
     *                                      +DISP)*ONER2*FACT*SIGN
               IF(LL.GT.2.AND.LL.NE.5) THEN
                  EPAIRRW = FOUREP*REP *FACT
                  EPAIRDW = FOUREP*DISP*FACT
                  EPAIRRW1= EPAIRRW*DWT1
                  EPAIRDW1= EPAIRDW*DWT1
                  EPAIRRW2= EPAIRRW*DWT2
                  EPAIRDW2= EPAIRDW*DWT2
               END IF
            END IF
C
            EPAIR = EPAIRR+EPAIRD
            ENLJR = ENLJR + EPAIRR*SWF
            ENLJD = ENLJD + EPAIRD*SWF
            IF(LL.GE. 3.AND.LL.LE. 4) THEN
               SOL1LJ= SOL1LJ + (EPAIRRW1+EPAIRDW1-EPAIRR-EPAIRD)*SWF
               SOL2LJ= SOL2LJ + (EPAIRRW2+EPAIRDW2-EPAIRR-EPAIRD)*SWF
            END IF
            IF(LL.GE. 6.AND.LL.LE. 7) THEN
               PMF1LJ= PMF1LJ + (EPAIRRW1+EPAIRDW1-EPAIRR-EPAIRD)*SWF
            END IF
            DEX   = DUM*X + EPAIR*SWFDX
            DEY   = DUM*Y + EPAIR*SWFDY
            DEZ   = DUM*Z + EPAIR*SWFDZ
            FFGRD(1,I)=FFGRD(1,I) + DEX
            FFGRD(2,I)=FFGRD(2,I) + DEY
            FFGRD(3,I)=FFGRD(3,I) + DEZ
            FFGRD(1,J)=FFGRD(1,J) - DEX
            FFGRD(2,J)=FFGRD(2,J) - DEY
            FFGRD(3,J)=FFGRD(3,J) - DEZ
            VIR(1)    =VIR(1)     + DEX*X
            VIR(2)    =VIR(2)     + DEY*Y
            VIR(3)    =VIR(3)     + DEZ*Z
            IYES = 0
            JYES = 0
            DO KFIX=1,NFIXMM
               IF(I.EQ.IFIXMM(KFIX)) IYES = 1
               IF(J.EQ.IFIXMM(KFIX)) JYES = 1
            ENDDO
            IF(IYES.EQ.1.AND.JYES.EQ.1) THEN
               VIR(1)    =VIR(1)     - DEX*X
               VIR(2)    =VIR(2)     - DEY*Y
               VIR(3)    =VIR(3)     - DEZ*Z
            END IF
 500     CONTINUE
 490     CONTINUE
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK ESPHER
!>
!> @brief    calculate LJ energy for MM atoms due to sphere
!>
      SUBROUTINE ESPHER(CORD,FFGRD)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00, FOUR=4.0D+00,
     *           SIX=6.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FMCOM / XX(1)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, FEB 2011, LINCOLN
C
C     --  ENRXNR: LENNARD-JONES POTENTIAL ENERGY DUE TO SPHERE --
C                 (REQUIRED IF SPHRAD IS APPLIED)
C
      ENRXNR =ZERO
      IF(SPHRAD.GE.1.0D+30.OR.SPHEPS.EQ.ZERO) RETURN
C
      R     = SPHRAD + (TWO**(ONE/SIX)-ONE)*SPHSIG
      FOUREP= FOUR*SPHEPS
      SIG6  = SPHSIG**6
      SIG12 = SIG6*SIG6
C
      IPCOUNT = ME - 1
      DO 100 IFFAT = 1, NFFAT
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 100
         END IF
         IF(XX(LFFZANF+IFFAT-1).EQ.1.0D+00) GOTO 100
         XI    = CORD(1,IFFAT) - CENTX
         YI    = CORD(2,IFFAT) - CENTY
         ZI    = CORD(3,IFFAT) - CENTZ
         RI2   = XI*XI+YI*YI+ZI*ZI
         RI    = SQRT(RI2)
         R2    = (RI-R)**2
         ONER2 = ONE/R2
         ONER6 = ONER2*ONER2*ONER2
         ONER12= ONER6*ONER6
         REP   = SIG12*ONER12
         DISP  =-SIG6 *ONER6
         ENRXNR= ENRXNR + FOUREP*(REP+DISP)
         IF(R2.LT.(0.50D+00*SPHSIG)**2)ENRXNR=ENRXNR-FOUREP*(REP+DISP)
         DUM   = -SIX*FOUREP*(TWO*REP+DISP)/((RI-R)*RI)
         IF(RI.GT.R) DUM = -DUM
         IF(DUM.GT. 0.01D+00) DUM= 0.01D+00
         IF(DUM.LT.-0.01D+00) DUM=-0.01D+00
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*XI
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*YI
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*ZI
         VIR(1)        =VIR(1)         + DUM*XI*CORD(1,IFFAT)
         VIR(2)        =VIR(2)         + DUM*YI*CORD(2,IFFAT)
         VIR(3)        =VIR(3)         + DUM*ZI*CORD(3,IFFAT)
         IYES = 0
         DO KFIX=1,NFIXMM
            IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
         ENDDO
         IF(IYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DUM*XI*CORD(1,IFFAT)
            VIR(2)    =VIR(2)     - DUM*YI*CORD(2,IFFAT)
            VIR(3)    =VIR(3)     - DUM*ZI*CORD(3,IFFAT)
         END IF
 100  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK ESPHQM
!>
!> @brief    calculate center point and sphere LJ energy for QM
!>
      SUBROUTINE ESPHQM(DETMP,LISTQM)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00, FOUR=4.0D+00,
     *           SIX=6.0D+00)
      PARAMETER (MXATM=2000)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION DETMP(3,*),LISTQM(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, MAR 2011, LINCOLN
C
C     -- ENCENT: POTENTIAL ENERGY DUE TO A BOND-LIKE POTENTIAL --
C                (REQUIRED IN QM/MM SWITCHING FUNCTION METHOD)
C     -- ENRXNR: POTENTIAL ENERGY DUE TO SPHERE --
C                (REQUIRED IN REACTION FIELD METHOD)
C
      ENCENT = ZERO
      IF(MASWRK) THEN   ! ONLY ONE CASE, LET THE MASWRK DO IT
         IF(NAT.GT.0 .AND. NFFAT.GT.0 .AND. SWRB2.LT.1.0D+08) THEN
            XI  = C(1,LQMCT)-QMCX
            YI  = C(2,LQMCT)-QMCY
            ZI  = C(3,LQMCT)-QMCZ
            RI2 = XI*XI+YI*YI+ZI*ZI
            RI  = SQRT(RI2)
            R0  = 2.0D+00*TOBOHR         !   R0=2.0 ANGSTROM
            IF(RI.GT.R0) THEN
               ENCENT = ENCENT + (RI-R0)**2  ! K=1.0 HARTREE/BOHR**2
               DUM    = 2.0D+00*(RI-R0)/RI
               DETMP(1,LQMCT) = DETMP(1,LQMCT) + DUM*XI
               DETMP(2,LQMCT) = DETMP(2,LQMCT) + DUM*YI
               DETMP(3,LQMCT) = DETMP(3,LQMCT) + DUM*ZI
            END IF
         END IF
      END IF
C
      IF(SPHRAD.GE.1.0D+30.OR.SPHEPS.EQ.ZERO) RETURN
C
      R     = SPHRAD + (TWO**(ONE/SIX)-ONE)*SPHSIG
      FOUREP= FOUR*SPHEPS
      SIG6  = SPHSIG**6
      SIG12 = SIG6*SIG6
C
      IPCOUNT = ME - 1
      DO 200 IAT=1,NAT
       IF(LISTQM(NFFAT+IAT).EQ.0)THEN  ! DO NOT DO IT TWICE
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         IF(IAN(IAT).EQ.1) GOTO 200
         XI    = C(1,IAT) - CENTX
         YI    = C(2,IAT) - CENTY
         ZI    = C(3,IAT) - CENTZ
         RI2   = XI*XI+YI*YI+ZI*ZI
         RI    = SQRT(RI2)
         R2    = (RI-R)**2
         ONER2 = ONE/R2
         ONER6 = ONER2*ONER2*ONER2
         ONER12= ONER6*ONER6
         REP   = SIG12*ONER12
         DISP  =-SIG6 *ONER6
         ENRXNR= ENRXNR + FOUREP*(REP+DISP)
         DUM   = -SIX*FOUREP*(TWO*REP+DISP)/((RI-R)*RI)
         IF(RI.GT.R) DUM = -DUM
         IF(DUM.GT. 0.01D+00) DUM= 0.01D+00
         IF(DUM.LT.-0.01D+00) DUM=-0.01D+00
         DETMP(1,IAT) = DETMP(1,IAT) + DUM*XI
         DETMP(2,IAT) = DETMP(2,IAT) + DUM*YI
         DETMP(3,IAT) = DETMP(3,IAT) + DUM*ZI
         VIR(1)       = VIR(1)       + DUM*XI*C(1,IAT)
         VIR(2)       = VIR(2)       + DUM*YI*C(2,IAT)
         VIR(3)       = VIR(3)       + DUM*ZI*C(3,IAT)
         IYES = 0
         DO KFIX=1,NFIXQM
            IF(IAT.EQ.IFIXQM(KFIX)) IYES = 1
         ENDDO
         IF(IYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DUM*XI*C(1,IAT)
            VIR(2)    =VIR(2)     - DUM*YI*C(2,IAT)
            VIR(3)    =VIR(3)     - DUM*ZI*C(3,IAT)
         END IF
       END IF
 200  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK ECHARG
!>   
!> @brief    charge-charge interaction
!>   
!> @author   Hui Li
!>           - Jan 2011
!>    
!> @details  force field charge-charge term
!>
      SUBROUTINE ECHARG(CORD,FFGRD,CHARG,NONLS1,L1213J,L14J,
     *                  CHARGB,NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                  NONLSPMA,L1213PMA,L14PMA,CORDB,
     *                  NONLSPMB,L1213PMB,L14PMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00)
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),NONLS1(2,*),
     *          L1213J(2,*),L14J(2,*),CHARGB(*),
     *          NONLSA(2,*),NONLSB(2,*),L1213A(2,*),L1213B(2,*),
     *          L14A(2,*),L14B(2,*),NONLSPMA(2,*),L1213PMA(2,*),
     *          L14PMA(2,*),CORDB(3,*),
     *          NONLSPMB(2,*),L1213PMB(2,*),L14PMB(2,*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFEWLD/ SPLIT,IEWALD,KEWALD,NKVEC,
     *                L1KVEC,L2KVEC,LFFRKEXPEL,LFFRKVEC,
     *                LFFKVEC,LFFTCHCH,LFFCOSCH,LFFSINCH
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFFRE2/ N1FFAT,N1BOND,N1ANGL,N1DIHR,N1DIHB,N1CMAP,N1WAGG,
     *                N2FFAT,N2BOND,N2ANGL,N2DIHR,N2DIHB,N2CMAP,N2WAGG,
     *                LFF2ATMNAM,LFF2CORD,LFF2ZANF,LFF2ZMAS,
     *                LFF2ONEMAS,LFF2CHARG,LFF2POL,
     *                LFF2SIG,LFF2EPS,LFF2SIG2,LFF2EPS2,
     *                LFF2BOND0,LFF2FCBOND,LFF2ANGL0,LFF2FCANGL,
     *                LFF2FCWAGG,LFF2DIHB0,LFF2FCDIHB,
     *                LFF2VROT,LFF2NNN,LFF2GAMA,LFF2IPAIR,
     *                LFF2KLIST,LFF2LLIST,LFF2MLIST,LFF2NLIST,
     *                LFF2VEL,LFF2QMVEL,LFF2CLPR,LFF2ZLPR,
     *                LFF2NLPR,LFF2MAPLST,LFFKFREEA,LFFKFREEB,
     *                LFFLISTB2A,NTODOA,LFFNONLSA,NTODOB,LFFNONLSB,
     *                N1213A,LFFL1213A,N1213B,LFFL1213B,
     *                N14A,LFFL14A,N14B,LFFL14B,
     *                NTODOPMA,LFFNONLSPMA,NBONDPMA,LFFLSBONDPMA,
     *                NANGLPMA,LFFLSANGLPMA,NDIHRPMA,LFFLSDIHRPMA,
     *                NDIHBPMA,LFFLSDIHBPMA,NWAGGPMA,LFFLSWAGGPMA,
     *                NCMAPPMA,LFFLSCMAPPMA,
     *                N1213PMA,LFFL1213PMA,
     *                N14PMA,LFFL14PMA,
     *                NTODOPMB,LFFNONLSPMB,NBONDPMB,LFFLSBONDPMB,
     *                NANGLPMB,LFFLSANGLPMB,NDIHRPMB,LFFLSDIHRPMB,
     *                NDIHBPMB,LFFLSDIHBPMB,NWAGGPMB,LFFLSWAGGPMB,
     *                NCMAPPMB,LFFLSCMAPPMB,
     *                N1213PMB,LFFL1213PMB,
     *                N14PMB,LFFL14PMB
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
      COMMON /FMCOM / XX(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
C     HUI LI, JAN 2011, LINCOLN
C     FENGCHAO CUI, HUI LI, MAY 2012, LINCOLN
C     HUI LI, JUNE 19, 2012, ADD EWALD
C
C     FORMULA:  E = QI*QJ/RIJ  (IN VACUUM)
C          OR:  E = SHF*(QI*QJ/RIJ)
C                   SHF = SHIFTING  FUNCTION IN RANGE 0 - SWRB
C
CMMFF
CMMFF           E = QI*QJ/[D*(RIJ+0.05)]  !  0.05 ANGSTROM
CMMFF               D = DIELECTRIC CONSTANT, USUALLY 1.0
CMMFF
      ENCHAR    = ZERO
      SOL1CH    = ZERO
      SOL2CH    = ZERO
      PMF1CH    = ZERO
      IF(IDOCHG.EQ.0) RETURN
C
      SQRTPI=SQRT(PI)
C
C     -- MMFF94 BUFFER DISTANCE IS NOT USED FOR
C        SHIFTING FUNCTION, SOFTCORE AND EWALD
C
      RBUF      = ZERO
      IF(NFFTYP/10000.EQ.5) RBUF = 0.05D+00*TOBOHR
      IF(ISOFTCR.GT.0) RBUF = ZERO
      IF(ISHIFT .GT.0) RBUF = ZERO
      IF(IEWALD .GT.0) RBUF = ZERO
C
      TWOROFF   = ZERO
      ONEROFF2  = ZERO
      ONEROFF   = ZERO
      ONEROFF3  = ZERO
      TWOROFF3  = ZERO
      TWOROFF2  = ZERO
      ONEROFF4  = ZERO
      THREEROFF4= ZERO
      TW2ROFF2  = ZERO
      FOUROFF2  = ZERO
      FOUROFF4  = ZERO
      THREEROFF3= ZERO
      IF(ISHIFT.EQ.1) THEN
         TWOROFF = ONESWRB + ONESWRB
         ONEROFF2= ONESWRB2
         TW2ROFF2= ONESWRB2 + ONESWRB2
      END IF
      IF(ISHIFT.EQ.2) THEN
         ONEROFF3  = EPS1RB3
         TWOROFF3  = ONEROFF3 + ONEROFF3
         ONEROFF   = EPS1RB
         THREEROFF3= ONEROFF3 + TWOROFF3
      END IF
      IF(ISHIFT.EQ.3) THEN
         ONEROFF = ONESWRB
      END IF
      IF(ISHIFT.EQ.4) THEN
         TWOROFF2  = ONESWRB2 + ONESWRB2
         ONEROFF4  = ONESWRB4
         THREEROFF4= ONEROFF4 + ONEROFF4 + ONEROFF4
         FOUROFF2  = TWOROFF2 + TWOROFF2
         FOUROFF4  = ONEROFF4 + ONEROFF4 + ONEROFF4 + ONEROFF4
      END IF
      IF(ISHIFT.EQ.0.OR.IEWALD.GT.0) THEN
         TWOROFF   = ZERO
         ONEROFF2  = ZERO
         ONEROFF   = ZERO
         ONEROFF3  = ZERO
         TWOROFF3  = ZERO
         TWOROFF2  = ZERO
         ONEROFF4  = ZERO
         THREEROFF4= ZERO
         TW2ROFF2  = ZERO
         FOUROFF2  = ZERO
         FOUROFF4  = ZERO
         THREEROFF3= ZERO
      END IF
C
      LLTODO = 2
      IF(IFEPTOP.GT.0.AND.IDOPOL.EQ.0.AND.IEWALD.EQ.0) THEN
         IF(    NAT.LE.0.OR.         ! FFMD1
     *      MEANFLD.GT.0) THEN       ! FFMD3
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1.AND.NAT.GT.0)LLTODO= 8
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1.AND.NAT.LE.0)LLTODO= 8
C           IF(IFEPTOP.EQ.2.AND.IFEPTYP.EQ.1.AND.NAT.GT.0)LLTODO= 0
            IF(IFEPTOP.EQ.2.AND.IFEPTYP.EQ.1.AND.NAT.LE.0)LLTODO=10
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.GT.0)LLTODO= 8
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.LE.0)LLTODO=14 ! NO (9,10)
         END IF
      END IF
      DO 110 LL=1,LLTODO
      IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.LE.0)THEN
         IF(LL.GE.9.AND.LL.LE.10) GOTO 110
      END IF
      IF(LL.EQ.1) THEN
         NN1  = 1
         NN2  = NTODO
         SIGN = 1.0D+00           !  ALL I-J PAIRS
         DWT1 = ZERO
         DWT2 = ZERO
      END IF
      IF(LL.EQ.2) THEN
         NN1  = L11213
         NN2  = L21213
         SIGN = -1.0D+00          !  REMOVE 1-2, 1-3 PAIRS
         DWT1 = ZERO
         DWT2 = ZERO
      END IF
      IF(LL.EQ.3) THEN
         NN1  = 1  
         NN2  = NTODOA
         SIGN = -1.0D+00          !  REMOVE A ALCHEMICAL ATOMS
         DWT1 = ZERO
         DWT2 = ZERO
      END IF
      IF(LL.EQ.4) THEN
         NN1  = L11213A
         NN2  = L21213A
         SIGN = 1.0D+00
         DWT1 = ZERO
         DWT2 = ZERO
      END IF
      IF(LL.EQ.5) THEN
         NN1  = 1
         NN2  = NTODOA
         SIGN = 1 - WSIMUL        !  ADD (1-WSIMUL) A
         DWT1 = 1 - WPERT1
         DWT2 = 1 - WPERT2
         SCAN = 1 - WSIMUL
         SCAN1= 1 - WPERT1
         SCAN2= 1 - WPERT2
      END IF
      IF(LL.EQ.6) THEN
         NN1  = L11213A
         NN2  = L21213A
         SIGN = -1 + WSIMUL
         DWT1 = -1 + WPERT1
         DWT2 = -1 + WPERT2
         SCAN =  1 - WSIMUL
         SCAN1=  1 - WPERT1
         SCAN2=  1 - WPERT2
      END IF
      IF(LL.EQ.7) THEN
         NN1  = 1
         NN2  = NTODOB
         SIGN = WSIMUL            ! ADD WSIMUL B
         DWT1 = WPERT1
         DWT2 = WPERT2
         SCAN = WSIMUL
         SCAN1= WPERT1
         SCAN2= WPERT2
      END IF
      IF(LL.EQ.8) THEN
         NN1  = L11213B
         NN2  = L21213B
         SIGN = -WSIMUL
         DWT1 = -WPERT1
         DWT2 = -WPERT2
         SCAN =  WSIMUL
         SCAN1=  WPERT1
         SCAN2=  WPERT2
      END IF
      IF(LL.EQ.9) THEN
         NN1  = 1
         NN2  = NTODOB            !  REMOVE B ALCHEMICAL ATOMS
         SIGN = -1.0D+00
         DWT1 = ZERO
         DWT2 = ZERO
      END IF
      IF(LL.EQ.10) THEN
         NN1  = L11213B
         NN2  = L21213B
         SIGN = 1.0D+00
         DWT1 = ZERO
         DWT2 = ZERO
      END IF
      IF(LL.EQ.11) THEN
         NN1  = 1
         NN2  = NTODOPMA
         SIGN = -WSIMUL
         DWT1 = -WPERT1     !  NEGATIVE A
         DWT2 = -WPERT2
      END IF
      IF(LL.EQ.12) THEN
         NN1  = L11213PMA
         NN2  = L21213PMA
         SIGN = +WSIMUL
         DWT1 = +WPERT1
         DWT2 = +WPERT2
      END IF
      IF(LL.EQ.13) THEN
         NN1  = 1
         NN2  = NTODOPMB
         SIGN = +WSIMUL
         DWT1 = +WPERT1     !  POSITIVE B
         DWT2 = +WPERT2
      END IF
      IF(LL.EQ.14) THEN
         NN1  = L11213PMB
         NN2  = L21213PMB
         SIGN = -WSIMUL
         DWT1 = -WPERT1
         DWT2 = -WPERT2
      END IF
      DO 100 III=NN1, NN2
         IF(LL.EQ.1) THEN
            I = NONLS1(1,III)
            J = NONLS1(2,III)
         END IF
         IF(LL.EQ.2) THEN
            I = L1213J(1,III)
            J = L1213J(2,III)
         END IF
         IF(LL.EQ.3) THEN
            I = NONLSA(1,III)
            J = NONLSA(2,III)
         END IF
         IF(LL.EQ.4) THEN
            I = L1213A(1,III)
            J = L1213A(2,III)
         END IF
         IF(LL.EQ.5) THEN
            I = NONLSA(1,III)
            J = NONLSA(2,III)
         END IF
         IF(LL.EQ.6) THEN
            I = L1213A(1,III)
            J = L1213A(2,III)
         END IF
         IF(LL.EQ.7) THEN
            I = NONLSB(1,III)
            J = NONLSB(2,III)
         END IF
         IF(LL.EQ.8) THEN
            I = L1213B(1,III)
            J = L1213B(2,III)
         END IF
         IF(LL.EQ.9) THEN
            I = NONLSB(1,III)
            J = NONLSB(2,III)
         END IF
         IF(LL.EQ.10) THEN
            I = L1213B(1,III)
            J = L1213B(2,III)
         END IF
         IF(LL.EQ.11) THEN
            I = NONLSPMA(1,III)
            J = NONLSPMA(2,III)
         END IF
         IF(LL.EQ.12) THEN
            I = L1213PMA(1,III)
            J = L1213PMA(2,III)
         END IF
         IF(LL.EQ.13) THEN
            I = NONLSPMB(1,III)
            J = NONLSPMB(2,III)
         END IF
         IF(LL.EQ.14) THEN
            I = L1213PMB(1,III)
            J = L1213PMB(2,III)
         END IF
         IF(I.EQ.0.OR.J.EQ.0) GOTO 100
         QI  = CHARG(I)
         QJ  = CHARG(J)
         IF(IFEPTOP.EQ.1.AND.(LL.EQ. 7.OR.LL.EQ. 8.OR.
     *                        LL.EQ.13.OR.LL.EQ.14)) THEN
            QI = CHARGB(I)
            QJ = CHARGB(J)
         END IF
         IF(QI.EQ.ZERO.OR.QJ.EQ.ZERO) GOTO 100
         QIQJ  = QI*QJ
C
         X     = CORD(1,I) - CORD(1,J)
         Y     = CORD(2,I) - CORD(2,J)
         Z     = CORD(3,I) - CORD(3,J)
         IF(IFEPTOP.EQ.1.AND.(LL.EQ. 7.OR.LL.EQ. 8.OR.
     *                        LL.EQ.13.OR.LL.EQ.14)) THEN
            DO IFIXB = 1, NFIXMMB
               IF(I.EQ.IFIXMMB(IFIXB)) THEN
                  X = X + CORDB(1,I) - CORD(1,I)
                  Y = Y + CORDB(2,I) - CORD(2,I)
                  Z = Z + CORDB(3,I) - CORD(3,I)
               END IF
               IF(J.EQ.IFIXMMB(IFIXB)) THEN
                  X = X - CORDB(1,J) + CORD(1,J)
                  Y = Y - CORDB(2,J) + CORD(2,J)
                  Z = Z - CORDB(3,J) + CORD(3,J)
               END IF
            ENDDO
         END IF
         PBCX  = XBOX * ANINT(X*ONEXBOX)
         PBCY  = YBOX * ANINT(Y*ONEYBOX)
         PBCZ  = ZBOX * ANINT(Z*ONEZBOX)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         IF(R2.GT.SWRB2) GOTO 100
         IF(R2.LT.0.01D+00) GOTO 100
C
         R     = SQRT(R2)
         ONERX = ONE/R
         R     = R + RBUF
         R2    = R*R
         R3    = R*R2
         R4    = R2*R2
         ONER  = ONE/R
         ONER2 = ONER*ONER
         ONER3 = ONER2*ONERX
C
         IF(ISOFTCR.GT.0 .AND. LL.GT.4.AND.LL.LT.9) THEN
            SOFT     = SOFTACH*(ONE-SCAN)*(ONE-SCAN)+R2
            SOFT     = SQRT(SOFT)
            ONESOFT  = ONE/SOFT
            ONESOF3  = ONESOFT*ONESOFT*ONESOFT
            SOFTW1   = SOFTACH*(ONE-SCAN1)*(ONE-SCAN1)+R2
            SOFTW1   = SQRT(SOFTW1)
            ONESOFTW1= ONE/SOFTW1
            SOFTW2   = SOFTACH*(ONE-SCAN2)*(ONE-SCAN2)+R2
            SOFTW2   = SQRT(SOFTW2)
            ONESOFTW2= ONE/SOFTW2
C
            EDUM     = QIQJ*ONESOFT*(ONE-TWOROFF*R+R2*ONEROFF2
     *                                  +R3*ONEROFF3-R*ONEROFF
     *                                -R2*TWOROFF2+R4*ONEROFF4)*SIGN
            DUM1     = -ONESOF3*(ONE-TWOROFF*R+R2*ONEROFF2
     *                              +R3*ONEROFF3-R*ONEROFF
     *                            -R2*TWOROFF2+R4*ONEROFF4)
            DUM2     = ONESOFT*(TW2ROFF2-TWOROFF*ONER
     *                          +FOUROFF4*R2-FOUROFF2
     *                     +THREEROFF3*R-ONEROFF*ONER)
            DUM      = QIQJ*(DUM1 + DUM2)*SIGN
            EDUMW    = QIQJ*(ONE-TWOROFF*R+R2*ONEROFF2
     *                          +R3*ONEROFF3-R*ONEROFF
     *                        -R2*TWOROFF2+R4*ONEROFF4)
            EDUMW1   = EDUMW*ONESOFTW1*DWT1
            EDUMW2   = EDUMW*ONESOFTW2*DWT2
         ELSE
            EDUM  = QIQJ*(ONER-TWOROFF+R*ONEROFF2
     *                           +R2*ONEROFF3-ONEROFF
     *                        -R*TWOROFF2+R3*ONEROFF4)*SIGN
            DUM   = -QIQJ*(ONER3-ONEROFF2*ONER-TWOROFF3
     *                +TWOROFF2*ONER-THREEROFF4*R)*SIGN
C           - EWALD CORRECTION APPLIES TO ALL PAIRS
C             (HUI LI: NO EWALD CORRECTION TO 1213 PAIRS)
            IF(IEWALD.GT.0.AND.LL.EQ.1) THEN
               F0      = GMSERFC(SPLIT*R)
               EDUM    = EDUM*F0 
               EXPBR   = EXP(-SPLIT*SPLIT*R2)
               F0_GRAD = TWO*SPLIT*R*EXPBR/SQRTPI + F0
               DUM     = DUM*F0_GRAD
            END IF
            IF(LL.GT.4.AND.LL.NE.9.AND.LL.NE.10) THEN
               EDUMW  = QIQJ*(ONER-TWOROFF+R*ONEROFF2
     *                           +R2*ONEROFF3-ONEROFF
     *                        -R*TWOROFF2+R3*ONEROFF4)
               EDUMW1 = EDUMW*DWT1
               EDUMW2 = EDUMW*DWT2
            END IF
         END IF
         EPAIR = EDUM
         ENCHAR= ENCHAR  + EPAIR
         IF(LL.GE. 5.AND.LL.LE. 8) THEN
            SOL1CH= SOL1CH + (EDUMW1-EPAIR)
            SOL2CH= SOL2CH + (EDUMW2-EPAIR)
         END IF
         IF(LL.GE.11.AND.LL.LE.14) THEN
            PMF1CH= PMF1CH + (EDUMW1-EPAIR)
         END IF
         DEX   = DUM*X
         DEY   = DUM*Y
         DEZ   = DUM*Z
         FFGRD(1,I)=FFGRD(1,I) + DEX
         FFGRD(2,I)=FFGRD(2,I) + DEY
         FFGRD(3,I)=FFGRD(3,I) + DEZ
         FFGRD(1,J)=FFGRD(1,J) - DEX
         FFGRD(2,J)=FFGRD(2,J) - DEY
         FFGRD(3,J)=FFGRD(3,J) - DEZ
         VIR(1)    =VIR(1)     + DEX*X
         VIR(2)    =VIR(2)     + DEY*Y
         VIR(3)    =VIR(3)     + DEZ*Z
         IYES = 0
         JYES = 0
         DO KFIX=1,NFIXMM
            IF(I.EQ.IFIXMM(KFIX)) IYES = 1
            IF(J.EQ.IFIXMM(KFIX)) JYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.JYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX*X
            VIR(2)    =VIR(2)     - DEY*Y
            VIR(3)    =VIR(3)     - DEZ*Z
         END IF
 100  CONTINUE
 110  CONTINUE
C
C     -- EWALD SELF AND RECIPROCAL TERM --
      IF(IEWALD.GT.0) THEN
         CALL EWALDRECIPR(ESELF,ERECIPR,CORD,CHARG,FFGRD,
     *                    XX(LFFRKEXPEL),XX(LFFRKVEC),XX(LFFTCHCH),
     *                    XX(LFFCOSCH),XX(LFFSINCH),XX(LFFKVEC))
         ENCHAR =ENCHAR + ESELF + ERECIPR
      END IF
C
C
C     -- IF WT14CH IS NOT 1.0, ADD (WT14CH-1)
C        (HUI LI: NO EWALD CORRECTION TO THIS PART)
C
      IF(WT14CH.NE.1.0D+00) THEN
      FACT   =  WT14CH - 1.0D+00
      LLTODO = 1
      IF(IFEPTOP.GT.0.AND.IDOPOL.EQ.0) THEN
         IF(    NAT.LE.0.OR.         ! FFMD1
     *      MEANFLD.GT.0) THEN       ! FFMD3
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1.AND.NAT.GT.0)LLTODO= 4
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1.AND.NAT.LE.0)LLTODO= 4
C           IF(IFEPTOP.EQ.2.AND.IFEPTYP.EQ.1.AND.NAT.GT.0)LLTODO= 0
            IF(IFEPTOP.EQ.2.AND.IFEPTYP.EQ.1.AND.NAT.LE.0)LLTODO= 5
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.GT.0)LLTODO= 4
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.LE.0)LLTODO= 7
         END IF
      END IF
      DO 290 LL=1,LLTODO
      IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2.AND.NAT.LE.0)THEN
         IF(LL.EQ.5) GOTO 290
      END IF
      IF(LL.EQ.1) THEN
         NN1  = L1N14J
         NN2  = L2N14J
         SIGN = 1.0D+00
         DWT1 = ZERO
         DWT2 = ZERO
      END IF
      IF(LL.EQ.2) THEN
         NN1  = L1N14A
         NN2  = L2N14A
         SIGN = -1.0D+00
         DWT1 = ZERO
         DWT2 = ZERO
      END IF
      IF(LL.EQ.3) THEN
         NN1  = L1N14A
         NN2  = L2N14A
         SIGN = 1 - WSIMUL
         DWT1 = 1 - WPERT1
         DWT2 = 1 - WPERT2
         SCAN = 1 - WSIMUL
         SCAN1= 1 - WPERT1
         SCAN2= 1 - WPERT2
      END IF
      IF(LL.EQ.4) THEN
         NN1  = L1N14B
         NN2  = L2N14B
         SIGN = WSIMUL
         DWT1 = WPERT1
         DWT2 = WPERT2
         SCAN = WSIMUL
         SCAN1= WPERT1
         SCAN2= WPERT2
      END IF
      IF(LL.EQ.5) THEN
         NN1  = L1N14B
         NN2  = L2N14B
         SIGN = -1.0D+00
         DWT1 = ZERO
         DWT2 = ZERO
      END IF
      IF(LL.EQ.6) THEN
         NN1  = L1N14PMA
         NN2  = L2N14PMA
         SIGN = -WSIMUL
         DWT1 = -WPERT1
         DWT2 = -WPERT2
      END IF
      IF(LL.EQ.7) THEN
         NN1  = L1N14PMB
         NN2  = L2N14PMB
         SIGN = +WSIMUL
         DWT1 = +WPERT1
         DWT2 = +WPERT2
      END IF
      DO 300 III=NN1, NN2
         IF(LL.EQ.1) THEN
            I = L14J(1,III)
            J = L14J(2,III)
         END IF
         IF(LL.EQ.2) THEN
            I = L14A(1,III)
            J = L14A(2,III)
         END IF
         IF(LL.EQ.3) THEN
            I = L14A(1,III)
            J = L14A(2,III)
         END IF
         IF(LL.EQ.4) THEN
            I = L14B(1,III)
            J = L14B(2,III)
         END IF
         IF(LL.EQ.5) THEN
            I = L14B(1,III)
            J = L14B(2,III)
         END IF
         IF(LL.EQ.6) THEN
            I = L14PMA(1,III)
            J = L14PMA(2,III)
         END IF
         IF(LL.EQ.7) THEN
            I = L14PMB(1,III)
            J = L14PMB(2,III)
         END IF
         IF(I.EQ.0.OR.J.EQ.0) GOTO 300
         QI  = CHARG(I)
         QJ  = CHARG(J)
         IF(IFEPTOP.EQ.1.AND.(LL.EQ.4.OR.LL.EQ.7))THEN
            QI = CHARGB(I)
            QJ = CHARGB(J)
         END IF
         IF(QI.EQ.ZERO.OR.QJ.EQ.ZERO) GOTO 300
         QIQJ  = QI*QJ
C
         X     = CORD(1,I) - CORD(1,J)
         Y     = CORD(2,I) - CORD(2,J)
         Z     = CORD(3,I) - CORD(3,J)
         IF(IFEPTOP.EQ.1.AND.(LL.EQ.4.OR.LL.EQ.7))THEN
            DO IFIXB = 1, NFIXMMB
               IF(I.EQ.IFIXMMB(IFIXB)) THEN
                  X = X + CORDB(1,I) - CORD(1,I)
                  Y = Y + CORDB(2,I) - CORD(2,I)
                  Z = Z + CORDB(3,I) - CORD(3,I)
               END IF
               IF(J.EQ.IFIXMMB(IFIXB)) THEN
                  X = X - CORDB(1,J) + CORD(1,J)
                  Y = Y - CORDB(2,J) + CORD(2,J)
                  Z = Z - CORDB(3,J) + CORD(3,J)
               END IF
            ENDDO
         END IF
         PBCX  = XBOX * ANINT(X*ONEXBOX)
         PBCY  = YBOX * ANINT(Y*ONEYBOX)
         PBCZ  = ZBOX * ANINT(Z*ONEZBOX)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         IF(R2.GT.SWRB2) GOTO 300
C
         R     = SQRT(R2)
         ONERX = ONE/R
         R     = R + RBUF
         R2    = R*R           
         R3    = R*R2          
         R4    = R2*R2         
         ONER  = ONE/R         
         ONER2 = ONER*ONER     
         ONER3 = ONER2*ONERX
C
         IF(ISOFTCR.GT.0 .AND. LL.GT.2.AND.LL.LT.5) THEN
            SOFT     = SOFTACH*(ONE-SCAN)*(ONE-SCAN)+R2
            SOFT     = SQRT(SOFT)
            ONESOFT  = ONE/SOFT
            ONESOF3  = ONESOFT*ONESOFT*ONESOFT
            SOFTW1   = SOFTACH*(ONE-SCAN1)*(ONE-SCAN1)+R2
            SOFTW1   = SQRT(SOFTW1)
            ONESOFTW1= ONE/SOFTW1
            SOFTW2   = SOFTACH*(ONE-SCAN2)*(ONE-SCAN2)+R2
            SOFTW2   = SQRT(SOFTW2)
            ONESOFTW2= ONE/SOFTW2
C
            EDUM     = QIQJ*ONESOFT*(ONE-TWOROFF*R+R2*ONEROFF2
     *                                  +R3*ONEROFF3-R*ONEROFF
     *                           -R2*TWOROFF2+R4*ONEROFF4)*FACT*SIGN
            DUM1     = -ONESOF3*(ONE-TWOROFF*R+R2*ONEROFF2
     *                              +R3*ONEROFF3-R*ONEROFF
     *                            -R2*TWOROFF2+R4*ONEROFF4)
            DUM2     = ONESOFT*(TW2ROFF2-TWOROFF*ONER
     *                          +FOUROFF4*R2-FOUROFF2
     *                     +THREEROFF3*R-ONEROFF*ONER)
            DUM      = QIQJ*(DUM1 + DUM2)*FACT*SIGN
            EDUMW    = QIQJ*(ONE-TWOROFF*R+R2*ONEROFF2
     *                          +R3*ONEROFF3-R*ONEROFF
     *                  -R2*TWOROFF2+R4*ONEROFF4)*FACT
            EDUMW1   = EDUMW*ONESOFTW1*DWT1
            EDUMW2   = EDUMW*ONESOFTW2*DWT2
         ELSE
            EDUM  = QIQJ*(ONER-TWOROFF+R*ONEROFF2
     *                       +R2*ONEROFF3-ONEROFF
     *                    -R*TWOROFF2+R3*ONEROFF4)*FACT*SIGN
            DUM   = -QIQJ*(ONER3-ONEROFF2*ONER-TWOROFF3
     *                      +TWOROFF2*ONER-THREEROFF4*R)*FACT*SIGN
            IF(LL.GT.2.AND.LL.NE.5) THEN
               EDUMW  = QIQJ*(ONER-TWOROFF+R*ONEROFF2
     *                           +R2*ONEROFF3-ONEROFF
     *                        -R*TWOROFF2+R3*ONEROFF4)*FACT
               EDUMW1 = EDUMW*DWT1
               EDUMW2 = EDUMW*DWT2
            END IF
         END IF
         EPAIR = EDUM
         ENCHAR= ENCHAR  + EPAIR
         IF(LL.GE. 3.AND.LL.LE. 4) THEN
            SOL1CH= SOL1CH + (EDUMW1-EPAIR)
            SOL2CH= SOL2CH + (EDUMW2-EPAIR)
         END IF
         IF(LL.GE. 6.AND.LL.LE. 7) THEN
            PMF1CH= PMF1CH + (EDUMW1-EPAIR)
         END IF
         DEX   = DUM*X
         DEY   = DUM*Y
         DEZ   = DUM*Z
         FFGRD(1,I)=FFGRD(1,I) + DEX
         FFGRD(2,I)=FFGRD(2,I) + DEY
         FFGRD(3,I)=FFGRD(3,I) + DEZ
         FFGRD(1,J)=FFGRD(1,J) - DEX
         FFGRD(2,J)=FFGRD(2,J) - DEY
         FFGRD(3,J)=FFGRD(3,J) - DEZ
         VIR(1)    =VIR(1)     + DEX*X
         VIR(2)    =VIR(2)     + DEY*Y
         VIR(3)    =VIR(3)     + DEZ*Z
         IYES = 0
         JYES = 0
         DO KFIX=1,NFIXMM
            IF(I.EQ.IFIXMM(KFIX)) IYES = 1
            IF(J.EQ.IFIXMM(KFIX)) JYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.JYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX*X
            VIR(2)    =VIR(2)     - DEY*Y
            VIR(3)    =VIR(3)     - DEZ*Z
         END IF
 300  CONTINUE
 290  CONTINUE
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK CHGRXN
!>   
!> @brief    reaction field
!>   
!> @author   Dejun Si, Hui Li
!>           - Feb 2011
!>    
!> @details  calculate the reaction field of MM charges
!>
      SUBROUTINE CHGRXN(CORD,FFGRD,CHARG,XTS,YTS,ZTS,
     *                  CMAT1,POT1,QRXN1,NTS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, ONE=1.0D+00, TWO=2.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),POT1(NTS),QRXN1(NTS),
     *          CMAT1(NTS,NTS)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, HUI LI, FEB 2011, LINCOLN
C
C     --  CONTINUUM SOLVATION ENERGY --
C
      ENRXN =ZERO
      IF(IDOCHG.EQ.0) RETURN
      IF(RSPHSOL.GE.1.0D+30) RETURN
C
      R     = RSPHSOL
      R2    = R*R
      IF(ISPHSOL.EQ.1) THEN
         SCALE = (RXNEPS-ONE)/RXNEPS
         IPCOUNT = ME - 1
         DO 200 IFFAT = 1, NFFAT
            IF(CHARG(IFFAT).EQ.ZERO) GOTO 200
            QI    = CHARG(IFFAT)
            XI    = CORD(1,IFFAT) - CENTX
            YI    = CORD(2,IFFAT) - CENTY
            ZI    = CORD(3,IFFAT) - CENTZ
            RI2   = XI*XI+YI*YI+ZI*ZI
            IF(RI2.GT.(R-1.0D+00)**2) GOTO 200
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 200
            END IF
            FAC   = R - RI2/R
            FAC2  = FAC*FAC
            RFAC2 = R*FAC2
            DUM   = -SCALE*QI*QI/RFAC2
            ENRXN = ENRXN - PT5*QI*QI/FAC
            FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*XI
            FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*YI
            FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*ZI
            VIR(1)        =VIR(1)         + DUM*XI*CORD(1,IFFAT)
            VIR(2)        =VIR(2)         + DUM*YI*CORD(2,IFFAT)
            VIR(3)        =VIR(3)         + DUM*ZI*CORD(3,IFFAT)
            IYES = 0
            DO KFIX=1,NFIXMM
               IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
            ENDDO
            IF(IYES.EQ.1) THEN
               VIR(1)    =VIR(1)     - DUM*XI*CORD(1,IFFAT)
               VIR(2)    =VIR(2)     - DUM*YI*CORD(2,IFFAT)
               VIR(3)    =VIR(3)     - DUM*ZI*CORD(3,IFFAT)
            END IF
            DO 210 JFFAT = IFFAT+1, NFFAT
               IF(CHARG(JFFAT).EQ.ZERO) GOTO 210
               QJ    = CHARG(JFFAT)
               XJ    = CORD(1,JFFAT) - CENTX
               YJ    = CORD(2,JFFAT) - CENTY
               ZJ    = CORD(3,JFFAT) - CENTZ
               RJ2   = XJ*XJ+YJ*YJ+ZJ*ZJ
               IF(RJ2.GT.(R-1.0D+00)**2) GOTO 210
               RIRJ  = XI*XJ+YI*YJ+ZI*ZJ
               FAC   = RI2*RJ2/R2 + R2 - TWO*RIRJ
               FACRT = SQRT(FAC)
               DUM   = SCALE*QI*QJ/(FAC*FACRT)
               ENRXN = ENRXN - QI*QJ/FACRT
               FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*(XI*RJ2/R2-XJ)
               FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*(YI*RJ2/R2-YJ)
               FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*(ZI*RJ2/R2-ZJ)
               FFGRD(1,JFFAT)=FFGRD(1,JFFAT) + DUM*(XJ*RI2/R2-XI)
               FFGRD(2,JFFAT)=FFGRD(2,JFFAT) + DUM*(YJ*RI2/R2-YI)
               FFGRD(3,JFFAT)=FFGRD(3,JFFAT) + DUM*(ZJ*RI2/R2-ZI)
               VIR(1) =VIR(1) + DUM*(XI*RJ2/R2-XJ)*CORD(1,IFFAT)
               VIR(2) =VIR(2) + DUM*(YI*RJ2/R2-YJ)*CORD(2,IFFAT)
               VIR(3) =VIR(3) + DUM*(ZI*RJ2/R2-ZJ)*CORD(3,IFFAT)
               VIR(1) =VIR(1) + DUM*(XJ*RI2/R2-XI)*CORD(1,JFFAT)
               VIR(2) =VIR(2) + DUM*(YJ*RI2/R2-YI)*CORD(2,JFFAT)
               VIR(3) =VIR(3) + DUM*(ZJ*RI2/R2-ZI)*CORD(3,JFFAT)
               IYES = 0
               JYES = 0
               DO KFIX=1,NFIXMM
                  IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
                  IF(JFFAT.EQ.IFIXMM(KFIX)) JYES = 1
               ENDDO
               IF(IYES.EQ.1.AND.JYES.EQ.1) THEN
                  VIR(1) =VIR(1) - DUM*(XI*RJ2/R2-XJ)*CORD(1,IFFAT)
                  VIR(2) =VIR(2) - DUM*(YI*RJ2/R2-YJ)*CORD(2,IFFAT)
                  VIR(3) =VIR(3) - DUM*(ZI*RJ2/R2-ZJ)*CORD(3,IFFAT)
                  VIR(1) =VIR(1) - DUM*(XJ*RI2/R2-XI)*CORD(1,JFFAT)
                  VIR(2) =VIR(2) - DUM*(YJ*RI2/R2-YI)*CORD(2,JFFAT)
                  VIR(3) =VIR(3) - DUM*(ZJ*RI2/R2-ZI)*CORD(3,JFFAT)
               END IF
 210        CONTINUE
 200     CONTINUE
         ENRXN = ENRXN*SCALE
      END IF
C
      IF(ISPHSOL.GE.60) THEN
         SCALE = (RXNEPS-ONE)/RXNEPS
         IPCOUNT = ME - 1
         DO 300 ITS=1, NTS
            POT1(ITS) = ZERO
            DO 310 JFFAT=1,NFFAT
               IF(GOPARR) THEN
                  IPCOUNT = IPCOUNT + 1
                  IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 310
               END IF
               R2 =  (XTS(ITS)-CORD(1,JFFAT))**2
     *              +(YTS(ITS)-CORD(2,JFFAT))**2
     *              +(ZTS(ITS)-CORD(3,JFFAT))**2
               R  = SQRT(R2)
               POT1(ITS) = POT1(ITS)+CHARG(JFFAT)/R
 310        CONTINUE
 300     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2405,POT1,NTS)
         IPCOUNT = ME - 1
         DO 320 ITS = 1, NTS
            QRXN1(ITS) = ZERO
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 320
            END IF
            DO JTS = 1, NTS
               QRXN1(ITS) = QRXN1(ITS)-CMAT1(ITS,JTS)*POT1(JTS)
            ENDDO
            QRXN1(ITS) = QRXN1(ITS)*SCALE
            ENRXN      = ENRXN + QRXN1(ITS)*POT1(ITS)
 320     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2406,QRXN1,NTS)
         ENRXN = PT5*ENRXN
      END IF
      IF(ISPHSOL.GE.60 .AND. IDOPOL.EQ.0) THEN
         IPCOUNT = ME - 1
         DO IFFAT=1,NFFAT
            QIFFAT = CHARG(IFFAT)
            XI     = CORD(1,IFFAT)
            YI     = CORD(2,IFFAT)
            ZI     = CORD(3,IFFAT)
            RI2    = (XI-CENTX)**2 + (YI-CENTY)**2 + (ZI-CENTZ)**2
            DO 340 JTS=1, NTS
               IF(GOPARR) THEN
                  IPCOUNT = IPCOUNT + 1
                  IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 340
               END IF
               XJ   = XTS(JTS)
               YJ   = YTS(JTS)
               ZJ   = ZTS(JTS)
               QJTS = QRXN1(JTS)
               X    = XI - XJ
               Y    = YI - YJ
               Z    = ZI - ZJ
               R2   = X*X + Y*Y + Z*Z
               R    = SQRT(R2)
               R3   = R*R2
               DUM  = -QIFFAT*QJTS/R3
               FFGRD(1,IFFAT) = FFGRD(1,IFFAT) + DUM*X
               FFGRD(2,IFFAT) = FFGRD(2,IFFAT) + DUM*Y
               FFGRD(3,IFFAT) = FFGRD(3,IFFAT) + DUM*Z
               VIR(1)         = VIR(1)         + DUM*X*CORD(1,IFFAT)
               VIR(2)         = VIR(2)         + DUM*Y*CORD(2,IFFAT)
               VIR(3)         = VIR(3)         + DUM*Z*CORD(3,IFFAT)
               IYES = 0
               DO KFIX=1,NFIXMM
                  IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
               ENDDO
               IF(IYES.EQ.1) THEN
                  VIR(1)      = VIR(1)         - DUM*X*CORD(1,IFFAT)
                  VIR(2)      = VIR(2)         - DUM*Y*CORD(2,IFFAT)
                  VIR(3)      = VIR(3)         - DUM*Z*CORD(3,IFFAT)
               END IF
 340        CONTINUE
         ENDDO
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK POLRXN
!>   
!> @brief    reaction field and induced dipole
!>   
!> @author   Hui Li, Dejun Si
!>           - Jan 2011
!>                    
!> @details  calculate the reaction field and induced dipole
!>           due to MM charges
!>
      SUBROUTINE POLRXN(CORD,FFGRD,CHARG,POL,POLSV,DIP,
     *                  FIELD1,FIELD2,FIELD3,
     *                  XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *                  NONLS1,L1213J)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ONE=1.0D+00, ZERO=0.0D+00, PT5=0.5D+00,
     *           TWO=2.0D+00, THREE=3.0D+00, FOUR=4.0D+00)
      PARAMETER (ONESIX=1.0D+00/6.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),
     *          POL(*),POLSV(*),DIP(3,*),FIELD1(3,*),FIELD2(3,*),
     *          FIELD3(3,*),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),QRXN1(NTS),QRXN2(NTS),
     *          POT1(NTS),POT2(NTS),CMAT1(NTS,NTS),NONLS1(2,*),
     *          L1213J(2,*)
C
      COMMON /FFDAMP/ IPODAMP,IPO1213,SCRFAC,RSCRFAC,SCRF2,SCRF3,SCRF4
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, DEJUN SI, JAN 2011, LINCOLN
C
      ENPOL    = ZERO
      ENRXNPOL = ZERO
      IF(IDOCHG.EQ.0) RETURN
      IF(IDOPOL.EQ.0) RETURN
C
C
C     -- FIELD1: FIELD AT POL DUE TO MM CHARGE --
C
      CALL VCLR(FIELD1,1,3*NFFAT)
C
      DO LL=1,2
      IF(LL.EQ.1) THEN
         NN1  = 1
         NN2  = NTODO
         SIGN = 1.0D+00
      END IF
      IF(LL.EQ.2) THEN
         NN1  = L11213
         NN2  = L21213
         SIGN = -1.0D+00
      END IF
      DO 100 III=NN1, NN2
         IF(LL.EQ.1) THEN
            IFFAT = NONLS1(1,III)
            JFFAT = NONLS1(2,III)
         END IF
         IF(LL.EQ.2) THEN
            IFFAT = L1213J(1,III)
            JFFAT = L1213J(2,III)
         END IF
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 100
         QI    = CHARG(IFFAT)
         QJ    = CHARG(JFFAT)
         POLI  = POL(IFFAT)
         POLJ  = POL(JFFAT)
         IF(QI  .EQ.ZERO.AND.POLI.EQ.ZERO) GOTO 100
         IF(QJ  .EQ.ZERO.AND.POLJ.EQ.ZERO) GOTO 100
         IF(POLI.EQ.ZERO.AND.POLJ.EQ.ZERO) GOTO 100
         IF(QI  .EQ.ZERO.AND.  QJ.EQ.ZERO) GOTO 100
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         PBCX  = XBOX * ANINT(X*ONEXBOX)
         PBCY  = YBOX * ANINT(Y*ONEYBOX)
         PBCZ  = ZBOX * ANINT(Z*ONEZBOX)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         IF(R2.GT.SWRB2) GOTO 100
         IF(R2.LT.0.01D+00) GOTO 100
         R     = SQRT(R2)
         ONER  = ONE/R
         IF(IPOLSHF.EQ.1) CALL SHIFT(R2,R,ONER,X,Y,Z)
         IF(IPOLSHF.EQ.0) CALL SWFUNC(R2,X,Y,Z)
C
         ONER2 = ONER*ONER
         ONER3 = ONER2*ONER
         SWF   = SWF*SIGN
         DUMI  = QJ*ONER3*SWF
         DUMJ  = QI*ONER3*SWF
         FIELD1(1,IFFAT)=FIELD1(1,IFFAT)+DUMI*X
         FIELD1(2,IFFAT)=FIELD1(2,IFFAT)+DUMI*Y
         FIELD1(3,IFFAT)=FIELD1(3,IFFAT)+DUMI*Z
         FIELD1(1,JFFAT)=FIELD1(1,JFFAT)-DUMJ*X
         FIELD1(2,JFFAT)=FIELD1(2,JFFAT)-DUMJ*Y
         FIELD1(3,JFFAT)=FIELD1(3,JFFAT)-DUMJ*Z
 100  CONTINUE
      ENDDO
      IF(GOPARR) CALL DDI_GSUMF(2405,FIELD1,3*NFFAT)
C
C     -- FIELD2: FIELD AT POL DUE TO REACTION FIELD OF MM CHARGE --
C
      CALL VCLR(FIELD2,1,3*NFFAT)
C
      IF(ISPHSOL.EQ.1 .AND. RSPHSOL.LT.1.0D+30) THEN
      SCALE = (RXNEPS-ONE)/RXNEPS
      R     = RSPHSOL
      R2    = R*R
      R3    = R*R2
      R4    = R*R3
      IPCOUNT = ME - 1
      DO 200 IFFAT = 1, NFFAT
         IF(CHARG(IFFAT).EQ.ZERO.AND.POL(IFFAT).EQ.ZERO) GOTO 200
         QI    = CHARG(IFFAT)
         XI    = CORD(1,IFFAT) - CENTX
         YI    = CORD(2,IFFAT) - CENTY
         ZI    = CORD(3,IFFAT) - CENTZ
         RI2   = XI*XI+YI*YI+ZI*ZI
         IF(RI2.GT.(R-1.0D+00)**2) GOTO 200
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         FAC   = R - RI2/R
         FAC2  = FAC*FAC
         RFAC2 = R*FAC2
         DUM   = SCALE*QI/RFAC2
         FIELD2(1,IFFAT) = FIELD2(1,IFFAT) + DUM*XI
         FIELD2(2,IFFAT) = FIELD2(2,IFFAT) + DUM*YI
         FIELD2(3,IFFAT) = FIELD2(3,IFFAT) + DUM*ZI
         DO 210 JFFAT = IFFAT+1, NFFAT
            IF(CHARG(JFFAT).EQ.ZERO.AND.POL(JFFAT).EQ.ZERO) GOTO 210
            QJ    = CHARG(JFFAT)
            XJ    = CORD(1,JFFAT) - CENTX
            YJ    = CORD(2,JFFAT) - CENTY
            ZJ    = CORD(3,JFFAT) - CENTZ
            RJ2   = XJ*XJ+YJ*YJ+ZJ*ZJ
            IF(RJ2.GT.(R-1.0D+00)**2) GOTO 210
            RIRJ  = XI*XJ+YI*YJ+ZI*ZJ
            FAC   = RI2*RJ2/R2 + R2 - TWO*RIRJ
            FACRT = SQRT(FAC)
            DUM   = -SCALE/(FAC*FACRT)
            DUMI  = DUM*QJ
            DUMJ  = DUM*QI
            FIELD2(1,IFFAT)=FIELD2(1,IFFAT) + DUMI*(XI*RJ2/R2-XJ)
            FIELD2(2,IFFAT)=FIELD2(2,IFFAT) + DUMI*(YI*RJ2/R2-YJ)
            FIELD2(3,IFFAT)=FIELD2(3,IFFAT) + DUMI*(ZI*RJ2/R2-ZJ)
            FIELD2(1,JFFAT)=FIELD2(1,JFFAT) + DUMJ*(XJ*RI2/R2-XI)
            FIELD2(2,JFFAT)=FIELD2(2,JFFAT) + DUMJ*(YJ*RI2/R2-YI)
            FIELD2(3,JFFAT)=FIELD2(3,JFFAT) + DUMJ*(ZJ*RI2/R2-ZI)
 210     CONTINUE
 200  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2406,FIELD2,3*NFFAT)
      END IF
C
C     -- SOLVE INDUCED DIPOLES --
      CALL SOLVEDIP(CORD,POL,POLSV,DIP,ENPOL,
     *              FIELD1,FIELD2,FIELD3,
     *              NONLS1,L1213J,
     *              XTS,YTS,ZTS,CMAT1,POT2,QRXN1,QRXN2,NTS)
C
      ENRXNPOL = ZERO
      IF(ISPHSOL.EQ.1 .AND. RSPHSOL.LT.1.0D+30) THEN
         DO IFFAT=1,NFFAT
            ENRXNPOL = ENRXNPOL - FIELD2(1,IFFAT)*DIP(1,IFFAT)
     *                          - FIELD2(2,IFFAT)*DIP(2,IFFAT)
     *                          - FIELD2(3,IFFAT)*DIP(3,IFFAT)
         ENDDO
      ELSE IF(ISPHSOL.GE.60 .AND. RSPHSOL.LT.1.0D+30) THEN
         DO ITS = 1, NTS
            ENRXNPOL = ENRXNPOL + POT1(ITS)*QRXN2(ITS)
         ENDDO
      END IF
      ENRXNPOL = PT5*ENRXNPOL
C
C     -- COMPUTE GRADIENTS --
C
      DO LL=1,2
      IF(LL.EQ.1) THEN
         NN1  = 1
         NN2  = NTODO 
         SIGN = 1.0D+00
      END IF
      IF(LL.EQ.2) THEN
         NN1  = L11213
         NN2  = L21213
         SIGN = -1.0D+00
      END IF
      DO 400 III=NN1, NN2
         IF(LL.EQ.1) THEN
            IFFAT = NONLS1(1,III)
            JFFAT = NONLS1(2,III)
         END IF
         IF(LL.EQ.2) THEN
            IFFAT = L1213J(1,III)
            JFFAT = L1213J(2,III)
         END IF
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 400
         IF(POL(IFFAT).EQ.ZERO.AND.CHARG(IFFAT).EQ.ZERO) GOTO 400
         QI    = CHARG(IFFAT)
         DIPIX = DIP(1,IFFAT)
         DIPIY = DIP(2,IFFAT)
         DIPIZ = DIP(3,IFFAT)
         IF(POL(JFFAT).EQ.ZERO.AND.CHARG(JFFAT).EQ.ZERO) GOTO 400
         QJ    = CHARG(JFFAT)
         DIPJX = DIP(1,JFFAT)
         DIPJY = DIP(2,JFFAT)
         DIPJZ = DIP(3,JFFAT)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         PBCX  = XBOX * ANINT(X*ONEXBOX)
         PBCY  = YBOX * ANINT(Y*ONEYBOX)
         PBCZ  = ZBOX * ANINT(Z*ONEZBOX)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         IF(R2.GT.SWRB2) GOTO 400
         IF(R2.LT.0.01D+00) GOTO 400
         R     = SQRT(R2)
C
         FE    = ONE
         FT    = ONE
         FEGRD = ZERO
         FTGRD = ZERO
         IF(IPODAMP.GT.0) THEN
            POLIJ = POLSV(IFFAT)*POLSV(JFFAT) + 1.0D-60
            POL6  = POLIJ**ONESIX
            RPOL6 = ONE/POL6
            RSFAC = RSCRFAC*RPOL6
            VFAC  = R*RSFAC
            VFAC2 = VFAC*VFAC
            VFAC3 = VFAC2*VFAC
            VFAC4 = VFAC3*VFAC
            UFAC  = R*RPOL6
            UFAC2 = UFAC*UFAC
            UFAC3 = UFAC2*UFAC
            IF(IPODAMP.EQ.1.AND.VFAC.LT.ONE) THEN
C              -- LINEAR THOLE MODEL
               FE    = FOUR*VFAC3-THREE*VFAC4
               FT    = VFAC4
               FEGRD = 12.0D+00*(VFAC2-VFAC3)*RSFAC
               FTGRD = FOUR*VFAC3*RSFAC
            ELSE IF(IPODAMP.EQ.2) THEN
C              -- EXPONENTIAL THOLE MODEL
               VALEXP= EXP(-SCRFAC*UFAC)
               FE    = ONE-(PT5*SCRF2*UFAC2+SCRFAC*UFAC+ONE)*VALEXP
               FT    = ONE-(ONESIX*SCRF3*UFAC3+PT5*SCRF2*UFAC2+
     *                      SCRFAC*UFAC+ONE)*VALEXP
               FEGRD = PT5*SCRF3*UFAC2*RPOL6*VALEXP
               FTGRD = ONESIX*SCRF4*UFAC3*RPOL6*VALEXP
            ELSE IF(IPODAMP.EQ.3) THEN
C              -- THOLE-TINKER EXPONENTIAL MODEL
               VALEXP= EXP(-SCRFAC*UFAC3)
               FE    = ONE-VALEXP
               FT    = ONE-(ONE+SCRFAC*UFAC3)*VALEXP
               FEGRD = THREE*SCRFAC*UFAC2*RPOL6*VALEXP
               FTGRD = FEGRD*SCRFAC*UFAC3
            END IF
         END IF
C
         ONER  = ONE/R
         IF(IPOLSHF.EQ.1) CALL SHIFT(R2,R,ONER,X,Y,Z)
         IF(IPOLSHF.EQ.0) CALL SWFUNC(R2,X,Y,Z)
C
         XX    = X*X
         YY    = Y*Y
         ZZ    = Z*Z
         XY    = X*Y
         XZ    = X*Z
         YZ    = Y*Z
         ONER2 = ONER*ONER
         ONER3 = ONER2*ONER
         ONER4 = ONER2*ONER2
         ONER5 = ONER2*ONER3
         ONER6 = ONER3*ONER3
         ONER7 = ONER2*ONER5
C
C        - FORCES BETWEEN CHARGE AND DIPOLE
C
         QIDOT = THREE*ONER5*(DIPJX*X+DIPJY*Y+DIPJZ*Z)*QI
         QJDOT = THREE*ONER5*(DIPIX*X+DIPIY*Y+DIPIZ*Z)*QJ
         QIONER3= QI*ONER3
         QJONER3= QJ*ONER3
C              NEGATIVE FORCE ON QI BY DIPJ
         DXI   = DIPJX*QIONER3 - QIDOT*X
         DYI   = DIPJY*QIONER3 - QIDOT*Y
         DZI   = DIPJZ*QIONER3 - QIDOT*Z
C              NEGATIVE FORCE ON QJ BY DIPI
C                       FORCE ON DIPI BY QJ
         DXJ   = DIPIX*QJONER3 - QJDOT*X
         DYJ   = DIPIY*QJONER3 - QJDOT*Y
         DZJ   = DIPIZ*QJONER3 - QJDOT*Z
C              NEGATIVE FORCE ON IFFAT
         DX    = DXI - DXJ
         DY    = DYI - DYJ
         DZ    = DZI - DZJ
C
C        - FORCES BETWEEN DIPOLE AND DIPOLE -
C
         IF(IPO1213.EQ.1.AND.LL.EQ.2) GOTO 330
         IF(IDOPOL.GT.1) THEN
         DOTM  = DIPJX*DIPIX + DIPJY*DIPIY + DIPJZ*DIPIZ
         DOTXY = DIPJY*DIPIX + DIPIY*DIPJX
         DOTXZ = DIPJZ*DIPIX + DIPIZ*DIPJX
         DOTYZ = DIPJY*DIPIZ + DIPIY*DIPJZ
         DOTX  = TWO*DIPJX*DIPIX*X + DOTXY*Y + DOTXZ*Z
         DOTY  = TWO*DIPJY*DIPIY*Y + DOTXY*X + DOTYZ*Z
         DOTZ  = TWO*DIPJZ*DIPIZ*Z + DOTXZ*X + DOTYZ*Y
         DUM   = THREE*ONER5
         TEMP  = DIPIX*DIPJX*XX
     *          +DIPIY*DIPJY*YY
     *          +DIPIZ*DIPJZ*ZZ
     *          +(DIPIX*DIPJY+DIPIY*DIPJX)*XY
     *          +(DIPIX*DIPJZ+DIPIZ*DIPJX)*XZ
     *          +(DIPIY*DIPJZ+DIPIZ*DIPJY)*YZ
         DUM7  = 15.0D+00*TEMP*ONER7*FT
         FEDOTM= FE*DOTM
         FTDOTX= FT*DOTX
         FTDOTY= FT*DOTY
         FTDOTZ= FT*DOTZ
         DUM4  = FEGRD*DOTM*ONER4
         DUM6  = THREE*FTGRD*TEMP*ONER6
C        - NEGATIVE FORCE ON IFFAT
         DX  = DX - DUM*(FEDOTM*X+FTDOTX)+(DUM4-DUM6+DUM7)*X
         DY  = DY - DUM*(FEDOTM*Y+FTDOTY)+(DUM4-DUM6+DUM7)*Y
         DZ  = DZ - DUM*(FEDOTM*Z+FTDOTZ)+(DUM4-DUM6+DUM7)*Z
         END IF
C
 330     CONTINUE
C
C        - ENERGY-SWFDX TERMS
C
         FLDIX = QJONER3*X      ! FIELD AT DIPI DUE TO QJ
         FLDIY = QJONER3*Y
         FLDIZ = QJONER3*Z
         FLDJX = QIONER3*(-X)   ! FIELD AT DIPJ DUE TO QI
         FLDJY = QIONER3*(-Y)
         FLDJZ = QIONER3*(-Z)
         EDIQJ = -(FLDIX*DIPIX+FLDIY*DIPIY+FLDIZ*DIPIZ) ! E = -F*D
         EDJQI = -(FLDJX*DIPJX+FLDJY*DIPJY+FLDJZ*DIPJZ)
C
         IF(IDOPOL.EQ.1) THEN
            EDIDJ = ZERO
         ELSE
            DOTJ  = THREE*ONER5*FT*(DIPJX*X+DIPJY*Y+DIPJZ*Z)
            FLDIX = -DIPJX*ONER3*FE + DOTJ*X  ! FIELD AT DIPI DUE TO DIPJ
            FLDIY = -DIPJY*ONER3*FE + DOTJ*Y
            FLDIZ = -DIPJZ*ONER3*FE + DOTJ*Z
            EDIDJ = -(DIPIX*FLDIX + DIPIY*FLDIY + DIPIZ*FLDIZ) ! E=-F*D
         END IF
         IF(IPO1213.EQ.1.AND.LL.EQ.2) EDIDJ=ZERO
         EPAIR = (EDIQJ + EDJQI + EDIDJ)*SIGN
C
         DEX   = DX*SWF*SIGN
         DEY   = DY*SWF*SIGN
         DEZ   = DZ*SWF*SIGN
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DEX
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DEY
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DEZ
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT)+EPAIR*SWFDX
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT)+EPAIR*SWFDY
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT)+EPAIR*SWFDZ
         FFGRD(1,JFFAT)=FFGRD(1,JFFAT) - DEX
         FFGRD(2,JFFAT)=FFGRD(2,JFFAT) - DEY
         FFGRD(3,JFFAT)=FFGRD(3,JFFAT) - DEZ
         FFGRD(1,JFFAT)=FFGRD(1,JFFAT)-EPAIR*SWFDX
         FFGRD(2,JFFAT)=FFGRD(2,JFFAT)-EPAIR*SWFDY
         FFGRD(3,JFFAT)=FFGRD(3,JFFAT)-EPAIR*SWFDZ
         VIR(1)    =VIR(1)     + DEX*X + EPAIR*SWFDX*X
         VIR(2)    =VIR(2)     + DEY*Y + EPAIR*SWFDY*Y
         VIR(3)    =VIR(3)     + DEZ*Z + EPAIR*SWFDZ*Z
         IYES = 0
         JYES = 0
         DO KFIX=1,NFIXMM
            IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
            IF(JFFAT.EQ.IFIXMM(KFIX)) JYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.JYES.EQ.1) THEN
            VIR(1)    =VIR(1)     - DEX*X - EPAIR*SWFDX*X
            VIR(2)    =VIR(2)     - DEY*Y - EPAIR*SWFDY*Y
            VIR(3)    =VIR(3)     - DEZ*Z - EPAIR*SWFDZ*Z
         END IF
 400  CONTINUE
      ENDDO
C
C     -- FORCE CORRECTION DUE TO REACTION FIELD DIRECT METHOD --
C        (IMAGE CHARGE METHOD)
C
      IF(ISPHSOL.EQ.1 .AND. RSPHSOL.LT.1.0D+30) THEN
      R    = RSPHSOL
      R2   = R*R
      R3   = R*R2
      R4   = R2*R2
      IPCOUNT = ME - 1
      DO 500 IFFAT=1,NFFAT
         IF(POL(IFFAT).EQ.ZERO.AND.CHARG(IFFAT).EQ.ZERO) GOTO 500
         QI     = CHARG(IFFAT)
         XI     = CORD(1,IFFAT) - CENTX
         YI     = CORD(2,IFFAT) - CENTY
         ZI     = CORD(3,IFFAT) - CENTZ
         RI2    = XI*XI+YI*YI+ZI*ZI
         IF(RI2.GT.(R-1.0D+00)**2) GOTO 500
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 500
         END IF
         DIX    = DIP(1,IFFAT)
         DIY    = DIP(2,IFFAT)
         DIZ    = DIP(3,IFFAT)
C
         DEDX1 = ZERO
         DEDY1 = ZERO
         DEDZ1 = ZERO
         DEDX2 = ZERO
         DEDY2 = ZERO
         DEDZ2 = ZERO
         DEDX3 = ZERO
         DEDY3 = ZERO
         DEDZ3 = ZERO
         DO 510 JFFAT=1,NFFAT
            QJ     = CHARG(JFFAT)
            XJ     = CORD(1,JFFAT) - CENTX
            YJ     = CORD(2,JFFAT) - CENTY
            ZJ     = CORD(3,JFFAT) - CENTZ
            RJ2    = XJ*XJ+YJ*YJ+ZJ*ZJ
            IF(RJ2.GT.(R-1.0D+00)**2) GOTO 510
            DJX    = DIP(1,JFFAT)
            DJY    = DIP(2,JFFAT)
            DJZ    = DIP(3,JFFAT)
            DJRJ   = DJX*XJ + DJY*YJ + DJZ*ZJ
            DJRI   = DJX*XI + DJY*YI + DJZ*ZI
            RIRJ   = XI*XJ+YI*YJ+ZI*ZJ
            FAC2   = ONE/(RI2*RJ2 + R4 -TWO*R2*RIRJ)
            FAC    = SQRT(FAC2)
            FAC3   = FAC*FAC2
            FAC5   = FAC3*FAC2
            FAC7   = FAC5*FAC2
C
C         (A) FORCE ON CHARGE(IFFAT) BY REACTION FIELD OF DIPOLE(JFFAT)
C
            FDIMGX = - (TWO*R*DJRJ*XI - R3*DJX)*FAC3
     *               + (R*RI2*DJRJ - R3*DJRI)*FAC5
     *                      *THREE*(RJ2*XI - R2*XJ)
            FDIMGY = - (TWO*R*DJRJ*YI - R3*DJY)*FAC3
     *               + (R*RI2*DJRJ - R3*DJRI)*FAC5
     *                      *THREE*(RJ2*YI - R2*YJ)
            FDIMGZ = - (TWO*R*DJRJ*ZI - R3*DJZ)*FAC3
     *               + (R*RI2*DJRJ - R3*DJRI)*FAC5
     *                      *THREE*(RJ2*ZI - R2*ZJ)
            DEDX1 = DEDX1 - SCALE*QI*FDIMGX
            DEDY1 = DEDY1 - SCALE*QI*FDIMGY
            DEDZ1 = DEDZ1 - SCALE*QI*FDIMGZ
C
C         (B) FORCE ON DIPOLE(IFFAT) BY REACTION FIELD OF CHARGE(JFFAT)
C
            DUM2   = FAC2*R2
            DUM    = FAC*R
            DUM3   = DUM2*DUM
            DUM5   = DUM2*DUM3
            FDXDX  = DUM5*QJ*THREE*(RJ2/R2*XI-XJ)*(RJ2/R2*XI-XJ)
     *              -DUM3*QJ*(RJ2/R2)
            FDXDY  = DUM5*QJ*THREE*(RJ2/R2*XI-XJ)*(RJ2/R2*YI-YJ)
            FDXDZ  = DUM5*QJ*THREE*(RJ2/R2*XI-XJ)*(RJ2/R2*ZI-ZJ)
            FDYDX  = DUM5*QJ*THREE*(RJ2/R2*YI-YJ)*(RJ2/R2*XI-XJ)
            FDYDY  = DUM5*QJ*THREE*(RJ2/R2*YI-YJ)*(RJ2/R2*YI-YJ)
     *              -DUM3*QJ*(RJ2/R2)
            FDYDZ  = DUM5*QJ*THREE*(RJ2/R2*YI-YJ)*(RJ2/R2*ZI-ZJ)
            FDZDX  = DUM5*QJ*THREE*(RJ2/R2*ZI-ZJ)*(RJ2/R2*XI-XJ)
            FDZDY  = DUM5*QJ*THREE*(RJ2/R2*ZI-ZJ)*(RJ2/R2*YI-YJ)
            FDZDZ  = DUM5*QJ*THREE*(RJ2/R2*ZI-ZJ)*(RJ2/R2*ZI-ZJ)
     *              -DUM3*QJ*(RJ2/R2)
C
            DEDX2 = DEDX2 - SCALE*(DIX*FDXDX+DIY*FDYDX+DIZ*FDZDX)
            DEDY2 = DEDY2 - SCALE*(DIX*FDXDY+DIY*FDYDY+DIZ*FDZDY)
            DEDZ2 = DEDZ2 - SCALE*(DIX*FDXDZ+DIY*FDYDZ+DIZ*FDZDZ)
C
C         (C) FORCE ON DIPOLE(IFFAT) BY REACTION FIELD OF DIPOLE(JFFAT)
C
            FDXDX  =-FAC3*TWO*R*DJRJ
     *              +FAC5*(TWO*R*DJRJ*XI-R3*DJX)*THREE*(RJ2*XI-R2*XJ)
     *              +FAC5*(TWO*R*DJRJ*XI-R3*DJX)*THREE*(RJ2*XI-R2*XJ)
     *              +FAC5*(R*RI2*DJRJ-R3*DJRI)*THREE*RJ2
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*XI-R2*XJ)*(RJ2*XI-R2*XJ)
            FDXDY  =+FAC5*(TWO*R*DJRJ*XI-R3*DJX)*THREE*(RJ2*YI-R2*YJ)
     *              +FAC5*(TWO*R*DJRJ*YI-R3*DJY)*THREE*(RJ2*XI-R2*XJ)
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*XI-R2*XJ)*(RJ2*YI-R2*YJ)
            FDXDZ  =+FAC5*(TWO*R*DJRJ*XI-R3*DJX)*THREE*(RJ2*ZI-R2*ZJ)
     *              +FAC5*(TWO*R*DJRJ*ZI-R3*DJZ)*THREE*(RJ2*XI-R2*XJ)
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*XI-R2*XJ)*(RJ2*ZI-R2*ZJ)
            FDYDX  =+FAC5*(TWO*R*DJRJ*YI-R3*DJY)*THREE*(RJ2*XI-R2*XJ)
     *              +FAC5*(TWO*R*DJRJ*XI-R3*DJX)*THREE*(RJ2*YI-R2*YJ)
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*YI-R2*YJ)*(RJ2*XI-R2*XJ)
            FDYDY  =-FAC3*TWO*R*DJRJ
     *              +FAC5*(TWO*R*DJRJ*YI-R3*DJY)*THREE*(RJ2*YI-R2*YJ)
     *              +FAC5*(TWO*R*DJRJ*YI-R3*DJY)*THREE*(RJ2*YI-R2*YJ)
     *              +FAC5*(R*RI2*DJRJ-R3*DJRI)*THREE*RJ2
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*YI-R2*YJ)*(RJ2*YI-R2*YJ)
            FDYDZ  =+FAC5*(TWO*R*DJRJ*YI-R3*DJY)*THREE*(RJ2*ZI-R2*ZJ)
     *              +FAC5*(TWO*R*DJRJ*ZI-R3*DJZ)*THREE*(RJ2*YI-R2*YJ)
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*YI-R2*YJ)*(RJ2*ZI-R2*ZJ)
            FDZDX  =+FAC5*(TWO*R*DJRJ*ZI-R3*DJZ)*THREE*(RJ2*XI-R2*XJ)
     *              +FAC5*(TWO*R*DJRJ*XI-R3*DJX)*THREE*(RJ2*ZI-R2*ZJ)
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*ZI-R2*ZJ)*(RJ2*XI-R2*XJ)
            FDZDY  =+FAC5*(TWO*R*DJRJ*ZI-R3*DJZ)*THREE*(RJ2*YI-R2*YJ)
     *              +FAC5*(TWO*R*DJRJ*YI-R3*DJY)*THREE*(RJ2*ZI-R2*ZJ)
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*ZI-R2*ZJ)*(RJ2*YI-R2*YJ)
            FDZDZ  =-FAC3*TWO*R*DJRJ
     *              +FAC5*(TWO*R*DJRJ*ZI-R3*DJZ)*THREE*(RJ2*ZI-R2*ZJ)
     *              +FAC5*(TWO*R*DJRJ*ZI-R3*DJZ)*THREE*(RJ2*ZI-R2*ZJ)
     *              +FAC5*(R*RI2*DJRJ-R3*DJRI)*THREE*RJ2
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*ZI-R2*ZJ)*(RJ2*ZI-R2*ZJ)
C
            DEDX3 = DEDX3 - SCALE*(DIX*FDXDX+DIY*FDYDX+DIZ*FDZDX)
            DEDY3 = DEDY3 - SCALE*(DIX*FDXDY+DIY*FDYDY+DIZ*FDZDY)
            DEDZ3 = DEDZ3 - SCALE*(DIX*FDXDZ+DIY*FDYDZ+DIZ*FDZDZ)
C
 510     CONTINUE
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DEDX1 + DEDX2 + DEDX3
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DEDY1 + DEDY2 + DEDY3
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DEDZ1 + DEDZ2 + DEDZ3
         VIR(1) =VIR(1) + (DEDX1 + DEDX2 + DEDX3)*CORD(1,IFFAT)
         VIR(2) =VIR(2) + (DEDY1 + DEDY2 + DEDY3)*CORD(2,IFFAT)
         VIR(3) =VIR(3) + (DEDZ1 + DEDZ2 + DEDZ3)*CORD(3,IFFAT)
         IYES = 0
         DO KFIX=1,NFIXMM
            IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
         ENDDO
         IF(IYES.EQ.1) THEN
            VIR(1) =VIR(1) - (DEDX1 + DEDX2 + DEDX3)*CORD(1,IFFAT)
            VIR(2) =VIR(2) - (DEDY1 + DEDY2 + DEDY3)*CORD(2,IFFAT)
            VIR(3) =VIR(3) - (DEDZ1 + DEDZ2 + DEDZ3)*CORD(3,IFFAT)
         END IF
 500  CONTINUE
      END IF
C
C
C     -- FORCE DUE TO REACTION FIELD SURFACE CHARGE --
C        (CPCM OR COSMO STYLE)
C
      IF(ISPHSOL.GE.60 .AND. RSPHSOL.LT.1.0D+30) THEN
         IPCOUNT = ME - 1 
         DO 600 IFFAT=1,NFFAT
            QIFFAT= CHARG(IFFAT)
            DIX   = DIP(1,IFFAT)
            DIY   = DIP(2,IFFAT)
            DIZ   = DIP(3,IFFAT)
            XI    = CORD(1,IFFAT)
            YI    = CORD(2,IFFAT)
            ZI    = CORD(3,IFFAT)
            RI2   = (XI-CENTX)**2 + (YI-CENTY)**2 + (ZI-CENTZ)**2
            DO 610 JTS = 1, NTS
               IF(GOPARR) THEN
                  IPCOUNT = IPCOUNT + 1
                  IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 610
               END IF
               QJ    = QRXN1(JTS) + QRXN2(JTS)
               XJ    = XTS(JTS)
               YJ    = YTS(JTS)
               ZJ    = ZTS(JTS)
               X     = XI - XJ
               Y     = YI - YJ
               Z     = ZI - ZJ
               R2    = X*X + Y*Y + Z*Z
               ONER2 = ONE/R2
               ONER  = SQRT(ONER2)
               ONER3 = ONER2*ONER
               ONER5 = ONER3*ONER2
               DUM   = -QIFFAT*QJ*ONER3
               DXA   = DUM*X
               DYA   = DUM*Y
               DZA   = DUM*Z
               QJONER3= QJ*ONER3
               QJDOT = THREE*ONER5*(DIX*X+DIY*Y+DIZ*Z)*QJ
               DXB   = -DIX*QJONER3 + QJDOT*X
               DYB   = -DIY*QJONER3 + QJDOT*Y
               DZB   = -DIZ*QJONER3 + QJDOT*Z
               FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DXA + DXB
               FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DYA + DYB
               FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DZA + DZB
               VIR(1) =VIR(1) + (DXA + DXB)*CORD(1,IFFAT)
               VIR(2) =VIR(2) + (DYA + DYB)*CORD(2,IFFAT)
               VIR(3) =VIR(3) + (DZA + DZB)*CORD(3,IFFAT)
               IYES = 0
               DO KFIX=1,NFIXMM
                  IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
               ENDDO
               IF(IYES.EQ.1) THEN
                  VIR(1) =VIR(1) - (DXA + DXB)*CORD(1,IFFAT)
                  VIR(2) =VIR(2) - (DYA + DYB)*CORD(2,IFFAT)
                  VIR(3) =VIR(3) - (DZA + DZB)*CORD(3,IFFAT)
               END IF
 610        CONTINUE
 600     CONTINUE
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK SOLVEDIP
!>   
!> @brief    solve for the induced dipole
!>    
!> @author   Hui Li, Dejun Si
!>           - Jan 2011
!>                    
!> @details  iteratively solve for the induced dipoles
!>
      SUBROUTINE SOLVEDIP(CORD,POL,POLSV,DIP,ENPOL,FIELD1,FIELD2,
     *                    FIELD3,NONLS1,L1213J,
     *                    XTS,YTS,ZTS,CMAT1,POT2,QRXN1,QRXN2,NTS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ONE=1.0D+00, ZERO=0.0D+00, PT5=0.5D+00,
     *           TWO=2.0D+00, THREE=3.0D+00, FOUR=4.0D+00)
      PARAMETER (ONESIX=1.0D+00/6.0D+00)
C
      DIMENSION CORD(3,*),POL(*),DIP(3,*),FIELD1(3,*),FIELD2(3,*),
     *          FIELD3(3,*),NONLS1(2,*),L1213J(2,*),POLSV(*),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),POT2(NTS),
     *          QRXN1(NTS),QRXN2(NTS),CMAT1(NTS,NTS)
C
      COMMON /FMCOM / XX(1)
      COMMON /FFDAMP/ IPODAMP,IPO1213,SCRFAC,RSCRFAC,SCRF2,SCRF3,SCRF4
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, DEJUN SI, JAN 2011, LINCOLN
C     HUI LI, MAR 2, 2014, ADD DIPOLD
C
C     -- ITERATIVE METHODS ARE EQUIVALENT TO MATRIX INVERSION
C
C
      IF(IDOPOL.EQ.0) THEN
         ENPOL = ZERO
         CALL VCLR(DIP,1,3*NFFAT)
         CALL VCLR(QRXN2,1,NTS)
         RETURN
      END IF
C
      SUMOLD=ZERO
      DO 305 ITER = 1, IDOPOL
      SUM = ZERO
      CALL VCLR(FIELD3,1,3*NFFAT)
      IF(IDOPOL.EQ.1) GOTO 301
C
C     -- FIELD3: FIELD AT POL DUE TO INDUCED DIPOLES --
C
      NTIMES=2
      IF(IPO1213.EQ.1) NTIMES=1
      DO LL=1,NTIMES
      IF(LL.EQ.1) THEN
         NN1  = 1
         NN2  = NTODO
         SIGN = 1.0D+00
      END IF
      IF(LL.EQ.2) THEN
         NN1  = L11213
         NN2  = L21213
         SIGN = -1.0D+00
      END IF
      DO 300 III=NN1, NN2
         IF(LL.EQ.1) THEN
            IFFAT = NONLS1(1,III)
            JFFAT = NONLS1(2,III)
         END IF
         IF(LL.EQ.2) THEN
            IFFAT = L1213J(1,III)
            JFFAT = L1213J(2,III)
         END IF
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 300
         IF(POL(IFFAT).EQ.ZERO) GOTO 300
         DIPIX = DIP(1,IFFAT)
         DIPIY = DIP(2,IFFAT)
         DIPIZ = DIP(3,IFFAT)
         IF(POL(JFFAT).EQ.ZERO) GOTO 300
         DIPJX = DIP(1,JFFAT)
         DIPJY = DIP(2,JFFAT)
         DIPJZ = DIP(3,JFFAT)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         PBCX  = XBOX * ANINT(X*ONEXBOX)
         PBCY  = YBOX * ANINT(Y*ONEYBOX)
         PBCZ  = ZBOX * ANINT(Z*ONEZBOX)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         IF(R2.GT.SWRB2) GOTO 300
         IF(R2.LT.0.01D+00) GOTO 300
         R     = SQRT(R2)
C
         FE    = ONE
         FT    = ONE
         IF(IPODAMP.GT.0) THEN
            POL6  = (POLSV(IFFAT)*POLSV(JFFAT))**ONESIX
            RPOL6 = ONE/POL6
            RSFAC = RSCRFAC*RPOL6
            VFAC  = R*RSFAC
            VFAC3 = VFAC*VFAC*VFAC
            VFAC4 = VFAC3*VFAC
            UFAC  = R*RPOL6
            UFAC2 = UFAC*UFAC
            UFAC3 = UFAC2*UFAC
            IF(IPODAMP.EQ.1.AND.VFAC.LT.ONE) THEN
C              -- LINEAR THOLE MODEL
               FE    = FOUR*VFAC3-THREE*VFAC4
               FT    = VFAC4
            ELSE IF(IPODAMP.EQ.2) THEN
C              -- EXPONENTIAL THOLE MODEL
               VALEXP= EXP(-SCRFAC*UFAC)
               FE    = ONE-(PT5*SCRF2*UFAC2+SCRFAC*UFAC+ONE)*VALEXP
               FT    = ONE-(ONESIX*SCRF3*UFAC3+PT5*SCRF2*UFAC2+
     *                      SCRFAC*UFAC+ONE)*VALEXP
            ELSE IF(IPODAMP.EQ.3) THEN
C              -- THOLE-TINKER EXPONENTIAL MODEL
               VALEXP= EXP(-SCRFAC*UFAC3)
               FE    = ONE-VALEXP
               FT    = ONE-(ONE+SCRFAC*UFAC3)*VALEXP
            END IF
         END IF
C
         ONER  = ONE/R
         IF(IPOLSHF.EQ.1) CALL SHIFT(R2,R,ONER,X,Y,Z)
         IF(IPOLSHF.EQ.0) CALL SWFUNC(R2,X,Y,Z)
C
         ONER2 = ONER*ONER
         ONER3 = ONER2*ONER
         ONER5 = ONER2*ONER3
         FER3  = ONER3*FE
         FTR5  = ONER5*FT
         DOTJ  = THREE*FTR5*(DIPJX*X+DIPJY*Y+DIPJZ*Z)
         DOTI  = THREE*FTR5*(DIPIX*X+DIPIY*Y+DIPIZ*Z)
         SWF   = SWF*SIGN
         FIELD3(1,IFFAT)=FIELD3(1,IFFAT)+(-DIPJX*FER3+DOTJ*X)*SWF
         FIELD3(2,IFFAT)=FIELD3(2,IFFAT)+(-DIPJY*FER3+DOTJ*Y)*SWF
         FIELD3(3,IFFAT)=FIELD3(3,IFFAT)+(-DIPJZ*FER3+DOTJ*Z)*SWF
         FIELD3(1,JFFAT)=FIELD3(1,JFFAT)+(-DIPIX*FER3+DOTI*X)*SWF
         FIELD3(2,JFFAT)=FIELD3(2,JFFAT)+(-DIPIY*FER3+DOTI*Y)*SWF
         FIELD3(3,JFFAT)=FIELD3(3,JFFAT)+(-DIPIZ*FER3+DOTI*Z)*SWF
 300  CONTINUE
      ENDDO
 301  CONTINUE
C
C
C     -- FIELD3: FIELD AT POL DUE TO REACTION FIELD OF INDUCED DIPOLES
C                DIRECT METHOD (IMAGE CHARGE)
C
      IF(ISPHSOL.EQ.1 .AND. RSPHSOL.LT.1.0D+30) THEN
         SCALE = (RXNEPS-ONE)/RXNEPS
         R     = RSPHSOL
         R2    = R*R
         R3    = R*R2
         R4    = R2*R2
         IPCOUNT = ME - 1
         DO 400 IFFAT = 1, NFFAT
            FDIMGX = ZERO
            FDIMGY = ZERO
            FDIMGZ = ZERO
            XI     = CORD(1,IFFAT) - CENTX
            YI     = CORD(2,IFFAT) - CENTY
            ZI     = CORD(3,IFFAT) - CENTZ
            RI2    = XI*XI+YI*YI+ZI*ZI
            IF(RI2.GT.(R-1.0D+00)**2) GOTO 400
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 400
            END IF
            DIPIX  = DIP(1,IFFAT)
            DIPIY  = DIP(2,IFFAT)
            DIPIZ  = DIP(3,IFFAT)
            DO 410 JFFAT = 1,NFFAT
               XJ     = CORD(1,JFFAT) - CENTX
               YJ     = CORD(2,JFFAT) - CENTY
               ZJ     = CORD(3,JFFAT) - CENTZ
               RJ2    = XJ*XJ+YJ*YJ+ZJ*ZJ
               IF(RJ2.GT.(R-1.0D+00)**2) GOTO 410
               DIPJX  = DIP(1,JFFAT)
               DIPJY  = DIP(2,JFFAT)
               DIPJZ  = DIP(3,JFFAT)
               DJRJ   = DIPJX*XJ+DIPJY*YJ+DIPJZ*ZJ
               DJRI   = DIPJX*XI+DIPJY*YI+DIPJZ*ZI
               RIRJ   = XI*XJ+YI*YJ+ZI*ZJ
               FAC2   = ONE/(RI2*RJ2 + R4 - TWO*R2*RIRJ)
               FAC    = SQRT(FAC2)
               FAC3   = FAC*FAC2
               FAC5   = FAC3*FAC2
               FDIMGX = FDIMGX-SCALE*(TWO*R*DJRJ*XI-R3*DIPJX)*FAC3
     *                        +SCALE*(R*RI2*DJRJ - R3*DJRI)*FAC5
     *                                     *THREE*(RJ2*XI - R2*XJ)
               FDIMGY = FDIMGY-SCALE*(TWO*R*DJRJ*YI-R3*DIPJY)*FAC3
     *                        +SCALE*(R*RI2*DJRJ - R3*DJRI)*FAC5
     *                                     *THREE*(RJ2*YI - R2*YJ)
               FDIMGZ = FDIMGZ-SCALE*(TWO*R*DJRJ*ZI-R3*DIPJZ)*FAC3
     *                        +SCALE*(R*RI2*DJRJ - R3*DJRI)*FAC5
     *                                     *THREE*(RJ2*ZI - R2*ZJ)
 410        CONTINUE
            FIELD3(1,IFFAT) = FIELD3(1,IFFAT) + FDIMGX
            FIELD3(2,IFFAT) = FIELD3(2,IFFAT) + FDIMGY
            FIELD3(3,IFFAT) = FIELD3(3,IFFAT) + FDIMGZ
 400     CONTINUE
      END IF
C
C     -- FIELD3: FIELD AT POL DUE TO REACTION FIELD OF INDUCED DIPOLES
C                (SPHERICAL BOUNDARY SURFACE CHARGE METHOD)
C        POT2  : POTENTIAL AT SURFACE DUE TO INDUCED DIPOLES
C        QRXN2 : SURFACE CHARGE DUE TO INDUCED DIPOLES
C
      IF(ISPHSOL.GE.60 .AND. RSPHSOL.LT.1.0D+30) THEN
         SCALE = (RXNEPS-ONE)/RXNEPS
         IPCOUNT = ME - 1
         DO 500 ITS = 1, NTS
            POT2(ITS) = ZERO
            XI     = XTS(ITS)
            YI     = YTS(ITS)
            ZI     = ZTS(ITS)
            DO 510 JFFAT = 1, NFFAT
               IF(GOPARR) THEN
                  IPCOUNT = IPCOUNT + 1
                  IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 510
               END IF
               XJ    = CORD(1,JFFAT)
               YJ    = CORD(2,JFFAT)
               ZJ    = CORD(3,JFFAT)
               QJ    = XX(LFFCHARG+JFFAT-1)
               DIPJX = DIP(1,JFFAT)         
               DIPJY = DIP(2,JFFAT)
               DIPJZ = DIP(3,JFFAT)
               X     = XI - XJ              
               Y     = YI - YJ
               Z     = ZI - ZJ
               R2    = X*X + Y*Y + Z*Z
               ONER2 = ONE/R2
               ONER  = SQRT(ONER2)
               ONER3 = ONER2*ONER
               POT2(ITS)=POT2(ITS)+(DIPJX*X+DIPJY*Y+DIPJZ*Z)*ONER3
 510        CONTINUE
 500     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2405,POT2,NTS)
         IPCOUNT = ME - 1
         DO 520 ITS = 1, NTS
            QRXN2(ITS) = ZERO
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 520
            END IF
            DO JTS = 1, NTS
               QRXN2(ITS) = QRXN2(ITS) - CMAT1(ITS,JTS)*POT2(JTS)
            ENDDO
            QRXN2(ITS) = QRXN2(ITS)*SCALE
 520     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2404,QRXN2,NTS)
         IPCOUNT = ME - 1
         DO 600 IFFAT=1,NFFAT
            XI = CORD(1,IFFAT)
            YI = CORD(2,IFFAT)
            ZI = CORD(3,IFFAT)
            DO 610 JTS=1, NTS
               IF(GOPARR) THEN
                  IPCOUNT = IPCOUNT + 1
                  IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 610
               END IF
               XJ   = XTS(JTS)
               YJ   = YTS(JTS)
               ZJ   = ZTS(JTS)
               QJ   = QRXN1(JTS) + QRXN2(JTS)
               X    = XI - XJ
               Y    = YI - YJ
               Z    = ZI - ZJ
               R2   = X*X + Y*Y + Z*Z
               ONER2= ONE/R2
               ONER = SQRT(ONER2)
               ONER3= ONER2*ONER
               DUM  = QJ*ONER3
               FIELD3(1,IFFAT)=FIELD3(1,IFFAT)+DUM*X
               FIELD3(2,IFFAT)=FIELD3(2,IFFAT)+DUM*Y
               FIELD3(3,IFFAT)=FIELD3(3,IFFAT)+DUM*Z
 610        CONTINUE
 600     CONTINUE
      END IF
C
      IF(GOPARR) CALL DDI_GSUMF(2406,FIELD3,3*NFFAT)
C
C     - UPDATE DIPOLES AND COMPUTE POLARIZATION ENERGY -
      ENPOL = ZERO
      DO IFFAT=1,NFFAT
         DIP(1,IFFAT)=POL(IFFAT)*(FIELD1(1,IFFAT)
     *                           +FIELD2(1,IFFAT)
     *                           +FIELD3(1,IFFAT))
         DIP(2,IFFAT)=POL(IFFAT)*(FIELD1(2,IFFAT)
     *                           +FIELD2(2,IFFAT)
     *                           +FIELD3(2,IFFAT))
         DIP(3,IFFAT)=POL(IFFAT)*(FIELD1(3,IFFAT)
     *                           +FIELD2(3,IFFAT)
     *                           +FIELD3(3,IFFAT))
         SUM=SUM+ABS(DIP(1,IFFAT))+ABS(DIP(2,IFFAT))+ABS(DIP(3,IFFAT))
C        -- ONLY EXTRENAL FIELD SHOULD BE USED
         ENPOL = ENPOL - FIELD1(1,IFFAT)*DIP(1,IFFAT)
     *                 - FIELD1(2,IFFAT)*DIP(2,IFFAT)
     *                 - FIELD1(3,IFFAT)*DIP(3,IFFAT)
      ENDDO
      IF(ITER.EQ.1) CALL DCOPY(3*NFFAT,DIP,1,XX(LFFDIPOLD),1)
      DO IFFAT=1,NFFAT
         DIP(1,IFFAT)=0.75D+00*DIP(1,IFFAT)+
     *                0.25D+00*XX(LFFDIPOLD+(IFFAT-1)*3  )
         DIP(2,IFFAT)=0.75D+00*DIP(2,IFFAT)+
     *                0.25D+00*XX(LFFDIPOLD+(IFFAT-1)*3+1)
         DIP(3,IFFAT)=0.75D+00*DIP(3,IFFAT)+
     *                0.25D+00*XX(LFFDIPOLD+(IFFAT-1)*3+2)
      ENDDO
      CALL DCOPY(3*NFFAT,DIP,1,XX(LFFDIPOLD),1)
      ENPOL    = PT5*ENPOL
C
      IF(ITER.GT.2) THEN
         DIFF = ABS(SUM - SUMOLD)
         IF(DIFF.LT.POLTOL)THEN
C           IF(MASWRK) WRITE(IW,'(A,F16.14,A,I4,A)')
C    *      'INDUCED DIPOLE CONVERGED TO ',POLTOL,' IN ',ITER,' STEPS.'
            GOTO 306
         END IF
      END IF
      SUMOLD=SUM
      IF(IDOPOL.EQ.1) GOTO 306
 305  CONTINUE
      IF(MASWRK) WRITE(IW,'(A,F16.14,A,I4,A)')
     *'INDUCED DIPOLE NOT CONVERGED TO ',POLTOL,' IN ',IDOPOL,' STEPS.'
      IF(MASWRK) WRITE(IW,'(1X,A,F20.16)')'DIFF=',DIFF
      IF(MASWRK) WRITE(IW,*)'THIS IS A PROBLEM ONLY WHEN THIS MESSAGE',
     *                      ' APPEARS FREQUENTLY'
 306  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK INIVEL
!>   
!> @brief    guess initial velocity
!>    
!> @author   Nandun Thellamurege, Hui Li
!>           - Jan 2011
!>                    
!> @details  assign initial velocity to all QM and MM atoms
!>
      SUBROUTINE INIVEL(VEL,QMVEL,ONEMAS,QM1MAS,CORD,ZMAS,QMZMAS,
     *                  SET,DX,DY,DZ,LISTQM)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION VEL(3,*),QMVEL(3,*),ONEMAS(*),QM1MAS(*),SET(*),
     *          DX(*),DY(*),DZ(*),ZMAS(*),QMZMAS(*),CORD(3,*),
     *          TIMAT(3,3),LISTQM(*)
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOKELVIN=3.15774646D+05, BOLTZK=1.0D+00/TOKELVIN,
     *           PT5=0.50D+00,
     *           TWO=2.0D+00, ZERO=0.0D+00)
C
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C
C     -- FOR U1,U2 UNIFORMLY DISTRIB ON (0,1)
C        X = SQRT(-2*LN(U1)) * COS(2*PI*U2)
C        GIVES NORMALLY DISTRIB X ON (-INF,+INF)
C
      NNNATM = NFFAT + NAT - LISTQM(NFFAT+NAT+1)
      IF(NNNATM.GT.2)     NDOF = 3*NNNATM - 6
      IF(NNNATM.EQ.2)     NDOF = 3*NNNATM - 5
      IF(NRATTLE.GT.0)    NDOF = NDOF - NRATTLE
      IF(XBOX.LT.1.0D+30) NDOF = NDOF + 1
      IF(YBOX.LT.1.0D+30) NDOF = NDOF + 1
      IF(ZBOX.LT.1.0D+30) NDOF = NDOF + 1
      IF(NNNATM.EQ.1)     NDOF = 3
C
      PI     = 3.14159265358979323846264338D+00
      DO IDIM = 1, (NFFAT+NAT)*3
         CALL FFRAND(U1)
         CALL FFRAND(U2)
         SET(IDIM) = SQRT(-2.0D+00*LOG(U1)) * COS(2.0D+00*PI*U2)
      ENDDO
C
C     -- CALCULATE COM --
C
      COMX =ZERO
      COMY =ZERO
      COMZ =ZERO
      SMAS =ZERO
      DO IAT=1,NAT
         COMX =COMX +C(1,IAT)*QMZMAS(IAT)
         COMY =COMY +C(2,IAT)*QMZMAS(IAT)
         COMZ =COMZ +C(3,IAT)*QMZMAS(IAT)
         SMAS =SMAS +QMZMAS(IAT)
      ENDDO
      DO IFFAT=1,NFFAT
         IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NAT)THEN
            COMX =COMX +CORD(1,IFFAT)*ZMAS(IFFAT)
            COMY =COMY +CORD(2,IFFAT)*ZMAS(IFFAT)
            COMZ =COMZ +CORD(3,IFFAT)*ZMAS(IFFAT)
            SMAS =SMAS +ZMAS(IFFAT)
         END IF
      ENDDO
      ONESMAS=1.0D+00/SMAS
      COMX = COMX*ONESMAS
      COMY = COMY*ONESMAS
      COMZ = COMZ*ONESMAS
C
C     -- FIRST ASSIGNMENT --
C
      SUMTX = ZERO
      SUMTY = ZERO
      SUMTZ = ZERO
      SUMAX = ZERO
      SUMAY = ZERO
      SUMAZ = ZERO
      J=0
      DO IAT=1,NAT
         SIGMA=SQRT(BOLTZK*TEMP0*QM1MAS(IAT))
         QMVEL(1,IAT)=SIGMA*SET(J+1)
         QMVEL(2,IAT)=SIGMA*SET(J+2)
         QMVEL(3,IAT)=SIGMA*SET(J+3)
         J=J+3
         DX(IAT) = C(1,IAT)-COMX
         DY(IAT) = C(2,IAT)-COMY
         DZ(IAT) = C(3,IAT)-COMZ
         SUMTX=SUMTX+QMVEL(1,IAT)*QMZMAS(IAT)
         SUMTY=SUMTY+QMVEL(2,IAT)*QMZMAS(IAT)
         SUMTZ=SUMTZ+QMVEL(3,IAT)*QMZMAS(IAT)
      ENDDO
      DO IFFAT=1,NFFAT
         IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NAT)THEN
            SIGMA=SQRT(BOLTZK*TEMP0*ONEMAS(IFFAT))
            VEL(1,IFFAT)=SIGMA*SET(J+1)
            VEL(2,IFFAT)=SIGMA*SET(J+2)
            VEL(3,IFFAT)=SIGMA*SET(J+3)
            J=J+3
            DX(IFFAT+NAT) = CORD(1,IFFAT)-COMX
            DY(IFFAT+NAT) = CORD(2,IFFAT)-COMY
            DZ(IFFAT+NAT) = CORD(3,IFFAT)-COMZ
            SUMTX=SUMTX+VEL(1,IFFAT)*ZMAS(IFFAT)
            SUMTY=SUMTY+VEL(2,IFFAT)*ZMAS(IFFAT)
            SUMTZ=SUMTZ+VEL(3,IFFAT)*ZMAS(IFFAT)
         END IF
      ENDDO
C
C     -- MAKE TRANS AND ROT MOMENTA = ZERO --
C        (ZHOU ET AL BIOPHYSICAL JOURNAL,79,2902-2908)
C
C     -- VELOCITY OF COM --
      SUMTX=SUMTX*ONESMAS
      SUMTY=SUMTY*ONESMAS
      SUMTZ=SUMTZ*ONESMAS
C
      SUMAX = ZERO
      SUMAY = ZERO
      SUMAZ = ZERO
      TXX   = ZERO
      TYY   = ZERO
      TZZ   = ZERO
      TXY   = ZERO
      TXZ   = ZERO
      TYZ   = ZERO
      DO IAT=1,NAT
         QMVEL(1,IAT)=QMVEL(1,IAT)-SUMTX
         QMVEL(2,IAT)=QMVEL(2,IAT)-SUMTY
         QMVEL(3,IAT)=QMVEL(3,IAT)-SUMTZ
C        -- FIND ANGULAR MOMENTUM AROUND COM
         ANGVX=DY(IAT)*QMVEL(3,IAT)-DZ(IAT)*QMVEL(2,IAT)
         ANGVY=DZ(IAT)*QMVEL(1,IAT)-DX(IAT)*QMVEL(3,IAT)
         ANGVZ=DX(IAT)*QMVEL(2,IAT)-DY(IAT)*QMVEL(1,IAT)
         SUMAX=SUMAX+ANGVX*QMZMAS(IAT)
         SUMAY=SUMAY+ANGVY*QMZMAS(IAT)
         SUMAZ=SUMAZ+ANGVZ*QMZMAS(IAT)
C        -- CALCULATE MOMENT OF INTERTIA AROUND COM
         TXX = TXX + QMZMAS(IAT)*(DY(IAT)*DY(IAT)+DZ(IAT)*DZ(IAT))
         TYY = TYY + QMZMAS(IAT)*(DX(IAT)*DX(IAT)+DZ(IAT)*DZ(IAT))
         TZZ = TZZ + QMZMAS(IAT)*(DX(IAT)*DX(IAT)+DY(IAT)*DY(IAT))
         TXY = TXY - QMZMAS(IAT)* DX(IAT)*DY(IAT)
         TXZ = TXZ - QMZMAS(IAT)* DX(IAT)*DZ(IAT)
         TYZ = TYZ - QMZMAS(IAT)* DY(IAT)*DZ(IAT)
      ENDDO
      DO IFFAT=1,NFFAT
         IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NAT)THEN
            VEL(1,IFFAT)=VEL(1,IFFAT)-SUMTX
            VEL(2,IFFAT)=VEL(2,IFFAT)-SUMTY
            VEL(3,IFFAT)=VEL(3,IFFAT)-SUMTZ
C           --- FIND ANGULAR MOMENTUM AROUND COM ---
            ANGVX=DY(IFFAT+NAT)*VEL(3,IFFAT)-DZ(IFFAT+NAT)*VEL(2,IFFAT)
            ANGVY=DZ(IFFAT+NAT)*VEL(1,IFFAT)-DX(IFFAT+NAT)*VEL(3,IFFAT)
            ANGVZ=DX(IFFAT+NAT)*VEL(2,IFFAT)-DY(IFFAT+NAT)*VEL(1,IFFAT)
            SUMAX=SUMAX+ANGVX*ZMAS(IFFAT)
            SUMAY=SUMAY+ANGVY*ZMAS(IFFAT)
            SUMAZ=SUMAZ+ANGVZ*ZMAS(IFFAT)
C           --- CALCULATE MOMENT OF INTERTIA AROUND COM ---
            TXX = TXX + ZMAS(IFFAT)*(DY(IFFAT+NAT)*DY(IFFAT+NAT)
     *                              +DZ(IFFAT+NAT)*DZ(IFFAT+NAT))
            TYY = TYY + ZMAS(IFFAT)*(DX(IFFAT+NAT)*DX(IFFAT+NAT)
     *                              +DZ(IFFAT+NAT)*DZ(IFFAT+NAT))
            TZZ = TZZ + ZMAS(IFFAT)*(DX(IFFAT+NAT)*DX(IFFAT+NAT)
     *                              +DY(IFFAT+NAT)*DY(IFFAT+NAT))
            TXY = TXY - ZMAS(IFFAT)* DX(IFFAT+NAT)*DY(IFFAT+NAT)
            TXZ = TXZ - ZMAS(IFFAT)* DX(IFFAT+NAT)*DZ(IFFAT+NAT)
            TYZ = TYZ - ZMAS(IFFAT)* DY(IFFAT+NAT)*DZ(IFFAT+NAT)
         END IF
      ENDDO
C
C     --- CALCULATE INVERSE INERTIA TENSOR ---
      IF(NFFAT.GE.3) THEN
      CALL TINV(TXX,TYY,TZZ,TXY,TXZ,TYZ,TIMAT)
C     --- MULTIPLY INVERSE INERTIA TENSOR WITH ANGULAR MOMENTUM ---
      PRODX = SUMAX*TIMAT(1,1) + SUMAY*TIMAT(1,2) + SUMAZ*TIMAT(1,3)
      PRODY = SUMAX*TIMAT(2,1) + SUMAY*TIMAT(2,2) + SUMAZ*TIMAT(2,3)
      PRODZ = SUMAX*TIMAT(3,1) + SUMAY*TIMAT(3,2) + SUMAZ*TIMAT(3,3)
      ELSE
      PRODX = ZERO
      PRODY = ZERO
      PRODZ = ZERO
      END IF
C
C     -- SECOND ASSIGNMENT --
C
      ENKIN = ZERO
      DO IAT =1 ,NAT
C        -- GET THE CROSS PRODUCT WITH THE DISTANCES --
         CROSX = PRODY*DZ(IAT) - PRODZ*DY(IAT)
         CROSY = PRODZ*DX(IAT) - PRODX*DZ(IAT)
         CROSZ = PRODX*DY(IAT) - PRODY*DX(IAT)
C        -- MAKE IT (3N-6) --
         QMVEL(1,IAT)=QMVEL(1,IAT)-CROSX
         QMVEL(2,IAT)=QMVEL(2,IAT)-CROSY
         QMVEL(3,IAT)=QMVEL(3,IAT)-CROSZ
C        -- CALCULATE CURRENT TEMPERATURE --
         DUMY = ZERO
         DO III = 1, 3
            DUMY = DUMY + QMVEL(III,IAT)*QMVEL(III,IAT)
         ENDDO
         ENKIN = ENKIN + DUMY*QMZMAS(IAT)
      ENDDO
      DO IFFAT =1 ,NFFAT
         IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NAT)THEN
C           -- GET THE CROSS PRODUCT WITH THE DISTANCES --
            CROSX = PRODY*DZ(IFFAT+NAT) - PRODZ*DY(IFFAT+NAT)
            CROSY = PRODZ*DX(IFFAT+NAT) - PRODX*DZ(IFFAT+NAT)
            CROSZ = PRODX*DY(IFFAT+NAT) - PRODY*DX(IFFAT+NAT)
C           -- MAKE IT (3N-6) --
            VEL(1,IFFAT)=VEL(1,IFFAT)-CROSX
            VEL(2,IFFAT)=VEL(2,IFFAT)-CROSY
            VEL(3,IFFAT)=VEL(3,IFFAT)-CROSZ
C           -- CALCULATE CURRENT TEMPERATURE --
            DUMY = ZERO
            DO III = 1, 3
               DUMY = DUMY + VEL(III,IFFAT)*VEL(III,IFFAT)
            ENDDO
            ENKIN = ENKIN + DUMY*ZMAS(IFFAT)
         END IF
      ENDDO
      ENKIN = PT5*ENKIN
      TEMP  = TOKELVIN*TWO*ENKIN/NDOF
C
C     -- THIRD ASSIGNMENT --
C        RESCALING VELOCITIES TO GIVE TEMPERATURE AS TEMP0
C
      TFACT =SQRT(TEMP0/TEMP)
      TMOMX = ZERO
      TMOMY = ZERO
      TMOMZ = ZERO
      AMOMX = ZERO
      AMOMY = ZERO
      AMOMZ = ZERO
      ENKIN = ZERO
      DO IAT=1,NAT
         QMVEL(1,IAT)=QMVEL(1,IAT)*TFACT
         QMVEL(2,IAT)=QMVEL(2,IAT)*TFACT
         QMVEL(3,IAT)=QMVEL(3,IAT)*TFACT
         TMOMX= TMOMX+ QMVEL(1,IAT)*QMZMAS(IAT)
         TMOMY= TMOMY+ QMVEL(2,IAT)*QMZMAS(IAT)
         TMOMZ= TMOMZ+ QMVEL(3,IAT)*QMZMAS(IAT)
         AMOMX= AMOMX+ QMVEL(3,IAT)*DY(IAT)*QMZMAS(IAT)
     *               - QMVEL(2,IAT)*DZ(IAT)*QMZMAS(IAT)
         AMOMY= AMOMY+ QMVEL(1,IAT)*DZ(IAT)*QMZMAS(IAT)
     *               - QMVEL(3,IAT)*DX(IAT)*QMZMAS(IAT)
         AMOMZ= AMOMZ+ QMVEL(2,IAT)*DX(IAT)*QMZMAS(IAT)
     *               - QMVEL(1,IAT)*DY(IAT)*QMZMAS(IAT)
         DUMY = ZERO
         DO III = 1, 3
            DUMY = DUMY + QMVEL(III,IAT)*QMVEL(III,IAT)
         ENDDO
         ENKIN = ENKIN + DUMY*QMZMAS(IAT)
      ENDDO
      DO IFFAT=1,NFFAT
         IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NAT)THEN
            VEL(1,IFFAT)=VEL(1,IFFAT)*TFACT
            VEL(2,IFFAT)=VEL(2,IFFAT)*TFACT
            VEL(3,IFFAT)=VEL(3,IFFAT)*TFACT
            TMOMX= TMOMX+ VEL(1,IFFAT)*ZMAS(IFFAT)
            TMOMY= TMOMY+ VEL(2,IFFAT)*ZMAS(IFFAT)
            TMOMZ= TMOMZ+ VEL(3,IFFAT)*ZMAS(IFFAT)
            AMOMX= AMOMX+ VEL(3,IFFAT)*DY(IFFAT+NAT)*ZMAS(IFFAT)
     *                  - VEL(2,IFFAT)*DZ(IFFAT+NAT)*ZMAS(IFFAT)
            AMOMY= AMOMY+ VEL(1,IFFAT)*DZ(IFFAT+NAT)*ZMAS(IFFAT)
     *                  - VEL(3,IFFAT)*DX(IFFAT+NAT)*ZMAS(IFFAT)
            AMOMZ= AMOMZ+ VEL(2,IFFAT)*DX(IFFAT+NAT)*ZMAS(IFFAT)
     *                  - VEL(1,IFFAT)*DY(IFFAT+NAT)*ZMAS(IFFAT)
            DUMY = ZERO
            DO III = 1, 3
               DUMY = DUMY + VEL(III,IFFAT)*VEL(III,IFFAT)
            ENDDO
            ENKIN = ENKIN + DUMY*ZMAS(IFFAT)
         END IF
      ENDDO
      ENKIN = PT5*ENKIN
      TEMP  = TOKELVIN*TWO*ENKIN/NDOF
C     WRITE(IW,*)'TMOMX=',TMOMX,TMOMY,TMOMZ
C     WRITE(IW,*)'AMOMX=',AMOMX,AMOMY,AMOMZ
C
C     -- SOME ATOMS HAVE NOT BEEN GIVEN VELOCITY --
      IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
         DO IAT = 1, NAT
            IFFAT = LISTQM(NFFAT+IAT)
            IF(IFFAT.GT.0) THEN
               VEL(1,IFFAT)   = QMVEL(1,IAT)
               VEL(2,IFFAT)   = QMVEL(2,IAT)
               VEL(3,IFFAT)   = QMVEL(3,IAT)
            END IF
         ENDDO
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK TINV
      SUBROUTINE TINV(TXX,TYY,TZZ,TXY,TXZ,TYZ,TIMAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION TEMP(3,3),AUGMAT(3,6),TIMAT(3,3)
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     --- STORE INPUT MATRIX ---
      TEMP(1,1) = TXX
      TEMP(2,2) = TYY
      TEMP(3,3) = TZZ
      TEMP(1,2) = TXY
      TEMP(1,3) = TXZ
      TEMP(2,3) = TYZ
      TEMP(2,1) = TEMP(1,2)
      TEMP(2,3) = TEMP(2,3)
      TEMP(3,1) = TEMP(1,3)
      TEMP(3,2) = TEMP(2,3)
C     --- AUGMENT INPUT MATRIX WITH AN IDENTITY MATRIX ---
      DO I = 1,3
         DO J = 1,6
            IF (J.LE.3) THEN
               AUGMAT(I,J) = TEMP(I,J)
            ELSE
               IF (I+3.EQ.J) THEN
                  AUGMAT(I,J) = 1.0D+00
               ELSE
                  AUGMAT(I,J) = 0.0D+00
               END IF
            END IF
         ENDDO
      ENDDO
C     --- REDUCE AUGMENTED MATRIX TO UPPER TRIANGULAR FORM ---
      DO K=1,2
         IF(AUGMAT(K,K).EQ.0.0D+00) THEN
            DO I = K+1,3
               IF(AUGMAT(I,K).NE.0.0D+00) THEN
                  DO J=1,6
                     AUGMAT(K,J)=AUGMAT(K,J)+AUGMAT(I,J)
                  ENDDO
               END IF
             ENDDO
         END IF
         DO J=K+1,3
            VAR = AUGMAT(J,K)/AUGMAT(K,K)
            DO I=K,6
               AUGMAT(J,I)=AUGMAT(J,I) - VAR*AUGMAT(K,I)
            ENDDO
         ENDDO
      ENDDO
C     --- MAKE DIAGONAL ELEMENTS 1.0D+00 ---
      DO I=1,3
         VAR = AUGMAT(I,I)
         DO J= I,6
            AUGMAT(I,J)=AUGMAT(I,J)/VAR
         ENDDO
      ENDDO
C     -- REDUCE RIGHT HALF OF THE AUGMENTED MATRIX TO IDENTITY MATRIX --
      DO K = -1,2
      DO I = 1,K
         VAR = AUGMAT(I,K+1)
         DO J = K,6
            AUGMAT(I,J) = AUGMAT(I,J) - AUGMAT(K+1,J)*VAR
         ENDDO
      ENDDO
      ENDDO
C     --- STORE THE INVERTED MATRIX ---
      DO I = 1,3
         DO J=1,3
            TIMAT(I,J) = AUGMAT(I,J+3)
         ENDDO
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFMDX
!>   
!> @brief    main driver for QuanPol MD
!>                    
!> @author   Hui Li
!>           - Jan 2011
!>                    
!> @details  main driver for QuanPol MD
!>
      SUBROUTINE FFMDX
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
C
      COMMON /FFDFS / TIMDFS,NDFS,LFFDFSC,LFFDFSCAV,
     *                LFFDFSC0,LFFDFSA,LFFDFSN,KDFS
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFRE2/ N1FFAT,N1BOND,N1ANGL,N1DIHR,N1DIHB,N1CMAP,N1WAGG,
     *                N2FFAT,N2BOND,N2ANGL,N2DIHR,N2DIHB,N2CMAP,N2WAGG,
     *                LFF2ATMNAM,LFF2CORD,LFF2ZANF,LFF2ZMAS,
     *                LFF2ONEMAS,LFF2CHARG,LFF2POL,
     *                LFF2SIG,LFF2EPS,LFF2SIG2,LFF2EPS2,
     *                LFF2BOND0,LFF2FCBOND,LFF2ANGL0,LFF2FCANGL,
     *                LFF2FCWAGG,LFF2DIHB0,LFF2FCDIHB,
     *                LFF2VROT,LFF2NNN,LFF2GAMA,LFF2IPAIR,
     *                LFF2KLIST,LFF2LLIST,LFF2MLIST,LFF2NLIST,
     *                LFF2VEL,LFF2QMVEL,LFF2CLPR,LFF2ZLPR,
     *                LFF2NLPR,LFF2MAPLST,LFFKFREEA,LFFKFREEB,
     *                LFFLISTB2A,NTODOA,LFFNONLSA,NTODOB,LFFNONLSB,
     *                N1213A,LFFL1213A,N1213B,LFFL1213B,
     *                N14A,LFFL14A,N14B,LFFL14B,
     *                NTODOPMA,LFFNONLSPMA,NBONDPMA,LFFLSBONDPMA,
     *                NANGLPMA,LFFLSANGLPMA,NDIHRPMA,LFFLSDIHRPMA,
     *                NDIHBPMA,LFFLSDIHBPMA,NWAGGPMA,LFFLSWAGGPMA,
     *                NCMAPPMA,LFFLSCMAPPMA,
     *                N1213PMA,LFFL1213PMA,
     *                N14PMA,LFFL14PMA,
     *                NTODOPMB,LFFNONLSPMB,NBONDPMB,LFFLSBONDPMB,
     *                NANGLPMB,LFFLSANGLPMB,NDIHRPMB,LFFLSDIHRPMB,
     *                NDIHBPMB,LFFLSDIHBPMB,NWAGGPMB,LFFLSWAGGPMB,
     *                NCMAPPMB,LFFLSCMAPPMB,
     *                N1213PMB,LFFL1213PMB,
     *                N14PMB,LFFL14PMB
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFMPT2/ MXMMTP,LFFKBLST,LFFFCSTBD,LFFFCDIHR,
     *                LFFFCLJTP,LFFNTYPE,
     *                LFF2KBLST,LFF2FCSTBD,LFF2FCDIHR,
     *                LFF2FCLJTP,LFF2NTYPE
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2,
     *                NRDEN,NBINRDEN,LFFPRO,LFFNRDPRATM,
     *                LFFRDPRATM,LFFDIESTEP,LFFDI1STEP
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFUMBR/ UMBFC,UMBR0,UMBSIZE,
     *                NUMBBIN,NUMBATM(6),NUMBTYP,LFFUMBHIS,
     *                UM2FC,UM2R0,UM2SIZE,
     *                NUM2BIN,NUM2ATM(6),NUM2TYP,LFFUM2HIS
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(NRDF.GT.0) CALL INIRDF(X(LFFATMNAM),X(LFFFRAG1),X(LFFFRAG2),
     *                   X(LFFNFRAG1),X(LFFNFRAG2),X(LFFGOFR))
      IF(NDFS.GT.0) CALL INIDFS(X(LFFATMNAM),X(LFFDFSA),
     *                   X(LFFDFSC),X(LFFDFSN))
      NTS = ISPHSOL
      IF(NAT.EQ.0 .AND. NFFAT.GT.0) THEN
        CALL FFMD1(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFZMAS),X(LFFONEMAS),X(LFFQMZMAS),X(LFFQM1MAS),
     *             X(LFFCHARG),X(LFFPOL),X(LFFPOLSV),X(LFFDIP),
     *             X(LFFFIELD1),X(LFFFIELD2),X(LFFFIELD3),
     *             X(LFFSIG),X(LFFEPS),X(LFFSIG2),X(LFFEPS2),
     *             X(LFFBOND0),X(LFFFCBOND),X(LFFFCSTBD),
     *             X(LFFANGL0),X(LFFFCANGL),X(LFFFCWAGG),
     *             X(LFFDIHB0),X(LFFFCDIHB),X(LFFFCDIHR),
     *             X(LFFVROT),X(LFFNNN),X(LFFGAMA),X(LFFIPAIR),
     *             X(LFFKLIST),X(LFFLLIST),X(LFFKBLST),
     *             X(LFFMLIST),X(LFFNLIST),
     *             X(LFFL1213J),X(LFFL14J),
     *             X(LFFVEL),X(LFFQMVEL),X(LFFFCLJTP),X(LFFNTYPE),
     *             X(LFFFFGRD0),X(LFFFFGRD1),X(LFFFFGRD2),
     *             X(LFFXTS),X(LFFYTS),X(LFFZTS),X(LFFCMAT1),
     *             X(LFFPOT1),X(LFFPOT2),X(LFFQRXN1),X(LFFQRXN2),NTS,
     *             X(LFFLISTQM),X(LFFNONLS1),
     *             X(LFFNONLSTQ),
     *             X(LFFMAPLST),X(LFFCMAPCO),
     *             X(LFFLSTCELL),X(LFFNONLS2),
     *             X(LFFCORDSV2),X(LFFCORDSVQ),
     *             X(LFFMVFASTS2),X(LFFMVFASTS3),X(LFFMVFASTS4),
     *             X(LFFMVFASTL2),X(LFFMVFASTL3),X(LFFMVFASTL4),
     *             X(LFFAFIX),X(LFFQFIX),
     *             X(LFFRFIX),X(LFFIDATOM),X(LFFDAI),X(LFFIDDAI),
     *             X(LFFVFIX1),X(LFFVFIX2),
     *             X(LFFXTSFIX),X(LFFYTSFIX),X(LFFZTSFIX),
     *             X(LFFNONLSA),X(LFFNONLSB),X(LFFL1213A),
     *             X(LFFL1213B),X(LFFL14A),X(LFFL14B),
     *             X(LFFKFREEA),X(LFFKFREEB),X(LFFLISTB2A),X(LFF2CHARG),
     *             X(LFF2SIG),X(LFF2EPS),X(LFF2SIG2),X(LFF2EPS2),
     *             X(LFFOLDCORD),X(LFFLSTRAT),X(LFFDSTRAT),
     *             X(LFFNONLSPMA),X(LFFL1213PMA),X(LFFL14PMA),
     *             X(LFF2CORD),X(LFFLSBONDPMA),X(LFFLSANGLPMA),
     *             X(LFFLSDIHRPMA),X(LFFLSDIHBPMA),
     *             X(LFFLSWAGGPMA),X(LFFLSCMAPPMA),
     *             X(LFFNONLSPMB),X(LFFL1213PMB),X(LFFL14PMB),
     *             X(LFFLSBONDPMB),X(LFFLSANGLPMB),
     *             X(LFFLSDIHRPMB),X(LFFLSDIHBPMB),
     *             X(LFFLSWAGGPMB),X(LFFLSCMAPPMB),
     *             X(LFFUMBHIS),X(LFFUM2HIS),
     *             X(LFFVELSV))
      ELSE IF (NAT.GT.0 .AND. NFFAT.GT.0 .AND. MEANFLD.EQ.0) THEN
        CALL FFMD2(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFZMAS),X(LFFONEMAS),X(LFFQMZMAS),X(LFFQM1MAS),
     *             X(LFFVEL),X(LFFQMVEL),
     *             X(LFFFFGRD0),X(LFFFFGRD1),X(LFFFFGRD2),
     *             X(LFFQMGRD0),X(LFFQMGRD1),X(LFFQMGRD2),
     *             X(LFFLISTQM),X(LFFNONLS1),
     *             X(LFFNONLSTQ),
     *             X(LFFLSTCELL),X(LFFNONLS2),
     *             X(LFFCORDSV2),X(LFFCORDSVQ),
     *             X(LFFMVFASTS2),X(LFFMVFASTS3),X(LFFMVFASTS4),
     *             X(LFFMVFASTL2),X(LFFMVFASTL3),X(LFFMVFASTL4),
     *             X(LFFNONLSA),X(LFFNONLSB),
     *             X(LFFKFREEA),X(LFFKFREEB),X(LFFLISTB2A),
     *             X(LFFOLDCORD),X(LFFLSTRAT),X(LFFDSTRAT),
     *             X(LFFNONLSPMA),X(LFFNONLSPMB),X(LFF2CORD),
     *             X(LFFUMBHIS),X(LFFUM2HIS),
     *             X(LFFVELSV),
     *             X(LFFOLDC),X(LFFQMVELSV))
      ELSE IF (NAT.GT.0 .AND. NFFAT.GT.0 .AND. MEANFLD.GT.0) THEN
        CALL FFMD3(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFZMAS),X(LFFONEMAS),X(LFFQMZMAS),X(LFFQM1MAS),
     *             X(LFFCHARG),X(LFFPOL),X(LFFPOLSV),X(LFFDIP),
     *             X(LFFCHGIMG),X(LFFCRDIMG),
     *             X(LFFCHGIMB),X(LFFCRDIMB),
     *             X(LFFFIELD1),X(LFFFIELD2),X(LFFFIELD3),
     *             X(LFFSIG),X(LFFEPS),X(LFFSIG2),X(LFFEPS2),
     *             X(LFFBOND0),X(LFFFCBOND),X(LFFFCSTBD),
     *             X(LFFANGL0),X(LFFFCANGL),X(LFFFCWAGG),
     *             X(LFFDIHB0),X(LFFFCDIHB),X(LFFFCDIHR),
     *             X(LFFVROT),X(LFFNNN),X(LFFGAMA),X(LFFIPAIR),
     *             X(LFFKLIST),X(LFFLLIST),X(LFFKBLST),
     *             X(LFFMLIST),X(LFFNLIST),
     *             X(LFFL1213J),X(LFFL14J),
     *             X(LFFVEL),X(LFFQMVEL),X(LFFFCLJTP),X(LFFNTYPE),
     *             X(LFFFFGRD0),X(LFFFFGRD1),X(LFFFFGRD2),
     *             X(LFFXTS),X(LFFYTS),X(LFFZTS),X(LFFCMAT1),
     *             X(LFFPOT1),X(LFFPOT2),X(LFFQRXN1),X(LFFQRXN2),NTS,
     *             X(LFFLISTQM),X(LFFNONLS1),
     *             X(LFFNONLSTQ),
     *             X(LFFMAPLST),X(LFFCMAPCO),
     *             X(LFFLSTCELL),X(LFFNONLS2),
     *             X(LFFCORDSV2),X(LFFCORDSVQ),
     *             X(LFFMVFASTS2),X(LFFMVFASTS3),X(LFFMVFASTS4),
     *             X(LFFMVFASTL2),X(LFFMVFASTL3),X(LFFMVFASTL4),
     *             X(LFFAFIX),X(LFFQFIX),
     *             X(LFFRFIX),X(LFFIDATOM),X(LFFDAI),X(LFFIDDAI),
     *             X(LFFVFIX1),X(LFFVFIX2),
     *             X(LFFXTSFIX),X(LFFYTSFIX),X(LFFZTSFIX),
     *             X(LFFNONLSA),X(LFFNONLSB),X(LFFL1213A),
     *             X(LFFL1213B),X(LFFL14A),X(LFFL14B),
     *             X(LFFKFREEA),X(LFFKFREEB),X(LFFLISTB2A),X(LFF2CHARG),
     *             X(LFF2SIG),X(LFF2EPS),X(LFF2SIG2),X(LFF2EPS2),
     *             X(LFFOLDCORD),X(LFFLSTRAT),X(LFFDSTRAT),
     *             X(LFFCORDMN),
     *             X(LFFCORDM1),X(LFFNONLSPMA),X(LFFL1213PMA),
     *             X(LFFL14PMA),
     *             X(LFF2CORD),X(LFFLSBONDPMA),X(LFFLSANGLPMA),
     *             X(LFFLSDIHRPMA),X(LFFLSDIHBPMA),
     *             X(LFFLSWAGGPMA),X(LFFLSCMAPPMA),
     *             X(LFFNONLSPMB),X(LFFL1213PMB),X(LFFL14PMB),
     *             X(LFFLSBONDPMB),X(LFFLSANGLPMB),
     *             X(LFFLSDIHRPMB),X(LFFLSDIHBPMB),
     *             X(LFFLSWAGGPMB),X(LFFLSCMAPPMB),
     *             X(LFFUMBHIS),X(LFFUM2HIS),
     *             X(LFFMERGE),X(LFFINTLST),
     *             X(LFFVELSV),
     *             X(LFFDIPIMG),X(LFFQADIMG),X(LFFOCTIMG),
     *             X(LFFDIPIMB),X(LFFQADIMB),X(LFFOCTIMB))
      END IF
C
      IF(MASWRK.AND.NSTEP.GE.0) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'================ QUANPOL MD SIMULATION',
     *              ' SUCCESSFULLY COMPLETED ================='
         WRITE(IW,*)'========= RESTART $DATA, $FFDATA, $FFDATB',
     *              ' ARE IN .DAT AND .TRJ FILES =========='
         WRITE(IW,*)' '
      END IF
      CALL TIMIT(1)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFMD1
!>   
!> @brief    pure MM MD
!>                    
!> @author   Nandun Thellamurege, Hui Li
!>           - Jan 2011
!>                    
!> @details  MD simulation for MM atoms
!>
      SUBROUTINE FFMD1(ATMNAM,CORD,CORDSV,ZANF,
     *                 ZMAS,ONEMAS,QMZMAS,QM1MAS,
     *                 CHARG,POL,POLSV,DIP,
     *                 FIELD1,FIELD2,FIELD3,
     *                 SIG,EPS,SIG2,EPS2,
     *                 BOND0,FCBOND,FCSTBD,
     *                 ANGL0,FCANGL,FCWAGG,
     *                 DIHB0,FCDIHB,FCDIHR,
     *                 VROT,NNN,GAMA,IPAIR,
     *                 KLIST,LLIST,KBLST,MLIST,NLIST,
     *                 L1213J,L14J,
     *                 VEL,QMVEL,FCLJTP,NTYPE,
     *                 FFGRD0,FFGRD1,FFGRD2,
     *                 XTS,YTS,ZTS,CMAT1,
     *                 POT1,POT2,QRXN1,QRXN2,NTS,
     *                 LISTQM,NONLS1,NONLSTQ,MAPLST,CMAPCO,
     *                 LSTCELL,NONLS2,CORDSV2,CORDSVQ,
     *                 MVFASTS2,MVFASTS3,MVFASTS4,
     *                 MVFASTL2,MVFASTL3,MVFASTL4,
     *                 AFIX,QFIX,
     *                 RFIX,IDATOM,DAI,IDDAI,
     *                 VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                 NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                 KFREEA,KFREEB,LISTB2A,CHARGB,
     *                 SIGB,EPSB,SIG2B,EPS2B,
     *                 OLDCORD,LSTRAT,DSTRAT,NONLSPMA,
     *                 L1213PMA,L14PMA,CORDB,
     *                 LSBONDPMA,LSANGLPMA,
     *                 LSDIHRPMA,LSDIHBPMA,
     *                 LSWAGGPMA,LSCMAPPMA,
     *                 NONLSPMB,L1213PMB,L14PMB,
     *                 LSBONDPMB,LSANGLPMB,
     *                 LSDIHRPMB,LSDIHBPMB,
     *                 LSWAGGPMB,LSCMAPPMB,
     *                 UMBHIS,UM2HIS,VELSV)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (PT5=0.5D+00, TWOTHIRD=2.0D+00/3.0D+00,
     *           ONETHIRD=1.0D+00/3.0D+00, ONESIX=1.0D+00/6.0D+00,
     *           FIVESIX=5.0D+00/6.0D+00)
C
      CHARACTER*10  ATMNAM
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          ZMAS(NFFAT),ONEMAS(NFFAT),QMZMAS(*),QM1MAS(*),
     *          CHARG(NFFAT),POL(NFFAT),DIP(3,NFFAT),
     *          FIELD1(3,NFFAT),FIELD2(3,NFFAT),FIELD3(3,NFFAT),
     *          SIG(NFFAT),EPS(NFFAT),SIG2(NFFAT),EPS2(NFFAT),
     *          BOND0(NBOND),FCBOND(NBOND),
     *          ANGL0(NANGL),FCANGL(NANGL),
     *          FCWAGG(NWAGG),DIHB0(NDIHB),FCDIHB(NDIHB),FCDIHR(3,*),
     *          VROT(NDIHR),NNN(NDIHR),GAMA(NDIHR),IPAIR(2,NBOND),
     *          KLIST(3,NANGL),
     *          LLIST(4,NDIHR),MLIST(4,NWAGG),
     *          L1213J(2,*),L14J(2,NDIHR),
     *          VEL(3,NFFAT),QMVEL(3,*),NTYPE(*),
     *          FFGRD0(3,NFFAT),FFGRD1(3,NFFAT),FFGRD2(3,NFFAT),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),CMAT1(NTS,NTS),
     *          POT1(NTS),POT2(NTS),QRXN1(NTS),QRXN2(NTS),NONLS1(2,*),
     *          NONLSTQ(*),MAPLST(6,*),CMAPCO(4,4,24,24,3),LISTB2A(*),
     *          CORDB(3,*),OLDCORD(3,*)
      DIMENSION TIMSTR(3)
      DIMENSION ENALL(100)
      DIMENSION VELSV(3,*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFEWLD/ SPLIT,IEWALD,KEWALD,NKVEC,
     *                L1KVEC,L2KVEC,LFFRKEXPEL,LFFRKVEC,
     *                LFFKVEC,LFFTCHCH,LFFCOSCH,LFFSINCH
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFFRE2/ N1FFAT,N1BOND,N1ANGL,N1DIHR,N1DIHB,N1CMAP,N1WAGG,
     *                N2FFAT,N2BOND,N2ANGL,N2DIHR,N2DIHB,N2CMAP,N2WAGG,
     *                LFF2ATMNAM,LFF2CORD,LFF2ZANF,LFF2ZMAS,
     *                LFF2ONEMAS,LFF2CHARG,LFF2POL,
     *                LFF2SIG,LFF2EPS,LFF2SIG2,LFF2EPS2,
     *                LFF2BOND0,LFF2FCBOND,LFF2ANGL0,LFF2FCANGL,
     *                LFF2FCWAGG,LFF2DIHB0,LFF2FCDIHB,
     *                LFF2VROT,LFF2NNN,LFF2GAMA,LFF2IPAIR,
     *                LFF2KLIST,LFF2LLIST,LFF2MLIST,LFF2NLIST,
     *                LFF2VEL,LFF2QMVEL,LFF2CLPR,LFF2ZLPR,
     *                LFF2NLPR,LFF2MAPLST,LFFKFREEA,LFFKFREEB,
     *                LFFLISTB2A,NTODOA,LFFNONLSA,NTODOB,LFFNONLSB,
     *                N1213A,LFFL1213A,N1213B,LFFL1213B,
     *                N14A,LFFL14A,N14B,LFFL14B,
     *                NTODOPMA,LFFNONLSPMA,NBONDPMA,LFFLSBONDPMA,
     *                NANGLPMA,LFFLSANGLPMA,NDIHRPMA,LFFLSDIHRPMA,
     *                NDIHBPMA,LFFLSDIHBPMA,NWAGGPMA,LFFLSWAGGPMA,
     *                NCMAPPMA,LFFLSCMAPPMA,
     *                N1213PMA,LFFL1213PMA,
     *                N14PMA,LFFL14PMA,
     *                NTODOPMB,LFFNONLSPMB,NBONDPMB,LFFLSBONDPMB,
     *                NANGLPMB,LFFLSANGLPMB,NDIHRPMB,LFFLSDIHRPMB,
     *                NDIHBPMB,LFFLSDIHBPMB,NWAGGPMB,LFFLSWAGGPMB,
     *                NCMAPPMB,LFFLSCMAPPMB,
     *                N1213PMB,LFFL1213PMB,
     *                N14PMB,LFFL14PMB
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /FFRMDF/ RDIST1,RDIST2,RINTRV,NRATM1,NRATM2,INTRSTP
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FFUMBR/ UMBFC,UMBR0,UMBSIZE,
     *                NUMBBIN,NUMBATM(6),NUMBTYP,LFFUMBHIS,
     *                UM2FC,UM2R0,UM2SIZE,
     *                NUM2BIN,NUM2ATM(6),NUM2TYP,LFFUM2HIS
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C     HUI LI, MAR 2012
C     FENGCHAO CUI, HUI LI, JUN 2012 (ADD FREE ENERGY)
C
      IF(NSTEP.LT.0) RETURN
C
      CALL SEQOPN(36,'TRAJECT','NEW',.FALSE.,'FORMATTED')
      CALL SEQOPN(38,'MDDIP'  ,'NEW',.FALSE.,'FORMATTED')
      ISTEP = 0
      IF(IADDWAT.EQ.2 .AND. ISPHSOL.GT.0) RSPHSOL=RSPHSOL*1.0D+40
C
C     -- READY TO TAKE OFF ?
C
      MDSTEP = -1
      DO ISTEP = 0, NSTEP
         MDSTEP = MDSTEP + 1
         IF(ISTEP.EQ.100.AND.IADDWAT.EQ.2 .AND. ISPHSOL.GT.0)
     *   RSPHSOL = RSPHSOL*1.0D-40
         IF(MDSTEP.LE.1) CALL VCLR(UMBHIS,1,NUMBBIN)
         IF(MDSTEP.LE.1) CALL VCLR(UM2HIS,1,NUM2BIN*NUMBBIN)
C
         IF(MDSTEP.EQ.0) GOTO 50
C
         CALL DCOPY(3*NFFAT,CORD,1,OLDCORD,1)
C
C        - CALCULATE X(T+DT)
         IF(INTALG.EQ.1) THEN
            IF(MDSTEP.EQ.1) CALL DCOPY(3*NFFAT,FFGRD1,1,FFGRD0,1)
            DO IFFAT = 1, NFFAT
               DUM  = ONEMAS(IFFAT)*DT2
               DO III = 1, 3
                  CHANGE = +VEL(III,IFFAT)*DT
     *                     -TWOTHIRD*FFGRD1(III,IFFAT)*DUM
     *                     +ONESIX*FFGRD0(III,IFFAT)*DUM
                  CORD(III,IFFAT)=CORD(III,IFFAT) + CHANGE
               ENDDO
            ENDDO
         END IF
         IF(INTALG.EQ.2) THEN
            DO IFFAT = 1, NFFAT
               DUM  = PT5*ONEMAS(IFFAT)*DT2
               DO III = 1, 3
                  CHANGE = +VEL(III,IFFAT)*DT
     *                     -FFGRD1(III,IFFAT)*DUM
                  CORD(III,IFFAT)=CORD(III,IFFAT) + CHANGE
               ENDDO
            ENDDO
         END IF
         IF(NACTMM.GT.0) THEN
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0) THEN
                  CORD(1,IFFAT)=(CORD(1,IFFAT)+3.1416D+00)*1.0D-40
                  CORD(2,IFFAT)=(CORD(2,IFFAT)+2.7183D+00)*1.0D-40
                  CORD(3,IFFAT)=(CORD(3,IFFAT)+1.4427D+00)*1.0D-40
               END IF
            ENDDO
            DO IFFAT = 1, NFFAT
               IF(ABS(CORD(1,IFFAT))+ABS(CORD(2,IFFAT))
     *           +ABS(CORD(3,IFFAT)).LT.1.0D-20) THEN
                  CORD(1,IFFAT) = CORD(1,IFFAT)*1.0D+40 - 3.1416D+00
                  CORD(2,IFFAT) = CORD(2,IFFAT)*1.0D+40 - 2.7183D+00
                  CORD(3,IFFAT) = CORD(3,IFFAT)*1.0D+40 - 1.4427D+00
               ELSE
                  DO III = 1, 3
                     CORD(III,IFFAT) = OLDCORD(III,IFFAT)
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXMM
            DO III = 1, 3
               CORD(III,IFIXMM(KFIX)) = OLDCORD(III,IFIXMM(KFIX))
            ENDDO
         ENDDO
C
         CALL VCLR(VIRRAT,1,3)
         IF(NRATTLE.GT.0) THEN
C           - FIXED ATOMS DO NOT MOVE, SO MAKE THE MASS INFINITE
            IF(NACTMM.GT.0) THEN
               DO IFFAT = 1, NFFAT 
                  ONEMAS(IFFAT) = 0.0D+00
               ENDDO
               DO KOPT = 1, NACTMM
                  IFFAT = LACTMM(KOPT)
                  IF(IFFAT.GT.0) ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
               ENDDO
            END IF
            DO KFIX = 1, NFIXMM
               KFFAT = IFIXMM(KFIX)
               IF(KFFAT.GT.0) ONEMAS(KFFAT) = 0.0D+00
            ENDDO
            CALL RATTLE1(CORD,OLDCORD,VEL,DSTRAT,ONEMAS,LSTRAT,
     *                   MDSTEP)
            DO KFIX = 1, NFIXMM
               KFFAT = IFIXMM(KFIX)
               IF(KFFAT.GT.0) ONEMAS(KFFAT) = 1.0D+00/ZMAS(KFFAT)
            ENDDO
            IF(NACTMM.GT.0) THEN
               DO IFFAT = 1, NFFAT
                  ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
               ENDDO
            END IF
         END IF
C
         IF(NRATM1.GT.0) THEN
            CALL IRMDF1(CORD,OLDCORD,VEL,ONEMAS,MDSTEP,RMDFCE)
         END IF
C
  50     CONTINUE
C
C        -- CALCULATE ENERGY AND GRADIENT AT X(T+DT)
         CALL NONBOND(MDSTEP,CORD,CORDSV,CORDSV2,CORDSVQ,
     *                NONLS1,NONLS2,
     *                NONLSTQ,LSTCELL,
     *                MVFASTS2,MVFASTS3,MVFASTS4,
     *                MVFASTL2,MVFASTL3,MVFASTL4,
     *                NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                NONLSPMA,NONLSPMB)
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL VCLR(VIR,1,3)
         CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR,CORDB,
     *               LSBONDPMA,LSBONDPMB)
         CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST,CORDB,
     *               LSANGLPMA,LSANGLPMB)
         CALL E12312(CORD,FFGRD2,ANGL0,KLIST,BOND0,FCSTBD,
     *               KBLST,CORDB,LSANGLPMA,LSANGLPMB)
         CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST,CORDB,
     *               LSDIHBPMA,LSDIHBPMB)
         CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST,CORDB,
     *               LSWAGGPMA,LSWAGGPMB)
         CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST,CORDB,
     *               LSDIHRPMA,LSDIHRPMB,FCDIHR)
         CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO,CORDB,
     *               LSCMAPPMA,LSCMAPPMB)
         CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLS1,
     *               L1213J,SIGB,EPSB,SIG2B,EPS2B,
     *               NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *               NONLSPMA,L1213PMA,L14PMA,CORDB,
     *               NONLSPMB,L1213PMB,L14PMB,FCLJTP,NTYPE)
         CALL ESPHER(CORD,FFGRD2)
         CALL ECHARG(CORD,FFGRD2,CHARG,NONLS1,L1213J,L14J,
     *               CHARGB,NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *               NONLSPMA,L1213PMA,L14PMA,CORDB,
     *               NONLSPMB,L1213PMB,L14PMB)
         CALL UMBRELLA(CORD,FFGRD2,UMBHIS,UM2HIS)
         IF(IFIXSOL.EQ.0) THEN
            CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                  CMAT1,POT1,QRXN1,NTS)
            CALL POLRXN(CORD,FFGRD2,CHARG,POL,POLSV,DIP,
     *                  FIELD1,FIELD2,FIELD3,
     *                  XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *                  NONLS1,L1213J)
         END IF
         IF(IFIXSOL.EQ.1) THEN
            CALL FIXSOL(CORD,FFGRD2,CHARG,ZANF,AFIX,QFIX,
     *                  VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                  RFIX,IDATOM,DAI,IDDAI,
     *                  POL,POLSV,DIP,FIELD1,FIELD2,FIELD3,
     *                  NONLS1,L1213J)
         END IF
         IF(GOPARR) THEN
            ENALL( 1) = EN12
            ENALL( 2) = EN123
            ENALL( 3) = EN123R4
            ENALL( 4) = EN123B4
            ENALL( 5) = EN234W1
            ENALL( 6) = ENCHAR
            ENALL( 7) = ENLJR
            ENALL( 8) = ENLJD
            ENALL( 9) = VIR(1)
            ENALL(10) = VIR(2)
            ENALL(11) = VIR(3)
            ENALL(12) = ENUCCH
            ENALL(13) = ENRXN
            ENALL(14) = ENRXNR
C           ENALL(15) = ENCENT
            ENALL(16) = ENCMAP
            ENALL(18) = SOL1CH
            ENALL(19) = SOL1LJ
            ENALL(20) = SOL1IM
            ENALL(21) = SOL2CH
            ENALL(22) = SOL2LJ
            ENALL(23) = SOL2IM
            ENALL(33) = PMF1BD
            ENALL(34) = PMF1AG
            ENALL(35) = PMF1DR
            ENALL(36) = PMF1DB
            ENALL(37) = PMF1WG
            ENALL(38) = PMF1CM
            ENALL(39) = PMF1CH
            ENALL(40) = PMF1LJ
            ENALL(41) = ENBIAS
            ENALL(42) = EN12312
            CALL DDI_GSUMF(2410,ENALL  ,42)
            CALL DDI_GSUMF(2411,FFGRD2,3*NFFAT)
            EN12      = ENALL( 1)
            EN123     = ENALL( 2)
            EN123R4   = ENALL( 3)
            EN123B4   = ENALL( 4)
            EN234W1   = ENALL( 5)
            ENCHAR    = ENALL( 6)
            ENLJR     = ENALL( 7)
            ENLJD     = ENALL( 8)
            VIR(1)    = ENALL( 9)
            VIR(2)    = ENALL(10)
            VIR(3)    = ENALL(11)
            ENUCCH    = ENALL(12)
            ENRXN     = ENALL(13)
            ENRXNR    = ENALL(14)
C           ENCENT    = ENALL(15)
            ENCMAP    = ENALL(16)
            SOL1CH    = ENALL(18)
            SOL1LJ    = ENALL(19)
            SOL1IM    = ENALL(20)
            SOL2CH    = ENALL(21)
            SOL2LJ    = ENALL(22)
            SOL2IM    = ENALL(23)
            PMF1BD    = ENALL(33)
            PMF1AG    = ENALL(34)
            PMF1DR    = ENALL(35)
            PMF1DB    = ENALL(36)
            PMF1WG    = ENALL(37)
            PMF1CM    = ENALL(38)
            PMF1CH    = ENALL(39)
            PMF1LJ    = ENALL(40)
            ENBIAS    = ENALL(41)
            EN12312   = ENALL(42)
         END IF
C
         IF(IFEPTOP.EQ.1.AND.(IDOPOL.GT.0.OR.IEWALD.GT.0)) THEN
            CALL SAVEABPROP(1)
            CALL SAVEFFDATA
            CALL SETFFDATAB(2)
            CALL VCLR(FFGRD2,1,3*NFFAT)
            CALL VCLR(VIR,1,3)
            CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR,CORDB,
     *                  LSBONDPMA,LSBONDPMB)
            CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST,CORDB,
     *                  LSANGLPMA,LSANGLPMB)
            CALL E12312(CORD,FFGRD2,ANGL0,KLIST,BOND0,FCSTBD,
     *                  KBLST,CORDB,LSANGLPMA,LSANGLPMB)
            CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST,CORDB,
     *                  LSDIHBPMA,LSDIHBPMB)
            CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST,CORDB,
     *                  LSWAGGPMA,LSWAGGPMB)
            CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST,CORDB,
     *                  LSDIHRPMA,LSDIHRPMB,FCDIHR)
            CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO,CORDB,
     *                  LSCMAPPMA,LSCMAPPMB)
            CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLS1,
     *                  L1213J,SIGB,EPSB,SIG2B,EPS2B,
     *                  NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                  NONLSPMA,L1213PMA,L14PMA,CORDB,
     *                  NONLSPMB,L1213PMB,L14PMB,FCLJTP,NTYPE)
            CALL ESPHER(CORD,FFGRD2)
            CALL ECHARG(CORD,FFGRD2,CHARG,NONLS1,L1213J,L14J,
     *                  CHARGB,NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                  NONLSPMA,L1213PMA,L14PMA,CORDB,
     *                  NONLSPMB,L1213PMB,L14PMB)
            CALL UMBRELLA(CORD,FFGRD2,UMBHIS,UM2HIS)
            IF(IFIXSOL.EQ.0) THEN
               CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                     CMAT1,POT1,QRXN1,NTS)
               CALL POLRXN(CORD,FFGRD2,CHARG,POL,POLSV,DIP,
     *                     FIELD1,FIELD2,FIELD3,
     *                     XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *                     NONLS1,L1213J)
            END IF
            IF(IFIXSOL.EQ.1) THEN
               CALL FIXSOL(CORD,FFGRD2,CHARG,ZANF,AFIX,QFIX,
     *                     VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                     RFIX,IDATOM,DAI,IDDAI,
     *                     POL,POLSV,DIP,FIELD1,FIELD2,FIELD3,
     *                     NONLS1,L1213J)
            END IF
            IF(GOPARR) THEN
               ENALL( 1) = EN12
               ENALL( 2) = EN123
               ENALL( 3) = EN123R4
               ENALL( 4) = EN123B4
               ENALL( 5) = EN234W1
               ENALL( 6) = ENCHAR
               ENALL( 7) = ENLJR
               ENALL( 8) = ENLJD
               ENALL( 9) = VIR(1)
               ENALL(10) = VIR(2)
               ENALL(11) = VIR(3)
               ENALL(12) = ENUCCH
               ENALL(13) = ENRXN
               ENALL(14) = ENRXNR
C              ENALL(15) = ENCENT
               ENALL(16) = ENCMAP
               ENALL(18) = SOL1CH
               ENALL(19) = SOL1LJ
               ENALL(20) = SOL1IM
               ENALL(21) = SOL2CH
               ENALL(22) = SOL2LJ
               ENALL(23) = SOL2IM
               ENALL(33) = PMF1BD
               ENALL(34) = PMF1AG
               ENALL(35) = PMF1DR
               ENALL(36) = PMF1DB
               ENALL(37) = PMF1WG
               ENALL(38) = PMF1CM
               ENALL(39) = PMF1CH
               ENALL(40) = PMF1LJ
               ENALL(41) = ENBIAS
               ENALL(42) = EN12312
               CALL DDI_GSUMF(2410,ENALL  ,42)
               CALL DDI_GSUMF(2411,FFGRD2,3*NFFAT)
               EN12      = ENALL( 1)
               EN123     = ENALL( 2)
               EN123R4   = ENALL( 3)
               EN123B4   = ENALL( 4)
               EN234W1   = ENALL( 5)
               ENCHAR    = ENALL( 6)
               ENLJR     = ENALL( 7)
               ENLJD     = ENALL( 8)
               VIR(1)    = ENALL( 9)
               VIR(2)    = ENALL(10)
               VIR(3)    = ENALL(11)
               ENUCCH    = ENALL(12)
               ENRXN     = ENALL(13)
               ENRXNR    = ENALL(14)
C              ENCENT    = ENALL(15)
               ENCMAP    = ENALL(16)
               SOL1CH    = ENALL(18)
               SOL1LJ    = ENALL(19)
               SOL1IM    = ENALL(20)
               SOL2CH    = ENALL(21)
               SOL2LJ    = ENALL(22)
               SOL2IM    = ENALL(23)
               PMF1BD    = ENALL(33)
               PMF1AG    = ENALL(34)
               PMF1DR    = ENALL(35)
               PMF1DB    = ENALL(36)
               PMF1WG    = ENALL(37)
               PMF1CM    = ENALL(38)
               PMF1CH    = ENALL(39)
               PMF1LJ    = ENALL(40)
               ENBIAS    = ENALL(41)
               EN12312   = ENALL(42)
            END IF
            CALL SAVEABPROP(2)
            CALL SETFFDATAB(1)
            CALL MIXABPROP
         ELSE IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            CALL SAVEFFDATA
            CALL SETFFDATAB(2)
            CALL SETFFDATAB(1)
         END IF
C
         IF(MDSTEP.EQ.0) THEN
            CALL DCOPY(3*NFFAT,FFGRD2,1,FFGRD1,1)
            GOTO 51
         END IF
C
C        - FIXED ATOMS DO NOT MOVE, SO MAKE THE MASS INFINITE
         IF(NACTMM.GT.0) THEN
            DO IFFAT = 1, NFFAT
               ONEMAS(IFFAT) = 0.0D+00
            ENDDO
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0) ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
            ENDDO
         END IF
         DO KFIX = 1, NFIXMM
            KFFAT = IFIXMM(KFIX)
            IF(KFFAT.GT.0) ONEMAS(KFFAT) = 0.0D+00
         ENDDO
C
C        -- CALCULATE V(T+DT)
         IF(INTALG.EQ.1) THEN
            IF(MDSTEP.EQ.1)THEN
               DO IFFAT = 1, NFFAT
                  DUM  = ONEMAS(IFFAT)*DT
                  DO III = 1, 3
                     VEL(III,IFFAT)=VEL(III,IFFAT)
     *                            -PT5*(FFGRD1(III,IFFAT)
     *                                 +FFGRD2(III,IFFAT))*DUM
                     FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
                  ENDDO
               ENDDO
            ELSE
               DO IFFAT = 1, NFFAT
                  DUM  = ONEMAS(IFFAT)*DT
                  DO III = 1, 3
                     VEL(III,IFFAT)=VEL(III,IFFAT)
     *                            -(ONETHIRD*FFGRD2(III,IFFAT)
     *                              +FIVESIX*FFGRD1(III,IFFAT)
     *                               -ONESIX*FFGRD0(III,IFFAT))*DUM
                     FFGRD0(III,IFFAT)=FFGRD1(III,IFFAT)
                     FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
                  ENDDO
               ENDDO
            END IF
         END IF
         IF(INTALG.EQ.2) THEN
            DO IFFAT = 1, NFFAT
               DUM  = ONEMAS(IFFAT)*DT
               DO III = 1, 3
                  VEL(III,IFFAT)=VEL(III,IFFAT)
     *                         -PT5*(FFGRD1(III,IFFAT)
     *                              +FFGRD2(III,IFFAT))*DUM
                  FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
               ENDDO
            ENDDO
         END IF
C
         IF(NRATTLE.GT.0) THEN
            CALL RATTLE2a(CORD,VEL,DSTRAT,ONEMAS,LSTRAT,MDSTEP)
         END IF
C
         IF(NRATM1.GT.0) THEN
            CALL IRMDF2(CORD,VEL,ONEMAS,MDSTEP)
         END IF
C
         DO KFIX = 1, NFIXMM
            KFFAT = IFIXMM(KFIX)
            IF(KFFAT.GT.0) ONEMAS(KFFAT) = 1.0D+00/ZMAS(KFFAT)
         ENDDO
         IF(NACTMM.GT.0) THEN
            DO IFFAT = 1, NFFAT
               ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
            ENDDO
         END IF
C
C        -- SYNCHRONIZE CORD AND VEL EVERY 200 STEPS --
         IF(GOPARR.AND.MOD(ISTEP,200).EQ.0) THEN
            CALL DDI_BCAST(462,'F',CORD,3*NFFAT,MASTER)
            CALL DDI_BCAST(464,'F',VEL,3*NFFAT,MASTER)
         END IF
C
  51     CONTINUE
C
C        -- CALCULATE PROPERTIES
         CALL MDPROP(CORD,VEL,QMVEL,ZMAS,QMZMAS,MDSTEP,
     *               0,LISTQM,TEMP,PRES,UMBHIS,UM2HIS,
     *               PRESX,PRESY,PRESZ)
C
         CALL TMDATE(TIMSTR)
         IF(MOD(ISTEP,KOUT).EQ.0) CALL TIMIT(1)
         IF(MOD(ISTEP,KOUT).NE.0 .AND. ISTEP.NE.NSTEP) GOTO 200
C
         IF(MASWRK)THEN
C
C           -- PRINT OUT PBC COORDINATES --
C              ONLY WHEN PBC AND KOUTPBC APPLIES
C
            IF(KOUTPBC.EQ.1.AND.MIN(XBOX,YBOX,ZBOX).LT.1.0D+30) THEN
               WRITE(36,*)'==== PBC MASTER BOX ===='
               WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$PBCFFDATA       !    MD STEP',ISTEP,
     *         'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
               IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
                  WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *            '$PBCFFDATB       !    MD STEP',ISTEP,
     *            'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
               END IF
               WRITE(36,*)'COORDINATES  NUC                   X',
     *         '                   Y                   Z'
               DO IFFAT = 1, N1FFAT
                  CX    = CORD(1,IFFAT) - CENTX
                  CY    = CORD(2,IFFAT) - CENTY
                  CZ    = CORD(3,IFFAT) - CENTZ
                  PBCX  = XBOX*ANINT(CX*ONEXBOX)
                  PBCY  = YBOX*ANINT(CY*ONEYBOX)
                  PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                  CX    = CORD(1,IFFAT) - PBCX
                  CY    = CORD(2,IFFAT) - PBCY
                  CZ    = CORD(3,IFFAT) - PBCZ
                  WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                          CX*TOANGS,CY*TOANGS,CZ*TOANGS
               ENDDO
               WRITE(36,*)'STOP'
C
               IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
               WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$PBCFFDATB       !    MD STEP',ISTEP,
     *         'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
               WRITE(36,*)'COORDINATES  NUC                   X',
     *         '                   Y                   Z'
               DO IFFAT = 1, N2FFAT
                  CX    = CORDB(1,IFFAT) - CENTX
                  CY    = CORDB(2,IFFAT) - CENTY
                  CZ    = CORDB(3,IFFAT) - CENTZ
                  PBCX  = XBOX*ANINT(CX*ONEXBOX)
                  PBCY  = YBOX*ANINT(CY*ONEYBOX)
                  PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                  CX    = CORDB(1,IFFAT) - PBCX
                  CY    = CORDB(2,IFFAT) - PBCY
                  CZ    = CORDB(3,IFFAT) - PBCZ
                  WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                          CX*TOANGS,CY*TOANGS,CZ*TOANGS
               ENDDO
               WRITE(36,*)'STOP'
               END IF
C
               IF(IFEPTOP.EQ.2) THEN
               WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$PBCFFDATB       !    MD STEP',ISTEP,
     *         'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
               WRITE(36,*)'COORDINATES  NUC                   X',
     *         '                   Y                   Z'
               DO JFFAT = 1, N2FFAT
                  IFFAT = LISTB2A(JFFAT)
                  CX    = CORD(1,IFFAT) - CENTX
                  CY    = CORD(2,IFFAT) - CENTY
                  CZ    = CORD(3,IFFAT) - CENTZ
                  PBCX  = XBOX*ANINT(CX*ONEXBOX)
                  PBCY  = YBOX*ANINT(CY*ONEYBOX)
                  PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                  CX    = CORD(1,IFFAT) - PBCX
                  CY    = CORD(2,IFFAT) - PBCY
                  CZ    = CORD(3,IFFAT) - PBCZ
                  WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                          CX*TOANGS,CY*TOANGS,CZ*TOANGS
               ENDDO
               WRITE(36,*)'STOP'
               END IF
            END IF
C
C           -- PRINT KOUTACT ATOMS --
C
            IF(NFFAT.GT.2000.AND.KOUTACT(1).GT.0) THEN
            WRITE(IW,'(/A,I10)')'!KOUTACT ATOMS AROUND $FFDATA ATOM ',
     *      KOUTACT(1)
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA ! KOUTACT     MD STEP',ISTEP,
     *      'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
            ACTX = CORD(1,KOUTACT(1))
            ACTY = CORD(2,KOUTACT(1))
            ACTZ = CORD(3,KOUTACT(1))
            ACTR = DBLE(KOUTACT(2))*1.0D-08*TOBOHR
            ACTR2= ACTR**2
            DO IFFAT=1,NFFAT
               CX    = CORD(1,IFFAT) - ACTX
               CY    = CORD(2,IFFAT) - ACTY
               CZ    = CORD(3,IFFAT) - ACTZ
               PBCX  = XBOX*ANINT(CX*ONEXBOX)
               PBCY  = YBOX*ANINT(CY*ONEYBOX)
               PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
               CX    = CORD(1,IFFAT) - PBCX
               CY    = CORD(2,IFFAT) - PBCY
               CZ    = CORD(3,IFFAT) - PBCZ
               RCXYZ = (CX - ACTX)**2 +
     *                 (CY - ACTY)**2 +
     *                 (CZ - ACTZ)**2
               IF(RCXYZ.LE.ACTR2) THEN
                  WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                          CX*TOANGS,CY*TOANGS,CZ*TOANGS
               END IF
            ENDDO
            WRITE(IW,*)'$END ! KOUTACT'
            END IF
C
C           -- PRINT OUT RESTART COORDINATES + VEL --
C
            WRITE(36,'(1X,A,I10,1X,A,F15.2,A)')
     *      'RESTART COORD + VEL FOR QUANPOL AT MD STEP',ISTEP,
     *      'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
            IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30) THEN
              WRITE(36,'(A,3(A,F15.10,1X),/9X,3(A,F15.10,1X),A)')
     *        ' $QUANPO ',
     *        'CENTX=',CENTX*TOANGS,
     *        'CENTY=',CENTY*TOANGS,
     *        'CENTZ=',CENTZ*TOANGS,
     *        'XBOX=',XBOX*TOANGS,
     *        'YBOX=',YBOX*TOANGS,
     *        'ZBOX=',ZBOX*TOANGS,
     *        '$END'
            ELSE IF(SPHRAD.LT.1.0D+30) THEN
              WRITE(36,'(A,3(A,F15.10,1X),/9X,2(A,F15.10,1X),A)')
     *        ' $QUANPO ',
     *        'CENTX=',CENTX*TOANGS,
     *        'CENTY=',CENTY*TOANGS,
     *        'CENTZ=',CENTZ*TOANGS,
     *        'SPHRAD=',SPHRAD*TOANGS,
     *        'RSPHSOL=',RSPHSOL*TOANGS,
     *        '$END'
            ELSE
              WRITE(36,'(A,3(A,F15.10,1X),A)')
     *        ' $QUANPO ',
     *        'CENTX=',CENTX*TOANGS,
     *        'CENTY=',CENTY*TOANGS,
     *        'CENTZ=',CENTZ*TOANGS,
     *        '$END'
            END IF
C
            WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !    MD STEP',ISTEP,
     *      'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
               WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$FFDATB          !    MD STEP',ISTEP,
     *         'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
            END IF
            WRITE(36,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, N1FFAT
               WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(36,*)'STOP'
            WRITE(36,*)'MMVELOCITY                    VX',
     *          '                    VY                    VZ'
            DO IFFAT = 1, N1FFAT
               WRITE(36,1001) ATMNAM(IFFAT),
     *         VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
            ENDDO
            WRITE(36,*)'STOP'
C
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
               WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$FFDATB          !    MD STEP',ISTEP,
     *         'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
               WRITE(36,*)'COORDINATES  NUC                   X',
     *             '                   Y                   Z'
               DO IFFAT = 1, N2FFAT
                  WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *            CORDB(1,IFFAT)*TOANGS,
     *            CORDB(2,IFFAT)*TOANGS,
     *            CORDB(3,IFFAT)*TOANGS
               ENDDO
               WRITE(36,*)'STOP'
               WRITE(36,*)'MMVELOCITY                    VX',
     *             '                    VY                    VZ'
               DO IFFAT = 1, N2FFAT
                  WRITE(36,1001) ATMNAM(IFFAT),
     *            VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
               ENDDO
               WRITE(36,*)'STOP'
            END IF
C
            IF(IFEPTOP.EQ.2) THEN
               WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$FFDATB          !    MD STEP',ISTEP,
     *         'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
               WRITE(36,*)'COORDINATES  NUC                   X',
     *             '                   Y                   Z'
               DO JFFAT = 1, N2FFAT
                  IFFAT = LISTB2A(JFFAT)
                  WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *            CORD(1,IFFAT)*TOANGS,
     *            CORD(2,IFFAT)*TOANGS,
     *            CORD(3,IFFAT)*TOANGS
               ENDDO
               WRITE(36,*)'STOP'
               WRITE(36,*)'MMVELOCITY                    VX',
     *             '                    VY                    VZ'
               DO JFFAT = 1, N2FFAT
                  IFFAT = LISTB2A(JFFAT)
                  WRITE(36,1001) ATMNAM(IFFAT),
     *            VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
               ENDDO
               WRITE(36,*)'STOP'
            END IF
C
         END IF
C
         CALL FLSHBF(IW)
         CALL FLSHBF(36)
         CALL TIMIT(1)
 200     CONTINUE
C
C        -- SCALE VELOCITY AND VOLUME --
         CALL DCOPY(3*NFFAT,CORD,1,OLDCORD,1)
         CALL DCOPY(3*NFFAT,VEL,1,VELSV,1)
         CALL TPSTAT(CORD,VEL,QMVEL,ZMAS,QMZMAS,ONEMAS,QM1MAS,
     *               1,MDSTEP,LISTQM,TEMP,PRES,
     *               PRESX,PRESY,PRESZ)
         IF(NACTMM.GT.0) THEN
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0) THEN
                  CORD(1,IFFAT)=(CORD(1,IFFAT)+3.1416D+00)*1.0D-40
                  CORD(2,IFFAT)=(CORD(2,IFFAT)+2.7183D+00)*1.0D-40
                  CORD(3,IFFAT)=(CORD(3,IFFAT)+1.4427D+00)*1.0D-40
                  VEL (1,IFFAT)=VEL(1,IFFAT) + 1.0D+00
               END IF
            ENDDO
            DO IFFAT = 1, NFFAT
               IF(ABS(CORD(1,IFFAT))+ABS(CORD(2,IFFAT))
     *           +ABS(CORD(3,IFFAT)).LT.1.0D-20) THEN
                  CORD(1,IFFAT) = CORD(1,IFFAT)*1.0D+40 - 3.1416D+00
                  CORD(2,IFFAT) = CORD(2,IFFAT)*1.0D+40 - 2.7183D+00
                  CORD(3,IFFAT) = CORD(3,IFFAT)*1.0D+40 - 1.4427D+00
               ELSE
                  DO III = 1, 3
                     CORD(III,IFFAT) = OLDCORD(III,IFFAT)
                  ENDDO
               END IF
               IF(VEL(1,IFFAT).GT.0.5D+00) THEN
                  VEL(1,IFFAT) = VEL(1,IFFAT) - 1.0D+00
               ELSE
                  DO III = 1, 3
                     VEL(III,IFFAT) = VELSV(III,IFFAT)
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXMM
            DO III = 1, 3
               CORD(III,IFIXMM(KFIX)) = OLDCORD(III,IFIXMM(KFIX))
               VEL (III,IFIXMM(KFIX)) = VELSV(III,IFIXMM(KFIX))
            ENDDO
         ENDDO
      ENDDO
C
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1001 FORMAT(1X,A10,1X,F21.18,1X,F21.18,1X,F21.18)
C
      CALL SEQCLO(36,'KEEP')
      CALL SEQCLO(38,'KEEP')
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFMD2
!>    
!> @brief    QM/MM MD driver
!>
!> @author   Nandun Thellamurege, Hui Li
!>           - Jan 2011
!>                    
!> @details  MD simulation for QM/MM atoms
!>
      SUBROUTINE FFMD2(ATMNAM,CORD,CORDSV,ZANF,
     *                 ZMAS,ONEMAS,QMZMAS,QM1MAS,
     *                 VEL,QMVEL,
     *                 FFGRD0,FFGRD1,FFGRD2,
     *                 QMGRD0,QMGRD1,QMGRD2,
     *                 LISTQM,NONLS1,NONLSTQ,
     *                 LSTCELL,NONLS2,CORDSV2,CORDSVQ,
     *                 MVFASTS2,MVFASTS3,MVFASTS4,
     *                 MVFASTL2,MVFASTL3,MVFASTL4,
     *                 NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                 OLDCORD,LSTRAT,DSTRAT,NONLSPMA,NONLSPMB,
     *                 CORDB,UMBHIS,UM2HIS,VELSV,
     *                 OLDC,QMVELSV)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL TRIPLET,SG1T,TAMMD,TPA,ALPHKWD,BETAKWD
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL MPTEST
C
      PARAMETER (MXATM=2000, MXAO=8192, MXRT=100)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, TWOTHIRD=2.0D+00/3.0D+00,
     *           ONETHIRD=1.0D+00/3.0D+00, ONESIX=1.0D+00/6.0D+00,
     *           FIVESIX=5.0D+00/6.0D+00)
C
      CHARACTER*10  ATMNAM
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          ZMAS(NFFAT),ONEMAS(NFFAT),QMZMAS(NAT),QM1MAS(NAT),
     *          VEL(3,NFFAT),QMVEL(3,NAT),
     *          FFGRD0(3,NFFAT),FFGRD1(3,NFFAT),FFGRD2(3,NFFAT),
     *          QMGRD0(3,NAT),QMGRD1(3,NAT),QMGRD2(3,NAT),LISTQM(*),
     *          NONLSTQ(*),LISTB2A(*),CORDB(3,*),OLDCORD(3,*)
      DIMENSION TIMSTR(3)
      DIMENSION FIXQM(3,400)
      DIMENSION VELSV(3,*),
     *          OLDC(3,*),QMVELSV(3,*)
C
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFFRE2/ N1FFAT,N1BOND,N1ANGL,N1DIHR,N1DIHB,N1CMAP,N1WAGG,
     *                N2FFAT,N2BOND,N2ANGL,N2DIHR,N2DIHB,N2CMAP,N2WAGG,
     *                LFF2ATMNAM,LFF2CORD,LFF2ZANF,LFF2ZMAS,
     *                LFF2ONEMAS,LFF2CHARG,LFF2POL,
     *                LFF2SIG,LFF2EPS,LFF2SIG2,LFF2EPS2,
     *                LFF2BOND0,LFF2FCBOND,LFF2ANGL0,LFF2FCANGL,
     *                LFF2FCWAGG,LFF2DIHB0,LFF2FCDIHB,
     *                LFF2VROT,LFF2NNN,LFF2GAMA,LFF2IPAIR,
     *                LFF2KLIST,LFF2LLIST,LFF2MLIST,LFF2NLIST,
     *                LFF2VEL,LFF2QMVEL,LFF2CLPR,LFF2ZLPR,
     *                LFF2NLPR,LFF2MAPLST,LFFKFREEA,LFFKFREEB,
     *                LFFLISTB2A,NTODOA,LFFNONLSA,NTODOB,LFFNONLSB,
     *                N1213A,LFFL1213A,N1213B,LFFL1213B,
     *                N14A,LFFL14A,N14B,LFFL14B,
     *                NTODOPMA,LFFNONLSPMA,NBONDPMA,LFFLSBONDPMA,
     *                NANGLPMA,LFFLSANGLPMA,NDIHRPMA,LFFLSDIHRPMA,
     *                NDIHBPMA,LFFLSDIHBPMA,NWAGGPMA,LFFLSWAGGPMA,
     *                NCMAPPMA,LFFLSCMAPPMA,
     *                N1213PMA,LFFL1213PMA,
     *                N14PMA,LFFL14PMA,
     *                NTODOPMB,LFFNONLSPMB,NBONDPMB,LFFLSBONDPMB,
     *                NANGLPMB,LFFLSANGLPMB,NDIHRPMB,LFFLSDIHRPMB,
     *                NDIHBPMB,LFFLSDIHBPMB,NWAGGPMB,LFFLSWAGGPMB,
     *                NCMAPPMB,LFFLSCMAPPMB,
     *                N1213PMB,LFFL1213PMB,
     *                N14PMB,LFFL14PMB
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFQMFE/ ETOTQA,EMP2QA,ESTATEQA,ETOTQB,EMP2QB,ESTATEQB,
     *                FRE1QMMM,FRE2QMMM,
     *                VIRA(3),VIRB(3),
     *                LFFFFGRDA,LFFFFGRDB,LFFQMGRDA,LFFQMGRDB,
     *                LFFCORDX,LFFCHARGX,LFFPOLX,LFFSIGX,LFFEPSX,
     *                LFFSIG2X,LFFEPS2X,LFFCLPRX,LFFZLPRX,LFFCHGIMX,
     *                LFFCRDIMX,LFFLISTAQM,LFFLISTBQM,NIMGPTX,
     *                LFFDIPIMX,LFFQADIMX,LFFOCTIMX
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /FFRMDF/ RDIST1,RDIST2,RINTRV,NRATM1,NRATM2,INTRSTP
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FFUMBR/ UMBFC,UMBR0,UMBSIZE,
     *                NUMBBIN,NUMBATM(6),NUMBTYP,LFFUMBHIS,
     *                UM2FC,UM2R0,UM2SIZE,
     *                NUM2BIN,NUM2ATM(6),NUM2TYP,LFFUM2HIS
      COMMON /FMCOM / XX(1)
      COMMON /FUNCT / E,EG(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,PFREQ(2),
     *                JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,ITDPRP,
     *                TRIPLET,SG1T,NONEQR,TAMMD,TPA,ALPHKWD,BETAKWD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE       /8HNONE    /
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C     FENGCHAO CUI, HUI LI, JUN 2012 (ADD FREE ENERGY)
C
      IF(NSTEP.LT.0) RETURN
C
      CALL SEQOPN(36,'TRAJECT','NEW',.FALSE.,'FORMATTED')
      CALL SEQOPN(37,'QMWAVE' ,'NEW',.FALSE.,'FORMATTED')
      CALL SEQOPN(38,'MDDIP'  ,'NEW',.FALSE.,'FORMATTED')
      ISTEP  =  0
      NPRINT = -5
      IF(IADDWAT.EQ.2 .AND. ISPHSOL.GT.0) RSPHSOL=RSPHSOL*1.0D+40
C
C     -- SAVE NFIXQM COORDINATE AND VELOCITY
C
      DO KFIX=1,NFIXQM
         DO III = 1, 3
            FIXQM(III,KFIX)     =     C(III,IFIXQM(KFIX))
            FIXQM(III,KFIX+200) = QMVEL(III,IFIXQM(KFIX))
         ENDDO
      ENDDO
C
C     -- READY TO TAKE OFF ?
C
      MDSTEP = -1
      DO ISTEP = 0, NSTEP
         MDSTEP = MDSTEP + 1
         IF(ISTEP.EQ.100.AND.IADDWAT.EQ.2 .AND. ISPHSOL.GT.0) 
     *   RSPHSOL = RSPHSOL*1.0D-40
         IF(MDSTEP.LE.1) CALL VCLR(UMBHIS,1,NUMBBIN)
         IF(MDSTEP.LE.1) CALL VCLR(UM2HIS,1,NUM2BIN*NUMBBIN)
C
         IF(MDSTEP.EQ.0) GOTO 50
C
         CALL DCOPY(3*NAT,C,1,OLDC,1)
         CALL DCOPY(3*NFFAT,CORD,1,OLDCORD,1)
C
C        - CALCULATE X(T+DT)
         IF(INTALG.EQ.1) THEN
            IF(MDSTEP.EQ.1) CALL DCOPY(3*NAT,QMGRD1,1,QMGRD0,1)
            DO IAT = 1, NAT
               DUM  = QM1MAS(IAT)*DT2
               DO III = 1, 3
                  C(III,IAT)=C(III,IAT)
     *                      +QMVEL(III,IAT)*DT
     *                      -TWOTHIRD*QMGRD1(III,IAT)*DUM
     *                      +ONESIX*QMGRD0(III,IAT)*DUM
               ENDDO
            ENDDO
            IF(MDSTEP.EQ.1) CALL DCOPY(3*NFFAT,FFGRD1,1,FFGRD0,1)
            DO IFFAT = 1, NFFAT
               DUM  = ONEMAS(IFFAT)*DT2
               DO III = 1, 3
                  CHANGE = +VEL(III,IFFAT)*DT
     *                     -TWOTHIRD*FFGRD1(III,IFFAT)*DUM
     *                     +ONESIX*FFGRD0(III,IFFAT)*DUM
                  CORD(III,IFFAT)=CORD(III,IFFAT) + CHANGE
               ENDDO
            ENDDO
         END IF
         IF(INTALG.EQ.2) THEN
            DO IAT = 1, NAT
               DUM  = QM1MAS(IAT)*DT2
               DO III = 1, 3
                  C(III,IAT)=C(III,IAT)
     *                      +QMVEL(III,IAT)*DT
     *                      -PT5*QMGRD1(III,IAT)*DUM
               ENDDO
            ENDDO
            DO IFFAT = 1, NFFAT
               DUM  = ONEMAS(IFFAT)*DT2
               DO III = 1, 3
                  CHANGE = +VEL(III,IFFAT)*DT
     *                     -PT5*FFGRD1(III,IFFAT)*DUM
                  CORD(III,IFFAT)=CORD(III,IFFAT) + CHANGE
               ENDDO
            ENDDO
         END IF
         IF(NACTQM.GT.0) THEN
            DO KOPT = 1, NACTQM
               IAT = LACTQM(KOPT)
               IF(IAT.GT.0) THEN
                  C(1,IAT)=(C(1,IAT)+3.1416D+00)*1.0D-40
                  C(2,IAT)=(C(2,IAT)+2.7183D+00)*1.0D-40
                  C(3,IAT)=(C(3,IAT)+1.4427D+00)*1.0D-40
               END IF
            ENDDO
            DO IAT = 1, NAT
               IF(ABS(C(1,IAT))+ABS(C(2,IAT))
     *           +ABS(C(3,IAT)).LT.1.0D-20) THEN
                  C(1,IAT) = C(1,IAT)*1.0D+40 - 3.1416D+00
                  C(2,IAT) = C(2,IAT)*1.0D+40 - 2.7183D+00
                  C(3,IAT) = C(3,IAT)*1.0D+40 - 1.4427D+00
               ELSE
                  DO III = 1, 3
                     C(III,IAT) = OLDC(III,IAT)
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXQM
            DO III = 1, 3
               C(III,IFIXQM(KFIX)) = FIXQM(III,KFIX)
            ENDDO
         ENDDO
         IF(NACTMM.GT.0) THEN
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0) THEN
                  CORD(1,IFFAT)=(CORD(1,IFFAT)+3.1416D+00)*1.0D-40
                  CORD(2,IFFAT)=(CORD(2,IFFAT)+2.7183D+00)*1.0D-40
                  CORD(3,IFFAT)=(CORD(3,IFFAT)+1.4427D+00)*1.0D-40
               END IF
            ENDDO
            DO IFFAT = 1, NFFAT
               IF(ABS(CORD(1,IFFAT))+ABS(CORD(2,IFFAT))
     *           +ABS(CORD(3,IFFAT)).LT.1.0D-20) THEN
                  CORD(1,IFFAT) = CORD(1,IFFAT)*1.0D+40 - 3.1416D+00
                  CORD(2,IFFAT) = CORD(2,IFFAT)*1.0D+40 - 2.7183D+00
                  CORD(3,IFFAT) = CORD(3,IFFAT)*1.0D+40 - 1.4427D+00
               ELSE
                  DO III = 1, 3
                     CORD(III,IFFAT) = OLDCORD(III,IFFAT)
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXMM
            DO III = 1, 3
               CORD(III,IFIXMM(KFIX)) = OLDCORD(III,IFIXMM(KFIX))
            ENDDO
         ENDDO
C
         CALL VCLR(VIRRAT,1,3)
         IF(NRATTLE.GT.0) THEN
C           - FIXED ATOMS DO NOT MOVE, SO MAKE THE MASS INFINITE
            IF(NACTMM.GT.0) THEN
               DO IFFAT = 1, NFFAT
                  ONEMAS(IFFAT) = 0.0D+00
               ENDDO
               DO KOPT = 1, NACTMM
                  IFFAT = LACTMM(KOPT)
                  IF(IFFAT.GT.0) ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
               ENDDO
            END IF
            DO KFIX = 1, NFIXMM
               KFFAT = IFIXMM(KFIX)
               IF(KFFAT.GT.0) ONEMAS(KFFAT) = 0.0D+00
            ENDDO
            CALL RATTLE1(CORD,OLDCORD,VEL,DSTRAT,ONEMAS,LSTRAT,ISTEP)
            DO KFIX = 1, NFIXMM
               KFFAT = IFIXMM(KFIX)
               IF(KFFAT.GT.0) ONEMAS(KFFAT) = 1.0D+00/ZMAS(KFFAT)
            ENDDO
            IF(NACTMM.GT.0) THEN
               DO IFFAT = 1, NFFAT
                  ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
               ENDDO
            END IF
C           - RATTLE CODE WORKS DIRECTLY ON MM ATOMS, BUT NOW PASS TO QM
            IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
               DO IAT = 1, NAT
                  KFFAT = LISTQM(NFFAT+IAT)
                  IF(KFFAT.GT.0) THEN
                     C(1,IAT)     = CORD(1,KFFAT)
                     C(2,IAT)     = CORD(2,KFFAT)
                     C(3,IAT)     = CORD(3,KFFAT)
                     QMVEL(1,IAT) = VEL(1,KFFAT)
                     QMVEL(2,IAT) = VEL(2,KFFAT)
                     QMVEL(3,IAT) = VEL(3,KFFAT)
                  END IF
               ENDDO
            END IF
         END IF
C
         IF(NRATM1.GT.0) THEN
            CALL IRMDF1(CORD,OLDCORD,VEL,ONEMAS,ISTEP,RMDFCE)
C           - IRMDF CODE WORKS DIRECTLY ON MM ATOMS, BUT NOW PASS TO QM
            IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
               DO IAT = 1, NAT
                  KFFAT = LISTQM(NFFAT+IAT)
                  IF(KFFAT.GT.0) THEN
                     C(1,IAT)     = CORD(1,KFFAT)
                     C(2,IAT)     = CORD(2,KFFAT)
                     C(3,IAT)     = CORD(3,KFFAT)
                     QMVEL(1,IAT) = VEL(1,KFFAT)
                     QMVEL(2,IAT) = VEL(2,KFFAT)
                     QMVEL(3,IAT) = VEL(3,KFFAT)
                  END IF
               ENDDO
            END IF
         END IF
C
  50     CONTINUE
C
         CALL NONBOND(MDSTEP,CORD,CORDSV,CORDSV2,CORDSVQ,
     *                NONLS1,NONLS2,
     *                NONLSTQ,LSTCELL,
     *                MVFASTS2,MVFASTS3,MVFASTS4,
     *                MVFASTL2,MVFASTL3,MVFASTL4,
     *                NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                NONLSPMA,NONLSPMB)
C
         IWSAVE = IW
         IF(ISTEP.GT.0) IW = 37  ! PRINT TO QMWAVE
         IPSAVE = IP
         IP = 37  ! PUNCH TO QMWAVE
C
C        -- RUN A DIFFERENT QM CALCULATION
         IF(IDOQM2.EQ.1) THEN
            SCFTYPSV   = SCFTYP
            TDDFTSV    = TDDFTYP
            CITYPSV    = CITYP
            MPLEVLSV   = MPLEVL
            ICHARGSV   = ICH
            MULTSV     = MUL
            NESV       = NE
            NASV       = NA
            NBSV       = NB
            SCFTYP     = SCFTYP2
            TDDFTYP    = TDDFT2
            CITYP      = CITYP2
            MPLEVL     = MPLEVL2
            ICH        = ICHARG2
            MUL        = MULT2
            NE         = NESV - ICH + ICHARGSV
            NA         = (NE-1+MUL)/2 
            NB         = (NE+1-MUL)/2
            IF(MPLEVL2.EQ.2) CALL MP2INP(MPTEST)
            IF(TDDFT2.NE.RNONE) CALL TDDINP
            CALL GRADX
                                 ENFFQM2 = ETOT
            IF(MPLEVL.EQ.2)      ENFFQM2 = EMP2
            IF(TDDFTYP.NE.RNONE) ENFFQM2 = ESTATE(NTHST)
            SCFTYP     = SCFTYPSV
            TDDFTYP    = TDDFTSV
            CITYP      = CITYPSV
            MPLEVL     = MPLEVLSV
            ICH        = ICHARGSV
            MUL        = MULTSV
            NE         = NESV
            NA         = NASV
            NB         = NBSV
         END IF
C
C        -- CALCULATE ENERGY AND GRADIENT AT X(T+DT)
         CALL VCLR(QMGRD2,1,3*NAT  )
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL VCLR(VIR   ,1,3)
         CALL GRADX
         CALL DCOPY(3*NAT,EG,1,QMGRD2,1)
         IF(IFEPTOP.EQ.1.AND.MATOMB.GT.0) THEN
            CALL SAVEABPROP(1)
            CALL DCOPY(3*MATOMA,C,1,XX(LFFCX),1)
            CALL SAVEFFDATA
            CALL SETQMAB(2)
            CALL SETFFDATAB(2)
            CALL VCLR(QMGRD2,1,3*NAT  )
            CALL VCLR(FFGRD2,1,3*NFFAT)
            CALL VCLR(VIR   ,1,3)
            CALL GRADX
            CALL DCOPY(3*NAT,EG,1,QMGRD2,1)
            CALL SAVEABPROP(2)
            CALL SETQMAB(1)
            CALL SETFFDATAB(1)
            CALL MIXABPROP
         ELSE IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            CALL SAVEFFDATA
            CALL SETQMAB(2)
            CALL SETFFDATAB(2)
            CALL SETQMAB(1)
            CALL SETFFDATAB(1)
         END IF
C
         IW = IWSAVE
         IP = IPSAVE
C
C        - COMBINE QM AND MM GRADIENTS -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  QMGRD2(1,IAT)   = QMGRD2(1,IAT) + FFGRD2(1,KFFAT)
                  QMGRD2(2,IAT)   = QMGRD2(2,IAT) + FFGRD2(2,KFFAT)
                  QMGRD2(3,IAT)   = QMGRD2(3,IAT) + FFGRD2(3,KFFAT)
                  FFGRD2(1,KFFAT) = QMGRD2(1,IAT)
                  FFGRD2(2,KFFAT) = QMGRD2(2,IAT)
                  FFGRD2(3,KFFAT) = QMGRD2(3,IAT)
               END IF
            ENDDO
         END IF
C
         IF(MDSTEP.EQ.0) THEN
            CALL DCOPY(3*NAT  ,QMGRD2,1,QMGRD1,1)
            CALL DCOPY(3*NFFAT,FFGRD2,1,FFGRD1,1)
            GOTO 51
         END IF
C
C        - FIXED ATOMS DO NOT MOVE, SO MAKE THE MASS INFINITE
         IF(NACTQM.GT.0) THEN
            DO IAT = 1, NAT
               QM1MAS(IAT) = 0.0D+00
            ENDDO
            DO KOPT = 1, NACTQM
               IAT = LACTQM(KOPT)
               IF(IAT.GT.0) QM1MAS(IAT) = 1.0D+00/QMZMAS(IAT)
            ENDDO
         END IF
         DO KFIX = 1, NFIXQM
            KAT = IFIXQM(KFIX)
            IF(KAT.GT.0) QM1MAS(KAT) = 0.0D+00
         ENDDO
         IF(NACTMM.GT.0) THEN
            DO IFFAT = 1, NFFAT
               ONEMAS(IFFAT) = 0.0D+00
            ENDDO
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0) ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
            ENDDO
         END IF
         DO KFIX = 1, NFIXMM
            KFFAT = IFIXMM(KFIX)
            IF(KFFAT.GT.0) ONEMAS(KFFAT) = 0.0D+00
         ENDDO
C
C        -- CALCULATE V(T+DT)
         IF(INTALG.EQ.1) THEN
            IF(MDSTEP.EQ.1) THEN
               DO IAT = 1, NAT
                  DUM  = QM1MAS(IAT)*DT
                  DO III = 1, 3
                     QMVEL(III,IAT)=QMVEL(III,IAT)
     *                            -PT5*(QMGRD1(III,IAT)
     *                                 +QMGRD2(III,IAT))*DUM
                     QMGRD1(III,IAT)=QMGRD2(III,IAT)
                  ENDDO
               ENDDO
               DO IFFAT = 1, NFFAT
                  DUM  = ONEMAS(IFFAT)*DT
                  DO III = 1, 3
                     VEL(III,IFFAT)=VEL(III,IFFAT)
     *                            -PT5*(FFGRD1(III,IFFAT)
     *                                 +FFGRD2(III,IFFAT))*DUM
                     FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
                  ENDDO
               ENDDO
            ELSE
               DO IAT = 1, NAT
                  DUM  = QM1MAS(IAT)*DT
                  DO III = 1, 3
                     QMVEL(III,IAT)=QMVEL(III,IAT)
     *                           -(ONETHIRD*QMGRD2(III,IAT)
     *                             +FIVESIX*QMGRD1(III,IAT)
     *                              -ONESIX*QMGRD0(III,IAT))*DUM
                     QMGRD0(III,IAT)=QMGRD1(III,IAT)
                     QMGRD1(III,IAT)=QMGRD2(III,IAT)
                  ENDDO
               ENDDO
               DO IFFAT = 1, NFFAT 
                  DUM  = ONEMAS(IFFAT)*DT
                  DO III = 1, 3
                        VEL(III,IFFAT)=VEL(III,IFFAT)
     *                               -(ONETHIRD*FFGRD2(III,IFFAT)
     *                                 +FIVESIX*FFGRD1(III,IFFAT)
     *                                  -ONESIX*FFGRD0(III,IFFAT))*DUM
                        FFGRD0(III,IFFAT)=FFGRD1(III,IFFAT)
                        FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
                  ENDDO
               ENDDO
            END IF
         END IF
         IF(INTALG.EQ.2) THEN
            DO IAT = 1, NAT
               DUM  = QM1MAS(IAT)*DT
               DO III = 1, 3
                  QMVEL(III,IAT)=QMVEL(III,IAT)
     *                         -PT5*(QMGRD1(III,IAT)
     *                              +QMGRD2(III,IAT))*DUM
                  QMGRD1(III,IAT)=QMGRD2(III,IAT)
               ENDDO
            ENDDO
            DO IFFAT = 1, NFFAT
               DUM  = ONEMAS(IFFAT)*DT
               DO III = 1, 3
                  VEL(III,IFFAT)=VEL(III,IFFAT)
     *                         -PT5*(FFGRD1(III,IFFAT)
     *                              +FFGRD2(III,IFFAT))*DUM
                  FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
               ENDDO
            ENDDO
         END IF
C
         IF(NRATTLE.GT.0) THEN
            CALL RATTLE2a(CORD,VEL,DSTRAT,ONEMAS,LSTRAT,ISTEP)
C           - RATTLE CODE WORKS DIRECTLY ON MM ATOMS, BUT NOW PASS TO QM
            IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
               DO IAT = 1, NAT
                  KFFAT = LISTQM(NFFAT+IAT)
                  IF(KFFAT.GT.0) THEN
                     QMVEL(1,IAT) = VEL(1,KFFAT)
                     QMVEL(2,IAT) = VEL(2,KFFAT)
                     QMVEL(3,IAT) = VEL(3,KFFAT)
                  END IF
               ENDDO
            END IF
         END IF
C
         IF(NRATM1.GT.0) THEN
            CALL IRMDF2(CORD,VEL,ONEMAS,ISTEP)
C           - IRMDF CODE WORKS DIRECTLY ON MM ATOMS, BUT NOW PASS TO QM
            IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
               DO IAT = 1, NAT
                  KFFAT = LISTQM(NFFAT+IAT)
                  IF(KFFAT.GT.0) THEN
                     QMVEL(1,IAT) = VEL(1,KFFAT)
                     QMVEL(2,IAT) = VEL(2,KFFAT)
                     QMVEL(3,IAT) = VEL(3,KFFAT)
                  END IF
               ENDDO
            END IF
         END IF
C
         DO KFIX = 1, NFIXQM
            KAT = IFIXQM(KFIX)
            IF(KAT.GT.0) QM1MAS(KAT) = 1.0D+00/QMZMAS(KAT)
         ENDDO
         DO KFIX = 1, NFIXMM
            KFFAT = IFIXMM(KFIX)
            IF(KFFAT.GT.0) ONEMAS(KFFAT) = 1.0D+00/ZMAS(KFFAT)
         ENDDO
         IF(NACTQM.GT.0) THEN
            DO IAT = 1, NAT
               QM1MAS(IAT) = 1.0D+00/QMZMAS(IAT)
            ENDDO
         END IF
         IF(NACTMM.GT.0) THEN
            DO IFFAT = 1, NFFAT
               ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
            ENDDO
         END IF
C
C        -- SYNCHRONIZE CORD AND VEL EVERY 200 STEPS --
         IF(MOD(ISTEP,200).EQ.0) THEN
            IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
               DO IAT = 1, NAT
                  KFFAT = LISTQM(NFFAT+IAT)
                  IF(KFFAT.GT.0) THEN
                     C(1,IAT)     = CORD(1,KFFAT)
                     C(2,IAT)     = CORD(2,KFFAT)
                     C(3,IAT)     = CORD(3,KFFAT)
                     QMVEL(1,IAT) = VEL(1,KFFAT)
                     QMVEL(2,IAT) = VEL(2,KFFAT)
                     QMVEL(3,IAT) = VEL(3,KFFAT)
                  END IF
               ENDDO
            END IF
            IF(GOPARR) THEN
               CALL DDI_BCAST(461,'F',C,3*NAT,MASTER)
               CALL DDI_BCAST(462,'F',CORD,3*NFFAT,MASTER)
               CALL DDI_BCAST(463,'F',QMVEL,3*NAT,MASTER)
               CALL DDI_BCAST(464,'F',VEL,3*NFFAT,MASTER)
            END IF
         END IF
C
  51     CONTINUE
C
C        -- CALCULATE PROPERTIES
         CALL MDPROP(CORD,VEL,QMVEL,ZMAS,QMZMAS,MDSTEP,
     *               0,LISTQM,TEMP,PRES,UMBHIS,UM2HIS,
     *               PRESX,PRESY,PRESZ)
C
         CALL TMDATE(TIMSTR)
         IF(MOD(ISTEP,KOUT).EQ.0) CALL TIMIT(1)
         IF(MOD(ISTEP,KOUT).NE.0 .AND. ISTEP.NE.NSTEP) GOTO 200
C
         IF(MASWRK)THEN
C
C           -- PRINT OUT PBC COORDINATES --
C              ONLY WHEN PBC AND KOUTPBC APPLIES
C
            IF(KOUTPBC.EQ.1.AND.MIN(XBOX,YBOX,ZBOX).LT.1.0D+30) THEN
               WRITE(36,*)'==== PBC MASTER BOX ===='
               WRITE(36,*)'$PBCDATA'
               WRITE(36,'(A,3(F8.3,1X),A,I3,A,I10)')
     *         ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *         'NEAR ATOM',LQMCT,'     AT MD STEP',ISTEP
               WRITE(36,*)'C1'
               DO IAT = 1, NAT
                  CX    = C(1,IAT) - CENTX
                  CY    = C(2,IAT) - CENTY
                  CZ    = C(3,IAT) - CENTZ
                  PBCX  = XBOX*ANINT(CX*ONEXBOX)
                  PBCY  = YBOX*ANINT(CY*ONEYBOX)
                  PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                  CX    = CX - PBCX + CENTX
                  CY    = CY - PBCY + CENTY
                  CZ    = CZ - PBCZ + CENTZ
                  WRITE(36,999)ANAM(IAT),ZAN(IAT),
     *            CX*TOANGS,CY*TOANGS,CZ*TOANGS
               ENDDO
               IF(IFEPTOP.GT.0)THEN
                  DO IATB = 1, MATOMB
                     CX    = XX(LFFCX+3*(MATOMA+IATB-1)  ) - CENTX
                     CY    = XX(LFFCX+3*(MATOMA+IATB-1)+1) - CENTY
                     CZ    = XX(LFFCX+3*(MATOMA+IATB-1)+2) - CENTZ
                     PBCX  = XBOX*ANINT(CX*ONEXBOX)
                     PBCY  = YBOX*ANINT(CY*ONEYBOX)
                     PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                     CX    = CX - PBCX + CENTX
                     CY    = CY - PBCY + CENTY
                     CZ    = CZ - PBCZ + CENTZ
                     WRITE(36,999)ANAM(MATOMA+IATB),  ! ANAM IS THE ORIGINAL
     *               XX(LFFZANX +MATOMA+IATB-1),
     *               CX*TOANGS,CY*TOANGS,CZ*TOANGS
                  ENDDO
               END IF
               WRITE(36,*)'$END'
C
               WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$PBCFFDATA       !    MD STEP',ISTEP,
     *         'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
               IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
                  WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *            '$PBCFFDATB       !    MD STEP',ISTEP,
     *            'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
               END IF
               WRITE(36,*)'COORDINATES  NUC                   X',
     *         '                   Y                   Z'
               DO IFFAT = 1, N1FFAT
                  CX    = CORD(1,IFFAT) - CENTX
                  CY    = CORD(2,IFFAT) - CENTY
                  CZ    = CORD(3,IFFAT) - CENTZ
                  PBCX  = XBOX*ANINT(CX*ONEXBOX)
                  PBCY  = YBOX*ANINT(CY*ONEYBOX)
                  PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                  CX    = CORD(1,IFFAT) - PBCX
                  CY    = CORD(2,IFFAT) - PBCY
                  CZ    = CORD(3,IFFAT) - PBCZ
                  WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                          CX*TOANGS,CY*TOANGS,CZ*TOANGS
               ENDDO
               WRITE(36,*)'STOP'
C
               IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
                  WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *            '$PBCFFDATB       !    MD STEP',ISTEP,
     *            'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
                  WRITE(36,*)'COORDINATES  NUC                   X',
     *            '                   Y                   Z'
                  DO IFFAT = 1, N2FFAT
                     CX    = CORDB(1,IFFAT) - CENTX
                     CY    = CORDB(2,IFFAT) - CENTY
                     CZ    = CORDB(3,IFFAT) - CENTZ
                     PBCX  = XBOX*ANINT(CX*ONEXBOX)
                     PBCY  = YBOX*ANINT(CY*ONEYBOX)
                     PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                     CX    = CORDB(1,IFFAT) - PBCX
                     CY    = CORDB(2,IFFAT) - PBCY
                     CZ    = CORDB(3,IFFAT) - PBCZ
                     WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                             CX*TOANGS,CY*TOANGS,CZ*TOANGS
                  ENDDO
                  WRITE(36,*)'STOP'
               END IF
C
               IF(IFEPTOP.EQ.2) THEN
                  WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *            '$PBCFFDATB       !    MD STEP',ISTEP,
     *            'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
                  WRITE(36,*)'COORDINATES  NUC                   X',
     *            '                   Y                   Z'
                  DO JFFAT = 1, N2FFAT
                     IFFAT = LISTB2A(JFFAT)
                     CX    = CORD(1,IFFAT) - CENTX
                     CY    = CORD(2,IFFAT) - CENTY
                     CZ    = CORD(3,IFFAT) - CENTZ
                     PBCX  = XBOX*ANINT(CX*ONEXBOX)
                     PBCY  = YBOX*ANINT(CY*ONEYBOX)
                     PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                     CX    = CORD(1,IFFAT) - PBCX
                     CY    = CORD(2,IFFAT) - PBCY
                     CZ    = CORD(3,IFFAT) - PBCZ
                     WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                             CX*TOANGS,CY*TOANGS,CZ*TOANGS
                  ENDDO
                  WRITE(36,*)'STOP'
               END IF
C
            END IF
C
            WRITE(36,'(1X,A,I10,1X,A,F15.2,A)')
     *      'RESTART COORD + VEL FOR QUANPOL AT MD STEP',ISTEP,
     *      'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
            IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30) THEN
              WRITE(36,'(A,3(A,F15.10,1X),/9X,3(A,F15.10,1X),A)')
     *        ' $QUANPO ',
     *        'CENTX=',CENTX*TOANGS,
     *        'CENTY=',CENTY*TOANGS,
     *        'CENTZ=',CENTZ*TOANGS,
     *        'XBOX=',XBOX*TOANGS,
     *        'YBOX=',YBOX*TOANGS,
     *        'ZBOX=',ZBOX*TOANGS,
     *        '$END'
            ELSE IF(SPHRAD.LT.1.0D+30) THEN
              WRITE(36,'(A,3(A,F15.10,1X),/9X,2(A,F15.10,1X),A)')
     *        ' $QUANPO ',
     *        'CENTX=',CENTX*TOANGS,
     *        'CENTY=',CENTY*TOANGS,
     *        'CENTZ=',CENTZ*TOANGS,
     *        'SPHRAD=',SPHRAD*TOANGS,
     *        'RSPHSOL=',RSPHSOL*TOANGS,
     *        '$END'
            ELSE
              WRITE(36,'(A,3(A,F15.10,1X),A)')
     *        ' $QUANPO ',
     *        'CENTX=',CENTX*TOANGS,
     *        'CENTY=',CENTY*TOANGS,
     *        'CENTZ=',CENTZ*TOANGS,
     *        '$END'
            END IF
C
            WRITE(36,*)'$DATA'
            WRITE(36,'(A,3(F8.3,1X),A,I3,A,I10)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,'     AT MD STEP',ISTEP
            WRITE(36,*)'C1'
            DO IAT = 1, NAT
               WRITE(36,999)ANAM(IAT),ZAN(IAT),
     *         C(1,IAT)*TOANGS,
     *         C(2,IAT)*TOANGS,
     *         C(3,IAT)*TOANGS
            ENDDO
            IF(IFEPTOP.GT.0)THEN
               DO IATB = 1, MATOMB
                  WRITE(36,999)ANAM(MATOMA+IATB),  ! ANAM IS THE ORIGINAL
     *            XX(LFFZANX +MATOMA+IATB-1),
     *            XX(LFFCX+3*(MATOMA+IATB-1)  )*TOANGS,
     *            XX(LFFCX+3*(MATOMA+IATB-1)+1)*TOANGS,
     *            XX(LFFCX+3*(MATOMA+IATB-1)+2)*TOANGS
               ENDDO
            END IF
            WRITE(36,*)'$END'
            WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !    MD STEP',ISTEP,
     *      'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
               WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$FFDATB          !    MD STEP',ISTEP,
     *         'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
            END IF
            WRITE(36,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, N1FFAT
               WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(36,*)'STOP'
            WRITE(36,*)'QMVELOCITY                    VX',
     *          '                    VY                    VZ'
            DO IAT = 1, NAT
               WRITE(36,1002) ANAM(IAT),
     *         QMVEL(1,IAT),QMVEL(2,IAT),QMVEL(3,IAT)
            ENDDO
            IF(IFEPTOP.GT.0)THEN
               DO IATB = 1, MATOMB
                  CALL GETIFFAT(XX(LFFLISTBQM),IATB,IATA)
                  WRITE(36,1002) ANAM(MATOMA+IATB),
     *            QMVEL(1,IATA),QMVEL(2,IATA),QMVEL(3,IATA)
               ENDDO
            END IF
            WRITE(36,*)'STOP'
            WRITE(36,*)'MMVELOCITY                    VX',
     *          '                    VY                    VZ'
            DO IFFAT = 1, N1FFAT
               WRITE(36,1001) ATMNAM(IFFAT),
     *         VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
            ENDDO
            WRITE(36,*)'STOP'
C
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
               WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$FFDATB          !    MD STEP',ISTEP,
     *         'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
               WRITE(36,*)'COORDINATES  NUC                   X',
     *             '                   Y                   Z'
               DO IFFAT = 1, N2FFAT
                  WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *            CORDB(1,IFFAT)*TOANGS,
     *            CORDB(2,IFFAT)*TOANGS,
     *            CORDB(3,IFFAT)*TOANGS
               ENDDO
               WRITE(36,*)'STOP'
               WRITE(36,*)'QMVELOCITY                    VX',
     *             '                    VY                    VZ'
               DO IAT = 1, NAT
                  WRITE(36,1002) ANAM(IAT),
     *            QMVEL(1,IAT),QMVEL(2,IAT),QMVEL(3,IAT)
               ENDDO
C              IF(IFEPTOP.GT.0)THEN  ! ALWAYS DO THIS
                  DO IATB = 1, MATOMB
                     CALL GETIFFAT(XX(LFFLISTBQM),IATB,IATA)
                     WRITE(36,1002) ANAM(MATOMA+IATB),
     *               QMVEL(1,IATA),QMVEL(2,IATA),QMVEL(3,IATA)
                  ENDDO
C              END IF
               WRITE(36,*)'STOP'
               WRITE(36,*)'MMVELOCITY                    VX',
     *             '                    VY                    VZ'
               DO IFFAT = 1, N2FFAT
                  WRITE(36,1001) ATMNAM(IFFAT),
     *            VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
               ENDDO
               WRITE(36,*)'STOP'
            END IF
C
            IF(IFEPTOP.EQ.2) THEN
               WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$FFDATB          !    MD STEP',ISTEP,
     *         'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
               WRITE(36,*)'COORDINATES  NUC                   X',
     *             '                   Y                   Z'
               DO JFFAT = 1, N2FFAT
                  IFFAT = LISTB2A(JFFAT)
                  WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *            CORD(1,IFFAT)*TOANGS,
     *            CORD(2,IFFAT)*TOANGS,
     *            CORD(3,IFFAT)*TOANGS
               ENDDO
               WRITE(36,*)'STOP'
               WRITE(36,*)'QMVELOCITY                    VX',
     *             '                    VY                    VZ'
               DO IAT = 1, NAT
                  WRITE(36,1002) ANAM(IAT),
     *            QMVEL(1,IAT),QMVEL(2,IAT),QMVEL(3,IAT)
               ENDDO
C              IF(IFEPTOP.GT.0)THEN  ! ALWAYS DO THIS
                  DO IATB = 1, MATOMB
                     CALL GETIFFAT(XX(LFFLISTBQM),IATB,IATA)
                     WRITE(36,1002) ANAM(MATOMA+IATB),
     *               QMVEL(1,IATA),QMVEL(2,IATA),QMVEL(3,IATA)
                  ENDDO
C              END IF
               WRITE(36,*)'STOP'
               WRITE(36,*)'MMVELOCITY                    VX',
     *             '                    VY                    VZ'
               DO JFFAT = 1, N2FFAT
                  IFFAT = LISTB2A(JFFAT)
                  WRITE(36,1001) ATMNAM(IFFAT),
     *            VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
               ENDDO
               WRITE(36,*)'STOP'
            END IF
C
         END IF
C
         CALL FLSHBF(IW)
         CALL FLSHBF(36)
         CALL FLSHBF(37)
         CALL TIMIT(1)
 200     CONTINUE
C
C        -- SCALE VELOCITY AND VOLUME --
         CALL DCOPY(3*NAT,C,1,OLDC,1)
         CALL DCOPY(3*NAT,QMVEL,1,QMVELSV,1)
         CALL DCOPY(3*NFFAT,CORD,1,OLDCORD,1)
         CALL DCOPY(3*NFFAT,VEL,1,VELSV,1)
         CALL TPSTAT(CORD,VEL,QMVEL,ZMAS,QMZMAS,ONEMAS,QM1MAS,
     *               1,MDSTEP,LISTQM,TEMP,PRES,
     *               PRESX,PRESY,PRESZ)
         IF(NACTQM.GT.0) THEN
            DO KOPT = 1, NACTQM
               IAT = LACTQM(KOPT)
               IF(IAT.GT.0) THEN
                  C(1,IAT)=(C(1,IAT)+3.1416D+00)*1.0D-40
                  C(2,IAT)=(C(2,IAT)+2.7183D+00)*1.0D-40
                  C(3,IAT)=(C(3,IAT)+1.4427D+00)*1.0D-40
                  QMVEL(1,IAT)=QMVEL(1,IAT) + 1.0D+00
               END IF
            ENDDO
            DO IAT = 1, NAT
               IF(ABS(C(1,IAT))+ABS(C(2,IAT))
     *           +ABS(C(3,IAT)).LT.1.0D-20) THEN
                  C(1,IAT) = C(1,IAT)*1.0D+40 - 3.1416D+00
                  C(2,IAT) = C(2,IAT)*1.0D+40 - 2.7183D+00
                  C(3,IAT) = C(3,IAT)*1.0D+40 - 1.4427D+00
               ELSE
                  DO III = 1, 3
                     C(III,IAT) = OLDC(III,IAT)
                  ENDDO
               END IF
               IF(QMVEL(1,IAT).GT.0.5D+00) THEN
                  QMVEL(1,IAT) = QMVEL(1,IAT) - 1.0D+00
               ELSE
                  DO III = 1, 3
                     QMVEL(III,IAT) = QMVELSV(III,IAT)
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXQM
            DO III = 1, 3
               C(III,IFIXQM(KFIX))     = FIXQM(III,KFIX)
               QMVEL(III,IFIXQM(KFIX)) = FIXQM(III,KFIX+200)
            ENDDO
         ENDDO
         IF(NACTMM.GT.0) THEN
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0) THEN
                  CORD(1,IFFAT)=(CORD(1,IFFAT)+3.1416D+00)*1.0D-40
                  CORD(2,IFFAT)=(CORD(2,IFFAT)+2.7183D+00)*1.0D-40
                  CORD(3,IFFAT)=(CORD(3,IFFAT)+1.4427D+00)*1.0D-40
                  VEL (1,IFFAT)=VEL(1,IFFAT) + 1.0D+00     
               END IF
            ENDDO 
            DO IFFAT = 1, NFFAT
               IF(ABS(CORD(1,IFFAT))+ABS(CORD(2,IFFAT))
     *           +ABS(CORD(3,IFFAT)).LT.1.0D-20) THEN
                  CORD(1,IFFAT) = CORD(1,IFFAT)*1.0D+40 - 3.1416D+00
                  CORD(2,IFFAT) = CORD(2,IFFAT)*1.0D+40 - 2.7183D+00
                  CORD(3,IFFAT) = CORD(3,IFFAT)*1.0D+40 - 1.4427D+00
               ELSE
                  DO III = 1, 3
                     CORD(III,IFFAT) = OLDCORD(III,IFFAT)
                  ENDDO
               END IF
               IF(VEL(1,IFFAT).GT.0.5D+00) THEN
                  VEL(1,IFFAT) = VEL(1,IFFAT) - 1.0D+00
               ELSE
                  DO III = 1, 3
                     VEL(III,IFFAT) = VELSV(III,IFFAT)
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXMM
            DO III = 1, 3
               CORD(III,IFIXMM(KFIX)) = OLDCORD(III,IFIXMM(KFIX))
               VEL (III,IFIXMM(KFIX)) = VELSV(III,IFIXMM(KFIX))
            ENDDO
         ENDDO
C        -- ADJUST QMCX,Y,Z WHEN T OR V ARE ADJUSTED --
C           ALSO UPDATE LQMCT
C           (DO THIS ONLY IF QM ATOMS ARE SCALED)
         IF(ITSTAT.GT.0 .OR. IPSTAT.GT.0) THEN
            IF(NAT.GT.0 .AND. NFFAT.GT.0 .AND. SWRB2.LT.1.0D+08) THEN
               XMAX = -1.0D+30
               YMAX = -1.0D+30
               ZMAX = -1.0D+30
               XMIN =  1.0D+30
               YMIN =  1.0D+30
               ZMIN =  1.0D+30
               DO IAT = 1,NAT
                  XMAX = MAX(XMAX,C(1,IAT))
                  YMAX = MAX(YMAX,C(2,IAT))
                  ZMAX = MAX(ZMAX,C(3,IAT))
                  XMIN = MIN(XMIN,C(1,IAT))
                  YMIN = MIN(YMIN,C(2,IAT))
                  ZMIN = MIN(ZMIN,C(3,IAT))
               ENDDO
               QMSIZE = ZERO
               QMSIZE = MAX(QMSIZE,XMAX-XMIN)
               QMSIZE = MAX(QMSIZE,YMAX-YMIN)
               QMSIZE = MAX(QMSIZE,ZMAX-ZMIN)
               QMSIZE = QMSIZE*1.732D+00
               QMCX   = (XMAX+XMIN)*PT5
               QMCY   = (YMAX+YMIN)*PT5
               QMCZ   = (ZMAX+ZMIN)*PT5
               R2NEAR = 100.0D+00
               NEAR   = 0
               DO IAT = 1,NAT
                  XI = C(1,IAT) - QMCX
                  YI = C(2,IAT) - QMCY
                  ZI = C(3,IAT) - QMCZ
                  R2 = XI**2 + YI**2 + ZI**2
                  IF(R2.LT.R2NEAR) THEN
                     R2NEAR = R2
                     NEAR   = IAT
                  END IF
               ENDDO
               LQMCT = NEAR
            END IF
         END IF
      ENDDO
C
  999 FORMAT(1X,A8,3X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1001 FORMAT(1X,A10,1X,F21.18,1X,F21.18,1X,F21.18)
 1002 FORMAT(1X,A8,3X,F21.18,1X,F21.18,1X,F21.18)
C
      CALL SEQCLO(36,'KEEP')
      CALL SEQCLO(37,'KEEP')
      CALL SEQCLO(38,'KEEP')
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFMD3
!>    
!> @brief    mean field QM/MM MD 
!>
!> @author   Fengchao Cui, Hui Li
!>           - Mar 2012
!>                    
!> @details  MD simulation for MM atoms
!>           average position of MM atoms
!>           QM/<MM> energy/gradient
!>
      SUBROUTINE FFMD3(ATMNAM,CORD,CORDSV,ZANF,
     *                 ZMAS,ONEMAS,QMZMAS,QM1MAS,
     *                 CHARG,POL,POLSV,DIP,CHGIMG,CRDIMG,CHGIMB,CRDIMB,
     *                 FIELD1,FIELD2,FIELD3,
     *                 SIG,EPS,SIG2,EPS2,
     *                 BOND0,FCBOND,FCSTBD,
     *                 ANGL0,FCANGL,FCWAGG,
     *                 DIHB0,FCDIHB,FCDIHR,
     *                 VROT,NNN,GAMA,IPAIR,
     *                 KLIST,LLIST,KBLST,MLIST,NLIST,
     *                 L1213J,L14J,
     *                 VEL,QMVEL,FCLJTP,NTYPE,
     *                 FFGRD0,FFGRD1,FFGRD2,
     *                 XTS,YTS,ZTS,CMAT1,
     *                 POT1,POT2,QRXN1,QRXN2,NTS,
     *                 LISTQM,NONLS1,NONLSTQ,MAPLST,CMAPCO,
     *                 LSTCELL,NONLS2,CORDSV2,CORDSVQ,
     *                 MVFASTS2,MVFASTS3,MVFASTS4,
     *                 MVFASTL2,MVFASTL3,MVFASTL4,
     *                 AFIX,QFIX,
     *                 RFIX,IDATOM,DAI,IDDAI,
     *                 VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                 NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                 KFREEA,KFREEB,LISTB2A,CHARGB,
     *                 SIGB,EPSB,SIG2B,EPS2B,
     *                 OLDCORD,LSTRAT,DSTRAT,
     *                 CORDMN,CORDM1,NONLSPMA,
     *                 L1213PMA,L14PMA,CORDB,
     *                 LSBONDPMA,LSANGLPMA,
     *                 LSDIHRPMA,LSDIHBPMA,
     *                 LSWAGGPMA,LSCMAPPMA,
     *                 NONLSPMB,L1213PMB,L14PMB,
     *                 LSBONDPMB,LSANGLPMB,
     *                 LSDIHRPMB,LSDIHBPMB,
     *                 LSWAGGPMB,LSCMAPPMB,
     *                 UMBHIS,UM2HIS,MERGE,INTLST,
     *                 VELSV,
     *                 DIPIMG,QADIMG,OCTIMG,
     *                 DIPIMB,QADIMB,OCTIMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL TRIPLET,SG1T,TAMMD,TPA,ALPHKWD,BETAKWD
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL MPTEST
C
      PARAMETER (MXATM=2000, MXAO=8192, MXRT=100)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (PT5=0.5D+00, TWOTHIRD=2.0D+00/3.0D+00,
     *           ONETHIRD=1.0D+00/3.0D+00, ONESIX=1.0D+00/6.0D+00,
     *           FIVESIX=5.0D+00/6.0D+00,ZERO=0.0D+00,ONE=1.0D+00)
C
      CHARACTER*10  ATMNAM
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          ZMAS(NFFAT),ONEMAS(NFFAT),QMZMAS(*),QM1MAS(*),
     *          CHARG(NFFAT),POL(NFFAT),DIP(3,NFFAT),
     *          FIELD1(3,NFFAT),FIELD2(3,NFFAT),FIELD3(3,NFFAT),
     *          SIG(NFFAT),EPS(NFFAT),SIG2(NFFAT),EPS2(NFFAT),
     *          BOND0(NBOND),FCBOND(NBOND),
     *          ANGL0(NANGL),FCANGL(NANGL),
     *          FCWAGG(NWAGG),DIHB0(NDIHB),FCDIHB(NDIHB),FCDIHR(3,*),
     *          VROT(NDIHR),NNN(NDIHR),GAMA(NDIHR),IPAIR(2,NBOND),
     *          KLIST(3,NANGL),
     *          LLIST(4,NDIHR),MLIST(4,NWAGG),
     *          L1213J(2,*),L14J(2,NDIHR),
     *          VEL(3,NFFAT),QMVEL(3,*),NTYPE(*),
     *          FFGRD0(3,NFFAT),FFGRD1(3,NFFAT),FFGRD2(3,NFFAT),
     *          LISTQM(*),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),CMAT1(NTS,NTS),
     *          POT1(NTS),POT2(NTS),QRXN1(NTS),QRXN2(NTS),NONLS1(2,*),
     *          NONLSTQ(*),MAPLST(6,*),CMAPCO(4,4,24,24,3),
     *          CRDIMG(3,*),CRDIMB(3,*),CHGIMB(*),
     *          CORDMN(3,MEANSIZ,*),CHGIMG(*),LISTB2A(*),CORDB(3,*),
     *          MERGE(MEANSIZ/MFMERGE,*),INTLST(*),
     *          DIPIMG(3,*),QADIMG(6,*),OCTIMG(10,*),VELSV(3,*),
     *          DIPIMB(3,*),QADIMB(6,*),OCTIMB(10,*),OLDCORD(3,*)
      DIMENSION TIMSTR(3)
      DIMENSION ENALL(100),FIXQM(3,400)
C
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFEWLD/ SPLIT,IEWALD,KEWALD,NKVEC,
     *                L1KVEC,L2KVEC,LFFRKEXPEL,LFFRKVEC,
     *                LFFKVEC,LFFTCHCH,LFFCOSCH,LFFSINCH
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFFRE2/ N1FFAT,N1BOND,N1ANGL,N1DIHR,N1DIHB,N1CMAP,N1WAGG,
     *                N2FFAT,N2BOND,N2ANGL,N2DIHR,N2DIHB,N2CMAP,N2WAGG,
     *                LFF2ATMNAM,LFF2CORD,LFF2ZANF,LFF2ZMAS,
     *                LFF2ONEMAS,LFF2CHARG,LFF2POL,
     *                LFF2SIG,LFF2EPS,LFF2SIG2,LFF2EPS2,
     *                LFF2BOND0,LFF2FCBOND,LFF2ANGL0,LFF2FCANGL,
     *                LFF2FCWAGG,LFF2DIHB0,LFF2FCDIHB,
     *                LFF2VROT,LFF2NNN,LFF2GAMA,LFF2IPAIR,
     *                LFF2KLIST,LFF2LLIST,LFF2MLIST,LFF2NLIST,
     *                LFF2VEL,LFF2QMVEL,LFF2CLPR,LFF2ZLPR,
     *                LFF2NLPR,LFF2MAPLST,LFFKFREEA,LFFKFREEB,
     *                LFFLISTB2A,NTODOA,LFFNONLSA,NTODOB,LFFNONLSB,
     *                N1213A,LFFL1213A,N1213B,LFFL1213B,
     *                N14A,LFFL14A,N14B,LFFL14B,
     *                NTODOPMA,LFFNONLSPMA,NBONDPMA,LFFLSBONDPMA,
     *                NANGLPMA,LFFLSANGLPMA,NDIHRPMA,LFFLSDIHRPMA,
     *                NDIHBPMA,LFFLSDIHBPMA,NWAGGPMA,LFFLSWAGGPMA,
     *                NCMAPPMA,LFFLSCMAPPMA,
     *                N1213PMA,LFFL1213PMA,
     *                N14PMA,LFFL14PMA,
     *                NTODOPMB,LFFNONLSPMB,NBONDPMB,LFFLSBONDPMB,
     *                NANGLPMB,LFFLSANGLPMB,NDIHRPMB,LFFLSDIHRPMB,
     *                NDIHBPMB,LFFLSDIHBPMB,NWAGGPMB,LFFLSWAGGPMB,
     *                NCMAPPMB,LFFLSCMAPPMB,
     *                N1213PMB,LFFL1213PMB,
     *                N14PMB,LFFL14PMB
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFQMFE/ ETOTQA,EMP2QA,ESTATEQA,ETOTQB,EMP2QB,ESTATEQB,
     *                FRE1QMMM,FRE2QMMM,
     *                VIRA(3),VIRB(3),
     *                LFFFFGRDA,LFFFFGRDB,LFFQMGRDA,LFFQMGRDB,
     *                LFFCORDX,LFFCHARGX,LFFPOLX,LFFSIGX,LFFEPSX,
     *                LFFSIG2X,LFFEPS2X,LFFCLPRX,LFFZLPRX,LFFCHGIMX,
     *                LFFCRDIMX,LFFLISTAQM,LFFLISTBQM,NIMGPTX,
     *                LFFDIPIMX,LFFQADIMX,LFFOCTIMX
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /FFRMDF/ RDIST1,RDIST2,RINTRV,NRATM1,NRATM2,INTRSTP
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FFUMBR/ UMBFC,UMBR0,UMBSIZE,
     *                NUMBBIN,NUMBATM(6),NUMBTYP,LFFUMBHIS,
     *                UM2FC,UM2R0,UM2SIZE,
     *                NUM2BIN,NUM2ATM(6),NUM2TYP,LFFUM2HIS
      COMMON /FMCOM / XX(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,PFREQ(2),
     *                JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,ITDPRP,
     *                TRIPLET,SG1T,NONEQR,TAMMD,TPA,ALPHKWD,BETAKWD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE       /8HNONE    /
C
C     FENGCHAO CUI AND HUI LI, MAR 2012, LINCOLN
C     FENGCHAO CUI, HUI LI, JUN 2012 (ADD FREE ENERGY)
C     HUI LI, APR 17, 2013, ADD FIXSOL SURFACE CHARGE
C
      IF(NSTEP.LT.0) RETURN
C
      CALL SEQOPN(36,'TRAJECT','NEW',.FALSE.,'FORMATTED')
      CALL SEQOPN(37,'QMWAVE' ,'NEW',.FALSE.,'FORMATTED')
      CALL SEQOPN(38,'MDDIP'  ,'NEW',.FALSE.,'FORMATTED')
      ISTEP  =  0
      NPRINT = -5
      IF(IADDWAT.EQ.2 .AND. ISPHSOL.GT.0) RSPHSOL=RSPHSOL*1.0D+40
C
C     -- SAVE NFIXQM COORDINATE AND VELOCITY
C
      DO KFIX=1,NFIXQM
         DO III = 1, 3
            FIXQM(III,KFIX)     =     C(III,IFIXQM(KFIX))
            FIXQM(III,KFIX+200) = QMVEL(III,IFIXQM(KFIX))
         ENDDO
      ENDDO
C
C     -- CREATE MULTIPOLE POINTS FOR QM --
C        FIXSOL IS USED
C
      IF(MFQMCHG.EQ.10) THEN
         MFQMCHGSV  = MFQMCHG
         MFQMCHG    = -MFQMCHG
         NFFATSV    = NFFAT
         NFFAT      = 1
         CHARGSV    = CHARG(1)
         CHARG(1)   = ZERO 
         POLSV      = POL(1)
         POL(1)     = ZERO
         IDOPOLSV   = IDOPOL
         IDOPOL     = 0
         CORDXSV    = CORD(1,1)
         CORDYSV    = CORD(2,1)
         CORDZSV    = CORD(3,1)
         CORD(1,1)  = C(1,1)
         CORD(2,1)  = C(2,1)
         CORD(3,1)  = C(3,1) 
         ZANFSV     = ZANF(1)
         ZANF(1)    = ZAN(1) 
         IFIXSOLSV  = IFIXSOL
         IFIXSOL    = 1
         IWSAVE = IW
         IW = 37  ! PRINT TO QMWAVE
         IPSAVE = IP
         IP = 37  ! PUNCH TO QMWAVE
         CALL GRADX
         IW = IWSAVE
         IP = IPSAVE
         IF(MASWRK)THEN
            WRITE(IW,'(A,F20.10,A,A,I8)')
     *      ' FIXSOL TOTAL SURFACE AREA =',FIXA,' A**2,',
     *      ' NFFTS=',NFFTS
            WRITE(IW,'(A,I3,A,F11.6)')
     *      ' FIXSOL CONVERGED IN ',NCYCLE,
     *      ' ITERATIONS, TOTAL SURFACE CHARGE=',FIXQ
         END IF
         CALL QMDENMUL(NIMGPT,CRDIMG,CHGIMG,DIPIMG,QADIMG,OCTIMG)
         IF(IFEPTOP.EQ.1.AND.MATOMB.GT.0) THEN
            CALL DCOPY(3*MATOMA,C,1,XX(LFFCX),1)
            CALL SETQMAB(2)
            IWSAVE = IW
            IW = 37  ! PRINT TO QMWAVE
            IPSAVE = IP
            IP = 37  ! PUNCH TO QMWAVE
            CALL GRADX
            IW = IWSAVE
            IP = IPSAVE
            IF(MASWRK)THEN
               WRITE(IW,'(A,F20.10,A,A,I8)')
     *         ' FIXSOL TOTAL SURFACE AREA =',FIXA,' A**2,',
     *         ' NFFTS=',NFFTS
               WRITE(IW,'(A,I3,A,F11.6)')
     *         ' FIXSOL CONVERGED IN ',NCYCLE,
     *         ' ITERATIONS, TOTAL SURFACE CHARGE=',FIXQ
            END IF
            CALL QMDENMUL(NIMBPT,CRDIMB,CHGIMB,DIPIMB,QADIMB,OCTIMB)
            CALL SETQMAB(1)
         END IF
         NFFAT      = NFFATSV
         CHARG(1)   = CHARGSV
         POL(1)     = POLSV
         IDOPOL     = IDOPOLSV
         CORD(1,1)  = CORDXSV
         CORD(2,1)  = CORDYSV
         CORD(3,1)  = CORDZSV
         ZANF(1)    = ZANFSV
         IFIXSOL    = IFIXSOLSV
         MFQMCHG    = MFQMCHGSV
         ENFIXSO    = ZERO
      END IF
C
C     -- READY TO TAKE OFF ?
C
      MDSTEP   = -1
      MDSTEPQM =  0
      DO ISTEPQM = 1, NSTEP/MEANFLD
         MDSTEPQM = MDSTEPQM + 1
C
C        -- MM MD --
C
         MNSTEP    =    0
         JSTART    =    1
         ENIMGCHMN = ZERO
         IF(MDSTEPQM.EQ.1) MNSTEP = -1
         IF(MDSTEPQM.EQ.1) JSTART =  0
         DO ISTEP=JSTART, MEANFLD
            MDSTEP = MDSTEP + 1
            MNSTEP = MNSTEP + 1
C
C           - DETERMINE MERGE
            ISEG   = (MNSTEP-1)/MFMERGE + 1
            IF(MNSTEP.EQ.(ISEG-1)*MFMERGE+1) THEN
               DO III = L1FFAT, L2FFAT
                  KK=III-L1FFAT+1
                  IFFAT = INTLST(III)
                  XGRP  = CORD(1,IFFAT) - QMCX
                  YGRP  = CORD(2,IFFAT) - QMCY
                  ZGRP  = CORD(3,IFFAT) - QMCZ
                  PBCX  = XBOX * ANINT(XGRP*ONEXBOX)
                  PBCY  = YBOX * ANINT(YGRP*ONEYBOX)
                  PBCZ  = ZBOX * ANINT(ZGRP*ONEZBOX)
                  XGRP  = XGRP - PBCX
                  YGRP  = YGRP - PBCY
                  ZGRP  = ZGRP - PBCZ
                  R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
                  MERGE(ISEG,KK) = MFMERGE
                  IF(R2.LT.SWRAQ2)MERGE(ISEG,KK)=MIN(10,MFMERGE)
               ENDDO
            END IF
C
            IF(MDSTEP.EQ.100.AND.IADDWAT.EQ.2 .AND. ISPHSOL.GT.0)
     *      RSPHSOL = RSPHSOL*1.0D-40
            IF(MDSTEP.LE.1) CALL VCLR(UMBHIS,1,NUMBBIN)
            IF(MDSTEP.LE.1) CALL VCLR(UM2HIS,1,NUM2BIN*NUMBBIN)
C
            IF(MDSTEP.EQ.0) GOTO 51
C
            CALL DCOPY(3*NFFAT,CORD,1,OLDCORD,1)
C
C           -- CALCULATE X(T+DT)
            IF(INTALG.EQ.1) THEN
               IF(MDSTEP.EQ.1) CALL DCOPY(3*NFFAT,FFGRD1,1,FFGRD0,1)
               DO IFFAT = 1, NFFAT
                  DUM  = ONEMAS(IFFAT)*DT2
                  DO III = 1, 3
                     CHANGE = +VEL(III,IFFAT)*DT
     *                     -TWOTHIRD*FFGRD1(III,IFFAT)*DUM
     *                     +ONESIX*FFGRD0(III,IFFAT)*DUM
                     CORD(III,IFFAT)=CORD(III,IFFAT) + CHANGE
                  ENDDO
               ENDDO
            END IF
            IF(INTALG.EQ.2) THEN
               DO IFFAT = 1, NFFAT
                  DUM  = PT5*ONEMAS(IFFAT)*DT2
                  DO III = 1, 3
                     CHANGE = +VEL(III,IFFAT)*DT
     *                     -FFGRD1(III,IFFAT)*DUM
                     CORD(III,IFFAT)=CORD(III,IFFAT) + CHANGE
                  ENDDO
               ENDDO
            END IF
            IF(NACTMM.GT.0) THEN
               DO KOPT = 1, NACTMM
                  IFFAT = LACTMM(KOPT)
                  IF(IFFAT.GT.0) THEN
                     CORD(1,IFFAT)=(CORD(1,IFFAT)+3.1416D+00)*1.0D-40
                     CORD(2,IFFAT)=(CORD(2,IFFAT)+2.7183D+00)*1.0D-40
                     CORD(3,IFFAT)=(CORD(3,IFFAT)+1.4427D+00)*1.0D-40
                  END IF
               ENDDO
               DO IFFAT = 1, NFFAT
                  IF(ABS(CORD(1,IFFAT))+ABS(CORD(2,IFFAT))
     *              +ABS(CORD(3,IFFAT)).LT.1.0D-20) THEN
                     CORD(1,IFFAT) = CORD(1,IFFAT)*1.0D+40 - 3.1416D+00
                     CORD(2,IFFAT) = CORD(2,IFFAT)*1.0D+40 - 2.7183D+00
                     CORD(3,IFFAT) = CORD(3,IFFAT)*1.0D+40 - 1.4427D+00
                  ELSE
                     DO III = 1, 3
                        CORD(III,IFFAT) = OLDCORD(III,IFFAT)
                     ENDDO
                  END IF
               ENDDO
            END IF
            DO KFIX=1,NFIXMM
               DO III = 1, 3
                  CORD(III,IFIXMM(KFIX)) = OLDCORD(III,IFIXMM(KFIX))
               ENDDO
            ENDDO
C           -- MUST ENFORCE QM COORDINATES --
C              (QM ATOMS DO NOT MOVE)
            IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
               DO IFFAT = 1, NFFAT
                  KAT = LISTQM(IFFAT)
                  IF(KAT.GT.0) THEN
                     CORD(1,IFFAT) = C(1,KAT)
                     CORD(2,IFFAT) = C(2,KAT)
                     CORD(3,IFFAT) = C(3,KAT)
                  END IF
               ENDDO
            END IF
C
            CALL VCLR(VIRRAT,1,3)
            IF(NRATTLE.GT.0) THEN
               IF(NACTMM.GT.0) THEN
                  DO IFFAT = 1, NFFAT
                     ONEMAS(IFFAT) = 0.0D+00
                  ENDDO
                  DO KOPT = 1, NACTMM
                     IFFAT = LACTMM(KOPT)
                     IF(IFFAT.GT.0) ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
                  ENDDO
               END IF
C              - QM ATOMS DO NOT MOVE, SO MAKE THE MASS INFINITE
               IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
                  DO IFFAT = 1, NFFAT
                     KAT = LISTQM(IFFAT)
                     IF(KAT.GT.0) ONEMAS(IFFAT) = ZERO
                  ENDDO
               END IF
C              - FIXED ATOMS DO NOT MOVE, SO MAKE THE MASS INFINITE
               DO KFIX = 1, NFIXMM
                  KFFAT = IFIXMM(KFIX)
                  IF(KFFAT.GT.0) ONEMAS(KFFAT) = 0.0D+00
               ENDDO
               CALL RATTLE1(CORD,OLDCORD,VEL,DSTRAT,ONEMAS,
     *                      LSTRAT,MDSTEP)
               DO KFIX = 1, NFIXMM
                  KFFAT = IFIXMM(KFIX)
                  IF(KFFAT.GT.0) ONEMAS(KFFAT) = 1.0D+00/ZMAS(KFFAT)
               ENDDO
               IF(NACTMM.GT.0) THEN
                  DO IFFAT = 1, NFFAT
                     ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
                  ENDDO
               END IF
C              - RESTORE NORMAL MASS
               IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
                  DO IFFAT = 1, NFFAT
                     KAT = LISTQM(IFFAT)
                     IF(KAT.GT.0) ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
                  ENDDO
               END IF
            END IF
C
            IF(NRATM1.GT.0) THEN
               CALL IRMDF1(CORD,OLDCORD,VEL,ONEMAS,MDSTEP,
     *                     RMDFCE)
            END IF
C
C           -- STORE THE MID-POINT MM COORDINATES
C              (TO BE USED FOR QM/<MM> INDUCED DIPOLE)
            IF(MNSTEP.EQ.(MEANFLD+1)/2)
     *      CALL DCOPY(3*NFFAT,CORD,1,CORDM1,1)
C
C           -- STORE MEANFLD SETS OF MM COORDINATES
            DO III=L1FFAT,L2FFAT
               KK = III-L1FFAT+1
               IFFAT=INTLST(III)
               CORDMN(1,MNSTEP,KK) = CORD(1,IFFAT)
               CORDMN(2,MNSTEP,KK) = CORD(2,IFFAT)
               CORDMN(3,MNSTEP,KK) = CORD(3,IFFAT)
            ENDDO
C
  51        CONTINUE
C
C           -- CALCULATE ENERGY AND GRADIENT AT X(T+DT)
            CALL NONBOND(MDSTEP,CORD,CORDSV,CORDSV2,CORDSVQ,
     *                   NONLS1,NONLS2,
     *                   NONLSTQ,LSTCELL,
     *                   MVFASTS2,MVFASTS3,MVFASTS4,
     *                   MVFASTL2,MVFASTL3,MVFASTL4,
     *                   NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                   NONLSPMA,NONLSPMB)
            CALL VCLR(FFGRD2,1,3*NFFAT)
            CALL VCLR(VIR,1,3)
            CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR,CORDB,
     *                  LSBONDPMA,LSBONDPMB)
            CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST,CORDB,
     *                  LSANGLPMA,LSANGLPMB)
            CALL E12312(CORD,FFGRD2,ANGL0,KLIST,BOND0,FCSTBD,
     *                  KBLST,CORDB,LSANGLPMA,LSANGLPMB)
            CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST,CORDB,
     *                  LSDIHBPMA,LSDIHBPMB)
            CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST,CORDB,
     *                  LSWAGGPMA,LSWAGGPMB)
            CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST,CORDB,
     *                  LSDIHRPMA,LSDIHRPMB,FCDIHR)
            CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO,CORDB,
     *                  LSCMAPPMA,LSCMAPPMB)
            CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLS1,
     *                  L1213J,SIGB,EPSB,SIG2B,EPS2B,
     *                  NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                  NONLSPMA,L1213PMA,L14PMA,CORDB,
     *                  NONLSPMB,L1213PMB,L14PMB,FCLJTP,NTYPE)
            CALL ESPHER(CORD,FFGRD2)
            CALL ECHARG(CORD,FFGRD2,CHARG,NONLS1,L1213J,L14J,
     *                  CHARGB,NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                  NONLSPMA,L1213PMA,L14PMA,CORDB,
     *                  NONLSPMB,L1213PMB,L14PMB)
            CALL UMBRELLA(CORD,FFGRD2,UMBHIS,UM2HIS)
            CALL QMMMIMGCHG(CORD,FFGRD2,CHARG,NONLSTQ,CRDIMG,CHGIMG,
     *                      CRDIMB,CHGIMB,DIPIMG,QADIMG,OCTIMG,
     *                      DIPIMB,QADIMB,OCTIMB)
            IF(IFIXSOL.EQ.0) THEN
               CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                     CMAT1,POT1,QRXN1,NTS)
               CALL POLRXN(CORD,FFGRD2,CHARG,POL,POLSV,DIP,
     *                     FIELD1,FIELD2,FIELD3,
     *                     XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *                     NONLS1,L1213J)
            END IF
            IF(IFIXSOL.EQ.1) THEN
               CALL FIXSOL(CORD,FFGRD2,CHARG,ZANF,AFIX,QFIX,
     *                     VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                     RFIX,IDATOM,DAI,IDDAI,
     *                     POL,POLSV,DIP,FIELD1,FIELD2,FIELD3,
     *                     NONLS1,L1213J)
            END IF
            IF(GOPARR) THEN
               ENALL( 1) = EN12
               ENALL( 2) = EN123
               ENALL( 3) = EN123R4
               ENALL( 4) = EN123B4
               ENALL( 5) = EN234W1
               ENALL( 6) = ENCHAR
               ENALL( 7) = ENLJR
               ENALL( 8) = ENLJD
               ENALL( 9) = VIR(1)
               ENALL(10) = VIR(2)
               ENALL(11) = VIR(3)
               ENALL(12) = ENUCCH
               ENALL(13) = ENRXN
               ENALL(14) = ENRXNR
C              ENALL(15) = ENCENT
               ENALL(16) = ENCMAP
               ENALL(17) = ENIMGCH
               ENALL(18) = SOL1CH
               ENALL(19) = SOL1LJ
               ENALL(20) = SOL1IM
               ENALL(21) = SOL2CH
               ENALL(22) = SOL2LJ
               ENALL(23) = SOL2IM
               ENALL(33) = PMF1BD
               ENALL(34) = PMF1AG
               ENALL(35) = PMF1DR
               ENALL(36) = PMF1DB
               ENALL(37) = PMF1WG
               ENALL(38) = PMF1CM
               ENALL(39) = PMF1CH
               ENALL(40) = PMF1LJ
               ENALL(41) = ENBIAS
               ENALL(42) = EN12312
               CALL DDI_GSUMF(2410,ENALL  ,42)
               CALL DDI_GSUMF(2411,FFGRD2,3*NFFAT)
               EN12      = ENALL( 1)
               EN123     = ENALL( 2)
               EN123R4   = ENALL( 3)
               EN123B4   = ENALL( 4)
               EN234W1   = ENALL( 5)
               ENCHAR    = ENALL( 6)
               ENLJR     = ENALL( 7)
               ENLJD     = ENALL( 8)
               VIR(1)    = ENALL( 9)
               VIR(2)    = ENALL(10)
               VIR(3)    = ENALL(11)
               ENUCCH    = ENALL(12)
               ENRXN     = ENALL(13)
               ENRXNR    = ENALL(14)
C              ENCENT    = ENALL(15)
               ENCMAP    = ENALL(16)
               ENIMGCH   = ENALL(17)
               SOL1CH    = ENALL(18)
               SOL1LJ    = ENALL(19)
               SOL1IM    = ENALL(20)
               SOL2CH    = ENALL(21)
               SOL2LJ    = ENALL(22)
               SOL2IM    = ENALL(23)
               PMF1BD    = ENALL(33)
               PMF1AG    = ENALL(34)
               PMF1DR    = ENALL(35)
               PMF1DB    = ENALL(36)
               PMF1WG    = ENALL(37)
               PMF1CM    = ENALL(38)
               PMF1CH    = ENALL(39)
               PMF1LJ    = ENALL(40)
               ENBIAS    = ENALL(41)
               EN12312   = ENALL(42)
            END IF
C
            IF(IFEPTOP.EQ.1.AND.(IDOPOL.GT.0.OR.IEWALD.GT.0)) THEN
               CALL SAVEABPROP(1)
               CALL SAVEFFDATA
               CALL SETFFDATAB(2)
               CALL VCLR(FFGRD2,1,3*NFFAT)
               CALL VCLR(VIR,1,3)
               CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR,CORDB,
     *                     LSBONDPMA,LSBONDPMB)
               CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST,CORDB,
     *                     LSANGLPMA,LSANGLPMB)
               CALL E12312(CORD,FFGRD2,ANGL0,KLIST,BOND0,FCSTBD,
     *                     KBLST,CORDB,LSANGLPMA,LSANGLPMB)
               CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST,CORDB,
     *                     LSDIHBPMA,LSDIHBPMB)
               CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST,CORDB,
     *                     LSWAGGPMA,LSWAGGPMB)
               CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST,CORDB,
     *                     LSDIHRPMA,LSDIHRPMB,FCDIHR)
               CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO,CORDB,
     *                     LSCMAPPMA,LSCMAPPMB)
               CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLS1,
     *                     L1213J,SIGB,EPSB,SIG2B,EPS2B,
     *                     NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                     NONLSPMA,L1213PMA,L14PMA,CORDB,
     *                     NONLSPMB,L1213PMB,L14PMB,FCLJTP,NTYPE)
               CALL ESPHER(CORD,FFGRD2)
               CALL ECHARG(CORD,FFGRD2,CHARG,NONLS1,L1213J,L14J,
     *                     CHARGB,NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                     NONLSPMA,L1213PMA,L14PMA,CORDB,
     *                     NONLSPMB,L1213PMB,L14PMB)
               CALL UMBRELLA(CORD,FFGRD2,UMBHIS,UM2HIS)
               CALL QMMMIMGCHG(CORD,FFGRD2,CHARG,NONLSTQ,CRDIMG,CHGIMG,
     *                         CRDIMB,CHGIMB,DIPIMG,QADIMG,OCTIMG,
     *                         DIPIMB,QADIMB,OCTIMB)
               IF(IFIXSOL.EQ.0) THEN
                  CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                        CMAT1,POT1,QRXN1,NTS)
                  CALL POLRXN(CORD,FFGRD2,CHARG,POL,POLSV,DIP,
     *                        FIELD1,FIELD2,FIELD3,
     *                        XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,
     *                        NTS,NONLS1,L1213J)
               END IF
               IF(IFIXSOL.EQ.1) THEN
                  CALL FIXSOL(CORD,FFGRD2,CHARG,ZANF,AFIX,QFIX,
     *                        VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                        RFIX,IDATOM,DAI,IDDAI,
     *                        POL,POLSV,DIP,FIELD1,FIELD2,FIELD3,
     *                        NONLS1,L1213J)
               END IF
               IF(GOPARR) THEN
                  ENALL( 1) = EN12
                  ENALL( 2) = EN123
                  ENALL( 3) = EN123R4
                  ENALL( 4) = EN123B4
                  ENALL( 5) = EN234W1
                  ENALL( 6) = ENCHAR
                  ENALL( 7) = ENLJR
                  ENALL( 8) = ENLJD
                  ENALL( 9) = VIR(1)
                  ENALL(10) = VIR(2)
                  ENALL(11) = VIR(3)
                  ENALL(12) = ENUCCH
                  ENALL(13) = ENRXN
                  ENALL(14) = ENRXNR
C                 ENALL(15) = ENCENT
                  ENALL(16) = ENCMAP
                  ENALL(17) = ENIMGCH
                  ENALL(18) = SOL1CH
                  ENALL(19) = SOL1LJ
                  ENALL(20) = SOL1IM
                  ENALL(21) = SOL2CH
                  ENALL(22) = SOL2LJ
                  ENALL(23) = SOL2IM
                  ENALL(33) = PMF1BD
                  ENALL(34) = PMF1AG
                  ENALL(35) = PMF1DR
                  ENALL(36) = PMF1DB
                  ENALL(37) = PMF1WG
                  ENALL(38) = PMF1CM
                  ENALL(39) = PMF1CH
                  ENALL(40) = PMF1LJ
                  ENALL(41) = ENBIAS
                  ENALL(42) = EN12312
                  CALL DDI_GSUMF(2410,ENALL  ,42)
                  CALL DDI_GSUMF(2411,FFGRD2,3*NFFAT)
                  EN12      = ENALL( 1)
                  EN123     = ENALL( 2)
                  EN123R4   = ENALL( 3)
                  EN123B4   = ENALL( 4)
                  EN234W1   = ENALL( 5)
                  ENCHAR    = ENALL( 6)
                  ENLJR     = ENALL( 7)
                  ENLJD     = ENALL( 8)
                  VIR(1)    = ENALL( 9)
                  VIR(2)    = ENALL(10)
                  VIR(3)    = ENALL(11)
                  ENUCCH    = ENALL(12)
                  ENRXN     = ENALL(13)
                  ENRXNR    = ENALL(14)
C                 ENCENT    = ENALL(15)
                  ENCMAP    = ENALL(16)
                  ENIMGCH   = ENALL(17)
                  SOL1CH    = ENALL(18)
                  SOL1LJ    = ENALL(19)
                  SOL1IM    = ENALL(20)
                  SOL2CH    = ENALL(21)
                  SOL2LJ    = ENALL(22)
                  SOL2IM    = ENALL(23)
                  PMF1BD    = ENALL(33)
                  PMF1AG    = ENALL(34)
                  PMF1DR    = ENALL(35)
                  PMF1DB    = ENALL(36)
                  PMF1WG    = ENALL(37)
                  PMF1CM    = ENALL(38)
                  PMF1CH    = ENALL(39)
                  PMF1LJ    = ENALL(40)
                  ENBIAS    = ENALL(41)
                  EN12312   = ENALL(42)
               END IF
               CALL SAVEABPROP(2)
               CALL SETFFDATAB(1)
               CALL MIXABPROP
            ELSE IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
               CALL SAVEFFDATA
               CALL SETFFDATAB(2)
               CALL SETFFDATAB(1)
            END IF
C
            IF(MDSTEP.EQ.0) THEN
               CALL DCOPY(3*NFFAT,FFGRD2,1,FFGRD1,1)
               GOTO 52
            END IF
C
            ENIMGCHMN = ENIMGCHMN + ENIMGCH
C
C           - FIXED ATOMS DO NOT MOVE, SO MAKE THE MASS INFINITE
            IF(NACTMM.GT.0) THEN
               DO IFFAT = 1, NFFAT
                  ONEMAS(IFFAT) = 0.0D+00
               ENDDO
               DO KOPT = 1, NACTMM
                  IFFAT = LACTMM(KOPT)
                  IF(IFFAT.GT.0) ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
               ENDDO
            END IF
C           - QM ATOMS DO NOT MOVE, SO MAKE THE MASS INFINITE
            IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
               DO IFFAT = 1, NFFAT
                  KAT = LISTQM(IFFAT)
                  IF(KAT.GT.0) ONEMAS(IFFAT) = ZERO
               ENDDO
            END IF
            DO KFIX = 1, NFIXMM
               KFFAT = IFIXMM(KFIX)
               IF(KFFAT.GT.0) ONEMAS(KFFAT) = 0.0D+00
            ENDDO
C
C           -- CALCULATE V(T+DT)
            IF(INTALG.EQ.1) THEN
               IF(MDSTEP.EQ.1)THEN
                  DO IFFAT = 1, NFFAT
                     DUM  = ONEMAS(IFFAT)*DT
                     DO III = 1, 3
                        VEL(III,IFFAT)=VEL(III,IFFAT)
     *                               -PT5*(FFGRD1(III,IFFAT)
     *                                    +FFGRD2(III,IFFAT))*DUM
                        FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
                     ENDDO
                  ENDDO
               ELSE
                  DO IFFAT = 1, NFFAT
                     DUM  = ONEMAS(IFFAT)*DT
                     DO III = 1, 3
                        VEL(III,IFFAT)=VEL(III,IFFAT)
     *                               -(ONETHIRD*FFGRD2(III,IFFAT)
     *                                 +FIVESIX*FFGRD1(III,IFFAT)
     *                                  -ONESIX*FFGRD0(III,IFFAT))*DUM
                        FFGRD0(III,IFFAT)=FFGRD1(III,IFFAT)
                        FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
                     ENDDO
                  ENDDO
               END IF
            END IF
            IF(INTALG.EQ.2) THEN
               DO IFFAT = 1, NFFAT
                  DUM  = ONEMAS(IFFAT)*DT
                  DO III = 1, 3
                     VEL(III,IFFAT)=VEL(III,IFFAT)
     *                            -PT5*(FFGRD1(III,IFFAT)
     *                                 +FFGRD2(III,IFFAT))*DUM
                     FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
                  ENDDO
               ENDDO
            END IF
C           -- MUST ENFORCE QM VELOCITY --
C              (QM ATOMS DO NOT CHANGE VELOCITY)
            IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
               DO IFFAT = 1, NFFAT
                  KAT = LISTQM(IFFAT)
                  IF(KAT.GT.0) THEN
                     VEL(1,IFFAT) = QMVEL(1,KAT)
                     VEL(2,IFFAT) = QMVEL(2,KAT)
                     VEL(3,IFFAT) = QMVEL(3,KAT)
                  END IF
               ENDDO
            END IF
C
            IF(NRATTLE.GT.0) THEN
               CALL RATTLE2a(CORD,VEL,DSTRAT,ONEMAS,LSTRAT,MDSTEP)
            END IF
C
            IF(NRATM1.GT.0) THEN
               CALL IRMDF2(CORD,VEL,ONEMAS,MDSTEP)
            END IF
C

            DO KFIX = 1, NFIXMM
               KFFAT = IFIXMM(KFIX)
               IF(KFFAT.GT.0) ONEMAS(KFFAT) = 1.0D+00/ZMAS(KFFAT)
            ENDDO
            IF(NACTMM.GT.0) THEN
               DO IFFAT = 1, NFFAT
                  ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
               ENDDO
            END IF
C           - RESTORE NORMAL MASS
            IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
               DO IFFAT = 1, NFFAT
                  KAT = LISTQM(IFFAT)
                  IF(KAT.GT.0) ONEMAS(IFFAT) = 1.0D+00/ZMAS(IFFAT)
               ENDDO
            END IF
C
C           -- SYNCHRONIZE CORD AND VEL EVERY 200 STEPS --
            IF(GOPARR.AND.MOD(ISTEP,200).EQ.0) THEN
               CALL DDI_BCAST(461,'F',C,3*NAT,MASTER)
               CALL DDI_BCAST(462,'F',CORD,3*NFFAT,MASTER)
               CALL DDI_BCAST(463,'F',QMVEL,3*NAT,MASTER)
               CALL DDI_BCAST(464,'F',VEL,3*NFFAT,MASTER)
            END IF
C
  52        CONTINUE
C
C           -- CALCULATE PROPERTIES --
            CALL MDPROP(CORD,VEL,QMVEL,ZMAS,QMZMAS,MDSTEP,
     *                  MNSTEP,LISTQM,TEMP,PRES,UMBHIS,UM2HIS,
     *                  PRESX,PRESY,PRESZ)
C
            CALL TMDATE(TIMSTR)
            IF(MOD(MDSTEP,KOUT).EQ.0) CALL TIMIT(1)
            IF(MOD(MDSTEP,KOUT).NE.0) GOTO 200
C
            IF(.NOT.MASWRK) GOTO 200
C
C           -- PRINT OUT PBC COORDINATES --
C              ONLY WHEN PBC AND KOUTPBC APPLIES
C
            IF(KOUTPBC.EQ.1.AND.MIN(XBOX,YBOX,ZBOX).LT.1.0D+30) THEN
               WRITE(36,*)'==== PBC MASTER BOX ===='
               WRITE(36,*)'$PBCDATA'
               WRITE(36,'(A,3(F8.3,1X),A,I3,A,I6)')
     *         ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *         'NEAR ATOM',LQMCT,' AT QM/<MM> MD STEP',MDSTEP
               WRITE(36,*)'C1'
               DO IAT = 1, NAT
                  CX    = C(1,IAT) - CENTX
                  CY    = C(2,IAT) - CENTY
                  CZ    = C(3,IAT) - CENTZ
                  PBCX  = XBOX*ANINT(CX*ONEXBOX)
                  PBCY  = YBOX*ANINT(CY*ONEYBOX)
                  PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                  CX    = CX - PBCX + CENTX
                  CY    = CY - PBCY + CENTY
                  CZ    = CZ - PBCZ + CENTZ
                  WRITE(36,999)ANAM(IAT),ZAN(IAT),
     *            CX*TOANGS,CY*TOANGS,CZ*TOANGS
               ENDDO
               IF(IFEPTOP.GT.0)THEN
                  DO IATB = 1, MATOMB
                     CX    = XX(LFFCX+3*(MATOMA+IATB-1)  ) - CENTX
                     CY    = XX(LFFCX+3*(MATOMA+IATB-1)+1) - CENTY
                     CZ    = XX(LFFCX+3*(MATOMA+IATB-1)+2) - CENTZ
                     PBCX  = XBOX*ANINT(CX*ONEXBOX)
                     PBCY  = YBOX*ANINT(CY*ONEYBOX)
                     PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                     CX    = CX - PBCX + CENTX
                     CY    = CY - PBCY + CENTY
                     CZ    = CZ - PBCZ + CENTZ
                     WRITE(36,999)ANAM(MATOMA+IATB),  ! ANAM IS THE ORIGINAL
     *               XX(LFFZANX +MATOMA+IATB-1),
     *               CX*TOANGS,CY*TOANGS,CZ*TOANGS
                  ENDDO
               END IF
               WRITE(36,*)'$END'
               WRITE(36,'(1X,A,I8,4X,A,F17.2,A)')
     *         '$PBCFFDATA    ! MEANFLD QM/<MM> MD STEP',MDSTEP,
     *         'TIME=',MDSTEP*DT*2.418884326505D-02,' FS'
               IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
                  WRITE(36,'(1X,A,I8,4X,A,F17.2,A)')
     *            '$PBCFFDATB    ! MEANFLD QM/<MM> MD STEP',MDSTEP,
     *            'TIME=',MDSTEP*DT*2.418884326505D-02,' FS'
               END IF
               WRITE(36,*)'COORDINATES  NUC                   X',
     *         '                   Y                   Z'
               DO IFFAT = 1, N1FFAT
                  CX    = CORD(1,IFFAT) - CENTX
                  CY    = CORD(2,IFFAT) - CENTY
                  CZ    = CORD(3,IFFAT) - CENTZ
                  PBCX  = XBOX*ANINT(CX*ONEXBOX)
                  PBCY  = YBOX*ANINT(CY*ONEYBOX)
                  PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                  CX    = CORD(1,IFFAT) - PBCX
                  CY    = CORD(2,IFFAT) - PBCY
                  CZ    = CORD(3,IFFAT) - PBCZ
                  WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                          CX*TOANGS,CY*TOANGS,CZ*TOANGS
               ENDDO
               WRITE(36,*)'STOP'
C
               IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
                  WRITE(36,'(1X,A,I8,4X,A,F17.2,A)')
     *            '$PBCFFDATB    ! MEANFLD QM/<MM> MD STEP',MDSTEP,
     *            'TIME=',MDSTEP*DT*2.418884326505D-02,' FS'
                  WRITE(36,*)'COORDINATES  NUC                   X',
     *            '                   Y                   Z'     
                  DO IFFAT = 1, N2FFAT
                     CX    = CORDB(1,IFFAT) - CENTX
                     CY    = CORDB(2,IFFAT) - CENTY
                     CZ    = CORDB(3,IFFAT) - CENTZ
                     PBCX  = XBOX*ANINT(CX*ONEXBOX)
                     PBCY  = YBOX*ANINT(CY*ONEYBOX)
                     PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                     CX    = CORDB(1,IFFAT) - PBCX
                     CY    = CORDB(2,IFFAT) - PBCY
                     CZ    = CORDB(3,IFFAT) - PBCZ
                     WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                             CX*TOANGS,CY*TOANGS,CZ*TOANGS
                  ENDDO
                  WRITE(36,*)'STOP'
               END IF
C
               IF(IFEPTOP.EQ.2) THEN
                  WRITE(36,'(1X,A,I8,4X,A,F17.2,A)')
     *            '$PBCFFDATB    ! MEANFLD QM/<MM> MD STEP',MDSTEP,
     *            'TIME=',MDSTEP*DT*2.418884326505D-02,' FS'
                  WRITE(36,*)'COORDINATES  NUC                   X',
     *            '                   Y                   Z'
                  DO JFFAT = 1, N2FFAT
                     IFFAT = LISTB2A(JFFAT)
                     CX    = CORD(1,IFFAT) - CENTX
                     CY    = CORD(2,IFFAT) - CENTY
                     CZ    = CORD(3,IFFAT) - CENTZ
                     PBCX  = XBOX*ANINT(CX*ONEXBOX)
                     PBCY  = YBOX*ANINT(CY*ONEYBOX)
                     PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                     CX    = CORD(1,IFFAT) - PBCX
                     CY    = CORD(2,IFFAT) - PBCY
                     CZ    = CORD(3,IFFAT) - PBCZ
                     WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                             CX*TOANGS,CY*TOANGS,CZ*TOANGS
                  ENDDO
                  WRITE(36,*)'STOP'
               END IF
C
            END IF
C
            WRITE(36,'(1X,A,I10,1X,A,F15.2,A)')
     *      'RESTART COORD + VEL FOR QUANPOL AT MD STEP',MDSTEP,
     *      'TIME=',MDSTEP*DT*2.418884326505D-02,' FS'
            IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30) THEN
              WRITE(36,'(A,3(A,F15.10,1X),/9X,3(A,F15.10,1X),A)')
     *        ' $QUANPO ',
     *        'CENTX=',CENTX*TOANGS,
     *        'CENTY=',CENTY*TOANGS,
     *        'CENTZ=',CENTZ*TOANGS,
     *        'XBOX=',XBOX*TOANGS,
     *        'YBOX=',YBOX*TOANGS,
     *        'ZBOX=',ZBOX*TOANGS,
     *        '$END'
            ELSE IF(SPHRAD.LT.1.0D+30) THEN
              WRITE(36,'(A,3(A,F15.10,1X),/9X,2(A,F15.10,1X),A)')
     *        ' $QUANPO ',
     *        'CENTX=',CENTX*TOANGS,
     *        'CENTY=',CENTY*TOANGS,
     *        'CENTZ=',CENTZ*TOANGS,
     *        'SPHRAD=',SPHRAD*TOANGS,
     *        'RSPHSOL=',RSPHSOL*TOANGS,
     *        '$END'
         ELSE
           WRITE(36,'(A,3(A,F15.10,1X),A)')
     *        ' $QUANPO ',
     *        'CENTX=',CENTX*TOANGS,
     *        'CENTY=',CENTY*TOANGS,
     *        'CENTZ=',CENTZ*TOANGS,
     *        '$END'
            END IF
C
            WRITE(36,*)'$DATA'
            WRITE(36,'(A,3(F8.3,1X),A,I3,A,I6)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,' AT QM/<MM> MD STEP',MDSTEP
            WRITE(36,*)'C1'
            DO IAT = 1, NAT
               WRITE(36,999)ANAM(IAT),ZAN(IAT),
     *         C(1,IAT)*TOANGS,
     *         C(2,IAT)*TOANGS,
     *         C(3,IAT)*TOANGS
            ENDDO
            IF(IFEPTOP.GT.0)THEN
               DO IATB = 1, MATOMB
                  WRITE(36,999)ANAM(MATOMA+IATB),  ! ANAM IS THE ORIGINAL
     *            XX(LFFZANX +MATOMA+IATB-1),
     *            XX(LFFCX+3*(MATOMA+IATB-1)  )*TOANGS,
     *            XX(LFFCX+3*(MATOMA+IATB-1)+1)*TOANGS,
     *            XX(LFFCX+3*(MATOMA+IATB-1)+2)*TOANGS
               ENDDO
            END IF
            WRITE(36,*)'$END'
            WRITE(36,'(1X,A,I8,4X,A,F17.2,A)')
     *      '$FFDATA       ! MEANFLD QM/<MM> MD STEP',MDSTEP,
     *      'TIME=',MDSTEP*DT*2.418884326505D-02,' FS'
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
               WRITE(36,'(1X,A,I8,4X,A,F17.2,A)')
     *         '$FFDATB       ! MEANFLD QM/<MM> MD STEP',MDSTEP,
     *         'TIME=',MDSTEP*DT*2.418884326505D-02,' FS'
            END IF
            WRITE(36,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, N1FFAT
               WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(36,*)'STOP'
            WRITE(36,*)'QMVELOCITY                    VX',
     *          '                    VY                    VZ'
            DO IAT = 1, NAT
               WRITE(36,1002) ANAM(IAT),
     *         QMVEL(1,IAT),QMVEL(2,IAT),QMVEL(3,IAT)
            ENDDO
            IF(IFEPTOP.GT.0)THEN
               DO IATB = 1, MATOMB
                  CALL GETIFFAT(XX(LFFLISTBQM),IATB,IATA)
                  WRITE(36,1002) ANAM(MATOMA+IATB),
     *            QMVEL(1,IATA),QMVEL(2,IATA),QMVEL(3,IATA)
               ENDDO
            END IF
            WRITE(36,*)'STOP'
            WRITE(36,*)'MMVELOCITY                    VX',
     *          '                    VY                    VZ'
            DO IFFAT = 1, N1FFAT
               WRITE(36,1001) ATMNAM(IFFAT),
     *         VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
            ENDDO
            WRITE(36,*)'STOP'
C
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
               WRITE(36,'(1X,A,I8,4X,A,F17.2,A)')
     *         '$FFDATB       ! MEANFLD QM/<MM> MD STEP',MDSTEP,
     *         'TIME=',MDSTEP*DT*2.418884326505D-02,' FS'
               WRITE(36,*)'COORDINATES  NUC                   X',
     *             '                   Y                   Z'
               DO IFFAT = 1, N2FFAT
                  WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *            CORDB(1,IFFAT)*TOANGS,
     *            CORDB(2,IFFAT)*TOANGS,
     *            CORDB(3,IFFAT)*TOANGS
               ENDDO
               WRITE(36,*)'STOP'
               WRITE(36,*)'QMVELOCITY                    VX',
     *             '                    VY                    VZ'
               DO IAT = 1, NAT
                  WRITE(36,1002) ANAM(IAT),
     *            QMVEL(1,IAT),QMVEL(2,IAT),QMVEL(3,IAT)
               ENDDO
C              IF(IFEPTOP.GT.0)THEN    ! ALWAYS DO THIS !
                  DO IATB = 1, MATOMB
                  CALL GETIFFAT(XX(LFFLISTBQM),IATB,IATA)
                     WRITE(36,1002) ANAM(MATOMA+IATB),
     *               QMVEL(1,IATA),QMVEL(2,IATA),QMVEL(3,IATA)
                  ENDDO
C              END IF
               WRITE(36,*)'STOP'
               WRITE(36,*)'MMVELOCITY                    VX',
     *             '                    VY                    VZ'
               DO IFFAT = 1, N2FFAT
                  WRITE(36,1001) ATMNAM(IFFAT),
     *            VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
               ENDDO
               WRITE(36,*)'STOP'
            END IF
C
            IF(IFEPTOP.EQ.2) THEN
               WRITE(36,'(1X,A,I8,4X,A,F17.2,A)')
     *         '$FFDATB       ! MEANFLD QM/<MM> MD STEP',MDSTEP,
     *         'TIME=',MDSTEP*DT*2.418884326505D-02,' FS'
               WRITE(36,*)'COORDINATES  NUC                   X',
     *             '                   Y                   Z'
               DO JFFAT = 1, N2FFAT
                  IFFAT = LISTB2A(JFFAT)
                  WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *            CORD(1,IFFAT)*TOANGS,
     *            CORD(2,IFFAT)*TOANGS,
     *            CORD(3,IFFAT)*TOANGS
               ENDDO
               WRITE(36,*)'STOP'
               WRITE(36,*)'QMVELOCITY                    VX',
     *             '                    VY                    VZ'
               DO IAT = 1, NAT
                  WRITE(36,1002) ANAM(IAT),
     *            QMVEL(1,IAT),QMVEL(2,IAT),QMVEL(3,IAT)
               ENDDO
C              IF(IFEPTOP.GT.0)THEN    ! ALWAYS DO THIS !
                  DO IATB = 1, MATOMB
                     CALL GETIFFAT(XX(LFFLISTBQM),IATB,IATA)
                     WRITE(36,1002) ANAM(MATOMA+IATB),
     *               QMVEL(1,IATA),QMVEL(2,IATA),QMVEL(3,IATA)
                  ENDDO
C              END IF
               WRITE(36,*)'STOP'
               WRITE(36,*)'MMVELOCITY                    VX',
     *             '                    VY                    VZ'
               DO JFFAT = 1, N2FFAT
                  IFFAT = LISTB2A(JFFAT)
                  WRITE(36,1001) ATMNAM(IFFAT),
     *            VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
               ENDDO
               WRITE(36,*)'STOP'
            END IF
C
            CALL FLSHBF(IW)
            CALL FLSHBF(36)
            CALL FLSHBF(37)
            CALL TIMIT(1)
 200        CONTINUE
C
C           -- SCALE VELOCITY AND VOLUME --
C              (WHEN CALLED HERE, QM COORDINATES/VEL ARE NOT SCALED)
            CALL DCOPY(3*NFFAT,CORD,1,OLDCORD,1)
            CALL DCOPY(3*NFFAT,VEL,1,VELSV,1)
            CALL TPSTAT(CORD,VEL,QMVEL,ZMAS,QMZMAS,ONEMAS,QM1MAS,
     *                  0,MDSTEP,LISTQM,TEMP,PRES,
     *                  PRESX,PRESY,PRESZ)
            IF(NACTMM.GT.0) THEN
               DO KOPT = 1, NACTMM
                  IFFAT = LACTMM(KOPT)
                  IF(IFFAT.GT.0) THEN
                     CORD(1,IFFAT)=(CORD(1,IFFAT)+3.1416D+00)*1.0D-40
                     CORD(2,IFFAT)=(CORD(2,IFFAT)+2.7183D+00)*1.0D-40
                     CORD(3,IFFAT)=(CORD(3,IFFAT)+1.4427D+00)*1.0D-40
                     VEL (1,IFFAT)=VEL(1,IFFAT) + 1.0D+00
                  END IF
               ENDDO
               DO IFFAT = 1, NFFAT
                  IF(ABS(CORD(1,IFFAT))+ABS(CORD(2,IFFAT))
     *              +ABS(CORD(3,IFFAT)).LT.1.0D-20) THEN
                     CORD(1,IFFAT) = CORD(1,IFFAT)*1.0D+40 - 3.1416D+00
                     CORD(2,IFFAT) = CORD(2,IFFAT)*1.0D+40 - 2.7183D+00
                     CORD(3,IFFAT) = CORD(3,IFFAT)*1.0D+40 - 1.4427D+00
                  ELSE
                     DO III = 1, 3
                        CORD(III,IFFAT) = OLDCORD(III,IFFAT)
                     ENDDO
                  END IF
                  IF(VEL(1,IFFAT).GT.0.5D+00) THEN
                     VEL(1,IFFAT) = VEL(1,IFFAT) - 1.0D+00
                  ELSE
                     DO III = 1, 3
                        VEL(III,IFFAT) = VELSV(III,IFFAT)
                     ENDDO
                  END IF
               ENDDO
            END IF
            DO KFIX=1,NFIXQM
               DO III = 1, 3
                  C(III,IFIXQM(KFIX))     = FIXQM(III,KFIX)
                  QMVEL(III,IFIXQM(KFIX)) = FIXQM(III,KFIX+200)
               ENDDO
            ENDDO
            DO KFIX=1,NFIXMM
               DO III = 1, 3
                  CORD(III,IFIXMM(KFIX)) = OLDCORD(III,IFIXMM(KFIX))
                  VEL(III,IFIXMM(KFIX))  = VELSV(III,IFIXMM(KFIX))
               ENDDO
            ENDDO
C
         ENDDO
C
         ENIMGCHMN = ENIMGCHMN*ONEMNFD
C
C        -- MERGE MM COORDINATES --
         IF(MFMERGE.GT.1) THEN
            NSEG = MEANFLD/MFMERGE
            DO III = L1FFAT, L2FFAT
               KK=III-L1FFAT+1
               DO ISEG = 1, NSEG
               IFMERGE = MERGE(ISEG,KK)
               ONEIFMERGE = ONE/IFMERGE
               DO IMFLD = (ISEG-1)*MFMERGE+1, ISEG*MFMERGE, IFMERGE
                  DO JMFLD = IMFLD+1, IMFLD+IFMERGE-1
                     DO I=1,3
                        CORDMN(I,IMFLD,KK) =
     *                  CORDMN(I,IMFLD,KK) + 
     *                  CORDMN(I,JMFLD,KK)
                     ENDDO
                  ENDDO
                  DO I=1,3
                     CORDMN(I,IMFLD,KK) =
     *               CORDMN(I,IMFLD,KK)*ONEIFMERGE
                  ENDDO
               ENDDO
               ENDDO
            ENDDO
         END IF
C
         IWSAVE = IW
         IF(MDSTEPQM.GT.1) IW = 37  ! PRINT TO QMWAVE
         IPSAVE = IP
         IP = 37  ! PUNCH TO QMWAVE
C
C        -- RUN A DIFFERENT QM CALCULATION
         IF(IDOQM2.EQ.1) THEN
            SCFTYPSV   = SCFTYP
            TDDFTSV    = TDDFTYP
            CITYPSV    = CITYP
            MPLEVLSV   = MPLEVL
            ICHARGSV   = ICH
            MULTSV     = MUL
            NESV       = NE
            NASV       = NA
            NBSV       = NB
            SCFTYP     = SCFTYP2
            TDDFTYP    = TDDFT2
            CITYP      = CITYP2
            MPLEVL     = MPLEVL2
            ICH        = ICHARG2
            MUL        = MULT2
            NE         = NESV - ICH + ICHARGSV
            NA         = (NE-1+MUL)/2
            NB         = (NE+1-MUL)/2
            IF(MPLEVL2.EQ.2) CALL MP2INP(MPTEST)
            IF(TDDFT2.NE.RNONE) CALL TDDINP
            CALL GRADX
                                 ENFFQM2 = ETOT
            IF(MPLEVL.EQ.2)      ENFFQM2 = EMP2
            IF(TDDFTYP.NE.RNONE) ENFFQM2 = ESTATE(NTHST)
            SCFTYP     = SCFTYPSV
            TDDFTYP    = TDDFTSV
            CITYP      = CITYPSV
            MPLEVL     = MPLEVLSV
            ICH        = ICHARGSV
            MUL        = MULTSV
            NE         = NESV
            NA         = NASV
            NB         = NBSV
         END IF
C
C        -- CALCULATE QM/<MM> ENERGY AND GRADIENT
C           (NO NEED TO UPDATE NEIGHBOR LISTS)
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL VCLR(VIR   ,1,3)
         CALL GRADX
         IF(IFEPTOP.EQ.1.AND.MATOMB.GT.0) THEN
            CALL SAVEABPROP(1)
            CALL DCOPY(3*MATOMA,C,1,XX(LFFCX),1)
            CALL SAVEFFDATA
            CALL SETQMAB(2)
            CALL SETFFDATAB(2)
            CALL VCLR(FFGRD2,1,3*NFFAT)
            CALL VCLR(VIR   ,1,3)
            CALL GRADX
            CALL SAVEABPROP(2)
            CALL SETQMAB(1)
            CALL SETFFDATAB(1)
            CALL MIXABPROP
         END IF
C
         IW = IWSAVE
         IP = IPSAVE
C
C        -- CALCULATE QM/<MM> PROPERTIES
         CALL MFLDPROP(QMVEL,QMZMAS,MDSTEPQM,POTX1QMMN,POTX2QMMN)
C
      ENDDO
C
  999 FORMAT(1X,A8,3X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1001 FORMAT(1X,A10,1X,F21.18,1X,F21.18,1X,F21.18)
 1002 FORMAT(1X,A8,3X,F21.18,1X,F21.18,1X,F21.18)
C
      CALL SEQCLO(36,'KEEP')
      CALL SEQCLO(37,'KEEP')
      CALL SEQCLO(38,'KEEP')
C
      RETURN
      END
C*MODULE QUANPO  *DECK MDPROP
!>    
!> @brief    MD properties
!>
!> @author   Nandun Thellamurege, Hui Li
!>           - Mar 2011
!>                    
!> @details  calculate and average MD properties
!>           pressure, volume, temperature ...
!>
      SUBROUTINE MDPROP(CORD,VEL,QMVEL,ZMAS,QMZMAS,ISTEP,
     *                  MNSTEP,LISTQM,TEMP,PRES,UMBHIS,UM2HIS,
     *                  PRESX,PRESY,PRESZ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL TRIPLET,SG1T,TAMMD,TPA,ALPHKWD,BETAKWD
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (TOKCAL=627.509469D+00)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (TOKELVIN=3.15774646D+05, BOLTZK=1.0D+00/TOKELVIN)
      PARAMETER (ZERO=0.0D+00, PT5=0.50D+00, ONE=1.0D+00)
      PARAMETER (FOURTHIRD=4.0D+00/3.0D+00)
      PARAMETER (ONETHIRD=1.0D+00/3.0D+00, TOBAR=2.942191219D+08)
      PARAMETER (MXATM=2000, MXRT=100)
C
      DIMENSION CORD(3,*),VEL(3,*),QMVEL(3,*),ZMAS(*),QMZMAS(*),
     *          LISTQM(*),UMBHIS(*),UM2HIS(NUM2BIN,*)
C
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /FFDFS / TIMDFS,NDFS,LFFDFSC,LFFDFSCAV,
     *                LFFDFSC0,LFFDFSA,LFFDFSN,KDFS
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFEWLD/ SPLIT,IEWALD,KEWALD,NKVEC,
     *                L1KVEC,L2KVEC,LFFRKEXPEL,LFFRKVEC,
     *                LFFKVEC,LFFTCHCH,LFFCOSCH,LFFSINCH
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFQMFE/ ETOTQA,EMP2QA,ESTATEQA,ETOTQB,EMP2QB,ESTATEQB,
     *                FRE1QMMM,FRE2QMMM,
     *                VIRA(3),VIRB(3),
     *                LFFFFGRDA,LFFFFGRDB,LFFQMGRDA,LFFQMGRDB,
     *                LFFCORDX,LFFCHARGX,LFFPOLX,LFFSIGX,LFFEPSX,
     *                LFFSIG2X,LFFEPS2X,LFFCLPRX,LFFZLPRX,LFFCHGIMX,
     *                LFFCRDIMX,LFFLISTAQM,LFFLISTBQM,NIMGPTX,
     *                LFFDIPIMX,LFFQADIMX,LFFOCTIMX
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2,
     *                NRDEN,NBINRDEN,LFFPRO,LFFNRDPRATM,
     *                LFFRDPRATM,LFFDIESTEP,LFFDI1STEP
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FFUMBR/ UMBFC,UMBR0,UMBSIZE,
     *                NUMBBIN,NUMBATM(6),NUMBTYP,LFFUMBHIS,
     *                UM2FC,UM2R0,UM2SIZE,
     *                NUM2BIN,NUM2ATM(6),NUM2TYP,LFFUM2HIS
      COMMON /FFVIB / JVIBOUT,NVIBMM,LFFDIPSTEP,LFFVELSTEP,LFFIVIBMM,
     *                LFFDQMSTEP,LFFVQMSTEP,LFFDM1STEP,LFFVM1STEP,
     *                LFFDMMSTEP,LFFVMMSTEP,LFFQMVSTEP,LFFMMVSTEP
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,PFREQ(2),
     *                JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,ITDPRP,
     *                TRIPLET,SG1T,NONEQR,TAMMD,TPA,ALPHKWD,BETAKWD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C     FENGCHAO CUI, HUI LI, JUN 2012 (ADD FREE ENERGY)
C
      NNNATM = NFFAT + NAT - LISTQM(NFFAT+NAT+1)
      IF(NNNATM.GT.2)     NDOF = 3*NNNATM - 6
      IF(NNNATM.EQ.2)     NDOF = 3*NNNATM - 5
      IF(NRATTLE.GT.0)    NDOF = NDOF - NRATTLE
      IF(XBOX.LT.1.0D+30) NDOF = NDOF + 1
      IF(YBOX.LT.1.0D+30) NDOF = NDOF + 1
      IF(ZBOX.LT.1.0D+30) NDOF = NDOF + 1
      IF(NNNATM.EQ.1)     NDOF = 3
C
      IF(ISTEP.EQ.0.AND.MASWRK.AND.MEANFLD.EQ.0) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'======================= QUANPOL MD SIMULATION',
     *              ' INITIATED ======================='
         WRITE(IW,*)' '
      END IF
      IF(ISTEP.EQ.0.AND.MASWRK.AND.MEANFLD.GT.0) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'=============== QUANPOL MEANFLD QM/<MM> MD',
     *              ' SIMULATION INITIATED ==============='
         WRITE(IW,*)' '
      END IF
C
      IF(IFIXSOL.GT.0) THEN
         IF(MASWRK.AND.
     *      (MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP))
     *      WRITE(IW,'(A,F20.10,A,A,I8)')
     *      ' FIXSOL TOTAL SURFACE AREA =',FIXA,' A**2,',
     *      ' NFFTS=',NFFTS
         IF(MASWRK.AND.NCYCLE.LT.200.AND.
     *      (MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP))
     *      WRITE(IW,'(A,I3,A,F11.6)')
     *      ' FIXSOL CONVERGED IN ',NCYCLE,
     *      ' ITERATIONS, TOTAL SURFACE CHARGE=',FIXQ
         IF(MASWRK.AND.NCYCLE.EQ.200)
     *       WRITE(IW,'(A,I3,A,F10.6,A,F12.10)')
     *      ' FIXSOL NOT CONVERGED IN ',NCYCLE,
     *      ' ITERATIONS.  TOTAL SURFACE CHARGE=',FIXQ
      END IF
C
      AMU2QM = ZERO
      DO IAT =1, NAT
         DUMY = ZERO
         DO III = 1, 3
            DUMY = DUMY + QMVEL(III,IAT)*QMVEL(III,IAT)
         ENDDO
         AMU2QM = AMU2QM + DUMY*QMZMAS(IAT)
      ENDDO
C
      AMU2MM = ZERO
      DO IFFAT = 1, NFFAT
         IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NAT) THEN
            DUMY = ZERO
            DO III = 1, 3
               DUMY = DUMY + VEL(III,IFFAT)*VEL(III,IFFAT)
            ENDDO
            AMU2MM = AMU2MM + DUMY*ZMAS(IFFAT)
         END IF
      ENDDO
C
      AMU2 = AMU2QM + AMU2MM
C
      VOL   = MIN(XBOX*YBOX*ZBOX, FOURTHIRD*PI*SPHRAD**3)
      ENKIN = PT5*AMU2
      ENKINMM = PT5*AMU2MM
      TEMP  = TOKELVIN*AMU2/NDOF
      IF(VOL.LT.1.0D+30) THEN
         PRESX = (AMU2*ONETHIRD - (VIR(1)+VIRRAT(1)))/VOL*TOBAR
         PRESY = (AMU2*ONETHIRD - (VIR(2)+VIRRAT(2)))/VOL*TOBAR
         PRESZ = (AMU2*ONETHIRD - (VIR(3)+VIRRAT(3)))/VOL*TOBAR
         PRES  = (PRESX+PRESY+PRESZ)*ONETHIRD
      ELSE
         PRESX = ZERO
         PRESY = ZERO
         PRESZ = ZERO
         PRES  = ZERO
      END IF
      IF(GOPARR) THEN
         CALL DDI_BCAST(465,'F',TEMP,1,MASTER)
         CALL DDI_BCAST(466,'F',PRES,1,MASTER)
         CALL DDI_BCAST(467,'F',PRESX,1,MASTER)
         CALL DDI_BCAST(468,'F',PRESY,1,MASTER)
         CALL DDI_BCAST(469,'F',PRESZ,1,MASTER)
      END IF
C
C     -- NOT EASY TO CORRECT THE PRESSURE FOR THE INITIAL STEP --
C        MAKING IT ZERO IS OK BECAUSE IT IS NOT AVERAGED
      IF(ISTEP.EQ.0 .AND. NRATTLE.GT.0) THEN
         PRESX= ZERO
         PRESY= ZERO
         PRESZ= ZERO
         PRES = ZERO
      END IF
C
C     -- FORM FREE ENERGY ITEMS --
      IF(IFEPTOP.GT.0.AND.IFEPTYP.GT.0) THEN
         IF(IDOPOL.EQ.0.AND.IEWALD.EQ.0) THEN
C           -SOL1CH,SOL1IM,SOL1LJ,PMF1CH,PMF1LJ,PMF1BD... ARE READY
            SOL1MM = SOL1CH+SOL1IM+SOL1LJ
            SOL2MM = SOL2CH+SOL2IM+SOL2LJ
            PMF1MM = PMF1CH+PMF1LJ+
     *               PMF1BD+PMF1AG+PMF1DR+PMF1DB+PMF1WG+PMF1CM+
     *               SOL1CH+SOL1LJ
         END IF
         IF(IDOPOL.GT.0.OR.IEWALD.GT.0) THEN
            SOL1CH  = (WPERT1-WSIMUL)*(ENCHARB -ENCHARA)
            SOL2CH  = (WPERT2-WSIMUL)*(ENCHARB -ENCHARA)
            SOL1IM  = (WPERT1-WSIMUL)*(ENIMGCHB-ENIMGCHA)
            SOL2IM  = (WPERT2-WSIMUL)*(ENIMGCHB-ENIMGCHA)
            SOL1LJ  = (WPERT1-WSIMUL)*(ENLJRB  +ENLJDB -ENLJRA -ENLJDA)
            SOL2LJ  = (WPERT2-WSIMUL)*(ENLJRB  +ENLJDB -ENLJRA -ENLJDA)
            SOL1MM  = SOL1CH+SOL1IM+SOL1LJ
            SOL2MM  = SOL2CH+SOL2IM+SOL2LJ
            ENPOTA  = EN12A   + EN123A + EN123R4A + EN234W1A  + EN123B4A
     *              + ENCHARA + ENPOLA + ENRXNA   + ENRXNPOLA + ENRXNRA
     *              + ENLJRA  + ENLJDA + ENCMAPA  + ENFIXSOA  + ENIMGCHA
     *              + ENBIAS  + EN12312A
            ENPOTB  = EN12B   + EN123B + EN123R4B + EN234W1B  + EN123B4B
     *              + ENCHARB + ENPOLB + ENRXNB   + ENRXNPOLB + ENRXNRB
     *              + ENLJRB  + ENLJDB + ENCMAPB  + ENFIXSOB  + ENIMGCHB
     *              + ENBIAS  + EN12312B
            PMF1PO  = (WPERT1-WSIMUL)*(ENPOLB  -ENPOLA)
            PMF1MM  = (WPERT1-WSIMUL)*(ENPOTB - ENPOTA)
         END IF
         IF(NAT.GT.0) THEN
            POT1QMMM  = (WPERT1-WSIMUL)*(ETOTQB - ETOTQA)
            POT2QMMM  = (WPERT2-WSIMUL)*(ETOTQB - ETOTQA)
            IF(MPLEVL.EQ.2)THEN
               POT1QMMM  = (WPERT1-WSIMUL)*(EMP2QB - EMP2QA)
               POT2QMMM  = (WPERT2-WSIMUL)*(EMP2QB - EMP2QA)
            END IF
            IF(TDDFTYP.NE.RNONE) THEN
               POT1QMMM  = (WPERT1-WSIMUL)*(ESTATEQB - ESTATEQA)
               POT2QMMM  = (WPERT2-WSIMUL)*(ESTATEQB - ESTATEQA)
            END IF
         END IF
      END IF
C
      IF(ISTEP.GT.0) THEN
         PMEANX     = (PRESX     +PMEANX*(ISTEP-1))/ISTEP
         PMEANY     = (PRESY     +PMEANY*(ISTEP-1))/ISTEP
         PMEANZ     = (PRESZ     +PMEANZ*(ISTEP-1))/ISTEP
         PMEAN      = (PRES      +PMEAN *(ISTEP-1))/ISTEP
         VOLAV      = (VOL       +VOLAV *(ISTEP-1))/ISTEP
         ENKAV      = (ENKIN     +ENKAV *(ISTEP-1))/ISTEP
         TEMPAV     = (TEMP      +TEMPAV*(ISTEP-1))/ISTEP
         ASOL1CH    = (SOL1CH    +ASOL1CH*(ISTEP-1))/ISTEP
         ASOL2CH    = (SOL2CH    +ASOL2CH*(ISTEP-1))/ISTEP
         ASOL1IM    = (SOL1IM    +ASOL1IM*(ISTEP-1))/ISTEP
         ASOL2IM    = (SOL2IM    +ASOL2IM*(ISTEP-1))/ISTEP
         ASOL1LJ    = (SOL1LJ    +ASOL1LJ*(ISTEP-1))/ISTEP
         ASOL2LJ    = (SOL2LJ    +ASOL2LJ*(ISTEP-1))/ISTEP
         ASOL1MM    = (SOL1MM    +ASOL1MM*(ISTEP-1))/ISTEP
         ASOL2MM    = (SOL2MM    +ASOL2MM*(ISTEP-1))/ISTEP
         SOLFRE1MM  = (EXP(-SOL1MM/(BOLTZK*TEMP0)) +
     *                         SOLFRE1MM*(ISTEP-1))/ISTEP
         SOLFRE2MM  = (EXP(-SOL2MM/(BOLTZK*TEMP0)) +
     *                         SOLFRE2MM*(ISTEP-1))/ISTEP
         PMFFRE1MM  = (EXP(-PMF1MM/(BOLTZK*TEMP0)) +
     *                         PMFFRE1MM*(ISTEP-1))/ISTEP
         IF(NAT.GT.0) THEN
         FRE1QMMM   = (EXP(-POT1QMMM/(BOLTZK*TEMP0))
     *                         +FRE1QMMM*(ISTEP-1))/ISTEP
         FRE2QMMM   = (EXP(-POT2QMMM/(BOLTZK*TEMP0))
     *                         +FRE2QMMM*(ISTEP-1))/ISTEP
         END IF
      END IF
C
      IF(MNSTEP.GT.0) THEN
         PREMN      = (PRES     +PREMN*(MNSTEP-1))/MNSTEP
         VOLMN      = (VOL      +VOLMN*(MNSTEP-1))/MNSTEP
         ENKMN      = (ENKINMM  +ENKMN*(MNSTEP-1))/MNSTEP
         ENPOLMN    = (ENPOL  +ENPOLMN*(MNSTEP-1))/MNSTEP
         TEMMN      = (TEMP     +TEMMN*(MNSTEP-1))/MNSTEP
         SOL1IMMN   = (SOL1IM+SOL1IMMN*(MNSTEP-1))/MNSTEP
         SOL2IMMN   = (SOL2IM+SOL2IMMN*(MNSTEP-1))/MNSTEP
         SOLFRE1MN  = (EXP(-SOL1MM/(BOLTZK*TEMP0)) + 
     *                       SOLFRE1MN*(MNSTEP-1))/MNSTEP
         SOLFRE2MN  = (EXP(-SOL2MM/(BOLTZK*TEMP0)) +
     *                       SOLFRE2MN*(MNSTEP-1))/MNSTEP
      END IF
C
C
C     -- FFMD1 OR FFMD3 --
      IF(NAT.LE.0.OR.MEANFLD.GT.0) THEN
         ENPOT = EN12    + EN123  + EN123R4 + EN234W1  + EN123B4
     *         + ENCHAR  + ENPOL  + ENRXN   + ENRXNPOL + ENRXNR
     *         + ENLJR   + ENLJD  + ENCMAP  + ENFIXSO  + ENIMGCH
     *         + ENBIAS  + EN12312
         IF(MEANFLD.EQ.0) ENTOT = ENPOT  + ENKIN
         IF(MEANFLD.GT.0) ENTOT = ENPOT  + ENKINMM
         IF(ISTEP.GT.0) THEN
            ENPAV = (ENPOT+(ENPAV*(ISTEP-1)))/ISTEP
         END IF
         IF(MNSTEP.GT.0) THEN
            ENPMN = (ENPOT+(ENPMN*(MNSTEP-1)))/MNSTEP
         END IF
         ENRXN = ENRXN + ENRXNPOL
C
         IF(MASWRK.AND.(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP)) THEN
            WRITE(IW,*)' '
            WRITE(IW,'(1X,A,I10,33X,A,F19.2,A)')'MD STEP ',ISTEP,
     *        'TIME= ',ISTEP*DT*2.418884326505D-02,' FS'
            WRITE(IW,9000)
     *      'BOND STRETCHING               ENERGY = ', EN12   *TOKCAL
            WRITE(IW,9000)
     *      'BOND ANGLE BENDING            ENERGY = ', EN123  *TOKCAL
            WRITE(IW,9000)
     *      'STRETCHING BENDING            ENERGY = ', EN12312*TOKCAL
            WRITE(IW,9000)
     *      'DIHEDRAL ROTATION             ENERGY = ', EN123R4*TOKCAL
            WRITE(IW,9000)
     *      'DIHEDRAL BENDING              ENERGY = ', EN123B4*TOKCAL
            WRITE(IW,9000)
     *      'CMAP                          ENERGY = ', ENCMAP *TOKCAL
            WRITE(IW,9000)
     *      'WAGGING                       ENERGY = ', EN234W1*TOKCAL
            IF(NUMBTYP.GT.0)
     *      WRITE(IW,9000)   
     *      'UMBRELLA SAMPLING BIAS        ENERGY = ', ENBIAS *TOKCAL
            WRITE(IW,9000)
     *      'LJ REPULSION                  ENERGY = ', ENLJR  *TOKCAL
            WRITE(IW,9000)
     *      'LJ DISPERSION                 ENERGY = ', ENLJD  *TOKCAL
            WRITE(IW,9000)
     *      'CHARGE                        ENERGY = ', ENCHAR *TOKCAL
            IF(MEANFLD.GT.0)
     *      WRITE(IW,9000)
     *      'QMIMAGE MMCHARG               ENERGY = ', ENIMGCH*TOKCAL
            WRITE(IW,9000)
     *      'INDUCED DIPOLE                ENERGY = ', ENPOL  *TOKCAL
            WRITE(IW,9000)
     *      'SPHSOL                        ENERGY = ', ENRXN  *TOKCAL
            WRITE(IW,9000)
     *      'FIXSOL                        ENERGY = ', ENFIXSO*TOKCAL
            WRITE(IW,9000)
     *      'QM CENTER                     ENERGY = ', ENCENT *TOKCAL
            WRITE(IW,9000)
     *      'SPHERE                        ENERGY = ', ENRXNR *TOKCAL
            WRITE(IW,9000)
     *      'POTENTIAL                     ENERGY = ', ENPOT  *TOKCAL
            IF(MEANFLD.EQ.0)
     *      WRITE(IW,9000)
     *      'KINETIC                       ENERGY = ', ENKIN  *TOKCAL
            IF(MEANFLD.GT.0)
     *      WRITE(IW,9000)
     *      'KINETIC                       ENERGY = ', ENKINMM*TOKCAL
            WRITE(IW,9000)
     *      'TOTAL                         ENERGY = ', ENTOT  *TOKCAL
            WRITE(IW,9001)
     *      'TEMPERATURE                          = ', TEMP
            WRITE(IW,9002)
     *      'PRESSURE                             = ', PRES
            IF(IPSTAT.EQ.3) THEN
            WRITE(IW,9002)
     *      'PRESSUREX                            = ', PRESX
            WRITE(IW,9002)
     *      'PRESSUREY                            = ', PRESY
            WRITE(IW,9002)
     *      'PRESSUREZ                            = ', PRESZ
            END IF
            IF(VOL.LE.1.0D+30)
     *      WRITE(IW,9003)
     *      'VOLUME                               = ', VOL*TOANGS**3
            IF(VOL.GT.1.0D+30)
     *      WRITE(IW,9004)
     *      'VOLUME                               = '
C
            IF(ISTEP.GT.0) THEN
              WRITE(IW,*)' '
              WRITE(IW,9000)
     *        'AVERAGE POTENTIAL             ENERGY = ', ENPAV*TOKCAL
              WRITE(IW,9000)
     *        'AVERAGE KINETIC               ENERGY = ', ENKAV*TOKCAL
              WRITE(IW,9000)
     *        'AVERAGE TOTAL                 ENERGY = ',(ENPAV+ENKAV)
     *                                                        *TOKCAL
              WRITE(IW,9001)
     *        'AVERAGE TEMPERATURE                  = ', TEMPAV
              WRITE(IW,9002)
     *        'AVERAGE PRESSURE                     = ', PMEAN
              IF(IPSTAT.EQ.3) THEN
              WRITE(IW,9002)
     *        'AVERAGE PRESSUREX                    = ', PMEANX
              WRITE(IW,9002)
     *        'AVERAGE PRESSUREY                    = ', PMEANY
              WRITE(IW,9002)
     *        'AVERAGE PRESSUREZ                    = ', PMEANZ
              END IF
              IF(VOL.LE.1.0D+30)
     *        WRITE(IW,9003)
     *        'AVERAGE VOLUME                       = ',VOLAV*TOANGS**3
            END IF
C
C           -- MM SOL1 IN FFMD1 OR FFMD3 --
            IF(IFEPTYP.EQ.1.OR.(IFEPTYP.EQ.2.AND.MEANFLD.GT.0)) THEN
              WRITE(IW,*)' '
              WRITE(IW,'(A,F9.6,A,F9.6)')
     *        ' RELATIVE SOLVATION ENERGY: FROM    WSIMUL= ',WSIMUL,
     *        '    TO    WPERT1= ',WPERT1
              WRITE(IW,9000)
     *        'RELATIVE CHARGE SOLVATION     ENERGY = ', SOL1CH*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE QM IMAGE CHARGE SOLV ENERGY = ', SOL1IM*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE LJ SOLVATION         ENERGY = ', SOL1LJ*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE MM SOLVATION         ENERGY = ', SOL1MM*TOKCAL
              IF(ISTEP.GT.0) THEN
              WRITE(IW,9000)
     *        'AVERAGE REL CHARGE SOLVATION  ENERGY = ', ASOL1CH*TOKCAL
              WRITE(IW,9000)
     *        'AVERAGE REL QM IMAGE CHG SOLV ENERGY = ', ASOL1IM*TOKCAL
              WRITE(IW,9000)
     *        'AVERAGE REL LJ SOLVATION      ENERGY = ', ASOL1LJ*TOKCAL
              WRITE(IW,9000)
     *        'AVERAGE REL MM SOLVATION      ENERGY = ', ASOL1MM*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE SOLVATION FREE       ENERGY = ',
     *                             -LOG(SOLFRE1MM)*BOLTZK*TEMP0*TOKCAL
              END IF
            END IF
C
C           -- MM SOL2 IN FFMD1 --
            IF(IFEPTYP.EQ.1.AND.WPERT2.NE.WPERT1) THEN
              WRITE(IW,*)' '
              WRITE(IW,'(A,F9.6,A,F9.6)')   
     *        ' RELATIVE SOLVATION ENERGY: FROM    WSIMUL= ',WSIMUL,
     *             '    TO    WPERT2= ',WPERT2
              WRITE(IW,9000)
     *        'RELATIVE CHARGE SOLVATION     ENERGY = ', SOL2CH*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE QM IMAGE CHARGE SOLV ENERGY = ', SOL2IM*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE LJ SOLVATION         ENERGY = ', SOL2LJ*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE MM SOLVATION         ENERGY = ', SOL2MM*TOKCAL
              IF(ISTEP.GT.0) THEN
              WRITE(IW,9000)
     *        'AVERAGE REL CHARGE SOLVATION  ENERGY = ', ASOL2CH*TOKCAL
              WRITE(IW,9000)
     *        'AVERAGE REL QM IMAGE CHG SOLV ENERGY = ', ASOL2IM*TOKCAL
              WRITE(IW,9000)
     *        'AVERAGE REL LJ SOLVATION      ENERGY = ', ASOL2LJ*TOKCAL
              WRITE(IW,9000)
     *        'AVERAGE REL MM SOLVATION      ENERGY = ', ASOL2MM*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE SOLVATION FREE       ENERGY = ',
     *                             -LOG(SOLFRE2MM)*BOLTZK*TEMP0*TOKCAL
              END IF
            END IF
C
C           -- MM PMF IN FFMD1 --
            IF(IFEPTYP.EQ.2.AND.MEANFLD.LE.0) THEN
              WRITE(IW,*)' '
              WRITE(IW,*)'RELATIVE ENERGY: FROM $FFDATA TO $FFDATB',
     *                   '              (POTENTIAL OF MEAN FORCE)'
              IF(IDOPOL.EQ.0.AND.IEWALD.EQ.0) THEN
              WRITE(IW,9000)
     *        'RELATIVE BOND STRETCHING  PMF ENERGY = ', PMF1BD*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE BOND ANGLE BEND  PMF ENERGY = ', PMF1AG*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE DIHEDRAL ROTAT   PMF ENERGY = ', PMF1DR*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE DIHEDRAL BENDING PMF ENERGY = ', PMF1DB*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE CMAP             PMF ENERGY = ', PMF1CM*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE WAGGING          PMF ENERGY = ', PMF1WG*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE CHARGE           PMF ENERGY = ', PMF1CH*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE LJ               PMF ENERGY = ', PMF1LJ*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE CHARGE           SOL ENERGY = ', SOL1CH*TOKCAL
              WRITE(IW,9000)
     *        'RELATIVE LJ               SOL ENERGY = ', SOL1LJ*TOKCAL
              END IF
              WRITE(IW,9000)
     *        'RELATIVE POTENTIAL            ENERGY = ', PMF1MM*TOKCAL
              IF(ISTEP.GT.0)
     *        WRITE(IW,9000)
     *        'RELATIVE FREE                 ENERGY = ',
     *                             -LOG(PMFFRE1MM)*BOLTZK*TEMP0*TOKCAL
            END IF
            WRITE(IW,*)' '
            CALL TIMIT(1)
            WRITE(IW,*)' '
         END IF
C
      ELSE IF(NAT.GT.0.AND.NFFAT.GT.0) THEN
                              ENPOT = ETOT
         IF(MPLEVL.EQ.2)      ENPOT = EMP2
         IF(TDDFTYP.NE.RNONE) ENPOT = ESTATE(NTHST)
         ENPOT2= ENFFQM2
         ENTOT = ENPOT  + ENKIN
         IF(ISTEP.GT.0) THEN
            ENPAV  = (ENPOT +(ENPAV *(ISTEP-1)))/ISTEP
            ENPAV2 = (ENPOT2+(ENPAV2*(ISTEP-1)))/ISTEP
         ELSE
            ENPAV  = ENPOT
            ENPAV2 = ENPOT2
         END IF
         ENRXN = ENRXN + ENRXNPOL
C
         IF(MASWRK.AND.(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP)) THEN
            WRITE(IW,*)' '
            WRITE(IW,'(1X,A,I10,33X,A,F19.2,A)')'MD STEP ',ISTEP,
     *        'TIME= ',ISTEP*DT*2.418884326505D-02,' FS'
            WRITE(IW,9000)
     *      'BOND STRETCHING               ENERGY = ', EN12   *TOKCAL
            WRITE(IW,9000)
     *      'BOND ANGLE BENDING            ENERGY = ', EN123  *TOKCAL
            WRITE(IW,9000)
     *      'STRETCHING BENDING            ENERGY = ', EN12312*TOKCAL
            WRITE(IW,9000)
     *      'DIHEDRAL ROTATION             ENERGY = ', EN123R4*TOKCAL
            WRITE(IW,9000)
     *      'DIHEDRAL BENDING              ENERGY = ', EN123B4*TOKCAL
            WRITE(IW,9000)
     *      'CMAP                          ENERGY = ', ENCMAP *TOKCAL
            WRITE(IW,9000)
     *      'WAGGING                       ENERGY = ', EN234W1*TOKCAL
            IF(NUMBTYP.GT.0)
     *      WRITE(IW,9000)
     *      'UMBRELLA SAMPLING BIAS        ENERGY = ', ENBIAS *TOKCAL
            WRITE(IW,9000)
     *      'LJ REPULSION                  ENERGY = ', ENLJR  *TOKCAL
            WRITE(IW,9000)
     *      'LJ DISPERSION                 ENERGY = ', ENLJD  *TOKCAL
            WRITE(IW,9000)
     *      'CHARGE                        ENERGY = ', ENCHAR *TOKCAL
            WRITE(IW,9000)
     *      'INDUCED DIPOLE                ENERGY = ', ENPOL  *TOKCAL
            WRITE(IW,9000)
     *      'SPHSOL                        ENERGY = ', ENRXN  *TOKCAL
            WRITE(IW,9000)
     *      'FIXSOL                        ENERGY = ', ENFIXSO*TOKCAL
            WRITE(IW,9000)
     *      'QM CENTER                     ENERGY = ', ENCENT *TOKCAL
            WRITE(IW,9000)
     *      'SPHERE                        ENERGY = ', ENRXNR *TOKCAL
            WRITE(IW,9000)
     *      'POTENTIAL                     ENERGY = ', ENPOT  *TOKCAL
            IF(IDOQM2.EQ.1)
     *      WRITE(IW,9000)
     *      '2ND POTENTIAL                 ENERGY = ', ENPOT2 *TOKCAL
            WRITE(IW,9000)
     *      'KINETIC                       ENERGY = ', ENKIN  *TOKCAL
            WRITE(IW,9000)
     *      'TOTAL                         ENERGY = ', ENTOT  *TOKCAL
            WRITE(IW,9001)
     *      'TEMPERATURE                          = ', TEMP
            WRITE(IW,9002)
     *      'PRESSURE                             = ', PRES
            IF(IPSTAT.EQ.3) THEN
            WRITE(IW,9002)
     *      'PRESSUREX                            = ', PRESX
            WRITE(IW,9002)
     *      'PRESSUREY                            = ', PRESY
            WRITE(IW,9002)
     *      'PRESSUREZ                            = ', PRESZ
            END IF
            IF(VOL.LE.1.0D+30)
     *      WRITE(IW,9003)
     *      'VOLUME                               = ', VOL*TOANGS**3
            IF(VOL.GT.1.0D+30)
     *      WRITE(IW,9004)
     *      'VOLUME                               = '
C
            IF(ISTEP.GT.0) THEN
              WRITE(IW,*)' '
              WRITE(IW,9000)
     *        'AVERAGE POTENTIAL             ENERGY = ', ENPAV *TOKCAL
              IF(IDOQM2.EQ.1)
     *        WRITE(IW,9000)
     *        'AVERAGE 2ND POTENTIAL         ENERGY = ', ENPAV2*TOKCAL
              WRITE(IW,9000)
     *        'AVERAGE KINETIC               ENERGY = ', ENKAV *TOKCAL
              WRITE(IW,9000)
     *        'AVERAGE TOTAL                 ENERGY = ' ,(ENPAV+ENKAV)
     *                                                         *TOKCAL
              WRITE(IW,9001)
     *        'AVERAGE TEMPERATURE                  = ', TEMPAV
              WRITE(IW,9002)
     *        'AVERAGE PRESSURE                     = ', PMEAN
              IF(IPSTAT.EQ.3) THEN
              WRITE(IW,9002)
     *        'AVERAGE PRESSUREX                    = ', PMEANX
              WRITE(IW,9002)
     *        'AVERAGE PRESSUREY                    = ', PMEANY
              WRITE(IW,9002)               
     *        'AVERAGE PRESSUREZ                    = ', PMEANZ
              END IF
              IF(VOL.LE.1.0D+30)
     *        WRITE(IW,9003)
     *        'AVERAGE VOLUME                       = ',VOLAV*TOANGS**3
            END IF
C
            IF(IFEPTYP.EQ.1) THEN
              WRITE(IW,*)' '
              WRITE(IW,'(A,F9.6,A,F9.6)')
     *        ' RELATIVE FREE ENERGY:      FROM    WSIMUL= ',WSIMUL,
     *             '    TO    WPERT1= ',WPERT1
              WRITE(IW,9000)
     *        'RELATIVE QMMM POTENTIAL       ENERGY = ',POT1QMMM*TOKCAL
              IF(ISTEP.GT.0)
     *        WRITE(IW,9000)
     *        'RELATIVE QMMM FREE            ENERGY = ',
     *                              -LOG(FRE1QMMM)*BOLTZK*TEMP0*TOKCAL
            END IF
            IF(IFEPTYP.EQ.1.AND.WPERT2.NE.WPERT1) THEN
              WRITE(IW,*)' '
              WRITE(IW,'(A,F9.6,A,F9.6)')
     *        ' RELATIVE FREE ENERGY:      FROM    WSIMUL= ',WSIMUL,
     *             '    TO    WPERT2= ',WPERT2
              WRITE(IW,9000)
     *        'RELATIVE QMMM POTENTIAL       ENERGY = ',POT2QMMM*TOKCAL
              IF(ISTEP.GT.0)
     *        WRITE(IW,9000)
     *        'RELATIVE QMMM FREE            ENERGY = ',
     *                              -LOG(FRE2QMMM)*BOLTZK*TEMP0*TOKCAL
            END IF
C
            IF(IFEPTYP.EQ.2) THEN
              WRITE(IW,*)' '
              WRITE(IW,*)'RELATIVE ENERGY: FROM $FFDATA TO $FFDATB',
     *                   '              (POTENTIAL OF MEAN FORCE)'
              WRITE(IW,9000)
     *        'RELATIVE QMMM POTENTIAL       ENERGY = ',POT1QMMM*TOKCAL
              IF(ISTEP.GT.0)
     *        WRITE(IW,9000)
     *        'RELATIVE QMMM FREE            ENERGY = ',
     *                              -LOG(FRE1QMMM)*BOLTZK*TEMP0*TOKCAL
            END IF
C
            WRITE(IW,*)' '
            CALL TIMIT(1)
            WRITE(IW,*)' '
         END IF
      END IF
C
C     -- ALWAYS PRINT OUT DIPOLE AND VEL --
C
      IF(ISTEP.LE.100000) THEN
         CALL VELDIP(CORD,ZMAS,X(LFFCHARG),X(LFFDIP),ISTEP,
     *            X(LFFDIPSTEP),X(LFFVELSTEP),VEL,X(LFFIVIBMM),
     *            X(LFFDQMSTEP),X(LFFDMMSTEP),X(LFFDM1STEP),
     *            X(LFFVQMSTEP),X(LFFVMMSTEP),X(LFFVM1STEP),
     *            QMVEL,X(LFFQMVSTEP),X(LFFMMVSTEP),X(LFFLISTQM))
      END IF
C
C     -- CALCULATE DIELECTRIC CONSTANT --
C
      IF(NDIEL.GT.0) THEN
         CALL DIELECT(CORD,ZMAS,X(LFFCHARG),X(LFFDIP),ISTEP,
     *                X(LFFDIESTEP),X(LFFDI1STEP))
      END IF
C
C     -- CALCULATE RDF EVERY STEP --
C
      IF(NRDF.GT.0) THEN
         IF(ISTEP.GE.0) THEN
            IF(SPHRAD.GE.1.0D+30) THEN
               CALL RDF(CORD,ISTEP,X(LFFATMNAM),X(LFFFRAG1),
     *                  X(LFFFRAG2),X(LFFNFRAG1),X(LFFNFRAG2),
     *                  X(LFFGOFR))
            ELSE
               CALL RDFSPH(CORD,ISTEP,X(LFFATMNAM),X(LFFFRAG1),
     *                     X(LFFFRAG2),X(LFFNFRAG1),X(LFFNFRAG2),
     *                     X(LFFGOFR))
            END IF
         END IF
      END IF
C
C     -- CALCULATE RDEN EVERY STEP --
C
      IF(NRDEN.GT.0) THEN
         IF(ISTEP.GE.0) THEN
            CALL RDEN(CORD,ISTEP,X(LFFATMNAM),X(LFFRDPRATM),
     *                X(LFFNRDPRATM),X(LFFPRO))
         END IF
      END IF
C
C     -- CALCULATE DIFFUSION COEFFICIENT --
C
      IF(NDFS.GT.0) THEN
         IF(MOD(ISTEP,INT(TIMDFS/DT+0.1D+00)).EQ.0) THEN
            CALL DFS(CORD,ISTEP,X(LFFATMNAM),X(LFFDFSC0),
     *               X(LFFDFSA),X(LFFDFSC),X(LFFDFSCAV),X(LFFDFSN))
         END IF
      END IF
C
C     -- CALCULATE RMSD EVERY JOUT STEPS --
C
      IF(NRMSD.EQ.1) THEN
         IF(MOD(ISTEP,JOUT).EQ.0) THEN
            CALL RMSD(CORD,ISTEP,X(LFFZANF),X(LFFRMSD0))
         END IF
      END IF
C
C     -- CALCULATE RADIUS OF GYRATION --
C
      IF(NGYRA.GT.0) THEN
         IF(MOD(ISTEP,INT(TIMGYRA/DT+0.1D+00)).EQ.0) THEN
            CALL GYRA(CORD,X(LFFZANF),ZMAS)
         END IF
      END IF
C
C     -- CALCULATE RALL --
C
      IF(NRALL.EQ.1) THEN
         IF(MOD(ISTEP,INT(TIMRALL/DT+0.1D+00)).EQ.0) THEN
            CALL RALL(X(LFFRALL0),CORD,ISTEP)
         END IF
      END IF
C
C     -- CALCULATE SELECT DISTANCES EVERY JOUT STEPS --
C
      IF(((NRIJMM+NRIJQM+NAIJKMM+NAIJKQM).GT.0) .AND.
     *    MOD(ISTEP,JOUT).EQ.0) CALL DISIJ(CORD)
C
C     -- PRINT OUT UMBRELLA SAMPLING HISTOGRAM AND PMF --
C
      IF(MASWRK.AND.NUMBTYP.GT.0.AND.NUM2TYP.EQ.0) THEN
      IF((ISTEP.GT.0.AND.MOD(ISTEP,JOUT).EQ.0).OR.ISTEP.EQ.NSTEP) THEN
         UMBRLOW = UMBR0 - (DBLE(NUMBBIN-1)/2)*UMBSIZE
         MIDPTI  = (NUMBBIN+1)/2
         IF(NUMBTYP.EQ.12.OR.NUMBTYP.EQ.1212) THEN
            WRITE(IW,'(/1X,A,I10)')
     *      '1D UMBRELLA SAMPLING HISTOGRAM AT MD STEP=',ISTEP
            WRITE(IW,'(1X,A,F10.4,1X,A)')
     *      'K=',UMBFC*TOBOHR*TOBOHR*TOKCAL,'KCAL MOL-1 A-2'
            WRITE(IW,'(1X,A,F10.4,1X,A)') 'T=',TEMP0,'KELVIN'
            WRITE(IW,*)
     *      '  IBIN       R(A)    HISTOGRAM       PMF KCAL/MOL'
            RUNITI= TOANGS
         ELSE IF(NUMBTYP.EQ.123.OR.NUMBTYP.EQ.1234) THEN
            WRITE(IW,'(/1X,A,I10)')
     *      '1D UMBRELLA SAMPLING HISTOGRAM AT MD STEP=',ISTEP
            WRITE(IW,'(1X,A,F10.4,1X,A)')
     *      'K=',UMBFC*TORAD*TORAD*TOKCAL,'KCAL MOL-1 DEG-2'
            WRITE(IW,'(1X,A,F10.4,1X,A)') 'T=',TEMP0,'KELVIN'
            WRITE(IW,*)
     *      '  IBIN     R(DEG)    HISTOGRAM       PMF KCAL/MOL'
            RUNITI= DEGREE
         END IF
C
         FACTOR  = ONE/UMBHIS(MIDPTI)
         DO IBIN=1,NUMBBIN
            COUNTS = UMBHIS(IBIN)
            PMF    = ZERO
            IF(COUNTS.GT.ZERO.AND.UMBHIS(MIDPTI).GT.ZERO)
     *      PMF    = -BOLTZK*TEMP0*LOG(COUNTS*FACTOR)
     *               -PT5*UMBFC*((IBIN-MIDPTI)*UMBSIZE)
     *                         *((IBIN-MIDPTI)*UMBSIZE)
            WRITE(IW,'(1X,I6,1X,F10.4,1X,I12,1X,F18.10)')
     *      IBIN-MIDPTI,(UMBRLOW+UMBSIZE*(IBIN-1))*RUNITI,
     *      NINT(COUNTS),PMF*TOKCAL
         ENDDO
         WRITE(IW,*)' '
      END IF
      END IF
C
      IF(MASWRK.AND.NUMBTYP.GT.0.AND.NUM2TYP.GT.0) THEN
      IF((ISTEP.GT.0.AND.MOD(ISTEP,JOUT).EQ.0).OR.ISTEP.EQ.NSTEP) THEN
         WRITE(IW,'(/1X,A,A/)')
     *   '2D UMBRELLA SAMPLING HISTOGRAM WRITTEN TO THE ',
     *   'TRAJECTORY FILE EVERY KOUT STEPS.'
      END IF
      IF((ISTEP.GT.0.AND.MOD(ISTEP,KOUT).EQ.0).OR.ISTEP.EQ.NSTEP) THEN
         UMBRLOW = UMBR0 - (DBLE(NUMBBIN-1)/2)*UMBSIZE
         MIDPTI  = (NUMBBIN+1)/2
         IF(NUMBTYP.EQ.12.OR.NUMBTYP.EQ.1212) THEN
            WRITE(36,'(/1X,A,I10)')
     *      '2D UMBRELLA SAMPLING HISTOGRAM AT MD STEP=',ISTEP
            WRITE(36,'(1X,A,F10.4,1X,A)')
     *      'K=',UMBFC*TOBOHR*TOBOHR*TOKCAL,'KCAL MOL-1 A-2'
            RUNITI= TOANGS
         ELSE IF(NUMBTYP.EQ.123.OR.NUMBTYP.EQ.1234) THEN
            WRITE(36,'(/1X,A,I10)')
     *      '2D UMBRELLA SAMPLING HISTOGRAM AT MD STEP=',ISTEP
            WRITE(36,'(1X,A,F10.4,1X,A)')
     *      'K=',UMBFC*TORAD*TORAD*TOKCAL,'KCAL MOL-1 DEG-2'
            RUNITI= DEGREE
         END IF
         UM2RLOW = UM2R0 - (DBLE(NUM2BIN-1)/2)*UM2SIZE
         MIDPTJ  = (NUM2BIN+1)/2
         IF(NUM2TYP.EQ.12.OR.NUM2TYP.EQ.1212) THEN
            WRITE(36,'(1X,A,F10.4,1X,A)')
     *      'K=',UM2FC*TOBOHR*TOBOHR*TOKCAL,'KCAL MOL-1 A-2'
            RUNITJ= TOANGS
         ELSE IF(NUM2TYP.EQ.123.OR.NUM2TYP.EQ.1234) THEN
            WRITE(36,'(1X,A,F10.4,1X,A)')
     *      'K=',UM2FC*TORAD*TORAD*TOKCAL,'KCAL MOL-1 DEG-2'
            RUNITJ= DEGREE
         END IF
         WRITE(36,'(1X,A,F10.4,1X,A)') 'T=',TEMP0,'KELVIN'
C
         FACTOR = ONE/UM2HIS(MIDPTJ,MIDPTI)
         DO IBIN=1,NUMBBIN
         IF(NUMBTYP.EQ.12.OR.NUMBTYP.EQ.1212) THEN
            WRITE(36,*)
     *      '  IBIN       R(A)    HISTOGRAM       PMF KCAL/MOL'
         ELSE IF(NUMBTYP.EQ.123.OR.NUMBTYP.EQ.1234) THEN
            WRITE(36,*)
     *      '  IBIN     R(DEG)    HISTOGRAM       PMF KCAL/MOL'
         END IF
         WRITE(36,'(1X,I6,1X,F10.4)')
     *   IBIN-MIDPTI,(UMBRLOW+UMBSIZE*(IBIN-1))*RUNITI
         IF(NUM2TYP.EQ.12.OR.NUM2TYP.EQ.1212) THEN
            WRITE(36,*)
     *      '  JBIN       R(A)'
            RUNITJ= TOANGS
         ELSE IF(NUM2TYP.EQ.123.OR.NUM2TYP.EQ.1234) THEN
            WRITE(36,*)
     *      '  JBIN     R(DEG)'
            RUNITJ= DEGREE
         END IF
         DO JBIN=1,NUM2BIN
            COUNTS = UM2HIS(JBIN,IBIN)
            PMF    = ZERO
            IF(COUNTS.GT.ZERO.AND.UM2HIS(MIDPTJ,MIDPTI).GT.ZERO)
     *      PMF    = -BOLTZK*TEMP0*LOG(COUNTS*FACTOR)
     *               -PT5*UMBFC*((IBIN-MIDPTI)*UMBSIZE)
     *                         *((IBIN-MIDPTI)*UMBSIZE)
     *               -PT5*UM2FC*((JBIN-MIDPTJ)*UM2SIZE)
     *                         *((JBIN-MIDPTJ)*UM2SIZE)
            WRITE(36,'(1X,I6,1X,F10.4,1X,I12,1X,F18.10)')
     *      JBIN-MIDPTJ,(UM2RLOW+UM2SIZE*(JBIN-1))*RUNITJ,
     *      NINT(COUNTS),PMF*TOKCAL
         ENDDO
         ENDDO
         WRITE(36,*)' '
      END IF
      END IF
C
 9000 FORMAT(1X,A,F30.10,2X,'KCAL/MOL')
 9001 FORMAT(1X,A,F30.10,2X,'K')
 9002 FORMAT(1X,A,F30.10,2X,'BAR')
 9003 FORMAT(1X,A,F30.10,2X,'A**3')
 9004 FORMAT(1X,A,30X,   2X,'OPEN SYSTEM')
C
      CALL FLSHBF(IW)
C
      RETURN
      END
C*MODULE QUANPO  *DECK MFLDPROP
!>                    
!> @brief    QM/MM mean field properties
!>    
!> @author   Fengchao Cui, Hui Li
!>           - Mar 2012
!>                    
!> @details  calculate and average QM/<MM> properties
!>
      SUBROUTINE MFLDPROP(QMVEL,QMZMAS,MDSTEPQM,POTX1QMMN,POTX2QMMN)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DOUBLE PRECISION MD
C
      LOGICAL TRIPLET,SG1T,TAMMD,TPA,ALPHKWD,BETAKWD
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (TOKELVIN=3.15774646D+05, BOLTZK=1.0D+00/TOKELVIN)
      PARAMETER (MXATM=2000, MXRT=100)
      PARAMETER (PT5=0.5D+00, ZERO=0.0D+00)
C
      DIMENSION QMVEL(3,*),QMZMAS(*)
C
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFQMFE/ ETOTQA,EMP2QA,ESTATEQA,ETOTQB,EMP2QB,ESTATEQB,
     *                FRE1QMMM,FRE2QMMM,
     *                VIRA(3),VIRB(3),
     *                LFFFFGRDA,LFFFFGRDB,LFFQMGRDA,LFFQMGRDB,
     *                LFFCORDX,LFFCHARGX,LFFPOLX,LFFSIGX,LFFEPSX,
     *                LFFSIG2X,LFFEPS2X,LFFCLPRX,LFFZLPRX,LFFCHGIMX,
     *                LFFCRDIMX,LFFLISTAQM,LFFLISTBQM,NIMGPTX,
     *                LFFDIPIMX,LFFQADIMX,LFFOCTIMX
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,PFREQ(2),
     *                JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,ITDPRP,
     *                TRIPLET,SG1T,NONEQR,TAMMD,TPA,ALPHKWD,BETAKWD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
      DATA OPTMIZ,MD   /8HOPTIMIZE,8HMD      /
C
C     FENGCHAO CUI, HUI LI, MAR 2012, LINCOLN
C     FENGCHAO CUI, HUI LI, JUN 2012 (ADD FREE ENERGY)
C
      IF(NAT.GT.0.AND.NFFAT.GT.0) THEN
C        - GET THE QM/MM TOTAL POTENTIAL ENERGY
C          ETOT, EMP2, ESTATE = E_QM + QM/POL + QM/<MMCH> .
C          FOR MEANFLD, CHG+LJ+COVALENTS ENERGY OF THE MM REGION
C          AND THE LJ ENERGY BETWEEN QM AND MM REGIONS ARE NOT IN
C          ETOT, EMP2, ESTATE.
                              ENQMMM  = ETOT
         IF(MPLEVL.EQ.2)      ENQMMM  = EMP2
         IF(TDDFTYP.NE.RNONE) ENQMMM  = ESTATE(NTHST)
                              ENQMMM2 = ENFFQM2
C
C        - GET THE QM KINETIC ENRGY
         AMU2QM = ZERO
         DO IAT =1, NAT
            DUMY = ZERO
            DO III = 1, 3
               DUMY = DUMY + QMVEL(III,IAT)*QMVEL(III,IAT)
            ENDDO
            AMU2QM = AMU2QM + DUMY*QMZMAS(IAT)
         ENDDO
         ENKINQM = PT5*AMU2QM
C
C        - FORM THE MEANFLD QM/<MM> ENERGY
         ENPMFLD = ENQMMM  + ENPMN   - ENPOLMN
         ENPMFLD2= ENQMMM2 + ENPMN   - ENPOLMN
         ENKMFLD = ENKINQM + ENKMN
         ENTMFLD = ENPMFLD + ENKMFLD
C
C        - FORM FREE ENERGY ITEMS
         IF(IFEPTOP.GT.0.AND.IFEPTYP.GT.0) THEN
            POT1QMMN = (WPERT1-WSIMUL)*(ETOTQB - ETOTQA)
            POT2QMMN = (WPERT2-WSIMUL)*(ETOTQB - ETOTQA)
            IF(MPLEVL.EQ.2)THEN
               POT1QMMN = (WPERT1-WSIMUL)*(EMP2QB - EMP2QA)
               POT2QMMN = (WPERT2-WSIMUL)*(EMP2QB - EMP2QA)
            END IF
            IF(TDDFTYP.NE.RNONE) THEN
               POT1QMMN = (WPERT1-WSIMUL)*(ESTATEQB - ESTATEQA)
               POT2QMMN = (WPERT2-WSIMUL)*(ESTATEQB - ESTATEQA)
            END IF
         END IF
C
C        - TAKE THE AVERAGE AND BOLTZZMAN AVERAGE
         IF(MDSTEPQM.EQ.1) THEN
            ENPMFLDAV = ENPMFLD
            ENPMFLDAV2= ENPMFLD2
            ENKMFLDAV = ENKMFLD
            TEMMFLDAV = TEMMN
            PREMFLDAV = PREMN
            VOLMFLDAV = VOLMN
            POTX1QMMN = POT1QMMN
            POTX2QMMN = POT2QMMN
            FRE1QMMN  = SOLFRE1MN*
     *                  EXP((-POT1QMMN+POTX1QMMN)/(BOLTZK*TEMP0))
            FRE2QMMN  = SOLFRE2MN*
     *                  EXP((-POT2QMMN+POTX2QMMN)/(BOLTZK*TEMP0))
         END IF
         IF(MDSTEPQM.GT.1) THEN
            ENPMFLDAV = (ENPMFLD +ENPMFLDAV *(MDSTEPQM-1))/MDSTEPQM
            ENPMFLDAV2= (ENPMFLD2+ENPMFLDAV2*(MDSTEPQM-1))/MDSTEPQM
            ENKMFLDAV = (ENKMFLD +ENKMFLDAV *(MDSTEPQM-1))/MDSTEPQM
            TEMMFLDAV = (TEMMN   +TEMMFLDAV *(MDSTEPQM-1))/MDSTEPQM
            PREMFLDAV = (PREMN   +PREMFLDAV *(MDSTEPQM-1))/MDSTEPQM
            VOLMFLDAV = (VOLMN   +VOLMFLDAV *(MDSTEPQM-1))/MDSTEPQM
            FRE1QMMN  = (SOLFRE1MN*
     *                  EXP((-POT1QMMN+POTX1QMMN)/(BOLTZK*TEMP0))+
     *                              FRE1QMMN*(MDSTEPQM-1))/MDSTEPQM
            FRE2QMMN  = (SOLFRE2MN*
     *                  EXP((-POT2QMMN+POTX2QMMN)/(BOLTZK*TEMP0))+
     *                              FRE2QMMN*(MDSTEPQM-1))/MDSTEPQM
         END IF
C
         IF(MASWRK) THEN
            WRITE(IW,*)' '
            IF(RUNTYP.EQ.MD)
     *      WRITE(IW,'(1X,A,4X,I8,10X,A,F12.2,A,F12.2,A)')
     *        'MEANFLD QMMM MD STEP',MDSTEPQM,
     *        'TIME= ',(MDSTEPQM-1)*MEANFLD*DT*2.418884326505D-02,
     *        ' TO ',MDSTEPQM*MEANFLD*DT*2.418884326505D-02,
     *        ' FS'
            IF(RUNTYP.EQ.OPTMIZ)
     *      WRITE(IW,'(1X,A,3X,I8,10X,A,F12.2,A,F12.2,A)')
     *        'MEANFLD QMMM OPT STEP',MDSTEPQM,
     *        'TIME= ',(MDSTEPQM-1)*MEANFLD*DT*2.418884326505D-02,
     *        ' TO ',MDSTEPQM*MEANFLD*DT*2.418884326505D-02,
     *        ' FS'
            WRITE(IW,9000)
     *      'MEANFLD POTENTIAL             ENERGY = ', ENPMFLD *TOKCAL
            IF(IDOQM2.EQ.1)
     *      WRITE(IW,9000)
     *      'MEANFLD 2ND POTENTIAL         ENERGY = ', ENPMFLD2*TOKCAL
            WRITE(IW,9000)
     *      'MEANFLD KINETIC               ENERGY = ', ENKMFLD *TOKCAL
            WRITE(IW,9000)
     *      'MEANFLD TOTAL                 ENERGY = ', ENTMFLD *TOKCAL
            WRITE(IW,9001)
     *      'MEANFLD TEMPERATURE                  = ', TEMMN
            WRITE(IW,9002)
     *      'MEANFLD PRESSURE                     = ', PREMN
            IF(VOLMN.LE.1.0D+30)
     *      WRITE(IW,9003)
     *      'MEANFLD VOLUME                       = ',VOLMN*TOANGS**3
C
              WRITE(IW,*)' '
              WRITE(IW,9000)
     *        'AVERAGE MEANFLD POTENTIAL     ENERGY = ',
     *                                               ENPMFLDAV*TOKCAL
              IF(IDOQM2.EQ.1)
     *        WRITE(IW,9000)
     *        'AVERAGE MEANFLD 2ND POTENTIAL ENERGY = ',
     *                                              ENPMFLDAV2*TOKCAL
              WRITE(IW,9000)
     *        'AVERAGE MEANFLD KINETIC       ENERGY = ',
     *                                               ENKMFLDAV*TOKCAL
              WRITE(IW,9000)
     *        'AVERAGE MEANFLD TOTAL         ENERGY = ',
     *                                   (ENPMFLDAV+ENKMFLDAV)*TOKCAL
              WRITE(IW,9001)
     *        'AVERAGE MEANFLD TEMPERATURE          = ',    TEMMFLDAV
              WRITE(IW,9002)
     *        'AVERAGE MEANFLD PRESSURE             = ',    PREMFLDAV
              IF(VOLAV.LE.1.0D+30)
     *        WRITE(IW,9003)
     *        'AVERAGE MEANFLD VOLUME               = ',
     *                                            VOLMFLDAV*TOANGS**3
            IF(IFEPTYP.EQ.1) THEN
              WRITE(IW,*)' '
              WRITE(IW,'(A,F9.6,A,F9.6)')
     *        ' MEANFLD RELATIVE ENERGY:   FROM    WSIMUL= ',WSIMUL,
     *             '    TO    WPERT1= ',WPERT1
              WRITE(IW,9000)
     *        'MEANFLD RELATIVE MM SOLVATION FREE E = ',
     *                            -LOG(SOLFRE1MN)*BOLTZK*TEMP0*TOKCAL
              WRITE(IW,9000)
     *        'MEANFLD MM TO QMMM CORRECTION      E = ',
     *                                                POT1QMMN*TOKCAL
              WRITE(IW,9000)
     *        'MEANFLD RELATIVE QMMM FREE         E = ',
     *                            -LOG(SOLFRE1MN)*BOLTZK*TEMP0*TOKCAL
     *                                               +POT1QMMN*TOKCAL
              WRITE(IW,9000)
     *        'OVERALL MEANFLD RELATIVE QMMM FREE E = ',
     *                             -LOG(FRE1QMMN)*BOLTZK*TEMP0*TOKCAL
     *                                              +POTX1QMMN*TOKCAL
            END IF
            IF(IFEPTYP.EQ.1.AND.WPERT2.NE.WPERT1) THEN
              WRITE(IW,*)' '
              WRITE(IW,'(A,F9.6,A,F9.6)')
     *        ' MEANFLD RELATIVE ENERGY:   FROM    WSIMUL= ',WSIMUL,
     *             '    TO    WPERT2= ',WPERT2
              WRITE(IW,9000)
     *        'MEANFLD RELATIVE MM SOLVATION FREE E = ',
     *                            -LOG(SOLFRE2MN)*BOLTZK*TEMP0*TOKCAL
              WRITE(IW,9000)
     *        'MEANFLD MM TO QMMM CORRECTION      E = ',
     *                                                POT2QMMN*TOKCAL
              WRITE(IW,9000)
     *        'MEANFLD RELATIVE QMMM FREE         E = ',
     *                            -LOG(SOLFRE2MN)*BOLTZK*TEMP0*TOKCAL
     *                                               +POT2QMMN*TOKCAL
              WRITE(IW,9000)
     *        'OVERALL MEANFLD RELATIVE QMMM FREE E = ',
     *                             -LOG(FRE2QMMN)*BOLTZK*TEMP0*TOKCAL
     *                                              +POTX2QMMN*TOKCAL
            END IF
C
            IF(IFEPTYP.EQ.2) THEN
              WRITE(IW,*)' '
              WRITE(IW,*)'RELATIVE ENERGY: FROM $FFDATA TO $FFDATB',
     *                   '              (POTENTIAL OF MEAN FORCE)'
              WRITE(IW,9000)  
     *        'MEANFLD RELATIVE MM SOLVATION FREE E = ',
     *                            -LOG(SOLFRE1MN)*BOLTZK*TEMP0*TOKCAL
              WRITE(IW,9000)         
     *        'MEANFLD MM TO QMMM CORRECTION      E = ',
     *                                     (POT1QMMN-SOL1IMMN)*TOKCAL
              WRITE(IW,9000)
     *        'MEANFLD RELATIVE QMMM FREE         E = ',
     *                            -LOG(SOLFRE1MN)*BOLTZK*TEMP0*TOKCAL
     *                                    +(POT1QMMN-SOL1IMMN)*TOKCAL
              WRITE(IW,9000)
     *        'OVERALL MEANFLD RELATIVE QMMM FREE E = ',
     *                             -LOG(FRE1QMMN)*BOLTZK*TEMP0*TOKCAL
     *                                              +POTX1QMMN*TOKCAL
            END IF
C
            WRITE(IW,*)' '
            CALL TIMIT(1)
            WRITE(IW,*)' '
         END IF
      END IF
C
 9000 FORMAT(1X,A,F30.10,2X,'KCAL/MOL')
 9001 FORMAT(1X,A,F30.10,2X,'K')
 9002 FORMAT(1X,A,F30.10,2X,'BAR')
 9003 FORMAT(1X,A,F30.10,2X,'A**3')
C
      CALL FLSHBF(IW)
C
      RETURN
      END
C*MODULE QUANPO  *DECK TPSTAT
!>                    
!> @brief    T and P scaling
!>    
!> @author   Nandun Thellamurege, Hui Li
!>           - Mar 2011
!>                    
!> @details  scale T and P in MD simulation
!>
      SUBROUTINE TPSTAT(CORD,VEL,QMVEL,ZMAS,QMZMAS,ONEMAS,QM1MAS,
     *                  JDOQM,ISTEP,LISTQM,TEMP,PRES,
     *                  PRESX,PRESY,PRESZ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (TOKELVIN=3.15774646D+05, BOLTZK=1.0D+00/TOKELVIN)
      PARAMETER (ZERO=0.0D+00, PT5=0.50D+00, TWO=2.0D+00,
     *           ONE=1.0D+00)
      PARAMETER (FOURTHIRD=4.0D+00/3.0D+00)
      PARAMETER (ONETHIRD=1.0D+00/3.0D+00)
      PARAMETER (MXATM=2000)
C
      DIMENSION CORD(3,*),VEL(3,*),QMVEL(3,*),ZMAS(*),QMZMAS(*),
     *          ONEMAS(*),QM1MAS(*),LISTQM(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C
      NNNATM = NFFAT + NAT - LISTQM(NFFAT+NAT+1)
      IF(NNNATM.GT.2)     NDOF = 3*NNNATM - 6
      IF(NNNATM.EQ.2)     NDOF = 3*NNNATM - 5
      IF(NRATTLE.GT.0)    NDOF = NDOF - NRATTLE
      IF(XBOX.LT.1.0D+30) NDOF = NDOF + 1
      IF(YBOX.LT.1.0D+30) NDOF = NDOF + 1
      IF(ZBOX.LT.1.0D+30) NDOF = NDOF + 1
      IF(NNNATM.EQ.1)     NDOF = 3
C
C     -- VELOCITY SCALING --
C
      IF(ITSTAT.GT.0) THEN
C
C        -- (1) BERENDSEN THERMOSTAT --
         IF (ITSTAT.EQ.1) THEN
            DUM1  = ZERO
            IF(TEMP.GT.ZERO) DUM1  = TEMP0/TEMP
            DUM2  = DUM1 - 1.0D+00
            ONETT = 2.418884326505D-17/BERENDT
            IF((TEMP-TEMP0).GT.100.0D+00)
     *      ONETT = 0.1D+00/DT
            IF((TEMP-TEMP0).GT.200.0D+00)
     *      ONETT = 1.0D+00/DT
            TFACT = SQRT(1.0D+00 + (DT*ONETT)*DUM2)
            IF(JDOQM.GT.0) THEN
            DO IAT = 1, NAT
               QMVEL(1,IAT) = QMVEL(1,IAT)*TFACT
               QMVEL(2,IAT) = QMVEL(2,IAT)*TFACT
               QMVEL(3,IAT) = QMVEL(3,IAT)*TFACT
               IF(ABS(QMVEL(1,IAT)).GT.VELMAX)
     *                QMVEL(1,IAT) = SIGN(ONE,QMVEL(1,IAT))*VELMAX
               IF(ABS(QMVEL(2,IAT)).GT.VELMAX) 
     *                QMVEL(2,IAT) = SIGN(ONE,QMVEL(2,IAT))*VELMAX
               IF(ABS(QMVEL(3,IAT)).GT.VELMAX) 
     *                QMVEL(3,IAT) = SIGN(ONE,QMVEL(3,IAT))*VELMAX
               IF(LISTQM(NFFAT+IAT).GT.0)THEN
                  IFFAT=LISTQM(NFFAT+IAT)
                  VEL(1,IFFAT)=QMVEL(1,IAT)
                  VEL(2,IFFAT)=QMVEL(2,IAT)
                  VEL(3,IFFAT)=QMVEL(3,IAT)
               END IF
            ENDDO
            END IF
            DO IFFAT = 1, NFFAT
               IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NAT) THEN
                  VEL(1,IFFAT) = VEL(1,IFFAT)*TFACT
                  VEL(2,IFFAT) = VEL(2,IFFAT)*TFACT
                  VEL(3,IFFAT) = VEL(3,IFFAT)*TFACT
                  IF(ABS(VEL(1,IFFAT)).GT.VELMAX) 
     *                   VEL(1,IFFAT) = SIGN(ONE,VEL(1,IFFAT))*VELMAX
                  IF(ABS(VEL(2,IFFAT)).GT.VELMAX)
     *                   VEL(2,IFFAT) = SIGN(ONE,VEL(2,IFFAT))*VELMAX
                  IF(ABS(VEL(3,IFFAT)).GT.VELMAX)
     *                   VEL(3,IFFAT) = SIGN(ONE,VEL(3,IFFAT))*VELMAX
               END IF
            ENDDO
         END IF
C
C        -- (2) ANDERSEN THERMOSTAT --
C
         IF (ITSTAT.EQ.2) THEN
            FREQ   = 0.2D+00
            FACT   = SQRT(DBLE(NDOF)/DBLE(3*NNNATM))
            IF(JDOQM.GT.0) THEN
            DO IAT = 1,NAT
               CALL FFRAND(TEST)
               IF(TEST.LT.FREQ) THEN
                  SIGMA=FACT*SQRT(BOLTZK*TEMP0*QM1MAS(IAT))
                  DO IDIM = 1,3
                     CALL FFRAND(U1)
                     CALL FFRAND(U2)
                     SET=SQRT(-2.0D+00*LOG(U1))*COS(2.0D+00*PI*U2)
                     QMVEL(IDIM,IAT)=SIGMA*SET
                     IF(ABS(QMVEL(IDIM,IAT)).GT.VELMAX)
     *               QMVEL(IDIM,IAT)=SIGN(ONE,QMVEL(IDIM,IAT))*VELMAX
                  ENDDO
               END IF
               IF(LISTQM(NFFAT+IAT).GT.0)THEN
                  IFFAT=LISTQM(NFFAT+IAT)
                  VEL(1,IFFAT)=QMVEL(1,IAT)
                  VEL(2,IFFAT)=QMVEL(2,IAT)
                  VEL(3,IFFAT)=QMVEL(3,IAT)
               END IF
            ENDDO
            END IF
            DO IFFAT = 1,NFFAT
               IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NAT) THEN
                  CALL FFRAND(TEST)
                  IF(TEST.LT.FREQ) THEN
                     SIGMA=FACT*SQRT(BOLTZK*TEMP0*ONEMAS(IFFAT))
                     DO IDIM = 1,3
                        CALL FFRAND(U1)
                        CALL FFRAND(U2)
                        SET=SQRT(-2.0D+00*LOG(U1))*COS(2.0D+00*PI*U2)
                        VEL(IDIM,IFFAT)=SIGMA*SET
                        IF(ABS(VEL(IDIM,IFFAT)).GT.VELMAX) 
     *                  VEL(IDIM,IFFAT)=SIGN(ONE,VEL(IDIM,IFFAT))*
     *                  VELMAX
                     ENDDO
                  END IF
               END IF
            ENDDO
         END IF
C
         ENKIN = ZERO
         DO IAT =1, NAT
            DUMY = ZERO
            DO III = 1, 3
               DUMY = DUMY + QMVEL(III,IAT)*QMVEL(III,IAT)
            ENDDO
            ENKIN = ENKIN + DUMY*QMZMAS(IAT)
         ENDDO
         DO IFFAT = 1, NFFAT
            IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NAT) THEN
               DUMY = ZERO
               DO III = 1,3
                  DUMY = DUMY + VEL(III,IFFAT)*VEL(III,IFFAT)
               ENDDO
               ENKIN = ENKIN + DUMY*ZMAS(IFFAT)
            END IF
         ENDDO
         ENKIN = PT5*ENKIN
         TEMP  = TOKELVIN*TWO*ENKIN/NDOF
C
         IF(MASWRK.AND.(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP)) THEN
            WRITE(IW,9001) 'RESCALED TEMPERATURE    =', TEMP
            WRITE(IW,*)' '
         END IF
      END IF
C
C     -- VOLUME SCALING --
C
      VOL   = MIN(XBOX*YBOX*ZBOX, FOURTHIRD*PI*SPHRAD**3)
      IF(IPSTAT.GT.0 .AND.
     *   VOL.LE.1.0D+30.AND.MIN(XBOX,YBOX,ZBOX).LT.1.0D+30) THEN
         IF(IPSTAT.EQ.1.OR.IPSTAT.EQ.3)THEN
            BETA = 4.9D-05  ! ISOTHERMAL COMPRESSIBILITY OF WATER, BAR-1
            ONETP= 2.418884326505D-17/BERENDP
            DUM1 = MAX(-ONE,(PRES - PRES0)*BETA*(DT*ONETP))
            DUM1X= MAX(-ONE,(PRESX- PRES0)*BETA*(DT*ONETP))
            DUM1Y= MAX(-ONE,(PRESY- PRES0)*BETA*(DT*ONETP))
            DUM1Z= MAX(-ONE,(PRESZ- PRES0)*BETA*(DT*ONETP))
            SFAC = (1.0D+00+DUM1 )**ONETHIRD
            SFACX= (1.0D+00+DUM1X)**ONETHIRD
            SFACY= (1.0D+00+DUM1Y)**ONETHIRD
            SFACZ= (1.0D+00+DUM1Z)**ONETHIRD
            IF(SFAC .GT.1.0001D+00) SFAC =1.0001D+00
            IF(SFACX.GT.1.0001D+00) SFACX=1.0001D+00
            IF(SFACY.GT.1.0001D+00) SFACY=1.0001D+00
            IF(SFACZ.GT.1.0001D+00) SFACZ=1.0001D+00
            IF(SFAC .LT.0.9999D+00) SFAC =0.9999D+00
            IF(SFACX.LT.0.9999D+00) SFACX=0.9999D+00
            IF(SFACY.LT.0.9999D+00) SFACY=0.9999D+00
            IF(SFACZ.LT.0.9999D+00) SFACZ=0.9999D+00
            IF(IPSTAT.EQ.1) THEN
               SFACX = SFAC
               SFACY = SFAC
               SFACZ = SFAC
            END IF
C           -- DO NOT SCALE C FOR MEANFLD IMMM MD --
            IF(NAT.GT.0 .AND. JDOQM.EQ.1) THEN
               CALL DSCAL(3*NAT  ,SFACX,C(1,1),3)
               CALL DSCAL(3*NAT  ,SFACY,C(2,1),3)
               CALL DSCAL(3*NAT  ,SFACZ,C(3,1),3)
            END IF
            IF(NFFAT.GT.0) THEN
               CALL DSCAL(3*NFFAT,SFACX,CORD(1,1),3)
               CALL DSCAL(3*NFFAT,SFACY,CORD(2,1),3)
               CALL DSCAL(3*NFFAT,SFACZ,CORD(3,1),3)
            END IF
            DO IAT = 1, NAT
               IF(LISTQM(NFFAT+IAT).GT.0)THEN
                  IFFAT=LISTQM(NFFAT+IAT)
                  CORD(1,IFFAT)=C(1,IAT)
                  CORD(2,IFFAT)=C(2,IAT)
                  CORD(3,IFFAT)=C(3,IAT)
               END IF
            ENDDO
            XBOX   = XBOX*SFACX
            YBOX   = YBOX*SFACY
            ZBOX   = ZBOX*SFACZ
            ONEXBOX= ONE/XBOX
            ONEYBOX= ONE/YBOX
            ONEZBOX= ONE/ZBOX
         END IF
         IF(GOPARR) THEN
            CALL DDI_BCAST(467,'F',   XBOX,1,MASTER)
            CALL DDI_BCAST(468,'F',   YBOX,1,MASTER)
            CALL DDI_BCAST(469,'F',   ZBOX,1,MASTER)
            CALL DDI_BCAST(470,'F',ONEXBOX,1,MASTER)
            CALL DDI_BCAST(471,'F',ONEYBOX,1,MASTER)
            CALL DDI_BCAST(472,'F',ONEZBOX,1,MASTER)
         END IF
      END IF
C
 9001 FORMAT(1X,A,F30.10,4X,'K')
C
      CALL FLSHBF(IW)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFOPTX
!>                    
!> @brief    QuanPol main driver for geometry optimization
!>    
!> @author   Nandun Thellamurege, Hui Li
!>           - May 2011
!>                    
!> @details  Main driver for geometry optimization and 
!>           saddle point search
!>
      SUBROUTINE FFOPTX
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL LINEAR
C
      PARAMETER (MXATM=2000)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFRE2/ N1FFAT,N1BOND,N1ANGL,N1DIHR,N1DIHB,N1CMAP,N1WAGG,
     *                N2FFAT,N2BOND,N2ANGL,N2DIHR,N2DIHB,N2CMAP,N2WAGG,
     *                LFF2ATMNAM,LFF2CORD,LFF2ZANF,LFF2ZMAS,
     *                LFF2ONEMAS,LFF2CHARG,LFF2POL,
     *                LFF2SIG,LFF2EPS,LFF2SIG2,LFF2EPS2,
     *                LFF2BOND0,LFF2FCBOND,LFF2ANGL0,LFF2FCANGL,
     *                LFF2FCWAGG,LFF2DIHB0,LFF2FCDIHB,
     *                LFF2VROT,LFF2NNN,LFF2GAMA,LFF2IPAIR,
     *                LFF2KLIST,LFF2LLIST,LFF2MLIST,LFF2NLIST,
     *                LFF2VEL,LFF2QMVEL,LFF2CLPR,LFF2ZLPR,
     *                LFF2NLPR,LFF2MAPLST,LFFKFREEA,LFFKFREEB,
     *                LFFLISTB2A,NTODOA,LFFNONLSA,NTODOB,LFFNONLSB,
     *                N1213A,LFFL1213A,N1213B,LFFL1213B,
     *                N14A,LFFL14A,N14B,LFFL14B,
     *                NTODOPMA,LFFNONLSPMA,NBONDPMA,LFFLSBONDPMA,
     *                NANGLPMA,LFFLSANGLPMA,NDIHRPMA,LFFLSDIHRPMA,
     *                NDIHBPMA,LFFLSDIHBPMA,NWAGGPMA,LFFLSWAGGPMA,
     *                NCMAPPMA,LFFLSCMAPPMA,
     *                N1213PMA,LFFL1213PMA,
     *                N14PMA,LFFL14PMA,
     *                NTODOPMB,LFFNONLSPMB,NBONDPMB,LFFLSBONDPMB,
     *                NANGLPMB,LFFLSANGLPMB,NDIHRPMB,LFFLSDIHRPMB,
     *                NDIHBPMB,LFFLSDIHBPMB,NWAGGPMB,LFFLSWAGGPMB,
     *                NCMAPPMB,LFFLSCMAPPMB,
     *                N1213PMB,LFFL1213PMB,
     *                N14PMB,LFFL14PMB
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFMPT2/ MXMMTP,LFFKBLST,LFFFCSTBD,LFFFCDIHR,
     *                LFFFCLJTP,LFFNTYPE,
     *                LFF2KBLST,LFF2FCSTBD,LFF2FCDIHR,
     *                LFF2FCLJTP,LFF2NTYPE
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFUMBR/ UMBFC,UMBR0,UMBSIZE,
     *                NUMBBIN,NUMBATM(6),NUMBTYP,LFFUMBHIS,
     *                UM2FC,UM2R0,UM2SIZE,
     *                NUM2BIN,NUM2ATM(6),NUM2TYP,LFFUM2HIS
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ZMAT  / NZMAT,NZVAR,NVAR,NSYMC,LINEAR
C
      DATA HSSIAN   /8HHESSIAN /
      DATA OPTMIZ   /8HOPTIMIZE/
C
C     NANDUN THELLAMUREGE, HUI LI, MAY 2011, LINCOLN
C
C     -- QUANPOL OPT CANNOT USE INTERNAL COORDINATES
      IF(NZVAR.GT.0) THEN
         IF(MASWRK)WRITE(IW,'(1X,/1X,A,/)')
     *   'ERROR: QUANPOL CANNOT USE INTERNAL COORDINATES.'   
         IF(MASWRK)WRITE(IW,*)' ' 
         CALL ABRT
      END IF
C
      NTS = ISPHSOL
C
      IF(RUNTYP.EQ.OPTMIZ) THEN
      IF(NAT.EQ.0 .AND. NFFAT.GT.0 .AND. IHESS .EQ.0) THEN
         CALL FFOPT1(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFCHARG),X(LFFPOL),X(LFFPOLSV),X(LFFDIP),
     *             X(LFFFIELD1),X(LFFFIELD2),X(LFFFIELD3),
     *             X(LFFSIG),X(LFFEPS),X(LFFSIG2),X(LFFEPS2),
     *             X(LFFBOND0),X(LFFFCBOND),X(LFFFCSTBD),
     *             X(LFFANGL0),X(LFFFCANGL),X(LFFFCWAGG),
     *             X(LFFDIHB0),X(LFFFCDIHB),X(LFFFCDIHR),
     *             X(LFFVROT),X(LFFNNN),X(LFFGAMA),X(LFFIPAIR),
     *             X(LFFKLIST),X(LFFLLIST),X(LFFKBLST),
     *             X(LFFMLIST),X(LFFNLIST),
     *             X(LFFL1213J),X(LFFL14J),X(LFFFFGRD0),
     *             X(LFFFFGRD2),X(LFFFFGRD1),X(LFFFCLJTP),X(LFFNTYPE),
     *             X(LFFXTS),X(LFFYTS),X(LFFZTS),X(LFFCMAT1),
     *             X(LFFPOT1),X(LFFPOT2),X(LFFQRXN1),X(LFFQRXN2),NTS,
     *             X(LFFNONLS1),X(LFFNONLSTQ),
     *             X(LFFMAPLST),X(LFFCMAPCO),
     *             X(LFFLSTCELL),
     *             X(LFFNONLS2),X(LFFCORDSV2),X(LFFCORDSVQ),
     *             X(LFFMVFASTS2),X(LFFMVFASTS3),X(LFFMVFASTS4),
     *             X(LFFMVFASTL2),X(LFFMVFASTL3),X(LFFMVFASTL4),
     *             X(LFFAFIX),X(LFFQFIX),
     *             X(LFFRFIX),X(LFFIDATOM),X(LFFDAI),X(LFFIDDAI),
     *             X(LFFVFIX1),X(LFFVFIX2),
     *             X(LFFXTSFIX),X(LFFYTSFIX),X(LFFZTSFIX),
     *             X(LFFNONLSA),X(LFFNONLSB),X(LFFL1213A),
     *             X(LFFL1213B),X(LFFL14A),X(LFFL14B),
     *             X(LFFKFREEA),X(LFFKFREEB),X(LFFLISTB2A),X(LFF2CHARG),
     *             X(LFF2SIG),X(LFF2EPS),X(LFF2SIG2),X(LFF2EPS2),
     *             X(LFFNONLSPMA),X(LFFL1213PMA),X(LFFL14PMA),
     *             X(LFF2CORD),X(LFFLSBONDPMA),X(LFFLSANGLPMA),
     *             X(LFFLSDIHRPMA),X(LFFLSDIHBPMA),
     *             X(LFFLSWAGGPMA),X(LFFLSCMAPPMA),
     *             X(LFFNONLSPMB),X(LFFL1213PMB),X(LFFL14PMB),
     *             X(LFFLSBONDPMB),X(LFFLSANGLPMB),
     *             X(LFFLSDIHRPMB),X(LFFLSDIHBPMB),
     *             X(LFFLSWAGGPMB),X(LFFLSCMAPPMB),
     *             X(LFFUMBHIS),X(LFFUM2HIS))
      ELSE IF (NAT.GT.0 .AND. NFFAT.GT.0 .AND. IHESS .EQ.0) THEN
         CALL FFOPT2(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFFFGRD0),
     *             X(LFFFFGRD2),X(LFFFFGRD1),X(LFFQMGRD2),X(LFFQMGRD1),
     *             X(LFFQMGRD0),
     *             X(LFFLISTQM),X(LFFNONLS1),X(LFFNONLSTQ),
     *             X(LFFLSTCELL),X(LFFNONLS2),
     *             X(LFFCORDSV2),X(LFFCORDSVQ),
     *             X(LFFMVFASTS2),X(LFFMVFASTS3),X(LFFMVFASTS4),
     *             X(LFFMVFASTL2),X(LFFMVFASTL3),X(LFFMVFASTL4),
     *             X(LFFNONLSA),X(LFFNONLSB),
     *             X(LFFKFREEA),X(LFFKFREEB),X(LFFLISTB2A),
     *             X(LFFNONLSPMA),X(LFFNONLSPMB))
      ELSE IF (NAT.EQ.0 .AND. NFFAT.GT.0 .AND. IHESS .GT.0) THEN
         CALL VALFM(LOADFM)
         LXOLD   = LOADFM + 1
         LXNEW   = LXOLD  + 3*NFFAT
         LAST    = LXNEW  + 3*NFFAT
         NEED    = LAST   - LOADFM -1
         CALL GETFM(NEED)
         CALL FFOPT3(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFZMAS),
     *             X(LFFCHARG),X(LFFPOL),X(LFFPOLSV),X(LFFDIP),
     *             X(LFFFIELD1),X(LFFFIELD2),X(LFFFIELD3),
     *             X(LFFSIG),X(LFFEPS),X(LFFSIG2),X(LFFEPS2),
     *             X(LFFBOND0),X(LFFFCBOND),X(LFFFCSTBD),
     *             X(LFFANGL0),X(LFFFCANGL),X(LFFFCWAGG),
     *             X(LFFDIHB0),X(LFFFCDIHB),X(LFFFCDIHR),
     *             X(LFFVROT),X(LFFNNN),X(LFFGAMA),X(LFFIPAIR),
     *             X(LFFKLIST),X(LFFLLIST),X(LFFKBLST),
     *             X(LFFMLIST),X(LFFNLIST),
     *             X(LFFL1213J),X(LFFL14J),
     *             X(LFFFFGRD2),X(LFFFCLJTP),X(LFFNTYPE),
     *             X(LFFXTS),X(LFFYTS),X(LFFZTS),X(LFFCMAT1),
     *             X(LFFPOT1),X(LFFPOT2),X(LFFQRXN1),X(LFFQRXN2),NTS,
     *             X(LFFNONLS1),X(LFFNONLSTQ),
     *             X(LFFMAPLST),X(LFFCMAPCO),
     *             X(LXNEW),X(LXOLD),
     *             X(LFFLSTCELL),
     *             X(LFFNONLS2),X(LFFCORDSV2),X(LFFCORDSVQ),
     *             X(LFFMVFASTS2),X(LFFMVFASTS3),X(LFFMVFASTS4),
     *             X(LFFMVFASTL2),X(LFFMVFASTL3),X(LFFMVFASTL4),
     *             X(LFFAFIX),X(LFFQFIX),
     *             X(LFFRFIX),X(LFFIDATOM),X(LFFDAI),X(LFFIDDAI),
     *             X(LFFVFIX1),X(LFFVFIX2),
     *             X(LFFXTSFIX),X(LFFYTSFIX),X(LFFZTSFIX),
     *             X(LFFNONLSA),X(LFFNONLSB),X(LFFL1213A),
     *             X(LFFL1213B),X(LFFL14A),X(LFFL14B),
     *             X(LFFKFREEA),X(LFFKFREEB),X(LFFLISTB2A),X(LFF2CHARG),
     *             X(LFF2SIG),X(LFF2EPS),X(LFF2SIG2),X(LFF2EPS2),
     *             X(LFFNONLSPMA),X(LFFL1213PMA),X(LFFL14PMA),
     *             X(LFF2CORD),X(LFFLSBONDPMA),X(LFFLSANGLPMA),
     *             X(LFFLSDIHRPMA),X(LFFLSDIHBPMA),
     *             X(LFFLSWAGGPMA),X(LFFLSCMAPPMA),
     *             X(LFFNONLSPMB),X(LFFL1213PMB),X(LFFL14PMB),
     *             X(LFFLSBONDPMB),X(LFFLSANGLPMB),
     *             X(LFFLSDIHRPMB),X(LFFLSDIHBPMB),
     *             X(LFFLSWAGGPMB),X(LFFLSCMAPPMB),
     *             X(LFFUMBHIS),X(LFFUM2HIS))
         CALL RETFM(NEED)
      ELSE IF (NAT.GT.0 .AND. NFFAT.GT.0 .AND. IHESS .GT.0) THEN
         CALL VALFM(LOADFM)
         LXOLD   = LOADFM + 1
         LXNEW   = LXOLD  + 3*(NFFAT+NAT)
         LAST    = LXNEW  + 3*(NFFAT+NAT)
         NEED    = LAST   - LOADFM -1
         CALL GETFM(NEED)
         CALL FFOPT4(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFZMAS),
     *             X(LFFFFGRD2),X(LFFQMGRD2),
     *             X(LFFLISTQM),X(LFFNONLS1),X(LFFNONLSTQ),
     *             X(LXNEW),X(LXOLD),
     *             X(LFFLSTCELL),X(LFFNONLS2),
     *             X(LFFCORDSV2),X(LFFCORDSVQ),
     *             X(LFFMVFASTS2),X(LFFMVFASTS3),X(LFFMVFASTS4),
     *             X(LFFMVFASTL2),X(LFFMVFASTL3),X(LFFMVFASTL4),
     *             X(LFFNONLSA),X(LFFNONLSB),
     *             X(LFFKFREEA),X(LFFKFREEB),X(LFFLISTB2A),
     *             X(LFFNONLSPMA),X(LFFNONLSPMB))
         CALL RETFM(NEED)
      END IF
      END IF
C
      IF(RUNTYP.EQ.HSSIAN) THEN
      IF(NAT.EQ.0) THEN
         NATVIB  = NFFAT
         IF(NACTMM.GT.0) NATVIB = NACTMM
         CALL VALFM(LOADFM)
         LVIBGRD = LOADFM + 1
         LVIBHSS = LVIBGRD+ 3*NATVIB*3*NATVIB*2
         LVIBDIP = LVIBHSS+ 3*NATVIB*3*NATVIB
         LVIBDDM = LVIBDIP+ 3*3*NATVIB*2
         LAST    = LVIBDDM+ 3*3*NATVIB
         NEED    = LAST   - LOADFM -1
         CALL GETFM(NEED)
         CALL HESSMM(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFZMAS),
     *             X(LFFCHARG),X(LFFPOL),X(LFFPOLSV),X(LFFDIP),
     *             X(LFFFIELD1),X(LFFFIELD2),X(LFFFIELD3),
     *             X(LFFSIG),X(LFFEPS),X(LFFSIG2),X(LFFEPS2),
     *             X(LFFBOND0),X(LFFFCBOND),X(LFFFCSTBD),
     *             X(LFFANGL0),X(LFFFCANGL),X(LFFFCWAGG),
     *             X(LFFDIHB0),X(LFFFCDIHB),X(LFFFCDIHR),
     *             X(LFFVROT),X(LFFNNN),X(LFFGAMA),X(LFFIPAIR),
     *             X(LFFKLIST),X(LFFLLIST),X(LFFKBLST),
     *             X(LFFMLIST),X(LFFNLIST),
     *             X(LFFL1213J),X(LFFL14J),
     *             X(LFFFFGRD2),X(LFFFCLJTP),X(LFFNTYPE),
     *             X(LFFXTS),X(LFFYTS),X(LFFZTS),X(LFFCMAT1),
     *             X(LFFPOT1),X(LFFPOT2),X(LFFQRXN1),X(LFFQRXN2),NTS,
     *             X(LFFNONLS1),X(LFFNONLSTQ),
     *             X(LFFMAPLST),X(LFFCMAPCO),
     *             X(LFFLSTCELL),
     *             X(LFFNONLS2),X(LFFCORDSV2),X(LFFCORDSVQ),
     *             X(LFFMVFASTS2),X(LFFMVFASTS3),X(LFFMVFASTS4),
     *             X(LFFMVFASTL2),X(LFFMVFASTL3),X(LFFMVFASTL4),
     *             X(LFFAFIX),X(LFFQFIX),
     *             X(LFFRFIX),X(LFFIDATOM),X(LFFDAI),X(LFFIDDAI),
     *             X(LFFVFIX1),X(LFFVFIX2),
     *             X(LFFXTSFIX),X(LFFYTSFIX),X(LFFZTSFIX),
     *             X(LFFNONLSA),X(LFFNONLSB),X(LFFL1213A),
     *             X(LFFL1213B),X(LFFL14A),X(LFFL14B),
     *             X(LFFKFREEA),X(LFFKFREEB),X(LFFLISTB2A),X(LFF2CHARG),
     *             X(LFF2SIG),X(LFF2EPS),X(LFF2SIG2),X(LFF2EPS2),
     *             X(LFFNONLSPMA),X(LFFL1213PMA),X(LFFL14PMA),
     *             X(LFF2CORD),X(LFFLSBONDPMA),X(LFFLSANGLPMA),
     *             X(LFFLSDIHRPMA),X(LFFLSDIHBPMA),
     *             X(LFFLSWAGGPMA),X(LFFLSCMAPPMA),
     *             X(LFFNONLSPMB),X(LFFL1213PMB),X(LFFL14PMB),
     *             X(LFFLSBONDPMB),X(LFFLSANGLPMB),
     *             X(LFFLSDIHRPMB),X(LFFLSDIHBPMB),
     *             X(LFFLSWAGGPMB),X(LFFLSCMAPPMB),
     *             X(LFFUMBHIS),X(LFFUM2HIS),
     *             X(LVIBGRD),X(LVIBDIP),X(LVIBHSS),X(LVIBDDM),
     *             NATVIB)
         CALL RETFM(NEED)
      ELSE IF(NAT.GT.0) THEN
         CALL VALFM(LOADFM)
         LVIBGRD = LOADFM + 1
         LVIBHSS = LVIBGRD+ 3*NAT*3*NAT*2
         LVIBDIP = LVIBHSS+ 3*NAT*3*NAT
         LVIBDDM = LVIBDIP+ 3*3*NAT*2
         LAST    = LVIBDDM+ 3*3*NAT
         NEED    = LAST   - LOADFM -1
         CALL GETFM(NEED)
         CALL HESSQM(X(LFFCORD),X(LFFCORDSV),X(LFFDIP),
     *             X(LFFFFGRD2),X(LFFQMGRD2),
     *             X(LFFLISTQM),X(LFFNONLS1),X(LFFNONLSTQ),
     *             X(LFFLSTCELL),X(LFFNONLS2),
     *             X(LFFCORDSV2),X(LFFCORDSVQ),
     *             X(LFFMVFASTS2),X(LFFMVFASTS3),X(LFFMVFASTS4),
     *             X(LFFMVFASTL2),X(LFFMVFASTL3),X(LFFMVFASTL4),
     *             X(LFFNONLSA),X(LFFNONLSB),
     *             X(LFFKFREEA),X(LFFKFREEB),X(LFFLISTB2A),
     *             X(LFFNONLSPMA),X(LFFNONLSPMB),
     *             X(LVIBGRD),X(LVIBDIP),X(LVIBHSS),X(LVIBDDM))
         CALL RETFM(NEED)
      END IF
      END IF
C
      CALL TIMIT(1)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFOPT1
!>                    
!> @brief    pure MM optimization
!>    
!> @author   Hui Li
!>           - Apr 2011
!>                    
!> @details  relaxed steepest descent method
!>
      SUBROUTINE FFOPT1(ATMNAM,CORD,CORDSV,ZANF,
     *                  CHARG,POL,POLSV,DIP,
     *                  FIELD1,FIELD2,FIELD3,
     *                  SIG,EPS,SIG2,EPS2,
     *                  BOND0,FCBOND,FCSTBD,
     *                  ANGL0,FCANGL,FCWAGG,
     *                  DIHB0,FCDIHB,FCDIHR,
     *                  VROT,NNN,GAMA,IPAIR,
     *                  KLIST,LLIST,KBLST,MLIST,NLIST,
     *                  L1213J,L14J,FFGRD0,
     *                  FFGRD2,FFGRD1,FCLJTP,NTYPE,
     *                  XTS,YTS,ZTS,CMAT1,
     *                  POT1,POT2,QRXN1,QRXN2,NTS,
     *                  NONLS1,NONLSTQ,MAPLST,CMAPCO,
     *                  LSTCELL,NONLS2,
     *                  CORDSV2,CORDSVQ,
     *                  MVFASTS2,MVFASTS3,MVFASTS4,
     *                  MVFASTL2,MVFASTL3,MVFASTL4,
     *                  AFIX,QFIX,
     *                  RFIX,IDATOM,DAI,IDDAI,
     *                  VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                  NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                  KFREEA,KFREEB,LISTB2A,CHARGB,
     *                  SIGB,EPSB,SIG2B,EPS2B,
     *                  NONLSPMA,
     *                  L1213PMA,L14PMA,CORDB,
     *                  LSBONDPMA,LSANGLPMA,
     *                  LSDIHRPMA,LSDIHBPMA,
     *                  LSWAGGPMA,LSCMAPPMA,
     *                  NONLSPMB,L1213PMB,L14PMB,
     *                  LSBONDPMB,LSANGLPMB,
     *                  LSDIHRPMB,LSDIHBPMB,
     *                  LSWAGGPMB,LSCMAPPMB,UMBHIS,UM2HIS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL LINEAR,OUT,STPT,PROJCT,GOTEG
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOKCAL=627.509469D+00)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00, THREE=3.0D+00)
C
      CHARACTER*10  ATMNAM
C
      DOUBLE PRECISION METHOD
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          CHARG(NFFAT),
     *          POL(NFFAT),DIP(3,NFFAT),
     *          FIELD1(3,NFFAT),FIELD2(3,NFFAT),FIELD3(3,NFFAT),
     *          SIG(NFFAT),EPS(NFFAT),SIG2(NFFAT),EPS2(NFFAT),
     *          BOND0(NBOND),FCBOND(NBOND),
     *          ANGL0(NANGL),FCANGL(NANGL),
     *          FCWAGG(NWAGG),FCDIHB(NDIHB),FCDIHR(3,*),
     *          VROT(NDIHR),NNN(NDIHR),GAMA(NDIHR),IPAIR(2,NBOND),
     *          KLIST(3,NANGL),
     *          LLIST(4,NDIHR),MLIST(4,NWAGG),
     *          L1213J(2,*),L14J(2,NDIHR),FFGRD0(3,NFFAT),
     *          FFGRD2(3,NFFAT),FFGRD1(3,NFFAT),NTYPE(*),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),CMAT1(NTS,NTS),
     *          POT1(NTS),POT2(NTS),QRXN1(NTS),QRXN2(NTS),NONLS1(2,*),
     *          NONLSTQ(*),MAPLST(6,*),CMAPCO(4,4,24,24,3)
      DIMENSION TIMSTR(3)
      DIMENSION ENALL(100)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /OPTGRD/ XX(3*MXATM),ES,FE(20),
     *                CONVF,FMAXT,DXMAXT,RMAX,RMIN,RLIM,
     *                EIGMAX,EIGMIN,GRDERR,FRMS,FMAX,TRMAX,TRMIN,
     *                IC(20),MSTEP,NSERCH,NPMAX,NP,IFOLOW,
     *                NNEG,IUPHSS,IEXIT,ITRUPD,IPAD,KDIAGH
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ZMAT  / NZMAT,NZVAR,NVAR,NSYMC,LINEAR
C
C     HUI LI, APR 2011, LINCOLN
C
      IF(NSTEP.LT.0) RETURN
C
      CALL SEQOPN(36,'TRAJECT','NEW',.FALSE.,'FORMATTED')
      IF(IADDWAT.EQ.2 .AND. ISPHSOL.GT.0) RSPHSOL=RSPHSOL*1.0D+40
C
      CALL VCLR(FFGRD2,1,3*NFFAT)
      ICONV   = 0
C
C     -- SET SOME CONTROL VARIABLES --
      NCOORD = 3*MXATM
      NCVAL  = NCOORD
      MSTEP  = NSTEP
      NZMAT  = 0
      MODE   = 0
      OUT    = .FALSE.
      MAX2   = NCVAL
C     
      NAT    = MXATM
      CALL SIGINI(MODE,RUNTYP,NCVAL,NCOORD,METHOD,OUT,
     *            GOTEG,NPRT,NPUN,ITBMAT,STPT,STSTEP,
     *            PROJCT,DUMMY,DUMMY,MAX2,NPRTHS)
      NAT    = 0
C
      DO ISTEP = 0, NSTEP
         IF(ISTEP.EQ.100.AND.IADDWAT.EQ.2 .AND. ISPHSOL.GT.0)
     *   RSPHSOL = RSPHSOL*1.0D-40
C
C        -- CALCULATE ENERGY AND GRADIENT
         CALL NONBOND(ISTEP,CORD,CORDSV,CORDSV2,CORDSVQ,
     *                NONLS1,NONLS2,
     *                NONLSTQ,LSTCELL,
     *                MVFASTS2,MVFASTS3,MVFASTS4,
     *                MVFASTL2,MVFASTL3,MVFASTL4,
     *                NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                NONLSPMA,NONLSPMB)
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR,CORDB,
     *               LSBONDPMA,LSBONDPMB)
         CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST,CORDB,
     *               LSANGLPMA,LSANGLPMB)
         CALL E12312(CORD,FFGRD2,ANGL0,KLIST,BOND0,FCSTBD,
     *               KBLST,CORDB,LSANGLPMA,LSANGLPMB)
         CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST,CORDB,
     *               LSDIHBPMA,LSDIHBPMB)
         CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST,CORDB,
     *               LSWAGGPMA,LSWAGGPMB)
         CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST,CORDB,
     *               LSDIHRPMA,LSDIHRPMB,FCDIHR)
         CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO,CORDB,
     *               LSCMAPPMA,LSCMAPPMB)
         CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLS1,
     *               L1213J,SIGB,EPSB,SIG2B,EPS2B,
     *               NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *               NONLSPMA,L1213PMA,L14PMA,CORDB,
     *               NONLSPMB,L1213PMB,L14PMB,FCLJTP,NTYPE)
         CALL ESPHER(CORD,FFGRD2)
         CALL ECHARG(CORD,FFGRD2,CHARG,NONLS1,L1213J,L14J,
     *               CHARGB,NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *               NONLSPMA,L1213PMA,L14PMA,CORDB,
     *               NONLSPMB,L1213PMB,L14PMB)
         CALL UMBRELLA(CORD,FFGRD2,UMBHIS,UM2HIS)
         IF(IFIXSOL.EQ.0) THEN
            CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                  CMAT1,POT1,QRXN1,NTS)
            CALL POLRXN(CORD,FFGRD2,CHARG,POL,POLSV,DIP,
     *                  FIELD1,FIELD2,FIELD3,
     *                  XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *                  NONLS1,L1213J)
         END IF
         IF(IFIXSOL.EQ.1) THEN
            CALL FIXSOL(CORD,FFGRD2,CHARG,ZANF,AFIX,QFIX,
     *                  VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                  RFIX,IDATOM,DAI,IDDAI,
     *                  POL,POLSV,DIP,FIELD1,FIELD2,FIELD3,
     *                  NONLS1,L1213J)
         END IF
         IF(GOPARR) THEN
            ENALL( 1) = EN12
            ENALL( 2) = EN123
            ENALL( 3) = EN123R4
            ENALL( 4) = EN123B4
            ENALL( 5) = EN234W1
            ENALL( 6) = ENCHAR
            ENALL( 7) = ENLJR
            ENALL( 8) = ENLJD
            ENALL(12) = ENUCCH
            ENALL(13) = ENRXN
            ENALL(14) = ENRXNR
C           ENALL(15) = ENCENT
            ENALL(16) = ENCMAP
            ENALL(18) = SOL1CH
            ENALL(19) = SOL1LJ
            ENALL(20) = SOL1IM
            ENALL(21) = SOL2CH
            ENALL(22) = SOL2LJ
            ENALL(23) = SOL2IM
            ENALL(33) = PMF1BD
            ENALL(34) = PMF1AG
            ENALL(35) = PMF1DR
            ENALL(36) = PMF1DB
            ENALL(37) = PMF1WG
            ENALL(38) = PMF1CM
            ENALL(39) = PMF1CH
            ENALL(40) = PMF1LJ
            ENALL(41) = ENBIAS
            ENALL(42) = EN12312
            CALL DDI_GSUMF(2410,ENALL  ,42)
            CALL DDI_GSUMF(2411,FFGRD2,3*NFFAT)
            EN12      = ENALL( 1)
            EN123     = ENALL( 2)
            EN123R4   = ENALL( 3)
            EN123B4   = ENALL( 4)
            EN234W1   = ENALL( 5)
            ENCHAR    = ENALL( 6)
            ENLJR     = ENALL( 7)
            ENLJD     = ENALL( 8)
            ENUCCH    = ENALL(12)
            ENRXN     = ENALL(13)
            ENRXNR    = ENALL(14)
C           ENCENT    = ENALL(15)
            ENCMAP    = ENALL(16)
            SOL1CH    = ENALL(18)
            SOL1LJ    = ENALL(19)
            SOL1IM    = ENALL(20)
            SOL2CH    = ENALL(21)
            SOL2LJ    = ENALL(22)
            SOL2IM    = ENALL(23)
            PMF1BD    = ENALL(33)
            PMF1AG    = ENALL(34)
            PMF1DR    = ENALL(35)
            PMF1DB    = ENALL(36)
            PMF1WG    = ENALL(37)
            PMF1CM    = ENALL(38)
            PMF1CH    = ENALL(39)
            PMF1LJ    = ENALL(40)
            ENBIAS    = ENALL(41)
            EN12312   = ENALL(42)
         END IF
C        
C        - ZERO OFF SOME FORCES -
C
         IF(NACTMM.GT.0) THEN
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0)FFGRD2(1,IFFAT)=FFGRD2(1,IFFAT)+1.0D+03
            ENDDO
            DO IFFAT = 1, NFFAT
               IF(FFGRD2(1,IFFAT).GT.0.5D+03) THEN
                  FFGRD2(1,IFFAT) = FFGRD2(1,IFFAT)-1.0D+03
               ELSE
                  DO III = 1, 3
                     FFGRD2(III,IFFAT) = ZERO
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXMM 
            DO III = 1, 3
               FFGRD2(III,IFIXMM(KFIX)) = ZERO
            ENDDO
         ENDDO
C
C        - TEST CONVERGENCE
C
         GRDMAX = ZERO    
         GRDRMS = ZERO    
         DO IFFAT=1, NFFAT
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(1,IFFAT)))
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(2,IFFAT)))
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(3,IFFAT)))
            GRDRMS=GRDRMS + FFGRD2(1,IFFAT)**2
     *                    + FFGRD2(2,IFFAT)**2
     *                    + FFGRD2(3,IFFAT)**2
         ENDDO
         IF(NACTMM.EQ.0) GRDRMS = SQRT(GRDRMS/(3*(NFFAT-NFIXMM)))
         IF(NACTMM.GT.0) GRDRMS = SQRT(GRDRMS/(3*(NACTMM-NFIXMM)))
         IF(GRDMAX.LT.CONVF.AND.GRDRMS.LT.(CONVF/THREE)) ICONV = 1
C
C        -- CALCULATE PROPERTIES
         IIISTEP=ISTEP
         CALL OPTPROP(IIISTEP,ICONV)
         IF(MASWRK) WRITE(IW,'(A,I6,A,F12.9,A,F12.9,A,F24.10,A)')
     *              ' OPT STEP=',ISTEP,
     *              '  MAX GRAD=',GRDMAX,
     *              '  RMS GRAD=',GRDRMS,
     *              '  E=',ENTOT*TOKCAL,' KCAL/MOL'
C
         CALL TMDATE(TIMSTR)
         IF(MOD(ISTEP,KOUT).EQ.0) CALL TIMIT(1)
         IF(MASWRK .AND. (MOD(ISTEP,KOUT).EQ.0.OR.ISTEP.EQ.NSTEP.OR.
     *      ICONV.EQ.1))THEN
C
            WRITE(36,'(1X,A,I10)')
     *      'RESTART COORDINATES FOR QUANPOL AT OPT STEP',ISTEP
            WRITE(36,'(A,3(A,F15.10,1X),A)')
     *      ' $QUANPO ',
     *      'CENTX=',CENTX*TOANGS,
     *      'CENTY=',CENTY*TOANGS,
     *      'CENTZ=',CENTZ*TOANGS,
     *      '$END'
C
            WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !   OPT STEP',ISTEP
            WRITE(36,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(36,*)'STOP'
            IF(NFFAT.LE.100) THEN
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !   OPT STEP',ISTEP
            WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(IW,*)'STOP'
            END IF
            CALL TIMIT(1)
            CALL FLSHBF(IW)
            CALL FLSHBF(36)
         END IF
C
         IF(ICONV.EQ.1) GOTO 500
C
C        - CALCULATE NEW COORDINATES
         DO 200 IFFAT = 1, NFFAT
            IF((FFGRD2(1,IFFAT)+FFGRD2(2,IFFAT)+FFGRD2(3,IFFAT))
     *         .EQ.ZERO) GOTO 200
            DO II = 1, 3
               DISPLC =  -(0.58D+00*FFGRD2(II,IFFAT)+
     *                     0.28D+00*FFGRD1(II,IFFAT)+
     *                     0.14D+00*FFGRD0(II,IFFAT) )*
     *                     ABS(LOG(ABS(CONVF)+ABS(FFGRD2(II,IFFAT))))
     *                     *0.23D+00
               IF(DISPLC.GT. 0.20D+00) DISPLC = 0.20D+00
               IF(DISPLC.LT.-0.20D+00) DISPLC =-0.20D+00
               CORD(II,IFFAT) = CORD(II,IFFAT) + DISPLC
            ENDDO
  200    CONTINUE
         CALL DCOPY(3*NFFAT,FFGRD1,1,FFGRD0,1)
         CALL DCOPY(3*NFFAT,FFGRD2,1,FFGRD1,1)
C        -- SYNCHRONIZE CORD EVERY 200 STEPS --
         IF(MOD(ISTEP,200).EQ.0) THEN
            IF(GOPARR) THEN
               CALL DDI_BCAST(462,'F',CORD,3*NFFAT,MASTER)
            END IF
         END IF
C
      ENDDO
C
C     -- NOT LOCATED --
C
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'QUANPOL OPTIMIZATION FAILED. ',
     *              'PLEASE RESTART THE JOB USING THE LAST GEOMETRY.'
         WRITE(IW,*)' '
      END IF
      CALL FLSHBF(IW)
      CALL FLSHBF(36)
      CALL SEQCLO(36,'KEEP')
      RETURN
C
C     -- LOCATED --
C
  500 CONTINUE
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'================= QUANPOL OPTIMIZATION',
     *              ' SUCCESSFULLY COMPLETED ================='
         WRITE(IW,*)' '
      END IF
C
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
C
      CALL FLSHBF(IW)
      CALL FLSHBF(36)
      CALL SEQCLO(36,'KEEP')
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFOPT2
!>                      
!> @brief    QM/MM optimization
!>                      
!> @author   Hui Li     
!>           - Apr 2011
!>                    
!> @details  relaxed steepest descent method
!>
      SUBROUTINE FFOPT2(ATMNAM,CORD,CORDSV,ZANF,FFGRD0,
     *                  FFGRD2,FFGRD1,QMGRD2,QMGRD1,QMGRD0,
     *                  LISTQM,NONLS1,NONLSTQ,
     *                  LSTCELL,NONLS2,CORDSV2,CORDSVQ,
     *                  MVFASTS2,MVFASTS3,MVFASTS4,
     *                  MVFASTL2,MVFASTL3,MVFASTL4,
     *                  NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                  NONLSPMA,NONLSPMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL LINEAR,OUT,STPT,PROJCT,GOTEG
C
      PARAMETER (MXATM=2000, MXAO=8192, MXRT=100)
      PARAMETER (TOKCAL=627.509469D+00)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, THREE=3.0D+00)
C
      CHARACTER*10  ATMNAM
C
      DOUBLE PRECISION METHOD
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          FFGRD2(3,NFFAT),FFGRD1(3,NFFAT),QMGRD1(3,NAT),
     *          QMGRD2(3,NAT),LISTQM(*),QMGRD0(3,NAT),FFGRD0(3,NFFAT),
     *          NONLSTQ(*)
      DIMENSION TIMSTR(3)
C
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FFUMBR/ UMBFC,UMBR0,UMBSIZE,
     *                NUMBBIN,NUMBATM(6),NUMBTYP,LFFUMBHIS,
     *                UM2FC,UM2R0,UM2SIZE,
     *                NUM2BIN,NUM2ATM(6),NUM2TYP,LFFUM2HIS
      COMMON /FMCOM / X(1)
      COMMON /FUNCT / E,EG(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /OPTGRD/ XX(3*MXATM),ES,FE(20),
     *                CONVF,FMAXT,DXMAXT,RMAX,RMIN,RLIM,
     *                EIGMAX,EIGMIN,GRDERR,FRMS,FMAX,TRMAX,TRMIN,
     *                IC(20),MSTEP,NSERCH,NPMAX,NP,IFOLOW,
     *                NNEG,IUPHSS,IEXIT,ITRUPD,IPAD,KDIAGH
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ZMAT  / NZMAT,NZVAR,NVAR,NSYMC,LINEAR
C
C     HUI LI, APR 2011, LINCOLN
C
      IF(NSTEP.LT.0) RETURN
C
      CALL SEQOPN(36,'TRAJECT','NEW',.FALSE.,'FORMATTED')
      IF(IADDWAT.EQ.2 .AND. ISPHSOL.GT.0) RSPHSOL=RSPHSOL*1.0D+40
      NPRINT = -5
C
      CALL VCLR(QMGRD2,1,3*NAT  )
      CALL VCLR(FFGRD2,1,3*NFFAT)
      ICONV   = 0
C
C     -- SET SOME CONTROL VARIABLES --
      NCOORD = 3*NAT
      NCVAL  = NCOORD
      MSTEP  = NSTEP
      NZMAT  = 0     
      MODE   = 0
      OUT    = .FALSE.
      MAX2   = NCVAL 
C                    
      CALL SIGINI(MODE,RUNTYP,NCVAL,NCOORD,METHOD,OUT,
     *            GOTEG,NPRT,NPUN,ITBMAT,STPT,STSTEP,
     *            PROJCT,DUMMY,DUMMY,MAX2,NPRTHS)
C
C     -- READY TO TAKE OFF ?
C
      DO ISTEP = 0, NSTEP
         IF(ISTEP.EQ.100.AND.IADDWAT.EQ.2 .AND. ISPHSOL.GT.0)
     *   RSPHSOL = RSPHSOL*1.0D-40
C
C        - CALCULATE ENERGY AND GRADIENT AT NEW COORDINATES
         CALL NONBOND(ISTEP,CORD,CORDSV,CORDSV2,CORDSVQ,
     *                NONLS1,NONLS2,
     *                NONLSTQ,LSTCELL,
     *                MVFASTS2,MVFASTS3,MVFASTS4,
     *                MVFASTL2,MVFASTL3,MVFASTL4,
     *                NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                NONLSPMA,NONLSPMB)
         CALL VCLR(QMGRD2,1,3*NAT  )
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL GRADX
         CALL DCOPY(3*NAT  ,EG,1,QMGRD2,1)
         IF(IFEPTOP.EQ.1.AND.MATOMB.GT.0) THEN
            CALL SAVEABPROP(1)
            CALL DCOPY(3*MATOMA,C,1,X(LFFCX),1)
            CALL SAVEFFDATA
            CALL SETQMAB(2)
            CALL SETFFDATAB(2)
            CALL VCLR(QMGRD2,1,3*NAT  )
            CALL VCLR(FFGRD2,1,3*NFFAT)
            CALL VCLR(VIR   ,1,3)
            CALL GRADX
            CALL DCOPY(3*NAT,EG,1,QMGRD2,1)
            CALL SAVEABPROP(2)
            CALL SETQMAB(1)
            CALL SETFFDATAB(1)
            CALL MIXABPROP
         END IF
         E = ETOT
C        - COMBINE QM AND MM GRADIENTS -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  QMGRD2(1,IAT)   = QMGRD2(1,IAT) + FFGRD2(1,KFFAT)
                  QMGRD2(2,IAT)   = QMGRD2(2,IAT) + FFGRD2(2,KFFAT)
                  QMGRD2(3,IAT)   = QMGRD2(3,IAT) + FFGRD2(3,KFFAT)
                  FFGRD2(1,KFFAT) = QMGRD2(1,IAT)
                  FFGRD2(2,KFFAT) = QMGRD2(2,IAT)
                  FFGRD2(3,KFFAT) = QMGRD2(3,IAT)
               END IF
            ENDDO
         END IF
C        
C        - ZERO OFF SOME FORCES -
C
         IF(NACTQM.GT.0) THEN
            DO KOPT = 1, NACTQM
               IAT = LACTQM(KOPT)
               IF(IAT.GT.0)QMGRD2(1,IAT)=QMGRD2(1,IAT)+1.0D+03
            ENDDO
            DO IAT = 1, NAT
               IF(QMGRD2(1,IAT).GT.0.5D+03) THEN
                  QMGRD2(1,IAT) = QMGRD2(1,IAT)-1.0D+03
               ELSE
                  DO III = 1, 3
                     QMGRD2(III,IAT) = ZERO
                     EG(III,IAT)     = ZERO
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXQM
            DO III = 1, 3
               QMGRD2(III,IFIXQM(KFIX)) = ZERO
            ENDDO
         ENDDO
         IF(NACTMM.GT.0) THEN
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0)FFGRD2(1,IFFAT)=FFGRD2(1,IFFAT)+1.0D+03
            ENDDO
            DO IFFAT = 1, NFFAT
               IF(FFGRD2(1,IFFAT).GT.0.5D+03) THEN
                  FFGRD2(1,IFFAT) = FFGRD2(1,IFFAT)-1.0D+03
               ELSE
                  DO III = 1, 3
                     FFGRD2(III,IFFAT) = ZERO
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXMM
            DO III = 1, 3
               FFGRD2(III,IFIXMM(KFIX)) = ZERO
            ENDDO
         ENDDO
C
C        - TEST CONVERGENCE
C
         GRDMAX = ZERO
         GRDRMS = ZERO
         DO IAT=1, NAT
            GRDMAX=MAX(GRDMAX,ABS(QMGRD2(1,IAT)))
            GRDMAX=MAX(GRDMAX,ABS(QMGRD2(2,IAT)))
            GRDMAX=MAX(GRDMAX,ABS(QMGRD2(3,IAT)))
            GRDRMS=GRDRMS + QMGRD2(1,IAT)**2
     *                    + QMGRD2(2,IAT)**2
     *                    + QMGRD2(3,IAT)**2
         ENDDO
         DO IFFAT=1, NFFAT
            IF(LISTQM(IFFAT).EQ.0) THEN
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(1,IFFAT)))
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(2,IFFAT)))
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(3,IFFAT)))
            GRDRMS=GRDRMS + FFGRD2(1,IFFAT)**2
     *                    + FFGRD2(2,IFFAT)**2
     *                    + FFGRD2(3,IFFAT)**2
            END IF
         ENDDO
         NQMMM = LISTQM(NFFAT+NAT+1)
         MQMMM = 0
         DO KFIX=1,NFIXQM
            IAT = IFIXQM(KFIX)
            IF(LISTQM(NFFAT+IAT).GT.0) MQMMM = MQMMM + 1
         ENDDO
         IF((NACTMM+NACTQM).EQ.0)
     *   GRDRMS = SQRT(GRDRMS/(3*(NAT+NFFAT-NQMMM
     *                           -NFIXQM-NFIXMM+MQMMM)))
         IF((NACTMM+NACTQM).GT.0)
     *   GRDRMS = SQRT(GRDRMS/(3*(NACTMM+NACTQM-NQMMM
     *                           -NFIXMM-NFIXQM+MQMMM)))
         IF(GRDMAX.LT.CONVF.AND.GRDRMS.LT.(CONVF/THREE)) ICONV = 1
C
C        - RESET JUMBPOT=12 R0 -
         IF(NUMBTYP.EQ.12.AND.JUMBUP.NE.0) THEN
            IF(ISTEP.GT.0.AND.MOD(ISTEP,8).EQ.0) THEN
               N1    = NUMBATM(1)
               N2    = NUMBATM(2)
               CX    = CORD(1,N1) - CORD(1,N2)
               CY    = CORD(2,N1) - CORD(2,N2)
               CZ    = CORD(3,N1) - CORD(3,N2)
               R2    = CX*CX + CY*CY + CZ*CZ
               R     = SQRT(R2)
               IF(JUMBUP.GT.0)UMBR0=UMBR0+(UMBR0 - R)
               IF(JUMBUP.LT.0)UMBR0=R    +(R - UMBR0)
               IF(MASWRK) THEN
                  WRITE(IW,'(/1X,A,F10.6/)')
     *            'JUMBPOT=12 R0 IS RESET TO BE ',UMBR0*TOANGS
               END IF
            END IF
            IF(ENBIAS.GT.1.6D-06) ICONV = 0
         END IF
C
C        -- CALCULATE PROPERTIES
         IIISTEP=ISTEP
         CALL OPTPROP(IIISTEP,ICONV)
         IF(MASWRK) WRITE(IW,'(A,I6,A,F24.10,A,F10.7,A,F10.7)')
     *              ' NSERCH=',ISTEP,
     *              '  E=',ENTOT,
     *              '  GRAD. MAX=',GRDMAX,
     *              '  R.M.S.=',GRDRMS
         IF(MASWRK) WRITE(IW,'(A,I6,A,F12.9,A,F12.9,A,F24.10,A)')
     *              ' OPT STEP=',ISTEP,
     *              '  MAX GRAD=',GRDMAX,
     *              '  RMS GRAD=',GRDRMS,
     *              '  E=',ENTOT*TOKCAL,' KCAL/MOL'
C
         CALL TMDATE(TIMSTR)
         IF(MOD(ISTEP,KOUT).EQ.0) CALL TIMIT(1)
         IF(MASWRK .AND. (MOD(ISTEP,KOUT).EQ.0.OR.ISTEP.EQ.NSTEP.OR.
     *      ICONV.EQ.1))THEN
C
            WRITE(36,'(1X,A,I10)')
     *      'RESTART COORDINATES FOR QUANPOL AT OPT STEP',ISTEP
            WRITE(36,'(A,3(A,F15.10,1X),A)')
     *      ' $QUANPO ',
     *      'CENTX=',CENTX*TOANGS,
     *      'CENTY=',CENTY*TOANGS,
     *      'CENTZ=',CENTZ*TOANGS,
     *      '$END'
C
            WRITE(36,*)'$DATA'
            WRITE(36,'(A,3(F8.3,1X),A,I3,A,I10)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,'     AT OPT STEP',ISTEP
            WRITE(36,*)'C1'
            DO IAT = 1, NAT
               WRITE(36,999)ANAM(IAT),ZAN(IAT),
     *         C(1,IAT)*TOANGS,
     *         C(2,IAT)*TOANGS,
     *         C(3,IAT)*TOANGS
            ENDDO
            IF(IFEPTOP.GT.0)THEN
               DO IATB = 1, MATOMB
                  WRITE(36,999)ANAM(MATOMA+IATB),  ! ANAM IS THE ORIGINAL
     *            X(LFFZANX +MATOMA+IATB-1),
     *            X(LFFCX+3*(MATOMA+IATB-1)  )*TOANGS,
     *            X(LFFCX+3*(MATOMA+IATB-1)+1)*TOANGS,
     *            X(LFFCX+3*(MATOMA+IATB-1)+2)*TOANGS
               ENDDO
            END IF
            WRITE(36,*)'$END'
            WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !   OPT STEP',ISTEP
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
               WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$FFDATB          !   OPT STEP',ISTEP
            END IF
            WRITE(36,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(36,*)'STOP'
            IF(NFFAT.LE.100) THEN
            WRITE(IW,*)'$DATA'
            WRITE(IW,'(A,3(F8.3,1X),A,I3,A,I10)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,'     AT OPT STEP',ISTEP
            WRITE(IW,*)'C1'
            DO IAT = 1, NAT
               WRITE(IW,999)ANAM(IAT),ZAN(IAT),
     *         C(1,IAT)*TOANGS,
     *         C(2,IAT)*TOANGS,
     *         C(3,IAT)*TOANGS
            ENDDO
            IF(IFEPTOP.GT.0)THEN
               DO IATB = 1, MATOMB
                  WRITE(IW,999)ANAM(MATOMA+IATB),  ! ANAM IS THE ORIGINAL
     *            X(LFFZANX +MATOMA+IATB-1),
     *            X(LFFCX+3*(MATOMA+IATB-1)  )*TOANGS,
     *            X(LFFCX+3*(MATOMA+IATB-1)+1)*TOANGS,
     *            X(LFFCX+3*(MATOMA+IATB-1)+2)*TOANGS
               ENDDO
            END IF
            WRITE(IW,*)'$END'
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !   OPT STEP',ISTEP
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
               WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$FFDATB          !   OPT STEP',ISTEP
            END IF
            WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(IW,*)'STOP'
            END IF
            IF(NFFAT.GT.100.AND.NACTMM.GT.0) THEN
            WRITE(IW,*)'$DATA         ! THESE ARE LACTMM ATOMS'
            WRITE(IW,'(A,3(F8.3,1X),A,I3,A,I10)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,'     AT OPT STEP',ISTEP
            WRITE(IW,*)'C1'
            DO IAT = 1, NAT
               ZCHG = ZAN(IAT)
               IF(LISTQM(NFFAT+IAT).GT.0)THEN
                  ZCHG = ZANF(LISTQM(NFFAT+IAT))
               END IF
               CX    = C(1,IAT) - QMCX
               CY    = C(2,IAT) - QMCY
               CZ    = C(3,IAT) - QMCZ
               PBCX  = XBOX*ANINT(CX*ONEXBOX)
               PBCY  = YBOX*ANINT(CY*ONEYBOX)
               PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
               CX    = CX - PBCX + QMCX
               CY    = CY - PBCY + QMCY
               CZ    = CZ - PBCZ + QMCZ
               WRITE(IW,999)ANAM(IAT),ZCHG,
     *         CX*TOANGS,
     *         CY*TOANGS,
     *         CZ*TOANGS
            ENDDO
            DO I=1,NACTMM
               IFFAT  = LACTMM(I)
               IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NAT) THEN
                  CX    = CORD(1,IFFAT) - QMCX
                  CY    = CORD(2,IFFAT) - QMCY
                  CZ    = CORD(3,IFFAT) - QMCZ
                  PBCX  = XBOX*ANINT(CX*ONEXBOX)
                  PBCY  = YBOX*ANINT(CY*ONEYBOX)
                  PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
                  CX    = CORD(1,IFFAT) - PBCX
                  CY    = CORD(2,IFFAT) - PBCY
                  CZ    = CORD(3,IFFAT) - PBCZ
                  WRITE(IW,999)ATMNAM(IFFAT)(1:8),ZANF(IFFAT),
     *            CX*TOANGS,
     *            CY*TOANGS,
     *            CZ*TOANGS
               END IF
            ENDDO
            WRITE(IW,*)'$END'
            END IF
            CALL TIMIT(1)
            CALL FLSHBF(IW)
            CALL FLSHBF(36)
         END IF
C
         IF(ICONV.EQ.1) GOTO 500
C
C        - CALCULATE NEW COORDINATES
         DO 201 IAT = 1, NAT
            IF((QMGRD2(1,IAT)+QMGRD2(2,IAT)+QMGRD2(3,IAT))
     *         .EQ.ZERO) GOTO 201
            DO II = 1, 3
               DISPLC =  -(0.58D+00*QMGRD2(II,IAT)+
     *                     0.28D+00*QMGRD1(II,IAT)+
     *                     0.14D+00*QMGRD0(II,IAT) )*
     *                     ABS(LOG(ABS(CONVF)+ABS(QMGRD2(II,IAT))))
     *                     *0.23D+00
               IF(DISPLC.GT. 0.20D+00) DISPLC = 0.20D+00
               IF(DISPLC.LT.-0.20D+00) DISPLC =-0.20D+00
               C(II,IAT) = C(II,IAT) + DISPLC
            ENDDO
  201    CONTINUE
         CALL DCOPY(3*NAT,QMGRD1,1,QMGRD0,1)
         CALL DCOPY(3*NAT,QMGRD2,1,QMGRD1,1)
         DO 200 IFFAT = 1, NFFAT
            IF((FFGRD2(1,IFFAT)+FFGRD2(2,IFFAT)+FFGRD2(3,IFFAT))
     *         .EQ.ZERO) GOTO 200
            DO II = 1, 3
               DISPLC =  -(0.58D+00*FFGRD2(II,IFFAT)+
     *                     0.28D+00*FFGRD1(II,IFFAT)+
     *                     0.14D+00*FFGRD0(II,IFFAT) )*
     *                     ABS(LOG(ABS(CONVF)+ABS(FFGRD2(II,IFFAT))))
     *                     *0.23D+00
               IF(DISPLC.GT. 0.20D+00) DISPLC = 0.20D+00
               IF(DISPLC.LT.-0.20D+00) DISPLC =-0.20D+00
               CORD(II,IFFAT) = CORD(II,IFFAT) + DISPLC
            ENDDO
  200    CONTINUE
         CALL DCOPY(3*NFFAT,FFGRD1,1,FFGRD0,1)
         CALL DCOPY(3*NFFAT,FFGRD2,1,FFGRD1,1)
C        -- SYNCHRONIZE CORD EVERY STEP --
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  C(1,IAT) = CORD(1,KFFAT)
                  C(2,IAT) = CORD(2,KFFAT)
                  C(3,IAT) = CORD(3,KFFAT)
               END IF
            ENDDO
         END IF
         IF(GOPARR) THEN
            CALL DDI_BCAST(461,'F',C,3*NAT,MASTER)
            CALL DDI_BCAST(462,'F',CORD,3*NFFAT,MASTER)
         END IF
C           
C        -- ADJUST QMCX,Y,Z ON THE FLY --
C           ALSO UPDATE LQMCT
C           (DO THIS ONLY WHEN PBC AND SWRB2 ARE USED)
         IF(SWRB2.LT.1.0D+08) THEN
            XMAX = -1.0D+30
            YMAX = -1.0D+30
            ZMAX = -1.0D+30
            XMIN =  1.0D+30
            YMIN =  1.0D+30 
            ZMIN =  1.0D+30
            DO IAT = 1,NAT
               XMAX = MAX(XMAX,C(1,IAT))
               YMAX = MAX(YMAX,C(2,IAT))
               ZMAX = MAX(ZMAX,C(3,IAT))
               XMIN = MIN(XMIN,C(1,IAT))
               YMIN = MIN(YMIN,C(2,IAT))
               ZMIN = MIN(ZMIN,C(3,IAT))
            ENDDO
            QMSIZE = ZERO
            QMSIZE = MAX(QMSIZE,XMAX-XMIN)
            QMSIZE = MAX(QMSIZE,YMAX-YMIN)
            QMSIZE = MAX(QMSIZE,ZMAX-ZMIN)
            QMSIZE = QMSIZE*1.732D+00
            QMCX   = (XMAX+XMIN)*PT5
            QMCY   = (YMAX+YMIN)*PT5
            QMCZ   = (ZMAX+ZMIN)*PT5
            R2NEAR = 100.0D+00
            NEAR   = 0
            DO IAT = 1,NAT
               XI = C(1,IAT) - QMCX
               YI = C(2,IAT) - QMCY
               ZI = C(3,IAT) - QMCZ
               R2 = XI**2 + YI**2 + ZI**2
               IF(R2.LT.R2NEAR) THEN
                  R2NEAR = R2
                  NEAR   = IAT
               END IF
            ENDDO
            LQMCT = NEAR
            IF(MASWRK) WRITE(IW,'(A,3(F16.10,1X),A,I4,A,I7)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,' AT STEP ',ISTEP+1
         END IF
      ENDDO
C
C     -- NOT LOCATED --
C
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'QUANPOL OPTIMIZATION FAILED. ',
     *              'PLEASE RESTART THE JOB USING THE LAST GEOMETRY.'
         WRITE(IW,*)' '
      END IF
      CALL FLSHBF(IW)
      CALL FLSHBF(36)
      CALL SEQCLO(36,'KEEP')
      RETURN
C
C     -- LOCATED --
C
  500 CONTINUE
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'================= QUANPOL OPTIMIZATION',
     *              ' SUCCESSFULLY COMPLETED ================='
         WRITE(IW,*)' '
      END IF
C
  999 FORMAT(1X,A8,3X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
C
      CALL FLSHBF(IW)
      CALL FLSHBF(36)
      CALL SEQCLO(36,'KEEP')
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFOPT3
!>                      
!> @brief    pure MM optimization
!>                      
!> @author   Nandun Thellamurege
!>           - May 2011
!>                    
!> @details  BFGS Hessian method
!>
      SUBROUTINE FFOPT3(ATMNAM,CORD,CORDSV,ZANF,
     *                  ZMAS,CHARG,POL,POLSV,DIP,
     *                  FIELD1,FIELD2,FIELD3,
     *                  SIG,EPS,SIG2,EPS2,
     *                  BOND0,FCBOND,FCSTBD,
     *                  ANGL0,FCANGL,FCWAGG,
     *                  DIHB0,FCDIHB,FCDIHR,
     *                  VROT,NNN,GAMA,IPAIR,
     *                  KLIST,LLIST,KBLST,MLIST,NLIST,
     *                  L1213J,L14J,
     *                  FFGRD2,FCLJTP,NTYPE,
     *                  XTS,YTS,ZTS,CMAT1,
     *                  POT1,POT2,QRXN1,QRXN2,NTS,
     *                  NONLS1,NONLSTQ,MAPLST,CMAPCO,
     *                  CRDNEW,CRDOLD,
     *                  LSTCELL,NONLS2,CORDSV2,CORDSVQ,
     *                  MVFASTS2,MVFASTS3,MVFASTS4,
     *                  MVFASTL2,MVFASTL3,MVFASTL4,
     *                  AFIX,QFIX,
     *                  RFIX,IDATOM,DAI,IDDAI,
     *                  VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                  NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                  KFREEA,KFREEB,LISTB2A,CHARGB,
     *                  SIGB,EPSB,SIG2B,EPS2B,
     *                  NONLSPMA,
     *                  L1213PMA,L14PMA,CORDB,
     *                  LSBONDPMA,LSANGLPMA,
     *                  LSDIHRPMA,LSDIHBPMA,
     *                  LSWAGGPMA,LSCMAPPMA,
     *                  NONLSPMB,L1213PMB,L14PMB,
     *                  LSBONDPMB,LSANGLPMB,
     *                  LSDIHRPMB,LSDIHBPMB,
     *                  LSWAGGPMB,LSCMAPPMB,UMBHIS,UM2HIS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL CVGED,OUT,STPT,PROJCT,GOTEG
C
      PARAMETER (MXATM=2000, MXAO=8192, MXFRG=1050)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00)
C
      CHARACTER*10  ATMNAM
C
      DOUBLE PRECISION METHOD
      LOGICAL LINEAR
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          ZMAS(NFFAT),
     *          CHARG(NFFAT),POL(NFFAT),DIP(3,NFFAT),
     *          FIELD1(3,NFFAT),FIELD2(3,NFFAT),FIELD3(3,NFFAT),
     *          SIG(NFFAT),EPS(NFFAT),SIG2(NFFAT),EPS2(NFFAT),
     *          BOND0(NBOND),FCBOND(NBOND),
     *          ANGL0(NANGL),FCANGL(NANGL),
     *          FCWAGG(NWAGG),DIHB0(NDIHB),FCDIHB(NDIHB),FCDIHR(3,*),
     *          VROT(NDIHR),NNN(NDIHR),GAMA(NDIHR),IPAIR(2,NBOND),
     *          KLIST(3,NANGL),
     *          LLIST(4,NDIHR),MLIST(4,NWAGG),
     *          L1213J(2,*),L14J(2,NDIHR),
     *          FFGRD2(3,NFFAT),NTYPE(*),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),CMAT1(NTS,NTS),
     *          POT1(NTS),POT2(NTS),QRXN1(NTS),QRXN2(NTS),NONLS1(2,*),
     *          NONLSTQ(*),MAPLST(6,*),CMAPCO(4,4,24,24,3),
     *          CRDNEW(*)
      DIMENSION TIMSTR(3)
      DIMENSION ENALL(100)
C
      COMMON /DLCFRZ/ FVALUE(50),ITABLE(50),IFTYPE(50),NCONST
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FMCOM / X(1)
      COMMON /FUNCT / E,EG(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /MASSES/ ZMASS(MXATM)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /OPTGRD/ XX(3,MXATM),ES,FE(20),
     *                CONVF,FMAXT,DXMAXT,RMAX,RMIN,RLIM,
     *                EIGMAX,EIGMIN,GRDERR,FRMS,FMAX,TRMAX,TRMIN,
     *                IC(20),MSTEP,NSERCH,NPMAX,NP,IFOLOW,
     *                NNEG,IUPHSS,IEXIT,ITRUPD,IPAD,KDIAGH
      COMMON /OPTEF / D(3*MXATM+6*MXFRG),OLDF(3*MXATM+6*MXFRG),
     *                VMODE(3*MXATM+6*MXFRG),RADIUS
      COMMON /ZMAT  / NZMAT,NZVAR,NVAR,NSYMC,LINEAR
      COMMON /ZMTALT/ NZMAT2,NZVAR2,NVAR2,NZMTRD,ICOORD
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
      COMMON /FROZNC/ IFREEZ(3*MXATM),NFRZ
C
      DATA BLANK/8H        /
C
C     NANDUN THELLAMUREGE, MAY 2011, LINCOLN
C     HUI LI, MAY 6, 2014, USE LACTMM AND PRJGRD
C
      IF(NSTEP.LT.0) RETURN
C
      CALL SEQOPN(36,'TRAJECT','NEW',.FALSE.,'FORMATTED')
      CALL SEQOPN(39,'OPTHES1','NEW',.FALSE.,'FORMATTED')
      CALL SEQOPN(40,'OPTHES2','NEW',.FALSE.,'FORMATTED')
      IF(IADDWAT.EQ.2 .AND. ISPHSOL.GT.0) RSPHSOL=RSPHSOL*1.0D+40
C
C     -- DEFINE INFOA VARIABLES --
      IF(NACTMM.EQ.0) THEN
         NCOORD = 3*NFFAT
         NCVAL  = NCOORD
         CALL DCOPY(3*NFFAT,CORD,1,C,1)
         CALL DCOPY(NFFAT,ZANF,1,ZAN,1)
         DO IFFAT =1,NFFAT
            READ(UNIT=ATMNAM(IFFAT)(1:8),FMT='(A8)') ANAM(IFFAT)
            BNAM(IFFAT)=BLANK
            ZMASS(IFFAT)=ZMAS(IFFAT)/1822.88850204D+00
         ENDDO
      ELSE
         NCOORD = 3*NACTMM
         NCVAL  = NCOORD
         DO I=1,NACTMM
            IFFAT  = LACTMM(I)
            C(1,I) = CORD(1,IFFAT)
            C(2,I) = CORD(2,IFFAT)
            C(3,I) = CORD(3,IFFAT)
            ZAN(I) = ZANF(IFFAT)
            READ(UNIT=ATMNAM(IFFAT)(1:8),FMT='(A8)') ANAM(I)
            BNAM(I)=BLANK
            ZMASS(I)=ZMAS(IFFAT)/1822.88850204D+00
         ENDDO
      END IF
C
C     -- SET SOME CONTROL VARIABLES --
      MSTEP  = NSTEP
      NZMAT  = 0
      NFRZ   = 0
      NCONST = 0
      ICOORD = 8
      CVGED  = .FALSE.
      MODE   = 0
      OUT    = .FALSE.
      MAX2   = NCVAL
C
      NAT    = NFFAT
      IF(NACTMM.GT.0) NAT = NACTMM
      CALL SIGINI(MODE,RUNTYP,NCVAL,NCOORD,METHOD,OUT,
     *            GOTEG,NPRT,NPUN,ITBMAT,STPT,STSTEP,
     *            PROJCT,DUMMY,DUMMY,MAX2,NPRTHS)
      NAT    = 0
C
      DO ISTEP = 0, NSTEP
         NSERCH= ISTEP
         IF(ISTEP.EQ.100.AND.IADDWAT.EQ.2 .AND. ISPHSOL.GT.0)
     *   RSPHSOL = RSPHSOL*1.0D-40
C
         NPUN = -1
         IF(MOD(ISTEP,KOUT).EQ.0 .OR. ISTEP.EQ.NSTEP) NPUN = -1
C
C        -- CALCULATE ENERGY AND GRADIENT
         CALL NONBOND(ISTEP,CORD,CORDSV,CORDSV2,CORDSVQ,
     *                NONLS1,NONLS2,
     *                NONLSTQ,LSTCELL,
     *                MVFASTS2,MVFASTS3,MVFASTS4,
     *                MVFASTL2,MVFASTL3,MVFASTL4,
     *                NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                NONLSPMA,NONLSPMB)
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR,CORDB,
     *               LSBONDPMA,LSBONDPMB)
         CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST,CORDB,
     *               LSANGLPMA,LSANGLPMB)
         CALL E12312(CORD,FFGRD2,ANGL0,KLIST,BOND0,FCSTBD,
     *               KBLST,CORDB,LSANGLPMA,LSANGLPMB)
         CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST,CORDB,
     *               LSDIHBPMA,LSDIHBPMB)
         CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST,CORDB,
     *               LSWAGGPMA,LSWAGGPMB)
         CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST,CORDB,
     *               LSDIHRPMA,LSDIHRPMB,FCDIHR)
         CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO,CORDB,
     *               LSCMAPPMA,LSCMAPPMB)
         CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLS1,
     *               L1213J,SIGB,EPSB,SIG2B,EPS2B,
     *               NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *               NONLSPMA,L1213PMA,L14PMA,CORDB,
     *               NONLSPMB,L1213PMB,L14PMB,FCLJTP,NTYPE)
         CALL ESPHER(CORD,FFGRD2)
         CALL ECHARG(CORD,FFGRD2,CHARG,NONLS1,L1213J,L14J,
     *               CHARGB,NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *               NONLSPMA,L1213PMA,L14PMA,CORDB,
     *               NONLSPMB,L1213PMB,L14PMB)
         CALL UMBRELLA(CORD,FFGRD2,UMBHIS,UM2HIS)
         IF(IFIXSOL.EQ.0) THEN
            CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                  CMAT1,POT1,QRXN1,NTS)
            CALL POLRXN(CORD,FFGRD2,CHARG,POL,POLSV,DIP,
     *                  FIELD1,FIELD2,FIELD3,
     *                  XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *                  NONLS1,L1213J)
         END IF
         IF(IFIXSOL.EQ.1) THEN
            CALL FIXSOL(CORD,FFGRD2,CHARG,ZANF,AFIX,QFIX,
     *                  VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                  RFIX,IDATOM,DAI,IDDAI,
     *                  POL,POLSV,DIP,FIELD1,FIELD2,FIELD3,
     *                  NONLS1,L1213J)
         END IF
         IF(GOPARR) THEN
            ENALL( 1) = EN12
            ENALL( 2) = EN123
            ENALL( 3) = EN123R4
            ENALL( 4) = EN123B4
            ENALL( 5) = EN234W1
            ENALL( 6) = ENCHAR
            ENALL( 7) = ENLJR
            ENALL( 8) = ENLJD
            ENALL(12) = ENUCCH
            ENALL(13) = ENRXN
            ENALL(14) = ENRXNR
C           ENALL(15) = ENCENT
            ENALL(16) = ENCMAP
            ENALL(18) = SOL1CH
            ENALL(19) = SOL1LJ
            ENALL(20) = SOL1IM
            ENALL(21) = SOL2CH
            ENALL(22) = SOL2LJ
            ENALL(23) = SOL2IM
            ENALL(33) = PMF1BD
            ENALL(34) = PMF1AG
            ENALL(35) = PMF1DR
            ENALL(36) = PMF1DB
            ENALL(37) = PMF1WG
            ENALL(38) = PMF1CM
            ENALL(39) = PMF1CH
            ENALL(40) = PMF1LJ
            ENALL(41) = ENBIAS
            ENALL(42) = EN12312
            CALL DDI_GSUMF(2410,ENALL  ,42)
            CALL DDI_GSUMF(2411,FFGRD2,3*NFFAT)
            EN12      = ENALL( 1)
            EN123     = ENALL( 2)
            EN123R4   = ENALL( 3)
            EN123B4   = ENALL( 4)
            EN234W1   = ENALL( 5)
            ENCHAR    = ENALL( 6)
            ENLJR     = ENALL( 7)
            ENLJD     = ENALL( 8)
            ENUCCH    = ENALL(12)
            ENRXN     = ENALL(13)
            ENRXNR    = ENALL(14)
C           ENCENT    = ENALL(15)
            ENCMAP    = ENALL(16)
            SOL1CH    = ENALL(18)
            SOL1LJ    = ENALL(19)
            SOL1IM    = ENALL(20)
            SOL2CH    = ENALL(21)
            SOL2LJ    = ENALL(22)
            SOL2IM    = ENALL(23)
            PMF1BD    = ENALL(33)
            PMF1AG    = ENALL(34)
            PMF1DR    = ENALL(35)
            PMF1DB    = ENALL(36)
            PMF1WG    = ENALL(37)
            PMF1CM    = ENALL(38)
            PMF1CH    = ENALL(39)
            PMF1LJ    = ENALL(40)
            ENBIAS    = ENALL(41)
            EN12312   = ENALL(42)
         END IF
C
C        - ZERO OFF SOME FORCES -
C
         IF(NACTMM.GT.0) THEN
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0)FFGRD2(1,IFFAT)=FFGRD2(1,IFFAT)+1.0D+03
            ENDDO
            DO IFFAT = 1, NFFAT
               IF(FFGRD2(1,IFFAT).GT.0.5D+03) THEN
                  FFGRD2(1,IFFAT) = FFGRD2(1,IFFAT)-1.0D+03
               ELSE
                  DO III = 1, 3
                     FFGRD2(III,IFFAT) = ZERO
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXMM
            DO III = 1, 3
               FFGRD2(III,IFIXMM(KFIX)) = ZERO
            ENDDO
         ENDDO
C
C        -- PRINT COORDINATES --
  499    CONTINUE
         CALL TMDATE(TIMSTR)
         IF(MASWRK .AND. (MOD(ISTEP,KOUT).EQ.0.OR.ISTEP.EQ.NSTEP.OR.
     *                    CVGED))THEN
C
            WRITE(36,'(1X,A,I10)')
     *      'RESTART COORDINATES FOR QUANPOL AT OPT STEP',ISTEP
            WRITE(36,'(A,3(A,F15.10,1X))')
     *      ' $QUANPO ',
     *      'CENTX=',CENTX*TOANGS,
     *      'CENTY=',CENTY*TOANGS,
     *      'CENTZ=',CENTZ*TOANGS
            WRITE(36,*)'$END'
C
            WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !   OPT STEP',ISTEP
            WRITE(36,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(36,*)'STOP'
            IF(NFFAT.LE.100) THEN
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !   OPT STEP',ISTEP
            WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(IW,*)'STOP'
            END IF
            CALL TIMIT(1)
            CALL FLSHBF(IW)
            CALL FLSHBF(36)
         END IF
         IF(CVGED) GOTO 500
C
C        -- CALCULATE PROPERTIES
         NAT = 0
         IIISTEP=ISTEP
         CALL OPTPROP(IIISTEP,1)
         NAT = NFFAT
         IF(NACTMM.GT.0) NAT = NACTMM
         E= ENPOT
C
         IF(NACTMM.EQ.0) THEN
            CALL DCOPY(3*NFFAT,CORD,1,C,1)
            CALL DCOPY(3*NFFAT,FFGRD2,1,EG,1)
            CALL DCOPY(3*NFFAT,C,1,XX,1)
         ELSE
            DO I=1,NACTMM
               IFFAT = LACTMM(I)
               C(1,I)  = CORD(1,IFFAT)
               C(2,I)  = CORD(2,IFFAT)
               C(3,I)  = CORD(3,IFFAT)
               EG(1,I) = FFGRD2(1,IFFAT)
               EG(2,I) = FFGRD2(2,IFFAT)
               EG(3,I) = FFGRD2(3,IFFAT)
               XX(1,I) = C(1,I) 
               XX(2,I) = C(2,I)
               XX(3,I) = C(3,I)
            ENDDO
         END IF
         PROJCT=.FALSE.
         CALL DISPLC(CVGED,CRDOLD,CRDNEW,NCVAL,NCOORD,
     *               NPUN,OUT,METHOD,ITBMAT,STPT,STSTEP,PROJCT,RUNTYP)
C
         CALL VALFM(LOADFM)
         LHESS   = LOADFM + 1
         LAST    = LHESS + NCOORD*NCOORD
         NEED    = LAST   - LOADFM -1
         CALL GETFM(NEED)
         IPSV2=IP
         CALL DAREAD(IDAF,IODA,X(LHESS),NCOORD*NCOORD,4,0)
         IF(MOD(ISTEP,2).EQ.0) THEN
            CALL SEQCLO(39,'DELETE')
            CALL SEQOPN(39,'OPTHES1','NEW',.FALSE.,'FORMATTED')
            IP=39
         END IF
         IF(MOD(ISTEP,2).EQ.1) THEN 
            CALL SEQCLO(40,'DELETE')
            CALL SEQOPN(40,'OPTHES2','NEW',.FALSE.,'FORMATTED')
            IP=40
         END IF
         IF(MASWRK) WRITE(IP,*) 'THE APPROXIMATE HESSIAN IS'
         CALL FCMPUN(X(LHESS),NCOORD)
         CALL FLSHBF(IP)
         IP=IPSV2
         CALL RETFM(NEED)
C
         IF(CVGED) THEN
            IF(MOD(ISTEP,KOUT).EQ.0.OR.ISTEP.EQ.NSTEP) THEN
               GOTO 500
            ELSE     
               GOTO 499  ! MAKE IT UP
            END IF
         END IF
C
C        -- UPDATE THE NUCLEAR COORDINATES --
C
         CALL DCOPY(NCVAL,EG,1,OLDF,1)
         CALL SYMDR(CRDNEW)
         IF(NACTMM.EQ.0) THEN
            DO 200 IFFAT =1,NFFAT
               IF((FFGRD2(1,IFFAT)+FFGRD2(2,IFFAT)+FFGRD2(3,IFFAT))
     *            .EQ.ZERO) GOTO 200
               C(1,IFFAT)=C(1,IFFAT) + CRDNEW(IFFAT*3-2)
               C(2,IFFAT)=C(2,IFFAT) + CRDNEW(IFFAT*3-1)
               C(3,IFFAT)=C(3,IFFAT) + CRDNEW(IFFAT*3  )
               CORD(1,IFFAT)=C(1,IFFAT)
               CORD(2,IFFAT)=C(2,IFFAT)
               CORD(3,IFFAT)=C(3,IFFAT)
  200       CONTINUE
         ELSE
            DO 202 I=1,NACTMM
               IFFAT = LACTMM(I)
               IF((FFGRD2(1,IFFAT)+FFGRD2(2,IFFAT)+FFGRD2(3,IFFAT))
     *            .EQ.ZERO) GOTO 202
               C(1,I)  = C(1,I) + CRDNEW(I*3-2)
               C(2,I)  = C(2,I) + CRDNEW(I*3-1)
               C(3,I)  = C(3,I) + CRDNEW(I*3  )
               CORD(1,IFFAT) = C(1,I)
               CORD(2,IFFAT) = C(2,I)
               CORD(3,IFFAT) = C(3,I)
  202       CONTINUE
         END IF
C
C        -- SYNCHRONIZE CORD EVERY 200 STEPS --
         IF(MOD(ISTEP,200).EQ.0) THEN
            IF(GOPARR) THEN
               CALL DDI_BCAST(462,'F',CORD,3*NFFAT,MASTER)
            END IF
         END IF
C
      ENDDO
C
C     -- NOT LOCATED --
C
      IF(MASWRK) THEN
         WRITE(IW,*)' '             
         WRITE(IW,*)'QUANPOL OPTIMIZATION FAILED. ',
     *              'PLEASE RESTART THE JOB USING THE BEST GEOMETRY.'
         WRITE(IW,*)' '
      END IF
      CALL FLSHBF(IW)
      CALL FLSHBF(36)
      CALL FLSHBF(39)
      CALL FLSHBF(40)
      CALL SEQCLO(36,'KEEP')
      CALL SEQCLO(39,'KEEP')
      CALL SEQCLO(40,'KEEP')
      RETURN
C
C     -- LOCATED --
C
  500 CONTINUE
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'================= QUANPOL OPTIMIZATION',
     *              ' SUCCESSFULLY COMPLETED ================='
         WRITE(IW,*)' '
      END IF
      CALL FLSHBF(IW)
      CALL FLSHBF(36)
      CALL FLSHBF(39)
      CALL FLSHBF(40)
      CALL SEQCLO(36,'KEEP')
      CALL SEQCLO(39,'KEEP')
      CALL SEQCLO(40,'KEEP')
      RETURN
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
      END
C*MODULE QUANPO  *DECK FFOPT4
!>                      
!> @brief    QM/MM optimization
!>                      
!> @author   Nandun Thellamurege
!>           - May 2011
!>                    
!> @details  BFGS Hessian method
!>
      SUBROUTINE FFOPT4(ATMNAM,CORD,CORDSV,ZANF,
     *                  ZMAS,
     *                  FFGRD2,QMGRD2,
     *                  LISTQM,NONLS1,NONLSTQ,
     *                  CRDNEW,CRDOLD,
     *                  LSTCELL,NONLS2,CORDSV2,CORDSVQ,
     *                  MVFASTS2,MVFASTS3,MVFASTS4,
     *                  MVFASTL2,MVFASTL3,MVFASTL4,
     *                  NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                  NONLSPMA,NONLSPMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL CVGED,OUT,STPT,PROJCT,GOTEG,GOTEH
C
      PARAMETER (MXATM=2000, MXAO=8192, MXFRG=1050, MXRT=100)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00, PT5=0.50D+00)
C
      CHARACTER*10  ATMNAM
C
      DOUBLE PRECISION METHOD
      LOGICAL LINEAR
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          ZMAS(NFFAT),
     *          FFGRD2(3,NFFAT),QMGRD2(3,NAT),
     *          LISTQM(*),NONLSTQ(*),CRDNEW(*)
      DIMENSION TIMSTR(3)
C
      COMMON /DLCFRZ/ FVALUE(50),ITABLE(50),IFTYPE(50),NCONST
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FFUMBR/ UMBFC,UMBR0,UMBSIZE,
     *                NUMBBIN,NUMBATM(6),NUMBTYP,LFFUMBHIS,
     *                UM2FC,UM2R0,UM2SIZE,
     *                NUM2BIN,NUM2ATM(6),NUM2TYP,LFFUM2HIS
      COMMON /FMCOM / X(1)
      COMMON /FUNCT / E,EG(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /MASSES/ ZMASS(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /OPTEF / D(3*MXATM+6*MXFRG),OLDF(3*MXATM+6*MXFRG),
     *                VMODE(3*MXATM+6*MXFRG),RADIUS
      COMMON /OPTGRD/ XX(3,MXATM),ES,FE(20),
     *                CONVF,FMAXT,DXMAXT,RMAX,RMIN,RLIM,
     *                EIGMAX,EIGMIN,GRDERR,FRMS,FMAX,TRMAX,TRMIN,
     *                IC(20),MSTEP,NSERCH,NPMAX,NP,IFOLOW,
     *                NNEG,IUPHSS,IEXIT,ITRUPD,IPAD,KDIAGH
      COMMON /SCFOPT/ CONVHF,MAXIT,MCONV,NPUNCH,NPREO(4)
      COMMON /ZMAT  / NZMAT,NZVAR,NVAR,NSYMC,LINEAR
      COMMON /ZMTALT/ NZMAT2,NZVAR2,NVAR2,NZMTRD,ICOORD
      COMMON /FROZNC/ IFREEZ(3*MXATM),NFRZ
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
C
      DATA BLANK/8H        /
C
C     NANDUN THELLAMUREGE, MAY 2011, LINCOLN
C     HUI LI, MAY 6, 2014, USE LACTMM AND PRJGRD
C
      IF(NSTEP.LT.0) RETURN
C
      CALL SEQOPN(36,'TRAJECT','NEW',.FALSE.,'FORMATTED')
      CALL SEQOPN(39,'OPTHES1','NEW',.FALSE.,'FORMATTED')
      CALL SEQOPN(40,'OPTHES2','NEW',.FALSE.,'FORMATTED')
      IF(IADDWAT.EQ.2 .AND. ISPHSOL.GT.0) RSPHSOL=RSPHSOL*1.0D+40
C
      NPRINT  = -5
      NATSV   = NAT
      IF(NACTMM.EQ.0) THEN
         DO IFFAT =1,NFFAT
            IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NATSV) THEN
               NAT = NAT + 1
               C(1,NAT)=CORD(1,IFFAT)
               C(2,NAT)=CORD(2,IFFAT)
               C(3,NAT)=CORD(3,IFFAT)
               ZAN(NAT)=ZANF(IFFAT)
               READ(UNIT=ATMNAM(IFFAT)(1:8),FMT='(A8)') ANAM(NAT)
               BNAM(NAT)=BLANK
               ZMASS(NAT)=ZMAS(IFFAT)/1822.88850204D+00
            END IF
         ENDDO
      ELSE
         DO I=1,NACTMM
            IFFAT  = LACTMM(I)
            IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NATSV) THEN
               NAT = NAT + 1
               C(1,NAT) = CORD(1,IFFAT)
               C(2,NAT) = CORD(2,IFFAT)
               C(3,NAT) = CORD(3,IFFAT)
               ZAN(NAT) = ZANF(IFFAT)
               READ(UNIT=ATMNAM(IFFAT)(1:8),FMT='(A8)') ANAM(NAT)
               BNAM(NAT)=BLANK
               ZMASS(NAT)=ZMAS(IFFAT)/1822.88850204D+00
            END IF
         ENDDO
      END IF
      IF(NAT.GT.2000) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: NUMBER OF OPTIMIZE ATOMS EXCEEDED 2000'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
      NATTOT=NAT
      NCOORD=NATTOT*3
      NCVAL =NCOORD
C
C     -- SET SOME CONTROL VARIABLES --
      MSTEP  = NSTEP
      NZMAT  = 0
      NFRZ   = 0
      NCONST = 0
      ICOORD = 8
      CVGED  = .FALSE.
      MODE   = 0
      OUT    = .FALSE.
      MAX2   = NCVAL
C
      DO IAT =1,NATSV
         IF(LISTQM(NFFAT+IAT).GT.0) THEN
            IFFAT       = LISTQM(NFFAT+IAT)
            ZDUM        = ZAN(IAT)
            ZAN(IAT)    = ZANF(IFFAT)
            ZANF(IFFAT) = ZDUM
         END IF
      ENDDO
      CALL SIGINI(MODE,RUNTYP,NCVAL,NCOORD,METHOD,OUT,
     *            GOTEG,NPRT,NPUN,ITBMAT,STPT,STSTEP,
     *            PROJCT,DUMMY,DUMMY,MAX2,NPRTHS)
      DO IAT =1,NATSV
         IF(LISTQM(NFFAT+IAT).GT.0) THEN
            IFFAT       = LISTQM(NFFAT+IAT)
            ZDUM        = ZAN(IAT)
            ZAN(IAT)    = ZANF(IFFAT)
            ZANF(IFFAT) = ZDUM
         END IF
      ENDDO
C
C     -- RE-ORDER THE READ IN HESSIAN IN CASE OF MM TO QM/MM --
C
      IF(MMHESS.EQ.1) THEN
         IF(LISTQM(NFFAT+NATSV+1).LT.NATSV) THEN
            IF(MASWRK) WRITE(IW,'(/1X,A,A/)')
     *      'ERROR: WHEN MM $HESS IS USED FOR QM/MM, ALL QM ATOMS ',
     *      'MUST BE IN $FFDATA.'
            CALL ABRT
         END IF
         CALL VALFM(LOADFM)
         LHESB   = LOADFM + 1
         LHESS   = LHESB  + NCOORD*NCOORD
         LAST    = LHESS  + NCOORD*NCOORD
         NEED    = LAST   - LOADFM -1
         CALL GETFM(NEED)
C
         GOTEH = .FALSE.
         CALL FCMIN(X(LHESS),NCOORD,GOTEH)
         IF(.NOT.GOTEH) THEN
            IF(MASWRK) WRITE(IW,'(/1X,A/)')
     *      'ERROR: MMHESS=1 MUST READ IN $HESS FROM INPUT FILE.'
            CALL ABRT
         END IF
C
         MFFAT1 = NATSV
         IF(NACTMM.EQ.0) THEN
            DO IFFAT =1,NFFAT
               IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NATSV) THEN
                  MFFAT1 = MFFAT1 + 1
                  MFFAT2 = NATSV
                  DO JFFAT =1,NFFAT
                     IF(LISTQM(JFFAT).EQ.0.OR.LISTQM(JFFAT).GT.NATSV)
     *                                                           THEN
                        MFFAT2 = MFFAT2 + 1
                        DO III = 1, 3
                        DO JJJ = 1, 3
              X(LHESB+((MFFAT1-1)*3+III-1)*NCOORD+(MFFAT2-1)*3+JJJ-1)
     *      = X(LHESS+((IFFAT -1)*3+III-1)*NCOORD+(JFFAT -1)*3+JJJ-1)
                        ENDDO
                        ENDDO
                     ELSE
                        MAT2 = LISTQM(JFFAT)
                        DO III = 1, 3
                        DO JJJ = 1, 3
              X(LHESB+((MFFAT1-1)*3+III-1)*NCOORD+(  MAT2-1)*3+JJJ-1)
     *      = X(LHESS+((IFFAT -1)*3+III-1)*NCOORD+( JFFAT-1)*3+JJJ-1)
                        ENDDO
                        ENDDO
                     END IF
                  ENDDO
               ELSE
                  MAT1 = LISTQM(IFFAT)
                  MFFAT2 = NATSV
                  DO JFFAT =1,NFFAT
                     IF(LISTQM(JFFAT).EQ.0.OR.LISTQM(JFFAT).GT.NATSV)
     *                                                           THEN
                        MFFAT2 = MFFAT2 + 1
                        DO III = 1, 3
                        DO JJJ = 1, 3
              X(LHESB+((  MAT1-1)*3+III-1)*NCOORD+(MFFAT2-1)*3+JJJ-1)
     *      = X(LHESS+((IFFAT -1)*3+III-1)*NCOORD+( JFFAT-1)*3+JJJ-1)
                        ENDDO
                        ENDDO
                     ELSE
                        MAT2 = LISTQM(JFFAT)
                        DO III = 1, 3
                        DO JJJ = 1, 3
              X(LHESB+((  MAT1-1)*3+III-1)*NCOORD+( MAT2-1)*3+JJJ-1)
     *      = X(LHESS+((IFFAT -1)*3+III-1)*NCOORD+(JFFAT-1)*3+JJJ-1)
                        ENDDO
                        ENDDO
                     END IF
                  ENDDO
               END IF
            ENDDO
         END IF
         IF(NACTMM.GT.0) THEN
            DO I=1,NACTMM
               IFFAT  = LACTMM(I)
               IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NATSV) THEN
                  MFFAT1 = MFFAT1 + 1
                  MFFAT2 = NATSV
                  DO J=1,NACTMM
                     JFFAT  = LACTMM(J)
                     IF(LISTQM(JFFAT).EQ.0.OR.LISTQM(JFFAT).GT.NATSV)
     *                                                           THEN
                        MFFAT2 = MFFAT2 + 1
                        DO III = 1, 3
                        DO JJJ = 1, 3
              X(LHESB+((MFFAT1-1)*3+III-1)*NCOORD+(MFFAT2-1)*3+JJJ-1)
     *      = X(LHESS+((    I -1)*3+III-1)*NCOORD+(     J-1)*3+JJJ-1)
                        ENDDO
                        ENDDO
                     ELSE
                        MAT2 = LISTQM(JFFAT)
                        DO III = 1, 3
                        DO JJJ = 1, 3
              X(LHESB+((MFFAT1-1)*3+III-1)*NCOORD+(  MAT2-1)*3+JJJ-1)
     *      = X(LHESS+((    I -1)*3+III-1)*NCOORD+(     J-1)*3+JJJ-1)
                        ENDDO
                        ENDDO
                     END IF
                  ENDDO
               ELSE
                  MAT1   = LISTQM(IFFAT)
                  MFFAT2 = NATSV
                  DO J=1,NACTMM
                     JFFAT  = LACTMM(J)
                     IF(LISTQM(JFFAT).EQ.0.OR.LISTQM(JFFAT).GT.NATSV)
     *                                                           THEN
                        MFFAT2 = MFFAT2 + 1
                        DO III = 1, 3
                        DO JJJ = 1, 3
              X(LHESB+((  MAT1-1)*3+III-1)*NCOORD+(MFFAT2-1)*3+JJJ-1)
     *      = X(LHESS+((    I -1)*3+III-1)*NCOORD+(     J-1)*3+JJJ-1)
                        ENDDO
                        ENDDO
                     ELSE
                        MAT2 = LISTQM(JFFAT)
                        DO III = 1, 3
                        DO JJJ = 1, 3
              X(LHESB+((  MAT1-1)*3+III-1)*NCOORD+( MAT2-1)*3+JJJ-1)
     *      = X(LHESS+((    I -1)*3+III-1)*NCOORD+(    J-1)*3+JJJ-1)
                        ENDDO
                        ENDDO
                     END IF
                  ENDDO
               END IF
            ENDDO
         END IF
         CALL DAWRIT(IDAF,IODA,X(LHESB),NCOORD*NCOORD,4,0)
         CALL RETFM(NEED)
      END IF
C
C     -- READY TO TAKE OFF ?
C
      DO ISTEP = 0, NSTEP
         NSERCH = ISTEP
         IF(ISTEP.EQ.50.AND.IADDWAT.EQ.2 .AND. ISPHSOL.GT.0)
     *   RSPHSOL = RSPHSOL*1.0D-40
C
         NPUN = -1
         NPUNCH = 0
         IF(MOD(ISTEP,KOUT).EQ.0 .OR. ISTEP.EQ.NSTEP) NPUNCH = 0
         IF(ISTEP.EQ.0) NPUNCH = 2
C
C        -- CALCULATE ENERGY AND GRADIENT -
         CALL NONBOND(ISTEP,CORD,CORDSV,CORDSV2,CORDSVQ,
     *                NONLS1,NONLS2,
     *                NONLSTQ,LSTCELL,
     *                MVFASTS2,MVFASTS3,MVFASTS4,
     *                MVFASTL2,MVFASTL3,MVFASTL4,
     *                NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                NONLSPMA,NONLSPMB)
         CALL VCLR(QMGRD2,1,3*NATSV)
         CALL VCLR(FFGRD2,1,3*NFFAT)
         NAT    = NATSV
         CALL GRADX
         CALL DCOPY(3*NATSV,EG,1,QMGRD2,1)
         IF(IFEPTOP.EQ.1.AND.MATOMB.GT.0) THEN
            CALL SAVEABPROP(1)
            CALL DCOPY(3*MATOMA,C,1,X(LFFCX),1)
            CALL SAVEFFDATA
            CALL SETQMAB(2)
            CALL SETFFDATAB(2)
            CALL VCLR(QMGRD2,1,3*NAT  )
            CALL VCLR(FFGRD2,1,3*NFFAT)
            CALL VCLR(VIR   ,1,3)
            CALL GRADX
            CALL DCOPY(3*NAT,EG,1,QMGRD2,1)
            CALL SAVEABPROP(2)
            CALL SETQMAB(1)
            CALL SETFFDATAB(1)
            CALL MIXABPROP
         END IF
         E      = ETOT
         NAT    = NATTOT
C
C        -- PRINT COORDINATES --
C
  499    CONTINUE
         CALL TMDATE(TIMSTR)
         IF(MASWRK .AND. (MOD(ISTEP,KOUT).EQ.0.OR.ISTEP.EQ.NSTEP.OR.
     *                    CVGED))THEN
C
            WRITE(36,'(1X,A,I10)')
     *      'RESTART COORDINATES FOR QUANPOL AT OPT STEP',ISTEP
            WRITE(36,'(A,3(A,F15.10,1X),A)')
     *      ' $QUANPO ',
     *      'CENTX=',CENTX*TOANGS,
     *      'CENTY=',CENTY*TOANGS,
     *      'CENTZ=',CENTZ*TOANGS,
     *      '$END'
C
            WRITE(36,*)'$DATA'
            WRITE(36,'(A,3(F8.3,1X),A,I3,A,I10)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,'     AT OPT STEP',ISTEP
            WRITE(36,*)'C1'
            DO IAT = 1, NATSV
               WRITE(36,999)ANAM(IAT),ZAN(IAT),
     *         C(1,IAT)*TOANGS,
     *         C(2,IAT)*TOANGS,
     *         C(3,IAT)*TOANGS
            ENDDO
            IF(IFEPTOP.GT.0)THEN
               DO IATB = 1, MATOMB
                  WRITE(36,999)ANAM(MATOMA+IATB),  ! ANAM IS THE ORIGINAL
     *            X(LFFZANX +MATOMA+IATB-1),
     *            X(LFFCX+3*(MATOMA+IATB-1)  )*TOANGS,
     *            X(LFFCX+3*(MATOMA+IATB-1)+1)*TOANGS,
     *            X(LFFCX+3*(MATOMA+IATB-1)+2)*TOANGS
               ENDDO
            END IF
            WRITE(36,*)'$END'
            WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !   OPT STEP',ISTEP
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
               WRITE(36,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$FFDATB          !   OPT STEP',ISTEP
            END IF
            WRITE(36,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(36,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(36,*)'STOP'
            IF(NFFAT.LE.100) THEN
            WRITE(IW,*)'$DATA'
            WRITE(IW,'(A,3(F8.3,1X),A,I3,A,I10)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,'     AT OPT STEP',ISTEP
            WRITE(IW,*)'C1'
            DO IAT = 1, NATSV
               WRITE(IW,999)ANAM(IAT),ZAN(IAT),
     *         C(1,IAT)*TOANGS,
     *         C(2,IAT)*TOANGS,
     *         C(3,IAT)*TOANGS
            ENDDO
            IF(IFEPTOP.GT.0)THEN
               DO IATB = 1, MATOMB
                  WRITE(IW,999)ANAM(MATOMA+IATB),  ! ANAM IS THE ORIGINAL
     *            X(LFFZANX +MATOMA+IATB-1),
     *            X(LFFCX+3*(MATOMA+IATB-1)  )*TOANGS,
     *            X(LFFCX+3*(MATOMA+IATB-1)+1)*TOANGS,
     *            X(LFFCX+3*(MATOMA+IATB-1)+2)*TOANGS
               ENDDO
            END IF
            WRITE(IW,*)'$END'
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !   OPT STEP',ISTEP
            IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
               WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$FFDATB          !   OPT STEP',ISTEP
            END IF
            WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(IW,*)'STOP'
            END IF
            IF(NFFAT.GT.100.AND.NACTMM.GT.0) THEN
            WRITE(IW,*)'$DATA         ! THESE ARE LACTMM ATOMS'
            WRITE(IW,'(A,3(F8.3,1X),A,I3,A,I10)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,'     AT OPT STEP',ISTEP
            WRITE(IW,*)'C1'
            DO IAT = 1, NAT
               ZCHG = ZAN(IAT)
               IF(LISTQM(NFFAT+IAT).GT.0)THEN
                  ZCHG = ZANF(LISTQM(NFFAT+IAT))
               END IF
               CX    = C(1,IAT) - QMCX
               CY    = C(2,IAT) - QMCY
               CZ    = C(3,IAT) - QMCZ
               PBCX  = XBOX*ANINT(CX*ONEXBOX)
               PBCY  = YBOX*ANINT(CY*ONEYBOX)
               PBCZ  = ZBOX*ANINT(CZ*ONEZBOX)
               CX    = CX - PBCX + QMCX
               CY    = CY - PBCY + QMCY
               CZ    = CZ - PBCZ + QMCZ
               WRITE(IW,999)ANAM(IAT),ZCHG,
     *         CX*TOANGS,
     *         CY*TOANGS,
     *         CZ*TOANGS
            ENDDO
            WRITE(IW,*)'$END'
            END IF
            CALL TIMIT(1)
            CALL FLSHBF(IW)
            CALL FLSHBF(36)
         END IF
         IF(CVGED) GOTO 500
C
C        - COMBINE QM AND MM GRADIENTS -
         IF(LISTQM(NFFAT+NATSV+1).GT.0)THEN
            DO IAT = 1, NATSV
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  QMGRD2(1,IAT)   = QMGRD2(1,IAT) + FFGRD2(1,KFFAT)
                  QMGRD2(2,IAT)   = QMGRD2(2,IAT) + FFGRD2(2,KFFAT)
                  QMGRD2(3,IAT)   = QMGRD2(3,IAT) + FFGRD2(3,KFFAT)
                  EG(1,IAT)       = QMGRD2(1,IAT) 
                  EG(2,IAT)       = QMGRD2(2,IAT)
                  EG(3,IAT)       = QMGRD2(3,IAT)
                  FFGRD2(1,KFFAT) = QMGRD2(1,IAT)
                  FFGRD2(2,KFFAT) = QMGRD2(2,IAT)
                  FFGRD2(3,KFFAT) = QMGRD2(3,IAT)
               END IF
            ENDDO
         END IF
C
C        - ZERO OFF SOME FORCES -
C
         IF(NACTQM.GT.0) THEN
            DO KOPT = 1, NACTQM
               IAT = LACTQM(KOPT)
               IF(IAT.GT.0)QMGRD2(1,IAT)=QMGRD2(1,IAT)+1.0D+03
            ENDDO
            DO IAT = 1, NATSV
               IF(QMGRD2(1,IAT).GT.0.5D+03) THEN
                  QMGRD2(1,IAT) = QMGRD2(1,IAT)-1.0D+03
               ELSE
                  DO III = 1, 3
                     QMGRD2(III,IAT) = ZERO
                     EG(III,IAT)     = ZERO
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXQM
            DO III = 1, 3
               QMGRD2(III,IFIXQM(KFIX)) = ZERO
               EG(III,IFIXQM(KFIX))     = ZERO
            ENDDO
         ENDDO
         IF(NACTMM.GT.0) THEN
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0)FFGRD2(1,IFFAT)=FFGRD2(1,IFFAT)+1.0D+03
            ENDDO
            DO IFFAT = 1, NFFAT
               IF(FFGRD2(1,IFFAT).GT.0.5D+03) THEN
                  FFGRD2(1,IFFAT) = FFGRD2(1,IFFAT)-1.0D+03
               ELSE
                  DO III = 1, 3
                     FFGRD2(III,IFFAT) = ZERO
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXMM
            DO III = 1, 3
               FFGRD2(III,IFIXMM(KFIX)) = ZERO
            ENDDO
         ENDDO
C
C        - EXPAND EG(3,*) TO INCLUDE MM ATOMS -
         IAT = NATSV
         IF(NACTMM.EQ.0) THEN
            DO IFFAT = 1, NFFAT
               IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NATSV)THEN
                  IAT = IAT + 1
                  EG(1,IAT) = FFGRD2(1,IFFAT)
                  EG(2,IAT) = FFGRD2(2,IFFAT)
                  EG(3,IAT) = FFGRD2(3,IFFAT)
               END IF
            ENDDO
         ELSE
            DO I=1,NACTMM
               IFFAT  = LACTMM(I)
C              - LACTMM DOES NOT AFFECT PURE QM EG()
C              - LACTMM DOES NOT AFFECT QM(MM)  EG()
               IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NATSV) THEN
                  IAT = IAT + 1
                  EG(1,IAT) = FFGRD2(1,IFFAT)
                  EG(2,IAT) = FFGRD2(2,IFFAT)
                  EG(3,IAT) = FFGRD2(3,IFFAT)
               END IF
            ENDDO
         END IF
C
C        - CALCULATE PROPERTIES -
         IIISTEP=ISTEP
         CALL OPTPROP(IIISTEP,1)
C
C        - CALCULATE DISPLACEMENT -
C
         CALL DCOPY(3*NATTOT,C,1,XX,1)
         PROJCT=.FALSE.
         CALL DISPLC(CVGED,CRDOLD,CRDNEW,NCVAL,NCOORD,
     *               NPUN,OUT,METHOD,ITBMAT,STPT,STSTEP,PROJCT,RUNTYP)
C
         CALL VALFM(LOADFM)
         LHESS   = LOADFM + 1
         LAST    = LHESS  + NCOORD*NCOORD
         NEED    = LAST   - LOADFM -1
         CALL GETFM(NEED)
         IPSV2=IP
         CALL DAREAD(IDAF,IODA,X(LHESS),NCOORD*NCOORD,4,0)
         IF(MOD(ISTEP,2).EQ.0) THEN
            CALL SEQCLO(39,'DELETE')
            CALL SEQOPN(39,'OPTHES1','NEW',.FALSE.,'FORMATTED')
            IP=39
         END IF
         IF(MOD(ISTEP,2).EQ.1) THEN
            CALL SEQCLO(40,'DELETE')
            CALL SEQOPN(40,'OPTHES2','NEW',.FALSE.,'FORMATTED')
            IP=40
         END IF
         IF(MASWRK) WRITE(IP,*) 'THE APPROXIMATE HESSIAN IS'
         CALL FCMPUN(X(LHESS),NCOORD)
         CALL FLSHBF(IP)
         IP=IPSV2
         CALL RETFM(NEED)
C
C        - RESET JUMBPOT=12 R0 -
         IF(NUMBTYP.EQ.12.AND.JUMBUP.NE.0) THEN
            IF(ISTEP.GT.0.AND.MOD(ISTEP,8).EQ.0) THEN
               N1    = NUMBATM(1)
               N2    = NUMBATM(2)
               CX    = CORD(1,N1) - CORD(1,N2)
               CY    = CORD(2,N1) - CORD(2,N2)
               CZ    = CORD(3,N1) - CORD(3,N2)
               R2    = CX*CX + CY*CY + CZ*CZ
               R     = SQRT(R2)
               IF(JUMBUP.GT.0)UMBR0=UMBR0+(UMBR0 - R)
               IF(JUMBUP.LT.0)UMBR0=R    +(R - UMBR0)
               IF(MASWRK) THEN
                  WRITE(IW,'(/1X,A,F10.6/)')
     *            'JUMBPOT=12 R0 IS RESET TO BE ',UMBR0*TOANGS
               END IF
            END IF
            IF(ENBIAS.GT.1.6D-06) CVGED = .FALSE.
         END IF
C
         IF(CVGED) THEN
            IF(MOD(ISTEP,KOUT).EQ.0.OR.ISTEP.EQ.NSTEP) THEN
               GOTO 500
            ELSE
               GOTO 499  ! MAKE IT UP
            END IF
         END IF
C
         CALL DCOPY(NCVAL,EG,1,OLDF,1)
         CALL SYMDR(CRDNEW)
         DO 201 IAT =1,NATTOT
            IF((EG(1,IAT)+EG(2,IAT)+EG(3,IAT)).EQ.ZERO) GOTO 201
            IF(MMHESS.EQ.1.AND.ISTEP.LE.3) THEN
               C(1,IAT)=C(1,IAT) - EG(1,IAT)*0.50D+00
               C(2,IAT)=C(2,IAT) - EG(2,IAT)*0.50D+00
               C(3,IAT)=C(3,IAT) - EG(3,IAT)*0.50D+00
            ELSE
               C(1,IAT)=C(1,IAT) + CRDNEW(IAT*3-2)
               C(2,IAT)=C(2,IAT) + CRDNEW(IAT*3-1)
               C(3,IAT)=C(3,IAT) + CRDNEW(IAT*3  )
            END IF
  201    CONTINUE
C
C        - COPY SOME C(3,*) BACK TO BE CORD(3,*) -
         IAT = NATSV
         IF(NACTMM.EQ.0) THEN 
            DO 200 IFFAT =1,NFFAT
               IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NATSV)THEN
                  IAT=IAT+1
                  CORD(1,IFFAT) = C(1,IAT)
                  CORD(2,IFFAT) = C(2,IAT)
                  CORD(3,IFFAT) = C(3,IAT)
               ELSE IF(LISTQM(IFFAT).GT.0)THEN
                  CORD(1,IFFAT) = C(1,LISTQM(IFFAT))
                  CORD(2,IFFAT) = C(2,LISTQM(IFFAT))
                  CORD(3,IFFAT) = C(3,LISTQM(IFFAT))
               END IF
  200       CONTINUE
         ELSE
            DO 202 I=1,NACTMM
               IFFAT = LACTMM(I)
               IF(LISTQM(IFFAT).EQ.0.OR.LISTQM(IFFAT).GT.NATSV)THEN
                  IAT=IAT+1
                  CORD(1,IFFAT) = C(1,IAT)
                  CORD(2,IFFAT) = C(2,IAT)
                  CORD(3,IFFAT) = C(3,IAT)
               ELSE IF(LISTQM(IFFAT).GT.0)THEN
                  CORD(1,IFFAT) = C(1,LISTQM(IFFAT))
                  CORD(2,IFFAT) = C(2,LISTQM(IFFAT))
                  CORD(3,IFFAT) = C(3,LISTQM(IFFAT))
               END IF
  202       CONTINUE
         END IF
C
         CALL DAWRIT(IDAF,IODA,C,NATSV*3,1,0)
C
C        -- SYNCHRONIZE CORD EVERY STEP --
         IF(LISTQM(NFFAT+NATSV+1).GT.0)THEN
            DO IAT = 1, NATSV
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  C(1,IAT) = CORD(1,KFFAT)
                  C(2,IAT) = CORD(2,KFFAT)
                  C(3,IAT) = CORD(3,KFFAT)
               END IF
            ENDDO
         END IF
         IF(GOPARR) THEN
            CALL DDI_BCAST(461,'F',C,3*NATSV,MASTER)
            CALL DDI_BCAST(462,'F',CORD,3*NFFAT,MASTER)
         END IF
C
C        -- ADJUST QMCX,Y,Z ON THE FLY --
C           ALSO UPDATE LQMCT
C           (DO THIS ONLY WHEN PBC AND SWRB2 ARE USED)
         IF(SWRB2.LT.1.0D+08) THEN
            XMAX = -1.0D+30
            YMAX = -1.0D+30
            ZMAX = -1.0D+30
            XMIN =  1.0D+30
            YMIN =  1.0D+30
            ZMIN =  1.0D+30
            DO IAT = 1,NATSV
               XMAX = MAX(XMAX,C(1,IAT))
               YMAX = MAX(YMAX,C(2,IAT))
               ZMAX = MAX(ZMAX,C(3,IAT))
               XMIN = MIN(XMIN,C(1,IAT))
               YMIN = MIN(YMIN,C(2,IAT))
               ZMIN = MIN(ZMIN,C(3,IAT))
            ENDDO
            QMSIZE = ZERO
            QMSIZE = MAX(QMSIZE,XMAX-XMIN)
            QMSIZE = MAX(QMSIZE,YMAX-YMIN)
            QMSIZE = MAX(QMSIZE,ZMAX-ZMIN)
            QMSIZE = QMSIZE*1.732D+00
            QMCX   = (XMAX+XMIN)*PT5
            QMCY   = (YMAX+YMIN)*PT5
            QMCZ   = (ZMAX+ZMIN)*PT5
            R2NEAR = 100.0D+00
            NEAR   = 0
            DO IAT = 1,NATSV
               XI = C(1,IAT) - QMCX
               YI = C(2,IAT) - QMCY
               ZI = C(3,IAT) - QMCZ
               R2 = XI**2 + YI**2 + ZI**2
               IF(R2.LT.R2NEAR) THEN
                  R2NEAR = R2
                  NEAR   = IAT
               END IF
            ENDDO
            LQMCT = NEAR
            IF(MASWRK) WRITE(IW,'(A,3(F16.10,1X),A,I4,A,I7)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,' AT STEP ',ISTEP+1
         END IF
      ENDDO
C
C     -- NOT LOCATED --
C
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'QUANPOL OPTIMIZATION FAILED. ',
     *              'PLEASE RESTART THE JOB USING THE BEST GEOMETRY.'
         WRITE(IW,*)' '
      END IF
      CALL FLSHBF(IW)
      CALL FLSHBF(36)
      CALL FLSHBF(39)
      CALL FLSHBF(40)
      CALL SEQCLO(36,'KEEP')
      CALL SEQCLO(39,'KEEP')
      CALL SEQCLO(40,'KEEP')
      RETURN
C
C     -- LOCATED --
C
  500 CONTINUE
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'================= QUANPOL OPTIMIZATION',
     *              ' SUCCESSFULLY COMPLETED ================='
         WRITE(IW,*)' '
      END IF
      CALL FLSHBF(IW)
      CALL FLSHBF(36)
      CALL FLSHBF(39)
      CALL FLSHBF(40)
      CALL SEQCLO(36,'KEEP')
      CALL SEQCLO(39,'KEEP')
      CALL SEQCLO(40,'KEEP')
      RETURN
C
  999 FORMAT(1X,A8,3X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
C
      END
C*MODULE QUANPO  *DECK HESSMM
!>                      
!> @brief    pure MM Hessian
!>                      
!> @author   Hui Li
!>           - Dec 2014
!>                    
!> @details  double displacement
!>
      SUBROUTINE HESSMM(ATMNAM,CORD,CORDSV,ZANF,
     *                  ZMAS,CHARG,POL,POLSV,DIP,
     *                  FIELD1,FIELD2,FIELD3,
     *                  SIG,EPS,SIG2,EPS2,
     *                  BOND0,FCBOND,FCSTBD,
     *                  ANGL0,FCANGL,FCWAGG,
     *                  DIHB0,FCDIHB,FCDIHR,
     *                  VROT,NNN,GAMA,IPAIR,
     *                  KLIST,LLIST,KBLST,MLIST,NLIST,
     *                  L1213J,L14J,
     *                  FFGRD2,FCLJTP,NTYPE,
     *                  XTS,YTS,ZTS,CMAT1,
     *                  POT1,POT2,QRXN1,QRXN2,NTS,
     *                  NONLS1,NONLSTQ,MAPLST,CMAPCO,
     *                  LSTCELL,NONLS2,CORDSV2,CORDSVQ,
     *                  MVFASTS2,MVFASTS3,MVFASTS4,
     *                  MVFASTL2,MVFASTL3,MVFASTL4,
     *                  AFIX,QFIX,
     *                  RFIX,IDATOM,DAI,IDDAI,
     *                  VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                  NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *                  KFREEA,KFREEB,LISTB2A,CHARGB,
     *                  SIGB,EPSB,SIG2B,EPS2B,
     *                  NONLSPMA,
     *                  L1213PMA,L14PMA,CORDB,
     *                  LSBONDPMA,LSANGLPMA,
     *                  LSDIHRPMA,LSDIHBPMA,
     *                  LSWAGGPMA,LSCMAPPMA,
     *                  NONLSPMB,L1213PMB,L14PMB,
     *                  LSBONDPMB,LSANGLPMB,
     *                  LSDIHRPMB,LSDIHBPMB,
     *                  LSWAGGPMB,LSCMAPPMB,UMBHIS,UM2HIS,
     *                  VIBGRD,VIBDIP,VIBHSS,VIBDDM,
     *                  NATVIB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL CVGED,PROJCT,GOTDDM,GOTADM,STATPT,SCFOK,
     *        PRTSCN,GOTFRQ,GOTEH,EOF,RSTART
C
      PARAMETER (MXATM=2000, MXAO=8192, MXIRR=14)
      PARAMETER (ZERO=0.0D+00, THREE=3.0D+00)
      PARAMETER (DB2AU=1.0D+00/2.541766D+00)
C
      CHARACTER*10  ATMNAM
C
      LOGICAL EFLDL
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          ZMAS(NFFAT),
     *          CHARG(NFFAT),POL(NFFAT),DIP(3,NFFAT),
     *          FIELD1(3,NFFAT),FIELD2(3,NFFAT),FIELD3(3,NFFAT),
     *          SIG(NFFAT),EPS(NFFAT),SIG2(NFFAT),EPS2(NFFAT),
     *          BOND0(NBOND),FCBOND(NBOND),
     *          ANGL0(NANGL),FCANGL(NANGL),
     *          FCWAGG(NWAGG),DIHB0(NDIHB),FCDIHB(NDIHB),FCDIHR(3,*),
     *          VROT(NDIHR),NNN(NDIHR),GAMA(NDIHR),IPAIR(2,NBOND),
     *          KLIST(3,NANGL),
     *          LLIST(4,NDIHR),MLIST(4,NWAGG),
     *          L1213J(2,*),L14J(2,NDIHR),
     *          FFGRD2(3,NFFAT),NTYPE(*),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),CMAT1(NTS,NTS),
     *          POT1(NTS),POT2(NTS),QRXN1(NTS),QRXN2(NTS),NONLS1(2,*),
     *          NONLSTQ(*),MAPLST(6,*),CMAPCO(4,4,24,24,3)
      DIMENSION ENALL(100)
      DIMENSION VIBGRD(3*NATVIB,3,NATVIB,2),
     *          VIBDIP(3,3,NATVIB,2),
     *          VIBHSS(3*NATVIB,3*NATVIB),
     *          VIBDDM(3,3*NATVIB)
      DIMENSION DIPOLE(3)
C
      COMMON /EFLDC / EVEC(3),EFLDL
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FMCOM / X(1)
      COMMON /FUNCT / E,EG(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /MASSES/ ZMASS(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /SYMBLK/ NIRRED,NSALC,NSALC2,NSALC3,NSAFMO
      COMMON /SYMREP/ IRPNAM(MXIRR),IPA(MXIRR),LAMBDA(MXIRR),
     *                LAMBD0(MXIRR),IADDR1(MXIRR),IADDR2(MXIRR),
     *                IADDR3(MXIRR)
      COMMON /THERMD/ FREQ(3*MXATM),TEMP(10),SCLFAC,NTEMP,PRTSCN,GOTFRQ
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
C
      DATA BLANK/8H        /
      DATA IRPA /4HA   /
C
C     HUI LI, DEC 25, 2014
C
      IF(NSTEP.LT.0) RETURN
C
C     -- DEFINE INFOA VARIABLES --
      IF(NACTMM.EQ.0) THEN
         NCOORD = 3*NFFAT
         CALL DCOPY(3*NFFAT,CORD,1,C,1)
         CALL DCOPY(NFFAT,ZANF,1,ZAN,1)
         DO IFFAT =1,NFFAT
            READ(UNIT=ATMNAM(IFFAT)(1:8),FMT='(A8)') ANAM(IFFAT)
            BNAM(IFFAT)=BLANK
            ZMASS(IFFAT)=ZMAS(IFFAT)/1822.88850204D+00
         ENDDO
      ELSE
         NCOORD = 3*NACTMM
         DO I=1,NACTMM
            IFFAT  = LACTMM(I)
            C(1,I) = CORD(1,IFFAT)
            C(2,I) = CORD(2,IFFAT)
            C(3,I) = CORD(3,IFFAT)
            ZAN(I) = ZANF(IFFAT)
            READ(UNIT=ATMNAM(IFFAT)(1:8),FMT='(A8)') ANAM(I)
            BNAM(I)=BLANK
            ZMASS(I)=ZMAS(IFFAT)/1822.88850204D+00
         ENDDO
      END IF
C
C     -- PRINT ATOMIC COORDINATES FOR MACMOLPLT --
C
      IF (MASWRK) THEN
         WRITE (IW,50)
         NAT = NFFAT
         IF(NACTMM.GT.0) NAT = NACTMM
         DO IAT = 1,NAT
            WRITE (IW,60) ANAM(IAT),BNAM(IAT),ZAN(IAT),
     *                      C(1,IAT),C(2,IAT),C(3,IAT)
         ENDDO
         NAT = 0
      END IF
   50 FORMAT(/1X,'ATOM',6X,'ATOMIC',22X,'COORDINATES (BOHR)'/
     *         11X,'CHARGE',9X,'X',19X,'Y',19X,'Z')
   60 FORMAT(1X,A8,A2,F5.1,F17.10,2F20.10)
C
         CVGED  = .FALSE.
C
C        -- CALCULATE ENERGY AND GRADIENT
         CALL NONBOND(0,CORD,CORDSV,CORDSV2,CORDSVQ,
     *                NONLS1,NONLS2,
     *                NONLSTQ,LSTCELL,
     *                MVFASTS2,MVFASTS3,MVFASTS4,
     *                MVFASTL2,MVFASTL3,MVFASTL4,
     *                NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                NONLSPMA,NONLSPMB)
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR,CORDB,
     *               LSBONDPMA,LSBONDPMB)
         CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST,CORDB,
     *               LSANGLPMA,LSANGLPMB)
         CALL E12312(CORD,FFGRD2,ANGL0,KLIST,BOND0,FCSTBD,
     *               KBLST,CORDB,LSANGLPMA,LSANGLPMB)
         CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST,CORDB,
     *               LSDIHBPMA,LSDIHBPMB)
         CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST,CORDB,
     *               LSWAGGPMA,LSWAGGPMB)
         CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST,CORDB,
     *               LSDIHRPMA,LSDIHRPMB,FCDIHR)
         CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO,CORDB,
     *               LSCMAPPMA,LSCMAPPMB)
         CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLS1,
     *               L1213J,SIGB,EPSB,SIG2B,EPS2B,
     *               NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *               NONLSPMA,L1213PMA,L14PMA,CORDB,
     *               NONLSPMB,L1213PMB,L14PMB,FCLJTP,NTYPE)
         CALL ESPHER(CORD,FFGRD2)
         CALL ECHARG(CORD,FFGRD2,CHARG,NONLS1,L1213J,L14J,
     *               CHARGB,NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *               NONLSPMA,L1213PMA,L14PMA,CORDB,
     *               NONLSPMB,L1213PMB,L14PMB)
         CALL UMBRELLA(CORD,FFGRD2,UMBHIS,UM2HIS)
         IF(IFIXSOL.EQ.0) THEN
            CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                  CMAT1,POT1,QRXN1,NTS)
            CALL POLRXN(CORD,FFGRD2,CHARG,POL,POLSV,DIP,
     *                  FIELD1,FIELD2,FIELD3,
     *                  XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *                  NONLS1,L1213J)
         END IF
         IF(IFIXSOL.EQ.1) THEN
            CALL FIXSOL(CORD,FFGRD2,CHARG,ZANF,AFIX,QFIX,
     *                  VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                  RFIX,IDATOM,DAI,IDDAI,
     *                  POL,POLSV,DIP,FIELD1,FIELD2,FIELD3,
     *                  NONLS1,L1213J)
         END IF
         IF(GOPARR) THEN
            ENALL( 1) = EN12
            ENALL( 2) = EN123
            ENALL( 3) = EN123R4
            ENALL( 4) = EN123B4
            ENALL( 5) = EN234W1
            ENALL( 6) = ENCHAR
            ENALL( 7) = ENLJR
            ENALL( 8) = ENLJD
            ENALL(12) = ENUCCH
            ENALL(13) = ENRXN
            ENALL(14) = ENRXNR
C           ENALL(15) = ENCENT
            ENALL(16) = ENCMAP
            ENALL(18) = SOL1CH
            ENALL(19) = SOL1LJ
            ENALL(20) = SOL1IM
            ENALL(21) = SOL2CH
            ENALL(22) = SOL2LJ
            ENALL(23) = SOL2IM
            ENALL(33) = PMF1BD
            ENALL(34) = PMF1AG
            ENALL(35) = PMF1DR
            ENALL(36) = PMF1DB
            ENALL(37) = PMF1WG
            ENALL(38) = PMF1CM
            ENALL(39) = PMF1CH
            ENALL(40) = PMF1LJ
            ENALL(41) = ENBIAS
            ENALL(42) = EN12312
            CALL DDI_GSUMF(2410,ENALL  ,42)
            CALL DDI_GSUMF(2411,FFGRD2,3*NFFAT)
            EN12      = ENALL( 1)
            EN123     = ENALL( 2)
            EN123R4   = ENALL( 3)
            EN123B4   = ENALL( 4)
            EN234W1   = ENALL( 5)
            ENCHAR    = ENALL( 6)
            ENLJR     = ENALL( 7)
            ENLJD     = ENALL( 8)
            ENUCCH    = ENALL(12)
            ENRXN     = ENALL(13)
            ENRXNR    = ENALL(14)
C           ENCENT    = ENALL(15)
            ENCMAP    = ENALL(16)
            SOL1CH    = ENALL(18)
            SOL1LJ    = ENALL(19)
            SOL1IM    = ENALL(20)
            SOL2CH    = ENALL(21)
            SOL2LJ    = ENALL(22)
            SOL2IM    = ENALL(23)
            PMF1BD    = ENALL(33)
            PMF1AG    = ENALL(34)
            PMF1DR    = ENALL(35)
            PMF1DB    = ENALL(36)
            PMF1WG    = ENALL(37)
            PMF1CM    = ENALL(38)
            PMF1CH    = ENALL(39)
            PMF1LJ    = ENALL(40)
            ENBIAS    = ENALL(41)
            EN12312   = ENALL(42)
         END IF
         DMMX= ZERO
         DMMY= ZERO
         DMMZ= ZERO
         AMX = ZERO
         AMY = ZERO
         AMZ = ZERO
         AMT = ZERO
         DO JFFAT = 1, NFFAT
            AMX = AMX  + CORD(1,JFFAT)*ZMAS(JFFAT)
            AMY = AMY  + CORD(2,JFFAT)*ZMAS(JFFAT)
            AMZ = AMZ  + CORD(3,JFFAT)*ZMAS(JFFAT)
            AMT = AMT  + ZMAS(JFFAT)
         ENDDO
         AMX = AMX/AMT
         AMY = AMY/AMT
         AMZ = AMZ/AMT
         DO JFFAT = 1, NFFAT
            DMMX=DMMX + CHARG(JFFAT)*(CORD(1,JFFAT)-AMX)
            DMMY=DMMY + CHARG(JFFAT)*(CORD(2,JFFAT)-AMY)
            DMMZ=DMMZ + CHARG(JFFAT)*(CORD(3,JFFAT)-AMZ)
         ENDDO
         IF(IDOPOL.GT.0) THEN
            DO JFFAT = 1, NFFAT
               DMMX=DMMX + DIP(1,JFFAT)
               DMMY=DMMY + DIP(2,JFFAT)
               DMMZ=DMMZ + DIP(3,JFFAT)
            ENDDO
         END IF
         DIPOLE(1) = DMMX/DB2AU
         DIPOLE(2) = DMMY/DB2AU
         DIPOLE(3) = DMMZ/DB2AU
C
C        - ZERO OFF SOME FORCES -
C
         IF(NACTMM.GT.0) THEN
            DO KOPT = 1, NACTMM
               IFFAT = LACTMM(KOPT)
               IF(IFFAT.GT.0)FFGRD2(1,IFFAT)=FFGRD2(1,IFFAT)+1.0D+03
            ENDDO
            DO IFFAT = 1, NFFAT
               IF(FFGRD2(1,IFFAT).GT.0.5D+03) THEN
                  FFGRD2(1,IFFAT) = FFGRD2(1,IFFAT)-1.0D+03
               ELSE
                  DO III = 1, 3
                     FFGRD2(III,IFFAT) = ZERO
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXMM
            DO III = 1, 3
               FFGRD2(III,IFIXMM(KFIX)) = ZERO
            ENDDO
         ENDDO
C
C        - TEST CONVERGENCE
C
         CONVF  = 1.0D-05
         GRDMAX = ZERO
         GRDRMS = ZERO
         DO IFFAT=1, NFFAT
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(1,IFFAT)))
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(2,IFFAT)))
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(3,IFFAT)))
            GRDRMS=GRDRMS + FFGRD2(1,IFFAT)**2
     *                    + FFGRD2(2,IFFAT)**2
     *                    + FFGRD2(3,IFFAT)**2
         ENDDO
         IF(NACTMM.EQ.0) GRDRMS = SQRT(GRDRMS/(3*(NFFAT-NFIXMM)))
         IF(NACTMM.GT.0) GRDRMS = SQRT(GRDRMS/(3*(NACTMM-NFIXMM)))
         IF(GRDMAX.LT.CONVF.AND.GRDRMS.LT.(CONVF/THREE)) CVGED=.TRUE.
C
C        -- CALCULATE PROPERTIES
         NAT = 0
         CALL OPTPROP(0,1)
         NAT = NFFAT
         IF(NACTMM.GT.0) NAT = NACTMM
         E= ENPOT
C
         IF(NACTMM.EQ.0) THEN
            CALL DCOPY(3*NFFAT,CORD,1,C,1)
            CALL DCOPY(3*NFFAT,FFGRD2,1,EG,1)
         END IF
         IF(NACTMM.GT.0) THEN
            DO I=1,NACTMM
               IFFAT = LACTMM(I)
               C(1,I)  = CORD(1,IFFAT)
               C(2,I)  = CORD(2,IFFAT)
               C(3,I)  = CORD(3,IFFAT)
               EG(1,I) = FFGRD2(1,IFFAT)
               EG(2,I) = FFGRD2(2,IFFAT)
               EG(3,I) = FFGRD2(3,IFFAT)
            ENDDO
         END IF
C        -- MUST SAVE THE VIB 0 GRADIENT
         CALL DAWRIT(IDAF,IODA,EG,NCOORD, 3,0)
C
      CALL TIMIT(1)
C
      IF(MASWRK) WRITE(IW,'(//1X,A/1X,A/1X,A//)')
     *'***********************************',
     *'QUANPOL PURE MM HESSIAN CALCULATION',
     *'***********************************'
C
      CALL VCLR(VIBHSS,3*NAT*3*NAT,1)
      CALL VCLR(VIBDDM,3*3*NAT,1)
C
C     -- TRY TO READ IN $HESS --
      CALL FCMIN(VIBHSS,NCOORD,GOTEH)
      IF(GOTEH) GOTO 700
      IF(.NOT.GOTEH) THEN
         IF(MASWRK) WRITE(IW,'(/1X,A/)')
     *   'NO $HESS IS FOUND IN INPUT FILE. MUST COMPUTE IT.'
      END IF
C
C     -- TRY TO READ IN $VIB FROM THE INPUT FILE
C
      CALL SEQREW(IR)
      CALL FNDGRP(IR,' $VIB   ',IEOF)
      IF(IEOF.EQ.1) THEN
         RSTART = .FALSE.
      ELSE
         RSTART = .TRUE.
         IF(MASWRK) WRITE(IW,9120)
      END IF
 9120 FORMAT(/5X,'A $VIB GROUP WAS FOUND IN YOUR INPUT.'/
     *        5X,'THEREFORE, THIS IS A NUMERICAL HESSIAN RESTART.')
C
      IFCM=35
      IF (MASWRK) CALL SEQOPN(IFCM,'RESTART','NEW',.FALSE.,'FORMATTED')
      IF (MASWRK) WRITE(IFCM,8010) TITLE
 8010 FORMAT('ENERGY/GRADIENT/DIPOLE RESTART DATA FOR RUNTYP=HESSIAN'/
     *         10A8)
      IF (MASWRK) WRITE(IW,9130) BLANK,0,0,0,E
C     CALL PUVIB(IFCM,IW,.FALSE.,NCOORD,0,0,0,
C    *           E,EG,DIPOLE)
      IF(RSTART) THEN
         IF(MASWRK) WRITE(IW,9050)
 9050    FORMAT(/5X,'READING $VIB RESTART DATA FROM $VIB CARDS...')
         ECOMPUT = E
         IREAD   = 0
         IVIB0   = 0
         IAT0    = 0
         ICOORD0 = 0
         CALL RDVIB(IR,IW,IREAD,NCOORD,IVIB0,IAT0,ICOORD0,
     *              E,EG,DIPOLE,EOF,DUMY,DUMY)
         IF(EOF) THEN
            IF(MASWRK) WRITE(IW,*) 'PROBLEM READING $VIB GROUP.'
         END IF
         IF(ABS(ECOMPUT-E).GT.1.0D-05) THEN
            IF(MASWRK) WRITE(IW,'(/1X,A,A/)')
     *      'ERROR: $VIB IVIB=0 E= DOES NOT MATCH THE COMPUTED ',
     *      'ENERGY. QUANPOL WILL QUIT.'
            CALL ABRT
         END IF
      END IF
C
      DISPL=0.01D+00
      DO IVIB = 1, 2
      IF(IVIB.EQ.1) SIGN=+1.0D+00
      IF(IVIB.EQ.2) SIGN=-1.0D+00
      DO IAT = 1, NAT
      IFFAT = IAT
      IF(NACTMM.GT.0) IFFAT = LACTMM(IAT)
      DO III = 1, 3
C
         IF(RSTART) THEN
            KVIB    = IVIB
            KAT     = IAT
            KCOORD  = III
            CALL RDVIB(IR,IW,IREAD,NCOORD,KVIB,KAT,KCOORD,
     *                 E,EG,DIPOLE,EOF,DUMY,DUMY)
            IF(EOF) RSTART = .FALSE.
         END IF
         IF(RSTART) GOTO 630
C
         CSAVE=C(III,IAT)
         C(III,IAT)=C(III,IAT)+SIGN*DISPL
         CORD(III,IFFAT)=C(III,IAT)
C
C        -- CALCULATE ENERGY AND GRADIENT
C           NO NEED TO UPDATE NONBOND LIST
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR,CORDB,
     *               LSBONDPMA,LSBONDPMB)
         CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST,CORDB,
     *               LSANGLPMA,LSANGLPMB)
         CALL E12312(CORD,FFGRD2,ANGL0,KLIST,BOND0,FCSTBD,
     *               KBLST,CORDB,LSANGLPMA,LSANGLPMB)
         CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST,CORDB,
     *               LSDIHBPMA,LSDIHBPMB)
         CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST,CORDB,
     *               LSWAGGPMA,LSWAGGPMB)
         CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST,CORDB,
     *               LSDIHRPMA,LSDIHRPMB,FCDIHR)
         CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO,CORDB,
     *               LSCMAPPMA,LSCMAPPMB)
         CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLS1,
     *               L1213J,SIGB,EPSB,SIG2B,EPS2B,
     *               NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *               NONLSPMA,L1213PMA,L14PMA,CORDB,
     *               NONLSPMB,L1213PMB,L14PMB,FCLJTP,NTYPE)
         CALL ESPHER(CORD,FFGRD2)
         CALL ECHARG(CORD,FFGRD2,CHARG,NONLS1,L1213J,L14J,
     *               CHARGB,NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *               NONLSPMA,L1213PMA,L14PMA,CORDB,
     *               NONLSPMB,L1213PMB,L14PMB)
         CALL UMBRELLA(CORD,FFGRD2,UMBHIS,UM2HIS)
         IF(IFIXSOL.EQ.0) THEN
            CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                  CMAT1,POT1,QRXN1,NTS)
            CALL POLRXN(CORD,FFGRD2,CHARG,POL,POLSV,DIP,
     *                  FIELD1,FIELD2,FIELD3,
     *                  XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *                  NONLS1,L1213J)
         END IF
         IF(IFIXSOL.EQ.1) THEN
            CALL FIXSOL(CORD,FFGRD2,CHARG,ZANF,AFIX,QFIX,
     *                  VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                  RFIX,IDATOM,DAI,IDDAI,
     *                  POL,POLSV,DIP,FIELD1,FIELD2,FIELD3,
     *                  NONLS1,L1213J)
         END IF
         IF(GOPARR) THEN
            ENALL( 1) = EN12
            ENALL( 2) = EN123
            ENALL( 3) = EN123R4
            ENALL( 4) = EN123B4
            ENALL( 5) = EN234W1
            ENALL( 6) = ENCHAR
            ENALL( 7) = ENLJR
            ENALL( 8) = ENLJD
            ENALL(12) = ENUCCH
            ENALL(13) = ENRXN
            ENALL(14) = ENRXNR
C           ENALL(15) = ENCENT
            ENALL(16) = ENCMAP
            ENALL(18) = SOL1CH
            ENALL(19) = SOL1LJ
            ENALL(20) = SOL1IM
            ENALL(21) = SOL2CH
            ENALL(22) = SOL2LJ
            ENALL(23) = SOL2IM
            ENALL(33) = PMF1BD
            ENALL(34) = PMF1AG
            ENALL(35) = PMF1DR
            ENALL(36) = PMF1DB
            ENALL(37) = PMF1WG
            ENALL(38) = PMF1CM
            ENALL(39) = PMF1CH
            ENALL(40) = PMF1LJ
            ENALL(41) = ENBIAS
            ENALL(42) = EN12312
            CALL DDI_GSUMF(2410,ENALL  ,42)
            CALL DDI_GSUMF(2411,FFGRD2,3*NFFAT)
            EN12      = ENALL( 1)
            EN123     = ENALL( 2)
            EN123R4   = ENALL( 3)
            EN123B4   = ENALL( 4)
            EN234W1   = ENALL( 5)
            ENCHAR    = ENALL( 6)
            ENLJR     = ENALL( 7)
            ENLJD     = ENALL( 8)
            ENUCCH    = ENALL(12)
            ENRXN     = ENALL(13)
            ENRXNR    = ENALL(14)
C           ENCENT    = ENALL(15)
            ENCMAP    = ENALL(16)
            SOL1CH    = ENALL(18)
            SOL1LJ    = ENALL(19)
            SOL1IM    = ENALL(20)
            SOL2CH    = ENALL(21)
            SOL2LJ    = ENALL(22)
            SOL2IM    = ENALL(23)
            PMF1BD    = ENALL(33)
            PMF1AG    = ENALL(34)
            PMF1DR    = ENALL(35)
            PMF1DB    = ENALL(36)
            PMF1WG    = ENALL(37)
            PMF1CM    = ENALL(38)
            PMF1CH    = ENALL(39)
            PMF1LJ    = ENALL(40)
            ENBIAS    = ENALL(41)
            EN12312   = ENALL(42)
         END IF
         ENPOT = EN12 + EN123 + EN123R4 + EN234W1 + EN123B4 + ENCHAR
     *         + ENPOL  + ENRXN  + ENRXNPOL+ENRXNR + ENLJR + ENLJD
     *         + ENCMAP + ENFIXSO+ EN12312
         E= ENPOT
         IF(NACTMM.EQ.0) THEN
            DO JAT = 1, NFFAT
               JFFAT = JAT
               DO JJJ = 1, 3
                  EG(JJJ,JAT) =FFGRD2(JJJ,JFFAT)
               ENDDO
            ENDDO
         END IF
         IF(NACTMM.GT.0) THEN
            DO JAT = 1, NACTMM
               JFFAT = LACTMM(JAT)
               DO JJJ = 1, 3
                  EG(JJJ,JAT) =FFGRD2(JJJ,JFFAT)
               ENDDO
            ENDDO
         END IF
C        -- CALCULATE DIPOLE MOMENT
         DMMX= ZERO
         DMMY= ZERO
         DMMZ= ZERO
         AMX = ZERO
         AMY = ZERO
         AMZ = ZERO
         AMT = ZERO           
         DO JFFAT = 1, NFFAT
            AMX = AMX  + CORD(1,JFFAT)*ZMAS(JFFAT)
            AMY = AMY  + CORD(2,JFFAT)*ZMAS(JFFAT)
            AMZ = AMZ  + CORD(3,JFFAT)*ZMAS(JFFAT)
            AMT = AMT  + ZMAS(JFFAT)
         ENDDO
         AMX = AMX/AMT
         AMY = AMY/AMT
         AMZ = AMZ/AMT
         DO JFFAT = 1, NFFAT
            DMMX=DMMX + CHARG(JFFAT)*(CORD(1,JFFAT)-AMX)
            DMMY=DMMY + CHARG(JFFAT)*(CORD(2,JFFAT)-AMY)
            DMMZ=DMMZ + CHARG(JFFAT)*(CORD(3,JFFAT)-AMZ)
         ENDDO
         IF(IDOPOL.GT.0) THEN
            DO JFFAT = 1, NFFAT
               DMMX=DMMX + DIP(1,JFFAT)
               DMMY=DMMY + DIP(2,JFFAT)
               DMMZ=DMMZ + DIP(3,JFFAT)
            ENDDO
         END IF
         DIPOLE(1) = DMMX/DB2AU
         DIPOLE(2) = DMMY/DB2AU
         DIPOLE(3) = DMMZ/DB2AU
C
         C(III,IAT)=CSAVE
         CORD(III,IFFAT)=C(III,IAT)
C
  630    CONTINUE
         IF (MASWRK) WRITE(IW,9130) BLANK,IVIB,IAT,III,E
 9130 FORMAT(1X,A8,' IVIB=',I4,' IATOM=',I4,' ICOORD=',I4,' E=',F20.10)
C        CALL PUVIB(IFCM,IW,RSTART,NCOORD,IVIB,IAT,III,
C    *              E,EG,DIPOLE)
         CALL DCOPY(3*NAT,EG,1,VIBGRD(1,III,IAT,IVIB),1)
         VIBDIP(1,III,IAT,IVIB)=DIPOLE(1)
         VIBDIP(2,III,IAT,IVIB)=DIPOLE(2)
         VIBDIP(3,III,IAT,IVIB)=DIPOLE(3)
      ENDDO
      ENDDO
      ENDDO
C
      DO IAT = 1, NAT
         DO III = 1, 3
            DO JAT = 1, NAT
               DO JJJ = 1, 3
                  VIBHSS((JAT-1)*3+JJJ,(IAT-1)*3+III)
     *            =(VIBGRD((JAT-1)*3+JJJ,III,IAT,1)
     *             -VIBGRD((JAT-1)*3+JJJ,III,IAT,2))/(DISPL+DISPL)
               ENDDO
            ENDDO
         ENDDO
      ENDDO
      DO IAT = 1, NAT
         DO III = 1, 3
            DO JJJ = 1, 3
               VIBDDM(III,(IAT-1)*3+JJJ)
     *         =(VIBDIP(III,JJJ,IAT,1)
     *          -VIBDIP(III,JJJ,IAT,2))/(DISPL+DISPL)
            ENDDO
         ENDDO
      ENDDO
C
  700 CONTINUE
      IF(MASWRK) WRITE(IP,'(A)')
     *'----- HESSIAN MATRIX (NOT MASS WEIGHTED) -----'
      IF(MASWRK) WRITE(IP,'(A,A/A/1X,A/1X,A)')
     *'MAKE SURE TO USE MMHESS=1 WHEN MM $HESS IS USED FOR QM/MM ',
     *'GEOMETRY SEARCH',
     *'MAKE SURE TO USE MMHESS=0 WHEN QM/MM $HESS IS USED FOR QM/MM ',
     *'$QUANPO MMHESS=1 $END ! IF E(NUC) IS     0.0000000000 BELOW',
     *'$QUANPO MMHESS=0 $END ! IF E(NUC) IS NOT 0.0000000000 BELOW'
      CALL FCMPUN(VIBHSS,3*NAT)
      CALL DAWRIT(IDAF,IODA,VIBHSS,3*NAT*3*NAT,4,0)
      CALL DAWRIT(IDAF,IODA,VIBDDM,3*3*NAT,34,0)
C
C     - VIBANL -
      PROJCT =.TRUE.
      GOTDDM =.TRUE.
      GOTADM =.FALSE.
      IF((.NOT.CVGED).AND.MASWRK) WRITE(IW,9010)
 9010 FORMAT(/
     *   5X,'*******************************************************'/
     *   5X,'* THIS IS NOT A STATIONARY POINT ON THE MOLECULAR PES *'/
     *   5X,'*     THE VIBRATIONAL ANALYSIS IS NOT VALID !!!       *'/
     *   5X,'*******************************************************')
      STATPT =.TRUE.
      SCFOK  =.TRUE.
      NTEMP  = 1
      TEMP(1)= TEMP0
      SCLFAC = 1.0D+00
      NIRRED = MXIRR
      DO I =1, MXIRR
         IRPNAM(I)=IRPA
      ENDDO
      EFLDL  = .FALSE.  ! THIS HELPS PROJECT THE ROTATIONS
C
      NPART  = NAT
      NC1    = 3*NAT
      NC2    = (NC1**2+NC1)/2
      NC3    = NC1**2
      CALL VALFM(LOADFM)
      LVEC   = LOADFM + 1
      LFCM   = LVEC   + NC3
      LE     = LFCM   + NC2
      LSCR   = LE     + NC1
      LIA    = LSCR   + NC1*8
      LRM    = LIA    + NC1
      LSVT   = LRM    + NCOORD
      LSVR   = LSVT   + NC1*3
      LSVTT  = LSVR   + NC1*3
      LSVRT  = LSVTT  + NC1
      LCC    = LSVRT  + NC1
      LCOM   = LCC    + 3*NPART
      LZMS   = LCOM   + 3*NPART
      LBUF1  = LZMS   +   NPART
      LBUF2  = LBUF1  + NC3
      LDDM   = LBUF2  + NC3
      LADM   = LDDM   + NC1*3
      LAST   = LADM   + NC1*6
      NEED   = LAST   - LOADFM
      CALL GETFM(NEED)
      IF(MASWRK) WRITE(IP,'(A,A/A/1X,A/1X,A)')
     *'MAKE SURE TO USE MMHESS=1 WHEN MM $HESS IS USED FOR QM/MM ',
     *'GEOMETRY SEARCH',
     *'MAKE SURE TO USE MMHESS=0 WHEN QM/MM $HESS IS USED FOR QM/MM ',
     *'$QUANPO MMHESS=1 $END ! IF E(NUC) IS     0.0000000000 BELOW',
     *'$QUANPO MMHESS=0 $END ! IF E(NUC) IS NOT 0.0000000000 BELOW'
      CALL FGMTRX(X(LVEC),X(LFCM),X(LE),X(LSCR),X(LIA),X(LRM),
     *            X(LSVT),X(LSVR),X(LSVTT),X(LSVRT),
     *            freq,X(LCC),X(LCOM),X(LZMS),X(LBUF1),X(LBUF2),
     *            NC1,NC2,NPART,X(LDDM),GOTDDM,X(LADM),GOTADM,
     *            PROJCT,STATPT,SCFOK,0,0)
      CALL RETFM(NEED)
      IF((.NOT.CVGED).AND.MASWRK) WRITE(IW,9010)
      IF (MASWRK) WRITE(IW,9020)
      CALL TIMIT(1)
      NAT = 0
C
 9020 FORMAT(1X,'......END OF NORMAL COORDINATE ANALYSIS......')
C
      RETURN
      END
C*MODULE QUANPO  *DECK HESSQM
!>            
!> @brief    QM Hessian in QM/MM system
!>                      
!> @author   Rui Lai and Hui Li
!>           - Dec 2014
!>                    
!> @details  double displacement of selected QM atoms
!>
      SUBROUTINE HESSQM(CORD,CORDSV,DIP,
     *                  FFGRD2,QMGRD2,
     *                  LISTQM,NONLS1,NONLSTQ,
     *                  LSTCELL,NONLS2,CORDSV2,CORDSVQ,
     *                  MVFASTS2,MVFASTS3,MVFASTS4,
     *                  MVFASTL2,MVFASTL3,MVFASTL4,
     *                  NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                  NONLSPMA,NONLSPMB,
     *                  VIBGRD,VIBDIP,VIBHSS,VIBDDM)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL CVGED,PROJCT,GOTDDM,GOTADM,STATPT,SCFOK,
     *        PRTSCN,GOTFRQ,GOTEH,EOF,RSTART
C
      PARAMETER (MXATM=2000, MXAO=8192, MXRT=100, MXIRR=14)
      PARAMETER (ZERO=0.0D+00, THREE=3.0D+00)
      PARAMETER (DB2AU=1.0D+00/2.541766D+00)
C
      LOGICAL EFLDL
C
      DIMENSION CORD(3,NFFAT),CORDSV(3,NFFAT),
     *          DIP(3,NFFAT),
     *          FFGRD2(3,NFFAT),QMGRD2(3,NAT),
     *          LISTQM(*),NONLSTQ(*)
      DIMENSION VIBGRD(3*NAT,3,NAT,2),
     *          VIBDIP(3,3,NAT,2),
     *          VIBHSS(3*NAT,3*NAT),
     *          VIBDDM(3,3*NAT)
      DIMENSION DIPOLE(3)
C
      COMMON /EFLDC / EVEC(3),EFLDL
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FMCOM / X(1)
      COMMON /FUNCT / E,EG(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /MASSES/ ZMASS(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
      COMMON /OPTGRD/ XX(3,MXATM),ES,FE(20),
     *                CONVF,FMAXT,DXMAXT,RMAX,RMIN,RLIM,
     *                EIGMAX,EIGMIN,GRDERR,FRMS,FMAX,TRMAX,TRMIN,
     *                IC(20),MSTEP,NSERCH,NPMAX,NP,IFOLOW,
     *                NNEG,IUPHSS,IEXIT,ITRUPD,IPAD,KDIAGH
      COMMON /SCFOPT/ CONVHF,MAXIT,MCONV,NPUNCH,NPREO(4)
      COMMON /SYMBLK/ NIRRED,NSALC,NSALC2,NSALC3,NSAFMO
      COMMON /SYMREP/ IRPNAM(MXIRR),IPA(MXIRR),LAMBDA(MXIRR),
     *                LAMBD0(MXIRR),IADDR1(MXIRR),IADDR2(MXIRR),
     *                IADDR3(MXIRR)
      COMMON /THERMD/ FREQ(3*MXATM),TEMP(10),SCLFAC,NTEMP,PRTSCN,GOTFRQ
      COMMON /XYZPRP/ XP,YP,ZP,
     *                DMX,DMY,DMZ,
     *                QXX,QYY,QZZ,QXY,QXZ,QYZ,
     *                QMXX,QMYY,QMZZ,QMXY,QMXZ,QMYZ,
     *                OXXX,OXXY,OXXZ,OXYY,OYYY,OYYZ,
     *                OXZZ,OYZZ,OZZZ,OXYZ,
     *                OMXXX,OMXXY,OMXXZ,OMXYY,OMYYY,
     *                OMYYZ,OMXZZ,OMYZZ,OMZZZ,OMXYZ
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
C
      DATA IRPA /4HA   /
C
C     -- CALCULATE VIBRATIONAL FREQUENCIES
C        RUI LAI AND HUI LI, DEC 22, 2014, LINCOLN
C
      IF(NSTEP.LT.0) RETURN
C
      NPRINT  = -5
C
      NCOORD=NAT*3
      CALL DAWRIT(IDAF,IODA,EG,NCOORD, 3,0)
      CVGED =.FALSE.
C
C     -- TRY TO READ IN $HESS --
      GOTEH = .FALSE.
      CALL VCLR(VIBHSS,3*NAT*3*NAT,1)
      CALL VCLR(VIBDDM,3*3*NAT,1)
      CALL FCMIN(VIBHSS,NCOORD,GOTEH)
C
C        -- VIB 0 --
C
         NPUNCH = 2
C
C        -- CALCULATE ENERGY AND GRADIENT -
         CALL NONBOND(0,CORD,CORDSV,CORDSV2,CORDSVQ,
     *                NONLS1,NONLS2,
     *                NONLSTQ,LSTCELL,
     *                MVFASTS2,MVFASTS3,MVFASTS4,
     *                MVFASTL2,MVFASTL3,MVFASTL4,
     *                NONLSA,NONLSB,KFREEA,KFREEB,LISTB2A,
     *                NONLSPMA,NONLSPMB)
         CALL VCLR(QMGRD2,1,3*NAT)
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL GRADX
         CALL DCOPY(3*NAT,EG,1,QMGRD2,1)
         CALL ELMOMC
         DMXA = DMX
         DMYA = DMY
         DMZA = DMZ
         IF(IFEPTOP.EQ.1.AND.MATOMB.GT.0) THEN
            CALL SAVEABPROP(1)
            CALL DCOPY(3*MATOMA,C,1,X(LFFCX),1)
            CALL SAVEFFDATA
            CALL SETQMAB(2)
            CALL SETFFDATAB(2)
            CALL VCLR(QMGRD2,1,3*NAT  )
            CALL VCLR(FFGRD2,1,3*NFFAT)
            CALL VCLR(VIR   ,1,3)
            CALL GRADX
            CALL DCOPY(3*NAT,EG,1,QMGRD2,1)
            CALL ELMOMC
            DMXB = DMX
            DMYB = DMY
            DMZB = DMZ
            CALL SAVEABPROP(2)
            CALL SETQMAB(1)
            CALL SETFFDATAB(1)
            CALL MIXABPROP
            DMX = (1-WSIMUL)*DMXA + WSIMUL*DMXB
            DMY = (1-WSIMUL)*DMYA + WSIMUL*DMYB
            DMZ = (1-WSIMUL)*DMZA + WSIMUL*DMZB
         END IF
         E      = ETOT
C        -- CALCULATE DIPOLE MOMENT
         DIPOLE(1)= ZERO
         DIPOLE(2)= ZERO
         DIPOLE(3)= ZERO
         IF(IDOPOL.GT.0) THEN
            DO JFFAT = 1, NFFAT
               DIPOLE(1)=DIPOLE(1) + DIP(1,JFFAT)
               DIPOLE(2)=DIPOLE(2) + DIP(2,JFFAT)
               DIPOLE(3)=DIPOLE(3) + DIP(3,JFFAT)
            ENDDO
         END IF
         DIPOLE(1)=DIPOLE(1)/DB2AU + DMX
         DIPOLE(2)=DIPOLE(2)/DB2AU + DMY
         DIPOLE(3)=DIPOLE(3)/DB2AU + DMZ
C
C        - COMBINE QM AND MM GRADIENTS -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  QMGRD2(1,IAT)   = QMGRD2(1,IAT) + FFGRD2(1,KFFAT)
                  QMGRD2(2,IAT)   = QMGRD2(2,IAT) + FFGRD2(2,KFFAT)
                  QMGRD2(3,IAT)   = QMGRD2(3,IAT) + FFGRD2(3,KFFAT)
                  EG(1,IAT)       = QMGRD2(1,IAT) 
                  EG(2,IAT)       = QMGRD2(2,IAT)
                  EG(3,IAT)       = QMGRD2(3,IAT)
                  FFGRD2(1,KFFAT) = QMGRD2(1,IAT)
                  FFGRD2(2,KFFAT) = QMGRD2(2,IAT)
                  FFGRD2(3,KFFAT) = QMGRD2(3,IAT)
               END IF
            ENDDO
         END IF
C
C        - ZERO OFF SOME FORCES -
C          
         IF(NACTQM.GT.0) THEN
            DO KOPT = 1, NACTQM
               IAT = LACTQM(KOPT)
               IF(IAT.GT.0)QMGRD2(1,IAT)=QMGRD2(1,IAT)+1.0D+03
            ENDDO
            DO IAT = 1, NAT
               IF(QMGRD2(1,IAT).GT.0.5D+03) THEN
                  QMGRD2(1,IAT) = QMGRD2(1,IAT)-1.0D+03
               ELSE
                  DO III = 1, 3
                     QMGRD2(III,IAT) = ZERO
                     EG(III,IAT)     = ZERO
                  ENDDO
               END IF
            ENDDO
         END IF
         DO KFIX=1,NFIXQM
            DO III = 1, 3
               QMGRD2(III,IFIXQM(KFIX)) = ZERO
               EG(III,IFIXQM(KFIX))     = ZERO
            ENDDO
         ENDDO
C
C        - TEST CONVERGENCE
C
         CONVF  = 1.0D-04
         GRDMAX = ZERO
         GRDRMS = ZERO
         DO IAT=1, NAT
            GRDMAX=MAX(GRDMAX,ABS(QMGRD2(1,IAT)))
            GRDMAX=MAX(GRDMAX,ABS(QMGRD2(2,IAT)))
            GRDMAX=MAX(GRDMAX,ABS(QMGRD2(3,IAT)))
            GRDRMS=GRDRMS + QMGRD2(1,IAT)**2
     *                    + QMGRD2(2,IAT)**2
     *                    + QMGRD2(3,IAT)**2
         ENDDO
         IF(NACTQM.EQ.0)
     *   GRDRMS = SQRT(GRDRMS/(3*(NAT-NFIXQM)))
         IF(NACTQM.GT.0)
     *   GRDRMS = SQRT(GRDRMS/(3*(NACTQM-NFIXQM)))
         IF(GRDMAX.LT.CONVF.AND.GRDRMS.LT.(CONVF/THREE)) CVGED=.TRUE.
C
C        - CALCULATE PROPERTIES -
         CALL OPTPROP(0,1)
C        -- MUST SAVE THE VIB 0 GRADIENT
         CALL DAWRIT(IDAF,IODA,EG,NCOORD, 3,0)
C
      CALL TIMIT(1)
C
      IF(MASWRK) WRITE(IW,'(//1X,A/1X,A/1X,A//)')
     *'******************************************',
     *'QUANPOL QM/MM HESSIAN CALCULATION: QM ONLY',
     *'******************************************'
      IF(GOTEH) GOTO 700
      IF(MASWRK) WRITE(IW,'(/1X,A/)')
     *'NO $HESS IS FOUND IN INPUT FILE. MUST COMPUTE IT.'
C
C     -- TRY TO READ IN $VIB FROM THE INPUT FILE
C
      CALL SEQREW(IR)
      CALL FNDGRP(IR,' $VIB   ',IEOF)
      IF(IEOF.EQ.1) THEN
         RSTART = .FALSE.
      ELSE
         RSTART = .TRUE.
         IF(MASWRK) WRITE(IW,9120)
      END IF
 9120 FORMAT(/5X,'A $VIB GROUP WAS FOUND IN YOUR INPUT.'/
     *        5X,'THEREFORE, THIS IS A NUMERICAL HESSIAN RESTART.')
C
      IFCM=35
      IF (MASWRK) CALL SEQOPN(IFCM,'RESTART','NEW',.FALSE.,'FORMATTED')
      IF (MASWRK) WRITE(IFCM,8010) TITLE
 8010 FORMAT('ENERGY/GRADIENT/DIPOLE RESTART DATA FOR RUNTYP=HESSIAN'/
     *         10A8)
      CALL PUVIB(IFCM,IW,.FALSE.,NCOORD,0,0,0,
     *           E,EG,DIPOLE)
      IF(RSTART) THEN
         IF(MASWRK) WRITE(IW,9050)
 9050    FORMAT(/5X,'READING $VIB RESTART DATA FROM $VIB CARDS...')
         ECOMPUT = E
         IREAD   = 0
         IVIB0   = 0
         IAT0    = 0
         ICOORD0 = 0
         CALL RDVIB(IR,IW,IREAD,NCOORD,IVIB0,IAT0,ICOORD0,
     *              E,EG,DIPOLE,EOF,DUMY,DUMY)
         IF(EOF) THEN
            IF(MASWRK) WRITE(IW,*) 'PROBLEM READING $VIB GROUP.'
         END IF
         IF(ABS(ECOMPUT-E).GT.1.0D-05) THEN
            IF(MASWRK) WRITE(IW,'(/1X,A,A/)')
     *      'ERROR: $VIB IVIB=0 E= DOES NOT MATCH THE COMPUTED ',
     *      'ENERGY. QUANPOL WILL QUIT.'
            CALL ABRT
         END IF
      END IF
C
      DISPL= 0.01D+00
      DO IVIB = 1, 2
      IF(IVIB.EQ.1) SIGN=+1.0D+00
      IF(IVIB.EQ.2) SIGN=-1.0D+00
      DO 610 IAT = 1, NAT
      IYES = 1
      IF(NACTQM.GT.0) THEN
         IYES = 0
         DO LLL = 1, NACTQM
            IF(IAT.EQ.LACTQM(LLL)) IYES = 1
         ENDDO
      END IF
      IF(IYES.EQ.0) GOTO 610
      DO III = 1, 3
C
         IF(RSTART) THEN
            KVIB    = IVIB
            KAT     = IAT
            KCOORD  = III
            CALL RDVIB(IR,IW,IREAD,NCOORD,KVIB,KAT,KCOORD,
     *                 E,EG,DIPOLE,EOF,DUMY,DUMY)
            IF(EOF) RSTART = .FALSE.
         END IF
         IF(RSTART) GOTO 630
C
         CSAVE=C(III,IAT)
         C(III,IAT)=C(III,IAT)+SIGN*DISPL 
         IF(LISTQM(NFFAT+IAT).GT.0)THEN
            CORD(III,LISTQM(NFFAT+IAT)) = C(III,IAT)
         END IF
C
C        -- CALCULATE ENERGY AND GRADIENT
C           NO NEED TO UPDATE NONBOND LIST
         CALL VCLR(QMGRD2,1,3*NAT)
         CALL VCLR(FFGRD2,1,3*NFFAT)
         NAT    = NAT
         NPUNCH = 0
         CALL GRADX
         CALL DCOPY(3*NAT,EG,1,QMGRD2,1)
         CALL ELMOMC
         DMXA = DMX
         DMYA = DMY
         DMZA = DMZ
         IF(IFEPTOP.EQ.1.AND.MATOMB.GT.0) THEN
            CALL SAVEABPROP(1)
            CALL DCOPY(3*MATOMA,C,1,X(LFFCX),1)
            CALL SAVEFFDATA
            CALL SETQMAB(2)
            CALL SETFFDATAB(2)
            CALL VCLR(QMGRD2,1,3*NAT)
            CALL VCLR(FFGRD2,1,3*NFFAT)
            CALL VCLR(VIR   ,1,3)
            CALL GRADX
            CALL DCOPY(3*NAT,EG,1,QMGRD2,1)
            CALL ELMOMC
            DMXB = DMX
            DMYB = DMY
            DMZB = DMZ
            CALL SAVEABPROP(2)
            CALL SETQMAB(1)
            CALL SETFFDATAB(1)
            CALL MIXABPROP
            DMX = (1-WSIMUL)*DMXA + WSIMUL*DMXB
            DMY = (1-WSIMUL)*DMYA + WSIMUL*DMYB
            DMZ = (1-WSIMUL)*DMZA + WSIMUL*DMZB
         END IF
         E      = ETOT
C        - COMBINE QM AND MM GRADIENTS -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO KAT = 1, NAT
               KFFAT = LISTQM(NFFAT+KAT)
               IF(KFFAT.GT.0) THEN
                  QMGRD2(1,KAT)   = QMGRD2(1,KAT) + FFGRD2(1,KFFAT)
                  QMGRD2(2,KAT)   = QMGRD2(2,KAT) + FFGRD2(2,KFFAT)
                  QMGRD2(3,KAT)   = QMGRD2(3,KAT) + FFGRD2(3,KFFAT)
                  EG(1,KAT)       = QMGRD2(1,KAT)
                  EG(2,KAT)       = QMGRD2(2,KAT)
                  EG(3,KAT)       = QMGRD2(3,KAT)
                  FFGRD2(1,KFFAT) = QMGRD2(1,KAT)
                  FFGRD2(2,KFFAT) = QMGRD2(2,KAT)
                  FFGRD2(3,KFFAT) = QMGRD2(3,KAT)
               END IF
            ENDDO
         END IF
C        -- CALCULATE DIPOLE MOMENT
         DIPOLE(1)= ZERO
         DIPOLE(2)= ZERO
         DIPOLE(3)= ZERO
         IF(IDOPOL.GT.0) THEN
            DO JFFAT = 1, NFFAT
               DIPOLE(1)=DIPOLE(1) + DIP(1,JFFAT)
               DIPOLE(2)=DIPOLE(2) + DIP(2,JFFAT)
               DIPOLE(3)=DIPOLE(3) + DIP(3,JFFAT)
            ENDDO
         END IF
         DIPOLE(1)=DIPOLE(1)/DB2AU + DMX
         DIPOLE(2)=DIPOLE(2)/DB2AU + DMY
         DIPOLE(3)=DIPOLE(3)/DB2AU + DMZ
C
         C(III,IAT)=CSAVE
         IF(LISTQM(NFFAT+IAT).GT.0)THEN
            CORD(III,LISTQM(NFFAT+IAT)) = C(III,IAT)
         END IF
C
  630    CONTINUE
         CALL PUVIB(IFCM,IW,RSTART,NCOORD,IVIB,IAT,III,
     *              E,EG,DIPOLE)
         CALL DCOPY(3*NAT,EG,1,VIBGRD(1,III,IAT,IVIB),1)
         VIBDIP(1,III,IAT,IVIB)=DIPOLE(1)
         VIBDIP(2,III,IAT,IVIB)=DIPOLE(2)
         VIBDIP(3,III,IAT,IVIB)=DIPOLE(3)
      ENDDO
  610 CONTINUE
      ENDDO
C
      DO IAT = 1, NAT
         IYES = 1
         IF(NACTQM.GT.0) THEN
            IYES = 0
            DO LLL = 1, NACTQM
               IF(IAT.EQ.LACTQM(LLL)) IYES = 1
            ENDDO 
         END IF
         DO III = 1, 3
            DO JAT = 1, NAT
               JYES = 1
               IF(NACTQM.GT.0) THEN
                  JYES = 0
                  DO LLL = 1, NACTQM
                     IF(JAT.EQ.LACTQM(LLL)) JYES = 1
                  ENDDO 
               END IF
               DO JJJ = 1, 3
                  VIBHSS((JAT-1)*3+JJJ,(IAT-1)*3+III)
     *            =(VIBGRD((JAT-1)*3+JJJ,III,IAT,1)
     *             -VIBGRD((JAT-1)*3+JJJ,III,IAT,2))/(2*DISPL)
                  IF(IYES+JYES.LT.2)
     *            VIBHSS((JAT-1)*3+JJJ,(IAT-1)*3+III) = ZERO
                  IF(IYES+JYES.EQ.0.AND.IAT.EQ.JAT.AND.III.EQ.JJJ)
     *            VIBHSS((JAT-1)*3+JJJ,(IAT-1)*3+III) = 
     *            -3.7843877795D-08*ZMASS(IAT)
               ENDDO
            ENDDO
         ENDDO
      ENDDO
      DO IAT = 1, NAT
         IYES = 1
         IF(NACTQM.GT.0) THEN
            IYES = 0
            DO LLL = 1, NACTQM
               IF(IAT.EQ.LACTQM(LLL)) IYES = 1
            ENDDO
         END IF
         DO III = 1, 3
            DO JJJ = 1, 3
               VIBDDM(III,(IAT-1)*3+JJJ)
     *         =(VIBDIP(III,JJJ,IAT,1)
     *          -VIBDIP(III,JJJ,IAT,2))/(2*DISPL)
               IF(IYES.EQ.0) VIBDDM(III,(IAT-1)*3+JJJ) = ZERO
            ENDDO
         ENDDO
      ENDDO
C
  700 CONTINUE
      IF(MASWRK) WRITE(IP,'(A)')
     *'----- HESSIAN MATRIX (NOT MASS WEIGHTED) -----'
      CALL FCMPUN(VIBHSS,NCOORD)
      CALL DAWRIT(IDAF,IODA,VIBHSS,NCOORD*NCOORD,4,0)
      CALL DAWRIT(IDAF,IODA,VIBDDM,3*NCOORD,34,0)
C
C     - VIBANL -
      PROJCT =.TRUE.
      GOTDDM =.TRUE.
      GOTADM =.FALSE.
      IF((.NOT.CVGED).AND.MASWRK) WRITE(IW,9010)
 9010 FORMAT(/
     *   5X,'*******************************************************'/
     *   5X,'* THIS IS NOT A STATIONARY POINT ON THE MOLECULAR PES *'/
     *   5X,'*     THE VIBRATIONAL ANALYSIS IS NOT VALID !!!       *'/
     *   5X,'*******************************************************')
      STATPT =.TRUE.
      SCFOK  =.TRUE.
      NTEMP  = 1
      TEMP(1)= TEMP0
      SCLFAC = 1.0D+00
      NIRRED = MXIRR
      DO I =1, MXIRR
         IRPNAM(I)=IRPA
      ENDDO
      EFLDL  = .FALSE.  ! THIS HELPS PROJECT THE ROTATIONS
C
      NPART  = NAT
      NC1    = 3*NAT
      NC2    = (NC1**2+NC1)/2
      NC3    = NC1**2
      CALL VALFM(LOADFM)
      LVEC   = LOADFM + 1
      LFCM   = LVEC   + NC3
      LE     = LFCM   + NC2
      LSCR   = LE     + NC1
      LIA    = LSCR   + NC1*8
      LRM    = LIA    + NC1
      LSVT   = LRM    + NCOORD
      LSVR   = LSVT   + NC1*3
      LSVTT  = LSVR   + NC1*3
      LSVRT  = LSVTT  + NC1
      LCC    = LSVRT  + NC1
      LCOM   = LCC    + 3*NPART
      LZMS   = LCOM   + 3*NPART
      LBUF1  = LZMS   +   NPART
      LBUF2  = LBUF1  + NC3
      LDDM   = LBUF2  + NC3
      LADM   = LDDM   + NC1*3
      LAST   = LADM   + NC1*6
      NEED   = LAST   - LOADFM
      CALL GETFM(NEED)
      CALL FGMTRX(X(LVEC),X(LFCM),X(LE),X(LSCR),X(LIA),X(LRM),
     *            X(LSVT),X(LSVR),X(LSVTT),X(LSVRT),
     *            freq,X(LCC),X(LCOM),X(LZMS),X(LBUF1),X(LBUF2),
     *            NC1,NC2,NPART,X(LDDM),GOTDDM,X(LADM),GOTADM,
     *            PROJCT,STATPT,SCFOK,0,0)
      CALL RETFM(NEED)
      IF((.NOT.CVGED).AND.MASWRK) WRITE(IW,9010)
      IF (MASWRK) WRITE(IW,9020)
      CALL TIMIT(1)
C
 9020 FORMAT(1X,'......END OF NORMAL COORDINATE ANALYSIS......')
C
      RETURN
      END
C*MODULE QUANPO  *DECK OPTPROP
!>            
!> @brief    properties in optimization process
!>                      
!> @author   Hui Li
!>           - Apr 2011
!>                    
!> @details  calculate properties in optimization
!>
      SUBROUTINE OPTPROP(ISTEP,ICONV)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL TRIPLET,SG1T,TAMMD,TPA,ALPHKWD,BETAKWD
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (TOKCAL=627.509469D+00)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (FOURTHIRD=4.0D+00/3.0D+00)
      PARAMETER (MXATM=2000, MXRT=100)
C
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FFUMBR/ UMBFC,UMBR0,UMBSIZE,
     *                NUMBBIN,NUMBATM(6),NUMBTYP,LFFUMBHIS,
     *                UM2FC,UM2R0,UM2SIZE,
     *                NUM2BIN,NUM2ATM(6),NUM2TYP,LFFUM2HIS
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,PFREQ(2),
     *                JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,ITDPRP,
     *                TRIPLET,SG1T,NONEQR,TAMMD,TPA,ALPHKWD,BETAKWD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C     HUI LI, APR 2011, LINCOLN
C
      VOL   = MIN(XBOX*YBOX*ZBOX, FOURTHIRD*PI*SPHRAD**3)
C
      IF(ISTEP.EQ.0.AND.MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'======================= QUANPOL OPTIMIZATION',
     *              ' INITIATED ========================'
         WRITE(IW,*)' '
      END IF
C
      IF(IFIXSOL.GT.0) THEN
         IF(MASWRK.AND.
     *      (MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP))
     *      WRITE(IW,'(A,F20.10,A,A,I8)')
     *      ' FIXSOL TOTAL SURFACE AREA =',FIXA,' A**2,',
     *      ' NFFTS=',NFFTS
         IF(MASWRK.AND.NCYCLE.LT.200.AND.
     *      (MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP))
     *      WRITE(IW,'(A,I3,A,F11.6)')
     *      ' FIXSOL CONVERGED IN ',NCYCLE,
     *      ' ITERATIONS, TOTAL SURFACE CHARGE=',FIXQ
         IF(MASWRK.AND.NCYCLE.EQ.200)
     *       WRITE(IW,'(A,I3,A,F10.6,A,F12.10)')
     *      ' FIXSOL NOT CONVERGED IN ',NCYCLE,
     *      ' ITERATIONS.  TOTAL SURFACE CHARGE=',FIXQ
      END IF
C
      IF(NAT.LE.0) THEN
         ENPOT = EN12 + EN123 + EN123R4 + EN234W1 + EN123B4 + ENCHAR
     *         + ENPOL  + ENRXN  + ENRXNPOL+ENRXNR + ENLJR + ENLJD
     *         + ENCMAP + ENFIXSO+ EN12312
         ENTOT = ENPOT
         ENRXN = ENRXN + ENRXNPOL
         IF(MASWRK.AND.(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP.OR.
     *      ICONV.EQ.1)) THEN
            WRITE(IW,*)' '
            WRITE(IW,'(1X,A,I10,33X,A,F19.2,A)')'OPT STEP',ISTEP
            WRITE(IW,9000)
     *      'BOND STRETCHING               ENERGY = ', EN12   *TOKCAL
            WRITE(IW,9000)
     *      'BOND ANGLE BENDING            ENERGY = ', EN123  *TOKCAL
            WRITE(IW,9000)
     *      'STRETCHING BENDING            ENERGY = ', EN12312*TOKCAL
            WRITE(IW,9000)
     *      'DIHEDRAL ROTATION             ENERGY = ', EN123R4*TOKCAL
            WRITE(IW,9000)
     *      'DIHEDRAL BENDING              ENERGY = ', EN123B4*TOKCAL
            WRITE(IW,9000)
     *      'CMAP                          ENERGY = ', ENCMAP *TOKCAL
            WRITE(IW,9000)
     *      'WAGGING                       ENERGY = ', EN234W1*TOKCAL
            IF(NUMBTYP.GT.0)
     *      WRITE(IW,9000)
     *      'UMBRELLA SAMPLING BIAS        ENERGY = ', ENBIAS *TOKCAL
            WRITE(IW,9000)
     *      'LJ REPULSION                  ENERGY = ', ENLJR  *TOKCAL
            WRITE(IW,9000)
     *      'LJ DISPERSION                 ENERGY = ', ENLJD  *TOKCAL
            WRITE(IW,9000)
     *      'CHARGE                        ENERGY = ', ENCHAR *TOKCAL
            WRITE(IW,9000)
     *      'INDUCED DIPOLE                ENERGY = ', ENPOL  *TOKCAL
            WRITE(IW,9000)
     *      'SPHSOL                        ENERGY = ', ENRXN  *TOKCAL
            WRITE(IW,9000)
     *      'FIXSOL                        ENERGY = ', ENFIXSO*TOKCAL
            WRITE(IW,9000)
     *      'QM CENTER                     ENERGY = ', ENCENT *TOKCAL
            WRITE(IW,9000)
     *      'SPHERE                        ENERGY = ', ENRXNR *TOKCAL
            WRITE(IW,9000)
     *      'POTENTIAL                     ENERGY = ', ENPOT  *TOKCAL
            WRITE(IW,9000)
     *      'TOTAL                         ENERGY = ', ENTOT  *TOKCAL
            IF(VOL.LE.1.0D+30)
     *      WRITE(IW,9003)
     *      'VOLUME                               = ',  VOL*TOANGS**3
            IF(VOL.GT.1.0D+30)
     *      WRITE(IW,9004)
     *      'VOLUME                               = '
            WRITE(IW,*)' '
            CALL TIMIT(1)
            WRITE(IW,*)' '
         END IF
C
      ELSE IF(NAT.GT.0.AND.NFFAT.GT.0) THEN
                              ENPOT = ETOT
         IF(MPLEVL.EQ.2)      ENPOT = EMP2
         IF(TDDFTYP.NE.RNONE) ENPOT = ESTATE(NTHST)
         ENTOT = ENPOT
         ENRXN = ENRXN + ENRXNPOL
         IF(MASWRK.AND.(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP.OR.
     *      ICONV.EQ.1)) THEN
            WRITE(IW,*)' '
            WRITE(IW,'(1X,A,I10,33X,A,F19.2,A)')'OPT STEP',ISTEP
            WRITE(IW,9000)
     *      'BOND STRETCHING               ENERGY = ', EN12   *TOKCAL
            WRITE(IW,9000)
     *      'BOND ANGLE BENDING            ENERGY = ', EN123  *TOKCAL
            WRITE(IW,9000)
     *      'STRETCHING BENDING            ENERGY = ', EN12312*TOKCAL
            WRITE(IW,9000)
     *      'DIHEDRAL ROTATION             ENERGY = ', EN123R4*TOKCAL
            WRITE(IW,9000)
     *      'DIHEDRAL BENDING              ENERGY = ', EN123B4*TOKCAL
            WRITE(IW,9000)
     *      'CMAP                          ENERGY = ', ENCMAP *TOKCAL
            WRITE(IW,9000)
     *      'WAGGING                       ENERGY = ', EN234W1*TOKCAL
            IF(NUMBTYP.GT.0)
     *      WRITE(IW,9000)
     *      'UMBRELLA SAMPLING BIAS        ENERGY = ', ENBIAS *TOKCAL
            WRITE(IW,9000)
     *      'LJ REPULSION                  ENERGY = ', ENLJR  *TOKCAL
            WRITE(IW,9000)
     *      'LJ DISPERSION                 ENERGY = ', ENLJD  *TOKCAL
            WRITE(IW,9000)
     *      'CHARGE                        ENERGY = ', ENCHAR *TOKCAL
            WRITE(IW,9000)
     *      'INDUCED DIPOLE                ENERGY = ', ENPOL  *TOKCAL
            WRITE(IW,9000)
     *      'SPHSOL                        ENERGY = ', ENRXN  *TOKCAL
            WRITE(IW,9000)
     *      'FIXSOL                        ENERGY = ', ENFIXSO*TOKCAL
            WRITE(IW,9000)
     *      'QM CENTER                     ENERGY = ', ENCENT *TOKCAL
            WRITE(IW,9000)
     *      'SPHERE                        ENERGY = ', ENRXNR *TOKCAL
            WRITE(IW,9000)
     *      'POTENTIAL                     ENERGY = ', ENPOT  *TOKCAL
            WRITE(IW,9000)
     *      'TOTAL                         ENERGY = ', ENTOT  *TOKCAL
            IF(VOL.LE.1.0D+30)
     *      WRITE(IW,9003)
     *      'VOLUME                               = ',  VOL*TOANGS**3
            IF(VOL.GT.1.0D+30)
     *      WRITE(IW,9004)
     *      'VOLUME                               = '
            WRITE(IW,*)' '
            CALL TIMIT(1)
            WRITE(IW,*)' '
         END IF
      END IF
C
C     -- CALCULATE RMSD EVERY JOUT STEPS --
C
      IF(NRMSD.EQ.1) THEN
         IF(MOD(ISTEP,JOUT).EQ.0) THEN
            CALL RMSD(X(LFFCORD),ISTEP,X(LFFZANF),X(LFFRMSD0))
         END IF
      END IF
C
C     -- CALCULATE RADIUS OF GYRATION --
C
      IF(NGYRA.GT.0) THEN
         IF(MOD(ISTEP,JOUT).EQ.0) THEN
            CALL GYRA(X(LFFCORD),X(LFFZANF),X(LFFZMAS))
         END IF
      END IF
C
C     -- CALCULATE RALL --
C
      IF(NRALL.EQ.1) THEN
         IF(MOD(ISTEP,JOUT).EQ.0) THEN
            CALL RALL(X(LFFRALL0),X(LFFCORD),ISTEP)
         END IF
      END IF
C
C     -- CALCULATE SELECT DISTANCES EVERY JOUT STEPS --
C
      IF(((NRIJMM+NRIJQM+NAIJKMM+NAIJKQM).GT.0) .AND.
     *    MOD(ISTEP,JOUT).EQ.0) CALL DISIJ(X(LFFCORD))
C
 9000 FORMAT(1X,A,F30.10,2X,'KCAL/MOL')
 9003 FORMAT(1X,A,F30.10,2X,'A**3')
 9004 FORMAT(1X,A,30X,   2X,'OPEN SYSTEM')
C
      CALL FLSHBF(IW)
      RETURN
      END
C*MODULE QUANPO  *DECK SHIFT
!>            
!> @brief    shifting function
!>                      
!> @author   Hui Li
!>           - Feb 2012
!>                    
!> @details  several shifting functions
!>
      SUBROUTINE SHIFT(R2,R,ONER,CX,CY,CZ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00) 
C
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
C
C     HUI LI, FEB 27, 2012
C
      IF(ISHIFT.EQ.0) THEN
         SWF   = ONE
         SWFDX = ZERO
         SWFDY = ZERO
         SWFDZ = ZERO
         RETURN
      END IF
C
      IF(R2.LE.SWRB2) THEN
         IF(     ISHIFT.EQ.1) THEN
            SWF   = ONE - R*ONESWRB
            SWF   = SWF*SWF
            DSWF  = ONESWRB2 - ONESWRB*ONER
            DSWF  = DSWF + DSWF
            SWFDX = DSWF*CX
            SWFDY = DSWF*CY
            SWFDZ = DSWF*CZ
         ELSE IF(ISHIFT.EQ.2) THEN
            SWF   = ONE - R*EPS1RB + R2*R*EPS1RB3
            DSWF  = R*EPS1RB3
            DSWF  = DSWF + DSWF + DSWF
            DSWF  = DSWF - ONER*EPS1RB
            SWFDX = DSWF*CX
            SWFDY = DSWF*CY
            SWFDZ = DSWF*CZ
         ELSE IF(ISHIFT.EQ.3) THEN
            SWF   = ONE - R*ONESWRB
            DSWF  = -ONER*ONESWRB
            SWFDX = DSWF*CX
            SWFDY = DSWF*CY
            SWFDZ = DSWF*CZ
         ELSE IF(ISHIFT.EQ.4) THEN
            SWF   = ONE - R2*ONESWRB2
            SWF   = SWF*SWF
            DSWF  = R2*ONESWRB4 - ONESWRB2
            DSWF  = DSWF + DSWF
            DSWF  = DSWF + DSWF
            SWFDX = DSWF*CX
            SWFDY = DSWF*CY
            SWFDZ = DSWF*CZ
         ELSE
            SWF   = ONE
            SWFDX = ZERO
            SWFDY = ZERO
            SWFDZ = ZERO
         END IF
      ELSE
         SWF   = ZERO
         SWFDX = ZERO
         SWFDY = ZERO
         SWFDZ = ZERO
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK SWFUNC
!>
!> @brief    switching function for MM atoms
!>
      SUBROUTINE SWFUNC(R2,CX,CY,CZ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00) 
C
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
C
C     HUI LI, JAN 2011, LINCOLN
C     HUI LI, FEB 2012
C
      IF(ISWITCH.NE.1) THEN
         SWF   = ONE
         SWFDX = ZERO
         SWFDY = ZERO
         SWFDZ = ZERO
         RETURN
      END IF
C
      IF(R2.LE.SWRA2) THEN
         SWF   = ONE
         SWFDX = ZERO
         SWFDY = ZERO
         SWFDZ = ZERO
      ELSE IF(R2.LE.SWRB2) THEN
         VUMY1 = R2 - SWRA2
         VUMY2 = VUMY1*VUMY1
         VUMY3 = VUMY2*VUMY1
         VUMY4 = VUMY2*VUMY2
         VUMY5 = VUMY2*VUMY3
         SWF   = ONE - 10.0D+00*SWFDUM3*VUMY3
     *               + 15.0D+00*SWFDUM4*VUMY4
     *               -  6.0D+00*SWFDUM5*VUMY5
         DSWF  = -30.0D+00*SWFDUM3*VUMY2
     *           +60.0D+00*SWFDUM4*VUMY3
     *           -30.0D+00*SWFDUM5*VUMY4
         DSWF  = DSWF + DSWF
         SWFDX = DSWF*CX
         SWFDY = DSWF*CY
         SWFDZ = DSWF*CZ
      ELSE
         SWF   = ZERO
         SWFDX = ZERO
         SWFDY = ZERO
         SWFDZ = ZERO
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK SWFUNCQ
!>    
!> @brief    switching function for QM atoms
!>
      SUBROUTINE SWFUNCQ(R2,CX,CY,CZ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
C
C     HUI LI, JAN 2011, LINCOLN
C     HUI LI, FEB 2012
C
      IF(ISWITCH.NE.1) THEN
         SWF   = ONE
         SWFDX = ZERO
         SWFDY = ZERO
         SWFDZ = ZERO
         RETURN
      END IF
C
      IF(R2.LE.SWRAQ2) THEN
         SWF   = ONE
         SWFDX = ZERO
         SWFDY = ZERO
         SWFDZ = ZERO
      ELSE IF(R2.LE.SWRBQ2) THEN
         VUMY1 = R2 - SWRAQ2
         VUMY2 = VUMY1*VUMY1
         VUMY3 = VUMY2*VUMY1
         VUMY4 = VUMY2*VUMY2
         VUMY5 = VUMY2*VUMY3
         DSWF  = -30.0D+00*SWFDUM3Q*VUMY2
     *           +60.0D+00*SWFDUM4Q*VUMY3
     *           -30.0D+00*SWFDUM5Q*VUMY4
         DSWF  = DSWF + DSWF
         SWF   = ONE - 10.0D+00*SWFDUM3Q*VUMY3
     *               + 15.0D+00*SWFDUM4Q*VUMY4
     *               -  6.0D+00*SWFDUM5Q*VUMY5
         SWFDX = DSWF*CX
         SWFDY = DSWF*CY
         SWFDZ = DSWF*CZ
      ELSE
         SWF   = ZERO
         SWFDX = ZERO
         SWFDY = ZERO
         SWFDZ = ZERO
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMM1EINT
!>            
!> @brief    1-e integrals of MM charges
!>                      
!> @author   Hui Li
!>           - Apr 2011
!>                    
!> @details  1-e integrals of MM charges
!>           MM force field energies
!>
      SUBROUTINE QMMM1EINT(WRK,H,L2,CORD,CHARG,
     *                     NONLSTQ,
     *                     CLPR,ZLPR,NLPR,POL,POLSV,
     *                     FIELD1,NONLS1,
     *                     XTS,YTS,ZTS,POT1,
     *                     FFGRD2,BOND0,FCBOND,
     *                     IPAIR,FCSTBD,KBLST,
     *                     ANGL0,FCANGL,KLIST,
     *                     DIHB0,FCDIHB,FCDIHR,NLIST,
     *                     FCWAGG,MLIST,
     *                     VROT,GAMA,NNN,LLIST,
     *                     MAPLST,CMAPCO,
     *                     SIG,EPS,
     *                     SIG2,EPS2,L14J,L1213J,
     *                     DETMP,LISTQM,FCLJTP,NTYPE,
     *                     NONLSA,NONLSB,L1213A,
     *                     L1213B,L14A,L14B,CHARGB,
     *                     SIGB,EPSB,SIG2B,EPS2B,
     *                     CORDMN,CORDM1,NONLSPMA,
     *                     L1213PMA,L14PMA,CORDB,
     *                     LSBONDPMA,LSANGLPMA,
     *                     LSDIHRPMA,LSDIHBPMA,
     *                     LSWAGGPMA,LSCMAPPMA,
     *                     NONLSPMB,L1213PMB,L14PMB,
     *                     LSBONDPMB,LSANGLPMB,
     *                     LSDIHRPMB,LSDIHBPMB,
     *                     LSWAGGPMB,LSCMAPPMB,UMBHIS,UM2HIS,MERGE,
     *                     INTLST,CHGIMG,CRDIMG,DIPIMG,QADIMG,OCTIMG)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00)
C
      DIMENSION ENALL(100)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, APR 2011, LINCOLN
C     HUI LI, MAY 2012
C
      IF(MEANFLD.GT.0.AND.MFQMCHG.EQ.-10) RETURN
C
C     QUANPOL CANNOT USE G, H, I TYPE FUNCTIONS
C
      IF(NFFAT.GT.0) THEN
         CALL BASCHK(LMAX)
         IF(LMAX.GE.4) THEN
            IF(MASWRK)WRITE(IW,'(1X,/1X,A,/)')
     *      'ERROR: QUANPOL CANNOT HANDLE G, H, I TYPE FUNCTIONS.'
            IF(MASWRK)WRITE(IW,*)' '
            CALL ABRT
         END IF
      END IF
C
      CALL VCLR(WRK,1,L2)
      CALL VCLR(H,1,L2)
      CALL DAWRIT(IDAF,IODA,H,L2,89,0)
      IF     (MEANFLD.EQ.0) THEN
         CALL QMMMCHGINT(WRK,CORD,CHARG,NONLSTQ)
      ELSE IF(MEANFLD.GT.0) THEN
         CALL QMMMCHGINTMFLD(WRK,CORDMN,CHARG,MERGE,INTLST)
      END IF
      CALL QMMMREPINT(WRK,CORD,CLPR,ZLPR,NLPR,NONLSTQ)
      IF (GOPARR) CALL DDI_GSUMF(920,WRK,L2)
C
      CALL DAREAD(IDAF,IODA,H,L2,11,0)
      CALL VADD(H,1,WRK,1,H,1,L2)
      CALL DAWRIT(IDAF,IODA,H,L2,11,0)
C
      CALL DAREAD(IDAF,IODA,H,L2,89,0)
      CALL VADD(H,1,WRK,1,H,1,L2)
      CALL DAWRIT(IDAF,IODA,H,L2,89,0)
C
C     - PREPARE FOR MM POLARIZATION FIELD -
C
      IF     (MEANFLD.EQ.0) THEN
         CALL POLSCALE(CORD,POL,POLSV)
         CALL QMMMPOLFLDNUCMM(CORD,CHARG,POL,FIELD1,
     *                        NONLS1,NONLSTQ,L1213J)
         CALL QMMMRXNPOTNUCMM(CORD,CHARG,XTS,YTS,ZTS,POT1,ISPHSOL)
      ELSE IF(MEANFLD.GT.0) THEN
         CALL POLSCALE(CORDM1,POL,POLSV)
         CALL QMMMPOLFLDNUCMM(CORDM1,CHARG,POL,FIELD1,
     *                        NONLS1,NONLSTQ,L1213J)
         CALL QMMMRXNPOTNUCMM(CORDM1,CHARG,XTS,YTS,ZTS,POT1,ISPHSOL)
      END IF
C
C     - FORCE FIELD TERMS -
C         MM GRADIENT CAN BE DONE HERE, BUT NO DDI_GSUMF
C         QM GRADIENT MUST WAIT FOR STVDER
C
      IF(MEANFLD.GT.0) THEN
C        - ALL SHOULD BE ZEROED SO THEY DO NOT AFFECT ETOT
         EN12    = ZERO
         EN123   = ZERO
         EN123R4 = ZERO
         EN123B4 = ZERO
         EN234W1 = ZERO
         ENCHAR  = ZERO
         ENLJR   = ZERO
         ENLJD   = ZERO
         ENPOL   = ZERO
         XENPOL  = ZERO
         ENRXNPOL= ZERO
         ENFIXSO = ZERO
         ENUCCH  = ZERO
         ENRXN   = ZERO
         XENRXN  = ZERO
         ENRXNR  = ZERO
         ENCENT  = ZERO
         ENCMAP  = ZERO
         ENBIAS  = ZERO
         SOL1CH  = ZERO
         SOL1LJ  = ZERO
         SOL1IM  = ZERO
         SOL2CH  = ZERO
         SOL2LJ  = ZERO
         SOL2IM  = ZERO
         PMF1BD  = ZERO
         PMF1AG  = ZERO
         PMF1DR  = ZERO
         PMF1DB  = ZERO
         PMF1WG  = ZERO
         PMF1CM  = ZERO
         PMF1CH  = ZERO
         PMF1LJ  = ZERO
         CALL QMMMCHGNUCMFLD(CORDMN,DETMP,CHARG,MERGE,INTLST,
     *                       CHGIMG,CRDIMG,DIPIMG,QADIMG,OCTIMG)
         CALL ESPHQM(DETMP,LISTQM)
         GOTO 200
      END IF
C
      CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR,CORDB,
     *            LSBONDPMA,LSBONDPMB)
      CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST,CORDB,
     *            LSANGLPMA,LSANGLPMB)
      CALL E12312(CORD,FFGRD2,ANGL0,KLIST,BOND0,FCSTBD,
     *            KBLST,CORDB,LSANGLPMA,LSANGLPMB)
      CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST,CORDB,
     *            LSDIHBPMA,LSDIHBPMB)
      CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST,CORDB,
     *            LSWAGGPMA,LSWAGGPMB)
      CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST,CORDB,
     *            LSDIHRPMA,LSDIHRPMB,FCDIHR)
      CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO,CORDB,
     *            LSCMAPPMA,LSCMAPPMB)
      CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLS1,
     *            L1213J,SIGB,EPSB,SIG2B,EPS2B,
     *            NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *            NONLSPMA,L1213PMA,L14PMA,CORDB,
     *            NONLSPMB,L1213PMB,L14PMB,FCLJTP,NTYPE)
      CALL ESPHER(CORD,FFGRD2)
      CALL ECHARG(CORD,FFGRD2,CHARG,NONLS1,L1213J,L14J,
     *            CHARGB,NONLSA,NONLSB,L1213A,L1213B,L14A,L14B,
     *            NONLSPMA,L1213PMA,L14PMA,CORDB,
     *            NONLSPMB,L1213PMB,L14PMB)
      CALL UMBRELLA(CORD,FFGRD2,UMBHIS,UM2HIS)
      CALL QMMMCHGNUC(CORD,FFGRD2,DETMP,CHARG,NONLSTQ)
      CALL ESPHQM(DETMP,LISTQM)
C
 200  CONTINUE
C
      IF(GOPARR) THEN
         ENALL( 1) = EN12
         ENALL( 2) = EN123
         ENALL( 3) = EN123R4
         ENALL( 4) = EN123B4
         ENALL( 5) = EN234W1
         ENALL( 6) = ENCHAR
         ENALL( 7) = ENLJR
         ENALL( 8) = ENLJD
C        ENALL( 9) = VIR(1)    ! NOT HERE
C        ENALL(10) = VIR(2)
C        ENALL(11) = VIR(3)
         ENALL(12) = ENUCCH
         ENALL(13) = ENRXN
         ENALL(14) = ENRXNR
         ENALL(15) = ENCENT
         ENALL(16) = ENCMAP
         ENALL(18) = SOL1CH
         ENALL(19) = SOL1LJ
         ENALL(20) = SOL1IM
         ENALL(21) = SOL2CH
         ENALL(22) = SOL2LJ
         ENALL(23) = SOL2IM
         ENALL(33) = PMF1BD
         ENALL(34) = PMF1AG
         ENALL(35) = PMF1DR
         ENALL(36) = PMF1DB
         ENALL(37) = PMF1WG
         ENALL(38) = PMF1CM
         ENALL(39) = PMF1CH
         ENALL(40) = PMF1LJ
         ENALL(41) = ENBIAS
         ENALL(42) = EN12312
         CALL DDI_GSUMF(2410,ENALL  ,42)
C        CALL DDI_GSUMF(2411,FFGRD2,3*NFFAT)   ! NOT HERE
         EN12      = ENALL( 1)
         EN123     = ENALL( 2)
         EN123R4   = ENALL( 3)
         EN123B4   = ENALL( 4)
         EN234W1   = ENALL( 5)
         ENCHAR    = ENALL( 6)
         ENLJR     = ENALL( 7)
         ENLJD     = ENALL( 8)
C        VIR(1)    = ENALL( 9)
C        VIR(2)    = ENALL(10)
C        VIR(3)    = ENALL(11)
         ENUCCH    = ENALL(12)
         ENRXN     = ENALL(13)
         ENRXNR    = ENALL(14)
         ENCENT    = ENALL(15)
         ENCMAP    = ENALL(16)
         SOL1CH    = ENALL(18)
         SOL1LJ    = ENALL(19)
         SOL1IM    = ENALL(20)
         SOL2CH    = ENALL(21)
         SOL2LJ    = ENALL(22)
         SOL2IM    = ENALL(23)
         PMF1BD    = ENALL(33)
         PMF1AG    = ENALL(34)
         PMF1DR    = ENALL(35)
         PMF1DB    = ENALL(36)
         PMF1WG    = ENALL(37)
         PMF1CM    = ENALL(38)
         PMF1CH    = ENALL(39)
         PMF1LJ    = ENALL(40)
         ENBIAS    = ENALL(41)
         EN12312   = ENALL(42)
      END IF
      RETURN
C
      END
C*MODULE QUANPO  *DECK QMMMGRD
!>            
!> @brief    QM/MM gradient
!>                      
!> @author   Hui Li, Dejun Si
!>           - Mar 2011
!>                    
!> @details  calculate forces on QM and MM atoms
!>
      SUBROUTINE QMMMGRD(DTOT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL TRIPLET,SG1T,TAMMD,TPA,ALPHKWD,BETAKWD
C
      PARAMETER (MXATM=2000)
C
      DIMENSION DTOT(*)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / X(1)
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,PFREQ(2),
     *                JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,ITDPRP,
     *                TRIPLET,SG1T,NONEQR,TAMMD,TPA,ALPHKWD,BETAKWD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA CHECK/8HCHECK   /
      DATA RHF,UHF,ROHF/8HRHF     ,8HUHF     ,8HROHF    /
      DATA RNONE/8HNONE    /
C
C     HUI LI, DEJUN SI, MAR 2011, LINCOLN
C     HUI LI, DEC 22, 2011
C
      IF(MEANFLD.GT.0.AND.MFQMCHG.EQ.-10) RETURN
C
C     ----- GRADIENT FOR QMMM RUNS -----
C           NOTE: FOR MP2,   DTOT = DHF  + P(2)
C                 FOR TDDFT, DTOT = DDFT + DTA
C
      L1 = NUM
      L2 = (NUM*NUM+NUM)/2
      L3 = NUM*NUM
      CALL VALFM(LOADFM)
      LCH    = LOADFM   + 1
      LCH2   = LCH      + 1200*10  ! GIVE 10 TIMES TO OVER KILL
      LCH3   = LCH2     + 300*10
      LDHFA  = LCH3     + 300*10
      LDHFB  = LDHFA    + L2
      LDXY   = LDHFB    + L2
      LDTEMP = LDXY     + L2
      LAST   = LDTEMP   + L3
      NEED   = LAST     - LOADFM -1
      CALL GETFM(NEED)
C     - GET -DHF-
      IF(MPLEVL.EQ.2) THEN
         IF(SCFTYP.EQ.RHF .OR. SCFTYP.EQ.ROHF) THEN
            CALL DAREAD(IDAF,IODA,X(LDHFA),L2,308,0)
         ELSE IF (SCFTYP.EQ.UHF) THEN
            CALL DAREAD(IDAF,IODA,X(LDHFA),L2,418,0)
            CALL DAREAD(IDAF,IODA,X(LDHFB),L2,428,0)
            CALL VADD(X(LDHFA),1,X(LDHFB),1,X(LDHFA),1,L2)
         END IF
      END IF
      IF(TDDFTYP.NE.RNONE) THEN
         IF(SCFTYP.EQ.RHF) THEN
            CALL DAREAD(IDAF,IODA,X(LDHFA),L2,308,0)
            CALL DAREAD(IDAF,IODA,X(LDTEMP),L3,IRECTD+2,0)
            CALL VCLR(X(LDXY),1,L2)
            CALL TDPCMDEN(X(LDXY),X(LDTEMP),L1)
            CALL DSCAL(L2,2.0D+00,X(LDXY),1)
         END IF
      END IF
C
      IF(EXETYP.EQ.CHECK) GOTO 100
C
C     ----- GRADIENT WITH RESPECT TO QM COORDINATES -----
C           FORCES ON QM ELECTRONS BY MM CHARGE, REP, DIP, ASC
C           FORCES ON QM NUCLEI BY MM CHARGE ALREADY DONE IN DETMP
C
      CALL QMMMREPFQM(DTOT,X(LFFCORD),X(LFFCLPR),
     *                X(LFFZLPR),X(LFFNLPR),X(LFFNONLSTQ))
      IF(MEANFLD.EQ.0) THEN
         CALL QMMMCHGFQM(DTOT,X(LFFCORD),X(LFFCHARG),X(LFFNONLSTQ))
         CALL QMMMPOLFQM(DTOT,X(LDHFA),X(LDXY),X(LFFDIP),
     *                   X(LFFDIPMP),X(LFFDIPTA),X(LFFDIPXY),
     *                   X(LFFCORD),X(LFFNONLSTQ))
      END IF
      MOVEQM=0
      IF(MEANFLD.GT.0.AND.MOVEQM.EQ.1) THEN
         CALL QMMMCHGFQMMFLD(DTOT,X(LFFCORDMN),X(LFFCHARG),X(LFFMERGE),
     *                       X(LFFINTLST))
         CALL QMMMPOLFQM(DTOT,X(LDHFA),X(LDXY),X(LFFDIP),
     *                   X(LFFDIPMP),X(LFFDIPTA),X(LFFDIPXY),
     *                   X(LFFCORDM1),X(LFFNONLSTQ))
      END IF
      IF(ISPHSOL.GE.60 .AND. RSPHSOL.LT.1.0D+30) THEN
         CALL QMMMRXNFQM(DTOT,X(LDHFA),X(LDXY),X(LFFQRXN1),
     *                   X(LFFQRXN2),X(LFFQRXNMP),X(LFFQRXNTA),
     *                   X(LFFQRXNXY),ISPHSOL)
      END IF
      IF(IFIXSOL.EQ.1) THEN
         CALL QMMMRXNFQM(DTOT,X(LDHFA),X(LDXY),X(LFFQFIX),
     *                   X(LFFQRXN2),X(LFFQFIXMP),X(LFFQFIXTA),
     *                   X(LFFQFIXXY),NFFTS)
      END IF
      CALL VADD(X(LFFDETMP),1,DE,1,DE,1,3*NAT)
C
C     ----- GRADIENT WITH RESPECT TO MM COORDINATES -----
C           FORCES ON MM ATOMS(CHARGE, REP, DIP, ASC) BY QM ELECTRONS
C           SOME FORCES ON MM ATOMS HAVE BEEN DONE IN ROUTINE ONEEI
C
      CALL QMMMCHGFMM(DTOT,X(LCH),X(LFFCORD),X(LFFCHARG),
     *                X(LFFFFGRD2),X(LFFNONLSTQ))
      CALL QMMMREPFMM(DTOT,X(LCH),X(LFFCORD),X(LFFCLPR),
     *                X(LFFZLPR),X(LFFNLPR),
     *                X(LFFFFGRD2),X(LFFNONLSTQ))
      CALL QMMMPOLFMM(DTOT,X(LDHFA),X(LDXY),X(LCH),X(LCH2),X(LCH3),
     *                X(LFFCORD),X(LFFFFGRD2),X(LFFNONLSTQ))
      CALL QMMMRXNFMM(DTOT,X(LDHFA),X(LDXY),X(LCH),
     *                X(LFFQFIX),X(LFFQFIXMP),X(LFFQFIXTA),
     *                X(LFFQFIXXY),X(LFFFFGRD2),X(LFFIDATOM),
     *                X(LFFXTSFIX),X(LFFYTSFIX),X(LFFZTSFIX))
C
C     ----- FORCE BETWEEN MM POL AND QM NUC
C                 BETWEEN MM POL AND MM CHARGE
C                 BETWEEN MM POL AND MM POL
C
      IF(MEANFLD.EQ.0) LMMCORD = LFFCORD
      MOVEQM=0
      IF(MEANFLD.GT.0.AND.MOVEQM.EQ.1) LMMCORD = LFFCORDM1
      CALL QMMMPOLFMMNUCMM(X(LMMCORD),X(LFFFFGRD2),X(LFFCHARG),
     *                     X(LFFPOL),X(LFFPOLSV),X(LFFDIP),
     *                     X(LFFNONLS1),X(LFFNONLSTQ),
     *                     X(LFFDIPMP),X(LFFDIPTA),X(LFFDIPXY),
     *                     X(LFFL1213J))
      CALL POLSCALEFORCE(X(LMMCORD),X(LFFFFGRD2),X(LFFPOL),
     *                   X(LFFDIP))
C
C     ----- FORCE BETWEEN SPHSOL ASC AND QM NUC
C                 BETWEEN SPHSOL ASC AND MM CHARGE
C                 BETWEEN SPHSOL ASC AND MM POL
C        NO FORCE BETWEEN SPHSOL ASC AND ASC
C
      IF(ISPHSOL.GE.60 .AND. RSPHSOL.LT.1.0D+30)
     *CALL QMMMRXNFMMNUCMM(X(LFFCORD),X(LFFFFGRD2),X(LFFCHARG),
     *                     X(LFFDIP),X(LFFQRXN1),X(LFFQRXN2),ISPHSOL,
     *                     X(LFFIDATOM),X(LFFIDDAI),X(LFFDAI),
     *                     X(LFFAFIX),X(LFFQRXNMP),
     *                     X(LFFQRXNTA),X(LFFQRXNXY),
     *                     X(LFFDIPMP),X(LFFDIPTA),X(LFFDIPXY))
C
C     ----- FORCE BETWEEN FIXSOL ASC AND ASC
C                 BETWEEN FIXSOL ASC AND QM NUC
C                 BETWEEN FIXSOL ASC AND MM CHARGE
C                 BETWEEN FIXSOL ASC AND MM POL
C
      IF(IFIXSOL.EQ.1)
     *CALL QMMMRXNFMMNUCMM(X(LFFCORD),X(LFFFFGRD2),X(LFFCHARG),
     *                     X(LFFDIP),X(LFFQFIX),X(LFFQRXN2),NFFTS,
     *                     X(LFFIDATOM),X(LFFIDDAI),X(LFFDAI),
     *                     X(LFFAFIX),X(LFFQFIXMP),
     *                     X(LFFQFIXTA),X(LFFQFIXXY),
     *                     X(LFFDIPMP),X(LFFDIPTA),X(LFFDIPXY))
C
C
C     ----- GLOBAL SUM OF FORCES ON MM ATOMS ----
C           -VIR- AND -FFGRD2- WERE ZEROED IN ONEEI
C           QM FORCES ARE IN -DE-, TO BE SUMMED IN STVDER
      CALL DDI_GSUMF(2418,VIR   ,3)
      CALL DDI_GSUMF(2419,X(LFFFFGRD2),3*NFFAT)
C
  100 CONTINUE
      CALL RETFM(NEED)
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMCHGINT
!>    
!> @brief    1-e integral of MM point charges
!>
      SUBROUTINE QMMMCHGINT(QQ,CORD,CHARG,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ,NORM,DOUBLE
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      DIMENSION QQ(*),CHARG(*),CORD(3,*),NONLSTQ(*)
C
      DIMENSION DIJ(225),XIN(125),YIN(125),ZIN(125),
     *          IX(35),IY(35),IZ(35),JX(35),JY(35),JZ(35),
     *          IJX(225),IJY(225),IJZ(225)
      DIMENSION CHCINT(225)
      DIMENSION FIJ(225)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
      COMMON /SYMIND/ TOL,II,JJ,LIT,LJT,MINI,MINJ,MAXI,MAXJ,IANDJ
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00,
     *           PI212=1.1283791670955D+00, SQRT3=1.73205080756888D+00,
     *           SQRT5=2.23606797749979D+00, SQRT7=2.64575131106459D+00,
     *           RLN10=2.30258D+00)
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     *          3, 0, 0, 2, 2, 1, 0, 1, 0, 1,
     *          4, 0, 0, 3, 3, 1, 0, 1, 0, 2,
     *          2, 0, 2, 1, 1/
      DATA IX / 1, 6, 1, 1,11, 1, 1, 6, 6, 1,
     *         16, 1, 1,11,11, 6, 1, 6, 1, 6,
     *         21, 1, 1,16,16, 6, 1, 6, 1,11,
     *         11, 1,11, 6, 6/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     *          0, 3, 0, 1, 0, 2, 2, 0, 1, 1,
     *          0, 4, 0, 1, 0, 3, 3, 0, 1, 2,
     *          0, 2, 1, 2, 1/
      DATA IY / 1, 1, 6, 1, 1,11, 1, 6, 1, 6,
     *          1,16, 1, 6, 1,11,11, 1, 6, 6,
     *          1,21, 1, 6, 1,16,16, 1, 6,11,
     *          1,11, 6,11, 6/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     *          0, 0, 3, 0, 1, 0, 1, 2, 2, 1,
     *          0, 0, 4, 0, 1, 0, 1, 3, 3, 0,
     *          2, 2, 1, 1, 2/
      DATA IZ / 1, 1, 1, 6, 1, 1,11, 1, 6, 6,
     *          1, 1,16, 1, 6, 1, 6,11,11, 6,
     *          1, 1,21, 1, 6, 1, 6,16,16, 1,
     *         11,11, 6, 6,11/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     CALCULATE MM CHARGE CONTRIBUTION TO QM 1-E INTEGRALS
C
      IF(IDOCHG.EQ.0) RETURN
C
      IPCOUNT = ME - 1
C
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
C       HERE (AND SIMILAR PLACES) INTENTIONALLY DEACTIVATES SOME LOOPS,
C       WHILE ALLOWING THEM TO REMAIN PRESENT FOR FUTURE USE.
C
      L2 = (NUM*NUM+NUM)/2
      CALL VCLR(QQ,1,L2)
C
C     -- ISHELL
C
      DO 720 II = 1,NSHELL
         I = KATOM(II)
         XI = C(1,I)
         YI = C(2,I)
         ZI = C(3,I)
         I1 = KSTART(II)
         I2 = I1+KNG(II)-1
         LIT = KTYPE(II)
         MINI = KMIN(II)
         MAXI = KMAX(II)
         LOCI = KLOC(II)-MINI
C
C        -- JSHELL
C
         DO 700 JJ = 1,II
            IF (GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 700
            END IF
            J = KATOM(JJ)
            XJ = C(1,J)
            YJ = C(2,J)
            ZJ = C(3,J)
            J1 = KSTART(JJ)
            J2 = J1+KNG(JJ)-1
            LJT = KTYPE(JJ)
            MINJ = KMIN(JJ)
            MAXJ = KMAX(JJ)
            LOCJ = KLOC(JJ)-MINJ
            NROOTS = (LIT+LJT-2)/2+1
            RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
            IANDJ = II .EQ. JJ
C
C           -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
            IJ = 0
            MAX = MAXJ
            DO 160 I = MINI,MAXI
               NX = IX(I)
               NY = IY(I)
               NZ = IZ(I)
               IF (IANDJ) MAX = I
               DO 140 J = MINJ,MAX
                  IJ = IJ+1
                  IJX(IJ) = NX+JX(J)
                  IJY(IJ) = NY+JY(J)
                  IJZ(IJ) = NZ+JZ(J)
  140          CONTINUE
  160       CONTINUE
            DO 180 I = 1,IJ
               CHCINT(I) = ZERO
  180       CONTINUE
C
C           -- I PRIMITIVE
C
            JGMAX = J2
            DO 520 IG = I1,I2
               AI = EX(IG)
               ARRI = AI*RR
               AXI = AI*XI
               AYI = AI*YI
               AZI = AI*ZI
               CSI = CS(IG)
               CPI = CP(IG)
               CDI = CD(IG)
               CFI = CF(IG)
               CGI = CG(IG)
C
C              -- J PRIMITIVE
C
               IF (IANDJ) JGMAX = IG
               DO 500 JG = J1,JGMAX
                  AJ = EX(JG)
                  AA = AI+AJ
                  AA1 = ONE/AA
                  DUM = AJ*ARRI*AA1
                  IF (DUM .GT. TOL) GOTO 500
                  FAC = EXP(-DUM)
                  CSJ = CS(JG)
                  CPJ = CP(JG)
                  CDJ = CD(JG)
                  CFJ = CF(JG)
                  CGJ = CG(JG)
                  AX = (AXI+AJ*XJ)*AA1
                  AY = (AYI+AJ*YJ)*AA1
                  AZ = (AZI+AJ*ZJ)*AA1
C
C                 -- DENSITY FACTOR
C
                  DOUBLE=IANDJ.AND.IG.NE.JG
                  MAX = MAXJ
                  NN = 0
                  DUM1 = ZERO
                  DUM2 = ZERO
                  DO 220 I = MINI,MAXI
                     IF (I.EQ.1) DUM1=CSI*FAC
                     IF (I.EQ.2) DUM1=CPI*FAC
                     IF (I.EQ.5) DUM1=CDI*FAC
                     IF ((I.EQ.8).AND.NORM) DUM1=DUM1*SQRT3
                     IF (I.EQ.11) DUM1=CFI*FAC
                     IF ((I.EQ.14).AND.NORM) DUM1=DUM1*SQRT5
                     IF ((I.EQ.20).AND.NORM) DUM1=DUM1*SQRT3
                     IF (I.EQ.21) DUM1=CGI*FAC
                     IF ((I.EQ.24).AND.NORM) DUM1=DUM1*SQRT7
                     IF ((I.EQ.30).AND.NORM) DUM1=DUM1*SQRT5/SQRT3
                     IF ((I.EQ.33).AND.NORM) DUM1=DUM1*SQRT3
                     IF (IANDJ) MAX = I
                     DO 200 J = MINJ,MAX
                        IF (J.EQ.1) THEN
                           DUM2=DUM1*CSJ
                           IF (DOUBLE) THEN
                              IF (I.LE.1) THEN
                                 DUM2=DUM2+DUM2
                              ELSE
                                 DUM2=DUM2+CSI*CPJ*FAC
                              END IF
                           END IF
                        ELSE IF (J.EQ.2) THEN
                           DUM2=DUM1*CPJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF (J.EQ.5) THEN
                           DUM2=DUM1*CDJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF ((J.EQ.8).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        ELSE IF (J.EQ.11) THEN
                           DUM2=DUM1*CFJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF ((J.EQ.14).AND.NORM) THEN
                           DUM2=DUM2*SQRT5
                        ELSE IF ((J.EQ.20).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        ELSE IF (J.EQ.21) THEN
                           DUM2=DUM1*CGJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF ((J.EQ.24).AND.NORM) THEN
                           DUM2=DUM2*SQRT7
                        ELSE IF ((J.EQ.30).AND.NORM) THEN
                           DUM2=DUM2*SQRT5/SQRT3
                        ELSE IF ((J.EQ.33).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        END IF
                        NN = NN+1
                        DIJ(NN) = DUM2
  200                CONTINUE
  220             CONTINUE
C
C                 -- CHARGES INTEGRALS.
C
                  DUM = PI212*AA1
                  DO 400 I=1,IJ
                     FIJ(I) = DIJ(I)*DUM
  400             CONTINUE
                  AAX = AA*AX
                  AAY = AA*AY
                  AAZ = AA*AZ
C
                  DO 495 IIQ = 1, NTODOQ
                     IFFAT = NONLSTQ(IIQ)
                     CXGRP = CORD(1,IFFAT) - QMCX
                     CYGRP = CORD(2,IFFAT) - QMCY
                     CZGRP = CORD(3,IFFAT) - QMCZ
                     PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
                     PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
                     PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
                     CXGRP = CXGRP - PBCX
                     CYGRP = CYGRP - PBCY
                     CZGRP = CZGRP - PBCZ
                     R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
                     IF(R2.GT.SWRBQ2) GOTO 495
                     CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
                     CX    = CORD(1,IFFAT) - PBCX
                     CY    = CORD(2,IFFAT) - PBCY
                     CZ    = CORD(3,IFFAT) - PBCZ
                     ZNUC = -CHARG(IFFAT)
                     IF(ZNUC.EQ.ZERO) GOTO 495
                     XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
                     IF (NROOTS.LE.3) CALL RT123
                     IF (NROOTS.EQ.4) CALL ROOT4
                     IF (NROOTS.EQ.5) CALL ROOT5
                     MM = 0
                     DO 477 K = 1,NROOTS
                        UU = AA*U(K)
                        WW = W(K)*ZNUC
                        TT = ONE/(AA+UU)
                        T = SQRT(TT)
                        X0 = (AAX+UU*CX)*TT
                        Y0 = (AAY+UU*CY)*TT
                        Z0 = (AAZ+UU*CZ)*TT
                        IN = -5+MM
                        DO 476 I = 1,LIT
                           IN = IN+5
                           NI = I
                           DO 475 J = 1,LJT
                              JN = IN+J
                              NJ = J
                              CALL STVINT
                              XIN(JN) = XINT
                              YIN(JN) = YINT
                              ZIN(JN) = ZINT*WW
  475                      CONTINUE
  476                   CONTINUE
                        MM = MM+25
  477                CONTINUE
                     DO 481 I = 1,IJ
                        NX = IJX(I)
                        NY = IJY(I)
                        NZ = IJZ(I)
                        DUM = ZERO
                        MM = 0
                        DO 479 K = 1,NROOTS
                           DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
                           MM = MM+25
  479                   CONTINUE
                        CHCINT(I) = CHCINT(I)+DUM*FIJ(I)*SWF
  481                CONTINUE
  495             CONTINUE
  500          CONTINUE
  520       CONTINUE
C
            MAX = MAXJ
            NN = 0
            DO 620 I = MINI,MAXI
               LI = LOCI+I
               IN = (LI*(LI-1))/2
               IF (IANDJ) MAX = I
               DO 600 J = MINJ,MAX
                  LJ = LOCJ+J
                  JN = LJ+IN
                  NN = NN+1
                  QQ(JN) = QQ(JN) + CHCINT(NN)
  600          CONTINUE
  620       CONTINUE
  700    CONTINUE
  720 CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMCHGINTMFLD
!>
!> @brief    1-e integral using <MM> charge potential
!>
!> @author   Hui Li
!>           - Mar 2012
!>
!> @details  calculate 1-e integral using MM charges
!>           at averaged coordinates
!>
      SUBROUTINE QMMMCHGINTMFLD(QQ,CORDMN,CHARG,MERGE,INTLST)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ,NORM,DOUBLE
C
      DIMENSION QQ(*),CHARG(*),CORDMN(3,MEANSIZ,*),
     *          MERGE(MEANSIZ/MFMERGE,*),INTLST(*)
C
      DIMENSION DIJ(225),XIN(125),YIN(125),ZIN(125),
     *          IX(35),IY(35),IZ(35),JX(35),JY(35),JZ(35),
     *          IJX(225),IJY(225),IJZ(225)
      DIMENSION CHCINT(225)
      DIMENSION FIJ(225)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
      COMMON /SYMIND/ TOL,II,JJ,LIT,LJT,MINI,MINJ,MAXI,MAXJ,IANDJ
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00,
     *           PI212=1.1283791670955D+00, SQRT3=1.73205080756888D+00,
     *           SQRT5=2.23606797749979D+00, SQRT7=2.64575131106459D+00,
     *           RLN10=2.30258D+00)
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     *          3, 0, 0, 2, 2, 1, 0, 1, 0, 1,
     *          4, 0, 0, 3, 3, 1, 0, 1, 0, 2,
     *          2, 0, 2, 1, 1/
      DATA IX / 1, 6, 1, 1,11, 1, 1, 6, 6, 1,
     *         16, 1, 1,11,11, 6, 1, 6, 1, 6,
     *         21, 1, 1,16,16, 6, 1, 6, 1,11,
     *         11, 1,11, 6, 6/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     *          0, 3, 0, 1, 0, 2, 2, 0, 1, 1,
     *          0, 4, 0, 1, 0, 3, 3, 0, 1, 2,
     *          0, 2, 1, 2, 1/
      DATA IY / 1, 1, 6, 1, 1,11, 1, 6, 1, 6,
     *          1,16, 1, 6, 1,11,11, 1, 6, 6,
     *          1,21, 1, 6, 1,16,16, 1, 6,11,
     *          1,11, 6,11, 6/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     *          0, 0, 3, 0, 1, 0, 1, 2, 2, 1,
     *          0, 0, 4, 0, 1, 0, 1, 3, 3, 0,
     *          2, 2, 1, 1, 2/
      DATA IZ / 1, 1, 1, 6, 1, 1,11, 1, 6, 6,
     *          1, 1,16, 1, 6, 1, 6,11,11, 6,
     *          1, 1,21, 1, 6, 1, 6,16,16, 1,
     *         11,11, 6, 6,11/
C
C     HUI LI, MAR 29 2012, LINCOLN
C
C     CALCULATE MEANFLD MM CHARGE CONTRIBUTION TO QM 1-E INTEGRALS
C
      IF(IDOCHG.EQ.0) RETURN
C
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
C       HERE (AND SIMILAR PLACES) INTENTIONALLY DEACTIVATES SOME LOOPS,
C       WHILE ALLOWING THEM TO REMAIN PRESENT FOR FUTURE USE.
C
      L2 = (NUM*NUM+NUM)/2
      CALL VCLR(QQ,1,L2)
C
C     -- NOTE: IT IS FASTER TO DO THE IFFAT LOOP HERE --
C
      NSEG = MEANFLD/MFMERGE
      DO 495 III = L1FFAT, L2FFAT
      KK = III-L1FFAT+1
      IFFAT=INTLST(III)
      ZNUC = -CHARG(IFFAT)
      IF(ZNUC.EQ.ZERO) GOTO 495
      DO ISEG = 1, NSEG
      IFMERGE = MERGE(ISEG,KK)
      ZNUC = -CHARG(IFFAT)*ONEMNFD*IFMERGE
      DO 496 IMFLD = (ISEG-1)*MFMERGE+1, ISEG*MFMERGE, IFMERGE
      CXGRP = CORDMN(1,IMFLD,KK) - QMCX
      CYGRP = CORDMN(2,IMFLD,KK) - QMCY
      CZGRP = CORDMN(3,IMFLD,KK) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
      PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
      PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.SWRBQ2) GOTO 496
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORDMN(1,IMFLD,KK) - PBCX
      CY    = CORDMN(2,IMFLD,KK) - PBCY
      CZ    = CORDMN(3,IMFLD,KK) - PBCZ
C
C     -- ISHELL
C
      DO 720 II = 1,NSHELL
         I = KATOM(II)
         XI = C(1,I)
         YI = C(2,I)
         ZI = C(3,I)
         I1 = KSTART(II)
         I2 = I1+KNG(II)-1
         LIT = KTYPE(II)
         MINI = KMIN(II)
         MAXI = KMAX(II)
         LOCI = KLOC(II)-MINI
C
C        -- JSHELL
C
         DO 700 JJ = 1,II
            J = KATOM(JJ)
            XJ = C(1,J)
            YJ = C(2,J)
            ZJ = C(3,J)
            J1 = KSTART(JJ)
            J2 = J1+KNG(JJ)-1
            LJT = KTYPE(JJ)
            MINJ = KMIN(JJ)
            MAXJ = KMAX(JJ)
            LOCJ = KLOC(JJ)-MINJ
            NROOTS = (LIT+LJT-2)/2+1
            RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
            IANDJ = II .EQ. JJ
C
C           -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
            IJ = 0
            MAX = MAXJ
            DO 160 I = MINI,MAXI
               NX = IX(I)
               NY = IY(I)
               NZ = IZ(I)
               IF (IANDJ) MAX = I
               DO 140 J = MINJ,MAX
                  IJ = IJ+1
                  IJX(IJ) = NX+JX(J)
                  IJY(IJ) = NY+JY(J)
                  IJZ(IJ) = NZ+JZ(J)
  140          CONTINUE
  160       CONTINUE
            DO 180 I = 1,IJ
               CHCINT(I) = ZERO
  180       CONTINUE
C
C           -- I PRIMITIVE
C
            JGMAX = J2
            DO 520 IG = I1,I2
               AI = EX(IG)
               ARRI = AI*RR
               AXI = AI*XI
               AYI = AI*YI
               AZI = AI*ZI
               CSI = CS(IG)
               CPI = CP(IG)
               CDI = CD(IG)
               CFI = CF(IG)
               CGI = CG(IG)
C
C              -- J PRIMITIVE
C
               IF (IANDJ) JGMAX = IG
               DO 500 JG = J1,JGMAX
                  AJ = EX(JG)
                  AA = AI+AJ
                  AA1 = ONE/AA
                  DUM = AJ*ARRI*AA1
                  IF (DUM .GT. TOL) GOTO 500
                  FAC = EXP(-DUM)
                  CSJ = CS(JG)
                  CPJ = CP(JG)
                  CDJ = CD(JG)
                  CFJ = CF(JG)
                  CGJ = CG(JG)
                  AX = (AXI+AJ*XJ)*AA1
                  AY = (AYI+AJ*YJ)*AA1
                  AZ = (AZI+AJ*ZJ)*AA1
C
C                 -- DENSITY FACTOR
C
                  DOUBLE=IANDJ.AND.IG.NE.JG
                  MAX = MAXJ
                  NN = 0
                  DUM1 = ZERO
                  DUM2 = ZERO
                  DO 220 I = MINI,MAXI
                     IF (I.EQ.1) DUM1=CSI*FAC
                     IF (I.EQ.2) DUM1=CPI*FAC
                     IF (I.EQ.5) DUM1=CDI*FAC
                     IF ((I.EQ.8).AND.NORM) DUM1=DUM1*SQRT3
                     IF (I.EQ.11) DUM1=CFI*FAC
                     IF ((I.EQ.14).AND.NORM) DUM1=DUM1*SQRT5
                     IF ((I.EQ.20).AND.NORM) DUM1=DUM1*SQRT3
                     IF (I.EQ.21) DUM1=CGI*FAC
                     IF ((I.EQ.24).AND.NORM) DUM1=DUM1*SQRT7
                     IF ((I.EQ.30).AND.NORM) DUM1=DUM1*SQRT5/SQRT3
                     IF ((I.EQ.33).AND.NORM) DUM1=DUM1*SQRT3
                     IF (IANDJ) MAX = I
                     DO 200 J = MINJ,MAX
                        IF (J.EQ.1) THEN
                           DUM2=DUM1*CSJ
                           IF (DOUBLE) THEN
                              IF (I.LE.1) THEN
                                 DUM2=DUM2+DUM2
                              ELSE
                                 DUM2=DUM2+CSI*CPJ*FAC
                              END IF
                           END IF
                        ELSE IF (J.EQ.2) THEN
                           DUM2=DUM1*CPJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF (J.EQ.5) THEN
                           DUM2=DUM1*CDJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF ((J.EQ.8).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        ELSE IF (J.EQ.11) THEN
                           DUM2=DUM1*CFJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF ((J.EQ.14).AND.NORM) THEN
                           DUM2=DUM2*SQRT5
                        ELSE IF ((J.EQ.20).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        ELSE IF (J.EQ.21) THEN
                           DUM2=DUM1*CGJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF ((J.EQ.24).AND.NORM) THEN
                           DUM2=DUM2*SQRT7
                        ELSE IF ((J.EQ.30).AND.NORM) THEN
                           DUM2=DUM2*SQRT5/SQRT3
                        ELSE IF ((J.EQ.33).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        END IF
                        NN = NN+1
                        DIJ(NN) = DUM2
  200                CONTINUE
  220             CONTINUE
C
C                 -- CHARGES INTEGRALS.
C
                  DUM = PI212*AA1
                  DO 400 I=1,IJ
                     FIJ(I) = DIJ(I)*DUM
  400             CONTINUE
                  AAX = AA*AX
                  AAY = AA*AY
                  AAZ = AA*AZ
C
                     XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
                     IF (NROOTS.LE.3) CALL RT123
                     IF (NROOTS.EQ.4) CALL ROOT4
                     IF (NROOTS.EQ.5) CALL ROOT5
                     MM = 0
                     DO 477 K = 1,NROOTS
                        UU = AA*U(K)
                        WW = W(K)*ZNUC
                        TT = ONE/(AA+UU)
                        T = SQRT(TT)
                        X0 = (AAX+UU*CX)*TT
                        Y0 = (AAY+UU*CY)*TT
                        Z0 = (AAZ+UU*CZ)*TT
                        IN = -5+MM
                        DO 476 I = 1,LIT
                           IN = IN+5
                           NI = I
                           DO 475 J = 1,LJT
                              JN = IN+J
                              NJ = J
                              CALL STVINT
                              XIN(JN) = XINT
                              YIN(JN) = YINT
                              ZIN(JN) = ZINT*WW
  475                      CONTINUE
  476                   CONTINUE
                        MM = MM+25
  477                CONTINUE
                     DO 481 I = 1,IJ
                        NX = IJX(I)
                        NY = IJY(I)
                        NZ = IJZ(I)
                        DUM = ZERO
                        MM = 0
                        DO 479 K = 1,NROOTS
                           DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
                           MM = MM+25
  479                   CONTINUE
                        CHCINT(I) = CHCINT(I)+DUM*FIJ(I)*SWF
  481                CONTINUE
  500          CONTINUE
  520       CONTINUE
C
            MAX = MAXJ
            NN = 0
            DO 620 I = MINI,MAXI
               LI = LOCI+I
               IN = (LI*(LI-1))/2
               IF (IANDJ) MAX = I
               DO 600 J = MINJ,MAX
                  LJ = LOCJ+J
                  JN = LJ+IN
                  NN = NN+1
                  QQ(JN) = QQ(JN) + CHCINT(NN)
  600          CONTINUE
  620       CONTINUE
  700    CONTINUE
  720 CONTINUE
  496 CONTINUE
      ENDDO
  495 CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMCHGFMMSWF
!>
!> @brief    QM electron -MM charge interaction energy
!>
!> @author   Hui Li
!>           - Jan 2011
!>
!> @details  This energy is scaled by SWF to produce force
!>
      SUBROUTINE QMMMCHGFMMSWF(DM,CHARG,CORD,FFGRD,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ,NORM
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      DIMENSION DM(*),CHARG(*),CORD(3,*),FFGRD(3,*),NONLSTQ(*)
C
      DIMENSION DIJ(225),XIN(125),YIN(125),ZIN(125),
     *          IX(35),IY(35),IZ(35),JX(35),JY(35),JZ(35),
     *          IJX(225),IJY(225),IJZ(225)
      DIMENSION FIJ(225)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
      COMMON /SYMIND/ TOL,II,JJ,LIT,LJT,MINI,MINJ,MAXI,MAXJ,IANDJ
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00,
     *           PI212=1.1283791670955D+00, SQRT3=1.73205080756888D+00,
     *           SQRT5=2.23606797749979D+00, SQRT7=2.64575131106459D+00,
     *           RLN10=2.30258D+00)
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     *          3, 0, 0, 2, 2, 1, 0, 1, 0, 1,
     *          4, 0, 0, 3, 3, 1, 0, 1, 0, 2,
     *          2, 0, 2, 1, 1/
      DATA IX / 1, 6, 1, 1,11, 1, 1, 6, 6, 1,
     *         16, 1, 1,11,11, 6, 1, 6, 1, 6,
     *         21, 1, 1,16,16, 6, 1, 6, 1,11,
     *         11, 1,11, 6, 6/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     *          0, 3, 0, 1, 0, 2, 2, 0, 1, 1,
     *          0, 4, 0, 1, 0, 3, 3, 0, 1, 2,
     *          0, 2, 1, 2, 1/
      DATA IY / 1, 1, 6, 1, 1,11, 1, 6, 1, 6,
     *          1,16, 1, 6, 1,11,11, 1, 6, 6,
     *          1,21, 1, 6, 1,16,16, 1, 6,11,
     *          1,11, 6,11, 6/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     *          0, 0, 3, 0, 1, 0, 1, 2, 2, 1,
     *          0, 0, 4, 0, 1, 0, 1, 3, 3, 0,
     *          2, 2, 1, 1, 2/
      DATA IZ / 1, 1, 1, 6, 1, 1,11, 1, 6, 6,
     *          1, 1,16, 1, 6, 1, 6,11,11, 6,
     *          1, 1,21, 1, 6, 1, 6,16,16, 1,
     *         11,11, 6, 6,11/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     MM CHARGE - QM ELECTRON INTERACTION ENERGY
C     THIS ENERGY IS ONLY USED WITH SWFDX TO PRODUCE GRADIENT
C
      IF(IDOCHG.EQ.0) RETURN
C
      NNQ = NTODOQ
      IF(NACTMM.GT.0) NNQ = NACTMM
C
      CALL VALFM(LOADFM)
      LSWF    = LOADFM + 1
      LAST    = LSWF   + 3*100*NNQ
      NEED    = LAST   - LOADFM
      CALL GETFM(NEED)
      CALL VCLR(X(LSWF),1,3*100*NNQ)
C
      IPCOUNT = ME - 1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
C     -- ISHELL
C
      DO 720 II = 1,NSHELL
         I = KATOM(II)
         XI = C(1,I)
         YI = C(2,I)
         ZI = C(3,I)
         I1 = KSTART(II)
         I2 = I1+KNG(II)-1
         LIT = KTYPE(II)
         MINI = KMIN(II)
         MAXI = KMAX(II)
         LOCI = KLOC(II)-MINI
C
C        -- JSHELL
C
         DO 700 JJ = 1,NSHELL
            IF (GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 700
            END IF
            J = KATOM(JJ)
            XJ = C(1,J)
            YJ = C(2,J)
            ZJ = C(3,J)
            J1 = KSTART(JJ)
            J2 = J1+KNG(JJ)-1
            LJT = KTYPE(JJ)
            MINJ = KMIN(JJ)
            MAXJ = KMAX(JJ)
            LOCJ = KLOC(JJ)-MINJ
            NROOTS = (LIT+LJT-2)/2+1
            RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C           -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
            IJ = 0
            MAX = MAXJ
            DO 160 I = MINI,MAXI
               NX = IX(I)
               NY = IY(I)
               NZ = IZ(I)
               DO 140 J = MINJ,MAX
                  IJ = IJ+1
                  IJX(IJ) = NX+JX(J)
                  IJY(IJ) = NY+JY(J)
                  IJZ(IJ) = NZ+JZ(J)
  140          CONTINUE
  160       CONTINUE
            CALL VCLR(X(LSWF),1,3*100*NNQ)
C
C           -- I PRIMITIVE
C
            DO 520 IG = I1,I2
               AI = EX(IG)
               ARRI = AI*RR
               AXI = AI*XI
               AYI = AI*YI
               AZI = AI*ZI
               CSI = CS(IG)
               CPI = CP(IG)
               CDI = CD(IG)
               CFI = CF(IG)
               CGI = CG(IG)
C
C              -- J PRIMITIVE
C
               DO 500 JG = J1,J2
                  AJ = EX(JG)
                  AA = AI+AJ
                  AA1 = ONE/AA
                  DUM = AJ*ARRI*AA1
                  IF (DUM .GT. TOL) GOTO 500
                  FAC = EXP(-DUM)
                  CSJ = CS(JG)
                  CPJ = CP(JG)
                  CDJ = CD(JG)
                  CFJ = CF(JG)
                  CGJ = CG(JG)
                  AX = (AXI+AJ*XJ)*AA1
                  AY = (AYI+AJ*YJ)*AA1
                  AZ = (AZI+AJ*ZJ)*AA1
C
C                 -- DENSITY FACTOR
C
                  MAX = MAXJ
                  NN = 0
                  DUM1 = ZERO
                  DUM2 = ZERO
                  DO 220 I = MINI,MAXI
                     IF (I.EQ.1) DUM1=CSI*FAC
                     IF (I.EQ.2) DUM1=CPI*FAC
                     IF (I.EQ.5) DUM1=CDI*FAC
                     IF ((I.EQ.8).AND.NORM) DUM1=DUM1*SQRT3
                     IF (I.EQ.11) DUM1=CFI*FAC
                     IF ((I.EQ.14).AND.NORM) DUM1=DUM1*SQRT5
                     IF ((I.EQ.20).AND.NORM) DUM1=DUM1*SQRT3
                     IF (I.EQ.21) DUM1=CGI*FAC
                     IF ((I.EQ.24).AND.NORM) DUM1=DUM1*SQRT7
                     IF ((I.EQ.30).AND.NORM) DUM1=DUM1*SQRT5/SQRT3
                     IF ((I.EQ.33).AND.NORM) DUM1=DUM1*SQRT3
                     DO 200 J = MINJ,MAX
                        IF (J.EQ.1) THEN
                           DUM2=DUM1*CSJ
                        ELSE IF (J.EQ.2) THEN
                           DUM2=DUM1*CPJ
                        ELSE IF (J.EQ.5) THEN
                           DUM2=DUM1*CDJ
                        ELSE IF ((J.EQ.8).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        ELSE IF (J.EQ.11) THEN
                           DUM2=DUM1*CFJ
                        ELSE IF ((J.EQ.14).AND.NORM) THEN
                           DUM2=DUM2*SQRT5
                        ELSE IF ((J.EQ.20).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        ELSE IF (J.EQ.21) THEN
                           DUM2=DUM1*CGJ
                        ELSE IF ((J.EQ.24).AND.NORM) THEN
                           DUM2=DUM2*SQRT7
                        ELSE IF ((J.EQ.30).AND.NORM) THEN
                           DUM2=DUM2*SQRT5/SQRT3
                        ELSE IF ((J.EQ.33).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        END IF
                        NN = NN+1
                        DIJ(NN) = DUM2
  200                CONTINUE
  220             CONTINUE
C
C                 -- CHARGES INTEGRALS.
C
                  DUM = PI212*AA1
                  DO 400 I=1,IJ
                     FIJ(I) = DIJ(I)*DUM
  400             CONTINUE
                  AAX = AA*AX
                  AAY = AA*AY
                  AAZ = AA*AZ
C
                  DO 495 IIQ = 1, NNQ
                     IFFAT = NONLSTQ(IIQ)
                     IF(NACTMM.GT.0) IFFAT = LACTMM(IIQ)
                     CXGRP = CORD(1,IFFAT) - QMCX
                     CYGRP = CORD(2,IFFAT) - QMCY
                     CZGRP = CORD(3,IFFAT) - QMCZ
                     PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
                     PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
                     PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
                     CXGRP = CXGRP - PBCX
                     CYGRP = CYGRP - PBCY
                     CZGRP = CZGRP - PBCZ
                     R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
                     IF(R2.GT.SWRBQ2) GOTO 495
                     CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
                     CX    = CORD(1,IFFAT) - PBCX
                     CY    = CORD(2,IFFAT) - PBCY
                     CZ    = CORD(3,IFFAT) - PBCZ
                     ZNUC = -CHARG(IFFAT)
                     XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
                     IF (NROOTS.LE.3) CALL RT123
                     IF (NROOTS.EQ.4) CALL ROOT4
                     IF (NROOTS.EQ.5) CALL ROOT5
                     MM = 0
                     DO 477 K = 1,NROOTS
                        UU = AA*U(K)
                        WW = W(K)*ZNUC
                        TT = ONE/(AA+UU)
                        T = SQRT(TT)
                        X0 = (AAX+UU*CX)*TT
                        Y0 = (AAY+UU*CY)*TT
                        Z0 = (AAZ+UU*CZ)*TT
                        IN = -5+MM
                        DO 476 I = 1,LIT
                           IN = IN+5
                           NI = I
                           DO 475 J = 1,LJT
                              JN = IN+J
                              NJ = J
                              CALL STVINT
                              XIN(JN) = XINT
                              YIN(JN) = YINT
                              ZIN(JN) = ZINT*WW
  475                      CONTINUE
  476                   CONTINUE
                        MM = MM+25
  477                CONTINUE
                     DO 481 I = 1,IJ
                        NX = IJX(I)
                        NY = IJY(I)
                        NZ = IJZ(I)
                        DUM = ZERO
                        MM = 0
                        DO 479 K = 1,NROOTS
                           DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
                           MM = MM+25
  479                   CONTINUE
                        DUMFIJ = DUM*FIJ(I)
                        X(LSWF+(IIQ-1)*3*100+(I-1)*3  )=
     *                  X(LSWF+(IIQ-1)*3*100+(I-1)*3  )+DUMFIJ*SWFDX
                        X(LSWF+(IIQ-1)*3*100+(I-1)*3+1)=
     *                  X(LSWF+(IIQ-1)*3*100+(I-1)*3+1)+DUMFIJ*SWFDY
                        X(LSWF+(IIQ-1)*3*100+(I-1)*3+2)=
     *                  X(LSWF+(IIQ-1)*3*100+(I-1)*3+2)+DUMFIJ*SWFDZ
  481                CONTINUE
  495             CONTINUE
  500          CONTINUE
  520       CONTINUE
C
C
            MAX = MAXJ
            KK = 0
            DO 620 I = MINI,MAXI
               LI = LOCI+I
               DO 600 J = MINJ,MAX
                  KK = KK + 1 
                  LJ = LOCJ+J
                  IF(LI-LJ) 920,940,940
  920             ID = LJ
                  JD = LI
                  GOTO 960
  940             ID = LI
                  JD = LJ
  960             NN = (ID*(ID-1))/2+JD
                  DUM = DM(NN)
                  DO IIQ = 1, NNQ
                     IFFAT = NONLSTQ(IIQ)
                     IF(NACTMM.GT.0) IFFAT = LACTMM(IIQ)
                     CXGRP = CORD(1,IFFAT) - QMCX
                     CYGRP = CORD(2,IFFAT) - QMCY
                     CZGRP = CORD(3,IFFAT) - QMCZ
                     PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
                     PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
                     PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
                     CXGRP = CXGRP - PBCX
                     CYGRP = CYGRP - PBCY
                     CZGRP = CZGRP - PBCZ
                     FFGRD(1,IFFAT)=FFGRD(1,IFFAT)+
     *                  DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3  )
                     FFGRD(2,IFFAT)=FFGRD(2,IFFAT)+
     *                  DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3+1)
                     FFGRD(3,IFFAT)=FFGRD(3,IFFAT)+
     *                  DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3+2)
                     VIR(1)=VIR(1)+
     *                  DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3  )*CXGRP
                     VIR(2)=VIR(2)+
     *                  DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3+1)*CYGRP
                     VIR(3)=VIR(3)+
     *                  DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3+2)*CZGRP
                     IYES = 0
                     DO KFIX=1,NFIXMM
                        IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
                     ENDDO
                     IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
                        VIR(1)=VIR(1)-
     *                  DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3  )*CXGRP
                        VIR(2)=VIR(2)-
     *                  DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3+1)*CYGRP
                        VIR(3)=VIR(3)-
     *                  DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3+2)*CZGRP
                     END IF
                  ENDDO
  600          CONTINUE
  620       CONTINUE
  700    CONTINUE
  720 CONTINUE
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMCHGFMM
!>   
!> @brief    QM electron -MM charge force
!>   
!> @author   Hui Li   
!>           - Jan 2011
!>   
!> @details  The forces act on MM charges by QM electrons
!>
      SUBROUTINE QMMMCHGFMM(DM,CHGINT,CORD,CHARG,FFGRD,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      DIMENSION DM(*),CHGINT(*),CORD(3,*),CHARG(*),FFGRD(3,*),
     *          NONLSTQ(*)
C
      DIMENSION DIJ(100),XIN(432),YIN(432),ZIN(432)
      DIMENSION FIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA RLN10 /2.30258D+00/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     FORCES ON MM CHARGES BY QM ELECTRONS
C
      IF(IDOCHG.EQ.0) RETURN
C
      CALL QMMMCHGFMMSWF(DM,CHARG,CORD,FFGRD,NONLSTQ)
C
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      NNQ = NTODOQ
      IF(NACTMM.GT.0) NNQ = NACTMM
      DO 100 IIQ = 1, NNQ
      IFFAT = NONLSTQ(IIQ)
      IF(NACTMM.GT.0) IFFAT = LACTMM(IIQ)
      CXGRP = CORD(1,IFFAT) - QMCX
      CYGRP = CORD(2,IFFAT) - QMCY
      CZGRP = CORD(3,IFFAT) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
      PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
      PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.SWRBQ2) GOTO 100
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
      ZNUC = CHARG(IFFAT)
      IF(ZNUC.EQ.ZERO) GOTO 100
C
C     -- ISHELL
C
      DO 600 II = 1,NSHELL
C
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GOTO 600
      END IF
      IAT= KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     -- JSHELL
C
      DO 580 JJ = 1,NSHELL
      IF((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 580
      END IF
      JAT= KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 50 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 50 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
  50  CONTINUE
      CALL VCLR(CHGINT,1,3*IJ)
C
C     -- I PRIMITIVE
C
      JGMAX = J2
      DO 520 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
      CFI = CF(IG)
C
C     -- J PRIMITIVE
C
      DO 500 JG = J1,JGMAX
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GOTO 500
      FAC =  EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     -- DENSITY FACTOR
C
      MAX = MAXJ
      NN = 0
      DUM1=ZERO
      DUM2=DUM1
      DO 170 I=MINI,MAXI
      GOTO (70,80,110,110,90,110,110,95,110,110,
     1       102,110,110,104,110,110,110,110,110,108),I
  70  DUM1=CSI*FAC
      GOTO 110
  80  DUM1=CPI*FAC
      GOTO 110
  90  DUM1=CDI*FAC
      GOTO 110
  95  IF(NORM) DUM1=DUM1*SQRT3
      GOTO 110
 102  DUM1=CFI*FAC
      GOTO 110
 104  DUM1 = DUM1 *SQRT5
      GOTO 110
 108  DUM1 = DUM1 * SQRT3
 110  CONTINUE
      DO 170 J=MINJ,MAX
      GOTO (125,130,160,160,140,160,160,150,160,160,
     1       152,160,160,154,160,160,160,160,160,156),J
  125 DUM2=DUM1*CSJ
      GOTO 160
  130 DUM2=DUM1*CPJ
      GOTO 160
  140 DUM2=DUM1*CDJ
      GOTO 160
  150 IF(NORM) DUM2=DUM2*SQRT3
      GOTO 160
  152 DUM2 = DUM1 * CFJ
      GOTO 160
  154 DUM2 = DUM2 *SQRT5
      GOTO 160
  156 DUM2 = DUM2 * SQRT3
  160 NN=NN+1
  170 DIJ(NN)=DUM2
C
C     ..... HELLMANN-FEYNMAN TERM .....
C
      DUM = PI212*AA1
      DUM=DUM+DUM
      DO 380 I = 1,IJ
      FIJ(I) = DIJ(I)*DUM
  380 CONTINUE
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      ICC=1
C
      XX   = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      IF(NROOTS.EQ.5) CALL ROOT5
      IF(NROOTS.EQ.6) CALL ROOT6
      IF(NROOTS.GE.7) THEN
         WRITE(IW,9008)
         CALL ABRT
      END IF
      MM = 0
      DO 401 K = 1,NROOTS
      UU = AA*U(K)
      WW = W(K)*ZNUC
      WW = WW*UU
      TT = ONE/(AA+UU)
      T  = SQRT(TT)
      X0 = (AAX+UU*CX)*TT
      Y0 = (AAY+UU*CY)*TT
      Z0 = (AAZ+UU*CZ)*TT
      IN = -4+MM
      DO 400 I = 1,LIT
      IN = IN+4
      NI = I
      DO 400 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL STVINT
      XIN(JN   ) = XINT
      YIN(JN   ) = YINT
      ZIN(JN   ) = ZINT*WW
      CALL POLXYZ
      XIN(JN+125) = XINT
      YIN(JN+125) = YINT
      ZIN(JN+125) = ZINT*WW
  400 CONTINUE
  401 MM = MM+16
      DO 403 I = 1,IJ
      NX    = IJX(I)
      NY    = IJY(I)
      NZ    = IJZ(I)
      DUMX  = ZERO
      DUMY  = ZERO
      DUMZ  = ZERO
      MM    = 0
      DO 402 K = 1,NROOTS
      DUMX= DUMX+XIN(NX+MM+125)*YIN(NY+MM    )*ZIN(NZ+MM    )
      DUMY= DUMY+XIN(NX+MM    )*YIN(NY+MM+125)*ZIN(NZ+MM    )
      DUMZ= DUMZ+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM+125)
  402 MM  = MM+16
      DUM = FIJ(I)*SWF
      CHGINT(ICC  )=CHGINT(ICC  )-DUM*DUMX
      CHGINT(ICC+1)=CHGINT(ICC+1)-DUM*DUMY
      CHGINT(ICC+2)=CHGINT(ICC+2)-DUM*DUMZ
      ICC=ICC+3
 403  CONTINUE
 500  CONTINUE
 520  CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
C
      MAX=MAXJ
      ICC=1
      DO 550 I=MINI,MAXI
      LI=LOCI+I
      DO 550 J=MINJ,MAX
      LJ=LOCJ+J
      IF (LI-LJ) 920,940,940
  920 ID = LJ
      JD = LI
      GOTO 960
  940 ID = LI
      JD = LJ
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*CHGINT(ICC  )
      FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*CHGINT(ICC+1)
      FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*CHGINT(ICC+2)
      VIR(1)        =VIR(1)         + DUM*CHGINT(ICC  )*CX
      VIR(2)        =VIR(2)         + DUM*CHGINT(ICC+1)*CY
      VIR(3)        =VIR(3)         + DUM*CHGINT(ICC+2)*CZ
      IYES = 0
      DO KFIX=1,NFIXMM
         IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
      ENDDO
      IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
         VIR(1)     =VIR(1)         - DUM*CHGINT(ICC  )*CX
         VIR(2)     =VIR(2)         - DUM*CHGINT(ICC+1)*CY
         VIR(3)     =VIR(3)         - DUM*CHGINT(ICC+2)*CZ
      END IF
      ICC=ICC+3
  550 CONTINUE
  580 CONTINUE
  600 CONTINUE
  100 CONTINUE
C
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN EFDINT.  CALL A PROGRAMMER/QUANTUM CHEMIST.')
      END
C*MODULE QUANPO  *DECK QMMMCHGFQM
      SUBROUTINE QMMMCHGFQM(DM,CORD,CHARG,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL ISKIP
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      DIMENSION DM(*),CORD(3,*),CHARG(*),NONLSTQ(*)
C
      DIMENSION ISKIP(35),INDX(70)
      DIMENSION IX(35),IY(35),IZ(35),JX(20),JY(20),JZ(20)
      DIMENSION IJG(210),IJX(210),IJY(210),IJZ(210)
      DIMENSION XIN(200),YIN(200),ZIN(200),G(210),DIJ(210)
      DIMENSION FIJ(210)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /DSTV  / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,
     *                XJ,YJ,ZJ,NI,NJ,CX,CY,CZ
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
      PARAMETER (RLN10=2.30258D+00)
      PARAMETER (PI212=1.1283791670955D+00)
      PARAMETER (SQRT3=1.73205080756888D+00)
      PARAMETER (SQRT5=2.23606797749979D+00)
C
      DATA CHECK/8HCHECK   /
      DATA INDX / 1, 2, 3, 4, 5, 6, 7, 8, 9,10,
     1           11,12,13,14,15,16,17,18,19,20,
     2           -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
     3           -0,-0,-0,-0,-0,
     4           -0, 1, 2, 3, 1, 2, 3, 4, 5, 6,
     5            4, 5, 6, 7, 8, 9,10,11,12,13,
     6            7, 8, 9,10,11,12,13,14,15,16,
     7           17,18,19,20,21/
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5,
     2         17, 1, 1,13,13, 5, 1, 5, 1, 9,
     3          9, 1, 9, 5, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5,
     2          1,17, 1, 5, 1,13,13, 1, 5, 9,
     3          1, 9, 5, 9, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5,
     2          1, 1,17, 1, 5, 1, 5,13,13, 1,
     3          9, 9, 5, 5, 9/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     FORCES ON QM ELECTRONS BY MM CHARGES
C
      IF(IDOCHG.EQ.0) RETURN
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      IF (EXETYP .EQ. CHECK) GOTO 1120
C
C     -- ISHELL
C
      DO 1060 II = 1,NSHELL
C
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GOTO 1060
      END IF
      IAT = KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)+1
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      DO 100 I=1,35
 100  ISKIP(I)=.TRUE.
      DO 260 I=MINI,MAXI
      GOTO (110,140,260,260,180,260,260,260,260,260,
     *       220,260,260,260,260,260,260,260,260,260),I
 110  DO 120 K=2,4
 120  ISKIP(K)=.FALSE.
      GOTO 260
 140  DO 160 K=5,10
 160  ISKIP(K)=.FALSE.
      ISKIP(1)=.FALSE.
      GOTO 260
 180  DO 200 K=2,4
 200  ISKIP(K)=.FALSE.
      DO 210 K=11,20
 210  ISKIP(K)=.FALSE.
      GOTO 260
 220  DO 240 K=5,10
 240  ISKIP(K)=.FALSE.
      DO 250 K=21,35
 250  ISKIP(K)=.FALSE.
 260  CONTINUE
C
C     -- JSHELL
C
      DO 1040 JJ = 1,NSHELL
        IF((.NOT.NXT) .AND. GOPARR) THEN
           IPCOUNT = IPCOUNT + 1
           IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 1040
        END IF
C
      JAT = KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      N0 = 0
      IF (LIT .GE. 4) N0 = 35
      IJ = 0
      DO 340 I = 1,35
      IF (ISKIP(I)) GOTO 340
      IN = INDX(I+N0)
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 320 J = MINJ,MAXJ
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
      IJG(IJ) = IN+21*(J-MINJ)
  320 CONTINUE
  340 CONTINUE
      DO 360 I = 1,IJ
      N = IJG(I)
  360 G(N) = ZERO
C
C     -- I PRIMITIVE
C
      DO 840 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      DUM = AI+AI
      CSI = CP(IG)
      CPI = CS(IG)*DUM
      IF (LIT .EQ. 4) CPI = CD(IG)
      CDI = CP(IG)*DUM
      IF (LIT .EQ. 5) CDI = CF(IG)
      CFI = CD(IG)*DUM
      CGI = CF(IG)*DUM
C
C     -- J PRIMITIVE
C
      DO 820 JG = J1,J2
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GOTO 820
      FAC = EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     -- DENSITY FACTOR
C
      NN = 0
      DUM1 = ZERO
      DUM2 = DUM1
      DO 600 I=1,35
      IF(ISKIP(I)) GOTO 600
      GOTO (370,380,420,420,390,420,420,420,420,420,
     *       400,420,420,420,420,420,420,420,420,420,
     *       410,420,420,420,420,420,420,420,420,420,
     *       420,420,420,420,420),I
 370  DUM1=CSI*FAC
      GOTO 420
 380  DUM1=CPI*FAC
      GOTO 420
 390  DUM1=CDI*FAC
      GOTO 420
 400  DUM1=CFI*FAC
      GOTO 420
 410  DUM1 = CGI*FAC
 420  CONTINUE
      DO 580 J=MINJ,MAXJ
      GOTO (430,440,560,560,460,560,560,480,560,560,
     *       500,560,560,520,560,560,560,560,560,540),J
  430 DUM2=DUM1*CSJ
      GOTO 560
  440 DUM2=DUM1*CPJ
      GOTO 560
  460 DUM2=DUM1*CDJ
      GOTO 560
  480 IF(NORM) DUM2=DUM2*SQRT3
      GOTO 560
  500 DUM2 = DUM1 * CFJ
      GOTO 560
  520 DUM2 = DUM2 *SQRT5
      GOTO 560
  540 DUM2 = DUM2 * SQRT3
  560 NN=NN+1
  580 DIJ(NN)=DUM2
  600 CONTINUE
C
C     ....BASIC CHARGE TERM
C
      DUM = PI212*AA1
      DO 700 I=1,IJ
 700  FIJ(I)=DIJ(I)*DUM
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
C
      DO 710 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
      CXGRP = CORD(1,IFFAT) - QMCX
      CYGRP = CORD(2,IFFAT) - QMCY
      CZGRP = CORD(3,IFFAT) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
      PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
      PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.SWRBQ2) GOTO 710
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
      ZNUC = -CHARG(IFFAT)
      IF(ZNUC.EQ.ZERO) GOTO 710
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3)CALL RT123
      IF(NROOTS.EQ.4)CALL ROOT4
      IF(NROOTS.EQ.5)CALL ROOT5
      MM=0
      DO 806 K=1,NROOTS
      UU=AA*U(K)
      WW=W(K)*ZNUC
      TT=ONE/(AA+UU)
      T =SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
      IN=-4+MM
      DO 804 I=1,LIT
      IN=IN+4
      NI=I
      DO 804 J=1,LJT
      JN=IN+J
      NJ=J
      CALL VINT
      XIN(JN)=XINT
      YIN(JN)=YINT
      ZIN(JN)=ZINT*WW
 804  CONTINUE
 806  MM=MM+20
      DO 810 I=1,IJ
      N=IJG(I)
      NX=IJX(I)
      NY=IJY(I)
      NZ=IJZ(I)
      DUM=ZERO
      MM=0
      DO 808 K=1,NROOTS
      DUM=DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
 808  MM=MM+20
 810  G(N)=G(N)+DUM*FIJ(I)*SWF
 710  CONTINUE
C
C     -- END OF PRIMITIVE LOOPS -----
C
  820 CONTINUE
  840 CONTINUE
C
C     -- FORM INTEGRALS OVER DERIVATIVES -----
C
      NN = 0
      N = 1
      DO 900 J = MINJ,MAXJ
      IF (MINI .GT. 1) GOTO 860
      NN = NN+1
      XIN(NN) = G(N+ 1)
      YIN(NN) = G(N+ 2)
      ZIN(NN) = G(N+ 3)
      IF (MAXI .EQ. 1) GOTO 900
  860 IF (MINI .GT. 2) GOTO 880
      NN = NN+1
      XIN(NN) = (G(N+ 4)-G(N ))
      YIN(NN) = G(N+ 7)
      ZIN(NN) = G(N+ 8)
      NN = NN+1
      XIN(NN) = G(N+ 7)
      YIN(NN) = (G(N+ 5)-G(N ))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = G(N+ 9)
      ZIN(NN) = (G(N+ 6)-G(N ))
      IF (MAXI .EQ. 4) GOTO 900
  880 CONTINUE
      IF (MINI .GT. 5) GOTO 890
      NN = NN+1
      XIN(NN) = (G(N+ 3)-G(N )-G(N ))
      YIN(NN) = G(N+ 6)
      ZIN(NN) = G(N+ 7)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = (G(N+ 4)-G(N+ 1)-G(N+ 1))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+10)
      YIN(NN) = G(N+11)
      ZIN(NN) = (G(N+ 5)-G(N+ 2)-G(N+ 2))
      NN = NN+1
      DUM = ONE
      IF (NORM) DUM = SQRT3
      XIN(NN) = DUM*(G(N+ 6)-G(N+ 1))
      YIN(NN) = DUM*(G(N+ 8)-G(N ))
      ZIN(NN) = DUM* G(N+12)
      NN = NN+1
      XIN(NN) = DUM*(G(N+ 7)-G(N+ 2))
      YIN(NN) = DUM* G(N+12)
      ZIN(NN) = DUM*(G(N+10)-G(N ))
      NN = NN+1
      XIN(NN) = DUM* G(N+12)
      YIN(NN) = DUM*(G(N+ 9)-G(N+ 2))
      ZIN(NN) = DUM*(G(N+11)-G(N+ 1))
      IF(MAXI.EQ.10) GOTO 900
 890  CONTINUE
      NN=NN+1
      XIN(NN)=(G(N+ 6)-G(N   )-G(N   )-G(N   ))
      YIN(NN)= G(N+ 9)
      ZIN(NN)= G(N+10)
      NN=NN+1
      XIN(NN)= G(N+11)
      YIN(NN)=(G(N+ 7)-G(N+ 1)-G(N+ 1)-G(N+ 1))
      ZIN(NN)= G(N+12)
      NN=NN+1
      XIN(NN)= G(N+13)
      YIN(NN)= G(N+14)
      ZIN(NN)=(G(N+ 8)-G(N+ 2)-G(N+ 2)-G(N+ 2))
      NN=NN+1
      DUM=ONE
      IF(NORM) DUM=SQRT5
      XIN(NN)=DUM* (G(N+ 9)-G(N+ 3)-G(N+ 3))
      YIN(NN)=DUM* (G(N+15)-G(N  ))
      ZIN(NN)=DUM* G(N+18)
      NN=NN+1
      XIN(NN)=DUM* (G(N+10)-G(N+ 4)-G(N+ 4))
      YIN(NN)=DUM* G(N+18)
      ZIN(NN)=DUM* (G(N+16)-G(N  ))
      NN=NN+1
      XIN(NN)=DUM* (G(N+15)-G(N+ 1))
      YIN(NN)=DUM* (G(N+11)-G(N+ 3)-G(N+ 3))
      ZIN(NN)=DUM*  G(N+19)
      NN=NN+1
      XIN(NN)=DUM* G(N+19)
      YIN(NN)=DUM* (G(N+12)-G(N+ 5)-G(N+ 5))
      ZIN(NN)=DUM* (G(N+17)-G(N+ 1))
      NN=NN+1
      XIN(NN)=DUM* (G(N+16)-G(N+ 2))
      YIN(NN)=DUM*  G(N+20)
      ZIN(NN)=DUM* (G(N+13)-G(N+ 4)-G(N+ 4))
      NN=NN+1
      XIN(NN)=DUM*  G(N+20)
      YIN(NN)=DUM* (G(N+17)-G(N+ 2))
      ZIN(NN)=DUM* (G(N+14)-G(N+ 5)-G(N+ 5))
      NN=NN+1
      IF(NORM) DUM=DUM*SQRT3
      XIN(NN)=DUM* (G(N+18)-G(N+ 5))
      YIN(NN)=DUM* (G(N+19)-G(N+ 4))
      ZIN(NN)=DUM* (G(N+20)-G(N+ 3))
  900 N = N+21
C
C     -- CALCULATE CONTRIBUTION TO GRADIENT -----
C
      N = 0
      DO 980 J = MINJ,MAXJ
      JN = LOCJ+J
      DO 980 I = MINI,MAXI
      N = N+1
      IN = LOCI+I
      IF (IN-JN) 920,940,940
  920 ID = JN
      JD = IN
      GOTO 960
  940 ID = IN
      JD = JN
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      DUM = DUM+DUM
      DE(1,IAT) = DE(1,IAT)+DUM*XIN(N)
      DE(2,IAT) = DE(2,IAT)+DUM*YIN(N)
      DE(3,IAT) = DE(3,IAT)+DUM*ZIN(N)
  980 CONTINUE
 1040 CONTINUE
 1060 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
 1120 CONTINUE
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
C
      END
C*MODULE QUANPO  *DECK QMMMCHGFQMMFLD
!>   
!> @brief    QM electron - <MM> charge force
!>   
!> @author   Hui Li   
!>           - Mar 2012
!>   
!> @details  forces on QM electrons by MM charges in averaged coordinates
!>
      SUBROUTINE QMMMCHGFQMMFLD(DM,CORDMN,CHARG,MERGE,INTLST)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL NORM, ISKIP
C
      DIMENSION DM(*),CORDMN(3,MEANSIZ,*),CHARG(*),
     *          MERGE(MEANSIZ/MFMERGE,*),INTLST(*)
C
      DIMENSION ISKIP(35),INDX(70)
      DIMENSION IX(35),IY(35),IZ(35),JX(20),JY(20),JZ(20)
      DIMENSION IJG(210),IJX(210),IJY(210),IJZ(210)
      DIMENSION XIN(200),YIN(200),ZIN(200),G(210),DIJ(210)
      DIMENSION FIJ(210)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /DSTV  / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,
     *                XJ,YJ,ZJ,NI,NJ,CX,CY,CZ
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
      PARAMETER (RLN10=2.30258D+00)
      PARAMETER (PI212=1.1283791670955D+00)
      PARAMETER (SQRT3=1.73205080756888D+00)
      PARAMETER (SQRT5=2.23606797749979D+00)
C
      DATA CHECK/8HCHECK   /
      DATA INDX / 1, 2, 3, 4, 5, 6, 7, 8, 9,10,
     1           11,12,13,14,15,16,17,18,19,20,
     2           -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
     3           -0,-0,-0,-0,-0,
     4           -0, 1, 2, 3, 1, 2, 3, 4, 5, 6,
     5            4, 5, 6, 7, 8, 9,10,11,12,13,
     6            7, 8, 9,10,11,12,13,14,15,16,
     7           17,18,19,20,21/
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5,
     2         17, 1, 1,13,13, 5, 1, 5, 1, 9,
     3          9, 1, 9, 5, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5,
     2          1,17, 1, 5, 1,13,13, 1, 5, 9,
     3          1, 9, 5, 9, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5,
     2          1, 1,17, 1, 5, 1, 5,13,13, 1,
     3          9, 9, 5, 5, 9/
C
C     HUI LI, MAR 29 2012, LINCOLN
C
C     FORCES ON QM ELECTRONS BY MEANFLD MM CHARGES
C
      IF(IDOCHG.EQ.0) RETURN
C
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      IF (EXETYP .EQ. CHECK) GOTO 1120
C
C     -- NOTE: IT IS FASTER TO DO THE IFFAT LOOP HERE --
C
      NSEG = MEANFLD/MFMERGE
      DO 710 III = L1FFAT, L2FFAT
      KK = III-L1FFAT+1
      IFFAT= INTLST(III)
      ZNUC = -CHARG(IFFAT)
      IF(ZNUC.EQ.ZERO) GOTO 710
      DO ISEG = 1, NSEG
      IFMERGE = MERGE(ISEG,KK)
      ZNUC = -CHARG(IFFAT)*ONEMNFD*IFMERGE
      DO 711 IMFLD = (ISEG-1)*MFMERGE+1, ISEG*MFMERGE, IFMERGE
      CXGRP = CORDMN(1,IMFLD,KK) - QMCX
      CYGRP = CORDMN(2,IMFLD,KK) - QMCY
      CZGRP = CORDMN(3,IMFLD,KK) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
      PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
      PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.SWRBQ2) GOTO 711
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORDMN(1,IMFLD,KK) - PBCX
      CY    = CORDMN(2,IMFLD,KK) - PBCY
      CZ    = CORDMN(3,IMFLD,KK) - PBCZ
C
C     -- ISHELL
C
      DO 1060 II = 1,NSHELL
C
      IAT = KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)+1
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      DO 100 I=1,35
 100  ISKIP(I)=.TRUE.
      DO 260 I=MINI,MAXI
      GOTO (110,140,260,260,180,260,260,260,260,260,
     *       220,260,260,260,260,260,260,260,260,260),I
 110  DO 120 K=2,4
 120  ISKIP(K)=.FALSE.
      GOTO 260
 140  DO 160 K=5,10
 160  ISKIP(K)=.FALSE.
      ISKIP(1)=.FALSE.
      GOTO 260
 180  DO 200 K=2,4
 200  ISKIP(K)=.FALSE.
      DO 210 K=11,20
 210  ISKIP(K)=.FALSE.
      GOTO 260
 220  DO 240 K=5,10
 240  ISKIP(K)=.FALSE.
      DO 250 K=21,35
 250  ISKIP(K)=.FALSE.
 260  CONTINUE
C
C     -- JSHELL
C
      DO 1040 JJ = 1,NSHELL
C
      JAT = KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      N0 = 0
      IF (LIT .GE. 4) N0 = 35
      IJ = 0
      DO 340 I = 1,35
      IF (ISKIP(I)) GOTO 340
      IN = INDX(I+N0)
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 320 J = MINJ,MAXJ
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
      IJG(IJ) = IN+21*(J-MINJ)
  320 CONTINUE
  340 CONTINUE
      DO 360 I = 1,IJ
      N = IJG(I)
  360 G(N) = ZERO
C
C     -- I PRIMITIVE
C
      DO 840 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      DUM = AI+AI
      CSI = CP(IG)
      CPI = CS(IG)*DUM
      IF (LIT .EQ. 4) CPI = CD(IG)
      CDI = CP(IG)*DUM
      IF (LIT .EQ. 5) CDI = CF(IG)
      CFI = CD(IG)*DUM
      CGI = CF(IG)*DUM
C
C     -- J PRIMITIVE
C
      DO 820 JG = J1,J2
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GOTO 820
      FAC = EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     -- DENSITY FACTOR
C
      NN = 0
      DUM1 = ZERO
      DUM2 = DUM1
      DO 600 I=1,35
      IF(ISKIP(I)) GOTO 600
      GOTO (370,380,420,420,390,420,420,420,420,420,
     *       400,420,420,420,420,420,420,420,420,420,
     *       410,420,420,420,420,420,420,420,420,420,
     *       420,420,420,420,420),I
 370  DUM1=CSI*FAC
      GOTO 420
 380  DUM1=CPI*FAC
      GOTO 420
 390  DUM1=CDI*FAC
      GOTO 420
 400  DUM1=CFI*FAC
      GOTO 420
 410  DUM1 = CGI*FAC
 420  CONTINUE
      DO 580 J=MINJ,MAXJ
      GOTO (430,440,560,560,460,560,560,480,560,560,
     *       500,560,560,520,560,560,560,560,560,540),J
  430 DUM2=DUM1*CSJ
      GOTO 560
  440 DUM2=DUM1*CPJ
      GOTO 560
  460 DUM2=DUM1*CDJ
      GOTO 560
  480 IF(NORM) DUM2=DUM2*SQRT3
      GOTO 560
  500 DUM2 = DUM1 * CFJ
      GOTO 560
  520 DUM2 = DUM2 *SQRT5
      GOTO 560
  540 DUM2 = DUM2 * SQRT3
  560 NN=NN+1
  580 DIJ(NN)=DUM2
  600 CONTINUE
C
C     ....BASIC CHARGE TERM
C
      DUM = PI212*AA1
      DO 700 I=1,IJ
 700  FIJ(I)=DIJ(I)*DUM
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
C
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3)CALL RT123
      IF(NROOTS.EQ.4)CALL ROOT4
      IF(NROOTS.EQ.5)CALL ROOT5
      MM=0
      DO 806 K=1,NROOTS
      UU=AA*U(K)
      WW=W(K)*ZNUC
      TT=ONE/(AA+UU)
      T =SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
      IN=-4+MM
      DO 804 I=1,LIT
      IN=IN+4
      NI=I
      DO 804 J=1,LJT
      JN=IN+J
      NJ=J
      CALL VINT
      XIN(JN)=XINT
      YIN(JN)=YINT
      ZIN(JN)=ZINT*WW
 804  CONTINUE
 806  MM=MM+20
      DO 810 I=1,IJ
      N=IJG(I)
      NX=IJX(I)
      NY=IJY(I)
      NZ=IJZ(I)
      DUM=ZERO
      MM=0
      DO 808 K=1,NROOTS
      DUM=DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
 808  MM=MM+20
 810  G(N)=G(N)+DUM*FIJ(I)*SWF
C
C     -- END OF PRIMITIVE LOOPS -----
C
  820 CONTINUE
  840 CONTINUE
C
C     -- FORM INTEGRALS OVER DERIVATIVES -----
C
      NN = 0
      N = 1
      DO 900 J = MINJ,MAXJ
      IF (MINI .GT. 1) GOTO 860
      NN = NN+1
      XIN(NN) = G(N+ 1)
      YIN(NN) = G(N+ 2)
      ZIN(NN) = G(N+ 3)
      IF (MAXI .EQ. 1) GOTO 900
  860 IF (MINI .GT. 2) GOTO 880
      NN = NN+1
      XIN(NN) = (G(N+ 4)-G(N ))
      YIN(NN) = G(N+ 7)
      ZIN(NN) = G(N+ 8)
      NN = NN+1
      XIN(NN) = G(N+ 7)
      YIN(NN) = (G(N+ 5)-G(N ))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = G(N+ 9)
      ZIN(NN) = (G(N+ 6)-G(N ))
      IF (MAXI .EQ. 4) GOTO 900
  880 CONTINUE
      IF (MINI .GT. 5) GOTO 890
      NN = NN+1
      XIN(NN) = (G(N+ 3)-G(N )-G(N ))
      YIN(NN) = G(N+ 6)
      ZIN(NN) = G(N+ 7)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = (G(N+ 4)-G(N+ 1)-G(N+ 1))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+10)
      YIN(NN) = G(N+11)
      ZIN(NN) = (G(N+ 5)-G(N+ 2)-G(N+ 2))
      NN = NN+1
      DUM = ONE
      IF (NORM) DUM = SQRT3
      XIN(NN) = DUM*(G(N+ 6)-G(N+ 1))
      YIN(NN) = DUM*(G(N+ 8)-G(N ))
      ZIN(NN) = DUM* G(N+12)
      NN = NN+1
      XIN(NN) = DUM*(G(N+ 7)-G(N+ 2))
      YIN(NN) = DUM* G(N+12)
      ZIN(NN) = DUM*(G(N+10)-G(N ))
      NN = NN+1
      XIN(NN) = DUM* G(N+12)
      YIN(NN) = DUM*(G(N+ 9)-G(N+ 2))
      ZIN(NN) = DUM*(G(N+11)-G(N+ 1))
      IF(MAXI.EQ.10) GOTO 900
 890  CONTINUE
      NN=NN+1
      XIN(NN)=(G(N+ 6)-G(N   )-G(N   )-G(N   ))
      YIN(NN)= G(N+ 9)
      ZIN(NN)= G(N+10)
      NN=NN+1
      XIN(NN)= G(N+11)
      YIN(NN)=(G(N+ 7)-G(N+ 1)-G(N+ 1)-G(N+ 1))
      ZIN(NN)= G(N+12)
      NN=NN+1
      XIN(NN)= G(N+13)
      YIN(NN)= G(N+14)
      ZIN(NN)=(G(N+ 8)-G(N+ 2)-G(N+ 2)-G(N+ 2))
      NN=NN+1
      DUM=ONE
      IF(NORM) DUM=SQRT5
      XIN(NN)=DUM* (G(N+ 9)-G(N+ 3)-G(N+ 3))
      YIN(NN)=DUM* (G(N+15)-G(N  ))
      ZIN(NN)=DUM* G(N+18)
      NN=NN+1
      XIN(NN)=DUM* (G(N+10)-G(N+ 4)-G(N+ 4))
      YIN(NN)=DUM* G(N+18)
      ZIN(NN)=DUM* (G(N+16)-G(N  ))
      NN=NN+1
      XIN(NN)=DUM* (G(N+15)-G(N+ 1))
      YIN(NN)=DUM* (G(N+11)-G(N+ 3)-G(N+ 3))
      ZIN(NN)=DUM*  G(N+19)
      NN=NN+1
      XIN(NN)=DUM* G(N+19)
      YIN(NN)=DUM* (G(N+12)-G(N+ 5)-G(N+ 5))
      ZIN(NN)=DUM* (G(N+17)-G(N+ 1))
      NN=NN+1
      XIN(NN)=DUM* (G(N+16)-G(N+ 2))
      YIN(NN)=DUM*  G(N+20)
      ZIN(NN)=DUM* (G(N+13)-G(N+ 4)-G(N+ 4))
      NN=NN+1
      XIN(NN)=DUM*  G(N+20)
      YIN(NN)=DUM* (G(N+17)-G(N+ 2))
      ZIN(NN)=DUM* (G(N+14)-G(N+ 5)-G(N+ 5))
      NN=NN+1
      IF(NORM) DUM=DUM*SQRT3
      XIN(NN)=DUM* (G(N+18)-G(N+ 5))
      YIN(NN)=DUM* (G(N+19)-G(N+ 4))
      ZIN(NN)=DUM* (G(N+20)-G(N+ 3))
  900 N = N+21
C
C     -- CALCULATE CONTRIBUTION TO GRADIENT -----
C
      N = 0
      DO 980 J = MINJ,MAXJ
      JN = LOCJ+J
      DO 980 I = MINI,MAXI
      N = N+1
      IN = LOCI+I
      IF (IN-JN) 920,940,940
  920 ID = JN
      JD = IN
      GOTO 960
  940 ID = IN
      JD = JN
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      DUM = DUM+DUM
      DE(1,IAT) = DE(1,IAT)+DUM*XIN(N)
      DE(2,IAT) = DE(2,IAT)+DUM*YIN(N)
      DE(3,IAT) = DE(3,IAT)+DUM*ZIN(N)
  980 CONTINUE
 1040 CONTINUE
 1060 CONTINUE
  711 CONTINUE
      ENDDO
  710 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
 1120 CONTINUE
      RETURN
C
      END
C*MODULE QUANPO  *DECK QMMMCHGNUC
!>
!> @brief    QM nuc -MM charge force
!>
!> @author   Hui Li
!>           - Jan 2011
!>
!> @details  mutual forces are calculated
!>
      SUBROUTINE QMMMCHGNUC(CORD,FFGRD,DETMP,CHARG,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),DETMP(3,*),
     *          NONLSTQ(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C
C     MM CHARGE - QM NUC INTERACTION
C
      CALL VCLR(DETMP,1,3*MXATM)
      ENUCCH =ZERO
      IF(IDOCHG.EQ.0) RETURN
C
      IPCOUNT = ME - 1
      DO 200 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         QI = CHARG(IFFAT)
         IF(QI.EQ.ZERO) GOTO 200
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         CXGRP = CORD(1,IFFAT) - QMCX
         CYGRP = CORD(2,IFFAT) - QMCY
         CZGRP = CORD(3,IFFAT) - QMCZ
         PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
         PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
         PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
         CXGRP = CXGRP - PBCX
         CYGRP = CYGRP - PBCY
         CZGRP = CZGRP - PBCZ
         R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
         IF(R2.GT.SWRBQ2) GOTO 200
         CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
         CX    = CORD(1,IFFAT) - PBCX
         CY    = CORD(2,IFFAT) - PBCY
         CZ    = CORD(3,IFFAT) - PBCZ
         DO 210 JAT=1,NAT
            IF(ZAN(JAT).EQ.ZERO) GOTO 210
            X     = CX - C(1,JAT)
            Y     = CY - C(2,JAT)
            Z     = CZ - C(3,JAT)
            R2    = X*X+Y*Y+Z*Z
            IF(R2.LT.1.0D-10) GOTO 210
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            EPAIR = QI*ZAN(JAT)*ONER
            ENUCCH= ENUCCH + EPAIR*SWF
            DUM   = -EPAIR*ONER2*SWF
            DEX   = DUM*X
            DEY   = DUM*Y
            DEZ   = DUM*Z
            FFGRD(1,IFFAT) = FFGRD(1,IFFAT) + DEX
            FFGRD(2,IFFAT) = FFGRD(2,IFFAT) + DEY
            FFGRD(3,IFFAT) = FFGRD(3,IFFAT) + DEZ
            FFGRD(1,IFFAT) = FFGRD(1,IFFAT) + EPAIR*SWFDX
            FFGRD(2,IFFAT) = FFGRD(2,IFFAT) + EPAIR*SWFDY
            FFGRD(3,IFFAT) = FFGRD(3,IFFAT) + EPAIR*SWFDZ
            DETMP(1,JAT )  = DETMP(1,JAT )  - DEX
            DETMP(2,JAT )  = DETMP(2,JAT )  - DEY
            DETMP(3,JAT )  = DETMP(3,JAT )  - DEZ
            VIR(1)         = VIR(1) + DEX*X + EPAIR*SWFDX*CXGRP
            VIR(2)         = VIR(2) + DEY*Y + EPAIR*SWFDY*CYGRP
            VIR(3)         = VIR(3) + DEZ*Z + EPAIR*SWFDZ*CZGRP
            IYES = 0
            DO KFIX=1,NFIXMM
               IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
            ENDDO
            IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
               VIR(1)      = VIR(1) - DEX*X - EPAIR*SWFDX*CXGRP
               VIR(2)      = VIR(2) - DEY*Y - EPAIR*SWFDY*CYGRP
               VIR(3)      = VIR(3) - DEZ*Z - EPAIR*SWFDZ*CZGRP
            END IF
  210    CONTINUE
  200 CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMCHGNUCMFLD
!>
!> @brief    QM nuc - <MM> charge force
!>
!> @author   Hui Li
!>           - Mar 2012
!>
!> @details  forces on QM nuc charge due to MM charges at 
!>           averaged coordinates
!>
      SUBROUTINE QMMMCHGNUCMFLD(CORDMN,DETMP,CHARG,MERGE,INTLST,
     *                          CHGIMG,CRDIMG,DIPIMG,QADIMG,OCTIMG)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00, ZERO=0.0D+00)
      PARAMETER (FIVE=5.0D+00, SIX=6.0D+00)
      PARAMETER (PT5=0.5D+00, ONEPT5=1.5D+00)
      PARAMETER (ONETHIRD=ONE/THREE, ONE5=ONE/FIVE)
C
      DIMENSION QUAD(6),OCT(10)
      DIMENSION CORDMN(3,MEANSIZ,*),CHARG(*),DETMP(3,*),
     *          MERGE(MEANSIZ/MFMERGE,*),INTLST(*),
     *          CHGIMG(*),CRDIMG(3,*),
     *          DIPIMG(3,*),QADIMG(6,*),OCTIMG(10,*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
C     HUI LI, MAR 29, 2012, LINCOLN
C     HUI LI, APR 10TH, 2013, ADD QMIMG-CHARG HERE
C
C     MEANFLD MM CHARGE - QM NUC INTERACTION
C     (FOR MEANFLD, WE ONLY NEED FORCES ON QM ATOMS)
C
      CALL VCLR(DETMP,1,3*MXATM)
      ENUCCH  = ZERO
      IF(IDOCHG.EQ.0) RETURN
C
      NSEG = MEANFLD/MFMERGE
      DO 200 III = L1FFAT, L2FFAT
         KK = III-L1FFAT+1
         IFFAT=INTLST(III)
         QI = CHARG(IFFAT)
         IF(QI.EQ.ZERO) GOTO 200
         DO ISEG = 1, NSEG
         IFMERGE = MERGE(ISEG,III-L1FFAT+1)
         QI = CHARG(IFFAT)*ONEMNFD*IFMERGE
         DO 201 IMFLD = (ISEG-1)*MFMERGE+1, ISEG*MFMERGE, IFMERGE
         CXGRP = CORDMN(1,IMFLD,KK) - QMCX
         CYGRP = CORDMN(2,IMFLD,KK) - QMCY
         CZGRP = CORDMN(3,IMFLD,KK) - QMCZ
         PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
         PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
         PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
         CXGRP = CXGRP - PBCX
         CYGRP = CYGRP - PBCY
         CZGRP = CZGRP - PBCZ
         R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
         IF(R2.GT.SWRBQ2) GOTO 201
         CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
         CX    = CORDMN(1,IMFLD,KK) - PBCX
         CY    = CORDMN(2,IMFLD,KK) - PBCY
         CZ    = CORDMN(3,IMFLD,KK) - PBCZ
         DO 210 JAT=1,NAT
            IF(ZAN(JAT).EQ.ZERO) GOTO 210
            X     = CX - C(1,JAT)
            Y     = CY - C(2,JAT)
            Z     = CZ - C(3,JAT)
            R2    = X*X+Y*Y+Z*Z
            IF(R2.LT.1.0D-10) GOTO 210
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            EPAIR = QI*ZAN(JAT)*ONER
            ENUCCH= ENUCCH + EPAIR*SWF
            DUM   = -EPAIR*ONER2*SWF
            DEX   = DUM*X
            DEY   = DUM*Y
            DEZ   = DUM*Z
            DETMP(1,JAT )  = DETMP(1,JAT )  - DEX
            DETMP(2,JAT )  = DETMP(2,JAT )  - DEY
            DETMP(3,JAT )  = DETMP(3,JAT )  - DEZ
  210    CONTINUE
C        -- HUI LI: TO REMOVE QMIMGCHG-MMCHARG INTERACTION
         IF(MFQMCHG.EQ.1) THEN
            DO 220 JIMGPT=1,NIMGPT
               QJ = CHGIMG(JIMGPT)
               IF(QJ.EQ.ZERO) GOTO 220
               X     = CX - CRDIMG(1,JIMGPT)
               Y     = CY - CRDIMG(2,JIMGPT)
               Z     = CZ - CRDIMG(3,JIMGPT)
               R2    = X*X+Y*Y+Z*Z
               IF(R2.LT.1.0D-10) GOTO 220
               ONER2 = ONE/R2
               ONER  = SQRT(ONER2)
               R     = ONE/ONER
               EPAIR = QI*QJ*ONER
               ENUCCH= ENUCCH - EPAIR*SWF
  220       CONTINUE
         END IF
         IF(MFQMCHG.EQ.10) THEN
            DO 230 JIMGPT=1,NIMGPT
               QJ   = CHGIMG(JIMGPT)
               DIPX = DIPIMG(1,JIMGPT)
               DIPY = DIPIMG(2,JIMGPT)
               DIPZ = DIPIMG(3,JIMGPT)
               XX1  = QADIMG(1,JIMGPT)
               YY1  = QADIMG(2,JIMGPT)
               ZZ1  = QADIMG(3,JIMGPT)
               XY1  = QADIMG(4,JIMGPT)
               XZ1  = QADIMG(5,JIMGPT)
               YZ1  = QADIMG(6,JIMGPT)
               XXX1 = OCTIMG( 1,JIMGPT) * PT5
               YYY1 = OCTIMG( 2,JIMGPT) * PT5
               ZZZ1 = OCTIMG( 3,JIMGPT) * PT5
               XXY1 = OCTIMG( 4,JIMGPT) * PT5
               XXZ1 = OCTIMG( 5,JIMGPT) * PT5
               XYY1 = OCTIMG( 6,JIMGPT) * PT5
               YYZ1 = OCTIMG( 7,JIMGPT) * PT5
               XZZ1 = OCTIMG( 8,JIMGPT) * PT5
               YZZ1 = OCTIMG( 9,JIMGPT) * PT5
               XYZ1 = OCTIMG(10,JIMGPT) * PT5
C
               DUM     = XX1 + YY1 + ZZ1
               QUAD(1) = PT5 * (THREE * XX1 - DUM)
               QUAD(2) = PT5 * (THREE * YY1 - DUM)
               QUAD(3) = PT5 * (THREE * ZZ1 - DUM)
               QUAD(4) = ONEPT5 * XY1
               QUAD(5) = ONEPT5 * XZ1
               QUAD(6) = ONEPT5 * YZ1
               DUMX    = XXX1 + XYY1 + XZZ1
               DUMY    = XXY1 + YYY1 + YZZ1
               DUMZ    = XXZ1 + YYZ1 + ZZZ1
               OCT(1)  = FIVE * XXX1 - THREE * DUMX
               OCT(2)  = FIVE * YYY1 - THREE * DUMY
               OCT(3)  = FIVE * ZZZ1 - THREE * DUMZ
               OCT(4)  = FIVE * XXY1 - DUMY
               OCT(5)  = FIVE * XXZ1 - DUMZ
               OCT(6)  = FIVE * XYY1 - DUMX
               OCT(7)  = FIVE * YYZ1 - DUMZ
               OCT(8)  = FIVE * XZZ1 - DUMX
               OCT(9)  = FIVE * YZZ1 - DUMY
               OCT(10) = FIVE * XYZ1
C
               X     = CX - CRDIMG(1,JIMGPT)
               Y     = CY - CRDIMG(2,JIMGPT)
               Z     = CZ - CRDIMG(3,JIMGPT)
               XX    = X*X
               YY    = Y*Y
               ZZ    = Z*Z
               R2    = XX+YY+ZZ
C
               IF(R2.LT.1.0D-10) GOTO 230
               R     = SQRT(R2)
               ONER  = ONE/R
               ONER2 = ONER*ONER
               ONER3 = ONER*ONER2
               ONER5 = ONER2*ONER3
               ONER7 = ONER2*ONER5
               XY    = X*Y
               XZ    = X*Z
               YZ    = Y*Z
               XXX   = XX*X
               YYY   = YY*Y
               ZZZ   = ZZ*Z
               XXY   = XX*Y
               XXZ   = XX*Z
               XYY   = XY*Y
               YYZ   = YY*Z
               XZZ   = XZ*Z
               YZZ   = YZ*Z
               XYZ   = XY*Z
               RRX   = R2*X
               RRY   = R2*Y
               RRZ   = R2*Z
               CFXX  = THREE*XX-R2
               CFYY  = THREE*YY-R2
               CFZZ  = THREE*ZZ-R2
               CFXY  = THREE*XY
               CFXZ  = THREE*XZ
               CFYZ  = THREE*YZ
               CFXXX = FIVE*XXX-THREE*RRX
               CFYYY = FIVE*YYY-THREE*RRY
               CFZZZ = FIVE*ZZZ-THREE*RRZ
               CFXXY = FIVE*XXY-RRY
               CFXXZ = FIVE*XXZ-RRZ
               CFXYY = FIVE*XYY-RRX
               CFYYZ = FIVE*YYZ-RRZ
               CFXZZ = FIVE*XZZ-RRX
               CFYZZ = FIVE*YZZ-RRY
               CFXYZ = FIVE*XYZ
C
               RMU2  = X*DIPX+Y*DIPY+Z*DIPZ
               EPAIR = QI*QJ*ONER
     *               + QI*RMU2*ONER3
     *               + QI*(QUAD(1)*CFXX       +
     *                     QUAD(2)*CFYY       +
     *                     QUAD(3)*CFZZ       +
     *                     TWO*(QUAD(4)*CFXY +
     *                          QUAD(5)*CFXZ +
     *                          QUAD(6)*CFYZ) )*ONER5*ONETHIRD
     *               + QI*(       OCT(1)*CFXXX +
     *                            OCT(2)*CFYYY +
     *                            OCT(3)*CFZZZ +
     *                     THREE*(OCT(4)*CFXXY +
     *                            OCT(5)*CFXXZ +
     *                            OCT(6)*CFXYY +
     *                            OCT(7)*CFYYZ +
     *                            OCT(8)*CFXZZ +
     *                            OCT(9)*CFYZZ  ) +
     *                        SIX*OCT(10)*CFXYZ      )*ONER7*ONE5
               ENUCCH= ENUCCH - EPAIR*SWF
  230       CONTINUE
         END IF
C
  201 CONTINUE
      ENDDO
  200 CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMIMGCHG
!>   
!> @brief    QM image charges - MM charge interaction
!>   
!> @author   Fengchao Cui
!>           - Mar 2012
!>   
!> @details  both energy and forces are calculated
!>
      SUBROUTINE QMMMIMGCHG(CORD,FFGRD,CHARG,NONLSTQ,CRDIMG,CHGIMG,
     *                      CRDIMB,CHGIMB,DIPIMG,QADIMG,OCTIMG,
     *                      DIPIMB,QADIMB,OCTIMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),
     *          NONLSTQ(*),CRDIMG(3,*),CHGIMG(*),CRDIMB(3,*),CHGIMB(*)
C
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     FENGCHAO CUI, MAR 2012, LINCOLN
C     HUI LI, APR 17, 2013, ADD FIXSOL SURFACE CHARGE
C
C     MM CHARGE - QM IMAGE CHARGE INTERACTION
C
      ENIMGCH = ZERO  
      SOL1IM  = ZERO  
      SOL2IM  = ZERO  
      IF(IDOCHG.EQ.0) RETURN
C
C     - USE ANOTHER ROUTINE FOR MFQMCHG=10
      IF(MFQMCHG.EQ.10) THEN
         CALL QMMMMULCHG(CORD,FFGRD,CHARG,NONLSTQ,CRDIMG,CHGIMG,
     *                   CRDIMB,CHGIMB,DIPIMG,QADIMG,OCTIMG,
     *                   DIPIMB,QADIMB,OCTIMB)
         RETURN
      END IF
C
      SIGN = ONE
      DWT1 = ZERO
      DWT2 = ZERO
      IF(IFEPTOP.GT.0.AND.IDOPOL.EQ.0) THEN
         SIGN = ONE - WSIMUL
         DWT1 = ONE - WPERT1
         DWT2 = ONE - WPERT2
      END IF
C
      IPCOUNT = ME - 1
      DO 200 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         QI = CHARG(IFFAT)
         IF(QI.EQ.ZERO) GOTO 200
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         DO 210 JIMGPT=1,NIMGPT
            QJ = CHGIMG(JIMGPT)
            IF(QJ.EQ.ZERO) GOTO 210
            X     = CORD(1,IFFAT) - CRDIMG(1,JIMGPT)
            Y     = CORD(2,IFFAT) - CRDIMG(2,JIMGPT)
            Z     = CORD(3,IFFAT) - CRDIMG(3,JIMGPT)
            PBCX  = XBOX*ANINT(X*ONEXBOX)
            PBCY  = YBOX*ANINT(Y*ONEYBOX)
            PBCZ  = ZBOX*ANINT(Z*ONEZBOX)
            X     = X - PBCX
            Y     = Y - PBCY
            Z     = Z - PBCZ
            R2    = X*X+Y*Y+Z*Z
            IF(R2.GT.SWRB2) GOTO 210
            IF(R2.LT.1.0D-10) GOTO 210
            R     = SQRT(R2)
            ONER  = ONE/R
            CALL SHIFT(R2,R,ONER,X,Y,Z)
            ONER2 = ONER*ONER
            EPAIR = QI*QJ*ONER*SIGN
            ENIMGCH= ENIMGCH + EPAIR*SWF
            EDUMW = QI*QJ*ONER
            EDUMW1= EDUMW*DWT1
            EDUMW2= EDUMW*DWT2
            EDUM  = EPAIR
            IF(IFEPTOP.GT.0.AND.IDOPOL.EQ.0) THEN
               SOL1IM= SOL1IM + (EDUMW1 - EDUM)*SWF
               SOL2IM= SOL2IM + (EDUMW2 - EDUM)*SWF
            END IF
            DUM   = -EPAIR*ONER2*SWF
            DEX   = DUM*X
            DEY   = DUM*Y
            DEZ   = DUM*Z
            FFGRD(1,IFFAT) = FFGRD(1,IFFAT) + DEX
            FFGRD(2,IFFAT) = FFGRD(2,IFFAT) + DEY
            FFGRD(3,IFFAT) = FFGRD(3,IFFAT) + DEZ
            FFGRD(1,IFFAT) = FFGRD(1,IFFAT) + EPAIR*SWFDX
            FFGRD(2,IFFAT) = FFGRD(2,IFFAT) + EPAIR*SWFDY
            FFGRD(3,IFFAT) = FFGRD(3,IFFAT) + EPAIR*SWFDZ
            VIR(1)         = VIR(1) + DEX*X + EPAIR*SWFDX*X
            VIR(2)         = VIR(2) + DEY*Y + EPAIR*SWFDY*Y
            VIR(3)         = VIR(3) + DEZ*Z + EPAIR*SWFDZ*Z
            IYES = 0
            DO KFIX=1,NFIXMM
               IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
            ENDDO
            IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
               VIR(1)      = VIR(1) - DEX*X - EPAIR*SWFDX*X
               VIR(2)      = VIR(2) - DEY*Y - EPAIR*SWFDY*Y
               VIR(3)      = VIR(3) - DEZ*Z - EPAIR*SWFDZ*Z
            END IF
  210    CONTINUE
  200 CONTINUE
C
      IF(IFEPTOP.GT.0.AND.IDOPOL.EQ.0) THEN
         SIGN = WSIMUL
         DWT1 = WPERT1
         DWT2 = WPERT2
         IPCOUNT = ME - 1
         DO 300 IIQ = 1, NTODOQ
            IFFAT = NONLSTQ(IIQ)
            QI = CHARG(IFFAT)
            IF(QI.EQ.ZERO) GOTO 300
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 300
            END IF
            DO 310 JIMGPT=1,NIMBPT
               QJ = CHGIMB(JIMGPT)
               IF(QJ.EQ.ZERO) GOTO 310
               X     = CORD(1,IFFAT) - CRDIMB(1,JIMGPT)
               Y     = CORD(2,IFFAT) - CRDIMB(2,JIMGPT)
               Z     = CORD(3,IFFAT) - CRDIMB(3,JIMGPT)
               PBCX  = XBOX*ANINT(X*ONEXBOX)
               PBCY  = YBOX*ANINT(Y*ONEYBOX)
               PBCZ  = ZBOX*ANINT(Z*ONEZBOX)
               X     = X - PBCX
               Y     = Y - PBCY
               Z     = Z - PBCZ
               R2    = X*X+Y*Y+Z*Z
               IF(R2.GT.SWRB2) GOTO 310
               IF(R2.LT.1.0D-10) GOTO 310
               R     = SQRT(R2)
               ONER  = ONE/R
               CALL SHIFT(R2,R,ONER,X,Y,Z)
               ONER2 = ONER*ONER
               EPAIR = QI*QJ*ONER*SIGN
               ENIMGCH= ENIMGCH + EPAIR*SWF
               EDUMW = QI*QJ*ONER
               EDUMW1= EDUMW*DWT1
               EDUMW2= EDUMW*DWT2
               EDUM  = EPAIR
               SOL1IM= SOL1IM + (EDUMW1 - EDUM)*SWF
               SOL2IM= SOL2IM + (EDUMW2 - EDUM)*SWF
               DUM   = -EPAIR*ONER2*SWF
               DEX   = DUM*X
               DEY   = DUM*Y
               DEZ   = DUM*Z
               FFGRD(1,IFFAT) = FFGRD(1,IFFAT) + DEX
               FFGRD(2,IFFAT) = FFGRD(2,IFFAT) + DEY
               FFGRD(3,IFFAT) = FFGRD(3,IFFAT) + DEZ
               FFGRD(1,IFFAT) = FFGRD(1,IFFAT) + EPAIR*SWFDX
               FFGRD(2,IFFAT) = FFGRD(2,IFFAT) + EPAIR*SWFDY
               FFGRD(3,IFFAT) = FFGRD(3,IFFAT) + EPAIR*SWFDZ
               VIR(1)         = VIR(1) + DEX*X + EPAIR*SWFDX*X
               VIR(2)         = VIR(2) + DEY*Y + EPAIR*SWFDY*Y
               VIR(3)         = VIR(3) + DEZ*Z + EPAIR*SWFDZ*Z
               IYES = 0
               DO KFIX=1,NFIXMM
                  IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
               ENDDO
               IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
                  VIR(1)      = VIR(1) - DEX*X - EPAIR*SWFDX*X
                  VIR(2)      = VIR(2) - DEY*Y - EPAIR*SWFDY*Y
                  VIR(3)      = VIR(3) - DEZ*Z - EPAIR*SWFDZ*Z
               END IF
  310       CONTINUE
  300    CONTINUE
      END IF
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMREPINT
      SUBROUTINE QMMMREPINT(QQ,CORD,CLPR,ZLPR,NLPR,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ,NORM,DOUBLE
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      DIMENSION QQ(*),CORD(3,*),CLPR(4,*),ZLPR(4,*),NLPR(*),
     *          NONLSTQ(*)
C
      DIMENSION RINT(100)
      DIMENSION DIJ(100),XIN(432),YIN(432),ZIN(432)
      DIMENSION GIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA RLN10 /2.30258D+00/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     --- CHARGE-REPULSIVE POTENTIAL INTEGRALS FOR POWERS 0 AND -1 OF R.
C
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      IPCOUNT = ME - 1
C
C     ----- ISHELL
C
      DO 600 II = 1,NSHELL
      IAT= KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 580 JJ = 1,II
      IF (GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 580
      END IF
      JAT= KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      IANDJ = II .EQ. JJ
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 50 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      IF (IANDJ) MAX = I
      DO 50 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
  50  CONTINUE
      DO 60 I=1,IJ
  60  RINT(I) = ZERO
C
C     ----- I PRIMITIVE
C
      JGMAX = J2
      DO 520 IG = I1,I2
      AI  = EX(IG)
      ARRI= AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
      CFI = CF(IG)
C
C     ----- J PRIMITIVE
C
      IF (IANDJ) JGMAX = IG
      DO 500 JG = J1,JGMAX
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GOTO 500
      FAC =  EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      DOUBLE=IANDJ.AND.IG.NE.JG
      MAX = MAXJ
      NN = 0
      DO 170 I=MINI,MAXI
      GOTO (70,80,110,110,90,110,110,100,110,110,
     *       102,110,110,104,110,110,110,110,110,106),I
   70 DUM1=CSI*FAC
      GOTO 110
   80 DUM1=CPI*FAC
      GOTO 110
   90 DUM1=CDI*FAC
      GOTO 110
  100 IF(NORM) DUM1=DUM1*SQRT3
      GOTO 110
  102 DUM1=CFI*FAC
      GOTO 110
  104 IF(NORM) DUM1=DUM1*SQRT5
      GOTO 110
  106 IF(NORM) DUM1=DUM1*SQRT3
  110 IF(IANDJ) MAX=I
      DO 170 J=MINJ,MAX
      GOTO (125,130,160,160,140,160,160,150,160,160,
     1       152,160,160,154,160,160,160,160,160,156),J
  125 DUM2=DUM1*CSJ
      IF(.NOT.DOUBLE) GOTO 160
      IF(I.GT.1) GOTO 126
      DUM2=DUM2+DUM2
      GOTO 160
  126 DUM2=DUM2+CSI*CPJ*FAC
      GOTO 160
  130 DUM2=DUM1*CPJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GOTO 160
  140 DUM2=DUM1*CDJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GOTO 160
  150 IF(NORM) DUM2=DUM2*SQRT3
      GOTO 160
  152 DUM2=DUM1*CFJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GOTO 160
  154 IF(NORM) DUM2=DUM2*SQRT5
      GOTO 160
  156 IF(NORM) DUM2=DUM2*SQRT3
  160 NN=NN+1
  170 DIJ(NN)=DUM2
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      DO 481 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
      IF((CLPR(1,IFFAT)+CLPR(2,IFFAT)+
     *    CLPR(3,IFFAT)+CLPR(4,IFFAT)).LT.1.0D-06) GOTO 481
      CXGRP = CORD(1,IFFAT) - QMCX
      CYGRP = CORD(2,IFFAT) - QMCY
      CZGRP = CORD(3,IFFAT) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
      PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
      PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.SWRBQ2) GOTO 481
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
      PCSQ = (AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2
      DO 479 LTERM=1,4
      ALFA = ZLPR(LTERM,IFFAT)
      BETA = CLPR(LTERM,IFFAT)
      IF(BETA.EQ.ZERO) GOTO 479
      PREI = EXP(-AA*ALFA*PCSQ/(AA+ALFA))
      IF(NLPR(IFFAT).EQ.2) THEN
       TT = ONE/(AA+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+ALFA*CX)*TT
       Y0 = (AAY+ALFA*CY)*TT
       Z0 = (AAZ+ALFA*CZ)*TT
       IN = -4
       DO 206 I = 1,LIT
       IN = IN+4
       NI = I
       DO 206 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT*T
       YIN(JN   ) = YINT*T
       ZIN(JN   ) = ZINT*T
  206  CONTINUE
       DO 266 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       RINT(I)=RINT(I)+DIJ(I)*PREI*BETA*XIN(NX)*YIN(NY)*ZIN(NZ)*SWF
 266   CONTINUE
      ELSE
C      ONE OVER R.
       DUM = PI212/(AA+ALFA)
       DO 385 I = 1,IJ
       GIJ(I) = DIJ(I)*DUM
  385  CONTINUE
       XX=AA*AA*PCSQ/(AA+ALFA)
       IF(NROOTS .LE. 3) CALL RT123
       IF(NROOTS .EQ. 4) CALL ROOT4
       IF(NROOTS.EQ.5) CALL ROOT5
       IF(NROOTS.EQ.6) CALL ROOT6
       IF(NROOTS.GE.7) THEN
          IF (MASWRK) WRITE(IW,9008)
          CALL ABRT
       END IF
       MM = 0
       DO 425 K = 1,NROOTS
       UU = (ALFA+AA)*U(K)
       WW = W(K)
       TT = ONE/(AA+UU+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+(UU+ALFA)*CX)*TT
       Y0 = (AAY+(UU+ALFA)*CY)*TT
       Z0 = (AAZ+(UU+ALFA)*CZ)*TT
       IN = -4+MM
       DO 405 I = 1,LIT
       IN = IN+4
       NI = I
       DO 405 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT
       YIN(JN   ) = YINT
       ZIN(JN   ) = ZINT*WW
  405  CONTINUE
  425  MM = MM+16
       DO 465 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       DUM = ZERO
       MM    = 0
       DO 445 K = 1,NROOTS
       DUM= DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
  445  MM  = MM+16
       RINT(I)=RINT(I)+GIJ(I)*PREI*BETA*DUM*SWF
 465   CONTINUE
      END IF
 479  CONTINUE
 481  CONTINUE
 500  CONTINUE
 520  CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
C     ----- SET QQ MATRIX
C
      MAX=MAXJ
      NN=0
      DO 550 I=MINI,MAXI
      LI=LOCI+I
      IN = (LI*(LI-1))/2
      IF(IANDJ) MAX=I
      DO 550 J=MINJ,MAX
      LJ=LOCJ+J
      JN=LJ+IN
      NN=NN+1
      QQ(JN)=QQ(JN) + RINT(NN)
  550 CONTINUE
  580 CONTINUE
  600 CONTINUE
C
      RETURN
C
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN REPINT.  CALL A PROGRAMMER/QUANTUM CHEMIST.')
      END
C*MODULE QUANPO  *DECK QMMMREPFMMSWF
!>
!> @brief    QM electron -MM ex-rep interaction energy
!>
!> @author   Hui Li
!>           - Jan 2011
!>
!> @details  This energy is scaled by SWF to produce force
!>
      SUBROUTINE QMMMREPFMMSWF(DM,CORD,CLPR,ZLPR,NLPR,FFGRD,
     *                         NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL NORM
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      DIMENSION DM(*),CORD(3,*),FFGRD(3,*),CLPR(4,*),ZLPR(4,*),NLPR(*),
     *          NONLSTQ(*)
C
      DIMENSION DIJ(100),XIN(432),YIN(432),ZIN(432)
      DIMENSION GIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA RLN10 /2.30258D+00/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     ---CHARGE-REPULSIVE POTENTIAL INTEGRALS FOR POWERS 0 AND -1 OF R.
C
      NNQ = NTODOQ
C
      CALL VALFM(LOADFM)
      LSWF    = LOADFM + 1
      LAST    = LSWF   + 3*100*NNQ
      NEED    = LAST   - LOADFM
      CALL GETFM(NEED)
      CALL VCLR(X(LSWF),1,3*100*NNQ)
C
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      IPCOUNT = ME - 1
C
C     ----- ISHELL
C
      DO 600 II = 1,NSHELL
      IAT= KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 580 JJ = 1,NSHELL
      IF (GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 580
      END IF
      JAT= KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 50 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 50 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
  50  CONTINUE
      CALL VCLR(X(LSWF),1,3*100*NNQ)
C
C     ----- I PRIMITIVE
C
      DO 520 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
      CFI = CF(IG)
C
C     ----- J PRIMITIVE
C
      DO 500 JG = J1,J2
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GOTO 500
      FAC =  EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      MAX = MAXJ
      NN = 0
      DO 170 I=MINI,MAXI
      GOTO (70,80,110,110,90,110,110,100,110,110,
     *       102,110,110,104,110,110,110,110,110,106),I
   70 DUM1=CSI*FAC
      GOTO 110
   80 DUM1=CPI*FAC
      GOTO 110
   90 DUM1=CDI*FAC
      GOTO 110
  100 IF(NORM) DUM1=DUM1*SQRT3
      GOTO 110
  102 DUM1=CFI*FAC
      GOTO 110
  104 IF(NORM) DUM1=DUM1*SQRT5
      GOTO 110
  106 IF(NORM) DUM1=DUM1*SQRT3
  110 CONTINUE
      DO 170 J=MINJ,MAX
      GOTO (125,130,160,160,140,160,160,150,160,160,
     *       152,160,160,154,160,160,160,160,160,156),J
  125 DUM2=DUM1*CSJ
      GOTO 160
  130 DUM2=DUM1*CPJ
      GOTO 160
  140 DUM2=DUM1*CDJ
      GOTO 160
  150 IF(NORM) DUM2=DUM2*SQRT3
      GOTO 160
  152 DUM2=DUM1*CFJ
      GOTO 160
  154 IF(NORM) DUM2=DUM2*SQRT5
      GOTO 160
  156 IF(NORM) DUM2=DUM2*SQRT3
  160 NN=NN+1
  170 DIJ(NN)=DUM2
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      DO 481 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
      IF((CLPR(1,IFFAT)+CLPR(2,IFFAT)+
     *    CLPR(3,IFFAT)+CLPR(4,IFFAT)).LT.1.0D-06) GOTO 481
      CXGRP = CORD(1,IFFAT) - QMCX
      CYGRP = CORD(2,IFFAT) - QMCY
      CZGRP = CORD(3,IFFAT) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
      PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
      PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.SWRBQ2) GOTO 481
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
      PCSQ = (AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2
      DO 479 LTERM=1,4
      ALFA = ZLPR(LTERM,IFFAT)
      BETA = CLPR(LTERM,IFFAT)
      IF(BETA.EQ.ZERO) GOTO 479
      PREI = EXP(-AA*ALFA*PCSQ/(AA+ALFA))
      IF(NLPR(IFFAT).EQ.2) THEN
       TT = ONE/(AA+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+ALFA*CX)*TT
       Y0 = (AAY+ALFA*CY)*TT
       Z0 = (AAZ+ALFA*CZ)*TT
       IN = -4
       DO 206 I = 1,LIT
       IN = IN+4
       NI = I
       DO 206 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT*T
       YIN(JN   ) = YINT*T
       ZIN(JN   ) = ZINT*T
  206  CONTINUE
       DO 266 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       DUMDIJ= DIJ(I)*PREI*BETA*XIN(NX)*YIN(NY)*ZIN(NZ)
C      RINT(I)=RINT(I)+DUMDIJ*SWF
       X(LSWF+(IIQ-1)*3*100+(I-1)*3  )=
     * X(LSWF+(IIQ-1)*3*100+(I-1)*3  )+DUMDIJ*SWFDX
       X(LSWF+(IIQ-1)*3*100+(I-1)*3+1)=
     * X(LSWF+(IIQ-1)*3*100+(I-1)*3+1)+DUMDIJ*SWFDY
       X(LSWF+(IIQ-1)*3*100+(I-1)*3+2)=
     * X(LSWF+(IIQ-1)*3*100+(I-1)*3+2)+DUMDIJ*SWFDZ
 266   CONTINUE
      ELSE
C      ONE OVER R.
       DUM = PI212/(AA+ALFA)
       DO 385 I = 1,IJ
       GIJ(I) = DIJ(I)*DUM
  385  CONTINUE
       XX=AA*AA*PCSQ/(AA+ALFA)
       IF(NROOTS .LE. 3) CALL RT123
       IF(NROOTS .EQ. 4) CALL ROOT4
       IF(NROOTS.EQ.5) CALL ROOT5
       IF(NROOTS.EQ.6) CALL ROOT6
       IF(NROOTS.GE.7) THEN
        CALL ABRT
       END IF
       MM = 0
       DO 425 K = 1,NROOTS
       UU = (ALFA+AA)*U(K)
       WW = W(K)
       TT = ONE/(AA+UU+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+(UU+ALFA)*CX)*TT
       Y0 = (AAY+(UU+ALFA)*CY)*TT
       Z0 = (AAZ+(UU+ALFA)*CZ)*TT
       IN = -4+MM
       DO 405 I = 1,LIT
       IN = IN+4
       NI = I
       DO 405 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT
       YIN(JN   ) = YINT
       ZIN(JN   ) = ZINT*WW
  405  CONTINUE
  425  MM = MM+16
       DO 465 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       DUM = ZERO
       MM    = 0
       DO 445 K = 1,NROOTS
       DUM= DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
  445  MM  = MM+16
       DUMGIJ = GIJ(I)*PREI*BETA*DUM
C      RINT(I)=RINT(I)+DUMGIJ*SWF
       X(LSWF+(IIQ-1)*3*100+(I-1)*3  )=
     * X(LSWF+(IIQ-1)*3*100+(I-1)*3  )+DUMGIJ*SWFDX
       X(LSWF+(IIQ-1)*3*100+(I-1)*3+1)=
     * X(LSWF+(IIQ-1)*3*100+(I-1)*3+1)+DUMGIJ*SWFDY
       X(LSWF+(IIQ-1)*3*100+(I-1)*3+2)=
     * X(LSWF+(IIQ-1)*3*100+(I-1)*3+2)+DUMGIJ*SWFDZ
 465   CONTINUE
      END IF
 479  CONTINUE
 481  CONTINUE
 500  CONTINUE
 520  CONTINUE
C
      MAX = MAXJ     
      KK = 0            
      DO 550 I = MINI,MAXI 
         LI = LOCI+I    
         DO 560 J = MINJ,MAX
            KK = KK + 1 
            LJ = LOCJ+J 
            IF(LI-LJ) 920,940,940
  920       ID = LJ
            JD = LI
            GOTO 960
  940       ID = LI
            JD = LJ
  960       NN = (ID*(ID-1))/2+JD
            DUM = DM(NN)
            DO IIQ = 1, NTODOQ
               IFFAT = NONLSTQ(IIQ)
C
               CXGRP = CORD(1,IFFAT) - QMCX
               CYGRP = CORD(2,IFFAT) - QMCY
               CZGRP = CORD(3,IFFAT) - QMCZ
               PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
               PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
               PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
               CXGRP = CXGRP - PBCX
               CYGRP = CYGRP - PBCY
               CZGRP = CZGRP - PBCZ
C
               FFGRD(1,IFFAT)=FFGRD(1,IFFAT)+
     *            DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3  )
               FFGRD(2,IFFAT)=FFGRD(2,IFFAT)+
     *            DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3+1)
               FFGRD(3,IFFAT)=FFGRD(3,IFFAT)+
     *            DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3+2)
               VIR(1)=VIR(1)+
     *                DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3  )*CXGRP
               VIR(2)=VIR(2)+
     *                DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3+1)*CYGRP
               VIR(3)=VIR(3)+
     *                DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3+2)*CZGRP
               IYES = 0
               DO KFIX=1,NFIXMM
                  IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
               ENDDO
               IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
                  VIR(1)=VIR(1)-
     *                DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3  )*CXGRP
                  VIR(2)=VIR(2)-
     *                DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3+1)*CYGRP
                  VIR(3)=VIR(3)-
     *                DUM*X(LSWF+(IIQ-1)*3*100+(KK-1)*3+2)*CZGRP
               END IF
            ENDDO
  560    CONTINUE
  550 CONTINUE
  580 CONTINUE
  600 CONTINUE
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMREPFMM
!>   
!> @brief    QM electron - MM ex-rep force
!>   
!> @author   Hui Li   
!>           - Jan 2011
!>    
!> @details  forces on MM ex-rep points due to QM electrons
!>
      SUBROUTINE QMMMREPFMM(DM,CHGINT,CORD,CLPR,ZLPR,NLPR,FFGRD,
     *                      NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      DIMENSION DM(*),CHGINT(*),CORD(3,*),CLPR(4,*),ZLPR(4,*),
     *          NLPR(*),FFGRD(3,*),NONLSTQ(*)
C
      DIMENSION DIJ(100),XIN(432),YIN(432),ZIN(432)
      DIMENSION GIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA ZERO,ONE,TWO/0.0D+00,1.0D+00,2.0D+00/
      DATA RLN10 /2.30258D+00/
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     ---CHARGE-REPULSIVE POTENTIAL INTEGRALS FOR POWERS 0 AND -1 OF R.
C
      CALL QMMMREPFMMSWF(DM,CORD,CLPR,ZLPR,NLPR,FFGRD,NONLSTQ)
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      DO 100 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
      IF((CLPR(1,IFFAT)+CLPR(2,IFFAT)+
     *    CLPR(3,IFFAT)+CLPR(4,IFFAT)).LT.1.0D-06) GOTO 100
C
      CXGRP = CORD(1,IFFAT) - QMCX
      CYGRP = CORD(2,IFFAT) - QMCY
      CZGRP = CORD(3,IFFAT) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
      PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
      PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.SWRBQ2) GOTO 100
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
C     ----- ISHELL
C
      DO 600 II = 1,NSHELL
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GOTO 600
      END IF
      IAT= KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 580 JJ = 1,NSHELL
      IF((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 580
      END IF
      JAT= KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 50 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 50 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
  50  CONTINUE
      CALL VCLR(CHGINT,1,3*IJ*4)
C
C     ----- I PRIMITIVE
C
      JGMAX = J2
      DO 520 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
      CFI = CF(IG)
C
C     ----- J PRIMITIVE
C
      DO 500 JG = J1,JGMAX
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GOTO 500
      FAC =  EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      MAX = MAXJ
      NN = 0
      DUM1=ZERO
      DUM2=DUM1
      DO 170 I=MINI,MAXI
      GOTO (70,80,110,110,90,110,110,95,110,110,
     1       102,110,110,104,110,110,110,110,110,108),I
  70  DUM1=CSI*FAC
      GOTO 110
  80  DUM1=CPI*FAC
      GOTO 110
  90  DUM1=CDI*FAC
      GOTO 110
  95  IF(NORM) DUM1=DUM1*SQRT3
      GOTO 110
 102  DUM1=CFI*FAC
      GOTO 110
 104  DUM1 = DUM1 *SQRT5
      GOTO 110
 108  DUM1 = DUM1 * SQRT3
 110  CONTINUE
      DO 170 J=MINJ,MAX
      GOTO (125,130,160,160,140,160,160,150,160,160,
     1       152,160,160,154,160,160,160,160,160,156),J
  125 DUM2=DUM1*CSJ
      GOTO 160
  130 DUM2=DUM1*CPJ
      GOTO 160
  140 DUM2=DUM1*CDJ
      GOTO 160
  150 IF(NORM) DUM2=DUM2*SQRT3
      GOTO 160
  152 DUM2 = DUM1 * CFJ
      GOTO 160
  154 DUM2 = DUM2 *SQRT5
      GOTO 160
  156 DUM2 = DUM2 * SQRT3
  160 NN=NN+1
  170 DIJ(NN)=DUM2
C
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      ICC=1
C
      PCSQ = (AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2
      DO 480 LTERM=1,4
      ALFA = ZLPR(LTERM,IFFAT)
      BETA = CLPR(LTERM,IFFAT)
      IF(BETA.EQ.ZERO) GOTO 480
      PREI = EXP(-AA*ALFA*PCSQ/(AA+ALFA))
      IF(NLPR(IFFAT).EQ.2) THEN
C      R TO THE ZERO POWER.
       TT = ONE/(AA+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+ALFA*CX)*TT
       Y0 = (AAY+ALFA*CY)*TT
       Z0 = (AAZ+ALFA*CZ)*TT
       IN = -4
       DO 206 I = 1,LIT
       IN = IN+4
       NI = I
       DO 206 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT*T
       YIN(JN   ) = YINT*T
       ZIN(JN   ) = ZINT*T
      CALL POLXYZ
      XIN(JN+125) = XINT*T
      YIN(JN+125) = YINT*T
      ZIN(JN+125) = ZINT*T
  206  CONTINUE
       DO 266 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
      DUMX= XIN(NX+125)*YIN(NY    )*ZIN(NZ    )
      DUMY= XIN(NX    )*YIN(NY+125)*ZIN(NZ    )
      DUMZ= XIN(NX    )*YIN(NY    )*ZIN(NZ+125)
      DUM = TWO*DIJ(I)*ALFA*PREI*BETA*SWF
      CHGINT(ICC  )=CHGINT(ICC  )+DUM*DUMX
      CHGINT(ICC+1)=CHGINT(ICC+1)+DUM*DUMY
      CHGINT(ICC+2)=CHGINT(ICC+2)+DUM*DUMZ
      ICC=ICC+3
 266   CONTINUE
      ELSE
C      ONE OVER R.
       DUM = PI212/(AA+ALFA)
       DO 385 I = 1,IJ
       GIJ(I) = DIJ(I)*DUM*TWO
  385  CONTINUE
       XX=AA*AA*PCSQ/(AA+ALFA)
       IF(NROOTS.LE.3) CALL RT123
       IF(NROOTS.EQ.4) CALL ROOT4
       IF(NROOTS.EQ.5) CALL ROOT5
       IF(NROOTS.EQ.6) CALL ROOT6
       IF(NROOTS.GE.7) THEN
          IF (MASWRK) WRITE(IW,9008)
          CALL ABRT
       END IF
       MM = 0
       DO 425 K = 1,NROOTS
       UU = (ALFA+AA)*U(K)
       WW = W(K)
       WW = WW*(UU+ALFA)
       TT = ONE/(AA+UU+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+(UU+ALFA)*CX)*TT
       Y0 = (AAY+(UU+ALFA)*CY)*TT
       Z0 = (AAZ+(UU+ALFA)*CZ)*TT
       IN = -4+MM
       DO 405 I = 1,LIT
       IN = IN+4
       NI = I
       DO 405 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT
       YIN(JN   ) = YINT
       ZIN(JN   ) = ZINT*WW
      CALL POLXYZ
      XIN(JN+125) = XINT
      YIN(JN+125) = YINT
      ZIN(JN+125) = ZINT*WW
  405  CONTINUE
  425  MM = MM+16
       DO 403 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       MM    = 0
      DUMX = ZERO
      DUMY = ZERO
      DUMZ = ZERO
      DO 402 K = 1,NROOTS
      DUMX= DUMX+XIN(NX+MM+125)*YIN(NY+MM    )*ZIN(NZ+MM    )
      DUMY= DUMY+XIN(NX+MM    )*YIN(NY+MM+125)*ZIN(NZ+MM    )
      DUMZ= DUMZ+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM+125)
  402 MM  = MM+16
      DUM = GIJ(I)*PREI*BETA*SWF
      CHGINT(ICC  )=CHGINT(ICC  )+DUM*DUMX
      CHGINT(ICC+1)=CHGINT(ICC+1)+DUM*DUMY
      CHGINT(ICC+2)=CHGINT(ICC+2)+DUM*DUMZ
      ICC=ICC+3
 403  CONTINUE
      END IF
C
 480  CONTINUE
 500  CONTINUE
 520  CONTINUE
C
C     ----- SET GRADIENT MATRIX
C
      MAX=MAXJ
      NN=0
      ICC=1
C
      DO 551 LTERM =1,4
      BETA = CLPR(LTERM,IFFAT)
      IF(BETA.EQ.ZERO) GOTO 551
      DO 550 I=MINI,MAXI
      LI=LOCI+I
      DO 550 J=MINJ,MAX
      LJ=LOCJ+J
      IF (LI-LJ) 920,940,940
  920 ID = LJ
      JD = LI
      GOTO 960
  940 ID = LI
      JD = LJ
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*CHGINT(ICC  )
      FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*CHGINT(ICC+1)
      FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*CHGINT(ICC+2)
      VIR(1)        =VIR(1)         + DUM*CHGINT(ICC  )*CX
      VIR(2)        =VIR(2)         + DUM*CHGINT(ICC+1)*CY
      VIR(3)        =VIR(3)         + DUM*CHGINT(ICC+2)*CZ
      IYES = 0
      DO KFIX=1,NFIXMM
         IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
      ENDDO
      IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
         VIR(1)     =VIR(1)         - DUM*CHGINT(ICC  )*CX
         VIR(2)     =VIR(2)         - DUM*CHGINT(ICC+1)*CY
         VIR(3)     =VIR(3)         - DUM*CHGINT(ICC+2)*CZ
      END IF
      ICC=ICC+3
  550 CONTINUE
  551 CONTINUE
  580 CONTINUE
  600 CONTINUE
  100 CONTINUE
C
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN REPINT.  CALL A PROGRAMMER/QUANTUM CHEMIST.')
      END
C*MODULE QUANPO  *DECK QMMMREPFQM
      SUBROUTINE QMMMREPFQM(DM,CORD,CLPR,ZLPR,NLPR,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL ISKIP
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      DIMENSION CORD(3,*),CLPR(4,*),ZLPR(4,*),NLPR(*),
     *          NONLSTQ(*)
C
      COMMON /DSTV  / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,
     *                XJ,YJ,ZJ,NI,NJ,CX,CY,CZ
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
      PARAMETER (RLN10=2.30258D+00)
      PARAMETER (PI212=1.1283791670955D+00)
      PARAMETER (SQRT3=1.73205080756888D+00)
      PARAMETER (SQRT5=2.23606797749979D+00)
C
      DIMENSION DM(*)
      DIMENSION ISKIP(35),INDX(70)
      DIMENSION IX(35),IY(35),IZ(35),JX(20),JY(20),JZ(20)
      DIMENSION IJG(210),IJX(210),IJY(210),IJZ(210)
      DIMENSION XIN(200),YIN(200),ZIN(200),G(210),DIJ(210)
      DIMENSION GIJ(210)
C
      DATA CHECK/8HCHECK   /
      DATA INDX / 1, 2, 3, 4, 5, 6, 7, 8, 9,10,
     1           11,12,13,14,15,16,17,18,19,20,
     2           -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
     3           -0,-0,-0,-0,-0,
     4           -0, 1, 2, 3, 1, 2, 3, 4, 5, 6,
     5            4, 5, 6, 7, 8, 9,10,11,12,13,
     6            7, 8, 9,10,11,12,13,14,15,16,
     7           17,18,19,20,21/
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5,
     2         17, 1, 1,13,13, 5, 1, 5, 1, 9,
     3          9, 1, 9, 5, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5,
     2          1,17, 1, 5, 1,13,13, 1, 5, 9,
     3          1, 9, 5, 9, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5,
     2          1, 1,17, 1, 5, 1, 5,13,13, 1,
     3          9, 9, 5, 5, 9/
C
C     HUI LI, JAN 2011, LINCOLN
C
C
C     INITIALIZATION FOR PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      IF (EXETYP .EQ. CHECK) GOTO 1120
C
C     GRADIENT CONTRIBUTION FROM REPULSIVE POTENTIALS FOR POWERS 0
C     AND -1 OF R.
C
C     ----- ISHELL
C
      DO 1060 II = 1,NSHELL
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GOTO 1060
      END IF
      IAT = KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)+1
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      DO 100 I=1,35
 100  ISKIP(I)=.TRUE.
      DO 260 I=MINI,MAXI
      GOTO (110,140,260,260,180,260,260,260,260,260,
     1       220,260,260,260,260,260,260,260,260,260),I
 110  DO 120 K=2,4
 120  ISKIP(K)=.FALSE.
      GOTO 260
 140  DO 160 K=5,10
 160  ISKIP(K)=.FALSE.
      ISKIP(1)=.FALSE.
      GOTO 260
 180  DO 200 K=2,4
 200  ISKIP(K)=.FALSE.
      DO 210 K=11,20
 210  ISKIP(K)=.FALSE.
      GOTO 260
 220  DO 240 K=5,10
 240  ISKIP(K)=.FALSE.
      DO 250 K=21,35
 250  ISKIP(K)=.FALSE.
 260  CONTINUE
C
C     ----- JSHELL
C
      DO 1040 JJ = 1,NSHELL
        IF((.NOT.NXT) .AND. GOPARR) THEN
           IPCOUNT = IPCOUNT + 1
           IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 1040
        END IF
C
      JAT = KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      N0 = 0
      IF (LIT .GE. 4) N0 = 35
      IJ = 0
      DO 340 I = 1,35
      IF (ISKIP(I)) GOTO 340
      IN = INDX(I+N0)
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 320 J = MINJ,MAXJ
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
      IJG(IJ) = IN+21*(J-MINJ)
  320 CONTINUE
  340 CONTINUE
      DO 360 I = 1,IJ
      N = IJG(I)
  360 G(N) = ZERO
C
C     ----- I PRIMITIVE
C
      DO 840 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      DUM = AI+AI
      CSI = CP(IG)
      CPI = CS(IG)*DUM
      IF (LIT .EQ. 4) CPI = CD(IG)
      CDI = CP(IG)*DUM
      IF (LIT .EQ. 5) CDI = CF(IG)
      CFI = CD(IG)*DUM
      CGI = CF(IG)*DUM
C
C     ----- J PRIMITIVE
C
      DO 820 JG = J1,J2
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GOTO 820
      FAC = EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      NN = 0
      DUM1 = ZERO
      DUM2 = DUM1
      DO 600 I=1,35
      IF(ISKIP(I)) GOTO 600
      GOTO (370,380,420,420,390,420,420,420,420,420,
     1       400,420,420,420,420,420,420,420,420,420,
     2       410,420,420,420,420,420,420,420,420,420,
     3       420,420,420,420,420),I
 370  DUM1=CSI*FAC
      GOTO 420
 380  DUM1=CPI*FAC
      GOTO 420
 390  DUM1=CDI*FAC
      GOTO 420
 400  DUM1=CFI*FAC
      GOTO 420
 410  DUM1 = CGI*FAC
 420  CONTINUE
      DO 580 J=MINJ,MAXJ
      GOTO (430,440,560,560,460,560,560,480,560,560,
     1       500,560,560,520,560,560,560,560,560,540),J
  430 DUM2=DUM1*CSJ
      GOTO 560
  440 DUM2=DUM1*CPJ
      GOTO 560
  460 DUM2=DUM1*CDJ
      GOTO 560
  480 IF(NORM) DUM2=DUM2*SQRT3
      GOTO 560
  500 DUM2 = DUM1 * CFJ
      GOTO 560
  520 DUM2 = DUM2 *SQRT5
      GOTO 560
  540 DUM2 = DUM2 * SQRT3
  560 NN=NN+1
  580 DIJ(NN)=DUM2
  600 CONTINUE
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      DO 781 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
      IF((CLPR(1,IFFAT)+CLPR(2,IFFAT)+
     *    CLPR(3,IFFAT)+CLPR(4,IFFAT)).LT.1.0D-06) GOTO 781
      CXGRP = CORD(1,IFFAT) - QMCX
      CYGRP = CORD(2,IFFAT) - QMCY
      CZGRP = CORD(3,IFFAT) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
      PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
      PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.SWRBQ2) GOTO 781
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
      PCSQ = (AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2
      DO 780 LTERM=1,4
      ALFA = ZLPR(LTERM,IFFAT)
      BETA = CLPR(LTERM,IFFAT)
      IF(BETA.EQ.ZERO) GOTO 780
      PREI = EXP(-AA*ALFA*PCSQ/(AA+ALFA))
      IF(NLPR(IFFAT).EQ.2)THEN
C      R TO THE ZERO POWER.
       TT = ONE/(AA+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+ALFA*CX)*TT
       Y0 = (AAY+ALFA*CY)*TT
       Z0 = (AAZ+ALFA*CZ)*TT
       IN = -4
       DO 606 I = 1,LIT
       IN = IN+4
       NI = I
       DO 606 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL VINT
       XIN(JN   ) = XINT*T
       YIN(JN   ) = YINT*T
       ZIN(JN   ) = ZINT*T
  606  CONTINUE
       DO 666 I = 1,IJ
       N = IJG(I)
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       G(N)=G(N)+DIJ(I)*PREI*BETA*XIN(NX)*YIN(NY)*ZIN(NZ)*SWF
 666   CONTINUE
      ELSE
C      ONE OVER R.
       DUM = PI212/(AA+ALFA)
       DO 685 I = 1,IJ
       GIJ(I) = DIJ(I)*DUM
  685  CONTINUE
       XX=AA*AA*PCSQ/(AA+ALFA)
       IF(NROOTS .LE. 3) CALL RT123
       IF(NROOTS .EQ. 4) CALL ROOT4
       IF(NROOTS.EQ.5) CALL ROOT5
       IF(NROOTS.EQ.6) CALL ROOT6
       IF(NROOTS.GE.7)THEN
          IF (MASWRK) WRITE(IW,9008)
          CALL ABRT
       END IF
       MM = 0
       DO 725 K = 1,NROOTS
       UU = (ALFA+AA)*U(K)
       WW = W(K)
       TT = ONE/(AA+UU+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+(UU+ALFA)*CX)*TT
       Y0 = (AAY+(UU+ALFA)*CY)*TT
       Z0 = (AAZ+(UU+ALFA)*CZ)*TT
       IN = -4+MM
       DO 705 I = 1,LIT
       IN = IN+4
       NI = I
       DO 705 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL VINT
       XIN(JN   ) = XINT
       YIN(JN   ) = YINT
       ZIN(JN   ) = ZINT*WW
  705  CONTINUE
  725  MM = MM+16
       DO 765 I = 1,IJ
       N = IJG(I)
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       DUM = ZERO
       MM    = 0
       DO 745 K = 1,NROOTS
       DUM= DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
  745  MM  = MM+16
       G(N)=G(N)+GIJ(I)*PREI*BETA*DUM*SWF
 765   CONTINUE
      END IF
 780  CONTINUE
 781  CONTINUE
C
C     ----- END OF PRIMITIVE LOOPS -----
C
  820 CONTINUE
  840 CONTINUE
C
C     ----- FORM INTEGRALS OVER DERIVATIVES -----
C
      NN = 0
      N = 1
      DO 900 J = MINJ,MAXJ
      IF (MINI .GT. 1) GOTO 860
      NN = NN+1
      XIN(NN) = G(N+ 1)
      YIN(NN) = G(N+ 2)
      ZIN(NN) = G(N+ 3)
      IF (MAXI .EQ. 1) GOTO 900
  860 IF (MINI .GT. 2) GOTO 880
      NN = NN+1
      XIN(NN) = (G(N+ 4)-G(N ))
      YIN(NN) = G(N+ 7)
      ZIN(NN) = G(N+ 8)
      NN = NN+1
      XIN(NN) = G(N+ 7)
      YIN(NN) = (G(N+ 5)-G(N ))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = G(N+ 9)
      ZIN(NN) = (G(N+ 6)-G(N ))
      IF (MAXI .EQ. 4) GOTO 900
  880 CONTINUE
      IF (MINI .GT. 5) GOTO 890
      NN = NN+1
      XIN(NN) = (G(N+ 3)-G(N )-G(N ))
      YIN(NN) = G(N+ 6)
      ZIN(NN) = G(N+ 7)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = (G(N+ 4)-G(N+ 1)-G(N+ 1))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+10)
      YIN(NN) = G(N+11)
      ZIN(NN) = (G(N+ 5)-G(N+ 2)-G(N+ 2))
      NN = NN+1
      DUM = ONE
      IF (NORM) DUM = SQRT3
      XIN(NN) = DUM*(G(N+ 6)-G(N+ 1))
      YIN(NN) = DUM*(G(N+ 8)-G(N ))
      ZIN(NN) = DUM* G(N+12)
      NN = NN+1
      XIN(NN) = DUM*(G(N+ 7)-G(N+ 2))
      YIN(NN) = DUM* G(N+12)
      ZIN(NN) = DUM*(G(N+10)-G(N ))
      NN = NN+1
      XIN(NN) = DUM* G(N+12)
      YIN(NN) = DUM*(G(N+ 9)-G(N+ 2))
      ZIN(NN) = DUM*(G(N+11)-G(N+ 1))
      IF(MAXI.EQ.10) GOTO 900
 890  CONTINUE
      NN=NN+1
      XIN(NN)=(G(N+ 6)-G(N   )-G(N   )-G(N   ))
      YIN(NN)= G(N+ 9)
      ZIN(NN)= G(N+10)
      NN=NN+1
      XIN(NN)= G(N+11)
      YIN(NN)=(G(N+ 7)-G(N+ 1)-G(N+ 1)-G(N+ 1))
      ZIN(NN)= G(N+12)
      NN=NN+1
      XIN(NN)= G(N+13)
      YIN(NN)= G(N+14)
      ZIN(NN)=(G(N+ 8)-G(N+ 2)-G(N+ 2)-G(N+ 2))
      NN=NN+1
      DUM=ONE
      IF(NORM) DUM=SQRT5
      XIN(NN)=DUM* (G(N+ 9)-G(N+ 3)-G(N+ 3))
      YIN(NN)=DUM* (G(N+15)-G(N  ))
      ZIN(NN)=DUM* G(N+18)
      NN=NN+1
      XIN(NN)=DUM* (G(N+10)-G(N+ 4)-G(N+ 4))
      YIN(NN)=DUM* G(N+18)
      ZIN(NN)=DUM* (G(N+16)-G(N  ))
      NN=NN+1
      XIN(NN)=DUM* (G(N+15)-G(N+ 1))
      YIN(NN)=DUM* (G(N+11)-G(N+ 3)-G(N+ 3))
      ZIN(NN)=DUM*  G(N+19)
      NN=NN+1
      XIN(NN)=DUM* G(N+19)
      YIN(NN)=DUM* (G(N+12)-G(N+ 5)-G(N+ 5))
      ZIN(NN)=DUM* (G(N+17)-G(N+ 1))
      NN=NN+1
      XIN(NN)=DUM* (G(N+16)-G(N+ 2))
      YIN(NN)=DUM*  G(N+20)
      ZIN(NN)=DUM* (G(N+13)-G(N+ 4)-G(N+ 4))
      NN=NN+1
      XIN(NN)=DUM*  G(N+20)
      YIN(NN)=DUM* (G(N+17)-G(N+ 2))
      ZIN(NN)=DUM* (G(N+14)-G(N+ 5)-G(N+ 5))
      NN=NN+1
      IF(NORM) DUM=DUM*SQRT3
      XIN(NN)=DUM* (G(N+18)-G(N+ 5))
      YIN(NN)=DUM* (G(N+19)-G(N+ 4))
      ZIN(NN)=DUM* (G(N+20)-G(N+ 3))
  900 N = N+21
C
C     ----- CALCULATE CONTRIBUTION TO GRADIENT -----
C
      N = 0
      DO 980 J = MINJ,MAXJ
      JN = LOCJ+J
      DO 980 I = MINI,MAXI
      N = N+1
      IN = LOCI+I
      IF (IN-JN) 920,940,940
  920 ID = JN
      JD = IN
      GOTO 960
  940 ID = IN
      JD = JN
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      DUM = DUM+DUM
      DE(1,IAT) = DE(1,IAT)+DUM*XIN(N)
      DE(2,IAT) = DE(2,IAT)+DUM*YIN(N)
      DE(3,IAT) = DE(3,IAT)+DUM*ZIN(N)
  980 CONTINUE
 1040 CONTINUE
 1060 CONTINUE
C
C
 1120 CONTINUE
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN REPINT.  CALL A PROGRAMMER/QUANTUM CHEMIST.')
C
      END
C*MODULE QUANPO  *DECK QMMMPOLFLDINT
      SUBROUTINE QMMMPOLFLDINT(IFFAT,CORD,PEX,PEY,PEZ,
     *                         NUM2)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ,NORM,DOUBLE
C
      PARAMETER (MXATM=2000, MXSH=5000, MXGTOT=20000)
C
      DIMENSION CORD(3,*),PEX(NUM2),PEY(NUM2),PEZ(NUM2)
C
      DIMENSION XIN(128),YIN(128),ZIN(128),PLX(100),PLY(100),PLZ(100)
      DIMENSION DIJ(100),FIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA RLN10 /2.30258D+00/
C
C     HUI LI, MAR 2011, LINCOLN
C
      IF(IDOPOL.EQ.0) RETURN
C
      TOL=RLN10*ITOL
      NORM=NORMF.NE.1.OR.NORMP.NE.1
C
C     -- FIELD INTEGRALS AT MM POL DUE TO QM BASIS FUNC
C
      CALL VCLR(PEX,1,NUM2)
      CALL VCLR(PEY,1,NUM2)
      CALL VCLR(PEZ,1,NUM2)
C
      CXGRP = CORD(1,IFFAT) - QMCX
      CYGRP = CORD(2,IFFAT) - QMCY
      CZGRP = CORD(3,IFFAT) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
      PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
      PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.SWRBQ2) GOTO 9199
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
C     ----- ISHELL
C
      DO 9000 II=1,NSHELL
      I=KATOM(II)
      XI=C(1,I)
      YI=C(2,I)
      ZI=C(3,I)
      I1=KSTART(II)
      I2=I1+KNG(II)-1
      LIT=KTYPE(II)
      MINI=KMIN(II)
      MAXI=KMAX(II)
      LOCI=KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 8000 JJ=1,II
C
      J=KATOM(JJ)
      XJ=C(1,J)
      YJ=C(2,J)
      ZJ=C(3,J)
      J1=KSTART(JJ)
      J2=J1+KNG(JJ)-1
      LJT=KTYPE(JJ)
      MINJ=KMIN(JJ)
      MAXJ=KMAX(JJ)
      LOCJ=KLOC(JJ)-MINJ
      NROOTS=(LIT+LJT+1-2)/2 + 1
      RR=(XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      IANDJ=II.EQ.JJ
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ=0
      MAX=MAXJ
      DO 50 I=MINI,MAXI
      NX=IX(I)
      NY=IY(I)
      NZ=IZ(I)
      IF(IANDJ) MAX=I
      DO 50 J=MINJ,MAX
      IJ=IJ+1
      IJX(IJ)=NX+JX(J)
      IJY(IJ)=NY+JY(J)
      IJZ(IJ)=NZ+JZ(J)
   50 CONTINUE
      DO 60 I=1,IJ
      PLX(I) = ZERO
      PLY(I) = ZERO
  60  PLZ(I) = ZERO
C
C     ----- I PRIMITIVE
C
      JGMAX=J2
      DO 7000 IG=I1,I2
      AI=EX(IG)
      ARRI=AI*RR
      AXI=AI*XI
      AYI=AI*YI
      AZI=AI*ZI
      CSI=CS(IG)
      CPI=CP(IG)
      CDI=CD(IG)
      CFI=CF(IG)
C
C     ----- J PRIMITIVE
C
      IF(IANDJ) JGMAX=IG
      DO 6000 JG=J1,JGMAX
      AJ=EX(JG)
      AA=AI+AJ
      AA1=ONE/AA
      DUM=AJ*ARRI*AA1
      IF(DUM.GT.TOL) GOTO 6000
      FAC=EXP(-DUM)
      CSJ=CS(JG)
      CPJ=CP(JG)
      CDJ=CD(JG)
      CFJ=CF(JG)
      AX=(AXI+AJ*XJ)*AA1
      AY=(AYI+AJ*YJ)*AA1
      AZ=(AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      DOUBLE=IANDJ.AND.IG.NE.JG
      MAX=MAXJ
      NN=0
      DO 310 I=MINI,MAXI
      GOTO ( 70, 80,180,180, 90,180,180,100,180,180,
     *       110,180,180,120,180,180,180,180,180,130),I
   70 DUM1=CSI*FAC
      GOTO 180
   80 DUM1=CPI*FAC
      GOTO 180
   90 DUM1=CDI*FAC
      GOTO 180
  100 IF(NORM) DUM1=DUM1*SQRT3
      GOTO 180
  110 DUM1=CFI*FAC
      GOTO 180
  120 IF(NORM) DUM1=DUM1*SQRT5
      GOTO 180
  130 IF(NORM) DUM1=DUM1*SQRT3
  180 IF(IANDJ) MAX=I
      DO 310 J=MINJ,MAX
      GOTO (190,200,300,300,210,300,300,220,300,300,
     *       230,300,300,240,300,300,300,300,300,250),J
  190 DUM2=DUM1*CSJ
      IF(.NOT.DOUBLE) GOTO 300
      IF(I.GT.1) GOTO 195
      DUM2=DUM2+DUM2
      GOTO 300
  195 DUM2=DUM2+CSI*CPJ*FAC
      GOTO 300
  200 DUM2=DUM1*CPJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GOTO 300
  210 DUM2=DUM1*CDJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GOTO 300
  220 IF(NORM) DUM2=DUM2*SQRT3
      GOTO 300
  230 DUM2=DUM1*CFJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GOTO 300
  240 IF(NORM) DUM2=DUM2*SQRT5
      GOTO 300
  250 IF(NORM) DUM2=DUM2*SQRT3
  300 NN=NN+1
  310 DIJ(NN)=DUM2
C
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
      DUM=PI212*AA1
      DUM=DUM+DUM
      DO 800 I=1,IJ
  800 FIJ(I)=DIJ(I)*DUM
C
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      MM=0
      DO 830 K=1,NROOTS
      UU=AA*U(K)
      WW=W(K)
      WW=WW*UU
      TT=ONE/(AA+UU)
      T=SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
      IN=-4+MM
      DO 820 I=1,LIT
      IN=IN+4
      NI=I
      DO 820 J=1,LJT
      JN=IN+J
      NJ=J
      CALL STVINT
      XIN(JN)=XINT
      YIN(JN)=YINT
      ZIN(JN)=ZINT*WW
      CALL POLXYZ
      XIN(JN+64)=XINT
      YIN(JN+64)=YINT
      ZIN(JN+64)=ZINT*WW
  820 CONTINUE
  830 MM=MM+16
      DO 850 I=1,IJ
      NX=IJX(I)
      NY=IJY(I)
      NZ=IJZ(I)
      DUMX=ZERO
      DUMY=ZERO
      DUMZ=ZERO
      MM=0
      DO 840 K=1,NROOTS
      DUMX=DUMX+XIN(NX+MM+64)*YIN(NY+MM   )*ZIN(NZ+MM   )
      DUMY=DUMY+XIN(NX+MM   )*YIN(NY+MM+64)*ZIN(NZ+MM   )
      DUMZ=DUMZ+XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+64)
  840 MM=MM+16
      DUM=FIJ(I)
      PLX(I) = PLX(I) + DUM*DUMX
      PLY(I) = PLY(I) + DUM*DUMY
      PLZ(I) = PLZ(I) + DUM*DUMZ
  850 CONTINUE
C
 6000 CONTINUE
 7000 CONTINUE
C
C
      MAX=MAXJ
      NN=0
      DO 7500 I=MINI,MAXI
      LI=LOCI+I
      IN = (LI*(LI-1))/2
      IF(IANDJ) MAX=I
      DO 7500 J=MINJ,MAX
      LJ=LOCJ+J
      JN=LJ+IN
      NN=NN+1
      PEX(JN)=PLX(NN)
      PEY(JN)=PLY(NN)
      PEZ(JN)=PLZ(NN)
 7500 CONTINUE
 8000 CONTINUE
 9000 CONTINUE
C
      DO KKK=1,NUM2
         PEX(KKK) = PEX(KKK)*SWF
         PEY(KKK) = PEY(KKK)*SWF
         PEZ(KKK) = PEZ(KKK)*SWF
      ENDDO
C
 9199 CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMPOLFLDNUCMM
!>   
!> @brief    electric field at MM pol sites 
!>   
!> @author   Hui Li   
!>           - Jan 2011
!>    
!> @details  includes only QM nucear charges and MM charges
!>
      SUBROUTINE QMMMPOLFLDNUCMM(CORD,CHARG,POL,FIELD1,
     *                           NONLS1,NONLSTQ,L1213J)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (ONE=1.0D+00, ZERO=0.0D+00)
C
      DIMENSION CORD(3,*),CHARG(*),POL(*),FIELD1(3,*),
     *          NONLS1(2,*),NONLSTQ(*),L1213J(2,*)
C
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0) RETURN
C
C     -- FIELD1: FIELD AT POL DUE TO MM CHARGE --
C
      CALL VCLR(FIELD1,1,3*NFFAT)
C
      DO LL=1,2
      IF(LL.EQ.1) THEN
         NN1  = 1
         NN2  = NTODO
         SIGN = 1.0D+00
      END IF
      IF(LL.EQ.2) THEN
         NN1  = L11213
         NN2  = L21213
         SIGN = -1.0D+00
      END IF
      DO 100 III=NN1, NN2
         IF(LL.EQ.1) THEN
            IFFAT = NONLS1(1,III)
            JFFAT = NONLS1(2,III)
         END IF
         IF(LL.EQ.2) THEN
            IFFAT = L1213J(1,III)
            JFFAT = L1213J(2,III)
         END IF
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 100
         IF(CHARG(IFFAT).EQ.ZERO.AND.  POL(IFFAT).EQ.ZERO) GOTO 100
         IF(CHARG(JFFAT).EQ.ZERO.AND.  POL(JFFAT).EQ.ZERO) GOTO 100
         IF(  POL(IFFAT).EQ.ZERO.AND.  POL(JFFAT).EQ.ZERO) GOTO 100
         IF(CHARG(IFFAT).EQ.ZERO.AND.CHARG(JFFAT).EQ.ZERO) GOTO 100
         QI    = CHARG(IFFAT)
         QJ    = CHARG(JFFAT)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         PBCX  = XBOX * ANINT(X*ONEXBOX)
         PBCY  = YBOX * ANINT(Y*ONEYBOX)
         PBCZ  = ZBOX * ANINT(Z*ONEZBOX)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         IF(R2.GT.SWRB2) GOTO 100
         IF(R2.LT.0.01D+00) GOTO 100
         R     = SQRT(R2)
         ONER  = ONE/R
         IF(IPOLSHF.EQ.1) CALL SHIFT(R2,R,ONER,X,Y,Z)
         IF(IPOLSHF.EQ.0) CALL SWFUNC(R2,X,Y,Z)
C
         ONER2 = ONER*ONER
         ONER3 = ONER2*ONER
         SWF   = SWF*SIGN
         DUMI  = QJ*ONER3*SWF
         DUMJ  = QI*ONER3*SWF
         FIELD1(1,IFFAT)=FIELD1(1,IFFAT)+DUMI*X
         FIELD1(2,IFFAT)=FIELD1(2,IFFAT)+DUMI*Y
         FIELD1(3,IFFAT)=FIELD1(3,IFFAT)+DUMI*Z
         FIELD1(1,JFFAT)=FIELD1(1,JFFAT)-DUMJ*X
         FIELD1(2,JFFAT)=FIELD1(2,JFFAT)-DUMJ*Y
         FIELD1(3,JFFAT)=FIELD1(3,JFFAT)-DUMJ*Z
 100  CONTINUE
      ENDDO
C
C     -- FIELD1: FIELD AT POL DUE TO QM NUC --
C        NOTE THE SPECIAL WAY TO USE SWF
C
      IF(NAT.LE.0) GOTO 330
      IPCOUNT = ME - 1
      DO 300 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 300
         END IF
         IF(POL(IFFAT).EQ.ZERO) GOTO 300
C
         CXGRP = CORD(1,IFFAT) - QMCX
         CYGRP = CORD(2,IFFAT) - QMCY
         CZGRP = CORD(3,IFFAT) - QMCZ
         PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
         PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
         PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
         CXGRP = CXGRP - PBCX
         CYGRP = CYGRP - PBCY
         CZGRP = CZGRP - PBCZ
         R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
         IF(R2.GT.SWRBQ2) GOTO 300
         CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
         CX    = CORD(1,IFFAT) - PBCX
         CY    = CORD(2,IFFAT) - PBCY
         CZ    = CORD(3,IFFAT) - PBCZ
         DO 310 JAT=1,NAT
            QJ    = ZAN(JAT)
            X     = CX - C(1,JAT)
            Y     = CY - C(2,JAT)
            Z     = CZ - C(3,JAT)
            R2    = X*X+Y*Y+Z*Z
            IF(R2.LT.1.0D-10) GOTO 310
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            DUMI  = QJ*ONER3*SWF
            FIELD1(1,IFFAT)=FIELD1(1,IFFAT)+DUMI*X
            FIELD1(2,IFFAT)=FIELD1(2,IFFAT)+DUMI*Y
            FIELD1(3,IFFAT)=FIELD1(3,IFFAT)+DUMI*Z
 310     CONTINUE
 300  CONTINUE
 330  CONTINUE
C
      IF(GOPARR) THEN
         CALL DDI_GSUMF(2405,FIELD1,3*NFFAT)
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMPOLINT
!>   
!> @brief    1-e integral due to MM induced dipoles and surface charges
!>   
!> @author   Hui Li, Dejun Si
!>           - Feb 2011
!>                    
!> @details  This must be done in every SCF step
!>
      SUBROUTINE QMMMPOLINT(H1,FA,FB,DENTOT,HADD,OLDADD,DIP,
     *                      XTS,YTS,ZTS,QRXN1,QRXN2,
     *                      CMAT1,L2,L1,MCITER,NTS,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00,PT5=0.5D+00)
C
      DIMENSION H1(L2),FA(L2),FB(L2),DENTOT(L2),HADD(L2),OLDADD(L2),
     *          DIP(3,*),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),QRXN1(NTS),QRXN2(NTS),
     *          CMAT1(NTS,NTS),NONLSTQ(*)
C
      LOGICAL GOPARR,MASWRK,DSKWRK,DIRSCF,FDIFF,DIRDIF
C
      COMMON /CONV  / ACURCY,ENUCR,AJUNK(3),DIFF,ITER,ICALCP,ICBET
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / X(1)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /OPTSCF/ DIRSCF,FDIFF
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RHF,GVB/8HRHF     ,8HGVB     /
      DATA RMC/8HMCSCF   /
C
C     HUI LI, DEJUN SI, FEB 2011, LINCOLN
C
C     -- USE A DIFFERENT ROUTE FOR FIXSOL --
      IF(IFIXSOL.EQ.1) THEN
         CALL FIXSOLINT(H1,FA,FB,DENTOT,HADD,OLDADD,
     *                  L2,L1,MCITER,NONLSTQ,X(LFFCORD),
     *                  X(LFFCHARG),X(LFFZANF),X(LFFAFIX),X(LFFQFIX),
     *                  X(LFFVFIX1),X(LFFVFIX2),
     *                  X(LFFXTSFIX),X(LFFYTSFIX),X(LFFZTSFIX),
     *                  X(LFFRFIX),X(LFFIDATOM),X(LFFDAI),
     *                  X(LFFIDDAI),X(LFFPOL),X(LFFPOLSV),DIP,
     *                  X(LFFFIELD1),X(LFFFIELD2),X(LFFFIELD3),
     *                  X(LFFNONLS1),X(LFFL1213J))
         RETURN
      END IF
C
C
C     CAUTION, GVB ITERATIONS START AT 1, BUT RHF,UHF,ROHF AT 0!
C
      IF(SCFTYP.EQ.RMC) THEN
         ITER=MCITER
      END IF
      DIRDIF = DIRSCF  .AND.  FDIFF  .AND.  SCFTYP.NE.GVB
C
C     -- ELECTRONIC FIELDS AT MM POL
C
      CALL VALFM(LOADFM)
      LXEFI    = LOADFM   + 1
      LYEFI    = LXEFI    + L2
      LZEFI    = LYEFI    + L2
      LABFLD   = LZEFI    + L2
      LABPOT   = LABFLD   + 3*NFFAT
      LSCR     = LABPOT   + NTS
      LAST     = LSCR     + L2
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
      IF(IDOPOL.EQ.0) THEN
         CALL VCLR(X(LABFLD),1,3*NFFAT)
         GOTO 101
      END IF
C
      CALL VCLR(X(LABFLD),1,3*NFFAT)
      IPCOUNT = ME - 1
      DO 100 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 100
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 100
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),
     *             X(LXEFI),X(LYEFI),X(LZEFI),L2)
         X(LABFLD+3*(IFFAT-1)  )=TRACEP(DENTOT,X(LXEFI),L1)
         X(LABFLD+3*(IFFAT-1)+1)=TRACEP(DENTOT,X(LYEFI),L1)
         X(LABFLD+3*(IFFAT-1)+2)=TRACEP(DENTOT,X(LZEFI),L1)
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(668,X(LABFLD),3*NFFAT)
 101  CONTINUE
C
C     -- TOTAL FIELD AT MM POL
C        NOTE: QM NUC AND MM CHARGE DONE IN QMMMPOLFLDNUCMM
C              HERE 'FIELD' BECOMES THE TOTAL, MUST GO BACK
C              TO NUC+CHG
C
      CALL VADD(X(LABFLD),1,X(LFFFIELD1),1,X(LFFFIELD1),1,3*NFFAT)
C
C     -- TOTAL POTENTIAL AT SURFACE --
C        NOTE: XLABPOT = - POT_ELE,
C              HERE POT1 = POT_NUC + POT_MMCHG + POT_ELE,
C              MUST GO BACK TO POT_NUC + POT_MMCHG
C
      CALL VCLR (X(LABPOT),1,NTS)
      CALL EPOTEN(-ONE,XTS,YTS,ZTS,X(LABPOT),DENTOT,NTS,L2)
      IF(GOPARR) CALL DDI_GSUMF(2668,X(LABPOT),NTS)
      CALL VADD(X(LABPOT),1,X(LFFPOT1),1,X(LFFPOT1),1,NTS)
C
C     -- SURFACE CHARGE INDUCED BY NUC, ELE AND CHG
C
      SCALE = (RXNEPS-ONE)/RXNEPS
      IPCOUNT = ME - 1
      DO 320 ITS = 1, NTS
         QRXN1(ITS) = ZERO
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 320
         END IF
         DO JTS = 1, NTS
            QRXN1(ITS) = QRXN1(ITS)-CMAT1(ITS,JTS)*X(LFFPOT1+JTS-1)
         ENDDO
         QRXN1(ITS) = QRXN1(ITS)*SCALE
 320  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2406,QRXN1,NTS)
C
C     -- SOLVE INDUCED DIPOLES
C        (HERE FIELD2 MUST BE CLEARED)
      CALL VCLR(X(LFFFIELD2),1,3*NFFAT)
      CALL SOLVEDIP(X(LFFCORD),X(LFFPOL),X(LFFPOLSV),DIP,ENPOL,
     *              X(LFFFIELD1),X(LFFFIELD2),X(LFFFIELD3),
     *              X(LFFNONLS1),X(LFFL1213J),
     *              X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *              X(LFFCMAT1),X(LFFPOT2),QRXN1,
     *              QRXN2,NTS)
C
C     -- COMPUTE POLARIZATION ENERGY CORRECTION --
C        NOTE BY HUI LI:
C        ENPOL   = -(1/2)*FIELD*DIPOLE
C                = -(1/2)*(F_NUC + F_MM + F_ELE)*DIPOLE
C        ENRXN   =  (1/2)*POTENTIAL*(ASC1 + ASC2)
C                =  (1/2)*(V_NUC + V_MM + V_ELE)*(ASC1 + ASC2)
C        HOWEVER, A FULL TERM OF [-(1.0)*F_ELE*DIPOLE]
C        AND A FULL TERM OF      [(1.0)*V_ELE*ASC]     ARE INCLUDED IN
C        THE SCF ENERGY VIA 1-E INTEGRALS, SO WE NEED TO REMOVE IT:
C             XENPOL =  (F_ELE)*DIPOLE
C             XENRXN = -(V_ELE)*ASC     !  LABPOT = - V_ELE
C
      XENPOL = ZERO
      DO IFFAT=1,NFFAT
         FLDX   = X(LABFLD+3*(IFFAT-1)  )
         FLDY   = X(LABFLD+3*(IFFAT-1)+1)
         FLDZ   = X(LABFLD+3*(IFFAT-1)+2)
         XENPOL = XENPOL + (FLDX*DIP(1,IFFAT)
     *                     +FLDY*DIP(2,IFFAT)
     *                     +FLDZ*DIP(3,IFFAT))
      ENDDO
C
      ENRXN    = ZERO
      ENRXNPOL = ZERO
      XENRXN   = ZERO
      IF(ISPHSOL.GE.60 .AND. RSPHSOL.LT.1.0D+30) THEN
         DO ITS=1,NTS
            ENRXN    = ENRXN + X(LFFPOT1+ITS-1)*QRXN1(ITS)
            ENRXNPOL = ENRXNPOL + X(LFFPOT1+ITS-1)*QRXN2(ITS)
            XENRXN = XENRXN 
     *              + X(LABPOT+ITS-1)*(QRXN1(ITS)+QRXN2(ITS))
         ENDDO
         ENRXNPOL = PT5*ENRXNPOL
         ENRXN    = PT5*ENRXN
      END IF
C
      CALL VSUB(X(LABFLD),1,X(LFFFIELD1),1,X(LFFFIELD1),1,3*NFFAT)
      CALL VSUB(X(LABPOT),1,X(LFFPOT1),1,X(LFFPOT1),1,NTS)
C
C     -- CALCULATE INTEGRALS --
C
      IF(GOPARR) THEN
         IF(.NOT.DIRDIF) CALL DSCAL(L2,ONE/NPROC,H1,1)
      END IF
      IF(DIRDIF) CALL VCLR(HADD,1,L2)
C
      IF(IDOPOL.EQ.0) GOTO 201
      IPCOUNT = ME - 1
      DO 200 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 200
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),
     *             X(LXEFI),X(LYEFI),X(LZEFI),L2)
         IF(DIRDIF) THEN
            DO K=1,L2
               HADD(K)=HADD(K)
     *                -X(LXEFI+K-1)*DIP(1,IFFAT)
     *                -X(LYEFI+K-1)*DIP(2,IFFAT)
     *                -X(LZEFI+K-1)*DIP(3,IFFAT)
            ENDDO
         ELSE
            DO K=1,L2
               H1(K)=H1(K)
     *                -X(LXEFI+K-1)*DIP(1,IFFAT)
     *                -X(LYEFI+K-1)*DIP(2,IFFAT)
     *                -X(LZEFI+K-1)*DIP(3,IFFAT)
            ENDDO
         END IF
 200  CONTINUE
 201  CONTINUE
C
      IPCOUNT = ME - 1
      DO 300 ITS=1,NTS
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 300
         END IF
         CALL INTMEP(X(LSCR),XTS(ITS),YTS(ITS),ZTS(ITS))
         IF(DIRDIF) THEN
            DO K=1,L2
               HADD(K)= HADD(K)-X(LSCR+K-1)*(QRXN1(ITS)+QRXN2(ITS))
            ENDDO
         ELSE
            DO K=1,L2
               H1(K)  = H1(K)-X(LSCR+K-1)*(QRXN1(ITS)+QRXN2(ITS))
            ENDDO
        END IF
 300  CONTINUE
C
      IF(GOPARR) THEN
         IF(DIRDIF) THEN
            CALL DDI_GSUMF(686,HADD,L2)
         ELSE
            CALL DDI_GSUMF(687, H1,L2)
         END IF
      END IF
C
C     ----- ADD DIFFERENCE IN PERTURBATION WHEN DIRSCF AND FDIFF -----
C
      IF(SCFTYP.EQ.RHF) THEN
         IF(DIRSCF  .AND.  FDIFF) THEN
            IF(ITER.EQ.1) CALL VCLR(OLDADD,1,L2)
            CALL VADD(  H1,1, HADD,1,  H1,1,L2)
            CALL VSUB(OLDADD,1, HADD,1,OLDADD,1,L2)
            CALL VADD(  FA,1,OLDADD,1,  FA,1,L2)
            CALL DCOPY(L2,HADD,1,OLDADD,1)
         END IF
      ELSE
         IF(DIRDIF) THEN
            IF(ITER .EQ. 1) CALL VCLR(OLDADD,1,L2)
            CALL VADD(  H1,1, HADD,1,  H1,1,L2)
            CALL VSUB(OLDADD,1, HADD,1,OLDADD,1,L2)
            CALL VADD(  FA,1,OLDADD,1,  FA,1,L2)
            CALL VADD(  FB,1,OLDADD,1,  FB,1,L2)
            CALL DCOPY(L2,HADD,1,OLDADD,1)
         END IF
      END IF
C
C     --- FOR MCSCF/GVB H1 MUST BE WRITTEN TO DAF ---
C
      CALL DAWRIT(IDAF,IODA,H1,L2,80,0)
      IF (SCFTYP.EQ.GVB .OR. SCFTYP.EQ.RMC) THEN
         CALL DAWRIT(IDAF,IODA,H1,L2,11,0)
      END IF
C
      CALL RETFM(NEED)
      RETURN
C
      END
C*MODULE QUANPO  *DECK QMMMPOLINT2
!>
!> @brief    1-e integral due to MM induced dipoles and surface charges
!>
!> @author   Hui Li
!>           - Jan 2011
!>
!> @details  The dipoles and surface charges are induced by 
!>           MP2 or TDDFT style densities
!>
      SUBROUTINE QMMMPOLINT2(H1,DENTOT,DIPTMP,L2,L1,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      DIMENSION H1(L2),DENTOT(L2),DIPTMP(3,*),NONLSTQ(*)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / X(1)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C     HUI LI, JAN 2011, LINCOLN
C     DEJUN SI, MAR 2011, LINCOLN
C
C     -- USE A DIFFERENT ROUTE FOR FIXSOL --
      IF(IFIXSOL.EQ.1) THEN
         CALL FIXSOLINT2(H1,DENTOT,
     *                   L2,L1,NONLSTQ,X(LFFCORD),
     *                   X(LFFAFIX),X(LFFVFIX2),X(LFFXTSFIX),
     *                   X(LFFYTSFIX),X(LFFZTSFIX),X(LFFPOL),
     *                   X(LFFPOLSV),DIPTMP,X(LFFFIELD2),X(LFFFIELD3),
     *                   X(LFFNONLS1),X(LFFL1213J))
         RETURN
      END IF
C
C     -- ELECTRONIC FIELDS AT MM POL
C
      NTS = ISPHSOL
      CALL VALFM(LOADFM)
      LXEFI    = LOADFM   + 1
      LYEFI    = LXEFI    + L2
      LZEFI    = LYEFI    + L2
      LABFLD   = LZEFI    + L2
      LABPOT   = LABFLD   + 3*NFFAT
      LQTMP1   = LABPOT   + NTS
      LQTMP2   = LQTMP1   + NTS
      LSCR     = LQTMP2   + NTS
      LAST     = LSCR     + L2
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
      CALL VCLR(X(LABFLD),1,3*NFFAT)
      IPCOUNT = ME - 1
      DO 100 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 100
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 100
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),
     *             X(LXEFI),X(LYEFI),X(LZEFI),L2)
         X(LABFLD+3*(IFFAT-1)  )=TRACEP(DENTOT,X(LXEFI),L1)
         X(LABFLD+3*(IFFAT-1)+1)=TRACEP(DENTOT,X(LYEFI),L1)
         X(LABFLD+3*(IFFAT-1)+2)=TRACEP(DENTOT,X(LZEFI),L1)
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(668,X(LABFLD),3*NFFAT)
C
      CALL VCLR (X(LABPOT),1,NTS)
      CALL EPOTEN(-ONE,X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *            X(LABPOT),DENTOT,NTS,L2)
      IF(GOPARR) CALL DDI_GSUMF(2668,X(LABPOT),NTS)
C
C     -- SURFACE CHARGE INDUCED BY ABPOT --
C
      SCALE = (RXNEPS-ONE)/RXNEPS
      IPCOUNT = ME - 1
      DO 320 ITS = 1, NTS
         X(LQTMP1+ITS-1) = ZERO
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 320
         END IF
         DO JTS = 1, NTS
            X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)
     *        -X(LFFCMAT1+(JTS-1)*NTS+ITS-1)*X(LABPOT+JTS-1)
         ENDDO
         X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)*SCALE
 320  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2406,X(LQTMP1),NTS)
C
      CALL VCLR(X(LFFFIELD2),1,3*NFFAT)
      CALL SOLVEDIP(X(LFFCORD),X(LFFPOL),X(LFFPOLSV),DIPTMP,DUM,
     *              X(LABFLD),X(LFFFIELD2),X(LFFFIELD3),
     *              X(LFFNONLS1),X(LFFL1213J),
     *              X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *              X(LFFCMAT1),X(LFFPOT2),X(LQTMP1),
     *              X(LQTMP2),NTS)
C
      CALL VADD(X(LQTMP1),1,X(LQTMP2),1,X(LQTMP2),1,NTS)
C
C     -- CALCULATE INTEGRALS --
C
      IF(GOPARR) CALL DSCAL(L2,ONE/NPROC,H1,1)
      IPCOUNT = ME - 1
      FACTOR=1.0D+00
      IF(TDDFTYP.NE.RNONE) FACTOR=2.0D+00
      DO 200 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 200
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),
     *             X(LXEFI),X(LYEFI),X(LZEFI),L2)
         DO K=1,L2
            H1(K)=H1(K)
     *           -X(LXEFI+K-1)*DIPTMP(1,IFFAT)*FACTOR
     *           -X(LYEFI+K-1)*DIPTMP(2,IFFAT)*FACTOR
     *           -X(LZEFI+K-1)*DIPTMP(3,IFFAT)*FACTOR
         ENDDO
 200  CONTINUE
      IPCOUNT = ME - 1
      DO 300 ITS=1,NTS
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 300
         END IF
         CALL INTMEP(X(LSCR),X(LFFXTS+ITS-1),X(LFFYTS+ITS-1),
     *               X(LFFZTS+ITS-1))
C
         DO K=1,L2
            H1(K)  = H1(K)
     *              -X(LSCR+K-1)*X(LQTMP2+ITS-1)*FACTOR
         ENDDO
 300  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(687,H1,L2)
C
      CALL RETFM(NEED)
      RETURN
C
      END
C*MODULE QUANPO  *DECK QMMMPOLFMMNUCMM
!>
!> @brief    force on MM induced dipoles
!>
!> @author   Hui Li
!>           - Jan 2011
!>
!> @details  force between dipoles and MM charges
!>           force between dipoles and QM nuc charges
!>           force between dipoles and MM dipoles
!>
      SUBROUTINE QMMMPOLFMMNUCMM(CORD,FFGRD,CHARG,POL,POLSV,DIP,
     *                           NONLS1,NONLSTQ,
     *                           DIPMP,DIPTA,DIPXY,L1213J)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (ONE=1.0D+00, ZERO=0.0D+00, TWO=2.0D+00, THREE=3.0D+00)
      PARAMETER (ONESIX=1.0D+00/6.0D+00,PT5=0.5D+00,FOUR=4.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),POL(*),POLSV(*),DIP(3,*),
     *          NONLS1(2,*),NONLSTQ(*),
     *          DIPMP(3,*),DIPTA(3,*),DIPXY(3,*),L1213J(2,*)
C
      COMMON /FFDAMP/ IPODAMP,IPO1213,SCRFAC,RSCRFAC,SCRF2,SCRF3,SCRF4
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMA,L2BONDPMA,L1ANGLPMA,L2ANGLPMA,
     *                L1DIHRPMA,L2DIHRPMA,L1DIHBPMA,L2DIHBPMA,
     *                L1WAGGPMA,L2WAGGPMA,L1CMAPPMA,L2CMAPPMA,
     *                L11213PMA,L21213PMA,L1N14PMA,L2N14PMA,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C     HUI LI, JAN 2011, LINCOLN
C
C     -- FORCE BETWEEN INDUCED DIPOLES AND MM CHARGES
C              BETWEEN INDUCED DIPOLES AND QM NUC
C              BETWEEN INDUCED DIPOLES AND INDUCED DIPOLES
C
      IF(IDOPOL.EQ.0) RETURN
C
      DO LL=1,2
      IF(LL.EQ.1) THEN
         NN1  = 1
         NN2  = NTODO
         SIGN = 1.0D+00
      END IF
      IF(LL.EQ.2) THEN
         NN1  = L11213
         NN2  = L21213
         SIGN = -1.0D+00
      END IF
      DO 100 III=NN1, NN2
         IF(LL.EQ.1) THEN
            IFFAT = NONLS1(1,III)
            JFFAT = NONLS1(2,III)
         END IF
         IF(LL.EQ.2) THEN
            IFFAT = L1213J(1,III)
            JFFAT = L1213J(2,III)
         END IF
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 100
         IF(CHARG(IFFAT).EQ.ZERO.AND.POL(IFFAT).EQ.ZERO) GOTO 100
         IF(CHARG(JFFAT).EQ.ZERO.AND.POL(JFFAT).EQ.ZERO) GOTO 100
         IF(  POL(IFFAT).EQ.ZERO.AND.POL(JFFAT).EQ.ZERO) GOTO 100
         QI    = CHARG(IFFAT)
         QJ    = CHARG(JFFAT)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         PBCX  = XBOX * ANINT(X*ONEXBOX)
         PBCY  = YBOX * ANINT(Y*ONEYBOX)
         PBCZ  = ZBOX * ANINT(Z*ONEZBOX)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         IF(R2.GT.SWRB2) GOTO 100
         IF(R2.LT.0.01D+00) GOTO 100
         R     = SQRT(R2)
C
         FE    = ONE
         FT    = ONE
         FEGRD = ZERO
         FTGRD = ZERO
         IF(IPODAMP.GT.0) THEN
            POLIJ = POLSV(IFFAT)*POLSV(JFFAT) + 1.0D-60
            POL6  = POLIJ**ONESIX
            RPOL6 = ONE/POL6
            RSFAC = RSCRFAC*RPOL6
            VFAC  = R*RSFAC
            VFAC2 = VFAC*VFAC
            VFAC3 = VFAC2*VFAC
            VFAC4 = VFAC3*VFAC
            UFAC  = R*RPOL6
            UFAC2 = UFAC*UFAC
            UFAC3 = UFAC2*UFAC
            IF(IPODAMP.EQ.1.AND.VFAC.LT.ONE) THEN
C              -- LINEAR THOLE MODEL
               FE    = FOUR*VFAC3-THREE*VFAC4
               FT    = VFAC4
               FEGRD = 12.0D+00*(VFAC2-VFAC3)*RSFAC
               FTGRD = FOUR*VFAC3*RSFAC
            ELSE IF(IPODAMP.EQ.2) THEN
C              -- EXPONENTIAL THOLE MODEL
               VALEXP= EXP(-SCRFAC*UFAC)
               FE    = ONE-(PT5*SCRF2*UFAC2+SCRFAC*UFAC+ONE)*VALEXP
               FT    = ONE-(ONESIX*SCRF3*UFAC3+PT5*SCRF2*UFAC2+
     *                      SCRFAC*UFAC+ONE)*VALEXP
               FEGRD = PT5*SCRF3*UFAC2*RPOL6*VALEXP
               FTGRD = ONESIX*SCRF4*UFAC3*RPOL6*VALEXP
            ELSE IF(IPODAMP.EQ.3) THEN
C              -- THOLE-TINKER EXPONENTIAL MODEL
               VALEXP= EXP(-SCRFAC*UFAC3)
               FE    = ONE-VALEXP
               FT    = ONE-(ONE+SCRFAC*UFAC3)*VALEXP
               FEGRD = THREE*SCRFAC*UFAC2*RPOL6*VALEXP
               FTGRD = FEGRD*SCRFAC*UFAC3
            END IF
         END IF
C
         ONER  = ONE/R
         IF(IPOLSHF.EQ.1) CALL SHIFT(R2,R,ONER,X,Y,Z)
         IF(IPOLSHF.EQ.0) CALL SWFUNC(R2,X,Y,Z)
C
         XX    = X*X
         YY    = Y*Y
         ZZ    = Z*Z
         XY    = X*Y
         XZ    = X*Z
         YZ    = Y*Z
         ONER2 = ONER*ONER
         ONER3 = ONER2*ONER
         ONER4 = ONER2*ONER2
         ONER5 = ONER2*ONER3
         ONER6 = ONER3*ONER3
         ONER7 = ONER2*ONER5
C
C        - FORCES BETWEEN MM CHARGE AND DIPOLE
C
         DIPIX = DIP(1,IFFAT)
         DIPIY = DIP(2,IFFAT)
         DIPIZ = DIP(3,IFFAT)
         DIPJX = DIP(1,JFFAT)
         DIPJY = DIP(2,JFFAT)
         DIPJZ = DIP(3,JFFAT)
         IF(MPLEVL.EQ.2)THEN
            DIPIX = DIP(1,IFFAT) + DIPMP(1,IFFAT)
            DIPIY = DIP(2,IFFAT) + DIPMP(2,IFFAT)
            DIPIZ = DIP(3,IFFAT) + DIPMP(3,IFFAT)
            DIPJX = DIP(1,JFFAT) + DIPMP(1,JFFAT)
            DIPJY = DIP(2,JFFAT) + DIPMP(2,JFFAT)
            DIPJZ = DIP(3,JFFAT) + DIPMP(3,JFFAT)
         END IF
         IF(TDDFTYP.NE.RNONE) THEN
            DIPIX = DIP(1,IFFAT) + DIPTA(1,IFFAT)
            DIPIY = DIP(2,IFFAT) + DIPTA(2,IFFAT)
            DIPIZ = DIP(3,IFFAT) + DIPTA(3,IFFAT)
            DIPJX = DIP(1,JFFAT) + DIPTA(1,JFFAT)
            DIPJY = DIP(2,JFFAT) + DIPTA(2,JFFAT)
            DIPJZ = DIP(3,JFFAT) + DIPTA(3,JFFAT)
         END IF
         QIDOT = THREE*ONER5*(DIPJX*X+DIPJY*Y+DIPJZ*Z)*QI
         QJDOT = THREE*ONER5*(DIPIX*X+DIPIY*Y+DIPIZ*Z)*QJ
         QIONER3= QI*ONER3
         QJONER3= QJ*ONER3
C              NEGATIVE FORCE ON QI BY DIPJ
         DXI   = DIPJX*QIONER3 - QIDOT*X
         DYI   = DIPJY*QIONER3 - QIDOT*Y
         DZI   = DIPJZ*QIONER3 - QIDOT*Z
C              NEGATIVE FORCE ON QJ BY DIPI
C                       FORCE ON DIPI BY QJ
         DXJ   = DIPIX*QJONER3 - QJDOT*X
         DYJ   = DIPIY*QJONER3 - QJDOT*Y
         DZJ   = DIPIZ*QJONER3 - QJDOT*Z
C              NEGATIVE FORCE ON IFFAT
         DX    = DXI - DXJ
         DY    = DYI - DYJ
         DZ    = DZI - DZJ
C        - ENERGY-SWFDX TERMS
         FLDIX = QJONER3*X      ! FIELD AT DIPI DUE TO QJ
         FLDIY = QJONER3*Y
         FLDIZ = QJONER3*Z
         FLDJX = QIONER3*(-X)   ! FIELD AT DIPJ DUE TO QI
         FLDJY = QIONER3*(-Y)
         FLDJZ = QIONER3*(-Z)
         EDIQJ = -(FLDIX*DIPIX+FLDIY*DIPIY+FLDIZ*DIPIZ) ! E = -F*D
         EDJQI = -(FLDJX*DIPJX+FLDJY*DIPJY+FLDJZ*DIPJZ)
C
         IF(IDOPOL.EQ.1) THEN
            EDIDJ = ZERO
            GOTO 150
         END IF
C
C        - FORCES BETWEEN DIPOLE AND DIPOLE -
C
         IF(IPO1213.EQ.1.AND.LL.EQ.2) THEN
            EDIDJ=ZERO
            GOTO 150
         END IF
C
         DIPIX = DIP(1,IFFAT)
         DIPIY = DIP(2,IFFAT)
         DIPIZ = DIP(3,IFFAT)
         DMPIX = DIPMP(1,IFFAT)
         DMPIY = DIPMP(2,IFFAT)
         DMPIZ = DIPMP(3,IFFAT)
         DTAIX = DIPTA(1,IFFAT)
         DTAIY = DIPTA(2,IFFAT)
         DTAIZ = DIPTA(3,IFFAT)
         DXYIX = DIPXY(1,IFFAT)
         DXYIY = DIPXY(2,IFFAT)
         DXYIZ = DIPXY(3,IFFAT)
         DIPJX = DIP(1,JFFAT)
         DIPJY = DIP(2,JFFAT)
         DIPJZ = DIP(3,JFFAT)
         DMPJX = DIPMP(1,JFFAT)
         DMPJY = DIPMP(2,JFFAT)
         DMPJZ = DIPMP(3,JFFAT)
         DTAJX = DIPTA(1,JFFAT)
         DTAJY = DIPTA(2,JFFAT)
         DTAJZ = DIPTA(3,JFFAT)
         DXYJX = DIPXY(1,JFFAT)
         DXYJY = DIPXY(2,JFFAT)
         DXYJZ = DIPXY(3,JFFAT)
C
         DOTM  = DIPJX*DIPIX + DIPJY*DIPIY + DIPJZ*DIPIZ
         DOTXY = DIPJY*DIPIX + DIPIY*DIPJX
         DOTXZ = DIPJZ*DIPIX + DIPIZ*DIPJX
         DOTYZ = DIPJY*DIPIZ + DIPIY*DIPJZ
         DOTX  = TWO*DIPJX*DIPIX*X + DOTXY*Y + DOTXZ*Z
         DOTY  = TWO*DIPJY*DIPIY*Y + DOTXY*X + DOTYZ*Z
         DOTZ  = TWO*DIPJZ*DIPIZ*Z + DOTXZ*X + DOTYZ*Y
         TEMP  = DIPIX*DIPJX*XX
     *          +DIPIY*DIPJY*YY
     *          +DIPIZ*DIPJZ*ZZ
     *          +(DIPIX*DIPJY+DIPIY*DIPJX)*XY
     *          +(DIPIX*DIPJZ+DIPIZ*DIPJX)*XZ
     *          +(DIPIY*DIPJZ+DIPIZ*DIPJY)*YZ
         IF(MPLEVL.EQ.2)THEN
            DOTM  = DOTM + DMPJX*DIPIX + DMPJY*DIPIY + DMPJZ*DIPIZ
     *                   + DIPJX*DMPIX + DIPJY*DMPIY + DIPJZ*DMPIZ
            DOTXY = DMPJY*DIPIX + DMPIY*DIPJX
     *            + DIPJY*DMPIX + DIPIY*DMPJX
            DOTXZ = DMPJZ*DIPIX + DMPIZ*DIPJX
     *            + DIPJZ*DMPIX + DIPIZ*DMPJX
            DOTYZ = DMPJY*DIPIZ + DMPIY*DIPJZ
     *            + DIPJY*DMPIZ + DIPIY*DMPJZ
            DOTX  = DOTX + TWO*DMPJX*DIPIX*X + DOTXY*Y + DOTXZ*Z
     *                   + TWO*DIPJX*DMPIX*X
            DOTY  = DOTY + TWO*DMPJY*DIPIY*Y + DOTXY*X + DOTYZ*Z
     *                   + TWO*DIPJY*DMPIY*Y
            DOTZ  = DOTZ + TWO*DMPJZ*DIPIZ*Z + DOTXZ*X + DOTYZ*Y
     *                   + TWO*DIPJZ*DMPIZ*Z
            TEMP  = TEMP + (DMPIX*DIPJX+DIPIX*DMPJX)*XX
     *                   + (DMPIY*DIPJY+DIPIY*DMPJY)*YY
     *                   + (DMPIZ*DIPJZ+DIPIZ*DMPJZ)*ZZ
     *                   + (DMPIX*DIPJY+DMPIY*DIPJX)*XY
     *                   + (DIPIX*DMPJY+DIPIY*DMPJX)*XY
     *                   + (DMPIX*DIPJZ+DMPIZ*DIPJX)*XZ
     *                   + (DIPIX*DMPJZ+DIPIZ*DMPJX)*XZ
     *                   + (DMPIY*DIPJZ+DMPIZ*DIPJY)*YZ
     *                   + (DIPIY*DMPJZ+DIPIZ*DMPJY)*YZ
         END IF
         IF(TDDFTYP.NE.RNONE) THEN
            DOTM  = DOTM + DTAJX*DIPIX + DTAJY*DIPIY + DTAJZ*DIPIZ
     *                   + DIPJX*DTAIX + DIPJY*DTAIY + DIPJZ*DTAIZ
            DOTXY = DTAJY*DIPIX + DTAIY*DIPJX
     *            + DIPJY*DTAIX + DIPIY*DTAJX
            DOTXZ = DTAJZ*DIPIX + DTAIZ*DIPJX
     *            + DIPJZ*DTAIX + DIPIZ*DTAJX
            DOTYZ = DTAJY*DIPIZ + DTAIY*DIPJZ
     *            + DIPJY*DTAIZ + DIPIY*DTAJZ
            DOTX  = DOTX + TWO*DTAJX*DIPIX*X + DOTXY*Y + DOTXZ*Z
     *                   + TWO*DIPJX*DTAIX*X
            DOTY  = DOTY + TWO*DTAJY*DIPIY*Y + DOTXY*X + DOTYZ*Z
     *                   + TWO*DIPJY*DTAIY*Y
            DOTZ  = DOTZ + TWO*DTAJZ*DIPIZ*Z + DOTXZ*X + DOTYZ*Y
     *                   + TWO*DIPJZ*DTAIZ*Z
            TEMP  = TEMP + (DTAIX*DIPJX+DIPIX*DTAJX)*XX
     *                   + (DTAIY*DIPJY+DIPIY*DTAJY)*YY
     *                   + (DTAIZ*DIPJZ+DIPIZ*DTAJZ)*ZZ
     *                   + (DTAIX*DIPJY+DTAIY*DIPJX)*XY
     *                   + (DIPIX*DTAJY+DIPIY*DTAJX)*XY
     *                   + (DTAIX*DIPJZ+DTAIZ*DIPJX)*XZ
     *                   + (DIPIX*DTAJZ+DIPIZ*DTAJX)*XZ
     *                   + (DTAIY*DIPJZ+DTAIZ*DIPJY)*YZ
     *                   + (DIPIY*DTAJZ+DIPIZ*DTAJY)*YZ
            DOTM  = DOTM + DXYJX*DXYIX + DXYJY*DXYIY + DXYJZ*DXYIZ
     *                   + DXYJX*DXYIX + DXYJY*DXYIY + DXYJZ*DXYIZ
            DOTXY = DXYJY*DXYIX + DXYIY*DXYJX
     *            + DXYJY*DXYIX + DXYIY*DXYJX
            DOTXZ = DXYJZ*DXYIX + DXYIZ*DXYJX
     *            + DXYJZ*DXYIX + DXYIZ*DXYJX
            DOTYZ = DXYJY*DXYIZ + DXYIY*DXYJZ
     *            + DXYJY*DXYIZ + DXYIY*DXYJZ
            DOTX  = DOTX + TWO*DXYJX*DXYIX*X + DOTXY*Y + DOTXZ*Z
     *                   + TWO*DXYJX*DXYIX*X
            DOTY  = DOTY + TWO*DXYJY*DXYIY*Y + DOTXY*X + DOTYZ*Z
     *                   + TWO*DXYJY*DXYIY*Y
            DOTZ  = DOTZ + TWO*DXYJZ*DXYIZ*Z + DOTXZ*X + DOTYZ*Y
     *                   + TWO*DXYJZ*DXYIZ*Z
            TEMP  = TEMP + (DXYIX*DXYJX+DXYIX*DXYJX)*XX
     *                   + (DXYIY*DXYJY+DXYIY*DXYJY)*YY
     *                   + (DXYIZ*DXYJZ+DXYIZ*DXYJZ)*ZZ
     *                   + (DXYIX*DXYJY+DXYIY*DXYJX)*XY
     *                   + (DXYIX*DXYJY+DXYIY*DXYJX)*XY
     *                   + (DXYIX*DXYJZ+DXYIZ*DXYJX)*XZ
     *                   + (DXYIX*DXYJZ+DXYIZ*DXYJX)*XZ
     *                   + (DXYIY*DXYJZ+DXYIZ*DXYJY)*YZ
     *                   + (DXYIY*DXYJZ+DXYIZ*DXYJY)*YZ
         END IF
         FEDOTM= FE*DOTM
         FTDOTX= FT*DOTX
         FTDOTY= FT*DOTY
         FTDOTZ= FT*DOTZ
         DUM   = THREE*ONER5
         DUM4  = FEGRD*DOTM*ONER4
         DUM6  = THREE*FTGRD*TEMP*ONER6
         DUM7  = 15.0D+00*TEMP*ONER7*FT
C        - NEGATIVE FORCE ON IFFAT
         DX  = DX - DUM*(FEDOTM*X+FTDOTX)+(DUM4-DUM6+DUM7)*X
         DY  = DY - DUM*(FEDOTM*Y+FTDOTY)+(DUM4-DUM6+DUM7)*Y
         DZ  = DZ - DUM*(FEDOTM*Z+FTDOTZ)+(DUM4-DUM6+DUM7)*Z
C        - ENERGY-SWFDX TERMS
         DOTJ  = THREE*ONER5*FT*(DIPJX*X+DIPJY*Y+DIPJZ*Z)
         FLDIX = -DIPJX*ONER3*FE + DOTJ*X  ! FIELD AT DIPI DUE TO DIPJ
         FLDIY = -DIPJY*ONER3*FE + DOTJ*Y
         FLDIZ = -DIPJZ*ONER3*FE + DOTJ*Z
         EDIDJ = -(DIPIX*FLDIX + DIPIY*FLDIY + DIPIZ*FLDIZ) ! E = -F*D
         IF(MPLEVL.EQ.2)THEN
            EDIDJ = EDIDJ
     *              -(DMPIX*FLDIX + DMPIY*FLDIY + DMPIZ*FLDIZ) ! E = -F*D
            DOTJ  = THREE*ONER5*FT*(DMPJX*X+DMPJY*Y+DMPJZ*Z)
            FLDIX = -DMPJX*ONER3*FE + DOTJ*X  ! FIELD AT DIPI DUE TO DMPJ
            FLDIY = -DMPJY*ONER3*FE + DOTJ*Y
            FLDIZ = -DMPJZ*ONER3*FE + DOTJ*Z
            EDIDJ = EDIDJ
     *              -(DIPIX*FLDIX + DIPIY*FLDIY + DIPIZ*FLDIZ) ! E = -F*D
         END IF
         IF(TDDFTYP.NE.RNONE)THEN
            EDIDJ = EDIDJ
     *              -(DTAIX*FLDIX + DTAIY*FLDIY + DTAIZ*FLDIZ) ! E = -F*D
            DOTJ  = THREE*ONER5*FT*(DTAJX*X+DTAJY*Y+DTAJZ*Z)
            FLDIX = -DTAJX*ONER3*FE + DOTJ*X  ! FIELD AT DIPI DUE TO DTAJ
            FLDIY = -DTAJY*ONER3*FE + DOTJ*Y
            FLDIZ = -DTAJZ*ONER3*FE + DOTJ*Z
            EDIDJ = EDIDJ
     *              -(DIPIX*FLDIX + DIPIY*FLDIY + DIPIZ*FLDIZ) ! E = -F*D
C
            DOTJ  = THREE*ONER5*FT*(DXYJX*X+DXYJY*Y+DXYJZ*Z)
            FLDIX = -DXYJX*ONER3*FE + DOTJ*X  ! FIELD AT DXYI DUE TO DXYJ
            FLDIY = -DXYJY*ONER3*FE + DOTJ*Y
            FLDIZ = -DXYJZ*ONER3*FE + DOTJ*Z
            EDIDJ = EDIDJ - TWO*
     *               (DXYIX*FLDIX + DXYIY*FLDIY + DXYIZ*FLDIZ) ! E = -F*D
         END IF
C
 150     CONTINUE
C
         EPAIR = (EDIQJ + EDJQI + EDIDJ)*SIGN
C
         DEX   = DX*SWF*SIGN
         DEY   = DY*SWF*SIGN
         DEZ   = DZ*SWF*SIGN
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DEX
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DEY
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DEZ
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT)+EPAIR*SWFDX
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT)+EPAIR*SWFDY
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT)+EPAIR*SWFDZ
         FFGRD(1,JFFAT)=FFGRD(1,JFFAT) - DEX
         FFGRD(2,JFFAT)=FFGRD(2,JFFAT) - DEY
         FFGRD(3,JFFAT)=FFGRD(3,JFFAT) - DEZ
         FFGRD(1,JFFAT)=FFGRD(1,JFFAT)-EPAIR*SWFDX
         FFGRD(2,JFFAT)=FFGRD(2,JFFAT)-EPAIR*SWFDY
         FFGRD(3,JFFAT)=FFGRD(3,JFFAT)-EPAIR*SWFDZ
         VIR(1)    =VIR(1)     + DEX*X + EPAIR*SWFDX*X
         VIR(2)    =VIR(2)     + DEY*Y + EPAIR*SWFDY*Y
         VIR(3)    =VIR(3)     + DEZ*Z + EPAIR*SWFDZ*Z
         IYES = 0
         DO KFIX=1,NFIXMM
            IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
            VIR(1) =VIR(1)     - DEX*X - EPAIR*SWFDX*X
            VIR(2) =VIR(2)     - DEY*Y - EPAIR*SWFDY*Y
            VIR(3) =VIR(3)     - DEZ*Z - EPAIR*SWFDZ*Z
         END IF
 100  CONTINUE
      ENDDO
C
C     - FORCES BETWEEN QM NUCLEI AND INDUCED DIPOLE
C
      IF(NAT.LE.0) GOTO 330
C
      IPCOUNT = ME - 1
      DO 300 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(POL(IFFAT).EQ.ZERO) GOTO 300
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 300
         END IF
         DIPIX = DIP(1,IFFAT)
         DIPIY = DIP(2,IFFAT)
         DIPIZ = DIP(3,IFFAT)
         IF(MPLEVL.EQ.2)THEN
            DIPIX = DIP(1,IFFAT) + DIPMP(1,IFFAT)
            DIPIY = DIP(2,IFFAT) + DIPMP(2,IFFAT)
            DIPIZ = DIP(3,IFFAT) + DIPMP(3,IFFAT)
         END IF
         IF(TDDFTYP.NE.RNONE) THEN
            DIPIX = DIP(1,IFFAT) + DIPTA(1,IFFAT)
            DIPIY = DIP(2,IFFAT) + DIPTA(2,IFFAT)
            DIPIZ = DIP(3,IFFAT) + DIPTA(3,IFFAT)
         END IF
         CXGRP = CORD(1,IFFAT) - QMCX
         CYGRP = CORD(2,IFFAT) - QMCY
         CZGRP = CORD(3,IFFAT) - QMCZ
         PBCX  = XBOX * ANINT(CXGRP*ONEXBOX)
         PBCY  = YBOX * ANINT(CYGRP*ONEYBOX)
         PBCZ  = ZBOX * ANINT(CZGRP*ONEZBOX)
         CXGRP = CXGRP - PBCX
         CYGRP = CYGRP - PBCY
         CZGRP = CZGRP - PBCZ
         R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
         IF(R2.GT.SWRBQ2) GOTO 300
         CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
         CX    = CORD(1,IFFAT) - PBCX
         CY    = CORD(2,IFFAT) - PBCY
         CZ    = CORD(3,IFFAT) - PBCZ
         DO 310 JAT=1,NAT
            QJ    = ZAN(JAT)
            X     = CX - C(1,JAT)
            Y     = CY - C(2,JAT)
            Z     = CZ - C(3,JAT)
            R2    = X*X+Y*Y+Z*Z
            IF(R2.LT.1.0D-10) GOTO 310
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            ONER5 = ONER2*ONER3
C
            QJDOT = THREE*ONER5*(DIPIX*X+DIPIY*Y+DIPIZ*Z)*QJ
            QJONER3= QJ*ONER3
C                 NEGATIVE FORCE ON QJ BY DIPI
C                          FORCE ON DIPI BY QJ
            DXJ   = DIPIX*QJONER3 - QJDOT*X
            DYJ   = DIPIY*QJONER3 - QJDOT*Y
            DZJ   = DIPIZ*QJONER3 - QJDOT*Z
C                 NEGATIVE FORCE ON IFFAT
            DX    = - DXJ
            DY    = - DYJ
            DZ    = - DZJ
C
C           - ENERGY-SWFDX TERMS
C
            FLDIX = QJONER3*X      ! FIELD AT DIPI DUE TO QJ
            FLDIY = QJONER3*Y
            FLDIZ = QJONER3*Z
            EPAIR = -(FLDIX*DIPIX+FLDIY*DIPIY+FLDIZ*DIPIZ) ! E = -F*D
C
            DEX   = DX*SWF
            DEY   = DY*SWF
            DEZ   = DZ*SWF
            FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DEX
            FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DEY
            FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DEZ
            FFGRD(1,IFFAT)=FFGRD(1,IFFAT)+EPAIR*SWFDX
            FFGRD(2,IFFAT)=FFGRD(2,IFFAT)+EPAIR*SWFDY
            FFGRD(3,IFFAT)=FFGRD(3,IFFAT)+EPAIR*SWFDZ
            DE(1,JAT)     =DE(1,JAT)      - DEX
            DE(2,JAT)     =DE(2,JAT)      - DEY
            DE(3,JAT)     =DE(3,JAT)      - DEZ
            VIR(1)        =VIR(1) + DEX*X + EPAIR*SWFDX*CXGRP
            VIR(2)        =VIR(2) + DEY*Y + EPAIR*SWFDY*CYGRP
            VIR(3)        =VIR(3) + DEZ*Z + EPAIR*SWFDZ*CZGRP
            IYES = 0
            DO KFIX=1,NFIXMM
               IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
            ENDDO
            IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
               VIR(1)     =VIR(1) - DEX*X - EPAIR*SWFDX*CXGRP
               VIR(2)     =VIR(2) - DEY*Y - EPAIR*SWFDY*CYGRP
               VIR(3)     =VIR(3) - DEZ*Z - EPAIR*SWFDZ*CZGRP
            END IF
 310     CONTINUE
 300  CONTINUE
C
 330  CONTINUE
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMPOLFMMSWF
!>
!> @brief    pol-chg energy required when SWF is used
!>
      SUBROUTINE QMMMPOLFMMSWF(DENTOT,DHF,DXY,FFGRD,CORD,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00)
C
      DIMENSION DENTOT(*),DHF(*),DXY(*),FFGRD(3,*),CORD(3,*),
     *          NONLSTQ(*)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C     HUI LI, JAN 2011, LINCOLN
C
C     INTERACTION ENERGY BETWEEN QM ELE AND MM INDUCED DIPOLES -
C     THIS ENERGY IS NOT NECESSARY WHEN COMPUTING THE TOTAL
C     ENERGY OF THE SYSTEM, BUT IS REQUIRED WHEN SWF IS USED (ONLY) FOR
C     MM INDUCED DIPOLES (TO CALCULATE THE FORCES ON INDUCED DIPOLES)
C
      IF(IDOPOL.EQ.0) RETURN
C
      L1 = NUM
      L2 = NUM*(NUM+1)/2
      CALL VALFM(LOADFM)
      LXEFI    = LOADFM   + 1
      LYEFI    = LXEFI    + L2
      LZEFI    = LYEFI    + L2
      LAST     = LZEFI    + L2
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
      IPCOUNT = ME-1
      DO 100 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 100
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 100
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),
     *             X(LXEFI),X(LYEFI),X(LZEFI),L2)
         DUM =-X(LFFDIP+3*(IFFAT-1)  )*TRACEP(DENTOT,X(LXEFI),L1)
     *        -X(LFFDIP+3*(IFFAT-1)+1)*TRACEP(DENTOT,X(LYEFI),L1)
     *        -X(LFFDIP+3*(IFFAT-1)+2)*TRACEP(DENTOT,X(LZEFI),L1)
         IF(MPLEVL.EQ.2) THEN
            DUM=DUM
     *         -X(LFFDIPMP+3*(IFFAT-1)  )*TRACEP(DHF,X(LXEFI),L1)
     *         -X(LFFDIPMP+3*(IFFAT-1)+1)*TRACEP(DHF,X(LYEFI),L1)
     *         -X(LFFDIPMP+3*(IFFAT-1)+2)*TRACEP(DHF,X(LZEFI),L1)
         END IF
         IF(TDDFTYP.NE.RNONE) THEN
            DUM=DUM
     *         -X(LFFDIPTA+3*(IFFAT-1)  )*TRACEP(DHF,X(LXEFI),L1)
     *         -X(LFFDIPTA+3*(IFFAT-1)+1)*TRACEP(DHF,X(LYEFI),L1)
     *         -X(LFFDIPTA+3*(IFFAT-1)+2)*TRACEP(DHF,X(LZEFI),L1)
     *         -X(LFFDIPXY+3*(IFFAT-1)  )*TRACEP(DXY,X(LXEFI),L1)
     *         -X(LFFDIPXY+3*(IFFAT-1)+1)*TRACEP(DXY,X(LYEFI),L1)
     *         -X(LFFDIPXY+3*(IFFAT-1)+2)*TRACEP(DXY,X(LZEFI),L1)
         END IF
C
C        - ELE FIELDS WERE SCALED BY SWF
C          SCALE THEM BACK. NOTE SFW CAN BE ZERO
C          (SWF, SWFDX ARE AVAILABLE FROM ROUTINE QMMMPOLFLDINT)
C
         CXGRP = CORD(1,IFFAT) - QMCX
         CYGRP = CORD(2,IFFAT) - QMCY
         CZGRP = CORD(3,IFFAT) - QMCZ
         PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
         PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
         PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
         CXGRP = CXGRP - PBCX
         CYGRP = CYGRP - PBCY
         CZGRP = CZGRP - PBCZ
C
         IF(SWF .LT. 1.0D-14) SWF = 1.0D-14
         DUM = DUM/SWF
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*SWFDX
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*SWFDY
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*SWFDZ
         VIR(1)        =VIR(1)         + DUM*SWFDX*CXGRP
         VIR(2)        =VIR(2)         + DUM*SWFDY*CYGRP
         VIR(3)        =VIR(3)         + DUM*SWFDZ*CZGRP
         IYES = 0
         DO KFIX=1,NFIXMM
            IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
         ENDDO
         IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
            VIR(1)     =VIR(1)         - DUM*SWFDX*CXGRP
            VIR(2)     =VIR(2)         - DUM*SWFDY*CYGRP
            VIR(3)     =VIR(3)         - DUM*SWFDZ*CZGRP
         END IF
 100  CONTINUE
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMPOLFMM
!>
!> @brief    force on MM induced dipoles due to QM electrons
!>
!> @author   Hui Li
!>           - Jan 2011
!>
!> @details  force on MM induced dipoles due to QM electrons
!>
      SUBROUTINE QMMMPOLFMM(DM,DHF,DXY,CHGINT,CHGINT2,CHGINT3,
     *                      CORD,FFGRD,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      DIMENSION DM(*),DHF(*),DXY(*),CHGINT(*),
     *          CHGINT2(*),CHGINT3(*),FFGRD(3,*),CORD(3,*),
     *          NONLSTQ(*)
C
      DIMENSION DIJ(100),XIN(432),YIN(432),ZIN(432)
      DIMENSION FIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100),W2(5),W4(5)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA ZERO,ONE,TWO,FOUR/0.0D+00,1.0D+00,2.0D+00,4.0D+00/
      DATA RLN10 /2.30258D+00/
      DATA RNONE/8HNONE    /
C
C     HUI LI, JAN 2011, LINCOLN
C
C     FORCES ON INDUCED DIPOLES BY QM ELECTRONS
C
      IF(IDOPOL.EQ.0) RETURN
C
      CALL QMMMPOLFMMSWF(DM,DHF,DXY,FFGRD,CORD,NONLSTQ)
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      DO 100 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
      IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 100
      CXGRP = CORD(1,IFFAT) - QMCX
      CYGRP = CORD(2,IFFAT) - QMCY
      CZGRP = CORD(3,IFFAT) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
      PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
      PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.SWRBQ2) GOTO 100
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
C     ----- ISHELL
C
      DO 600 II = 1,NSHELL
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GOTO 600
      END IF
      IAT= KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 580 JJ = 1,NSHELL
      IF((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 580
      END IF
      JAT= KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT+2-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 30 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 30 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
  30  CONTINUE
      CALL VCLR(CHGINT ,1,3*IJ)
      CALL VCLR(CHGINT2,1,3*IJ)
      CALL VCLR(CHGINT3,1,3*IJ)
C
C     ----- I PRIMITIVE
C
      JGMAX = J2
      DO 520 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
      CFI = CF(IG)
C
C     ----- J PRIMITIVE
C
      DO 500 JG = J1,JGMAX
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GOTO 500
      FAC =  EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      MAX = MAXJ
      NN = 0
      DUM1=ZERO
      DUM2=DUM1
      DO 170 I=MINI,MAXI
      GOTO (70,80,110,110,90,110,110,95,110,110,
     *       102,110,110,104,110,110,110,110,110,108),I
  70  DUM1=CSI*FAC
      GOTO 110
  80  DUM1=CPI*FAC
      GOTO 110
  90  DUM1=CDI*FAC
      GOTO 110
  95  IF(NORM) DUM1=DUM1*SQRT3
      GOTO 110
 102  DUM1=CFI*FAC
      GOTO 110
 104  DUM1 = DUM1 *SQRT5
      GOTO 110
 108  DUM1 = DUM1 * SQRT3
 110  CONTINUE
      DO 170 J=MINJ,MAX
      GOTO (125,130,160,160,140,160,160,150,160,160,
     *       152,160,160,154,160,160,160,160,160,156),J
  125 DUM2=DUM1*CSJ
      GOTO 160
  130 DUM2=DUM1*CPJ
      GOTO 160
  140 DUM2=DUM1*CDJ
      GOTO 160
  150 IF(NORM) DUM2=DUM2*SQRT3
      GOTO 160
  152 DUM2 = DUM1 * CFJ
      GOTO 160
  154 DUM2 = DUM2 *SQRT5
      GOTO 160
  156 DUM2 = DUM2 * SQRT3
  160 NN=NN+1
  170 DIJ(NN)=DUM2
C
C     ..... HELLMANN-FEYNMAN TERM .....
C
C     DUM = PI212*AA1/THREE
      DUM = PI212*AA1
      DO 380 I = 1,IJ
      FIJ(I) = DIJ(I)*DUM
  380 CONTINUE
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      ICC=1
C
      XX   = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      IF(NROOTS.EQ.5) CALL ROOT5
      IF(NROOTS.EQ.6) CALL ROOT6
      IF(NROOTS.GE.7) THEN
         IF(MASWRK) WRITE(IW,9008)
         CALL ABRT
      END IF
      MM = 0
      DO 401 K = 1,NROOTS
      U2 = AA*U(K)
      U4 = U2*U2
      WW = W(K)
      W2(K) = TWO *WW*U2
      W4(K) = FOUR*WW*U4
      TT = ONE/(AA+U2)
      T  =  SQRT(TT)
      X0 = (AAX+U2*CX)*TT
      Y0 = (AAY+U2*CY)*TT
      Z0 = (AAZ+U2*CZ)*TT
      IN = -4+MM
      DO 400 I = 1,LIT
      IN = IN+4
      NI = I
      DO 400 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL STVINT
      XIN(JN   ) = XINT
      YIN(JN   ) = YINT
      ZIN(JN   ) = ZINT
      CALL POLXYZ
      XIN(JN+144) = XINT
      YIN(JN+144) = YINT
      ZIN(JN+144) = ZINT
      CALL EFQXYZ
      XIN(JN+288) = XINT
      YIN(JN+288) = YINT
      ZIN(JN+288) = ZINT
  400 CONTINUE
  401 MM = MM+16
      DO 403 I = 1,IJ
      NX    = IJX(I)
      NY    = IJY(I)
      NZ    = IJZ(I)
      DUMXX = ZERO
      DUMYY = ZERO
      DUMZZ = ZERO
      DUMXY = ZERO
      DUMXZ = ZERO
      DUMYZ = ZERO
      MM    = 0
      DO 402 K = 1,NROOTS
      DUMXX= DUMXX+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM    )*W2(K)
     *            -XIN(NX+MM+288)*YIN(NY+MM    )*ZIN(NZ+MM    )*W4(K)
      DUMYY= DUMYY+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM    )*W2(K)
     *            -XIN(NX+MM    )*YIN(NY+MM+288)*ZIN(NZ+MM    )*W4(K)
      DUMZZ= DUMZZ+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM    )*W2(K)
     *            -XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM+288)*W4(K)
      DUMXY= DUMXY-XIN(NX+MM+144)*YIN(NY+MM+144)*ZIN(NZ+MM    )*W4(K)
      DUMXZ= DUMXZ-XIN(NX+MM+144)*YIN(NY+MM    )*ZIN(NZ+MM+144)*W4(K)
      DUMYZ= DUMYZ-XIN(NX+MM    )*YIN(NY+MM+144)*ZIN(NZ+MM+144)*W4(K)
  402 MM  = MM+16
      DUM = FIJ(I)*SWF
      CHGINT(ICC  ) = CHGINT(ICC  ) +
     * DUM * ( DUMXX*X(LFFDIP+3*(IFFAT-1)  )
     *       + DUMXY*X(LFFDIP+3*(IFFAT-1)+1)
     *       + DUMXZ*X(LFFDIP+3*(IFFAT-1)+2))
      CHGINT(ICC+1) = CHGINT(ICC+1) +
     * DUM * ( DUMXY*X(LFFDIP+3*(IFFAT-1)  )
     *       + DUMYY*X(LFFDIP+3*(IFFAT-1)+1)
     *       + DUMYZ*X(LFFDIP+3*(IFFAT-1)+2))
      CHGINT(ICC+2) = CHGINT(ICC+2) +
     * DUM * ( DUMXZ*X(LFFDIP+3*(IFFAT-1)  )
     *       + DUMYZ*X(LFFDIP+3*(IFFAT-1)+1)
     *       + DUMZZ*X(LFFDIP+3*(IFFAT-1)+2))
      IF(MPLEVL.EQ.2) THEN
         CHGINT2(ICC  ) = CHGINT2(ICC  ) +
     *    DUM * ( DUMXX*X(LFFDIPMP+3*(IFFAT-1)  )
     *          + DUMXY*X(LFFDIPMP+3*(IFFAT-1)+1)
     *          + DUMXZ*X(LFFDIPMP+3*(IFFAT-1)+2))
         CHGINT2(ICC+1) = CHGINT2(ICC+1) +
     *    DUM * ( DUMXY*X(LFFDIPMP+3*(IFFAT-1)  )
     *          + DUMYY*X(LFFDIPMP+3*(IFFAT-1)+1)
     *          + DUMYZ*X(LFFDIPMP+3*(IFFAT-1)+2))
         CHGINT2(ICC+2) = CHGINT2(ICC+2) +
     *    DUM * ( DUMXZ*X(LFFDIPMP+3*(IFFAT-1)  )
     *          + DUMYZ*X(LFFDIPMP+3*(IFFAT-1)+1)
     *          + DUMZZ*X(LFFDIPMP+3*(IFFAT-1)+2))
      END IF
      IF(TDDFTYP.NE.RNONE) THEN
         CHGINT2(ICC  ) = CHGINT2(ICC  ) +
     *    DUM * ( DUMXX*X(LFFDIPTA+3*(IFFAT-1)  )
     *          + DUMXY*X(LFFDIPTA+3*(IFFAT-1)+1)
     *          + DUMXZ*X(LFFDIPTA+3*(IFFAT-1)+2))
         CHGINT2(ICC+1) = CHGINT2(ICC+1) +
     *    DUM * ( DUMXY*X(LFFDIPTA+3*(IFFAT-1)  )
     *          + DUMYY*X(LFFDIPTA+3*(IFFAT-1)+1)
     *          + DUMYZ*X(LFFDIPTA+3*(IFFAT-1)+2))
         CHGINT2(ICC+2) = CHGINT2(ICC+2) +
     *    DUM * ( DUMXZ*X(LFFDIPTA+3*(IFFAT-1)  )
     *          + DUMYZ*X(LFFDIPTA+3*(IFFAT-1)+1)
     *          + DUMZZ*X(LFFDIPTA+3*(IFFAT-1)+2))
C
         CHGINT3(ICC  ) = CHGINT3(ICC  ) +
     *    DUM * ( DUMXX*X(LFFDIPXY+3*(IFFAT-1)  )
     *          + DUMXY*X(LFFDIPXY+3*(IFFAT-1)+1)
     *          + DUMXZ*X(LFFDIPXY+3*(IFFAT-1)+2))
         CHGINT3(ICC+1) = CHGINT3(ICC+1) +
     *    DUM * ( DUMXY*X(LFFDIPXY+3*(IFFAT-1)  )
     *          + DUMYY*X(LFFDIPXY+3*(IFFAT-1)+1)
     *          + DUMYZ*X(LFFDIPXY+3*(IFFAT-1)+2))
         CHGINT3(ICC+2) = CHGINT3(ICC+2) +
     *    DUM * ( DUMXZ*X(LFFDIPXY+3*(IFFAT-1)  )
     *          + DUMYZ*X(LFFDIPXY+3*(IFFAT-1)+1)
     *          + DUMZZ*X(LFFDIPXY+3*(IFFAT-1)+2))
      END IF
      ICC=ICC+3
 403  CONTINUE
 500  CONTINUE
 520  CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
C
      MAX=MAXJ
      NN=0
      ICC=1
C
      DO 550 I=MINI,MAXI
      LI=LOCI+I
      DO 550 J=MINJ,MAX
      LJ=LOCJ+J
      IF (LI-LJ) 920,940,940
  920 ID = LJ
      JD = LI
      GOTO 960
  940 ID = LI
      JD = LJ
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*CHGINT(ICC  )
      FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*CHGINT(ICC+1)
      FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*CHGINT(ICC+2)
      VIR(1)        =VIR(1)         + DUM*CHGINT(ICC  )*CX
      VIR(2)        =VIR(2)         + DUM*CHGINT(ICC+1)*CY
      VIR(3)        =VIR(3)         + DUM*CHGINT(ICC+2)*CZ
      IYES = 0
      DO KFIX=1,NFIXMM
         IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
      ENDDO
      IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
         VIR(1)     =VIR(1)         - DUM*CHGINT(ICC  )*CX
         VIR(2)     =VIR(2)         - DUM*CHGINT(ICC+1)*CY
         VIR(3)     =VIR(3)         - DUM*CHGINT(ICC+2)*CZ
      END IF
      IF(MPLEVL.EQ.2 .OR. TDDFTYP.NE.RNONE) THEN
         DUM = DHF(NN)
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*CHGINT2(ICC  )
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*CHGINT2(ICC+1)
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*CHGINT2(ICC+2)
         VIR(1)        =VIR(1)         + DUM*CHGINT2(ICC  )*CX
         VIR(2)        =VIR(2)         + DUM*CHGINT2(ICC+1)*CY
         VIR(3)        =VIR(3)         + DUM*CHGINT2(ICC+2)*CZ
         IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
            VIR(1)     =VIR(1)         - DUM*CHGINT2(ICC  )*CX
            VIR(2)     =VIR(2)         - DUM*CHGINT2(ICC+1)*CY
            VIR(3)     =VIR(3)         - DUM*CHGINT2(ICC+2)*CZ
         END IF
      END IF
      IF(TDDFTYP.NE.RNONE) THEN
         DUM = DXY(NN)
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*CHGINT3(ICC  )
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*CHGINT3(ICC+1)
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*CHGINT3(ICC+2)
         VIR(1)        =VIR(1)         + DUM*CHGINT3(ICC  )*CX
         VIR(2)        =VIR(2)         + DUM*CHGINT3(ICC+1)*CY
         VIR(3)        =VIR(3)         + DUM*CHGINT3(ICC+2)*CZ
         IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
            VIR(1)     =VIR(1)         - DUM*CHGINT3(ICC  )*CX
            VIR(2)     =VIR(2)         - DUM*CHGINT3(ICC+1)*CY
            VIR(3)     =VIR(3)         - DUM*CHGINT3(ICC+2)*CZ
         END IF
      END IF
      ICC=ICC+3
  550 CONTINUE
  580 CONTINUE
  600 CONTINUE
  100 CONTINUE
C
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN QMMMPOLFMM.  CALL A PROGRAMMER/
     *          QUANTUM CHEMIST.')
      END
C*MODULE QUANPO  *DECK QMMMPOLFQM
!>
!> @brief    force on QM electrons due to MM induced dipoles
!>
!> @author   Hui Li
!>           - Jan 2011
!>
!> @details  force on QM electrons due to MM induced dipoles
!>
      SUBROUTINE QMMMPOLFQM(DM,DHFA,DXY,DIP,DIPMP,DIPTA,DIPXY,
     *                      CORD,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL ISKIP
      LOGICAL DBG,NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      DIMENSION DM(*),DHFA(*),DXY(*),DIP(3,*),DIPMP(3,*),
     *          DIPTA(3,*),DIPXY(3,*),CORD(3,*),NONLSTQ(*)
      DIMENSION ISKIP(35),INDX(70)
      DIMENSION IX(35),IY(35),IZ(35),JX(20),JY(20),JZ(20)
      DIMENSION IJG(210),IJX(210),IJY(210),IJZ(210)
      DIMENSION XIN(200),YIN(200),ZIN(200),G(210),DIJ(210)
      DIMENSION XINMP(200),YINMP(200),ZINMP(200),GMP(210)
      DIMENSION XINTA(200),YINTA(200),ZINTA(200),GTA(210)
      DIMENSION XINXY(200),YINXY(200),ZINXY(200),GXY(210)
      DIMENSION FIJ(210)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /DSTV  / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,
     *                XJ,YJ,ZJ,NI,NJ,CX,CY,CZ
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
      PARAMETER (RLN10=2.30258D+00)
      PARAMETER (PI212=1.1283791670955D+00)
      PARAMETER (SQRT3=1.73205080756888D+00)
      PARAMETER (SQRT5=2.23606797749979D+00)
C
      DATA CHECK/8HCHECK   /, DEBUG/8HDEBUG   /, DBUGME/8HTVDER   /
C
      DATA INDX / 1, 2, 3, 4, 5, 6, 7, 8, 9,10,
     1           11,12,13,14,15,16,17,18,19,20,
     2           -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
     3           -0,-0,-0,-0,-0,
     4           -0, 1, 2, 3, 1, 2, 3, 4, 5, 6,
     5            4, 5, 6, 7, 8, 9,10,11,12,13,
     6            7, 8, 9,10,11,12,13,14,15,16,
     7           17,18,19,20,21/
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5,
     2         17, 1, 1,13,13, 5, 1, 5, 1, 9,
     3          9, 1, 9, 5, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5,
     2          1,17, 1, 5, 1,13,13, 1, 5, 9,
     3          1, 9, 5, 9, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5,
     2          1, 1,17, 1, 5, 1, 5,13,13, 1,
     3          9, 9, 5, 5, 9/
C
C
C     HUI LI, JAN 2011, LINCOLN
C     HUI LI, DEC 22, 2011
C
C     FORCES ON ELECTRONS BY INDUCED DIPOLES
C
      IF(IDOPOL.EQ.0) RETURN
C
C     INITIALIZATION FOR PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      DBG = .FALSE.
      IF (EXETYP.EQ.DEBUG  .OR. EXETYP.EQ.DBUGME  .OR.
     *    NPRINT.EQ.-3) THEN
         DBG = .TRUE.
      END IF
      IF (DBG .AND. MASWRK) WRITE (IW,9008)
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      IF (EXETYP .EQ. CHECK) GOTO 1120
C
C     ----- ISHELL
C
      DO 1060 II = 1,NSHELL
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GOTO 1060
      END IF
      IAT = KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)+1
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      DO 100 I=1,35
 100  ISKIP(I)=.TRUE.
      DO 260 I=MINI,MAXI
      GOTO (110,140,260,260,180,260,260,260,260,260,
     *       220,260,260,260,260,260,260,260,260,260),I
 110  DO 120 K=2,4
 120  ISKIP(K)=.FALSE.
      GOTO 260
 140  DO 160 K=5,10
 160  ISKIP(K)=.FALSE.
      ISKIP(1)=.FALSE.
      GOTO 260
 180  DO 200 K=2,4
 200  ISKIP(K)=.FALSE.
      DO 210 K=11,20
 210  ISKIP(K)=.FALSE.
      GOTO 260
 220  DO 240 K=5,10
 240  ISKIP(K)=.FALSE.
      DO 250 K=21,35
 250  ISKIP(K)=.FALSE.
 260  CONTINUE
C
C     ----- JSHELL
C
      DO 1040 JJ = 1,NSHELL
        IF((.NOT.NXT) .AND. GOPARR) THEN
           IPCOUNT = IPCOUNT + 1
           IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 1040
        END IF
C
      JAT = KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      N0 = 0
      IF (LIT .GE. 4) N0 = 35
      IJ = 0
      DO 340 I = 1,35
      IF (ISKIP(I)) GOTO 340
      IN = INDX(I+N0)
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 320 J = MINJ,MAXJ
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
      IJG(IJ) = IN+21*(J-MINJ)
  320 CONTINUE
  340 CONTINUE
      DO 360 I = 1,IJ
      N = IJG(I)
      G(N) = ZERO
      GMP(N) = ZERO
      GTA(N) = ZERO
      GXY(N) = ZERO
  360 CONTINUE
C
C     ----- I PRIMITIVE
C
      DO 840 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      DUM = AI+AI
      CSI = CP(IG)
      CPI = CS(IG)*DUM
      IF (LIT .EQ. 4) CPI = CD(IG)
      CDI = CP(IG)*DUM
      IF (LIT .EQ. 5) CDI = CF(IG)
      CFI = CD(IG)*DUM
      CGI = CF(IG)*DUM
C
C     ----- J PRIMITIVE
C
      DO 820 JG = J1,J2
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GOTO 820
      FAC = EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      NN = 0
      DUM1 = ZERO
      DUM2 = DUM1
      DO 600 I=1,35
      IF(ISKIP(I)) GOTO 600
      GOTO (370,380,420,420,390,420,420,420,420,420,
     1       400,420,420,420,420,420,420,420,420,420,
     2       410,420,420,420,420,420,420,420,420,420,
     3       420,420,420,420,420),I
 370  DUM1=CSI*FAC
      GOTO 420
 380  DUM1=CPI*FAC
      GOTO 420
 390  DUM1=CDI*FAC
      GOTO 420
 400  DUM1=CFI*FAC
      GOTO 420
 410  DUM1 = CGI*FAC
 420  CONTINUE
      DO 580 J=MINJ,MAXJ
      GOTO (430,440,560,560,460,560,560,480,560,560,
     1       500,560,560,520,560,560,560,560,560,540),J
  430 DUM2=DUM1*CSJ
      GOTO 560
  440 DUM2=DUM1*CPJ
      GOTO 560
  460 DUM2=DUM1*CDJ
      GOTO 560
  480 IF(NORM) DUM2=DUM2*SQRT3
      GOTO 560
  500 DUM2 = DUM1 * CFJ
      GOTO 560
  520 DUM2 = DUM2 *SQRT5
      GOTO 560
  540 DUM2 = DUM2 * SQRT3
  560 NN=NN+1
  580 DIJ(NN)=DUM2
  600 CONTINUE
C
C     ..... BASIC DIPOLE TERM
C
      DUM = 2*PI212*AA1
      DO 700 I = 1,IJ
  700 FIJ(I) = DIJ(I)*DUM
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      DO 818 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
      CXGRP = CORD(1,IFFAT) - QMCX
      CYGRP = CORD(2,IFFAT) - QMCY
      CZGRP = CORD(3,IFFAT) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP*ONEXBOX)
      PBCY  = YBOX*ANINT(CYGRP*ONEYBOX)
      PBCZ  = ZBOX*ANINT(CZGRP*ONEZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.SWRBQ2) GOTO 818
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
      XMU = DIP(1,IFFAT)
      YMU = DIP(2,IFFAT)
      ZMU = DIP(3,IFFAT)
      XMUMP = DIPMP(1,IFFAT)
      YMUMP = DIPMP(2,IFFAT)
      ZMUMP = DIPMP(3,IFFAT)
      XMUTA = DIPTA(1,IFFAT)
      YMUTA = DIPTA(2,IFFAT)
      ZMUTA = DIPTA(3,IFFAT)
      XMUXY = DIPXY(1,IFFAT)
      YMUXY = DIPXY(2,IFFAT)
      ZMUXY = DIPXY(3,IFFAT)
      XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3)CALL RT123
      IF(NROOTS.EQ.4)CALL ROOT4
      IF(NROOTS.EQ.5)CALL ROOT5
      MM = 0
      DO 740 K = 1,NROOTS
      UU = AA*U(K)
      WW = W(K)
      WW = WW*UU
      TT = ONE/(AA+UU)
      T = SQRT(TT)
      X0 = (AAX+UU*CX)*TT
      Y0 = (AAY+UU*CY)*TT
      Z0 = (AAZ+UU*CZ)*TT
      IN = -4+MM
      DO 720 I = 1,LIT
      IN = IN+4
      NI = I
      DO 720 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL VINT
      XIN(JN) = XINT
      YIN(JN) = YINT
      ZIN(JN) = ZINT*WW
      CALL PDXYZ
      XIN(JN+100) = XINT
      YIN(JN+100) = YINT
      ZIN(JN+100) = ZINT*WW
  720 CONTINUE
  740 MM = MM+20
      DO 780 I = 1,IJ
      N = IJG(I)
      NX = IJX(I)
      NY = IJY(I)
      NZ = IJZ(I)
      DUMX = ZERO
      DUMY = ZERO
      DUMZ = ZERO
      MM = 0
      DO 760 K = 1,NROOTS
      DUMX = DUMX+XIN(NX+MM+100)*YIN(NY+MM    )*ZIN(NZ+MM    )
      DUMY = DUMY+XIN(NX+MM    )*YIN(NY+MM+100)*ZIN(NZ+MM    )
      DUMZ = DUMZ+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM+100)
  760 MM = MM+20
      DUM = FIJ(I)*SWF
      G(N)   = G(N)   - DUM*(DUMX*XMU  +DUMY*YMU  +DUMZ*ZMU  )
      GMP(N) = GMP(N) - DUM*(DUMX*XMUMP+DUMY*YMUMP+DUMZ*ZMUMP)
      GTA(N) = GTA(N) - DUM*(DUMX*XMUTA+DUMY*YMUTA+DUMZ*ZMUTA)
      GXY(N) = GXY(N) - DUM*(DUMX*XMUXY+DUMY*YMUXY+DUMZ*ZMUXY)
  780 CONTINUE
  818 CONTINUE
  820 CONTINUE
  840 CONTINUE
C
C     ----- FORM INTEGRALS OVER DERIVATIVES -----
C
      NN = 0
      N = 1
      DO 900 J = MINJ,MAXJ
      IF (MINI .GT. 1) GOTO 860
      NN = NN+1
      XIN(NN) = G(N+ 1)
      YIN(NN) = G(N+ 2)
      ZIN(NN) = G(N+ 3)
      XINMP(NN) = GMP(N+ 1)
      YINMP(NN) = GMP(N+ 2)
      ZINMP(NN) = GMP(N+ 3)
      XINTA(NN) = GTA(N+ 1)
      YINTA(NN) = GTA(N+ 2)
      ZINTA(NN) = GTA(N+ 3)
      XINXY(NN) = GXY(N+ 1)
      YINXY(NN) = GXY(N+ 2)
      ZINXY(NN) = GXY(N+ 3)
      IF (MAXI .EQ. 1) GOTO 900
  860 IF (MINI .GT. 2) GOTO 880
      NN = NN+1
      XIN(NN) = (G(N+ 4)-G(N ))
      YIN(NN) = G(N+ 7)
      ZIN(NN) = G(N+ 8)
      XINMP(NN) = (GMP(N+ 4)-GMP(N ))
      YINMP(NN) = GMP(N+ 7)
      ZINMP(NN) = GMP(N+ 8)
      XINTA(NN) = (GTA(N+ 4)-GTA(N ))
      YINTA(NN) = GTA(N+ 7)
      ZINTA(NN) = GTA(N+ 8)
      XINXY(NN) = (GXY(N+ 4)-GXY(N ))
      YINXY(NN) = GXY(N+ 7)
      ZINXY(NN) = GXY(N+ 8)
      NN = NN+1
      XIN(NN) = G(N+ 7)
      YIN(NN) = (G(N+ 5)-G(N ))
      ZIN(NN) = G(N+ 9)
      XINMP(NN) = GMP(N+ 7)
      YINMP(NN) = (GMP(N+ 5)-GMP(N ))
      ZINMP(NN) = GMP(N+ 9)
      XINTA(NN) = GTA(N+ 7)
      YINTA(NN) = (GTA(N+ 5)-GTA(N ))
      ZINTA(NN) = GTA(N+ 9)
      XINXY(NN) = GXY(N+ 7)
      YINXY(NN) = (GXY(N+ 5)-GXY(N ))
      ZINXY(NN) = GXY(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = G(N+ 9)
      ZIN(NN) = (G(N+ 6)-G(N ))
      XINMP(NN) = GMP(N+ 8)
      YINMP(NN) = GMP(N+ 9)
      ZINMP(NN) = (GMP(N+ 6)-GMP(N ))
      XINTA(NN) = GTA(N+ 8)
      YINTA(NN) = GTA(N+ 9)
      ZINTA(NN) = (GTA(N+ 6)-GTA(N ))
      XINXY(NN) = GXY(N+ 8)
      YINXY(NN) = GXY(N+ 9)
      ZINXY(NN) = (GXY(N+ 6)-GXY(N ))
      IF (MAXI .EQ. 4) GOTO 900
  880 CONTINUE
      IF (MINI .GT. 5) GOTO 890
      NN = NN+1
      XIN(NN) = (G(N+ 3)-G(N )-G(N ))
      YIN(NN) = G(N+ 6)
      ZIN(NN) = G(N+ 7)
      XINMP(NN) = (GMP(N+ 3)-GMP(N )-GMP(N ))
      YINMP(NN) = GMP(N+ 6)
      ZINMP(NN) = GMP(N+ 7)
      XINTA(NN) = (GTA(N+ 3)-GTA(N )-GTA(N ))
      YINTA(NN) = GTA(N+ 6)
      ZINTA(NN) = GTA(N+ 7)
      XINXY(NN) = (GXY(N+ 3)-GXY(N )-GXY(N ))
      YINXY(NN) = GXY(N+ 6)
      ZINXY(NN) = GXY(N+ 7)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = (G(N+ 4)-G(N+ 1)-G(N+ 1))
      ZIN(NN) = G(N+ 9)
      XINMP(NN) = GMP(N+ 8)
      YINMP(NN) = (GMP(N+ 4)-GMP(N+ 1)-GMP(N+ 1))
      ZINMP(NN) = GMP(N+ 9)
      XINTA(NN) = GTA(N+ 8)
      YINTA(NN) = (GTA(N+ 4)-GTA(N+ 1)-GTA(N+ 1))
      ZINTA(NN) = GTA(N+ 9)
      XINXY(NN) = GXY(N+ 8)
      YINXY(NN) = (GXY(N+ 4)-GXY(N+ 1)-GXY(N+ 1))
      ZINXY(NN) = GXY(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+10)
      YIN(NN) = G(N+11)
      ZIN(NN) = (G(N+ 5)-G(N+ 2)-G(N+ 2))
      XINMP(NN) = GMP(N+10)
      YINMP(NN) = GMP(N+11)
      ZINMP(NN) = (GMP(N+ 5)-GMP(N+ 2)-GMP(N+ 2))
      XINTA(NN) = GTA(N+10)
      YINTA(NN) = GTA(N+11) 
      ZINTA(NN) = (GTA(N+ 5)-GTA(N+ 2)-GTA(N+ 2))
      XINXY(NN) = GXY(N+10) 
      YINXY(NN) = GXY(N+11)
      ZINXY(NN) = (GXY(N+ 5)-GXY(N+ 2)-GXY(N+ 2))
      NN = NN+1
      DUM = ONE
      IF (NORM) DUM = SQRT3
      XIN(NN) = DUM*(G(N+ 6)-G(N+ 1))
      YIN(NN) = DUM*(G(N+ 8)-G(N ))
      ZIN(NN) = DUM* G(N+12)
      XINMP(NN) = DUM*(GMP(N+ 6)-GMP(N+ 1))
      YINMP(NN) = DUM*(GMP(N+ 8)-GMP(N ))
      ZINMP(NN) = DUM* GMP(N+12)
      XINTA(NN) = DUM*(GTA(N+ 6)-GTA(N+ 1))
      YINTA(NN) = DUM*(GTA(N+ 8)-GTA(N ))
      ZINTA(NN) = DUM* GTA(N+12)
      XINXY(NN) = DUM*(GXY(N+ 6)-GXY(N+ 1))
      YINXY(NN) = DUM*(GXY(N+ 8)-GXY(N ))
      ZINXY(NN) = DUM* GXY(N+12)
      NN = NN+1
      XIN(NN) = DUM*(G(N+ 7)-G(N+ 2))
      YIN(NN) = DUM* G(N+12)
      ZIN(NN) = DUM*(G(N+10)-G(N ))
      XINMP(NN) = DUM*(GMP(N+ 7)-GMP(N+ 2))
      YINMP(NN) = DUM* GMP(N+12)
      ZINMP(NN) = DUM*(GMP(N+10)-GMP(N ))
      XINTA(NN) = DUM*(GTA(N+ 7)-GTA(N+ 2))
      YINTA(NN) = DUM* GTA(N+12)
      ZINTA(NN) = DUM*(GTA(N+10)-GTA(N ))
      XINXY(NN) = DUM*(GXY(N+ 7)-GXY(N+ 2))
      YINXY(NN) = DUM* GXY(N+12)
      ZINXY(NN) = DUM*(GXY(N+10)-GXY(N ))
      NN = NN+1
      XIN(NN) = DUM* G(N+12)
      YIN(NN) = DUM*(G(N+ 9)-G(N+ 2))
      ZIN(NN) = DUM*(G(N+11)-G(N+ 1))
      XINMP(NN) = DUM* GMP(N+12)
      YINMP(NN) = DUM*(GMP(N+ 9)-GMP(N+ 2))
      ZINMP(NN) = DUM*(GMP(N+11)-GMP(N+ 1))
      XINTA(NN) = DUM* GTA(N+12)
      YINTA(NN) = DUM*(GTA(N+ 9)-GTA(N+ 2))
      ZINTA(NN) = DUM*(GTA(N+11)-GTA(N+ 1))
      XINXY(NN) = DUM* GXY(N+12)
      YINXY(NN) = DUM*(GXY(N+ 9)-GXY(N+ 2))
      ZINXY(NN) = DUM*(GXY(N+11)-GXY(N+ 1))
      IF(MAXI.EQ.10) GOTO 900
 890  CONTINUE
      NN=NN+1
      XIN(NN)=(G(N+ 6)-G(N   )-G(N   )-G(N   ))
      YIN(NN)= G(N+ 9)
      ZIN(NN)= G(N+10)
      XINMP(NN)=(GMP(N+ 6)-GMP(N   )-GMP(N   )-GMP(N   ))
      YINMP(NN)= GMP(N+ 9)
      ZINMP(NN)= GMP(N+10)
      XINTA(NN)=(GTA(N+ 6)-GTA(N   )-GTA(N   )-GTA(N   ))
      YINTA(NN)= GTA(N+ 9)
      ZINTA(NN)= GTA(N+10)
      XINXY(NN)=(GXY(N+ 6)-GXY(N   )-GXY(N   )-GXY(N   ))
      YINXY(NN)= GXY(N+ 9)
      ZINXY(NN)= GXY(N+10)
      NN=NN+1
      XIN(NN)= G(N+11)
      YIN(NN)=(G(N+ 7)-G(N+ 1)-G(N+ 1)-G(N+ 1))
      ZIN(NN)= G(N+12)
      XINMP(NN)= GMP(N+11)
      YINMP(NN)=(GMP(N+ 7)-GMP(N+ 1)-GMP(N+ 1)-GMP(N+ 1))
      ZINMP(NN)= GMP(N+12)
      XINTA(NN)= GTA(N+11)
      YINTA(NN)=(GTA(N+ 7)-GTA(N+ 1)-GTA(N+ 1)-GTA(N+ 1))
      ZINTA(NN)= GTA(N+12)
      XINXY(NN)= GXY(N+11)
      YINXY(NN)=(GXY(N+ 7)-GXY(N+ 1)-GXY(N+ 1)-GXY(N+ 1))
      ZINXY(NN)= GXY(N+12)
      NN=NN+1
      XIN(NN)= G(N+13)
      YIN(NN)= G(N+14)
      ZIN(NN)=(G(N+ 8)-G(N+ 2)-G(N+ 2)-G(N+ 2))
      XINMP(NN)= GMP(N+13)
      YINMP(NN)= GMP(N+14)
      ZINMP(NN)=(GMP(N+ 8)-GMP(N+ 2)-GMP(N+ 2)-GMP(N+ 2))
      XINTA(NN)= GTA(N+13)
      YINTA(NN)= GTA(N+14)
      ZINTA(NN)=(GTA(N+ 8)-GTA(N+ 2)-GTA(N+ 2)-GTA(N+ 2))
      XINXY(NN)= GXY(N+13)
      YINXY(NN)= GXY(N+14)
      ZINXY(NN)=(GXY(N+ 8)-GXY(N+ 2)-GXY(N+ 2)-GXY(N+ 2))
      NN=NN+1
      DUM=ONE
      IF(NORM) DUM=SQRT5
      XIN(NN)=DUM* (G(N+ 9)-G(N+ 3)-G(N+ 3))
      YIN(NN)=DUM* (G(N+15)-G(N  ))
      ZIN(NN)=DUM* G(N+18)
      XINMP(NN)=DUM* (GMP(N+ 9)-GMP(N+ 3)-GMP(N+ 3))
      YINMP(NN)=DUM* (GMP(N+15)-GMP(N  ))
      ZINMP(NN)=DUM* GMP(N+18)
      XINTA(NN)=DUM* (GTA(N+ 9)-GTA(N+ 3)-GTA(N+ 3))
      YINTA(NN)=DUM* (GTA(N+15)-GTA(N  ))
      ZINTA(NN)=DUM* GTA(N+18)
      XINXY(NN)=DUM* (GXY(N+ 9)-GXY(N+ 3)-GXY(N+ 3))
      YINXY(NN)=DUM* (GXY(N+15)-GXY(N  ))
      ZINXY(NN)=DUM* GXY(N+18)
      NN=NN+1
      XIN(NN)=DUM* (G(N+10)-G(N+ 4)-G(N+ 4))
      YIN(NN)=DUM* G(N+18)
      ZIN(NN)=DUM* (G(N+16)-G(N  ))
      XINMP(NN)=DUM* (GMP(N+10)-GMP(N+ 4)-GMP(N+ 4))
      YINMP(NN)=DUM* GMP(N+18)
      ZINMP(NN)=DUM* (GMP(N+16)-GMP(N  ))
      XINTA(NN)=DUM* (GTA(N+10)-GTA(N+ 4)-GTA(N+ 4))
      YINTA(NN)=DUM* GTA(N+18)
      ZINTA(NN)=DUM* (GTA(N+16)-GTA(N  ))
      XINXY(NN)=DUM* (GXY(N+10)-GXY(N+ 4)-GXY(N+ 4))
      YINXY(NN)=DUM* GXY(N+18)
      ZINXY(NN)=DUM* (GXY(N+16)-GXY(N  ))
      NN=NN+1
      XIN(NN)=DUM* (G(N+15)-G(N+ 1))
      YIN(NN)=DUM* (G(N+11)-G(N+ 3)-G(N+ 3))
      ZIN(NN)=DUM*  G(N+19)
      XINMP(NN)=DUM* (GMP(N+15)-GMP(N+ 1))
      YINMP(NN)=DUM* (GMP(N+11)-GMP(N+ 3)-GMP(N+ 3))
      ZINMP(NN)=DUM*  GMP(N+19)
      XINTA(NN)=DUM* (GTA(N+15)-GTA(N+ 1))
      YINTA(NN)=DUM* (GTA(N+11)-GTA(N+ 3)-GTA(N+ 3))
      ZINTA(NN)=DUM*  GTA(N+19)
      XINXY(NN)=DUM* (GXY(N+15)-GXY(N+ 1))
      YINXY(NN)=DUM* (GXY(N+11)-GXY(N+ 3)-GXY(N+ 3))
      ZINXY(NN)=DUM*  GXY(N+19)
      NN=NN+1
      XIN(NN)=DUM* G(N+19)
      YIN(NN)=DUM* (G(N+12)-G(N+ 5)-G(N+ 5))
      ZIN(NN)=DUM* (G(N+17)-G(N+ 1))
      XINMP(NN)=DUM* GMP(N+19)
      YINMP(NN)=DUM* (GMP(N+12)-GMP(N+ 5)-GMP(N+ 5))
      ZINMP(NN)=DUM* (GMP(N+17)-GMP(N+ 1))
      XINTA(NN)=DUM* GTA(N+19)
      YINTA(NN)=DUM* (GTA(N+12)-GTA(N+ 5)-GTA(N+ 5))
      ZINTA(NN)=DUM* (GTA(N+17)-GTA(N+ 1))
      XINXY(NN)=DUM* GXY(N+19)
      YINXY(NN)=DUM* (GXY(N+12)-GXY(N+ 5)-GXY(N+ 5))
      ZINXY(NN)=DUM* (GXY(N+17)-GXY(N+ 1))
      NN=NN+1
      XIN(NN)=DUM* (G(N+16)-G(N+ 2))
      YIN(NN)=DUM*  G(N+20)
      ZIN(NN)=DUM* (G(N+13)-G(N+ 4)-G(N+ 4))
      XINMP(NN)=DUM* (GMP(N+16)-GMP(N+ 2))
      YINMP(NN)=DUM*  GMP(N+20)
      ZINMP(NN)=DUM* (GMP(N+13)-GMP(N+ 4)-GMP(N+ 4))
      XINTA(NN)=DUM* (GTA(N+16)-GTA(N+ 2))
      YINTA(NN)=DUM*  GTA(N+20)
      ZINTA(NN)=DUM* (GTA(N+13)-GTA(N+ 4)-GTA(N+ 4))
      XINXY(NN)=DUM* (GXY(N+16)-GXY(N+ 2))
      YINXY(NN)=DUM*  GXY(N+20)
      ZINXY(NN)=DUM* (GXY(N+13)-GXY(N+ 4)-GXY(N+ 4))
      NN=NN+1
      XIN(NN)=DUM*  G(N+20)
      YIN(NN)=DUM* (G(N+17)-G(N+ 2))
      ZIN(NN)=DUM* (G(N+14)-G(N+ 5)-G(N+ 5))
      XINMP(NN)=DUM*  GMP(N+20)
      YINMP(NN)=DUM* (GMP(N+17)-GMP(N+ 2))
      ZINMP(NN)=DUM* (GMP(N+14)-GMP(N+ 5)-GMP(N+ 5))
      XINTA(NN)=DUM*  GTA(N+20)
      YINTA(NN)=DUM* (GTA(N+17)-GTA(N+ 2))
      ZINTA(NN)=DUM* (GTA(N+14)-GTA(N+ 5)-GTA(N+ 5))
      XINXY(NN)=DUM*  GXY(N+20)
      YINXY(NN)=DUM* (GXY(N+17)-GXY(N+ 2))
      ZINXY(NN)=DUM* (GXY(N+14)-GXY(N+ 5)-GXY(N+ 5))
      NN=NN+1
      IF(NORM) DUM=DUM*SQRT3
      XIN(NN)=DUM* (G(N+18)-G(N+ 5))
      YIN(NN)=DUM* (G(N+19)-G(N+ 4))
      ZIN(NN)=DUM* (G(N+20)-G(N+ 3))
      XINMP(NN)=DUM* (GMP(N+18)-GMP(N+ 5))
      YINMP(NN)=DUM* (GMP(N+19)-GMP(N+ 4))
      ZINMP(NN)=DUM* (GMP(N+20)-GMP(N+ 3))
      XINTA(NN)=DUM* (GTA(N+18)-GTA(N+ 5))
      YINTA(NN)=DUM* (GTA(N+19)-GTA(N+ 4))
      ZINTA(NN)=DUM* (GTA(N+20)-GTA(N+ 3))
      XINXY(NN)=DUM* (GXY(N+18)-GXY(N+ 5))
      YINXY(NN)=DUM* (GXY(N+19)-GXY(N+ 4))
      ZINXY(NN)=DUM* (GXY(N+20)-GXY(N+ 3))
  900 N = N+21
C
C     ----- CALCULATE CONTRIBUTION TO GRADIENT -----
C
      N = 0
      DO 980 J = MINJ,MAXJ
      JN = LOCJ+J
      DO 980 I = MINI,MAXI
      N = N+1
      IN = LOCI+I
      IF (IN-JN) 920,940,940
  920 ID = JN
      JD = IN
      GOTO 960
  940 ID = IN
      JD = JN
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)+DM(NN)
      DX  = DUM*XIN(N)
      DY  = DUM*YIN(N)
      DZ  = DUM*ZIN(N)
      IF(MPLEVL.EQ.2) THEN
         DUM = DHFA(NN)+DHFA(NN)
         DX  = DX + DUM*XINMP(N)
         DY  = DY + DUM*YINMP(N)
         DZ  = DZ + DUM*ZINMP(N)
      END IF
      IF(TDDFTYP.NE.RNONE) THEN
         DUM = DHFA(NN)+DHFA(NN)
         DX  = DX + DUM*XINTA(N)
         DY  = DY + DUM*YINTA(N)
         DZ  = DZ + DUM*ZINTA(N)
         DUM = DXY(NN)+DXY(NN)
         DX  = DX + DUM*XINXY(N)
         DY  = DY + DUM*YINXY(N)
         DZ  = DZ + DUM*ZINXY(N)
      END IF
      DE(1,IAT) = DE(1,IAT)+DX
      DE(2,IAT) = DE(2,IAT)+DY
      DE(3,IAT) = DE(3,IAT)+DZ
C     - NO VIR(3) ON QM ATOMS. ALL ARE DONE ON MM ATOMS -
  980 CONTINUE
 1040 CONTINUE
 1060 CONTINUE
 1120 CONTINUE
C
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN QMMMPOLFQM.  CALL A PROGRAMMER/
     *          QUANTUM CHEMIST.')
      END
C*MODULE QUANPO  *DECK QMMMRXNFQM
!>   
!> @brief    force on QM electrons due to induced surface charges
!>   
!> @author   Dejun Si
!>           - Feb 2011
!>   
!> @details  force on QM electrons due to induced surface charges
!>
      SUBROUTINE QMMMRXNFQM(DM,DHFA,DXY,QRXN,QRXN2,QRXNMP,
     *                      QRXNTA,QRXNXY,NTS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL ISKIP
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      DIMENSION DM(*),DHFA(*),DXY(*),QRXN(*),QRXN2(*),QRXNMP(*),
     *          QRXNTA(*),QRXNXY(*)
C
      DIMENSION ISKIP(35),INDX(70)
      DIMENSION IX(35),IY(35),IZ(35),JX(20),JY(20),JZ(20)
      DIMENSION IJG(210),IJX(210),IJY(210),IJZ(210)
      DIMENSION XIN(200),YIN(200),ZIN(200),G(210),DIJ(210)
      DIMENSION XINMP(200),YINMP(200),ZINMP(200),GMP(210)
      DIMENSION XINTA(200),YINTA(200),ZINTA(200),GTA(210)
      DIMENSION XINXY(200),YINXY(200),ZINXY(200),GXY(210)
      DIMENSION FIJ(210)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /DSTV  / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,
     *                XJ,YJ,ZJ,NI,NJ,CX,CY,CZ
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / X(1)
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
      PARAMETER (RLN10=2.30258D+00)
      PARAMETER (PI212=1.1283791670955D+00)
      PARAMETER (SQRT3=1.73205080756888D+00)
      PARAMETER (SQRT5=2.23606797749979D+00)
C
      DATA CHECK/8HCHECK   /
      DATA INDX / 1, 2, 3, 4, 5, 6, 7, 8, 9,10,
     1           11,12,13,14,15,16,17,18,19,20,
     2           -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
     3           -0,-0,-0,-0,-0,
     4           -0, 1, 2, 3, 1, 2, 3, 4, 5, 6,
     5            4, 5, 6, 7, 8, 9,10,11,12,13,
     6            7, 8, 9,10,11,12,13,14,15,16,
     7           17,18,19,20,21/
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5,
     2         17, 1, 1,13,13, 5, 1, 5, 1, 9,
     3          9, 1, 9, 5, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5,
     2          1,17, 1, 5, 1,13,13, 1, 5, 9,
     3          1, 9, 5, 9, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5,
     2          1, 1,17, 1, 5, 1, 5,13,13, 1,
     3          9, 9, 5, 5, 9/
C
C     DEJUN SI, FEB 2011, LINCOLN
C     HUI LI, DEC 22, 2011
C
C     --- FORCE ON QM ELECTRONS BY SURFACE CHARGE ---
C
      IF(ISPHSOL.GE.60 .AND. RSPHSOL.LT.1.0D+30)
     *   CALL VADD(QRXN2,1,QRXN,1,QRXN,1,ISPHSOL)
C
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      IF (EXETYP .EQ. CHECK) GOTO 1120
C
C     -- ISHELL
C
      DO 1060 II = 1,NSHELL
C
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GOTO 1060
      END IF
      IAT = KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)+1
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      DO 100 I=1,35
 100  ISKIP(I)=.TRUE.
      DO 260 I=MINI,MAXI
      GOTO (110,140,260,260,180,260,260,260,260,260,
     *       220,260,260,260,260,260,260,260,260,260),I
 110  DO 120 K=2,4
 120  ISKIP(K)=.FALSE.
      GOTO 260
 140  DO 160 K=5,10
 160  ISKIP(K)=.FALSE.
      ISKIP(1)=.FALSE.
      GOTO 260
 180  DO 200 K=2,4
 200  ISKIP(K)=.FALSE.
      DO 210 K=11,20
 210  ISKIP(K)=.FALSE.
      GOTO 260
 220  DO 240 K=5,10
 240  ISKIP(K)=.FALSE.
      DO 250 K=21,35
 250  ISKIP(K)=.FALSE.
 260  CONTINUE
C
C     -- JSHELL
C
      DO 1040 JJ = 1,NSHELL
        IF((.NOT.NXT) .AND. GOPARR) THEN
           IPCOUNT = IPCOUNT + 1
           IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 1040
        END IF
C
      JAT = KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      N0 = 0
      IF (LIT .GE. 4) N0 = 35
      IJ = 0
      DO 340 I = 1,35
      IF (ISKIP(I)) GOTO 340
      IN = INDX(I+N0)
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 320 J = MINJ,MAXJ
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
      IJG(IJ) = IN+21*(J-MINJ)
  320 CONTINUE
  340 CONTINUE
      DO 360 I = 1,IJ
      N = IJG(I)
      G(N) = ZERO
      GMP(N) = ZERO
      GTA(N) = ZERO
      GXY(N) = ZERO
  360 CONTINUE
C
C     -- I PRIMITIVE
C
      DO 840 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      DUM = AI+AI
      CSI = CP(IG)
      CPI = CS(IG)*DUM
      IF (LIT .EQ. 4) CPI = CD(IG)
      CDI = CP(IG)*DUM
      IF (LIT .EQ. 5) CDI = CF(IG)
      CFI = CD(IG)*DUM
      CGI = CF(IG)*DUM
C
C     -- J PRIMITIVE
C
      DO 820 JG = J1,J2
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GOTO 820
      FAC = EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     -- DENSITY FACTOR
C
      NN = 0
      DUM1 = ZERO
      DUM2 = DUM1
      DO 600 I=1,35
      IF(ISKIP(I)) GOTO 600
      GOTO (370,380,420,420,390,420,420,420,420,420,
     *       400,420,420,420,420,420,420,420,420,420,
     *       410,420,420,420,420,420,420,420,420,420,
     *       420,420,420,420,420),I
 370  DUM1=CSI*FAC
      GOTO 420
 380  DUM1=CPI*FAC
      GOTO 420
 390  DUM1=CDI*FAC
      GOTO 420
 400  DUM1=CFI*FAC
      GOTO 420
 410  DUM1 = CGI*FAC
 420  CONTINUE
      DO 580 J=MINJ,MAXJ
      GOTO (430,440,560,560,460,560,560,480,560,560,
     *       500,560,560,520,560,560,560,560,560,540),J
  430 DUM2=DUM1*CSJ
      GOTO 560
  440 DUM2=DUM1*CPJ
      GOTO 560
  460 DUM2=DUM1*CDJ
      GOTO 560
  480 IF(NORM) DUM2=DUM2*SQRT3
      GOTO 560
  500 DUM2 = DUM1 * CFJ
      GOTO 560
  520 DUM2 = DUM2 *SQRT5
      GOTO 560
  540 DUM2 = DUM2 * SQRT3
  560 NN=NN+1
  580 DIJ(NN)=DUM2
  600 CONTINUE
C
C     ....BASIC CHARGE TERM
C
      DUM = PI212*AA1
      DO 700 I=1,IJ
 700  FIJ(I)=DIJ(I)*DUM
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
C
      DO 710 ITS = 1,NTS
      IF(IFIXSOL.EQ.0) THEN
         CX    = X(LFFXTS+ITS-1) - ZERO
         CY    = X(LFFYTS+ITS-1) - ZERO
         CZ    = X(LFFZTS+ITS-1) - ZERO
      END IF
      IF(IFIXSOL.EQ.1) THEN
         CX    = X(LFFXTSFIX+ITS-1)
         CY    = X(LFFYTSFIX+ITS-1)
         CZ    = X(LFFZTSFIX+ITS-1)
      END IF
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3)CALL RT123
      IF(NROOTS.EQ.4)CALL ROOT4
      IF(NROOTS.EQ.5)CALL ROOT5
      MM=0
      DO 806 K=1,NROOTS
      UU=AA*U(K)
      WW=W(K)
      TT=ONE/(AA+UU)
      T =SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
      IN=-4+MM
      DO 804 I=1,LIT
      IN=IN+4
      NI=I
      DO 804 J=1,LJT
      JN=IN+J
      NJ=J
      CALL VINT
      XIN(JN)=XINT
      YIN(JN)=YINT
      ZIN(JN)=ZINT*WW
 804  CONTINUE
 806  MM=MM+20
      DO 810 I=1,IJ
      N=IJG(I)
      NX=IJX(I)
      NY=IJY(I)
      NZ=IJZ(I)
      DUM=ZERO
      MM=0
      DO 808 K=1,NROOTS
      DUM=DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
 808  MM=MM+20
      DUMFIJ = DUM*FIJ(I)
      G(N)   = G(N)   - DUMFIJ*QRXN(ITS)
      GMP(N) = GMP(N) - DUMFIJ*QRXNMP(ITS)
      GTA(N) = GTA(N) - DUMFIJ*QRXNTA(ITS)
      GXY(N) = GXY(N) - DUMFIJ*QRXNXY(ITS)
 810  CONTINUE
 710  CONTINUE
C
C     -- END OF PRIMITIVE LOOPS -----
C
  820 CONTINUE
  840 CONTINUE
C
C     -- FORM INTEGRALS OVER DERIVATIVES -----
C
      NN = 0
      N = 1
      DO 900 J = MINJ,MAXJ
      IF (MINI .GT. 1) GOTO 860
      NN = NN+1
      XIN(NN) = G(N+ 1)
      YIN(NN) = G(N+ 2)
      ZIN(NN) = G(N+ 3)
      XINMP(NN) = GMP(N+ 1)
      YINMP(NN) = GMP(N+ 2)
      ZINMP(NN) = GMP(N+ 3)
      XINTA(NN) = GTA(N+ 1)
      YINTA(NN) = GTA(N+ 2)
      ZINTA(NN) = GTA(N+ 3)
      XINXY(NN) = GXY(N+ 1)
      YINXY(NN) = GXY(N+ 2)
      ZINXY(NN) = GXY(N+ 3)
      IF (MAXI .EQ. 1) GOTO 900
  860 IF (MINI .GT. 2) GOTO 880
      NN = NN+1
      XIN(NN) = (G(N+ 4)-G(N ))
      YIN(NN) = G(N+ 7)
      ZIN(NN) = G(N+ 8)
      XINMP(NN) = (GMP(N+ 4)-GMP(N ))
      YINMP(NN) = GMP(N+ 7)
      ZINMP(NN) = GMP(N+ 8)
      XINTA(NN) = (GTA(N+ 4)-GTA(N ))
      YINTA(NN) = GTA(N+ 7)
      ZINTA(NN) = GTA(N+ 8)
      XINXY(NN) = (GXY(N+ 4)-GXY(N ))
      YINXY(NN) = GXY(N+ 7)
      ZINXY(NN) = GXY(N+ 8)
      NN = NN+1
      XIN(NN) = G(N+ 7)
      YIN(NN) = (G(N+ 5)-G(N ))
      ZIN(NN) = G(N+ 9)
      XINMP(NN) = GMP(N+ 7)
      YINMP(NN) = (GMP(N+ 5)-GMP(N ))
      ZINMP(NN) = GMP(N+ 9)
      XINTA(NN) = GTA(N+ 7)
      YINTA(NN) = (GTA(N+ 5)-GTA(N ))
      ZINTA(NN) = GTA(N+ 9)
      XINXY(NN) = GXY(N+ 7)
      YINXY(NN) = (GXY(N+ 5)-GXY(N ))
      ZINXY(NN) = GXY(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = G(N+ 9)
      ZIN(NN) = (G(N+ 6)-G(N ))
      XINMP(NN) = GMP(N+ 8)
      YINMP(NN) = GMP(N+ 9)
      ZINMP(NN) = (GMP(N+ 6)-GMP(N ))
      XINTA(NN) = GTA(N+ 8)
      YINTA(NN) = GTA(N+ 9)
      ZINTA(NN) = (GTA(N+ 6)-GTA(N ))
      XINXY(NN) = GXY(N+ 8)
      YINXY(NN) = GXY(N+ 9)
      ZINXY(NN) = (GXY(N+ 6)-GXY(N ))
      IF (MAXI .EQ. 4) GOTO 900
  880 CONTINUE
      IF (MINI .GT. 5) GOTO 890
      NN = NN+1
      XIN(NN) = (G(N+ 3)-G(N )-G(N ))
      YIN(NN) = G(N+ 6)
      ZIN(NN) = G(N+ 7)
      XINMP(NN) = (GMP(N+ 3)-GMP(N )-GMP(N ))
      YINMP(NN) = GMP(N+ 6)
      ZINMP(NN) = GMP(N+ 7)
      XINTA(NN) = (GTA(N+ 3)-GTA(N )-GTA(N ))
      YINTA(NN) = GTA(N+ 6)
      ZINTA(NN) = GTA(N+ 7)
      XINXY(NN) = (GXY(N+ 3)-GXY(N )-GXY(N ))
      YINXY(NN) = GXY(N+ 6)
      ZINXY(NN) = GXY(N+ 7)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = (G(N+ 4)-G(N+ 1)-G(N+ 1))
      ZIN(NN) = G(N+ 9)
      XINMP(NN) = GMP(N+ 8)
      YINMP(NN) = (GMP(N+ 4)-GMP(N+ 1)-GMP(N+ 1))
      ZINMP(NN) = GMP(N+ 9)
      XINTA(NN) = GTA(N+ 8)
      YINTA(NN) = (GTA(N+ 4)-GTA(N+ 1)-GTA(N+ 1))
      ZINTA(NN) = GTA(N+ 9)
      XINXY(NN) = GXY(N+ 8)
      YINXY(NN) = (GXY(N+ 4)-GXY(N+ 1)-GXY(N+ 1))
      ZINXY(NN) = GXY(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+10)
      YIN(NN) = G(N+11)
      ZIN(NN) = (G(N+ 5)-G(N+ 2)-G(N+ 2))
      XINMP(NN) = GMP(N+10)
      YINMP(NN) = GMP(N+11)
      ZINMP(NN) = (GMP(N+ 5)-GMP(N+ 2)-GMP(N+ 2))
      XINTA(NN) = GTA(N+10)
      YINTA(NN) = GTA(N+11)
      ZINTA(NN) = (GTA(N+ 5)-GTA(N+ 2)-GTA(N+ 2))
      XINXY(NN) = GXY(N+10)
      YINXY(NN) = GXY(N+11)
      ZINXY(NN) = (GXY(N+ 5)-GXY(N+ 2)-GXY(N+ 2))
      NN = NN+1
      DUM = ONE
      IF (NORM) DUM = SQRT3
      XIN(NN) = DUM*(G(N+ 6)-G(N+ 1))
      YIN(NN) = DUM*(G(N+ 8)-G(N ))
      ZIN(NN) = DUM* G(N+12)
      XINMP(NN) = DUM*(GMP(N+ 6)-GMP(N+ 1))
      YINMP(NN) = DUM*(GMP(N+ 8)-GMP(N ))
      ZINMP(NN) = DUM* GMP(N+12)
      XINTA(NN) = DUM*(GTA(N+ 6)-GTA(N+ 1))
      YINTA(NN) = DUM*(GTA(N+ 8)-GTA(N ))
      ZINTA(NN) = DUM* GTA(N+12)
      XINXY(NN) = DUM*(GXY(N+ 6)-GXY(N+ 1))
      YINXY(NN) = DUM*(GXY(N+ 8)-GXY(N ))
      ZINXY(NN) = DUM* GXY(N+12)
      NN = NN+1
      XIN(NN) = DUM*(G(N+ 7)-G(N+ 2))
      YIN(NN) = DUM* G(N+12)
      ZIN(NN) = DUM*(G(N+10)-G(N ))
      XINMP(NN) = DUM*(GMP(N+ 7)-GMP(N+ 2))
      YINMP(NN) = DUM* GMP(N+12)
      ZINMP(NN) = DUM*(GMP(N+10)-GMP(N ))
      XINTA(NN) = DUM*(GTA(N+ 7)-GTA(N+ 2))
      YINTA(NN) = DUM* GTA(N+12)
      ZINTA(NN) = DUM*(GTA(N+10)-GTA(N ))
      XINXY(NN) = DUM*(GXY(N+ 7)-GXY(N+ 2))
      YINXY(NN) = DUM* GXY(N+12)
      ZINXY(NN) = DUM*(GXY(N+10)-GXY(N ))
      NN = NN+1
      XIN(NN) = DUM* G(N+12)
      YIN(NN) = DUM*(G(N+ 9)-G(N+ 2))
      ZIN(NN) = DUM*(G(N+11)-G(N+ 1))
      XINMP(NN) = DUM* GMP(N+12)
      YINMP(NN) = DUM*(GMP(N+ 9)-GMP(N+ 2))
      ZINMP(NN) = DUM*(GMP(N+11)-GMP(N+ 1))
      XINTA(NN) = DUM* GTA(N+12)
      YINTA(NN) = DUM*(GTA(N+ 9)-GTA(N+ 2))
      ZINTA(NN) = DUM*(GTA(N+11)-GTA(N+ 1))
      XINXY(NN) = DUM* GXY(N+12)
      YINXY(NN) = DUM*(GXY(N+ 9)-GXY(N+ 2))
      ZINXY(NN) = DUM*(GXY(N+11)-GXY(N+ 1))
      IF(MAXI.EQ.10) GOTO 900
 890  CONTINUE
      NN=NN+1
      XIN(NN)=(G(N+ 6)-G(N   )-G(N   )-G(N   ))
      YIN(NN)= G(N+ 9)
      ZIN(NN)= G(N+10)
      XINMP(NN)=(GMP(N+ 6)-GMP(N   )-GMP(N   )-GMP(N   ))
      YINMP(NN)= GMP(N+ 9)
      ZINMP(NN)= GMP(N+10)
      XINTA(NN)=(GTA(N+ 6)-GTA(N   )-GTA(N   )-GTA(N   ))
      YINTA(NN)= GTA(N+ 9)
      ZINTA(NN)= GTA(N+10)
      XINXY(NN)=(GXY(N+ 6)-GXY(N   )-GXY(N   )-GXY(N   ))
      YINXY(NN)= GXY(N+ 9)
      ZINXY(NN)= GXY(N+10)
      NN=NN+1
      XIN(NN)= G(N+11)
      YIN(NN)=(G(N+ 7)-G(N+ 1)-G(N+ 1)-G(N+ 1))
      ZIN(NN)= G(N+12)
      XINMP(NN)= GMP(N+11)
      YINMP(NN)=(GMP(N+ 7)-GMP(N+ 1)-GMP(N+ 1)-GMP(N+ 1))
      ZINMP(NN)= GMP(N+12)
      XINTA(NN)= GTA(N+11)
      YINTA(NN)=(GTA(N+ 7)-GTA(N+ 1)-GTA(N+ 1)-GTA(N+ 1))
      ZINTA(NN)= GTA(N+12)
      XINXY(NN)= GXY(N+11)
      YINXY(NN)=(GXY(N+ 7)-GXY(N+ 1)-GXY(N+ 1)-GXY(N+ 1))
      ZINXY(NN)= GXY(N+12)
      NN=NN+1
      XIN(NN)= G(N+13)
      YIN(NN)= G(N+14)
      ZIN(NN)=(G(N+ 8)-G(N+ 2)-G(N+ 2)-G(N+ 2))
      XINMP(NN)= GMP(N+13)
      YINMP(NN)= GMP(N+14)
      ZINMP(NN)=(GMP(N+ 8)-GMP(N+ 2)-GMP(N+ 2)-GMP(N+ 2))
      XINTA(NN)= GTA(N+13)
      YINTA(NN)= GTA(N+14)
      ZINTA(NN)=(GTA(N+ 8)-GTA(N+ 2)-GTA(N+ 2)-GTA(N+ 2))
      XINXY(NN)= GXY(N+13)
      YINXY(NN)= GXY(N+14)
      ZINXY(NN)=(GXY(N+ 8)-GXY(N+ 2)-GXY(N+ 2)-GXY(N+ 2))
      NN=NN+1
      DUM=ONE
      IF(NORM) DUM=SQRT5
      XIN(NN)=DUM* (G(N+ 9)-G(N+ 3)-G(N+ 3))
      YIN(NN)=DUM* (G(N+15)-G(N  ))
      ZIN(NN)=DUM* G(N+18)
      XINMP(NN)=DUM* (GMP(N+ 9)-GMP(N+ 3)-GMP(N+ 3))
      YINMP(NN)=DUM* (GMP(N+15)-GMP(N  ))
      ZINMP(NN)=DUM* GMP(N+18)
      XINTA(NN)=DUM* (GTA(N+ 9)-GTA(N+ 3)-GTA(N+ 3))
      YINTA(NN)=DUM* (GTA(N+15)-GTA(N  ))
      ZINTA(NN)=DUM* GTA(N+18)
      XINXY(NN)=DUM* (GXY(N+ 9)-GXY(N+ 3)-GXY(N+ 3))
      YINXY(NN)=DUM* (GXY(N+15)-GXY(N  ))
      ZINXY(NN)=DUM* GXY(N+18)
      NN=NN+1
      XIN(NN)=DUM* (G(N+10)-G(N+ 4)-G(N+ 4))
      YIN(NN)=DUM* G(N+18)
      ZIN(NN)=DUM* (G(N+16)-G(N  ))
      XINMP(NN)=DUM* (GMP(N+10)-GMP(N+ 4)-GMP(N+ 4))
      YINMP(NN)=DUM* GMP(N+18)
      ZINMP(NN)=DUM* (GMP(N+16)-GMP(N  ))
      XINTA(NN)=DUM* (GTA(N+10)-GTA(N+ 4)-GTA(N+ 4))
      YINTA(NN)=DUM* GTA(N+18)
      ZINTA(NN)=DUM* (GTA(N+16)-GTA(N  ))
      XINXY(NN)=DUM* (GXY(N+10)-GXY(N+ 4)-GXY(N+ 4))
      YINXY(NN)=DUM* GXY(N+18)
      ZINXY(NN)=DUM* (GXY(N+16)-GXY(N  ))
      NN=NN+1
      XIN(NN)=DUM* (G(N+15)-G(N+ 1))
      YIN(NN)=DUM* (G(N+11)-G(N+ 3)-G(N+ 3))
      ZIN(NN)=DUM*  G(N+19)
      XINMP(NN)=DUM* (GMP(N+15)-GMP(N+ 1))
      YINMP(NN)=DUM* (GMP(N+11)-GMP(N+ 3)-GMP(N+ 3))
      ZINMP(NN)=DUM*  GMP(N+19)
      XINTA(NN)=DUM* (GTA(N+15)-GTA(N+ 1))
      YINTA(NN)=DUM* (GTA(N+11)-GTA(N+ 3)-GTA(N+ 3))
      ZINTA(NN)=DUM*  GTA(N+19)
      XINXY(NN)=DUM* (GXY(N+15)-GXY(N+ 1))
      YINXY(NN)=DUM* (GXY(N+11)-GXY(N+ 3)-GXY(N+ 3))
      ZINXY(NN)=DUM*  GXY(N+19)
      NN=NN+1
      XIN(NN)=DUM* G(N+19)
      YIN(NN)=DUM* (G(N+12)-G(N+ 5)-G(N+ 5))
      ZIN(NN)=DUM* (G(N+17)-G(N+ 1))
      XINMP(NN)=DUM* GMP(N+19)
      YINMP(NN)=DUM* (GMP(N+12)-GMP(N+ 5)-GMP(N+ 5))
      ZINMP(NN)=DUM* (GMP(N+17)-GMP(N+ 1))
      XINTA(NN)=DUM* GTA(N+19)
      YINTA(NN)=DUM* (GTA(N+12)-GTA(N+ 5)-GTA(N+ 5))
      ZINTA(NN)=DUM* (GTA(N+17)-GTA(N+ 1))
      XINXY(NN)=DUM* GXY(N+19)
      YINXY(NN)=DUM* (GXY(N+12)-GXY(N+ 5)-GXY(N+ 5))
      ZINXY(NN)=DUM* (GXY(N+17)-GXY(N+ 1))
      NN=NN+1
      XIN(NN)=DUM* (G(N+16)-G(N+ 2))
      YIN(NN)=DUM*  G(N+20)
      ZIN(NN)=DUM* (G(N+13)-G(N+ 4)-G(N+ 4))
      XINMP(NN)=DUM* (GMP(N+16)-GMP(N+ 2))
      YINMP(NN)=DUM*  GMP(N+20)
      ZINMP(NN)=DUM* (GMP(N+13)-GMP(N+ 4)-GMP(N+ 4))
      XINTA(NN)=DUM* (GTA(N+16)-GTA(N+ 2))
      YINTA(NN)=DUM*  GTA(N+20)
      ZINTA(NN)=DUM* (GTA(N+13)-GTA(N+ 4)-GTA(N+ 4))
      XINXY(NN)=DUM* (GXY(N+16)-GXY(N+ 2))
      YINXY(NN)=DUM*  GXY(N+20)
      ZINXY(NN)=DUM* (GXY(N+13)-GXY(N+ 4)-GXY(N+ 4))
      NN=NN+1
      XIN(NN)=DUM*  G(N+20)
      YIN(NN)=DUM* (G(N+17)-G(N+ 2))
      ZIN(NN)=DUM* (G(N+14)-G(N+ 5)-G(N+ 5))
      XINMP(NN)=DUM*  GMP(N+20)
      YINMP(NN)=DUM* (GMP(N+17)-GMP(N+ 2))
      ZINMP(NN)=DUM* (GMP(N+14)-GMP(N+ 5)-GMP(N+ 5))
      XINTA(NN)=DUM*  GTA(N+20)
      YINTA(NN)=DUM* (GTA(N+17)-GTA(N+ 2))
      ZINTA(NN)=DUM* (GTA(N+14)-GTA(N+ 5)-GTA(N+ 5))
      XINXY(NN)=DUM*  GXY(N+20)
      YINXY(NN)=DUM* (GXY(N+17)-GXY(N+ 2))
      ZINXY(NN)=DUM* (GXY(N+14)-GXY(N+ 5)-GXY(N+ 5))
      NN=NN+1
      IF(NORM) DUM=DUM*SQRT3
      XIN(NN)=DUM* (G(N+18)-G(N+ 5))
      YIN(NN)=DUM* (G(N+19)-G(N+ 4))
      ZIN(NN)=DUM* (G(N+20)-G(N+ 3))
      XINMP(NN)=DUM* (GMP(N+18)-GMP(N+ 5))
      YINMP(NN)=DUM* (GMP(N+19)-GMP(N+ 4))
      ZINMP(NN)=DUM* (GMP(N+20)-GMP(N+ 3))
      XINTA(NN)=DUM* (GTA(N+18)-GTA(N+ 5))
      YINTA(NN)=DUM* (GTA(N+19)-GTA(N+ 4))
      ZINTA(NN)=DUM* (GTA(N+20)-GTA(N+ 3))
      XINXY(NN)=DUM* (GXY(N+18)-GXY(N+ 5))
      YINXY(NN)=DUM* (GXY(N+19)-GXY(N+ 4))
      ZINXY(NN)=DUM* (GXY(N+20)-GXY(N+ 3))
  900 N = N+21
C
C     -- CALCULATE CONTRIBUTION TO GRADIENT -----
C
      N = 0
      DO 980 J = MINJ,MAXJ
      JN = LOCJ+J
      DO 980 I = MINI,MAXI
      N = N+1
      IN = LOCI+I
      IF (IN-JN) 920,940,940
  920 ID = JN
      JD = IN
      GOTO 960
  940 ID = IN
      JD = JN
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)+DM(NN)
      DX  = DUM*XIN(N)
      DY  = DUM*YIN(N)
      DZ  = DUM*ZIN(N)
      IF(MPLEVL.EQ.2) THEN
         DUM = DHFA(NN)+DHFA(NN)
         DX  = DX + DUM*XINMP(N)
         DY  = DY + DUM*YINMP(N)
         DZ  = DZ + DUM*ZINMP(N)
      END IF
      IF(TDDFTYP.NE.RNONE) THEN
         DUM = DHFA(NN)+DHFA(NN)
         DX  = DX + DUM*XINTA(N)
         DY  = DY + DUM*YINTA(N)
         DZ  = DZ + DUM*ZINTA(N)
         DUM = DXY(NN)+DXY(NN)
         DX  = DX + DUM*XINXY(N)
         DY  = DY + DUM*YINXY(N)
         DZ  = DZ + DUM*ZINXY(N)
      END IF
      DE(1,IAT) = DE(1,IAT)+DX
      DE(2,IAT) = DE(2,IAT)+DY
      DE(3,IAT) = DE(3,IAT)+DZ
      VIR(1) =VIR(1) + DX*C(1,IAT)
      VIR(2) =VIR(2) + DY*C(2,IAT)
      VIR(3) =VIR(3) + DZ*C(3,IAT)
      IYES = 0
      DO KFIX=1,NFIXQM
         IF(IAT.EQ.IFIXQM(KFIX)) IYES = 1
      ENDDO
      IF(IYES.EQ.1) THEN
         VIR(1) =VIR(1) - DX*C(1,IAT)
         VIR(2) =VIR(2) - DY*C(2,IAT)
         VIR(3) =VIR(3) - DZ*C(3,IAT)
      END IF
  980 CONTINUE
 1040 CONTINUE
 1060 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
 1120 CONTINUE
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
C
      IF(ISPHSOL.GE.60 .AND. RSPHSOL.LT.1.0D+30)
     *   CALL VSUB(QRXN2,1,QRXN,1,QRXN,1,ISPHSOL)
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK QMMMRXNFMM
!>   
!> @brief    force on induced surface charges due to QM electrons
!>   
!> @author   Hui Li   
!>           - Dec 2012
!>   
!> @details  force on induced surface charges due to QM electrons
!>
      SUBROUTINE QMMMRXNFMM(DM,DHF,DXY,CHGINT,
     *                      QFIX,QFIXMP,QFIXTA,QFIXXY,
     *                      FFGRD,IDATOM,
     *                      XTSFIX,YTSFIX,ZTSFIX)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      DIMENSION DM(*),DHF(*),DXY(*),CHGINT(*),
     *          QFIX(*),QFIXMP(*),QFIXTA(*),QFIXXY(*),
     *          FFGRD(3,*),IDATOM(*),XTSFIX(*),YTSFIX(*),ZTSFIX(*)
C
      DIMENSION DIJ(100),XIN(432),YIN(432),ZIN(432)
      DIMENSION FIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA RLN10 /2.30258D+00/
C
C     HUI LI, DEC 12, 2011, LINCOLN
C
C     FORCES ON NFFTS BY QM ELECTRONS
C
      IF(IFIXSOL.EQ.0) RETURN
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      DO 100 IFFTS = 1, NFFTS
      IFFAT = IDATOM(IFFTS)
      CX    = XTSFIX(IFFTS)
      CY    = YTSFIX(IFFTS)
      CZ    = ZTSFIX(IFFTS)
      IF(QFIX(IFFTS).EQ.ZERO) GOTO 100
C
C     -- ISHELL
C
      DO 600 II = 1,NSHELL
C
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GOTO 600
      END IF
      IAT= KATOM(II)
C
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     -- JSHELL
C
      DO 580 JJ = 1,NSHELL
      IF((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 580
      END IF
      JAT= KATOM(JJ)
C
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 50 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 50 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
  50  CONTINUE
      CALL VCLR(CHGINT,1,3*IJ)
C
C     -- I PRIMITIVE
C
      JGMAX = J2
      DO 520 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
      CFI = CF(IG)
C
C     -- J PRIMITIVE
C
      DO 500 JG = J1,JGMAX
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GOTO 500
      FAC =  EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     -- DENSITY FACTOR
C
      MAX = MAXJ
      NN = 0
      DUM1=ZERO
      DUM2=DUM1
      DO 170 I=MINI,MAXI
      GOTO (70,80,110,110,90,110,110,95,110,110,
     1       102,110,110,104,110,110,110,110,110,108),I
  70  DUM1=CSI*FAC
      GOTO 110
  80  DUM1=CPI*FAC
      GOTO 110
  90  DUM1=CDI*FAC
      GOTO 110
  95  IF(NORM) DUM1=DUM1*SQRT3
      GOTO 110
 102  DUM1=CFI*FAC
      GOTO 110
 104  DUM1 = DUM1 *SQRT5
      GOTO 110
 108  DUM1 = DUM1 * SQRT3
 110  CONTINUE
      DO 170 J=MINJ,MAX
      GOTO (125,130,160,160,140,160,160,150,160,160,
     1       152,160,160,154,160,160,160,160,160,156),J
  125 DUM2=DUM1*CSJ
      GOTO 160
  130 DUM2=DUM1*CPJ
      GOTO 160
  140 DUM2=DUM1*CDJ
      GOTO 160
  150 IF(NORM) DUM2=DUM2*SQRT3
      GOTO 160
  152 DUM2 = DUM1 * CFJ
      GOTO 160
  154 DUM2 = DUM2 *SQRT5
      GOTO 160
  156 DUM2 = DUM2 * SQRT3
  160 NN=NN+1
  170 DIJ(NN)=DUM2
C
C     ..... HELLMANN-FEYNMAN TERM .....
C
      DUM = PI212*AA1
      DUM=DUM+DUM
      DO 380 I = 1,IJ
      FIJ(I) = DIJ(I)*DUM
  380 CONTINUE
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      ICC=1
C
      XX   = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      IF(NROOTS.EQ.5) CALL ROOT5
      IF(NROOTS.EQ.6) CALL ROOT6
      IF(NROOTS.GE.7) THEN
         WRITE(IW,9008)
         CALL ABRT
      END IF
      MM = 0
      DO 401 K = 1,NROOTS
      UU = AA*U(K)
      WW = W(K)
      WW = WW*UU
      TT = ONE/(AA+UU)
      T  = SQRT(TT)
      X0 = (AAX+UU*CX)*TT
      Y0 = (AAY+UU*CY)*TT
      Z0 = (AAZ+UU*CZ)*TT
      IN = -4+MM
      DO 400 I = 1,LIT
      IN = IN+4
      NI = I
      DO 400 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL STVINT
      XIN(JN   ) = XINT
      YIN(JN   ) = YINT
      ZIN(JN   ) = ZINT*WW
      CALL POLXYZ
      XIN(JN+125) = XINT
      YIN(JN+125) = YINT
      ZIN(JN+125) = ZINT*WW
  400 CONTINUE
  401 MM = MM+16
      DO 403 I = 1,IJ
      NX    = IJX(I)
      NY    = IJY(I)
      NZ    = IJZ(I)
      DUMX  = ZERO
      DUMY  = ZERO
      DUMZ  = ZERO
      MM    = 0
      DO 402 K = 1,NROOTS
      DUMX= DUMX+XIN(NX+MM+125)*YIN(NY+MM    )*ZIN(NZ+MM    )
      DUMY= DUMY+XIN(NX+MM    )*YIN(NY+MM+125)*ZIN(NZ+MM    )
      DUMZ= DUMZ+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM+125)
  402 MM  = MM+16
      DUM = FIJ(I)
      CHGINT(ICC  )=CHGINT(ICC  )-DUM*DUMX
      CHGINT(ICC+1)=CHGINT(ICC+1)-DUM*DUMY
      CHGINT(ICC+2)=CHGINT(ICC+2)-DUM*DUMZ
      ICC=ICC+3
 403  CONTINUE
 500  CONTINUE
 520  CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
C
      MAX=MAXJ
      ICC=1
      DO 550 I=MINI,MAXI
      LI=LOCI+I
      DO 550 J=MINJ,MAX
      LJ=LOCJ+J
      IF (LI-LJ) 920,940,940
  920 ID = LJ
      JD = LI
      GOTO 960
  940 ID = LI
      JD = LJ
  960 NN = (ID*(ID-1))/2+JD
C
      DUM = DM(NN)*QFIX(IFFTS)
      IF(MPLEVL.EQ.2)      DUM = DUM + DHF(NN)*QFIXMP(IFFTS)
      IF(TDDFTYP.NE.RNONE) DUM = DUM + DHF(NN)*QFIXTA(IFFTS)
     *                               + DXY(NN)*QFIXXY(IFFTS)
      IF(IFFAT.LE.NFFAT) THEN
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*CHGINT(ICC  )
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*CHGINT(ICC+1)
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*CHGINT(ICC+2)
      END IF
      IF(IFFAT.GT.NFFAT) THEN
         IAT = IFFAT - NFFAT
         DE(1,IAT)=DE(1,IAT) + DUM*CHGINT(ICC  )
         DE(2,IAT)=DE(2,IAT) + DUM*CHGINT(ICC+1)
         DE(3,IAT)=DE(3,IAT) + DUM*CHGINT(ICC+2)
      END IF
      ICC=ICC+3
  550 CONTINUE
  580 CONTINUE
  600 CONTINUE
  100 CONTINUE
C
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN EFDINT.  CALL A PROGRAMMER/QUANTUM CHEMIST.')
      END
C*MODULE QUANPO  *DECK QMMMRXNFMMNUCMM
!>   
!> @brief    force due to induced surface charges
!>    
!> @author   Dejun Si
!>           - Feb 2012
!>    
!> @details  force on induced charges, MM charge and induced dipoles,
!>           and QM nuc charges
!>
      SUBROUTINE QMMMRXNFMMNUCMM(CORD,FFGRD,CHARG,
     *                           DIP,QRXN,QRXN2,NTS,
     *                           IDATOM,IDDAI,DAI,AFIX,
     *                           QRXNMP,QRXNTA,QRXNXY,
     *                           DIPMP,DIPTA,DIPXY)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (PT5=0.5D+00, ONE=1.0D+00, TWO=2.0D+00,
     *           THREE=3.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),DIP(3,*),QRXN(NTS),
     *          QRXN2(NTS),IDATOM(NTS),IDDAI(41,*),DAI(3,40,*),AFIX(*),
     *          QRXNMP(*),QRXNTA(*),QRXNXY(*),
     *          DIPMP(3,*),DIPTA(3,*),DIPXY(3,*)
C
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / XX(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C
C     DEJUN SI, FEB 2011, LINCOLN
C     HUI LI, DEC 12, 2011
C
      SQRTPI=SQRT(PI)
C
      IF(ISPHSOL.GE.60 .AND. RSPHSOL.LT.1.0D+30)
     *CALL VADD(QRXN2,1,QRXN,1,QRXN,1,NTS)
C
C     - FORCE BETWEEN SURFACE CHARGES
C
      IF(IFIXSOL.EQ.1) THEN
         IF(NTSATM.EQ. 60) DISM0 = 0.4000D+00*TOBOHR
         IF(NTSATM.EQ.240) DISM0 = 0.2000D+00*TOBOHR
         IF(NTSATM.EQ.960) DISM0 = 0.1000D+00*TOBOHR
         SCALE   = (FIXEPS - ONE)/FIXEPS
         ONESCALE= ONE/SCALE
         FACTORX = PT5*1.07D+00*SQRTPI*ONESCALE
         IPCOUNT  = ME - 1
         DO 400 I = 1, NTS
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 400
            END IF
            IFFAT  = IDATOM(I)
            QI     = QRXN(I)
            QIMP   = QRXNMP(I)
            QITA   = QRXNTA(I)
            QIXY   = QRXNXY(I)
            DO 420 J = I+1, NTS
               JFFAT  = IDATOM(J)
               QJ     = QRXN(J)
               QJMP   = QRXNMP(J)
               QJTA   = QRXNTA(J)
               QJXY   = QRXNXY(J)
               QIQJ   = QI*QJ
               IF(MPLEVL.EQ.2)      QIQJ=QIQJ+QI*QJMP+QIMP*QJ
               IF(TDDFTYP.NE.RNONE) QIQJ=QIQJ+QI*QJTA+QITA*QJ
     *                                       +TWO*QIXY*QJXY
               X      = XX(LFFXTSFIX+I-1) - XX(LFFXTSFIX+J-1)
               Y      = XX(LFFYTSFIX+I-1) - XX(LFFYTSFIX+J-1)
               Z      = XX(LFFZTSFIX+I-1) - XX(LFFZTSFIX+J-1)
               R2     = X*X+Y*Y+Z*Z
               R      = SQRT(R2)
               IF(R.GT.DISM0) THEN
                  R3     = R2*R
                  ONER3  = ONE/R3
                  DUM    = -QIQJ*ONER3*ONESCALE
               ELSE
                  DUM    = -QIQJ*ONESCALE/DISM0**3
               END IF
               DX     = DUM*X
               DY     = DUM*Y
               DZ     = DUM*Z
               IF(IFFAT.LE.NFFAT) THEN
                  FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DX
                  FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DY
                  FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DZ
               END IF
               IF(IFFAT.GT.NFFAT) THEN
                  IAT = IFFAT - NFFAT
                  DE(1,IAT)=DE(1,IAT) + DX
                  DE(2,IAT)=DE(2,IAT) + DY
                  DE(3,IAT)=DE(3,IAT) + DZ
               END IF
               IF(JFFAT.LE.NFFAT) THEN
                  FFGRD(1,JFFAT)=FFGRD(1,JFFAT) - DX
                  FFGRD(2,JFFAT)=FFGRD(2,JFFAT) - DY
                  FFGRD(3,JFFAT)=FFGRD(3,JFFAT) - DZ
               END IF
               IF(JFFAT.GT.NFFAT) THEN
                  JAT = JFFAT - NFFAT
                  DE(1,JAT)=DE(1,JAT) - DX
                  DE(2,JAT)=DE(2,JAT) - DY
                  DE(3,JAT)=DE(3,JAT) - DZ
               END IF
 420        CONTINUE
            IF(AFIX(I).GT.1.0D-08) THEN
               DUMQ = QI**2
               IF(MPLEVL.EQ.2)      DUMQ=DUMQ+TWO*QI*QIMP
               IF(TDDFTYP.NE.RNONE) DUMQ=DUMQ+TWO*(QI*QITA+QIXY*QIXY)
               DUM =-FACTORX*DUMQ/SQRT(AFIX(I)**3)
               DO 430 III = 1, IDDAI(41,I)
                  MFFAT = IDDAI(III,I)
                  IF(MFFAT.LE.NFFAT) THEN
                     FFGRD(1,MFFAT)=FFGRD(1,MFFAT) + DUM*DAI(1,III,I)
                     FFGRD(2,MFFAT)=FFGRD(2,MFFAT) + DUM*DAI(2,III,I)
                     FFGRD(3,MFFAT)=FFGRD(3,MFFAT) + DUM*DAI(3,III,I)
                  END IF
                  IF(MFFAT.GT.NFFAT) THEN
                     MAT = MFFAT - NFFAT
                     DE(1,MAT)=DE(1,MAT) + DUM*DAI(1,III,I)
                     DE(2,MAT)=DE(2,MAT) + DUM*DAI(2,III,I)
                     DE(3,MAT)=DE(3,MAT) + DUM*DAI(3,III,I)
                  END IF
 430           CONTINUE
            END IF
 400     CONTINUE
      END IF
C
C     - FORCE BETWEEN MM CHARGE/DIPOLE AND ASC
C
      IPCOUNT = ME - 1
      DO 600 JTS = 1, NTS
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 600
         END IF
         IF(IFIXSOL.EQ.0) THEN
            XJ    = XX(LFFXTS+JTS-1)
            YJ    = XX(LFFYTS+JTS-1)
            ZJ    = XX(LFFZTS+JTS-1)
         END IF
         IF(IFIXSOL.EQ.1) THEN
            XJ    = XX(LFFXTSFIX+JTS-1)
            YJ    = XX(LFFYTSFIX+JTS-1)
            ZJ    = XX(LFFZTSFIX+JTS-1)
            JFFAT = IDATOM(JTS)
         END IF
         QJ    = QRXN(JTS)
         QJMP  = QRXNMP(JTS)
         QJTA  = QRXNTA(JTS)
         QJXY  = QRXNXY(JTS)
         DO 610 IFFAT=1,NFFAT
            QIFFAT= CHARG(IFFAT)
            DIX   = DIP(1,IFFAT)
            DIY   = DIP(2,IFFAT)
            DIZ   = DIP(3,IFFAT)
            DIXMP = DIPMP(1,IFFAT)
            DIYMP = DIPMP(2,IFFAT)
            DIZMP = DIPMP(3,IFFAT)
            DIXTA = DIPTA(1,IFFAT)
            DIYTA = DIPTA(2,IFFAT)
            DIZTA = DIPTA(3,IFFAT)
            DIXXY = DIPXY(1,IFFAT)
            DIYXY = DIPXY(2,IFFAT)
            DIZXY = DIPXY(3,IFFAT)
            XI    = CORD(1,IFFAT)
            YI    = CORD(2,IFFAT)
            ZI    = CORD(3,IFFAT)
            X     = XI-XJ
            Y     = YI-YJ
            Z     = ZI-ZJ
            R2    = X*X + Y*Y + Z*Z
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            ONER5 = ONER3*ONER2
            DUM   = -QIFFAT*QJ*ONER3
            DXA   = DUM*X
            DYA   = DUM*Y
            DZA   = DUM*Z
            QJONER3= QJ*ONER3
            QJDOT = THREE*ONER5*(DIX*X+DIY*Y+DIZ*Z)*QJ
            DXB   = -DIX*QJONER3 + QJDOT*X
            DYB   = -DIY*QJONER3 + QJDOT*Y
            DZB   = -DIZ*QJONER3 + QJDOT*Z
            IF(MPLEVL.EQ.2)THEN
               DUM   = -QIFFAT*QJMP*ONER3
               DXA   = DXA + DUM*X
               DYA   = DYA + DUM*Y
               DZA   = DZA + DUM*Z
               QJONER3= QJMP*ONER3
               QJDOT = THREE*ONER5*(DIX*X+DIY*Y+DIZ*Z)*QJMP
               DXB   = DXB -DIX*QJONER3 + QJDOT*X
               DYB   = DYB -DIY*QJONER3 + QJDOT*Y
               DZB   = DZB -DIZ*QJONER3 + QJDOT*Z
               QJONER3= QJ*ONER3
               QJDOT = THREE*ONER5*(DIXMP*X+DIYMP*Y+DIZMP*Z)*QJ
               DXB   = DXB -DIXMP*QJONER3 + QJDOT*X
               DYB   = DYB -DIYMP*QJONER3 + QJDOT*Y
               DZB   = DZB -DIZMP*QJONER3 + QJDOT*Z
            END IF
            IF(TDDFTYP.NE.RNONE) THEN
               DUM   = -QIFFAT*QJTA*ONER3
               DXA   = DXA + DUM*X
               DYA   = DYA + DUM*Y
               DZA   = DZA + DUM*Z
               QJONER3= QJTA*ONER3
               QJDOT = THREE*ONER5*(DIX*X+DIY*Y+DIZ*Z)*QJTA
               DXB   = DXB -DIX*QJONER3 + QJDOT*X
               DYB   = DYB -DIY*QJONER3 + QJDOT*Y
               DZB   = DZB -DIZ*QJONER3 + QJDOT*Z
               QJONER3= QJ*ONER3
               QJDOT = THREE*ONER5*(DIXTA*X+DIYTA*Y+DIZTA*Z)*QJ
               DXB   = DXB -DIXTA*QJONER3 + QJDOT*X
               DYB   = DYB -DIYTA*QJONER3 + QJDOT*Y
               DZB   = DZB -DIZTA*QJONER3 + QJDOT*Z
               QJONER3= QJXY*ONER3
               QJDOT = THREE*ONER5*(DIXXY*X+DIYXY*Y+DIZXY*Z)*QJXY
               DXB   = DXB -TWO*(DIXXY*QJONER3 - QJDOT*X)
               DYB   = DYB -TWO*(DIYXY*QJONER3 - QJDOT*Y)
               DZB   = DZB -TWO*(DIZXY*QJONER3 - QJDOT*Z)
            END IF
            FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DXA + DXB
            FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DYA + DYB
            FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DZA + DZB
            VIR(1) =VIR(1) + (DXA + DXB)*CORD(1,IFFAT)
            VIR(2) =VIR(2) + (DYA + DYB)*CORD(2,IFFAT)
            VIR(3) =VIR(3) + (DZA + DZB)*CORD(3,IFFAT)
            IYES = 0
            DO KFIX=1,NFIXMM
               IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
            ENDDO
            IF(IYES.EQ.1) THEN
               VIR(1) =VIR(1) - (DXA + DXB)*CORD(1,IFFAT)
               VIR(2) =VIR(2) - (DYA + DYB)*CORD(2,IFFAT)
               VIR(3) =VIR(3) - (DZA + DZB)*CORD(3,IFFAT)
            END IF
            IF(IFIXSOL.EQ.1) THEN
               IF(JFFAT.LE.NFFAT) THEN
                  FFGRD(1,JFFAT)=FFGRD(1,JFFAT) - DXA - DXB
                  FFGRD(2,JFFAT)=FFGRD(2,JFFAT) - DYA - DYB
                  FFGRD(3,JFFAT)=FFGRD(3,JFFAT) - DZA - DZB
               END IF
               IF(JFFAT.GT.NFFAT) THEN
                  JAT = JFFAT - NFFAT
                  DE(1,JAT)=DE(1,JAT) - DXA - DXB
                  DE(2,JAT)=DE(2,JAT) - DYA - DYB
                  DE(3,JAT)=DE(3,JAT) - DZA - DZB
               END IF
            END IF
 610     CONTINUE
 600  CONTINUE
C
C     - FORCE BETWEEN QM NUC AND ASC
C
      IPCOUNT = ME - 1
      DO 700 JTS = 1, NTS
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 700
         END IF
         IF(IFIXSOL.EQ.0) THEN
            XJ    = XX(LFFXTS+JTS-1)
            YJ    = XX(LFFYTS+JTS-1)
            ZJ    = XX(LFFZTS+JTS-1)
         END IF
         IF(IFIXSOL.EQ.1) THEN
            XJ    = XX(LFFXTSFIX+JTS-1)
            YJ    = XX(LFFYTSFIX+JTS-1)
            ZJ    = XX(LFFZTSFIX+JTS-1)
            JFFAT = IDATOM(JTS)
         END IF
         QJ    = QRXN(JTS)
         IF(MPLEVL.EQ.2)      QJ = QJ + QRXNMP(JTS)
         IF(TDDFTYP.NE.RNONE) QJ = QJ + QRXNTA(JTS)
         DO 710 IAT=1,NAT
            QIAT  = ZAN(IAT)
            XI    = C(1,IAT)
            YI    = C(2,IAT)
            ZI    = C(3,IAT)
            X     = XI - XJ
            Y     = YI - YJ
            Z     = ZI - ZJ
            R2    = (XI-XJ)**2 + (YI-YJ)**2 + (ZI-ZJ)**2
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            DUM   = -QIAT*QJ*ONER3
            DX    = DUM*X
            DY    = DUM*Y
            DZ    = DUM*Z
            DE(1,IAT) = DE(1,IAT) + DX 
            DE(2,IAT) = DE(2,IAT) + DY
            DE(3,IAT) = DE(3,IAT) + DZ
            VIR(1)    =VIR(1) + DX*C(1,IAT)
            VIR(2)    =VIR(2) + DY*C(2,IAT)
            VIR(3)    =VIR(3) + DZ*C(3,IAT)
            IYES = 0
            DO KFIX=1,NFIXQM
               IF(IAT.EQ.IFIXQM(KFIX)) IYES = 1
            ENDDO
            IF(IYES.EQ.1) THEN
               VIR(1)    =VIR(1) - DX*C(1,IAT)
               VIR(2)    =VIR(2) - DY*C(2,IAT)
               VIR(3)    =VIR(3) - DZ*C(3,IAT)
            END IF
            IF(IFIXSOL.EQ.1) THEN
               IF(JFFAT.LE.NFFAT) THEN
                  FFGRD(1,JFFAT)=FFGRD(1,JFFAT) - DX
                  FFGRD(2,JFFAT)=FFGRD(2,JFFAT) - DY
                  FFGRD(3,JFFAT)=FFGRD(3,JFFAT) - DZ
               END IF
               IF(JFFAT.GT.NFFAT) THEN
                  JAT = JFFAT - NFFAT
                  DE(1,JAT)=DE(1,JAT) - DX
                  DE(2,JAT)=DE(2,JAT) - DY
                  DE(3,JAT)=DE(3,JAT) - DZ
               END IF
            END IF
 710     CONTINUE
 700  CONTINUE
C
      IF(ISPHSOL.GE.60 .AND. RSPHSOL.LT.1.0D+30)
     *CALL VSUB(QRXN2,1,QRXN,1,QRXN,1,NTS)
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMRXNPOTNUCMM
      SUBROUTINE QMMMRXNPOTNUCMM(CORD,CHARG,XTS,YTS,ZTS,POT1,NTS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
C
      DIMENSION CORD(3,*),CHARG(*),XTS(NTS),YTS(NTS),ZTS(NTS),POT1(NTS)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, FEB 2011, LINCOLN
C
C
C     --  POT1: POTENTIAL AT SURFACE DUE TO NUC AND CHG --
C
      CALL VCLR(POT1,1,NTS)
      IF(ISPHSOL.LT.60) RETURN
      IF(RSPHSOL.GE.1.0D+30) RETURN
C
      IPCOUNT = ME - 1
      DO 300 ITS=1, NTS
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 300
         END IF
         DO JAT=1,NAT
            R2 =  (XTS(ITS)-C(1,JAT))**2
     *           +(YTS(ITS)-C(2,JAT))**2
     *           +(ZTS(ITS)-C(3,JAT))**2
            R  = SQRT(R2)
            POT1(ITS) = POT1(ITS)+ZAN(JAT)/R
         ENDDO
         DO JFFAT=1,NFFAT
            R2 =  (XTS(ITS) - CORD(1,JFFAT))**2
     *           +(YTS(ITS) - CORD(2,JFFAT))**2
     *           +(ZTS(ITS) - CORD(3,JFFAT))**2
            R  = SQRT(R2)
            POT1(ITS) = POT1(ITS)+CHARG(JFFAT)/R
         ENDDO
 300  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2405,POT1,NTS)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLZVEC
      SUBROUTINE FFPOLZVEC(U,UNXT,CMO)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00,FOUR=4.0D+00)
      LOGICAL OUTPUT,MP2ENG,UMP2GD,ZAPTGD
      DOUBLE PRECISION U(*),UNXT(*),CMO(NBF,*)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /MP2XTR/ NBF,NACORE,NBSQ,NBTR,NSTR,MXSHL,NACT,NOCC
     *,               NVIR,NOV,NOSQ,NVSQ,NOTR,NVTR,NCP1,NOP1
     *,               NATR,ICHANL,OUTPUT,MP2ENG,IOST,NMOS,UMP2GD
      COMMON /ZAPTGR/ NOCD,NOCD1,NOCS,NOCSTR,IXYEXC,ICHIX,ITIA,IZVEC
     *,               ZAPTGD
      COMMON /FMCOM / XX(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0.AND.IFIXSOL.EQ.0.AND.ISPHSOL.EQ.0) RETURN
C
      NUM  = NBF
      L1   = NUM
      L2   = (NUM*(NUM+1))/2
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LXT      = LPAO     + NBSQ
      LPMN     = LXT      + NBSQ
      LPMO     = LPMN     + NBTR
      LDIPTMP  = LPMO     + NBSQ
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM - 1
      CALL GETFM(NEED)
C
      IF(ZAPTGD) THEN
C        - YJ BLOCK = NOCD*NOCS
         CALL MRARTR(U,NOCD,NOCD,NOCS,CMO(1,NOCD+1),NBF,NBF,XX(LXT),NBF)
         CALL DGEMM('N','N',NBF,NBF,NOCD,ONE,CMO,NBF,XX(LXT),
     *              NBF,ZERO,XX(LPAO),NBF)
C        - BJ BLOCK = NVIR*NOCD
         CALL MRARTR(U(NOCS*NOCD+1),NVIR,NVIR,NOCD,CMO,NBF,NBF,
     *               XX(LXT),NBF)
         CALL DGEMM('N','N',NBF,NBF,NVIR,TWO,CMO(1,NOCD+NOCS+1),
     *              NBF,XX(LXT),
     *              NBF,ONE,XX(LPAO),NBF)
C        - BY BLOCK = NVIR*NOCS
         CALL MRARTR(U(NOCS*NOCD+NVIR*NOCD+1),NVIR,NVIR,NOCS,
     *               CMO(1,NOCD+1),NBF,NBF,XX(LXT),NBF)
         CALL DGEMM('N','N',NBF,NBF,NVIR,ONE,CMO(1,NOCD+NOCS+1),
     *              NBF,XX(LXT),
     *              NBF,ONE,XX(LPAO),NBF)
      ELSE
         CALL MRARTR(U,NVIR,NVIR,NOCC,CMO,NBF,NBF,XX(LXT),NBF)
         CALL DGEMM('N','N',NBF,NBF,NVIR,ONE,CMO(1,NOP1),NBF,XX(LXT),
     *              NBF,ZERO,XX(LPAO),NBF)
      END IF
C
C     -- MAKE SQUARE MATRIX INTO TRIANGLE ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(NBTR,FOUR,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
      IF(ZAPTGD) THEN
         IV2=0
         IF(NOCS.GT.0)THEN
C        - XI BLOCK = NOCD*NOCS
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO(1,NOCD+1),NBF,
     *               NOCS,XX(LXT),NBF)
         CALL DGEMM('T','N',NOCD,NOCS,NBF,ONE,CMO,NBF,
     *           XX(LXT),NBF,ZERO,XX(LPMO),NOCD)
         KKK = 0
         DO II = 1,NOCS
            DO JJ = 1,NOCD
               IV2 = IV2+1
               KKK = KKK+1
               UNXT(IV2)=UNXT(IV2)+0.25D+00*XX(LPMO+KKK-1)
            ENDDO
         ENDDO
         END IF
C        - AI BLOCK = NVIR*NOCD
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCD,XX(LXT),NBF)
         CALL DGEMM('T','N',NVIR,NOCD,NBF,ONE,CMO(1,NOCD+NOCS+1),NBF,
     *           XX(LXT),NBF,ZERO,XX(LPMO),NVIR)
         KKK = 0
         DO II = 1,NOCD
            DO JJ = 1,NVIR
               IV2 = IV2+1
               KKK = KKK+1
               UNXT(IV2)=UNXT(IV2)+0.50D+00*XX(LPMO+KKK-1)
            ENDDO
         ENDDO
C        - AX BLOCK = NVIR*NOCS
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO(1,NOCD+1),
     *               NBF,NOCS,XX(LXT),NBF)
         CALL DGEMM('T','N',NVIR,NOCS,NBF,ONE,CMO(1,NOCD+NOCS+1),NBF,
     *           XX(LXT),NBF,ZERO,XX(LPMO),NVIR)
         KKK = 0
         DO II = 1,NOCS
            DO JJ = 1,NVIR
               IV2 = IV2+1
               KKK = KKK+1
               UNXT(IV2)=UNXT(IV2)+0.25D+00*XX(LPMO+KKK-1)
            ENDDO
         ENDDO
      ELSE
C        ---- TRANSFORM BMN3 TO MO BASIS ----
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCC,XX(LXT),NBF)
         CALL DGEMM('T','N',NVIR,NOCC,NBF,ONE,CMO(1,NOP1),NBF,
     *              XX(LXT),NBF,ZERO,XX(LPMO),NVIR)
C
         IV2 = 0
         DO II = 1,NOCC
            DO JJ = 1,NVIR
               IV2 = IV2 + 1
               UNXT(IV2)=UNXT(IV2) + XX(LPMO+IV2-1)
            ENDDO
         ENDDO
      END IF
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOL1PDM
      SUBROUTINE FFPOL1PDM(PMAT,WMAT,CMO)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00, TWO=2.0D+00)
      LOGICAL OUTPUT,MP2ENG,UMP2GD,ZAPTGD
      DOUBLE PRECISION CMO(NBF,*),PMAT(NBF,*),WMAT(NBF,*)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / XX(1)
      COMMON /MP2XTR/ NBF,NACORE,NBSQ,NBTR,NSTR,MXSHL,NACT,NOCC
     *,               NVIR,NOV,NOSQ,NVSQ,NOTR,NVTR,NCP1,NOP1
     *,               NATR,ICHANL,OUTPUT,MP2ENG,IOST,NMOS,UMP2GD
      COMMON /ZAPTGR/ NOCD,NOCD1,NOCS,NOCSTR,IXYEXC,ICHIX,ITIA,IZ
     *,               ZAPTGD
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0.AND.IFIXSOL.EQ.0.AND.ISPHSOL.EQ.0) RETURN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LXT      = LPAO     + NBSQ
      LPMN     = LXT      + NBSQ
      LPMO     = LPMN     + NBTR
      LDIPTMP  = LPMO     + NBSQ
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
C     -- CONVERT MO DENSITY MATRIX TO AO --
      CALL CACT(NBF,NMOS,
     *          PMAT,NBF,
     *          CMO,NBF,
     *          XX(LPAO),NBF,XX(LXT))
C     -- SYMMETRIZE P(AO) ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(NBTR,TWO,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
      IF(ZAPTGD) THEN
C        - XI BLOCK = NOCS*NOCD
         IF(NOCS.GT.0)THEN
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCD,XX(LXT),NBF)
         CALL DGEMM('T','N',NOCS,NOCD,NBF,ONE,CMO(1,NOCD+1),
     *              NBF,XX(LXT),NBF,ZERO,XX(LPMO),NOCS)
         DO II = 1,NOCS
            DO JJ = 1,NOCD
               WMAT(JJ,II+NOCD)=WMAT(JJ,II+NOCD)
     *            + 0.50D+00*XX(LPMO+(JJ-1)*NOCS+II-1)
C                   HERE SHOULD BE 0.5    EQ (64)
            ENDDO
         ENDDO
         END IF
C        - AI BLOCK = NVIR*NOCD
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCD,XX(LXT),NBF)
         CALL DGEMM('T','N',NVIR,NOCD,NBF,ONE,CMO(1,NOCD+NOCS+1),
     *              NBF,XX(LXT),NBF,ZERO,XX(LPMO),NVIR)
         DO II = 1,NVIR
            DO JJ = 1,NOCD
               WMAT(JJ,II+NOCD+NOCS)=WMAT(JJ,II+NOCD+NOCS)
     *            + XX(LPMO+(JJ-1)*NVIR+II-1)
C                   HERE SHOULD BE 1.0   EQ (65)
            ENDDO
         ENDDO
C        - AX BLOCK = NVIR*NOCS
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO(1,NOCD+1),NBF,
     *               NOCS,XX(LXT),NBF)
         CALL DGEMM('T','N',NVIR,NOCS,NBF,ONE,CMO(1,NOCD+NOCS+1),
     *              NBF,XX(LXT),NBF,ZERO,XX(LPMO),NVIR)
         DO II = 1,NVIR
            DO JJ = 1,NOCS
               WMAT(NOCD+JJ,II+NOCD+NOCS)=WMAT(NOCD+JJ,II+NOCD+NOCS)
     *            + 0.50D+00*XX(LPMO+(JJ-1)*NVIR+II-1)
C                   HERE SHOULD BE 0.5    EQ (66)
            ENDDO
         ENDDO
      ELSE
C        -- TRANSFORM TO MO --
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCC,XX(LXT),NBF)
         CALL DGEMM('T','N',NVIR,NOCC,NBF,ONE,CMO(1,NOP1),NBF,XX(LXT)
     *              ,NBF,ZERO,XX(LPMO),NVIR)
         DO II = 1,NVIR
            DO JJ = 1,NOCC
               WMAT(II+NOCC,JJ)=WMAT(II+NOCC,JJ)
     *                         +XX(LPMO+(JJ-1)*NVIR+II-1)
            ENDDO
         ENDDO
      END IF
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLWOV
      SUBROUTINE FFPOLWOV(PMAT,WMAT,CMO)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00)
      LOGICAL OUTPUT,MP2ENG,UMP2GD,ZAPTGD
      DOUBLE PRECISION PMAT(NBF,*),WMAT(NBF,*),CMO(NBF,*)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /MP2XTR/ NBF,NACORE,NBSQ,NBTR,NSTR,MXSHL,NACT,NOCC
     *,               NVIR,NOV,NOSQ,NVSQ,NOTR,NVTR,NCP1,NOP1
     *,               NATR,ICHANL,OUTPUT,MP2ENG,IOST,NMOS,UMP2GD
      COMMON /FMCOM / XX(1)
      COMMON /ZAPTGR/ NOCD,NOCD1,NOCS,NOCSTR,IXYEXC,ICHIX,ITIA,IZ
     *,               ZAPTGD
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0.AND.IFIXSOL.EQ.0.AND.ISPHSOL.EQ.0) RETURN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LXT      = LPAO     + NBSQ
      LPMN     = LXT      + NBSQ
      LPMO     = LPMN     + NBTR
      LDIPTMP  = LPMO     + NOCC*NOCC
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL MRARTR(PMAT,NBF,NBF,NBF,CMO,NBF,NBF,XX(LXT),NBF)
      CALL DGEMM('N','N',NBF,NBF,NBF,ONE,CMO,NBF,XX(LXT),
     *           NBF,ZERO,XX(LPAO),NBF)
C
C     -- MAKE SQUARE MATRIX INTO TRIANGLE ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(NBTR,TWO,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
      IF(ZAPTGD) THEN
C        - IJ BLOCK = NOCD*NOCD
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCD,XX(LXT),NBF)
         CALL DGEMM('T','N',NOCD,NOCD,NBF,ONE,CMO,NBF,
     *              XX(LXT),NBF,ZERO,XX(LPMO),NOCD)
         DO I = 1, NOCD
            DO J = 1, NOCD
               WMAT(J,I) = WMAT(J,I)-XX(LPMO+(J-1)*NOCD+I-1)
C                    HERE SHOULD BE 1.00     EQ(57)
            ENDDO
         ENDDO
C        - XI BLOCK = NOCS*NOCD
         IF(NOCS.GT.0)THEN
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCD,XX(LXT),NBF)
         CALL DGEMM('T','N',NOCS,NOCD,NBF,ONE,CMO(1,NOCD+1),NBF,
     *              XX(LXT),NBF,ZERO,XX(LPMO),NOCS)
         DO I = 1, NOCS
            DO J = 1, NOCD
               WMAT(J,NOCD+I) = WMAT(J,NOCD+I)
     *                  -0.50D+00*XX(LPMO+(J-1)*NOCS+I-1)
               WMAT(NOCD+I,J) = WMAT(J,NOCD+I)
C                    HERE SHOULD BE 0.50    BUT EQ(60) SAYS 1.0. ??
            ENDDO
         ENDDO
C        - XX BLOCK = NOCS*NOCS
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO(1,NOCD+1),
     *               NBF,NOCS,XX(LXT),NBF)
         CALL DGEMM('T','N',NOCS,NOCS,NBF,ONE,CMO(1,NOCD+1),NBF,
     *              XX(LXT),NBF,ZERO,XX(LPMO),NOCS)
         DO I = 1, NOCS
            DO J = 1, NOCS
               WMAT(NOCD+J,NOCD+I) = WMAT(NOCD+J,NOCD+I)
     *                  -0.50D+00*XX(LPMO+(J-1)*NOCS+I-1)
C                    HERE SHOULD BE 0.50     EQ(58)
            ENDDO
         ENDDO
         END IF
      ELSE
C        ---- TRANSFORM BMN3 TO MO BASIS ----
         CALL VCLR(XX(LXT),1,NBSQ)
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCC,XX(LXT),NBF)
         CALL DGEMM('T','N',NOCC,NOCC,NBF,ONE,CMO,NBF,XX(LXT),NBF,
     *              ZERO,XX(LPMO),NOCC)
C
         DO J = 1, NOCC
            DO I = 1, NOCC
               WMAT(I,J) = WMAT(I,J) - XX(LPMO+(J-1)*NOCC+I-1)
            ENDDO
         ENDDO
      END IF
C
      CALL RETFM(NEED)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOL1IMS
      SUBROUTINE FFPOL1IMS(PMN,LAI,CMO,NOCC,NVIR,NBF)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,FOUR=4.0D+00)
C
      DOUBLE PRECISION CMO(NBF,*),PMN(*),LAI(NOCC,NVIR)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / XX(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0.AND.IFIXSOL.EQ.0.AND.ISPHSOL.EQ.0) RETURN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      L3   = NBF*NBF
      NOP1 = NOCC+1
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPMN     = LBMN     + L2
      LPAO     = LPMN     + L2
      LPMO     = LPAO     + L3
      LXT      = LPMO     + NVIR*NOCC
      LDIPTMP  = LXT      + L3
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
C     -- SYMMETRIZE PMN ---
      CALL SQTR(PMN,XX(LPMN),NBF)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
C     -- TRANSFORM PAO TO MO BASIS --
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCC,XX(LXT),NBF)
      CALL DGEMM('T','N',NVIR,NOCC,NBF,ONE,CMO(1,NOP1),NBF,XX(LXT)
     *           ,NBF,ZERO,XX(LPMO),NVIR)
C
      DO II = 1,NVIR
         DO JJ = 1,NOCC
            LAI(JJ,II)=LAI(JJ,II)+FOUR*XX(LPMO+(JJ-1)*NVIR+II-1)
         ENDDO
      ENDDO
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLZIMS
      SUBROUTINE FFPOLZIMS(GMVEC0,GMVEC1,NOCC,NVIR,NBF,CMO,ENG,FACTOR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,FOUR=4.0D+00)
C
      DOUBLE PRECISION CMO(NBF,NBF),ENG(*),
     *                 GMVEC0(NOCC,NVIR),GMVEC1(NOCC,NVIR)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / XX(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0.AND.IFIXSOL.EQ.0.AND.ISPHSOL.EQ.0) RETURN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      L3   = NBF*NBF
      NOP1 = NOCC+1
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPMN     = LBMN     + L2
      LPAO     = LPMN     + L2
      LPMO     = LPAO     + L3
      LXT      = LPMO     + NVIR*NOCC
      LDIPTMP  = LXT      + L3
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
C     -- TRANSPOSE GMVEC0 TO LPMO --
      DO IA=1,NVIR
         DO II=1,NOCC
            XX(LPMO+(II-1)*NVIR+IA-1)=GMVEC0(II,IA)
         ENDDO
      ENDDO
C
      CALL MRARTR(XX(LPMO),NVIR,NVIR,NOCC,CMO,NBF,NBF,XX(LXT),NBF)
      CALL DGEMM('N','N',NBF,NBF,NVIR,ONE,CMO(1,NOP1),NBF,XX(LXT),
     *           NBF,ZERO,XX(LPAO),NBF)
C
C     -- SYMMETRIZE PAO ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(L2,FOUR,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
C     -- TRANSFORM PAO TO MO BASIS --
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCC,XX(LXT),NBF)
      CALL DGEMM('T','N',NVIR,NOCC,NBF,ONE,CMO(1,NOP1),NBF,XX(LXT)
     *           ,NBF,ZERO,XX(LPMO),NVIR)
C
      IV2 = 0
      DO II = 1,NOCC
         DO JJ = 1,NVIR
            IV2 = IV2 + 1
            ENGA= ENG(JJ+NOCC)
            GMVEC1(II,JJ)=GMVEC1(II,JJ)
     *                    +FACTOR*XX(LPMO+IV2-1)/(ENGA-ENG(II))
         ENDDO
      ENDDO
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLWIMS
      SUBROUTINE FFPOLWIMS(PMN,WIJ,NOCC,NBF,CMO)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00)
C
      DOUBLE PRECISION CMO(NBF*NBF),WIJ(NOCC,*),PMN(NBF,NBF)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / XX(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0.AND.IFIXSOL.EQ.0.AND.ISPHSOL.EQ.0) RETURN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      L3   = NBF*NBF
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPMN     = LBMN     + L2
      LPAO     = LPMN     + L2
      LPMO     = LPAO     + L3
      LXT      = LPMO     + NOCC*NOCC
      LDIPTMP  = LXT      + L3
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
C     -- MAKE SQUARE MATRIX INTO TRIANGLE ---
      CALL SQTR(PMN,XX(LPMN),NBF)
      CALL DSCAL(L2,TWO,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
C     ---- TRANSFORM PAO TO MO BASIS ----
      CALL VCLR(XX(LXT),1,L3)
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCC,XX(LXT),NBF)
      CALL DGEMM('T','N',NOCC,NOCC,NBF,ONE,CMO,NBF,XX(LXT),NBF,
     *           ZERO,XX(LPMO),NOCC)
C
      DO J = 1, NOCC
         DO I = 1, NOCC
            WIJ(I,J) = WIJ(I,J) - XX(LPMO+(J-1)*NOCC+I-1)
         ENDDO
      ENDDO
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLBMN
      SUBROUTINE FFPOLBMN(PMN,Y,NBF)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (ONE=1.0D+00)
C
      DIMENSION PMN(*),Y(*)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / X(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0.AND.IFIXSOL.EQ.0.AND.ISPHSOL.EQ.0) RETURN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      L3   = NBF*NBF
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LDIPTMP  = LPAO     + L3
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
      CALL VCLR(X(LBMN),1,L2)
      CALL QMMMPOLINT2(X(LBMN),PMN,X(LDIPTMP),L2,L1,
     *                 X(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(X(LBMN),X(LPAO),L1,1)
C
C     -- ADD X(LPAO) TO Y --
      CALL DAXPY(L3,ONE,X(LPAO),1,Y,1)
      CALL RETFM(NEED)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLBMNAB
      SUBROUTINE FFPOLBMNAB(PMNA,YA,PMNB,YB,NBF)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (ONE=1.0D+00)
C
      DIMENSION PMNA(*),YA(*),PMNB(*),YB(*)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / X(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0.AND.IFIXSOL.EQ.0.AND.ISPHSOL.EQ.0) RETURN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      L3   = NBF*NBF
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LDIPTMP  = LPAO     + L3
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
      CALL VCLR(X(LBMN),1,L2)
      CALL VADD(PMNA,1,PMNB,1,PMNB,1,L2)
      CALL QMMMPOLINT2(X(LBMN),PMNB,X(LDIPTMP),L2,L1,
     *                 X(LFFNONLSTQ))
      CALL VSUB(PMNA,1,PMNB,1,PMNB,1,L2)
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(X(LBMN),X(LPAO),L1,1)
C
C     -- ADD X(LPAO) TO YA AND YB --
      CALL DAXPY(L3,ONE,X(LPAO),1,YA,1)
      CALL DAXPY(L3,ONE,X(LPAO),1,YB,1)
      CALL RETFM(NEED)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLZVECAB
      SUBROUTINE FFPOLZVECAB(UA,UB,UNXTA,UNXTB,CMOA,CMOB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,FOUR=4.0D+00)
      LOGICAL OUTPUT,MP2ENG,UMP2GD
      DOUBLE PRECISION UA(*),UNXTA(*),CMOA(NBF,*),
     *                 UB(*),UNXTB(*),CMOB(NBF,*)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /MP2PAR/ OSPT,CODEMP,SCSPT,TOL,METHOD,NWORD,MEMPRI,MPPROP,
     *                NACORE_MP2PAR,NBCORE_MP2PAR,NOA,NOB,NO,NBF_MP2PAR,
     *                NOMIT,MOCPHF,MAXITC
      COMMON /MP2XTR/ NBF,NACORE,NBSQ,NBTR,NSTR,MXSHL,NACT,NOCC
     *,               NVIR,NOV,NOSQ,NVSQ,NOTR,NVTR,NCP1,NOP1
     *,               NATR,ICHANL,OUTPUT,MP2ENG,IOST,NMOS,UMP2GD
      COMMON /UMP2XB/ NBCORE,NACTB,NOCCB,NVIRB,NOVB,NOSB,NVSB,NOTB,
     *                NVTB,NCP1B,NOP1B,NATB,IOSTB,NOCCBLD
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / XX(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0.AND.IFIXSOL.EQ.0.AND.ISPHSOL.EQ.0) RETURN
C
      NUM  = NBF
      L1   = NUM
      L2   = (NUM*(NUM+1))/2
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LXT      = LPAO     + NBSQ
      LPMN     = LXT      + NBSQ
      LPMO     = LPMN     + NBTR
      LDIPTMP  = LPMO     + NVIR*NOCC
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM - 1
      CALL GETFM(NEED)
C
      CALL MRARTR(UB,NVIRB,NVIRB,NOB,CMOB,NBF,NBF,XX(LXT),NBF)
      CALL DGEMM('N','N',NBF,NBF,NVIRB,ONE,CMOB(1,NOP1B),NBF,XX(LXT),
     *           NBF,ZERO,XX(LPAO),NBF)
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL MRARTR(UA,NVIR,NVIR,NOCC,CMOA,NBF,NBF,XX(LXT),NBF)
      CALL DGEMM('N','N',NBF,NBF,NVIR,ONE,CMOA(1,NOP1),NBF,XX(LXT),
     *           NBF,ONE,XX(LPAO),NBF)
C
C     -- MAKE SQUARE MATRIX INTO TRIANGLE ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(NBTR,FOUR,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
C     ---- TRANSFORM BMN3 TO MO BASIS ----
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMOA,NBF,NOCC,XX(LXT),NBF)
      CALL DGEMM('T','N',NVIR,NOCC,NBF,ONE,CMOA(1,NOP1),NBF,
     *           XX(LXT),NBF,ZERO,XX(LPMO),NVIR)
      IV2 = 0
      DO II = 1,NOCC
         DO JJ = 1,NVIR
            IV2 = IV2 + 1
            UNXTA(IV2)=UNXTA(IV2) + 0.5D+00*XX(LPMO+IV2-1)
         ENDDO
      ENDDO
C
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMOB,NBF,NOB,XX(LXT),NBF)
      CALL DGEMM('T','N',NVIRB,NOB,NBF,ONE,CMOB(1,NOP1B),NBF,
     *           XX(LXT),NBF,ZERO,XX(LPMO),NVIRB)
      IV2 = 0
      DO II = 1,NOB
         DO JJ = 1,NVIRB
            IV2 = IV2 + 1
            UNXTB(IV2)=UNXTB(IV2) + 0.5D+00*XX(LPMO+IV2-1)
         ENDDO
      ENDDO
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOL1PDMAB
      SUBROUTINE FFPOL1PDMAB(PMATA,PMATB,WMATA,WMATB,CMOA,CMOB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00, TWO=2.0D+00)
      LOGICAL OUTPUT,MP2ENG,UMP2GD
      DOUBLE PRECISION CMOA(NBF,*),PMATA(NBF,*),WMATA(NBF,*)
     *,                CMOB(NBF,*),PMATB(NBF,*),WMATB(NBF,*)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / XX(1)
      COMMON /MP2PAR/ OSPT,CODEMP,SCSPT,TOL,METHOD,NWORD,MEMPRI,MPPROP,
     *                NACORE_MP2PAR,NBCORE_MP2PAR,NOA,NOB,NO,NBF_MP2PAR,
     *                NOMIT,MOCPHF,MAXITC
      COMMON /MP2XTR/ NBF,NACORE,NBSQ,NBTR,NSTR,MXSHL,NACT,NOCC
     *,               NVIR,NOV,NOSQ,NVSQ,NOTR,NVTR,NCP1,NOP1
     *,               NATR,ICHANL,OUTPUT,MP2ENG,IOST,NMOS,UMP2GD
      COMMON /UMP2XB/ NBCORE,NACTB,NOCCB,NVIRB,NOVB,NOSB,NVSB,NOTB,
     *                NVTB,NCP1B,NOP1B,NATB,IOSTB,NOCCBLD
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0.AND.IFIXSOL.EQ.0.AND.ISPHSOL.EQ.0) RETURN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LPAO2    = LPAO     + NBSQ
      LXT      = LPAO2    + NBSQ
      LPMN     = LXT      + NBSQ
      LPMO     = LPMN     + NBTR
      LDIPTMP  = LPMO     + NVIR*NOCC
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM - 1
      CALL GETFM(NEED)
C
C     -- CONVERT MO DENSITY MATRIX TO AO --
      CALL CACT(NBF,NMOS,
     *          PMATB,NBF,
     *          CMOB,NBF,
     *          XX(LPAO2),NBF,XX(LXT))
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL CACT(NBF,NMOS,
     *          PMATA,NBF,
     *          CMOA,NBF,
     *          XX(LPAO),NBF,XX(LXT))
      CALL VADD(XX(LPAO2),1,XX(LPAO),1,XX(LPAO),1,NBSQ)
C     -- SYMMETRIZE P(AO) ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(NBTR,TWO,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
C     -- TRANSFORM TO MO --
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMOA,NBF,NOCC,XX(LXT),NBF)
      CALL DGEMM('T','N',NVIR,NOCC,NBF,ONE,CMOA(1,NOP1),NBF,XX(LXT)
     *           ,NBF,ZERO,XX(LPMO),NVIR)
      DO II = 1,NVIR
         DO JJ = 1,NOCC
            WMATA(II+NOCC,JJ)=WMATA(II+NOCC,JJ)
     *         +0.5D+00*XX(LPMO+(JJ-1)*NVIR+II-1)
         ENDDO
      ENDDO
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMOB,NBF,NOB,XX(LXT),NBF)
      CALL DGEMM('T','N',NVIRB,NOB,NBF,ONE,CMOB(1,NOP1B),NBF,XX(LXT)
     *           ,NBF,ZERO,XX(LPMO),NVIRB)
      DO II = 1,NVIRB
         DO JJ = 1,NOB
            WMATB(II+NOB,JJ)=WMATB(II+NOB,JJ)
     *         +0.5D+00*XX(LPMO+(JJ-1)*NVIRB+II-1)
         ENDDO
      ENDDO
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLWOVAB
      SUBROUTINE FFPOLWOVAB(PMATA,PMATB,WMATA,WMATB,CMOA,CMOB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00)
      LOGICAL OUTPUT,MP2ENG,UMP2GD
      DOUBLE PRECISION PMATA(NBF,*),PMATB(NBF,*),
     *                 WMATA(NBF,*),WMATB(NBF,*),
     *                 CMOA(NBF,*),CMOB(NBF,*)
C
      COMMON /MP2PAR/ OSPT,CODEMP,SCSPT,TOL,METHOD,NWORD,MEMPRI,MPPROP,
     *                NACORE_MP2PAR,NBCORE_MP2PAR,NOA,NOB,NO,NBF_MP2PAR,
     *                NOMIT,MOCPHF,MAXITC
      COMMON /MP2XTR/ NBF,NACORE,NBSQ,NBTR,NSTR,MXSHL,NACT,NOCC
     *,               NVIR,NOV,NOSQ,NVSQ,NOTR,NVTR,NCP1,NOP1
     *,               NATR,ICHANL,OUTPUT,MP2ENG,IOST,NMOS,UMP2GD
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / XX(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0.AND.IFIXSOL.EQ.0.AND.ISPHSOL.EQ.0) RETURN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LXT      = LPAO     + NBSQ
      LPMN     = LXT      + NBSQ
      LPMO     = LPMN     + NBTR
      LDIPTMP  = LPMO     + NOCC*NOCC
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM - 1
      CALL GETFM(NEED)
C
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL MRARTR(PMATB,NBF,NBF,NBF,CMOB,NBF,NBF,XX(LXT),NBF)
      CALL DGEMM('N','N',NBF,NBF,NBF,ONE,CMOB,NBF,XX(LXT),
     *           NBF,ZERO,XX(LPAO),NBF)
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL MRARTR(PMATA,NBF,NBF,NBF,CMOA,NBF,NBF,XX(LXT),NBF)
      CALL DGEMM('N','N',NBF,NBF,NBF,ONE,CMOA,NBF,XX(LXT),
     *           NBF,ONE,XX(LPAO),NBF)
C
C     -- MAKE SQUARE MATRIX INTO TRIANGLE ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(NBTR,TWO,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
C     ---- TRANSFORM BMN3 TO MO BASIS ----
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMOA,NBF,NOCC,XX(LXT),NBF)
      CALL DGEMM('T','N',NOCC,NOCC,NBF,ONE,CMOA,NBF,XX(LXT),NBF,
     *           ZERO,XX(LPMO),NOCC)
      DO J = 1, NOCC
         DO I = 1, NOCC
            WMATA(I,J) = WMATA(I,J)-0.5D+00*XX(LPMO+(J-1)*NOCC+I-1)
         ENDDO
      ENDDO
C
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMOB,NBF,NOB,XX(LXT),NBF)
      CALL DGEMM('T','N',NOB,NOB,NBF,ONE,CMOB,NBF,XX(LXT),NBF,
     *           ZERO,XX(LPMO),NOB)
      DO J = 1, NOB
         DO I = 1, NOB
            WMATB(I,J) = WMATB(I,J)-0.5D+00*XX(LPMO+(J-1)*NOB+I-1)
         ENDDO
      ENDDO
C
      CALL RETFM(NEED)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFMP2DIP
!>   
!> @brief    induced dipole due to MP2 P(2) density
!>    
!> @author   Hui Li   
!>           - Jan 2011
!>    
!> @details  This is called by MP2 Z-vector code
!>
      SUBROUTINE FFMP2DIP
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA ROHF,UHF,RHF/8HROHF    ,8HUHF     ,8HRHF     /
C
C     HUI LI, JAN 2011, LINCOLN
C     DEJUN SI, MAR 2011, LINCOLN
C
C     -- SOLVE MM INDUCED DIPOLES/CHARGES DUE TO P(2)
C
      L1 = NUM        
      L2 = (NUM*NUM+NUM)/2
C
C     -- USE A DIFFERENT ROUTINE FOR FIXSOL --
      IF(IFIXSOL.EQ.1) THEN
         CALL VALFM(LOADFM)
         LDIPTMP    = LOADFM   + 1
         LAST       = LDIPTMP  + 3*NFFAT
         NEED       = LAST     - LOADFM
         CALL GETFM(NEED)
         CALL FFMP2DIP2(L2,L1,X(LFFNONLSTQ),X(LFFCORD),
     *                  X(LFFAFIX),X(LFFVFIX2),X(LFFXTSFIX),
     *                  X(LFFYTSFIX),X(LFFZTSFIX),X(LFFPOL),
     *                  X(LFFPOLSV),X(LDIPTMP),X(LFFFIELD2),
     *                  X(LFFFIELD3),X(LFFNONLS1),X(LFFL1213J))
         CALL RETFM(NEED)
         RETURN
      END IF
C
      NTS = ISPHSOL
      CALL VALFM(LOADFM)
      LABFLD   = LOADFM   + 1
      LMP      = LABFLD   + 3*NFFAT
      LXEFI    = LMP      + L2
      LYEFI    = LXEFI    + L2
      LZEFI    = LYEFI    + L2
      LABPOT   = LZEFI    + L2
      LQTMP1   = LABPOT   + NTS
      LQTMP2   = LQTMP1   + NTS
      LAST     = LQTMP2   + NTS
      NEED     = LAST     - LOADFM - 1
      CALL GETFM(NEED)
C
      IF(SCFTYP.EQ.UHF) THEN
C        - BORROW LXEFI AND LYEFI FOR 0.001 SECONDS
         CALL DAREAD(IDAF,IODA,X(LXEFI),L2,417,0)
         CALL DAREAD(IDAF,IODA,X(LYEFI),L2,427,0)
         CALL VADD(X(LXEFI),1,X(LYEFI),1,X(LMP),1,L2)
      ELSE IF(SCFTYP.EQ.RHF .OR. SCFTYP.EQ.ROHF) THEN
         KREC7 = 307
         CALL DAREAD(IDAF,IODA,X(LMP),L2,KREC7,0)
      END IF
C
C     -- ELECTRONIC FIELDS AT MM POL DUE TO P(2)
C
      CALL VCLR(X(LABFLD),1,3*NFFAT)
      IPCOUNT = ME - 1
      DO 100 IIQ = 1, NTODOQ
         CALL GETIFFAT(X(LFFNONLSTQ),IIQ,IFFAT)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 100
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 100
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),
     *                      X(LXEFI),X(LYEFI),X(LZEFI),L2)
         X(LABFLD+3*(IFFAT-1)  )=TRACEP(X(LMP),X(LXEFI),L1)
         X(LABFLD+3*(IFFAT-1)+1)=TRACEP(X(LMP),X(LYEFI),L1)
         X(LABFLD+3*(IFFAT-1)+2)=TRACEP(X(LMP),X(LZEFI),L1)
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(668,X(LABFLD),3*NFFAT)
C
      CALL VCLR (X(LABPOT),1,NTS)
      CALL VCLR (X(LQTMP1),1,NTS)
      CALL VCLR (X(LQTMP2),1,NTS)
      CALL VCLR (X(LFFQRXNMP),1,NTS)
      IF(ISPHSOL.GE.60) THEN
         CALL EPOTEN(-ONE,X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *               X(LABPOT),X(LMP),NTS,L2)
         IF(GOPARR) CALL DDI_GSUMF(2668,X(LABPOT),NTS)
         SCALE = (RXNEPS-ONE)/RXNEPS
         IPCOUNT = ME - 1
         DO 200 ITS = 1, NTS
            X(LQTMP1+ITS-1) = ZERO
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 200
            END IF
            DO JTS = 1, NTS
               X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)
     *           -X(LFFCMAT1+(JTS-1)*NTS+ITS-1)*X(LABPOT+JTS-1)
            ENDDO
            X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)*SCALE
 200     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2406,X(LQTMP1),NTS)
      END IF
      CALL VCLR(X(LFFFIELD2),1,3*NFFAT)
      CALL SOLVEDIP(X(LFFCORD),X(LFFPOL),X(LFFPOLSV),X(LFFDIPMP),DUM,
     *              X(LABFLD),X(LFFFIELD2),X(LFFFIELD3),
     *              X(LFFNONLS1),X(LFFL1213J),
     *              X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *              X(LFFCMAT1),X(LFFPOT2),X(LQTMP1),
     *              X(LQTMP2),NTS)
      IF(ISPHSOL.GE.60) THEN
         CALL VADD(X(LQTMP1),1,X(LQTMP2),1,X(LFFQRXNMP),1,NTS)
      END IF
C
      E2RXN = 0.0D+00
      DO ITS = 1, NTS
         E2RXN = E2RXN + X(LABPOT+ITS-1)*
     *                   (X(LFFQRXN1+ITS-1) +
     *                    X(LFFQRXN2+ITS-1) +
     *           0.50D+00*X(LFFQRXNMP+ITS-1))
      ENDDO
      E2POL = 0.0D+00
      DO IFFAT = 1, NFFAT
         DIPX  =          X(LFFDIP  +3*(IFFAT-1)  )
     *         + 0.50D+00*X(LFFDIPMP+3*(IFFAT-1)  )
         DIPY  =          X(LFFDIP  +3*(IFFAT-1)+1)
     *         + 0.50D+00*X(LFFDIPMP+3*(IFFAT-1)+1)
         DIPZ  =          X(LFFDIP  +3*(IFFAT-1)+2)
     *         + 0.50D+00*X(LFFDIPMP+3*(IFFAT-1)+2)
         E2POL = E2POL - X(LABFLD+3*(IFFAT-1)  )*DIPX
     *                 - X(LABFLD+3*(IFFAT-1)+1)*DIPY
     *                 - X(LABFLD+3*(IFFAT-1)+2)*DIPZ
      ENDDO
      IF(MASWRK.AND.ISPHSOL.LT.60) THEN
         WRITE(IW,900)' '
         WRITE(IW,900)' ---------------------------------'
         WRITE(IW,900)' THE P(2) CORRECTED MP2-POL ENERGY'
         WRITE(IW,900)'  (CURRENTLY NO ANALYTIC GRADIENT)'
         WRITE(IW,900)' EMP2        =', EMP2
         WRITE(IW,900)' EPOL(2)     =', E2POL
         WRITE(IW,900)' EMP2+EPOL(2)=', EMP2+E2POL
         WRITE(IW,900)' ---------------------------------'
         WRITE(IW,900)' '
      END IF
      IF(MASWRK.AND.ISPHSOL.GE.60) THEN
       WRITE(IW,900)' ------------------------------------------'
       WRITE(IW,900)' THE P(2) CORRECTED MP2-POLARIZATION ENERGY'
       WRITE(IW,900)'   INCLUDING INDUCED DIPOLES AND CHARGES'
       WRITE(IW,900)'      (CURRENTLY NO ANALYTIC GRADIENT)'
       WRITE(IW,900)' EMP2                =', EMP2
       WRITE(IW,900)' EPOL(2)             =', E2POL
       WRITE(IW,900)' ERXN(2)             =', E2RXN
       WRITE(IW,900)' EMP2+EPOL(2)+ERXN(2)=', EMP2+E2POL+E2RXN
       WRITE(IW,900)' ------------------------------------------'
      END IF
C
      CALL RETFM(NEED)
 900  FORMAT(A,F20.10)
      RETURN
C
      END
C*MODULE QUANPO  *DECK FFTDDFTDIP
!>   
!> @brief    induced dipole/charges due to TDDFT density TA and XY
!>                    
!> @author   Hui Li   
!>           - Jan 2011
!>                    
!> @details  This is called by TDDFT Z-vector code
!>
      SUBROUTINE FFTDDFTDIP
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
      LOGICAL TRIPLET,SG1T,TAMMD,TPA,ALPHKWD,BETAKWD
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,PFREQ(2),
     *                JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,ITDPRP,
     *                TRIPLET,SG1T,NONEQR,TAMMD,TPA,ALPHKWD,BETAKWD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C     DEJUN SI, MAR 2011, LINCOLN
C
C     -- SOLVE INDUCED DIPOLES/CHARGES DUE TO TDDFT DENSITY TA AND XY
C
C     -- USE A DIFFERENT ROUTINE FOR FIXSOL --
      IF(IFIXSOL.EQ.1) THEN
         L1 = NUM
         L2 = (NUM*NUM+NUM)/2
         L3 = NUM*NUM
         CALL VALFM(LOADFM)
         LDIPTMP    = LOADFM   + 1
         LAST       = LDIPTMP  + 3*NFFAT
         NEED       = LAST     - LOADFM
         CALL GETFM(NEED)
         CALL FFTDDFTDIP2(L3,L2,L1,X(LFFNONLSTQ),X(LFFCORD),
     *                    X(LFFAFIX),X(LFFVFIX2),X(LFFXTSFIX),
     *                    X(LFFYTSFIX),X(LFFZTSFIX),X(LFFPOL),
     *                    X(LFFPOLSV),X(LDIPTMP),X(LFFFIELD2),
     *                    X(LFFFIELD3),X(LFFNONLS1),X(LFFL1213J))
         CALL RETFM(NEED)
         RETURN
      END IF
C
      NTS = ISPHSOL
      L1 = NUM
      L2 = (NUM*NUM+NUM)/2
      L3 = NUM*NUM
      CALL VALFM(LOADFM)
      LXEFI    = LOADFM   + 1
      LYEFI    = LXEFI    + L2
      LZEFI    = LYEFI    + L2
      LDTEMP   = LZEFI    + L2
      LTA      = LDTEMP   + L3
      LXY      = LTA      + L2
      LFLDTA   = LXY      + L2
      LFLDXY   = LFLDTA   + 3*NFFAT
      LPOTTA   = LFLDXY   + 3*NFFAT
      LPOTXY   = LPOTTA   + NTS
      LQTMP1   = LPOTXY   + NTS
      LQTMP2   = LQTMP1   + NTS
      LAST     = LQTMP2   + NTS
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
C     TA = EXCITATION DIFFERENCE DENSITY
      CALL DAREAD(IDAF,IODA,X(LDTEMP),L3,IRECTD+4,0)
      CALL TDPCMDEN(X(LTA),X(LDTEMP),L1)
C
C     XY = X + Y = TRANSITION STATE DENSITY
      CALL DAREAD(IDAF,IODA,X(LDTEMP),L3,IRECTD+2,0)
      CALL TDPCMDEN(X(LXY),X(LDTEMP),L1)
C
      CALL VCLR(X(LFLDTA),1,6*NFFAT)
      IPCOUNT = ME - 1
      DO 100 IIQ = 1, NTODOQ
         CALL GETIFFAT(X(LFFNONLSTQ),IIQ,IFFAT)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 100
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 100
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),
     *                      X(LXEFI),X(LYEFI),X(LZEFI),L2)
         X(LFLDTA+3*(IFFAT-1)  )=TRACEP(X(LTA),X(LXEFI),L1)
         X(LFLDTA+3*(IFFAT-1)+1)=TRACEP(X(LTA),X(LYEFI),L1)
         X(LFLDTA+3*(IFFAT-1)+2)=TRACEP(X(LTA),X(LZEFI),L1)
         X(LFLDXY+3*(IFFAT-1)  )=TRACEP(X(LXY),X(LXEFI),L1)
         X(LFLDXY+3*(IFFAT-1)+1)=TRACEP(X(LXY),X(LYEFI),L1)
         X(LFLDXY+3*(IFFAT-1)+2)=TRACEP(X(LXY),X(LZEFI),L1)
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(668,X(LFLDTA),6*NFFAT)
C
C     -- TA --
      CALL VCLR (X(LPOTTA),1,NTS)
      CALL VCLR (X(LQTMP1),1,NTS)
      CALL VCLR (X(LQTMP2),1,NTS)
      CALL VCLR (X(LFFQRXNTA),1,NTS)
      IF(ISPHSOL.GE.60) THEN
         CALL EPOTEN(-ONE,X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *               X(LPOTTA),X(LTA),NTS,L2)
         IF(GOPARR) CALL DDI_GSUMF(2668,X(LPOTTA),NTS)
         SCALE = (RXNEPS-ONE)/RXNEPS
         IPCOUNT = ME - 1
         DO 200 ITS = 1, NTS
            X(LQTMP1+ITS-1) = ZERO
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 200
            END IF
            DO JTS = 1, NTS
               X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)
     *           -X(LFFCMAT1+(JTS-1)*NTS+ITS-1)*X(LPOTTA+JTS-1)
            ENDDO
            X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)*SCALE
 200     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2406,X(LQTMP1),NTS)
      END IF
      CALL VCLR(X(LFFFIELD2),1,3*NFFAT)
      CALL SOLVEDIP(X(LFFCORD),X(LFFPOL),X(LFFPOLSV),X(LFFDIPTA),DUM,
     *              X(LFLDTA),X(LFFFIELD2),X(LFFFIELD3),
     *              X(LFFNONLS1),X(LFFL1213J),
     *              X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *              X(LFFCMAT1),X(LFFPOT2),X(LQTMP1),
     *              X(LQTMP2),NTS)
      IF(ISPHSOL.GE.60) THEN
         CALL VADD(X(LQTMP1),1,X(LQTMP2),1,X(LFFQRXNTA),1,NTS)
      END IF
C
C     -- XY --
      CALL VCLR (X(LPOTXY),1,NTS)
      CALL VCLR (X(LQTMP1),1,NTS)
      CALL VCLR (X(LQTMP2),1,NTS)
      CALL VCLR (X(LFFQRXNXY),1,NTS)
      IF(ISPHSOL.GE.60) THEN
         CALL EPOTEN(-ONE,X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *               X(LPOTXY),X(LXY),NTS,L2)
         IF(GOPARR) CALL DDI_GSUMF(2668,X(LPOTXY),NTS)
         SCALE = (RXNEPS-ONE)/RXNEPS
         IPCOUNT = ME - 1
         DO 300 ITS = 1, NTS
            X(LQTMP1+ITS-1) = ZERO
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 300
            END IF
            DO JTS = 1, NTS
               X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)
     *           -X(LFFCMAT1+(JTS-1)*NTS+ITS-1)*X(LPOTXY+JTS-1)
            ENDDO
            X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)*SCALE
 300     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2406,X(LQTMP1),NTS)
      END IF
      CALL VCLR(X(LFFFIELD2),1,3*NFFAT)
      CALL SOLVEDIP(X(LFFCORD),X(LFFPOL),X(LFFPOLSV),X(LFFDIPXY),DUM,
     *              X(LFLDXY),X(LFFFIELD2),X(LFFFIELD3),
     *              X(LFFNONLS1),X(LFFL1213J),
     *              X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *              X(LFFCMAT1),X(LFFPOT2),X(LQTMP1),
     *              X(LQTMP2),NTS)
      IF(ISPHSOL.GE.60) THEN
         CALL VADD(X(LQTMP1),1,X(LQTMP2),1,X(LFFQRXNXY),1,NTS)
      END IF
C
      CALL RETFM(NEED)
      RETURN
C
      END
C*MODULE QUANPO  *DECK FFEGOUT
      SUBROUTINE FFEGOUT(ATMNAM,FFGRD)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 ATMNAM
      DIMENSION ATMNAM(*),FFGRD(3,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011
C
C     ----- PRINT ENERGY GRADIENT VECTOR FOR MM ATOMS -----
C
      IF (MASWRK.AND.NFFAT.GT.0) THEN
         DO IFFAT=1,NFFAT
            WRITE(IW,9000)ATMNAM(IFFAT),
     *                 FFGRD(1,IFFAT),FFGRD(2,IFFAT),FFGRD(3,IFFAT)
         ENDDO
      END IF
      RETURN
C
 9000 FORMAT(1X,A10,5X,3F18.9)
      END
C*MODULE QUANPO  *DECK FFRAND
      SUBROUTINE FFRAND(RNUM)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*24 TIMSTR
C
      COMMON /FFRNUM/ JJRAND(3),NRANDOM,NRANDOM0
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     WICHMANN AND HILL
C     "AN EFFICIENT AND PORTABLE PSEUDO-RANDOM NUMBER GENERATOR"
C     APPLIED STATISTICS, 31, 188-190 (1982)
C
C     CYCLE LENGTH = ((30269-1)*(30307-1)*(30323-1))/4 = 6953607871644
C
C     -- GIVE SEEDS IF NRANDOM=0 OR 1 --
      IF(NRANDOM.EQ.0)THEN
         JJRAND(1)=103
         JJRAND(2)=817
         JJRAND(3)=910
         NRANDOM = 1000
      ELSE IF (NRANDOM.EQ.1) THEN
         IF(MASWRK)THEN
            CALL TMDATE(TIMSTR)
            JJRAND(1)=ICHAR(TIMSTR( 1: 1))*ICHAR(TIMSTR(24:24))
     *               +ICHAR(TIMSTR( 3: 3))*ICHAR(TIMSTR( 4: 4))
     *               +ICHAR(TIMSTR( 5: 5))*ICHAR(TIMSTR(16:16))
     *               +ICHAR(TIMSTR(17:17))*ICHAR(TIMSTR( 8: 8))
            JJRAND(2)=ICHAR(TIMSTR(19:19))*ICHAR(TIMSTR(23:23))
     *               +ICHAR(TIMSTR(11:11))*ICHAR(TIMSTR(22:22))
     *               +ICHAR(TIMSTR(13:13))*ICHAR(TIMSTR(14:14))
     *               +ICHAR(TIMSTR(15:15))*ICHAR(TIMSTR( 6: 6))
            JJRAND(3)=ICHAR(TIMSTR( 7: 7))*ICHAR(TIMSTR(18:18))
     *               +ICHAR(TIMSTR( 9: 9))*ICHAR(TIMSTR(20:20))
     *               +ICHAR(TIMSTR(21:21))*ICHAR(TIMSTR(12:12))
     *               +ICHAR(TIMSTR(10:10))*ICHAR(TIMSTR( 2: 2))
            JJRAND(1)=MOD(JJRAND(1),30000)
            JJRAND(2)=MOD(JJRAND(2),30000)
            JJRAND(3)=MOD(JJRAND(3),30000)
            IF(JJRAND(1).EQ.0) JJRAND(1) = 103
            IF(JJRAND(2).EQ.0) JJRAND(2) = 817
            IF(JJRAND(3).EQ.0) JJRAND(3) = 910
         END IF
         IF(GOPARR) CALL DDI_BCAST(460,'I',JJRAND,3,MASTER)
         NRANDOM = 1000
      END IF
C
      JJRAND(1) = 171*MOD(JJRAND(1),177) -  2*(JJRAND(1)/177)
      JJRAND(2) = 172*MOD(JJRAND(2),176) - 35*(JJRAND(2)/176)
      JJRAND(3) = 170*MOD(JJRAND(3),178) - 63*(JJRAND(3)/178)
      IF(JJRAND(1).LT.0) JJRAND(1) = JJRAND(1) + 30269
      IF(JJRAND(2).LT.0) JJRAND(2) = JJRAND(2) + 30307
      IF(JJRAND(3).LT.0) JJRAND(3) = JJRAND(3) + 30323
      V = JJRAND(1)/30269.0D+00
     *  + JJRAND(2)/30307.0D+00
     *  + JJRAND(3)/30323.0D+00
      RNUM=V-INT(V)
C
      RETURN
      END
C*MODULE QUANPO  *DECK INIRDF
!>
!> @brief    Initialize the radial distribution function
!>
!> @author   Dejun Si
!>           - Apr 2011
!>
!> @details  Initialize the radial distribution function
!>
      SUBROUTINE INIRDF(ATMNAM,FRAG1,FRAG2,NFRAG1,NFRAG2,GOFR)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 FRAG1(10),FRAG2(10),ATMNAM(NFFAT)
      DIMENSION NFRAG1(10),NFRAG2(10),GOFR(1000,10)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRXN / RXNEPS,RSPHSOL,ISPHSOL
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2,
     *                NRDEN,NBINRDEN,LFFPRO,LFFNRDPRATM,
     *                LFFRDPRATM,LFFDIESTEP,LFFDI1STEP
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, APR 2011, LINCOLN
C
      IF(NRDF.EQ.0) RETURN
C
      NUMSUM = 0
      IF(SPHRAD.GE.1.0D+30) THEN
         BOX     = MIN(XBOX,YBOX,ZBOX)
         NUMGRD  = INT(BOX*0.5D+00/DELRDF) + 1
      ELSE
         NUMGRD  = INT(RSPHSOL*0.5D+00/DELRDF) + 1
      END IF
      IF(NUMGRD .GT. 1000) NUMGRD = 1000
C
      CALL VCLR(GOFR,1,1000*10)
      CALL VICLR(NFRAG1,1,10)
      CALL VICLR(NFRAG2,1,10)
      DO IRDF = 1, NRDF
         K1   = 0
         K2   = 0
         DO I = 1, NFFAT
            IF (ATMNAM(I) .EQ. FRAG1(IRDF)) K1 = K1 + 1
            IF (ATMNAM(I) .EQ. FRAG2(IRDF)) K2 = K2 + 1
         ENDDO
         IF(K1.EQ.0 .OR. K2.EQ.0) THEN
            IF(MASWRK) WRITE(IW,*)'ERROR: PLEASE CHECK RDF ='
            IF(MASWRK)WRITE(IW,*)' '
            CALL ABRT
         END IF
         IF(SPHRAD.GE.1.0D+30) THEN
            NFRAG1(IRDF)=K1
            NFRAG2(IRDF)=K2
         ELSE
            NFRAG1(IRDF)=0
            NFRAG2(IRDF)=K2
         END IF
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK RDF
!>    
!> @brief    calculate radial distribution function
!>    
!> @author   Dejun Si
!>           - Apr 2011
!>
!> @details  calculate radial distribution function
!>
      SUBROUTINE RDF(CORD,ISTEP,ATMNAM,FRAG1,FRAG2,NFRAG1,NFRAG2,GOFR)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ONE=1.0D+00, PI=3.14159265358979323846264338D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      CHARACTER*10 FRAG1(10),FRAG2(10),ATMNAM(NFFAT)
      DIMENSION CORD(3,NFFAT),GOFR(1000,10),NFRAG1(10),NFRAG2(10)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2,
     *                NRDEN,NBINRDEN,LFFPRO,LFFNRDPRATM,
     *                LFFRDPRATM,LFFDIESTEP,LFFDI1STEP
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, APR 2011, LINCOLN
C     HUI LI, AUG 27, 2012
C
      IPCOUNT = ME - 1
      DO 200 IRDF = 1, NRDF
         DO 210 I = 1, NFFAT
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 210
            END IF
            IF(ATMNAM(I).NE.FRAG1(IRDF).AND.
     *         ATMNAM(I).NE.FRAG2(IRDF)    ) GOTO 210
            DO 220 J = I+1, NFFAT
               IF(((ATMNAM(I).EQ.FRAG1(IRDF)).AND.
     *             (ATMNAM(J).EQ.FRAG2(IRDF)))    .OR.
     *            ((ATMNAM(I).EQ.FRAG2(IRDF)).AND.
     *             (ATMNAM(J).EQ.FRAG1(IRDF)))) THEN
                  GRX    = CORD(1,I) - CORD(1,J)
                  GRY    = CORD(2,I) - CORD(2,J)
                  GRZ    = CORD(3,I) - CORD(3,J)
                  PBCX   = XBOX * ANINT(GRX*ONEXBOX)
                  PBCY   = YBOX * ANINT(GRY*ONEYBOX)
                  PBCZ   = ZBOX * ANINT(GRZ*ONEZBOX)
                  GRX    = GRX - PBCX
                  GRY    = GRY - PBCY
                  GRZ    = GRZ - PBCZ
                  GRL    = SQRT(GRX*GRX+GRY*GRY+GRZ*GRZ)
                  IBIN   = INT(GRL/DELRDF) + 1
                  IF(IBIN.LE.NUMGRD)GOFR(IBIN,IRDF)=GOFR(IBIN,IRDF)+ONE
               END IF
 220        CONTINUE
 210     CONTINUE
 200  CONTINUE
C
      NUMSUM  = NUMSUM + 1
C
      IF(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP) THEN
         IF(GOPARR) CALL DDI_GSUMF(2406,GOFR,1000*10)
         IF(MASWRK) THEN
         PREFAC  = TOANGS*TOANGS*TOANGS/NUMSUM
         PREFAC2 = PREFAC*XBOX*YBOX*ZBOX/(2.0D+00*PI/3.0D+00)
         DO IRDF = 1, NRDF
            FAC1 = NFRAG1(IRDF)*NFRAG2(IRDF)
            FAC2 = PREFAC2/FAC1
            WRITE(IW,4000) FRAG1(IRDF),FRAG2(IRDF)
            R = 0.0D+00
            RUPPER = R + DELRDF*TOANGS
            DO J = 1, NUMGRD
               DIFF = RUPPER**3 - R**3
               WRITE(IW,4030) R+DELRDF*0.5D+00*TOANGS,
     *                        GOFR(J,IRDF)*FAC2/DIFF
               R = RUPPER
               RUPPER = RUPPER + DELRDF*TOANGS
            ENDDO
            WRITE(IW,*)' '
         ENDDO
         END IF
         IF(GOPARR) CALL DSCAL(1000*10,ONE/NPROC,GOFR,1)
      END IF
      CALL FLSHBF(IW)
C
      RETURN
 4000 FORMAT(/1X,'RDF FOR ATOM "',A10,'" AND ATOM "',A10,'"')
 4030 FORMAT(1X,F10.3,5X,F12.8)
      END
C*MODULE QUANPO  *DECK RDEN
!>    
!> @brief    calculate radial density profile
!>    
!> @author   Dejun Si
!>           - Dec 2011
!>
!> @details  calculate radial density profile
!>
      SUBROUTINE RDEN(CORD,ISTEP,ATMNAM,RDENATM,NRDPRATM,PRO)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ONE=1.0D+00) 
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      CHARACTER*10 RDENATM(10),ATMNAM(*)
C
      DIMENSION CORD(3,*),PRO(1000,10),NRDPRATM(10)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2,
     *                NRDEN,NBINRDEN,LFFPRO,LFFNRDPRATM,
     *                LFFRDPRATM,LFFDIESTEP,LFFDI1STEP
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, DEC 1, 2011, LINCOLN
C     HUI LI, FEB 14, 2012
C
      IF(ISTEP.EQ.0) THEN
         CALL VCLR(PRO,1,1000*10)
         CALL VICLR(NRDPRATM,1,10)
C
         DO IRDEN = 1, NRDEN
            K1   = 0
            DO I = 1, NFFAT
               IF (ATMNAM(I) .EQ. RDENATM(IRDEN)) K1 = K1 + 1
            ENDDO
            IF(K1.EQ.0) THEN
               IF(MASWRK) WRITE(IW,*)'ERROR: PLEASE CHECK RDEN ='
               IF(MASWRK)WRITE(IW,*)' '
               CALL ABRT
            END IF
            NRDPRATM(IRDEN)=K1
         ENDDO
      END IF
C
      IPCOUNT = ME - 1
      DO 200 IRDEN = 1, NRDEN
         DO 220 I = 1, NFFAT
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 220
            END IF
            IF(ATMNAM(I).EQ.RDENATM(IRDEN)) THEN
               XI     = CORD(1,I) - CENTX
               YI     = CORD(2,I) - CENTY
               ZI     = CORD(3,I) - CENTZ
               GRL    = SQRT(XI*XI+YI*YI+ZI*ZI)
               IBIN   = INT(GRL/DELRDF) + 1
               IF(IBIN.LE.NBINRDEN)
     *            PRO(IBIN,IRDEN)=PRO(IBIN,IRDEN)+ONE
            END IF
 220     CONTINUE
 200  CONTINUE
C
      IF(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP) THEN
         IF(GOPARR) CALL DDI_GSUMF(2406,PRO,1000*10)
         IF(MASWRK) THEN
         NFRAME  = ISTEP +1
         PREFAC  = TOANGS*TOANGS*TOANGS/NFRAME
         PREFAC2 = PREFAC*SPHRAD**3
         DO IRDEN = 1, NRDEN
            FAC1 = NRDPRATM(IRDEN)
            FAC2 = PREFAC2/FAC1
            WRITE(IW,4000) RDENATM(IRDEN)
            R = 0.0D+00
            RUPPER = R + DELRDF*TOANGS
            DO IBIN = 1, NBINRDEN
               DIFF = RUPPER**3 - R**3
               WRITE(IW,4030) R+DELRDF*TOANGS,
     *                        PRO(IBIN,IRDEN)*FAC2/DIFF
               R = RUPPER
               RUPPER = RUPPER + DELRDF*TOANGS
            ENDDO
            WRITE(IW,*)' '
         ENDDO
         END IF
         IF(GOPARR) CALL DSCAL(1000*10,ONE/NPROC,PRO,1)
      END IF
      CALL FLSHBF(IW)
C
      RETURN
 4000 FORMAT(/1X,'RDEN FOR ATOM "',A10,'"')
 4030 FORMAT(1X,F10.3,5X,F12.8)
      END
C*MODULE QUANPO  *DECK RDFSPH
!>
!> @brief    calculate radial distribution function for spheric boundary
!>
!> @author   Dejun Si
!>           - Dec 2011
!>
!> @details  calculate radial distribution function for spheric boundary
!>
      SUBROUTINE RDFSPH(CORD,ISTEP,ATMNAM,FRAG1,FRAG2,
     *                  NFRAG1,NFRAG2,GOFR)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ONE=1.0D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      CHARACTER*10 FRAG1(10),FRAG2(10),ATMNAM(NFFAT)
      DIMENSION CORD(3,NFFAT),GOFR(1000,10),NFRAG1(10),NFRAG2(10)
      DIMENSION GOFRI(1000,10)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2,
     *                NRDEN,NBINRDEN,LFFPRO,LFFNRDPRATM,
     *                LFFRDPRATM,LFFDIESTEP,LFFDI1STEP
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, DEC 1, 2011, LINCOLN
C     HUI LI, AUG 27, 2012
C
      RSMP2   =SPHRAD*SPHRAD/4
      CALL VICLR(NFRAG1,1,10)
      CALL VCLR (GOFRI,1,10000)
      IPCOUNT = ME - 1
      DO 200 IRDF = 1, NRDF
         DO 210 I = 1, NFFAT
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 210
            END IF
            IF(ATMNAM(I).EQ.FRAG1(IRDF)) THEN
               XI = CORD(1,I) - CENTX
               YI = CORD(2,I) - CENTY
               ZI = CORD(3,I) - CENTZ
               R2 = XI*XI+YI*YI+ZI*ZI
               IF(R2.GT.RSMP2) GOTO 210
               NFRAG1(IRDF) = NFRAG1(IRDF) +1
            ELSE
               GOTO 210
            END IF
            DO 220 J = I+1, NFFAT
               IF(ATMNAM(J).EQ.FRAG2(IRDF)) THEN
                  GRX    = CORD(1,I) - CORD(1,J)
                  GRY    = CORD(2,I) - CORD(2,J)
                  GRZ    = CORD(3,I) - CORD(3,J)
                  GRL    = SQRT(GRX*GRX+GRY*GRY+GRZ*GRZ)
                  IBIN   = INT(GRL/DELRDF) + 1
                  IF(IBIN.LE.NUMGRD) GOFRI(IBIN,IRDF) = 
     *                                    GOFRI(IBIN,IRDF)+ONE
               END IF
 220        CONTINUE
 210     CONTINUE
 200  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(2406,GOFRI,1000*10)
      NUMSUM = NUMSUM +1
      DO IRDF = 1, NRDF
         DO J = 1, NUMGRD
            GOFRI(J,IRDF) = GOFRI(J,IRDF)/NFRAG1(IRDF)
            GOFR(J,IRDF)=(GOFR(J,IRDF)*(NUMSUM-1)+GOFRI(J,IRDF))/NUMSUM
         ENDDO
      ENDDO
C
      IF(MASWRK.AND.(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP)) THEN
         PREFAC  = (SPHRAD*TOANGS)**3
         DO IRDF = 1, NRDF
            FAC1 = NFRAG2(IRDF)
            FAC2 = 2.0D+00*PREFAC/FAC1
            WRITE(IW,4000) FRAG1(IRDF),FRAG2(IRDF)
            R = 0.0D+00
            RUPPER = R + DELRDF*TOANGS
            DO J = 1, NUMGRD
               DIFF = RUPPER**3 - R**3
               WRITE(IW,4030) R+DELRDF*0.5D+00*TOANGS,
     *                        GOFR(J,IRDF)*FAC2/DIFF
               R = RUPPER
               RUPPER = RUPPER + DELRDF*TOANGS
            ENDDO
            WRITE(IW,*)' '
         ENDDO
      END IF
      CALL FLSHBF(IW)
C
      RETURN
 4000 FORMAT(/1X,'RDF FOR ATOM "',A10,'" AND ATOM "',A10,'"')
 4030 FORMAT(1X,F10.3,5X,F12.8)
      END
C*MODULE QUANPO  *DECK INIDFS
      SUBROUTINE INIDFS(ATMNAM,DFSA,DFSC,DFSN)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 DFSA(10),ATMNAM(NFFAT)
C
      DIMENSION DFSC(3,10),DFSN(10)
C
      COMMON /FFDFS / TIMDFS,NDFS,LFFDFSC,LFFDFSCAV,
     *                LFFDFSC0,LFFDFSA,LFFDFSN,KDFS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, HUI LI, APR 2011, LINCOLN
C
      CALL VCLR(DFSC,1,30)
      CALL VCLR(DFSN,1,10)
C
      DO IDFS =1, NDFS
         KKK  = 0
         DO I=1, NFFAT
            IF(ATMNAM(I).EQ.DFSA(IDFS)) KKK = KKK + 1
         ENDDO
         IF(KKK.EQ.0) THEN
            IF(MASWRK) WRITE(IW,*)'ERROR: PLEASE CHECK DIFFUSE ='
            IF(MASWRK)WRITE(IW,*)' '
            CALL ABRT
         END IF
         DFSN(IDFS)=DBLE(KKK)
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK DFS
!>    
!> @brief    calculate diffusion coefficient
!>   
!> @author   Dejun Si, Hui Li 
!>           - Apr 2011
!>    
!> @details  calculate diffusion coefficient using random walk formula
!>
      SUBROUTINE DFS(CORD,ISTEP,ATMNAM,CORD0,DFSA,DFSC,DFSCAV,DFSN)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (THIRD=1.0D+00/3.0D+00, PT5=0.5D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 DFSA(10),ATMNAM(NFFAT)
C
      DIMENSION CORD0(3,*),CORD(3,*),DFSC(3,*),DFSCAV(3,*),DFSN(10)
C
      COMMON /FFDFS / TIMDFS,NDFS,LFFDFSC,LFFDFSCAV,
     *                LFFDFSC0,LFFDFSA,LFFDFSN,KDFS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, HUI LI, APR 2011, LINCOLN
C
      IF(ISTEP.EQ.0) THEN
         CALL DCOPY(3*NFFAT,CORD,1,CORD0,1)
         CALL VCLR(DFSCAV,1,30)
         KDFS = 0
         RETURN
      END IF
C
      CALL VCLR(DFSC,1,30)
      IPCOUNT = ME - 1
      DO 200 IDFS = 1, NDFS
         DO 210 IFFAT = 1, NFFAT
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 210
            END IF
            IF(ATMNAM(IFFAT).EQ.DFSA(IDFS)) THEN
               DFSC(1,IDFS) = DFSC(1,IDFS) + 
     *                        (CORD(1,IFFAT)-CORD0(1,IFFAT))**2
               DFSC(2,IDFS) = DFSC(2,IDFS) + 
     *                        (CORD(2,IFFAT)-CORD0(2,IFFAT))**2
               DFSC(3,IDFS) = DFSC(3,IDFS) + 
     *                        (CORD(3,IFFAT)-CORD0(3,IFFAT))**2
            END IF
 210     CONTINUE
 200  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2408,DFSC,30)
C
      KDFS = KDFS + 1
      DO IDFS= 1, NDFS
         DFSCAV(1,IDFS)=((KDFS-1)*DFSCAV(1,IDFS)+DFSC(1,IDFS))/KDFS
         DFSCAV(2,IDFS)=((KDFS-1)*DFSCAV(2,IDFS)+DFSC(2,IDFS))/KDFS
         DFSCAV(3,IDFS)=((KDFS-1)*DFSCAV(3,IDFS)+DFSC(3,IDFS))/KDFS
      ENDDO
C
      IF(MASWRK) THEN
         FAC1=PT5*(TOANGS**2)/(TIMDFS*2.418884326505D-08)
         DO IDFS= 1, NDFS
            FAC2 = FAC1/DFSN(IDFS)
            WRITE(IW,9000) 
     *           (ISTEP*DT-TIMDFS)*2.418884326505D-02,
     *                    ISTEP*DT*2.418884326505D-02
            WRITE(IW,9010) DFSA(IDFS),
     *                     DFSC(1,IDFS)*FAC2,
     *                     DFSC(2,IDFS)*FAC2,
     *                     DFSC(3,IDFS)*FAC2,
     *      (DFSC(1,IDFS)+DFSC(2,IDFS)+DFSC(3,IDFS))*FAC2*THIRD
         ENDDO
         WRITE(IW,*)' '
         DO IDFS= 1, NDFS
            FAC2 = FAC1/DFSN(IDFS)
            WRITE(IW,*) 'AVERAGE DIFFUSION COEFFICIENT:'
            WRITE(IW,9010) DFSA(IDFS),
     *                     DFSCAV(1,IDFS)*FAC2,
     *                     DFSCAV(2,IDFS)*FAC2,
     *                     DFSCAV(3,IDFS)*FAC2,
     *      (DFSCAV(1,IDFS)+DFSCAV(2,IDFS)+DFSCAV(3,IDFS))*FAC2*THIRD
         ENDDO
         WRITE(IW,*)' '
      END IF
      CALL DCOPY(3*NFFAT,CORD,1,CORD0,1)
C
      RETURN
 9000 FORMAT(/1X,'DIFFUSION COEFFICIENT OBTAINED USING STRUCTURES ',
     *       'AT TIME ', F10.2,' AND ',F10.2,' FS',
     *       /1X,'ATOM',19X,'X',11X,'Y',11X,'Z',10X,'3D')
 9010 FORMAT(1X,A,'D=',4F12.2,'   A**2/NS')
      END
C*MODULE QUANPO  *DECK RMSD
      SUBROUTINE RMSD(CORD,ISTEP,ZANF,CORD0)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ONE=1.0D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD0(3,*),CORD(3,*),RMSDF(2,2),RMSDN(2),ZANF(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, MAY 2011, LINCOLN
C
      IF(ISTEP.EQ.0) THEN
         CALL DCOPY(3*NFFAT,CORD,1,CORD0,1)
         RETURN
      END IF
C
      CALL VCLR(RMSDF,1,4)
      CALL VCLR(RMSDN,1,2)
      IPCOUNT = ME - 1
      DO 100 IFFAT = 1, NATPDB
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 100
         END IF
         X  = CORD(1,IFFAT)-CORD0(1,IFFAT)
         Y  = CORD(2,IFFAT)-CORD0(2,IFFAT)
         Z  = CORD(3,IFFAT)-CORD0(3,IFFAT)
         R2 = X*X+Y*Y+Z*Z
         R  = SQRT(R2)
         IF(ZANF(IFFAT).NE.ONE) THEN
            RMSDF(1,1) = RMSDF(1,1) + R
            RMSDF(2,1) = RMSDF(2,1) + R2
            RMSDN(1)   = RMSDN(1)   + ONE
         END IF
         RMSDF(1,2) = RMSDF(1,2) + R
         RMSDF(2,2) = RMSDF(2,2) + R2
         RMSDN(2)   = RMSDN(2)   + ONE
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2409,RMSDF,4)
      IF(GOPARR) CALL DDI_GSUMF(2410,RMSDN,2)
C
      IF(MASWRK) THEN
         WRITE(IW,9000) RMSDF(1,1)/RMSDN(1)*TOANGS,
     *                  RMSDF(1,2)/RMSDN(2)*TOANGS,
     *                  SQRT(RMSDF(2,1)/RMSDN(1))*TOANGS,
     *                  SQRT(RMSDF(2,2)/RMSDN(2))*TOANGS
      END IF
C
      RETURN
 9000 FORMAT(/1X,55X,'HEAVY-ATOM',4X,'ALL-ATOM'
     *       /1X,'AVERAGE UNSIGNED DISPLACEMENT FROM',
     *          ' INITIAL STRUCTURE  ',F8.2,5X,F8.2,'   ANGSTROM',
     *       /1X,'ROOT MEAN SQUARE DISPLACEMENT FROM',
     *          ' INITIAL STRUCTURE  ',F8.2,5X,F8.2,'   ANGSTROM')
      END
C*MODULE QUANPO  *DECK GYRA 
      SUBROUTINE GYRA(CORD,ZANF,ZMAS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD(3,*),ZANF(*),ZMAS(*),COM(3),GYRAF(2)
C
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, HUI LI, MAY 2011, LINCOLN
C
      COM(1)  = ZERO
      COM(2)  = ZERO
      COM(3)  = ZERO
      TOTMS1  = ZERO
      TOTMS2  = ZERO
      GYRAF(1)= ZERO
      GYRAF(2)= ZERO
C
      IPCOUNT = ME - 1
      DO 100 IFFAT = 1, NATPDB
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 100
         END IF
         COM(1) = COM(1) + ZMAS(IFFAT)*CORD(1,IFFAT)
         COM(2) = COM(2) + ZMAS(IFFAT)*CORD(2,IFFAT)
         COM(3) = COM(3) + ZMAS(IFFAT)*CORD(3,IFFAT)
         IF(ZANF(IFFAT).NE.ONE) TOTMS1 = TOTMS1+ ZMAS(IFFAT)
                                TOTMS2 = TOTMS2+ ZMAS(IFFAT)
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2411,   COM,3)
      IF(GOPARR) CALL DDI_GSUMF(2412,TOTMS1,1)
      IF(GOPARR) CALL DDI_GSUMF(2413,TOTMS2,1)
C
      ONETOTMS1= ONE/TOTMS1
      ONETOTMS2= ONE/TOTMS2
      COM(1)   = COM(1)*ONETOTMS2
      COM(2)   = COM(2)*ONETOTMS2
      COM(3)   = COM(3)*ONETOTMS2
C
      IPCOUNT = ME - 1
      DO 200 IFFAT = 1, NATPDB
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         X    = CORD(1,IFFAT) - COM(1)
         Y    = CORD(2,IFFAT) - COM(2)
         Z    = CORD(3,IFFAT) - COM(3)
         DUM  = (X*X + Y*Y + Z*Z)*ZMAS(IFFAT)
         IF(ZANF(IFFAT).NE.ONE) GYRAF(1) = GYRAF(1) + DUM
                                GYRAF(2) = GYRAF(2) + DUM
 200  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2414,GYRAF,2)
      GYRAF(1) = SQRT(GYRAF(1)*ONETOTMS1)
      GYRAF(2) = SQRT(GYRAF(2)*ONETOTMS2)
C
      IF(MASWRK) THEN
         WRITE(IW,9000) GYRAF(1)*TOANGS,GYRAF(2)*TOANGS
      END IF
C
      RETURN
 9000 FORMAT(1X,'RADIUS OF GYRATION AT CURRENT STEP:',
     *       ' ALL=',6X,F8.2,'  HEAVY=',
     *          5X,F8.2,'   ANGSTROM')
      END
C*MODULE QUANPO  *DECK RALL
      SUBROUTINE RALL(CORD0,CORD,ISTEP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD0(3,*),CORD(3,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, HUI LI, MAY 2011, LINCOLN
C
      IF(ISTEP.EQ.0) THEN
         CALL DCOPY(3*NFFAT,CORD,1,CORD0,1)
         RETURN
      END IF
C
      DIFF = ZERO
C
      IPCOUNT = ME - 1
      DO 210 IFFAT = 1, NATPDB-1
         DO 220 JFFAT = IFFAT+1, NATPDB
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 220
            END IF
            X    = CORD(1,IFFAT)-CORD(1,JFFAT)
            Y    = CORD(2,IFFAT)-CORD(2,JFFAT)
            Z    = CORD(3,IFFAT)-CORD(3,JFFAT)
            R    = SQRT(X*X+Y*Y+Z*Z)
            X    = CORD0(1,IFFAT)-CORD0(1,JFFAT)
            Y    = CORD0(2,IFFAT)-CORD0(2,JFFAT)
            Z    = CORD0(3,IFFAT)-CORD0(3,JFFAT)
            R0   = SQRT(X*X+Y*Y+Z*Z)
            DIFF = DIFF + (R-R0)*(R-R0)
 220     CONTINUE
 210  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2415,DIFF,1)
C
      NPAIR = NATPDB*(NATPDB-1)/2
      IF(MASWRK) THEN
         WRITE(IW,9000) SQRT(DIFF/NPAIR)*TOANGS
      END IF
C
      RETURN
 9000 FORMAT(1X,'RMSD OF INTERNUCLEAR DISTANCE FROM INITIAL',
     *       ' STRUCTURE  ',13X,F8.2,'   ANGSTROM')
      END
C*MODULE QUANPO  *DECK DISIJ
!>       
!> @brief    calculate distance between I and J atoms
!>             
!> @author   Dejun Si
!>           - May 2011
!>          
!> @details  calculate distance between I and J atoms
!>           both QM and MM atoms
!>
      SUBROUTINE DISIJ(CORD)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      INTEGER P1, P2, P3
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (DEGREE=57.2957795130823D+00)
      PARAMETER (PT5=0.5D+00, ONE=1.0D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD(3,*)
C
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, MAY 2011, LINCOLN
C     HUI LI, OCT 18, 2012, LINCOLN
C
      IF(MASWRK) THEN
         IF(NAT.GT.0) THEN
         DO I =1, NRIJQM
            IAT   = IJRQM(1,I)
            JAT   = IJRQM(2,I)
            XX    = C(1,IAT)-C(1,JAT)
            YY    = C(2,IAT)-C(2,JAT)
            ZZ    = C(3,IAT)-C(3,JAT)
            DUM   = SQRT(XX*XX+YY*YY+ZZ*ZZ)
            WRITE (IW,8000) IAT,JAT,DUM*TOANGS
         ENDDO
         DO I =1, NAIJKQM
            P1     =IJKQM(1,I)
            P2     =IJKQM(2,I)
            P3     =IJKQM(3,I)
            X13    =C(1,P1)-C(1,P3)
            Y13    =C(2,P1)-C(2,P3)
            Z13    =C(3,P1)-C(3,P3)
            X12    =C(1,P1)-C(1,P2)
            Y12    =C(2,P1)-C(2,P2)
            Z12    =C(3,P1)-C(3,P2)
            X23    =C(1,P2)-C(1,P3)
            Y23    =C(2,P2)-C(2,P3)
            Z23    =C(3,P2)-C(3,P3)
            R13R13 =X13*X13+Y13*Y13+Z13*Z13
            R12R12 =X12*X12+Y12*Y12+Z12*Z12
            R23R23 =X23*X23+Y23*Y23+Z23*Z23
            R12    =SQRT(R12R12)
            R23    =SQRT(R23R23)
            ONEBC  =ONE/(R12*R23)
            COSA   =(R12R12 + R23R23 - R13R13)*ONEBC*PT5
            IF(COSA.GT. ONE) COSA = ONE
            IF(COSA.LT.-ONE) COSA =-ONE
            ALPHA  =ACOS(COSA)
            WRITE (IW,8010) P1,P2,P3,ALPHA*DEGREE
         ENDDO
         END IF
         DO I =1, NRIJMM
            IFFAT = IJRMM(1,I)
            JFFAT = IJRMM(2,I)
            XX    = CORD(1,IFFAT)-CORD(1,JFFAT)
            YY    = CORD(2,IFFAT)-CORD(2,JFFAT)
            ZZ    = CORD(3,IFFAT)-CORD(3,JFFAT)
            DUM   = SQRT(XX*XX+YY*YY+ZZ*ZZ)
            WRITE (IW,9000) IFFAT,JFFAT,DUM*TOANGS
         ENDDO
         DO I =1, NAIJKMM
            P1     =IJKMM(1,I)
            P2     =IJKMM(2,I)
            P3     =IJKMM(3,I)
            X13    =CORD(1,P1)-CORD(1,P3)
            Y13    =CORD(2,P1)-CORD(2,P3)
            Z13    =CORD(3,P1)-CORD(3,P3)
            X12    =CORD(1,P1)-CORD(1,P2)
            Y12    =CORD(2,P1)-CORD(2,P2)
            Z12    =CORD(3,P1)-CORD(3,P2)
            X23    =CORD(1,P2)-CORD(1,P3)
            Y23    =CORD(2,P2)-CORD(2,P3)
            Z23    =CORD(3,P2)-CORD(3,P3)
            R13R13 =X13*X13+Y13*Y13+Z13*Z13
            R12R12 =X12*X12+Y12*Y12+Z12*Z12
            R23R23 =X23*X23+Y23*Y23+Z23*Z23
            R12    =SQRT(R12R12)
            R23    =SQRT(R23R23)
            ONEBC  =ONE/(R12*R23)
            COSA   =(R12R12 + R23R23 - R13R13)*ONEBC*PT5
            IF(COSA.GT. ONE) COSA = ONE
            IF(COSA.LT.-ONE) COSA =-ONE
            ALPHA  =ACOS(COSA)
            WRITE (IW,9010) P1,P2,P3,ALPHA*DEGREE
         ENDDO
      END IF
      RETURN
C
 8000 FORMAT(1X,'DISTANCE BETWEEN QM ATOMS ',I8,' AND ',I8,' = ',
     *       1X,F12.6,' ANGSTROM')
 8010 FORMAT(1X,'ANGLE FORMED BY QM ATOMS ',I8,1X,I8,1X,I8,' = ',
     *       1X,F12.6,' DEGREE')
 9000 FORMAT(1X,'DISTANCE BETWEEN MM ATOMS ',I8,' AND ',I8,' = ',
     *       1X,F12.6,' ANGSTROM')
 9010 FORMAT(1X,'ANGLE FORMED BY MM ATOMS ',I8,1X,I8,1X,I8,' = ',
     *       1X,F12.6,' DEGREE')
      END
C*MODULE QUANPO  *DECK DIELECT
!>
!> @brief    calculate dielectric constant
!>
!> @author   Hui Li
!>           - Feb 2012
!>
!> @details  using fluctuation formula
!>
      SUBROUTINE DIELECT(CORD,ZMAS,CHARG,DIP,ISTEP,DIESTEP,DI1STEP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (DB2AU=1.0D+00/2.541766D+00)
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (TOKELVIN=3.15774646D+05, BOLTZK=1.0D+00/TOKELVIN)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (ONE=1.0D+00, THREE=3.0D+00, FOUR3RD=4.0D+00/3.0D+00)
      PARAMETER (ZERO=0.0D+00, FOUR=4.0D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD(3,*),ZMAS(*),CHARG(*),DIP(3,*),DIESTEP(3,*),
     *          DI1STEP(3,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /XYZPRP/ XP,YP,ZP,
     *                DMX,DMY,DMZ,
     *                QXX,QYY,QZZ,QXY,QXZ,QYZ,
     *                QMXX,QMYY,QMZZ,QMXY,QMXZ,QMYZ,
     *                OXXX,OXXY,OXXZ,OXYY,OYYY,OYYZ,
     *                OXZZ,OYZZ,OZZZ,OXYZ,
     *                OMXXX,OMXXY,OMXXZ,OMXYY,OMYYY,
     *                OMYYZ,OMXZZ,OMYZZ,OMZZZ,OMXYZ
C
C     HUI LI, FEB 23, 2012
C
      IF(ISTEP.EQ.0) THEN
         CALL VCLR(DIPT,1,8)
         CALL VCLR(DIESTEP,1,3*1000)
         CALL VCLR(DI1STEP,1,3*1000)
         RETURN
      END IF
C
      KKK = MOD(ISTEP,1000)
      IF(KKK.EQ.0) KKK = 1000
C
      AMX = ZERO
      AMY = ZERO
      AMZ = ZERO
      AMT = ZERO
      DO IFFAT = 1, NFFAT
         AMX = AMX  + CORD(1,IFFAT)*ZMAS(IFFAT)
         AMY = AMY  + CORD(2,IFFAT)*ZMAS(IFFAT)
         AMZ = AMZ  + CORD(3,IFFAT)*ZMAS(IFFAT)
         AMT = AMT  + ZMAS(IFFAT)
      ENDDO
      AMX = AMX/AMT
      AMY = AMY/AMT
      AMZ = AMZ/AMT
      DO IFFAT = 1, NFFAT
         DIESTEP(1,KKK)=DIESTEP(1,KKK)+CHARG(IFFAT)*(CORD(1,IFFAT)-AMX)
         DIESTEP(2,KKK)=DIESTEP(2,KKK)+CHARG(IFFAT)*(CORD(2,IFFAT)-AMY)
         DIESTEP(3,KKK)=DIESTEP(3,KKK)+CHARG(IFFAT)*(CORD(3,IFFAT)-AMZ)
      ENDDO
      IF(IDOPOL.GT.0) THEN
         DO IFFAT = 1, NFFAT
            DIESTEP(1,KKK) = DIESTEP(1,KKK) + DIP(1,IFFAT)
            DIESTEP(2,KKK) = DIESTEP(2,KKK) + DIP(2,IFFAT)
            DIESTEP(3,KKK) = DIESTEP(3,KKK) + DIP(3,IFFAT)
         ENDDO
      END IF
      IF(NAT.GT.0) THEN
         DIESTEP(1,KKK) = DIESTEP(1,KKK) + DMX*DB2AU
         DIESTEP(2,KKK) = DIESTEP(2,KKK) + DMY*DB2AU
         DIESTEP(3,KKK) = DIESTEP(3,KKK) + DMZ*DB2AU
      END IF
      DIPT(1)= DIPT(1) + DIESTEP(1,KKK)
      DIPT(2)= DIPT(2) + DIESTEP(2,KKK)
      DIPT(3)= DIPT(3) + DIESTEP(3,KKK)
      DIPT(4)= DIPT(4) + DIESTEP(1,KKK)**2
     *                 + DIESTEP(2,KKK)**2
     *                 + DIESTEP(3,KKK)**2
C
C
      IF(NATPDB.GT.0) THEN
         AMX = ZERO
         AMY = ZERO
         AMZ = ZERO
         AMT = ZERO
         DO IFFAT = 1, NATPDB
            AMX = AMX  + CORD(1,IFFAT)*ZMAS(IFFAT)
            AMY = AMY  + CORD(2,IFFAT)*ZMAS(IFFAT)
            AMZ = AMZ  + CORD(3,IFFAT)*ZMAS(IFFAT)
            AMT = AMT  + ZMAS(IFFAT)
         ENDDO
         AMX = AMX/AMT
         AMY = AMY/AMT
         AMZ = AMZ/AMT
         DO IFFAT = 1, NATPDB
            DI1STEP(1,KKK)=DI1STEP(1,KKK)
     *                    +CHARG(IFFAT)*(CORD(1,IFFAT)-AMX)
            DI1STEP(2,KKK)=DI1STEP(2,KKK)
     *                    +CHARG(IFFAT)*(CORD(2,IFFAT)-AMY)
            DI1STEP(3,KKK)=DI1STEP(3,KKK)
     *                    +CHARG(IFFAT)*(CORD(3,IFFAT)-AMZ)
         ENDDO
         IF(IDOPOL.GT.0) THEN
            DO IFFAT = 1, NATPDB
               DI1STEP(1,KKK) = DI1STEP(1,KKK) + DIP(1,IFFAT)
               DI1STEP(2,KKK) = DI1STEP(2,KKK) + DIP(2,IFFAT)
               DI1STEP(3,KKK) = DI1STEP(3,KKK) + DIP(3,IFFAT)
            ENDDO
         END IF
C        - WE ASSUME NAT IS IN NATPDB -
         IF(NAT.GT.0) THEN
            DI1STEP(1,KKK) = DI1STEP(1,KKK) + DMX*DB2AU
            DI1STEP(2,KKK) = DI1STEP(2,KKK) + DMY*DB2AU
            DI1STEP(3,KKK) = DI1STEP(3,KKK) + DMZ*DB2AU
         END IF
         DIPT(5)= DIPT(5) + DI1STEP(1,KKK)
         DIPT(6)= DIPT(6) + DI1STEP(2,KKK)
         DIPT(7)= DIPT(7) + DI1STEP(3,KKK)
         DIPT(8)= DIPT(8) + DI1STEP(1,KKK)**2
     *                    + DI1STEP(2,KKK)**2
     *                    + DI1STEP(3,KKK)**2
      END IF
C
C
      IF(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEP) THEN
         IF(MASWRK) THEN
            VOLUME  = VOLAV
            IF(SPHRAD.LT.1.0D+30)VOLUME=FOUR3RD*PI*SPHRAD**3
            D2MEAN  = DIPT(4)/ISTEP
            DMEAN2  = (DIPT(1)**2+DIPT(2)**2+DIPT(3)**2)/ISTEP/ISTEP
            DIECONST= ONE+FOUR*PI*(D2MEAN-DMEAN2)/
     *                    (THREE*BOLTZK*TEMPAV*VOLUME)
            WRITE(IW,9000) DIECONST,D2MEAN,DMEAN2
            IF(NATPDB.GT.0) THEN
               VOLUME  = 6.72D+00*TOBOHR**3*NATPDB
               D2MEAN  = DIPT(8)/ISTEP
               DMEAN2  = (DIPT(5)**2+DIPT(6)**2+DIPT(7)**2)/ISTEP/ISTEP
               DIECONST= ONE+FOUR*PI*(D2MEAN-DMEAN2)/
     *                       (THREE*BOLTZK*TEMPAV*VOLUME)
               WRITE(IW,9001) DIECONST,D2MEAN,DMEAN2
            END IF
         END IF
      END IF
C
      LLLAST = ((ISTEP-1)/1000)*1000
      IF(MOD(ISTEP,1000).EQ.0.OR.ISTEP.EQ.NSTEP) THEN
         IF(MASWRK) THEN
            IF(NATPDB.GT.0) THEN
               WRITE(IP,'(/A,I10,A,I10/1X,A,2X,F10.6,A,
     *                   20X,A,15X,A,15X,A)')
     *         ' NATPDB DIPOLE MOMENT (E*BOHR)      FROM MD STEP ',
     *         LLLAST+1,' TO MD STEP ',ISTEP,
     *         'DT=',DT*2.418884326505D-02,' FS',
     *         'DIPX','DIPY','DIPZ'
               DO JJJ = LLLAST+1, ISTEP
                  WRITE(IP,'(A,I10,1X,F18.10,1X,F18.10,1X,F18.10)')
     *            ' DI1 MD STEP= ', JJJ,
     *            DI1STEP(1,JJJ-LLLAST),
     *            DI1STEP(2,JJJ-LLLAST),
     *            DI1STEP(3,JJJ-LLLAST)
               ENDDO
               WRITE(IP,*)' '
            END IF
         END IF
         CALL VCLR(DIESTEP,1,3*1000)
         CALL VCLR(DI1STEP,1,3*1000)
      END IF
C
      RETURN
 9000 FORMAT(1X,'DIELECTRIC CONSTANT =',F18.5/
     *       1X,'<M**2> =',E21.14,' <M>**2 =',E21.14,' (E*BOHR)**2'/
     *       1X,'DIPOLE MOMENT OF EACH MD STEP IS IN .DAT FILE.'/)
 9001 FORMAT(1X,'NATPDB DIE CONSTANT =',F18.5/
     *       1X,'<M**2> =',E21.14,' <M>**2 =',E21.14,' (E*BOHR)**2'/
     *       1X,'DIPOLE MOMENT OF EACH MD STEP IS IN .DAT FILE.'/)
      END
C*MODULE QUANPO  *DECK GETIFFAT
      SUBROUTINE GETIFFAT(NONLSTQ,IIQ,IFFAT)
      DIMENSION NONLSTQ(*)
      IFFAT = NONLSTQ(IIQ)
      RETURN
      END
C*MODULE QUANPO  *DECK GENQPFILE
      SUBROUTINE GENQPFILE(FILE,QPFILE,KOLMAXQF)
      CHARACTER*64 FILE
      CHARACTER*256 QPFILE
      CHARACTER*256 QPPATH
      CHARACTER*1 NULL
      NULL = CHAR(0)
C
C          BUILD A TOTAL UNIX FILE NAME, INCLUDING A STROKE BETWEEN THE
C          PATHNAME FROM THE ENVIROMENT, AND THE DATA FILE -QPFILE- FROM
C          THE ARGUMENT LIST.  THE DATA FILE ARGUMENT SHOULD BE PROVIDED
C          WITH A TRAILING BLANK DELIMITER.
C          THE 3RD ARGUMENT RETURNS THE LENGTH OF TOTAL PATH+FILE NAME.
C
      CALL GMS_GETENV('QUANPOL',QPPATH)
      DO KOL = 1,256
         IF (QPPATH(KOL:KOL) .EQ. ' ' .OR.
     *       QPPATH(KOL:KOL) .EQ. NULL) GOTO 100
         KOLMAXQP = KOL
      ENDDO
      KOLMAXQP = 256
C
  100 CONTINUE
      DO KOL = 1,64
         IF (FILE(KOL:KOL) .EQ. ' ' .OR.
     *       FILE(KOL:KOL) .EQ. NULL) GOTO 200
         KOLMAXF = KOL
      ENDDO
      KOLMAXF = 64
C
  200 CONTINUE
      KOLMAXQF = KOLMAXQP + KOLMAXF + 1
      IF(KOLMAXQF+1.GT.256) THEN
         WRITE(6,*) 'GENQPFILE: MORE THAN 256 BYTES'
         CALL ABRT
      END IF
C
      QPFILE(         1:KOLMAXQP          ) = QPPATH(1:KOLMAXQP)
      QPFILE(KOLMAXQP+1:KOLMAXQP+1        ) = '/'
      QPFILE(KOLMAXQP+2:KOLMAXQP+1+KOLMAXF) = FILE(1:KOLMAXF)
C
      QPFILE(KOLMAXQF+1:KOLMAXQF+1)         = NULL
      RETURN
      END
C*MODULE QUANPO  *DECK POLSCALE
!>
!> @brief    scale polarizability
!>
!> @author   Hui Li
!>           - Sep 2011
!>
!> @details  scale polarizability for damping purpose
!>
      SUBROUTINE POLSCALE(CORD,POL,POLSV)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR, DSKWRK, MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00)
C
      DIMENSION CORD(3,*),POL(*),POLSV(*)
C
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMF,L2BONDPMF,L1ANGLPMF,L2ANGLPMF,
     *                L1DIHRPMF,L2DIHRPMF,L1DIHBPMF,L2DIHBPMF,
     *                L1WAGGPMF,L2WAGGPMF,L1CMAPPMF,L2CMAPPMF,
     *                L11213PMF,L21213PMF,L1N14PMF,L2N14PMF,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, SEP 5, 2011, LINCOLN
C     NANDUN THELLAMUREGE, APR, 2012
C
C
      IF(IDOPOL.EQ.0 .OR. RDAMP.LE.ZERO) RETURN
C
      CALL VCLR(POL,1,NFFAT)
C
      RDAMP2  = RDAMP**2
      ALN2    = 0.0863D+00
C
C     -- SCALE POLARIZABILITY --
C
      DO 310 IFFAT = L1FFAT, L2FFAT
         POL(IFFAT) = POLSV(IFFAT)
         IF(POLSV(IFFAT).EQ.ZERO) GOTO 310
         DO 300 JAT = 1, NAT
            X     = CORD(1,IFFAT) - C(1,JAT)
            Y     = CORD(2,IFFAT) - C(2,JAT)
            Z     = CORD(3,IFFAT) - C(3,JAT)
            PBCX  = XBOX * ANINT(X*ONEXBOX)
            PBCY  = YBOX * ANINT(Y*ONEYBOX)
            PBCZ  = ZBOX * ANINT(Z*ONEZBOX)
            X     = X - PBCX
            Y     = Y - PBCY
            Z     = Z - PBCZ
            R2    = X*X+Y*Y+Z*Z
            IF(R2.GE.RDAMP2) GOTO 300
            R     =  SQRT(R2)
            DR1   =  R-RDAMP
            DR2   =  DR1*DR1
            FACT  =  EXP(-ALN2*DR2)
            POL(IFFAT) = POL(IFFAT)*FACT
 300     CONTINUE
 310  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(2417,POL,NFFAT)
C
      RETURN
      END
C*MODULE QUANPO  *DECK POLSCALEFORCE
!>   
!> @brief    force due to scaling polarizability
!>   
!> @author   Hui Li   
!>           - Sep 2011
!>   
!> @details  force due to scaling polarizability for damping purpose
!>
      SUBROUTINE POLSCALEFORCE(CORD,FFGRD,POL,DIP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, TWO=2.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),POL(*),DIP(3,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMF,L2BONDPMF,L1ANGLPMF,L2ANGLPMF,
     *                L1DIHRPMF,L2DIHRPMF,L1DIHBPMF,L2DIHBPMF,
     *                L1WAGGPMF,L2WAGGPMF,L1CMAPPMF,L2CMAPPMF,
     *                L11213PMF,L21213PMF,L1N14PMF,L2N14PMF,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FMCOM / XX(1)
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C     HUI LI, SEP 5, 2011, LINCOLN
C     NANDUN THELLAMUREGE, APR, 2012
C
C
      IF(IDOPOL.EQ.0 .OR. RDAMP.LE.ZERO) RETURN
C
      RDAMP2  = RDAMP**2
      ALN2    = 0.0863D+00
C
      DO 310 IFFAT = L1FFAT, L2FFAT
         IF(POL(IFFAT).EQ.ZERO) GOTO 310
         DO 300 JAT = 1, NAT
            X     = CORD(1,IFFAT) - C(1,JAT)
            Y     = CORD(2,IFFAT) - C(2,JAT)
            Z     = CORD(3,IFFAT) - C(3,JAT)
            PBCX  = XBOX * ANINT(X*ONEXBOX)
            PBCY  = YBOX * ANINT(Y*ONEYBOX)
            PBCZ  = ZBOX * ANINT(Z*ONEZBOX)
            X     = X - PBCX
            Y     = Y - PBCY
            Z     = Z - PBCZ
            R2    = X*X+Y*Y+Z*Z
            IF(R2.GE.RDAMP2) GOTO 300
            R     = SQRT(R2)
            DR1   =  R - RDAMP
            FACT2 = -TWO*ALN2*DR1
            FACT  = -PT5*FACT2/R
            DIPTRM= DIP(1,IFFAT)**2 + DIP(2,IFFAT)**2 + DIP(3,IFFAT)**2
            IF(MPLEVL.EQ.2) THEN
               DIPTRM=DIPTRM + TWO*
     *                (DIP(1,IFFAT)*XX(LFFDIPMP+3*(IFFAT-1)  )
     *                +DIP(2,IFFAT)*XX(LFFDIPMP+3*(IFFAT-1)+1)
     *                +DIP(3,IFFAT)*XX(LFFDIPMP+3*(IFFAT-1)+2))
            END IF
            IF(TDDFTYP.NE.RNONE) THEN
               DIPTRM=DIPTRM + TWO*
     *                (DIP(1,IFFAT)*XX(LFFDIPTA+3*(IFFAT-1)  )
     *                +DIP(2,IFFAT)*XX(LFFDIPTA+3*(IFFAT-1)+1)
     *                +DIP(3,IFFAT)*XX(LFFDIPTA+3*(IFFAT-1)+2)
     *         +XX(LFFDIPXY+3*(IFFAT-1)  )*XX(LFFDIPXY+3*(IFFAT-1)  )
     *         +XX(LFFDIPXY+3*(IFFAT-1)+1)*XX(LFFDIPXY+3*(IFFAT-1)+1)
     *         +XX(LFFDIPXY+3*(IFFAT-1)+2)*XX(LFFDIPXY+3*(IFFAT-1)+2))
            END IF
            DUMI  = FACT*DIPTRM/POL(IFFAT)
            DEXI  = X*DUMI
            DEYI  = Y*DUMI
            DEZI  = Z*DUMI
            FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DEXI
            FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DEYI
            FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DEZI
            DE(1,JAT)=DE(1,JAT) - DEXI
            DE(2,JAT)=DE(2,JAT) - DEYI
            DE(3,JAT)=DE(3,JAT) - DEZI
            VIR(1) =VIR(1)+DEXI*X
            VIR(2) =VIR(2)+DEYI*Y
            VIR(3) =VIR(3)+DEZI*Z
 300     CONTINUE
 310  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK RDAMBER
!>   
!> @brief    read AMBER parameter and top files
!>   
!> @author   Hui Li group
!>   
!> @details  read files from AMBER developers
!>
      SUBROUTINE RDAMBER(CORD,ZANF,RESNAM,AMBNAM,PDBNAM,
     *                   ZMAS,ONEMAS,
     *                   CHARG,POL,SIG,EPS,
     *                   SIG2,EPS2,
     *                   SSBOND,                   
     *                   BOND0,FCBOND,
     *                   ANGL0,FCANGL,
     *                   VROT,NNN,GAMA,
     *                   IPAIR,KLIST,LLIST,NLIST,
     *                   NRES,NATAAA,NNNCCC,NSSBD,LLIST1,
     *                   ITYPWAT,TEXTA,TEXTB,TEXTC,TEXTD)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      INTEGER CMSG(100)
      INTEGER SSBOND(4,*)
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
      PARAMETER (ZERO=0.0D+00)
C
      CHARACTER    TEXTA(20000)*100,TEXTB(20000)*100,TEXTC(20000)*100,
     *             TEXTD(20000)*100
      CHARACTER*100 WD100,WD100A1,WD100A2,WD100B1,WD100B2,
     *              WD100C1,WD100C2,WD1001,WD1002
      CHARACTER*2  ENTRY2,AMBNAM1
      CHARACTER*3  AAA
      CHARACTER*4  PDBNAM,WORD4A,WORD4B,WORD4C,WORD4D
      CHARACTER*5  WORD5A,AMBNAM
      CHARACTER*6  WORD6A,WORD6B,WORD6C
      CHARACTER*8  RESNAM,TEXT8,WORD8
      CHARACTER*11 WORD11A
      CHARACTER*60 TOPAMIA,TOPNTER,TOPCTER,TOPNUCA,PARFILE,TOPFILE,
     *             PARFIL2,PARFIL3
C
      DIMENSION AMBNAM(*),RESNAM(*),PDBNAM(*),NATAAA(*),NNNCCC(*)
      DIMENSION CORD(3,*),ZANF(*),
     *          ZMAS(NFFAT),ONEMAS(NFFAT),CHARG(NFFAT),POL(NFFAT),
     *          SIG(NFFAT),EPS(NFFAT),
     *          SIG2(NFFAT),EPS2(NFFAT),
     *          BOND0(NBOND),FCBOND(NBOND),
     *          ANGL0(NANGL),FCANGL(NANGL),
     *          VROT(NDIHR),NNN(NDIHR),
     *          GAMA(NDIHR)
      DIMENSION IPAIR(2,*),KLIST(3,*),LLIST(4,*),
     *          NLIST(4,*),LLIST1(4,*)
      DIMENSION NCHARG(5,50)
C
      COMMON /FFMAX / MXFFAT,MXBOND,MXANGL,MXDIHR,MXDIHB,MXCMAP,
     *                MXWAGG
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, SEP 2011, LINCOLN
C     FENGCHAO CUI, OCT 2011, LINCOLN
C     HUI LI, JULY 7, 2012, ADD CHECK AND FIXED BUGS
C     HUI LI, FEB 23, 2014, CHANGE PAR FILE FORMAT RECOGNITION;
C                           ADD PARFIL2 AND PARFIL3.
C     HUI LI, MAR 23, 2014, USE TEXTA,TEXTB,TEXTC,TEXTD
C
C     -- READ PARAMETERS FROM AMBER PARAMETER FILES --
C
      DO I=1,100
         WD100  (I:I)=' '
         WD100A1(I:I)=' '
         WD100A2(I:I)=' '
         WD100B1(I:I)=' '
         WD100B2(I:I)=' '
         WD100C1(I:I)=' '
         WD100C2(I:I)=' '
         WD1001 (I:I)=' '
         WD1002 (I:I)=' '
      ENDDO
C
      DO J=1,60
         TOPAMIA(J:J) = CHAR(JTOPAMIA(J))
         TOPNTER(J:J) = CHAR(JTOPNTER(J))
         TOPCTER(J:J) = CHAR(JTOPCTER(J))
         TOPNUCA(J:J) = CHAR(JTOPNUCA(J))
         PARFILE(J:J) = CHAR(JPARFILE(J))
         PARFIL2(J:J) = CHAR(JPARFIL2(J))
         PARFIL3(J:J) = CHAR(JPARFIL3(J))
         TOPFILE(J:J) = CHAR(JTOPFILE(J))
      ENDDO
      NTOP12=0
      NTOP13=0
      NTOP14=0
      NTOP15=0
      NPAR18=0
      NPAR19=0
      IF(MASWRK) THEN
         IF(NFFTYP/10000.EQ.3.AND.LOUT.NE.1) THEN
         IF(JTOPAMIA(60).EQ.0) GOTO 100
         OPEN(12,FILE=TOPAMIA(1:JTOPAMIA(60)),STATUS='OLD',ERR=100)
         WRITE(IW,*)'  QUANPOL SUCCESSFULLY OPENED THE FILE:'
         NTOP12 = 1
         GOTO 101
 100     CONTINUE
         WRITE(IW,*)'  WARNING: QUANPOL CANNOT OPEN THE FILE:'
 101     CONTINUE
         WRITE(IW,*)"  TOPAMIA='",TOPAMIA(1:JTOPAMIA(60)),"'"
C
         IF(JTOPNTER(60).EQ.0) GOTO 102
         OPEN(13,FILE=TOPNTER(1:JTOPNTER(60)),STATUS='OLD',ERR=102)
         WRITE(IW,*)'  QUANPOL SUCCESSFULLY OPENED THE FILE:'
         NTOP13 = 1
         GOTO 103
 102     CONTINUE
         WRITE(IW,*)'  WARNING: QUANPOL CANNOT OPEN THE FILE:'
 103     CONTINUE
         WRITE(IW,*)"  TOPNTER='",TOPNTER(1:JTOPNTER(60)),"'"
C
         IF(JTOPCTER(60).EQ.0) GOTO 104
         OPEN(14,FILE=TOPCTER(1:JTOPCTER(60)),STATUS='OLD',ERR=104)
         WRITE(IW,*)'  QUANPOL SUCCESSFULLY OPENED THE FILE:'
         NTOP14 = 1
         GOTO 105
 104     CONTINUE
         WRITE(IW,*)'  WARNING: QUANPOL CANNOT OPEN THE FILE:'
 105     CONTINUE
         WRITE(IW,*)"  TOPCTER='",TOPCTER(1:JTOPCTER(60)),"'"
C
         IF(JTOPNUCA(60).EQ.0) GOTO 106
         OPEN(15,FILE=TOPNUCA(1:JTOPNUCA(60)),STATUS='OLD',ERR=106)
         WRITE(IW,*)'  QUANPOL SUCCESSFULLY OPENED THE FILE:'
         NTOP15 = 1
         GOTO 107
 106     CONTINUE
         WRITE(IW,*)'  WARNING: QUANPOL CANNOT OPEN THE FILE:'
 107     CONTINUE
         WRITE(IW,*)"  TOPNUCA='",TOPNUCA(1:JTOPNUCA(60)),"'"
         END IF
C
         IF(JPARFILE(60).EQ.0) GOTO 108
         OPEN(16,FILE=PARFILE(1:JPARFILE(60)),STATUS='OLD',ERR=108)
         WRITE(IW,*)'  QUANPOL SUCCESSFULLY OPENED THE FILE:'
         GOTO 109
 108     CONTINUE
         WRITE(IW,*)'  WARNING: QUANPOL CANNOT OPEN THE FILE:'
 109     CONTINUE
         WRITE(IW,*)"  PARFILE='",PARFILE(1:JPARFILE(60)),"'"
C
         IF(NFFTYP/10000.EQ.3.AND.LOUT.EQ.1) THEN
         IF(JTOPFILE(60).EQ.0) GOTO 110
         OPEN(17,FILE=TOPFILE(1:JTOPFILE(60)),STATUS='OLD',ERR=110)
         WRITE(IW,*)'  QUANPOL SUCCESSFULLY OPENED THE FILE:'
         GOTO 111
 110     CONTINUE
         WRITE(IW,*)'  WARNING: QUANPOL CANNOT OPEN THE FILE:'
 111     CONTINUE
         WRITE(IW,*)"  TOPFILE='",TOPFILE(1:JTOPFILE(60)),"'"
         END IF
C
         IF(JPARFIL2(60).EQ.0) GOTO 112
         OPEN(18,FILE=PARFIL2(1:JPARFIL2(60)),STATUS='OLD',ERR=112)
         WRITE(IW,*)'  QUANPOL SUCCESSFULLY OPENED THE FILE:'
         NPAR18 = 1
         GOTO 113
 112     CONTINUE
         WRITE(IW,*)'  WARNING: QUANPOL CANNOT OPEN THE FILE:'
 113     CONTINUE
         WRITE(IW,*)"  PARFIL2='",PARFIL2(1:JPARFIL2(60)),"'"
C
         IF(JPARFIL3(60).EQ.0) GOTO 114
         OPEN(19,FILE=PARFIL3(1:JPARFIL3(60)),STATUS='OLD',ERR=114)
         WRITE(IW,*)'  QUANPOL SUCCESSFULLY OPENED THE FILE:'
         NPAR19 = 1
         GOTO 115
 114     CONTINUE
         WRITE(IW,*)'  WARNING: QUANPOL CANNOT OPEN THE FILE:'
 115     CONTINUE
         WRITE(IW,*)"  PARFIL3='",PARFIL3(1:JPARFIL3(60)),"'"
      END IF
      IF(GOPARR) CALL DDI_BCAST(275,'I',NTOP12,1,MASTER)
      IF(GOPARR) CALL DDI_BCAST(275,'I',NTOP13,1,MASTER)
      IF(GOPARR) CALL DDI_BCAST(275,'I',NTOP14,1,MASTER)
      IF(GOPARR) CALL DDI_BCAST(275,'I',NTOP15,1,MASTER)
      IF(GOPARR) CALL DDI_BCAST(275,'I',NPAR18,1,MASTER)
      IF(GOPARR) CALL DDI_BCAST(275,'I',NPAR19,1,MASTER)
      IF(NPAR18.EQ.0.AND.NPAR19.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)'  ERROR: PARFIL2 MUST BE GIVEN.'
         CALL ABRT
      END IF
C
C     -- READ AMBER NAMES AND RESP CHARGES FROM THE TOPOLOY FILE
C        (MOL2 TYPE) GENERATED BY AMBERTOOLS --
C
      IF(NFFTYP/10000.EQ.3.AND.LOUT.EQ.1.AND.MASWRK) THEN
         NLINA=0
         IF(MASWRK) REWIND(17)
 200     CONTINUE
         IEOF=0
         IF(MASWRK) THEN
            READ(17,'(A100)',END=201)WD100
            DO I=1,100
               J = IACHAR(WD100(I:I))
               IF(J.GE.97.AND.J.LE.122) J = J - 32
               WD100(I:I) = CHAR(J)
            ENDDO
            DO I=1,100
               CMSG(I) = ICHAR(WD100(I:I))
            ENDDO
            GOTO 202
 201        IEOF=1
 202        CONTINUE
         END IF
         IF(GOPARR) CALL DDI_BCAST(275,'I',IEOF,1  ,MASTER)
         IF(IEOF.EQ.1) GOTO 203
         IF(GOPARR) CALL DDI_BCAST(462,'I',CMSG,100,MASTER)
         IF (.NOT.MASWRK) THEN
            DO I=1,100
               WD100(I:I) = CHAR(CMSG(I))
            ENDDO
         END IF
         NLINA=NLINA+1
         TEXTA(NLINA)=WD100
         IF(NLINA.GT.20000) THEN
            IF(MASWRK) WRITE(IW,*) ' ERROR: NLINA EXCEEDED 20000.'
            CALL ABRT
         END IF
         GOTO 200
 203     CONTINUE
C
         NFFAT = 0
C
         MLINE = NLINA
         DO ILINE=1,MLINE
         WD100=TEXTA(ILINE)
         IF(WD100(2:13).NE.'<TRIPOS>ATOM') GOTO 209
         IF(WD100(2:13).EQ.'<TRIPOS>BOND') GOTO 210
         READ(WD100,*) II1,WORD4A,XXX,YYY,ZZZ,AMBNAM1,II2,WORD4B,RESPCH
         NFFAT = NFFAT + 1
         AMBNAM(NFFAT) = AMBNAM1
         CHARG (NFFAT) = RESPCH
 209     CONTINUE
         ENDDO
 210     CONTINUE
         I5ZW9G = 20121111
         IF(MASWRK.AND.I5ZW9G.EQ.20121212) THEN
            WRITE(IW,*) II1,XXX,YYY,ZZZ,II2
         END IF
         GOTO 695
      END IF
C
C     **** READ IN AMBER TOP FILES ****
C
      NLINA=0
      NLINB=0
      NLINC=0
      NLIND=0
C
      DO ITIMES = 1, 4
      IF(ITIMES.EQ.1) THEN
         IF(NTOP12.EQ.0) GOTO 303
         NFILE=12
      END IF
      IF(ITIMES.EQ.2) THEN
         IF(NTOP13.EQ.0) GOTO 303
         NFILE=13
      END IF
      IF(ITIMES.EQ.3) THEN
         IF(NTOP14.EQ.0) GOTO 303
         NFILE=14
      END IF
      IF(ITIMES.EQ.4) THEN
         IF(NTOP15.EQ.0) GOTO 303
         NFILE=15
      END IF
C
      IF(MASWRK) REWIND(NFILE)
 300  CONTINUE
      IEOF=0
      IF(MASWRK) THEN
         READ(NFILE,'(A100)',END=301)WD100
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         DO I=1,100
            CMSG(I) = ICHAR(WD100(I:I))
         ENDDO
         GOTO 302
 301     IEOF=1
 302     CONTINUE
      END IF
      IF(GOPARR) CALL DDI_BCAST(275,'I',IEOF,1  ,MASTER)
      IF(IEOF.EQ.1) GOTO 303
      IF(GOPARR) CALL DDI_BCAST(462,'I',CMSG,100,MASTER)
      IF (.NOT.MASWRK) THEN
         DO I=1,100
            WD100(I:I) = CHAR(CMSG(I))
         ENDDO
      END IF
      IF(ITIMES.EQ.1) THEN
         NLINA=NLINA+1
         TEXTA(NLINA)=WD100
         IF(NLINA.GT.20000) THEN
            IF(MASWRK) WRITE(IW,*) ' ERROR: NLINA EXCEEDED 20000.'
            CALL ABRT
         END IF
      END IF
      IF(ITIMES.EQ.2) THEN
         NLINB=NLINB+1
         TEXTB(NLINB)=WD100
         IF(NLINB.GT.20000) THEN
            IF(MASWRK) WRITE(IW,*) ' ERROR: NLINB EXCEEDED 20000.'
            CALL ABRT
         END IF
      END IF
      IF(ITIMES.EQ.3) THEN
         NLINC=NLINC+1
         TEXTC(NLINC)=WD100
         IF(NLINC.GT.20000) THEN
            IF(MASWRK) WRITE(IW,*) ' ERROR: NLINC EXCEEDED 20000.'
            CALL ABRT
         END IF
      END IF
      IF(ITIMES.EQ.4) THEN
         NLIND=NLIND+1
         TEXTD(NLIND)=WD100
         IF(NLIND.GT.20000) THEN
            IF(MASWRK) WRITE(IW,*) ' ERROR: NLIND EXCEEDED 20000.'
            CALL ABRT
         END IF
      END IF
      GOTO 300
 303  CONTINUE
      ENDDO
C
C     **** CHECK EACH RESIDUE ****
C
      NDIHB = 0
      DO 690 IRES=1,NRES
         JATOM = NATAAA(IRES)
         AAA   = RESNAM(IRES)(1:3)
         IF(AAA.EQ.'HOH') THEN
            IF(JATOM.NE.ITYPWAT/100)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
            WRITE(RESNAM(IRES),'(A3,I3)') AAA, ITYPWAT
            GOTO 690
         END IF
         IF(AAA.EQ.' LI'.OR.AAA.EQ.' BE'.OR.
     *      AAA.EQ.'  B'.OR.AAA.EQ.'  F'.OR.
     *      AAA.EQ.' NA'.OR.AAA.EQ.' MG'.OR.
     *      AAA.EQ.' AL'.OR.AAA.EQ.' SI'.OR.
     *      AAA.EQ.' CL'.OR.AAA.EQ.'  K'.OR.
     *      AAA.EQ.' CA'.OR.AAA.EQ.' SC'.OR.
     *      AAA.EQ.' TI'.OR.AAA.EQ.'  V'.OR.
     *      AAA.EQ.' CR'.OR.AAA.EQ.' MN'.OR.
     *      AAA.EQ.' FE'.OR.AAA.EQ.' CO'.OR.
     *      AAA.EQ.' NI'.OR.AAA.EQ.' CU'.OR.
     *      AAA.EQ.'CU1'.OR.AAA.EQ.' ZN'.OR.
     *      AAA.EQ.' GA'.OR.AAA.EQ.' GE'.OR.
     *      AAA.EQ.' AS'.OR.AAA.EQ.' SE'.OR.
     *      AAA.EQ.' BR'.OR.AAA.EQ.' KR'.OR.
     *      AAA.EQ.' RB'.OR.AAA.EQ.' SR'.OR.
     *      AAA.EQ.'  Y'.OR.AAA.EQ.' ZR'.OR.
     *      AAA.EQ.' NB'.OR.AAA.EQ.' MO'.OR.
     *      AAA.EQ.' TC'.OR.AAA.EQ.' RU'.OR.
     *      AAA.EQ.' RH'.OR.AAA.EQ.' PD'.OR.
     *      AAA.EQ.' AG'.OR.AAA.EQ.' CD'.OR.
     *      AAA.EQ.' IN'.OR.AAA.EQ.' SN'.OR.
     *      AAA.EQ.' SB'.OR.AAA.EQ.' TE'.OR.
     *      AAA.EQ.'  I'.OR.AAA.EQ.' XE'.OR.
     *      AAA.EQ.' CS'.OR.AAA.EQ.' BA'.OR.
     *      AAA.EQ.' LA'.OR.AAA.EQ.' CE'.OR.
     *      AAA.EQ.' PR'.OR.AAA.EQ.' ND'.OR.
     *      AAA.EQ.' PM'.OR.AAA.EQ.' SM'.OR.
     *      AAA.EQ.' EU'.OR.AAA.EQ.' GD'.OR.
     *      AAA.EQ.' TB'.OR.AAA.EQ.' DY'.OR.
     *      AAA.EQ.' HO'.OR.AAA.EQ.' ER'.OR.
     *      AAA.EQ.' TM'.OR.AAA.EQ.' YB'.OR.
     *      AAA.EQ.' LU'.OR.AAA.EQ.' HF'.OR.
     *      AAA.EQ.' TA'.OR.AAA.EQ.'  W'.OR.
     *      AAA.EQ.' RE'.OR.AAA.EQ.' OS'.OR.
     *      AAA.EQ.' IR'.OR.AAA.EQ.' PT'.OR.
     *      AAA.EQ.' AU'.OR.AAA.EQ.' HG'.OR.
     *      AAA.EQ.' TI'.OR.AAA.EQ.' PB'.OR.
     *      AAA.EQ.' BI'.OR.AAA.EQ.' PO'.OR.
     *      AAA.EQ.' AT'.OR.AAA.EQ.' RN'.OR.
     *      AAA.EQ.' FR'.OR.AAA.EQ.' RA'.OR.
     *      AAA.EQ.' AC'.OR.AAA.EQ.' TH'.OR.
     *      AAA.EQ.' PA'.OR.
     *      AAA.EQ.' NP'.OR.AAA.EQ.' PU'.OR.
     *      AAA.EQ.' AM'.OR.AAA.EQ.' CM'.OR.
     *      AAA.EQ.' BK'.OR.AAA.EQ.' CF'.OR.
     *      AAA.EQ.' ES'.OR.AAA.EQ.' FM'.OR.
     *      AAA.EQ.' MD'.OR.AAA.EQ.' NO'.OR.
     *      AAA.EQ.' LR'.OR.AAA.EQ.' RF'.OR.
     *      AAA.EQ.' DB'.OR.AAA.EQ.' SG'.OR.
     *      AAA.EQ.' BH'.OR.AAA.EQ.' HS'.OR.
     *      AAA.EQ.' MT'.OR.AAA.EQ.' DS'.OR.
     *      AAA.EQ.' RG'.OR.AAA.EQ.' CN'.OR.
     *      AAA.EQ.'TI2'.OR.AAA.EQ.' V2'.OR.
     *      AAA.EQ.'CR2'.OR.AAA.EQ.'FE2'.OR.
     *      AAA.EQ.'AG2'.OR.AAA.EQ.'SM2'.OR.
     *      AAA.EQ.'YB2'.OR.AAA.EQ.'MN3'.OR.
     *      AAA.EQ.'3CO'.OR.AAA.EQ.'EU3'.OR.
     *      AAA.EQ.'AU3'                    ) GOTO 690
C
C        IDENTIFY THE FORM OF N- AND C-TERMINUS AND CHANGE RESIDUE NAMES
C        FOR DIFFERENT CASES.
C        INTERH =  3 :  NH3+ GROUP
C               =  2 :  NH2  GROUP
C               =  1 :  NH   GROUP (NORMAL PEPTIDE)
C        ICTERH =  0 :  COO- GROUP
C               =  1 :  COOH GROUP
C               = -1 :  C=O  GROUP (NORMAL PEPTIDE)
         INTERH =  1
         ICTERH = -1
         LFFAT  =  0
         DO III=1,IRES-1
            LFFAT=LFFAT+NATAAA(III)
         ENDDO
C
         IF     (NNNCCC(IRES).EQ.1)THEN
            DO II=1,JATOM
               IF(PDBNAM(LFFAT+II).EQ.'H2  ') INTERH=2
               IF(PDBNAM(LFFAT+II).EQ.'H3  ') INTERH=3
            ENDDO
         ELSE IF(NNNCCC(IRES).EQ.9)THEN
            DO II=1,JATOM
               IF(PDBNAM(LFFAT+II).EQ.'OXT ') ICTERH=0
               IF(PDBNAM(LFFAT+II).EQ.'HXT ') ICTERH=1
               IF(PDBNAM(LFFAT+II).EQ.'HXT ') KHXT  =LFFAT+II
               IF(PDBNAM(LFFAT+II).EQ.'O   ') KO    =LFFAT+II
               IF(PDBNAM(LFFAT+II).EQ.'OXT ') KOXT  =LFFAT+II
            ENDDO
            IF(ICTERH.EQ.1) THEN
               DISOH=(CORD(1,KOXT)-CORD(1,KHXT))**2
     *              +(CORD(2,KOXT)-CORD(2,KHXT))**2
     *              +(CORD(3,KOXT)-CORD(3,KHXT))**2
               IF(DISOH.LE.5.142D+00) THEN      ! <1.20 A
               ELSE
                  PDBNAM(KOXT)='O   '
                  PDBNAM(KO  )='OXT '
               END IF
            END IF
         END IF
C
C        -- CHECK THE NUMBER OF ATOMS FOR EACH AA --
C           CHANGE RESNAM OF THE AMINO ACID FOR HIS, LYS AND CYS
C           DEPENDING ON THE VARIOUS CASES
C           
C        CYSTINE(S-S)      => CYX      
C        CYSTINE(-)        => CYM
C        HISTIDINE DELTA   => HID
C        HISTIDINE EPSILON => HIE
C        HISTIDINE PLUS    => HIP
C        LYSINE            => LYS
C        LYSINE NEUTRAL    => LYN
C        ASP NEUTRAL       => ASH
C        GLU NEUTRAL       => GLH
C
C - ACE -
         IF      (AAA.EQ.'ACE') THEN
            IF(JATOM.NE.6)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - ALA -
         ELSE IF (AAA.EQ.'ALA') THEN
            IF(JATOM.NE.10 .AND. JATOM.NE.11 .AND. JATOM.NE.12)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - ARG -
         ELSE IF (AAA.EQ.'ARG') THEN
            IF(JATOM.NE.24 .AND. JATOM.NE.25 .AND. JATOM.NE.26)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - ASN -
         ELSE IF (AAA.EQ.'ASN') THEN
            IF(JATOM.NE.14 .AND. JATOM.NE.15 .AND. JATOM.NE.16)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - ASP -
         ELSE IF (AAA.EQ.'ASP') THEN
            NHD2=0
            DO IH=1,JATOM
               IF(PDBNAM(LFFAT+IH).EQ.'HD1 ') PDBNAM(LFFAT+IH)='HD2 '
               IF(PDBNAM(LFFAT+IH).EQ.'HD2 ') NHD2=1
               IF(PDBNAM(LFFAT+IH).EQ.'HD2 ') KHD2=LFFAT+IH
               IF(PDBNAM(LFFAT+IH).EQ.'OD1 ') KOD1=LFFAT+IH
               IF(PDBNAM(LFFAT+IH).EQ.'OD2 ') KOD2=LFFAT+IH
            ENDDO
            IF(NHD2.EQ.1) THEN
               RESNAM(IRES)='ASH     '
               DISOH=(CORD(1,KOD2)-CORD(1,KHD2))**2
     *              +(CORD(2,KOD2)-CORD(2,KHD2))**2
     *              +(CORD(3,KOD2)-CORD(3,KHD2))**2
               IF(DISOH.LE.5.142D+00) THEN      ! <1.20 A
               ELSE
                  PDBNAM(KOD1)='OD2 '
                  PDBNAM(KOD2)='OD1 '
               END IF
            END IF
            IF(JATOM.NE.12 .AND. JATOM.NE.13 .AND. JATOM.NE.14 .AND.
     *         JATOM.NE.15)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - CYS - CYSSS -
         ELSE IF (AAA.EQ.'CYS') THEN
            KASE = 0
            DO ISSBD=1,NSSBD
               IF(IRES.EQ.SSBOND(1,ISSBD).OR.
     *            IRES.EQ.SSBOND(2,ISSBD)) KASE = 1
            ENDDO
            IF(KASE.EQ.0) THEN
               IF(JATOM.EQ.10) RESNAM(IRES)='CYM     '
               IF(JATOM.NE.10 .AND. JATOM.NE.11 .AND.
     *            JATOM.NE.12 .AND. JATOM.NE.13)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
               END IF
            ELSE IF (KASE.EQ.1) THEN
               RESNAM(IRES)='CYX     '
               IF(JATOM.NE.10 .AND. JATOM.NE.11 .AND. JATOM.NE.12)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
               END IF
            END IF
C - GLN -
         ELSE IF (AAA.EQ.'GLN') THEN
            IF(JATOM.NE.17 .AND. JATOM.NE.18 .AND. JATOM.NE.19)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - GLU -
         ELSE IF (AAA.EQ.'GLU') THEN
            NHE2=0
            DO IH=1,JATOM
               IF(PDBNAM(LFFAT+IH).EQ.'HE1 ') PDBNAM(LFFAT+IH)='HE2 '
               IF(PDBNAM(LFFAT+IH).EQ.'HE2 ') NHE2=1
               IF(PDBNAM(LFFAT+IH).EQ.'HE2 ') KHE2=LFFAT+IH
               IF(PDBNAM(LFFAT+IH).EQ.'OE1 ') KOE1=LFFAT+IH
               IF(PDBNAM(LFFAT+IH).EQ.'OE2 ') KOE2=LFFAT+IH
            ENDDO
            IF(NHE2.EQ.1) THEN
               RESNAM(IRES)='GLH     '
               DISOH=(CORD(1,KOE2)-CORD(1,KHE2))**2
     *              +(CORD(2,KOE2)-CORD(2,KHE2))**2
     *              +(CORD(3,KOE2)-CORD(3,KHE2))**2
               IF(DISOH.LE.5.142D+00) THEN      ! <1.20 A
               ELSE
                  PDBNAM(KOE1)='OE2 '
                  PDBNAM(KOE2)='OE1 '
               END IF
            END IF
            IF(JATOM.NE.15 .AND. JATOM.NE.16 .AND. JATOM.NE.17 .AND.
     *         JATOM.NE.18)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - GLY -
         ELSE IF (AAA.EQ.'GLY') THEN
            IF(JATOM.NE.7 .AND. JATOM.NE.8 .AND. JATOM.NE.9)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - HIS - HID - HIE - HIP -
         ELSE IF (AAA.EQ.'HIS') THEN
            NHD1=0
            NHE2=0
            DO IH=1,JATOM
               IF(PDBNAM(LFFAT+IH).EQ.'HD1 ') NHD1=1
               IF(PDBNAM(LFFAT+IH).EQ.'HE2 ') NHE2=1
            ENDDO
            IF      (NHE2.EQ.0.AND.NHD1.EQ.1) THEN
               RESNAM(IRES)='HID     '
            ELSE IF (NHE2.EQ.1.AND.NHD1.EQ.1) THEN
               RESNAM(IRES)='HIP     '
            ELSE IF (NHE2.EQ.1.AND.NHD1.EQ.0) THEN
               RESNAM(IRES)='HIE     '
            END IF
            IF(JATOM.NE.17 .AND. JATOM.NE.18
     *                     .AND. JATOM.NE.19 .AND. JATOM.NE.20)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - ILE -
         ELSE IF (AAA.EQ.'ILE') THEN
            IF(JATOM.NE.19 .AND. JATOM.NE.20 .AND. JATOM.NE.21)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - LEU -
         ELSE IF (AAA.EQ.'LEU') THEN
            IF(JATOM.NE.19 .AND. JATOM.NE.20 .AND. JATOM.NE.21)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - LYS -
         ELSE IF (AAA.EQ.'LYS') THEN
            NHZ1=0
            NHZ2=0
            NHZ3=0
            DO IH=1,JATOM
               IF(PDBNAM(LFFAT+IH).EQ.'HZ1 ') NHZ1=1
               IF(PDBNAM(LFFAT+IH).EQ.'HZ2 ') NHZ2=1
               IF(PDBNAM(LFFAT+IH).EQ.'HZ3 ') NHZ3=1
            ENDDO
            NHZ = NHZ1 + NHZ2 + NHZ3
            IF(NHZ.EQ.2) RESNAM(IRES)='LYN     '
            IF(JATOM.NE.21.AND.JATOM.NE.22 .AND. JATOM.NE.23 .AND.
     *         JATOM.NE.24)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - MET -
         ELSE IF (AAA.EQ.'MET') THEN
            IF(JATOM.NE.17 .AND. JATOM.NE.18 .AND. JATOM.NE.19)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - PHE -
         ELSE IF (AAA.EQ.'PHE') THEN
            IF(JATOM.NE.20 .AND. JATOM.NE.21 .AND. JATOM.NE.22)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - PRO - PROP
         ELSE IF (AAA.EQ.'PRO') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.16) THEN
                  RESNAM(IRES)='PROP    '
               END IF
            END IF
            IF(JATOM.NE.14 .AND. JATOM.NE.15 .AND. JATOM.NE.16)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - SER -
         ELSE IF (AAA.EQ.'SER') THEN
            IF(JATOM.NE.11 .AND. JATOM.NE.12 .AND. JATOM.NE.13)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - THR -
         ELSE IF (AAA.EQ.'THR') THEN
            IF(JATOM.NE.14 .AND. JATOM.NE.15 .AND. JATOM.NE.16)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - TRP -
         ELSE IF (AAA.EQ.'TRP') THEN
            IF(JATOM.NE.24 .AND. JATOM.NE.25 .AND. JATOM.NE.26)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - TYR -
         ELSE IF (AAA.EQ.'TYR') THEN
            IF(JATOM.NE.21 .AND. JATOM.NE.22 .AND. JATOM.NE.23)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - VAL -
         ELSE IF (AAA.EQ.'VAL') THEN
            IF(JATOM.NE.16 .AND. JATOM.NE.17 .AND. JATOM.NE.18)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
         END IF
C
C        -- QUANPOL CANNOT HANDLE NEUTRAL N-TER AND C-TER FOR AMBER --
C
         IF(NNNCCC(IRES).EQ.1.AND.INTERH.EQ.2) THEN
            IF(MASWRK) WRITE(IW,'(/1X,A,A6,I6,A/)')
     *      'ERROR: QUANPOL CANNOT HANDLE NEUTRAL N-TERMINA:',
     *      AAA,IRES,' FOR AMBER.'
            IF(MASWRK) WRITE(IW,*)' '
            CALL ABRT
         END IF
         IF(NNNCCC(IRES).EQ.9.AND.ICTERH.EQ.1) THEN
            IF(MASWRK) WRITE(IW,'(/1X,A,A6,I6,A/)')
     *      'ERROR: QUANPOL CANNOT HANDLE NEUTRAL C-TERMINA:',
     *      AAA,IRES,' FOR AMBER.'
            IF(MASWRK) WRITE(IW,*)' '
            CALL ABRT
         END IF
C
C
C - RNA ADE -
         IF (RESNAM(IRES).EQ.'  A     ') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.33)THEN
               RESNAM(IRES) = 'RA      '
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.31)THEN
               RESNAM(IRES) = 'RA5     '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.34)THEN
               RESNAM(IRES) = 'RA3     '
            END IF
C - RNA CYT -
         ELSE IF (RESNAM(IRES).EQ.'  C     ') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.31)THEN
               RESNAM(IRES) = 'RC      '
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.29)THEN
               RESNAM(IRES) = 'RC5     '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.32)THEN
               RESNAM(IRES) = 'RC3     '
            END IF
C - RNA GUA -
         ELSE IF (RESNAM(IRES).EQ.'  G     ') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.34)THEN
               RESNAM(IRES) = 'RG      '
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.32)THEN
               RESNAM(IRES) = 'RG5     '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.35)THEN
               RESNAM(IRES) = 'RG3     '
            END IF
C - RNA URA -
         ELSE IF (RESNAM(IRES).EQ.'  U     ') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.30)THEN
               RESNAM(IRES) = 'RU      '
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.28)THEN
               RESNAM(IRES) = 'RU5     '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.31)THEN
               RESNAM(IRES) = 'RU3     '
            END IF
C - DNA ADE -
         ELSE IF (RESNAM(IRES).EQ.' DA     ') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.32)THEN
               RESNAM(IRES) = 'DA      '
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.30)THEN
               RESNAM(IRES) = 'DA5     '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.33)THEN
               RESNAM(IRES) = 'DA3     '
            END IF
C - DNA CYT -
         ELSE IF (RESNAM(IRES).EQ.' DC     ') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.30)THEN
               RESNAM(IRES) = 'DC      '
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.28)THEN
               RESNAM(IRES) = 'DC5     '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.31)THEN
               RESNAM(IRES) = 'DC3     '
            END IF
C - DNA GUA -
         ELSE IF (RESNAM(IRES).EQ.' DG     ') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.33)THEN
               RESNAM(IRES) = 'DG      '
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.31)THEN
               RESNAM(IRES) = 'DG5     '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.34)THEN
               RESNAM(IRES) = 'DG3     '
            END IF
C - DNA THY -
         ELSE IF (RESNAM(IRES).EQ.' DT     ') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.32)THEN
               RESNAM(IRES) = 'DT      '
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.30)THEN
               RESNAM(IRES) = 'DT5     '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.33)THEN
               RESNAM(IRES) = 'DT3     '
            END IF
         END IF
C
C        -- FIND THE RESIDUE IN THE TOP FILE --
C
         TEXT8=' '//RESNAM(IRES)(1:3)//'  IN'
         NFILE=12
         IF(NNNCCC(IRES).EQ.1.AND.INTERH.NE.-99)NFILE=13
         IF(NNNCCC(IRES).EQ.9.AND.ICTERH.NE.-99)NFILE=14
         IF(INTERH.EQ.-99.OR.ICTERH.EQ.-99)     NFILE=15
         MLINE = 0
         IF(NFILE.EQ.12) MLINE = NLINA
         IF(NFILE.EQ.13) MLINE = NLINB
         IF(NFILE.EQ.14) MLINE = NLINC
         IF(NFILE.EQ.15) MLINE = NLIND
         IF(MLINE.EQ.0) GOTO 690
         KKKGROUP  = 0
         KKKATOM   = 0
         KKKCHARGE = 0
         KKKIMP    = 0
C
         LCOUNT = 0
         IREAD  = 0
         DO ILINE=1,MLINE
         IF(NFILE.EQ.12) WD100=TEXTA(ILINE)
         IF(NFILE.EQ.13) WD100=TEXTB(ILINE)
         IF(NFILE.EQ.14) WD100=TEXTC(ILINE)
         IF(NFILE.EQ.15) WD100=TEXTD(ILINE)
C
         WORD8=WD100(1:8)
         IF(NFILE.EQ.15) THEN
C        - SOME AMBER TOP FILES HAVE 'A' INSTEAD OF 'RA' -
         IF(WORD8.EQ.' A5  INT') WORD8=' RA5  IN'
         IF(WORD8.EQ.' A   INT') WORD8=' RA   IN'
         IF(WORD8.EQ.' A3  INT') WORD8=' RA3  IN'
         IF(WORD8.EQ.' U5  INT') WORD8=' RU5  IN'
         IF(WORD8.EQ.' U   INT') WORD8=' RU   IN'
         IF(WORD8.EQ.' U3  INT') WORD8=' RU3  IN'
         IF(WORD8.EQ.' G5  INT') WORD8=' RG5  IN'
         IF(WORD8.EQ.' G   INT') WORD8=' RG   IN'
         IF(WORD8.EQ.' G3  INT') WORD8=' RG3  IN'
         IF(WORD8.EQ.' C5  INT') WORD8=' RC5  IN'
         IF(WORD8.EQ.' C   INT') WORD8=' RC   IN'
         IF(WORD8.EQ.' C3  INT') WORD8=' RC3  IN'
         END IF
C
         IF(WORD8.EQ.TEXT8) KKKGROUP = 1
         IF(KKKGROUP.EQ.0) GOTO 630
         IF(WD100(1:8).EQ.'LOOP CLO') GOTO 690
         IF(WD100(1:8).EQ.'DONE    ') GOTO 690
C
         IF(WORD8.EQ.TEXT8) KKKATOM  = 1
         IF(WD100(1:6).EQ.'CHARGE') THEN
            KKKCHARGE = 1
            GOTO 630
         END IF
         IF(WD100(1:8).EQ.'IMPROPER') THEN
            KKKIMP    = 1
            GOTO 630
         END IF
         IF(WD100(1:8).EQ.'        ') THEN
            IF(KKKATOM.EQ.1)   KKKATOM   = 0
            IF(KKKCHARGE.EQ.1) KKKCHARGE = 0
            IF(KKKIMP.EQ.1)    KKKIMP    = 0
            GOTO 630
         END IF
C
C        -- READ AMBER NAMES --
         IF(KKKATOM.EQ.0) GOTO 610
         CALL CHECKWD100(WD100,NSTRING)
         IF(NSTRING.GE.3) THEN
            READ(WD100,*)WORD6A,WORD6B,WORD6C
         ELSE
            READ(WD100,'(3A6)')WORD6A,WORD6B,WORD6C
         END IF
         WORD6A=WORD6A
         AW = ZERO
         IF(NSTRING.EQ.11)READ(WD100,*)WORD8,WORD8,WORD8,WORD8,WORD8,
     *                                 WORD8,WORD8,WORD8,WORD8,WORD8,
     *                                 AW
         IF(NFILE.EQ.15) THEN
            IF(WORD6B.EQ."O1P   ") WORD6B = "OP1   "
            IF(WORD6B.EQ."O2P   ") WORD6B = "OP2   "
            IF(WORD6B.EQ."H5T   ") WORD6B = "HO5'  "
            IF(WORD6B.EQ."H3T   ") WORD6B = "HO3'  "
            IF(WORD6B.EQ."H5'1  ") WORD6B = "H5'   "
            IF(WORD6B.EQ."H5'2  ") WORD6B = "H5''  "
            IF(WORD6B.EQ."H2'1  ") WORD6B = "H2'   "
            IF(WORD6B.EQ."H2'2  ") WORD6B = "H2''  "
            IF(WORD6B.EQ."HO'2  ") WORD6B = "HO2'  "
            IF(WORD6B.EQ."H51   ") WORD6B = "H71   "
            IF(WORD6B.EQ."H52   ") WORD6B = "H72   "
            IF(WORD6B.EQ."H53   ") WORD6B = "H73   "
         END IF
         IF(NFILE.EQ.13) THEN
            IF(WORD6B.EQ."H1    ") WORD6B = "H     "
         END IF
         IF(NFILE.EQ.12.OR.NFILE.EQ.13.OR.NFILE.EQ.14) THEN
            IF(WORD6B.EQ."HN    ") WORD6B = "H     "
         END IF
         DO IFFAT =1,NATAAA(IRES)
            IF(PDBNAM(IFFAT+LFFAT).EQ.WORD6B(1:4)) THEN
               AMBNAM(IFFAT+LFFAT)=WORD6C(1:5)
               CHARG (IFFAT+LFFAT)=AW
               LCOUNT = LCOUNT + 1
               LROW   = INT(LCOUNT/5)
               LCOL   = MOD(LCOUNT,5)
               IF(LCOL.EQ.0) THEN
                  LCOL = 5
               ELSE
                  LROW = LROW + 1
               END IF
               NCHARG(LCOL,LROW)=IFFAT+LFFAT
            END IF
         ENDDO
 610     CONTINUE
C
C        -- READ IN ATOMIC CHARGES FROM THE CHARGE SECTION --
         IF(KKKCHARGE.EQ.0) GOTO 620
         NROW = INT(NATAAA(IRES)/5)
         NREM = MOD(NATAAA(IRES),5)
         IF(NREM.NE.0) NROW =NROW + 1
         IREAD = IREAD + 1
         IF(IREAD.LT.NROW)THEN
            READ(WD100,*)    CHARG(NCHARG(1,IREAD)),
     *                       CHARG(NCHARG(2,IREAD)),
     *                       CHARG(NCHARG(3,IREAD)),
     *                       CHARG(NCHARG(4,IREAD)),
     *                       CHARG(NCHARG(5,IREAD))
         ELSE IF(IREAD.EQ.NROW)THEN
            IF(NREM.EQ.0)READ(WD100,*)CHARG(NCHARG(1,IREAD)),
     *                                CHARG(NCHARG(2,IREAD)),
     *                                CHARG(NCHARG(3,IREAD)),
     *                                CHARG(NCHARG(4,IREAD)),
     *                                CHARG(NCHARG(5,IREAD))
            IF(NREM.EQ.4)READ(WD100,*)CHARG(NCHARG(1,IREAD)),
     *                                CHARG(NCHARG(2,IREAD)),
     *                                CHARG(NCHARG(3,IREAD)),
     *                                CHARG(NCHARG(4,IREAD))
            IF(NREM.EQ.3)READ(WD100,*)CHARG(NCHARG(1,IREAD)),
     *                                CHARG(NCHARG(2,IREAD)),
     *                                CHARG(NCHARG(3,IREAD))
            IF(NREM.EQ.2)READ(WD100,*)CHARG(NCHARG(1,IREAD)),
     *                                CHARG(NCHARG(2,IREAD))
            IF(NREM.EQ.1)READ(WD100,*)CHARG(NCHARG(1,IREAD))
         END IF
 620     CONTINUE
C
C        --- FILL IN DIHB LIST ---
         IF(KKKIMP.EQ.0) GOTO 630
         READ(WD100,*)WORD4A,WORD4B,WORD4C,WORD4D
         NDIHB = NDIHB + 1
         IF(NDIHB.GT.MXDIHB) THEN
            IF(MASWRK) WRITE(IW,*)
     *      'ERROR: IN RDAMBER, NDIHB EXCEEDED MXDIHB'
            IF(MASWRK)WRITE(IW,*)' '
            CALL ABRT
         END IF
         IF(RESNAM(IRES-1)(1:3).EQ.'ACE') THEN
            IF(WORD4A.EQ.'-M  ')
     *         NLIST(1,NDIHB)=LFFAT - NATAAA(IRES-1) + 1
            IF(WORD4B.EQ.'-M  ')
     *         NLIST(2,NDIHB)=LFFAT - NATAAA(IRES-1) + 1
            IF(WORD4C.EQ.'-M  ')
     *         NLIST(3,NDIHB)=LFFAT - NATAAA(IRES-1) + 1
            IF(WORD4D.EQ.'-M  ')
     *         NLIST(4,NDIHB)=LFFAT - NATAAA(IRES-1) + 1
         ELSE
            IF(WORD4A.EQ.'-M  ')
     *         NLIST(1,NDIHB)=LFFAT - NATAAA(IRES-1) + 3 
            IF(WORD4B.EQ.'-M  ')
     *         NLIST(2,NDIHB)=LFFAT - NATAAA(IRES-1) + 3
            IF(WORD4C.EQ.'-M  ')
     *         NLIST(3,NDIHB)=LFFAT - NATAAA(IRES-1) + 3
            IF(WORD4D.EQ.'-M  ')
     *         NLIST(4,NDIHB)=LFFAT - NATAAA(IRES-1) + 3
         END IF
         IF(WORD4A.EQ.'+M  ')NLIST(1,NDIHB)=LFFAT + NATAAA(IRES  ) + 1
         IF(WORD4B.EQ.'+M  ')NLIST(2,NDIHB)=LFFAT + NATAAA(IRES  ) + 1
         IF(WORD4C.EQ.'+M  ')NLIST(3,NDIHB)=LFFAT + NATAAA(IRES  ) + 1
         IF(WORD4D.EQ.'+M  ')NLIST(4,NDIHB)=LFFAT + NATAAA(IRES  ) + 1
         DO IFFAT=1,NATAAA(IRES)
            IF(WORD4A.EQ.PDBNAM(IFFAT+LFFAT))NLIST(1,NDIHB)=IFFAT+LFFAT
            IF(WORD4B.EQ.PDBNAM(IFFAT+LFFAT))NLIST(2,NDIHB)=IFFAT+LFFAT
            IF(WORD4C.EQ.PDBNAM(IFFAT+LFFAT))NLIST(3,NDIHB)=IFFAT+LFFAT
            IF(WORD4D.EQ.PDBNAM(IFFAT+LFFAT))NLIST(4,NDIHB)=IFFAT+LFFAT
         ENDDO
 630     CONTINUE
         ENDDO
C
 690  CONTINUE
C
 695  CONTINUE
C
C
C     **** READ IN AMBER PAR FILES ****
C
      NLINA=0
      NLINB=0
      NLINC=0
      NTIMES=1
      IF(NPAR18.EQ.1) NTIMES=2
      IF(NPAR19.EQ.1) NTIMES=3
C
      DO ITIMES = 1, NTIMES
      IF(ITIMES.EQ.1) NFILE=16
      IF(ITIMES.EQ.2) NFILE=18
      IF(ITIMES.EQ.3) NFILE=19
C
      IF(MASWRK) REWIND(NFILE)
 700  CONTINUE
      IEOF=0
      IF(MASWRK) THEN
         READ(NFILE,'(A100)',END=701)WD100
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         DO I=1,100
            CMSG(I) = ICHAR(WD100(I:I))
         ENDDO
         GOTO 702
 701     IEOF=1
 702     CONTINUE
      END IF
      IF(GOPARR) CALL DDI_BCAST(275,'I',IEOF,1  ,MASTER)
      IF(IEOF.EQ.1) GOTO 703
      IF(GOPARR) CALL DDI_BCAST(462,'I',CMSG,100,MASTER)
      IF (.NOT.MASWRK) THEN
         DO I=1,100
            WD100(I:I) = CHAR(CMSG(I))
         ENDDO
      END IF
      IF(ITIMES.EQ.1) THEN
         NLINA=NLINA+1
         TEXTA(NLINA)=WD100
         IF(NLINA.GT.20000) THEN
            IF(MASWRK) WRITE(IW,*) ' ERROR: NLINA EXCEEDED 20000.'
            CALL ABRT
         END IF
      END IF
      IF(ITIMES.EQ.2) THEN
         NLINB=NLINB+1
         TEXTB(NLINB)=WD100
         IF(NLINB.GT.20000) THEN
            IF(MASWRK) WRITE(IW,*) ' ERROR: NLINB EXCEEDED 20000.'
            CALL ABRT
         END IF
      END IF
      IF(ITIMES.EQ.3) THEN
         NLINC=NLINC+1
         TEXTC(NLINC)=WD100
         IF(NLINC.GT.20000) THEN
            IF(MASWRK) WRITE(IW,*) ' ERROR: NLINC EXCEEDED 20000.'
            CALL ABRT
         END IF
      END IF
      GOTO 700
 703  CONTINUE
      ENDDO
C
C     **** GENERATE BONDS, ANGLES, DIHEDRAL ANGLES ****
C
      CALL FFBOND(NFFAT,IPAIR,ZANF,CORD,NBOND)
      CALL FFANGL(IPAIR,NBOND,KLIST,NANGL)
      CALL FFDIHR(KLIST,NANGL,LLIST,NDIHR)
C
C     **** SEARCH FOR BOND PARAMETERS ****
C
      DO ITIMES=1,NTIMES
         IF(ITIMES.EQ.1) MLINE = NLINA
         IF(ITIMES.EQ.2) MLINE = NLINB
         IF(ITIMES.EQ.3) MLINE = NLINC
         DO ILINE = 1, MLINE
            IF(ITIMES.EQ.1) WD100=TEXTA(ILINE)
            IF(ITIMES.EQ.2) WD100=TEXTB(ILINE)
            IF(ITIMES.EQ.3) WD100=TEXTC(ILINE)
C           - CHECK IF IT IS A BOND ENTRY -
            IF(WD100( 1:20).EQ.'                    ') GOTO 708
            IF(WD100( 3: 3).NE.'-'                   ) GOTO 708
            IF(WD100( 6: 6).NE.' '                   ) GOTO 708
            IF(WD100( 9: 9).EQ.'-'                   ) GOTO 708
            CALL CHECKWD100(WD100(6:6),NSTRING)
            IF(NSTRING.LT.2) GOTO 708
            READ(WD100(6:100),*,ERR=708)AW,BW
            IF(AW.LT.1.0D+00.OR.BW.GT.4.0D+00) GOTO 708
            READ(WD100,'(A5)')WORD5A
            DO IBOND=1,NBOND
               KK1    = IPAIR(1,IBOND)
               KK2    = IPAIR(2,IBOND)
               IF(WORD5A.EQ.AMBNAM(KK1)(1:2)//'-'//AMBNAM(KK2)(1:2).OR.
     *            WORD5A.EQ.AMBNAM(KK2)(1:2)//'-'//AMBNAM(KK1)(1:2))
     *            THEN
                  FCBOND(IBOND) = AW*TOHART*TOANGS*TOANGS
                  BOND0(IBOND)  = BW*TOBOHR
               END IF
            ENDDO
 708     CONTINUE
         ENDDO
      ENDDO
C
C     **** SEARCH FOR ANGLE PARAMETERS ****
C
      DO ITIMES=1,NTIMES
         IF(ITIMES.EQ.1) MLINE = NLINA
         IF(ITIMES.EQ.2) MLINE = NLINB
         IF(ITIMES.EQ.3) MLINE = NLINC
         DO ILINE = 1, MLINE
            IF(ITIMES.EQ.1) WD100=TEXTA(ILINE)
            IF(ITIMES.EQ.2) WD100=TEXTB(ILINE)
            IF(ITIMES.EQ.3) WD100=TEXTC(ILINE)
C           - CHECK IF IT IS AN ANGLE ENTRY -
            IF(WD100( 1:20).EQ.'                    ') GOTO 713
            IF(WD100( 3: 3).NE.'-'                   ) GOTO 713
            IF(WD100( 6: 6).NE.'-'                   ) GOTO 713
            IF(WD100( 9: 9).NE.' '                   ) GOTO 713
            CALL CHECKWD100(WD100(9:9),NSTRING)
            IF(NSTRING.LT.2) GOTO 713
            READ(WD100(9:100),*,ERR=713)AW,BW
            IF(AW.LT.1.0D+00.OR.BW.LT.30.0D+00) GOTO 713
            READ(WD100,'(A8)')WORD8
            DO IANGL=1,NANGL
               KK1    = KLIST(1,IANGL)
               KK2    = KLIST(2,IANGL)
               KK3    = KLIST(3,IANGL)
               IF(WORD8.EQ.AMBNAM(KK1)(1:2)//'-'//
     *                     AMBNAM(KK2)(1:2)//'-'//
     *                     AMBNAM(KK3)(1:2).OR.
     *            WORD8.EQ.AMBNAM(KK3)(1:2)//'-'//
     *                     AMBNAM(KK2)(1:2)//'-'//
     *                     AMBNAM(KK1)(1:2))THEN
                  FCANGL(IANGL) = AW*TOHART
                  ANGL0(IANGL)  = BW*TORAD
               END IF
            ENDDO
 713     CONTINUE
         ENDDO
      ENDDO
C
C
C     **** SEARCH FOR DIHEDRAL ROTATION PARAMETERS ****
C
      DO ITIMES=1,NTIMES
      IF(ITIMES.EQ.1) MLINE = NLINA               
      IF(ITIMES.EQ.2) MLINE = NLINB               
      IF(ITIMES.EQ.3) MLINE = NLINC               
      DO ILINE = 1, MLINE
         IF(ITIMES.EQ.1) TEXTA(ILINE)(96:100)='     '
         IF(ITIMES.EQ.2) TEXTB(ILINE)(96:100)='     '
         IF(ITIMES.EQ.3) TEXTC(ILINE)(96:100)='     '
         IF(ITIMES.EQ.1) WD100=TEXTA(ILINE)
         IF(ITIMES.EQ.2) WD100=TEXTB(ILINE)
         IF(ITIMES.EQ.3) WD100=TEXTC(ILINE)
C        - CHECK IF IT IS A DIHEDRAL ENTRY -
         IF(WD100( 1:20).EQ.'                    ') GOTO 707
         IF(WD100( 3: 3).NE.'-'                   ) GOTO 707
         IF(WD100( 6: 6).NE.'-'                   ) GOTO 707
         IF(WD100( 9: 9).NE.'-'                   ) GOTO 707
         IF(WD100(12:12).NE.' '                   ) GOTO 707
         CALL CHECKWD100(WD100(13:13),NSTRING)
         IF(NSTRING.LT.4) GOTO 707
         READ(WD100(13:100),*,ERR=707,END=707)DW,AW,BW,CW
         IF(ITIMES.EQ.1) TEXTA(ILINE)(96:100)='DIHED'
         IF(ITIMES.EQ.2) TEXTB(ILINE)(96:100)='DIHED'
         IF(ITIMES.EQ.3) TEXTC(ILINE)(96:100)='DIHED'
 707     CONTINUE
      ENDDO
      ENDDO
C
      KDIHR=0
      CALL VICLR(LLIST1,1,4*MXDIHR)
C
      DO IDIHR=1,NDIHR
         KK1    = LLIST(1,IDIHR)
         KK2    = LLIST(2,IDIHR)
         KK3    = LLIST(3,IDIHR)
         KK4    = LLIST(4,IDIHR)
         IDOXX  = 1
         DO IIIREAD=1,2
          IDONE  = 0
          DO ITIMES=NTIMES,1,-1
             IF(ITIMES.EQ.1) MLINE = NLINA
             IF(ITIMES.EQ.2) MLINE = NLINB
             IF(ITIMES.EQ.3) MLINE = NLINC
             DO ILINE = 1, MLINE
                IF(ITIMES.EQ.1) WD100=TEXTA(ILINE)
                IF(ITIMES.EQ.2) WD100=TEXTB(ILINE)
                IF(ITIMES.EQ.3) WD100=TEXTC(ILINE)
C               - CHECK IF IT IS A DIHEDRAL ENTRY -
                IF(WD100(96:100).NE.'DIHED') GOTO 723
                READ(WD100(13:100),*,ERR=723,END=723)DW,AW,BW,CW
                READ(WD100,'(A11)')WORD11A
                IF(IIIREAD.EQ.1) THEN
                   IF(WD100(1:2).EQ.'X ' ) GOTO 723
                   IF(IDONE.GT.ITIMES)     GOTO 723
                   IF(WORD11A.EQ.
     *                AMBNAM(KK1)(1:2)//'-'//AMBNAM(KK2)(1:2)//'-'//
     *                AMBNAM(KK3)(1:2)//'-'//AMBNAM(KK4)(1:2).OR.
     *                WORD11A.EQ.
     *                AMBNAM(KK4)(1:2)//'-'//AMBNAM(KK3)(1:2)//'-'//
     *                AMBNAM(KK2)(1:2)//'-'//AMBNAM(KK1)(1:2)  ) THEN
                      KDIHR         = KDIHR +1
                      LLIST1(1,KDIHR)=KK1
                      LLIST1(2,KDIHR)=KK2
                      LLIST1(3,KDIHR)=KK3
                      LLIST1(4,KDIHR)=KK4
                      VROT(KDIHR)    =AW*TOHART/DW
                      GAMA(KDIHR)    =BW*TORAD
                      NNN(KDIHR)     =ABS(INT(CW))
                      IDOXX = 0
                      IDONE = ITIMES
                   END IF
                END IF
                IF(IIIREAD.EQ.2) THEN
                   IF(WD100(1:2).NE.'X ' ) GOTO 723
                   IF(IDOXX.EQ.0)          GOTO 723
                   IF(IDONE.GT.ITIMES)     GOTO 723
                   IF(WORD11A.EQ.'X '//'-'//AMBNAM(KK2)(1:2)//'-'//
     *                           AMBNAM(KK3)(1:2)//'-'//'X '.OR.
     *                WORD11A.EQ.'X '//'-'//AMBNAM(KK3)(1:2)//'-'//
     *                           AMBNAM(KK2)(1:2)//'-'//'X ')THEN
                      KDIHR         = KDIHR +1
                      LLIST1(1,KDIHR)=KK1
                      LLIST1(2,KDIHR)=KK2
                      LLIST1(3,KDIHR)=KK3
                      LLIST1(4,KDIHR)=KK4
                      VROT(KDIHR)    =AW*TOHART/DW
                      GAMA(KDIHR)    =BW*TORAD
                      NNN(KDIHR)     =ABS(INT(CW))
                      IDONE = ITIMES
                   END IF
                END IF
 723         CONTINUE
             ENDDO
          ENDDO
         ENDDO
      ENDDO
C
      NDIHR = KDIHR
      CALL ICOPY(4*NDIHR,LLIST1,1,LLIST,1)
      IF(NDIHR.GT.MXDIHR) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: IN RDAMBER, NDIHR EXCEEDED MXDIHR'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
C     **** SEARCH FOR AMBER IMPROPER TERMS ****
C          TREAT THEM AS DIHEDRAL ROTATION TERMS
C
      DO ITIMES=1,NTIMES
      IF(ITIMES.EQ.1) MLINE = NLINA
      IF(ITIMES.EQ.2) MLINE = NLINB
      IF(ITIMES.EQ.3) MLINE = NLINC
      DO ILINE = 1, MLINE
         IF(ITIMES.EQ.1) TEXTA(ILINE)(96:100)='     '
         IF(ITIMES.EQ.2) TEXTB(ILINE)(96:100)='     '
         IF(ITIMES.EQ.3) TEXTC(ILINE)(96:100)='     '
         IF(ITIMES.EQ.1) WD100=TEXTA(ILINE)
         IF(ITIMES.EQ.2) WD100=TEXTB(ILINE)
         IF(ITIMES.EQ.3) WD100=TEXTC(ILINE)
C        - CHECK IF IT IS AN IMPROPER ENTRY -
         IF(WD100( 1:20).EQ.'                    ') GOTO 808
         IF(WD100( 3: 3).NE.'-'                   ) GOTO 808
         IF(WD100( 6: 6).NE.'-'                   ) GOTO 808
         IF(WD100( 9: 9).NE.'-'                   ) GOTO 808
         IF(WD100(12:12).NE.' '                   ) GOTO 808
         CALL CHECKWD100(WD100(13:13),NSTRING)
         IF(NSTRING.LT.3) GOTO 808
         READ(WD100(13:100),*,ERR=808)AW,BW,CW
         IF(BW.NE.180.0D+00.OR.ABS(INT(CW)).NE.2) GOTO 808
         IF(ITIMES.EQ.1) TEXTA(ILINE)(96:100)='IMPRO'
         IF(ITIMES.EQ.2) TEXTB(ILINE)(96:100)='IMPRO'
         IF(ITIMES.EQ.3) TEXTC(ILINE)(96:100)='IMPRO'
 808     CONTINUE
      ENDDO
      ENDDO
C
      IF(NFFTYP/10000.EQ.3.AND.LOUT.EQ.1)
     *CALL FFDIHB(CORD,IPAIR,KLIST,NLIST,5.0D+00)
C
      DO IDIHB=1,NDIHB
         KK1    = NLIST(1,IDIHB)
         KK2    = NLIST(2,IDIHB)
         KK3    = NLIST(3,IDIHB)
         KK4    = NLIST(4,IDIHB)
         IDONE  = 0
         DO ITIMES=NTIMES,1,-1         !  BACKWARD
            IF(ITIMES.EQ.1) MLINE = NLINA
            IF(ITIMES.EQ.2) MLINE = NLINB
            IF(ITIMES.EQ.3) MLINE = NLINC
            KCOUNT = 0
            DO ILINE = MLINE,1,-1      !  BACKWARD
               IF(ITIMES.EQ.1) WD100=TEXTA(ILINE)
               IF(ITIMES.EQ.2) WD100=TEXTB(ILINE)
               IF(ITIMES.EQ.3) WD100=TEXTC(ILINE)
C              - CHECK IF IT IS AN IMPROPER ENTRY -
               IF(WD100(96:100).NE.'IMPRO') GOTO 833
               READ(WD100(13:100),*,ERR=833)AW,BW,CW
               READ(WD100,'(A11)')WORD11A
               IF(WORD11A.EQ.'C -CM-CM-CT') THEN
                  KCOUNT=KCOUNT+1  
                  IF(KCOUNT.EQ.2)  GOTO 833
               END IF
               IF(IDONE.GT.0)      GOTO 833
         IF(WORD11A.EQ.AMBNAM(KK1)(1:2)//'-'//AMBNAM(KK2)(1:2)//'-'//
     *                 AMBNAM(KK3)(1:2)//'-'//AMBNAM(KK4)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK4)(1:2)//'-'//AMBNAM(KK3)(1:2)//'-'//
     *                 AMBNAM(KK2)(1:2)//'-'//AMBNAM(KK1)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK2)(1:2)//'-'//AMBNAM(KK1)(1:2)//'-'//
     *                 AMBNAM(KK3)(1:2)//'-'//AMBNAM(KK4)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK4)(1:2)//'-'//AMBNAM(KK3)(1:2)//'-'//
     *                 AMBNAM(KK1)(1:2)//'-'//AMBNAM(KK2)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK1)(1:2)//'-'//AMBNAM(KK3)(1:2)//'-'//
     *                 AMBNAM(KK2)(1:2)//'-'//AMBNAM(KK4)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK4)(1:2)//'-'//AMBNAM(KK2)(1:2)//'-'//
     *                 AMBNAM(KK3)(1:2)//'-'//AMBNAM(KK1)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK2)(1:2)//'-'//AMBNAM(KK4)(1:2)//'-'//
     *                 AMBNAM(KK3)(1:2)//'-'//AMBNAM(KK1)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK1)(1:2)//'-'//AMBNAM(KK3)(1:2)//'-'//
     *                 AMBNAM(KK4)(1:2)//'-'//AMBNAM(KK2)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK1)(1:2)//'-'//AMBNAM(KK4)(1:2)//'-'//
     *                 AMBNAM(KK3)(1:2)//'-'//AMBNAM(KK2)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK2)(1:2)//'-'//AMBNAM(KK3)(1:2)//'-'//
     *                 AMBNAM(KK4)(1:2)//'-'//AMBNAM(KK1)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK4)(1:2)//'-'//AMBNAM(KK1)(1:2)//'-'//
     *                 AMBNAM(KK3)(1:2)//'-'//AMBNAM(KK2)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK2)(1:2)//'-'//AMBNAM(KK3)(1:2)//'-'//
     *                 AMBNAM(KK1)(1:2)//'-'//AMBNAM(KK4)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK4)(1:2)//'-'//AMBNAM(KK2)(1:2)//'-'//
     *                 AMBNAM(KK3)(1:2)//'-'//AMBNAM(KK1)(1:2).OR.
     *      WORD11A.EQ.AMBNAM(KK1)(1:2)//'-'//AMBNAM(KK3)(1:2)//'-'//
     *                 AMBNAM(KK2)(1:2)//'-'//AMBNAM(KK4)(1:2).OR.
     *      WORD11A.EQ.'X '//'-'//'X '//'-'//
     *                 AMBNAM(KK3)(1:2)//'-'//AMBNAM(KK4)(1:2).OR.
     *      WORD11A.EQ.'X '//'-'//AMBNAM(KK2)(1:2)//'-'//
     *                 AMBNAM(KK3)(1:2)//'-'//AMBNAM(KK4)(1:2)) THEN
            KDIHR         = KDIHR +1
            LLIST1(1,KDIHR)=KK1
            LLIST1(2,KDIHR)=KK2
            LLIST1(3,KDIHR)=KK3
            LLIST1(4,KDIHR)=KK4
            VROT(KDIHR)    =AW*TOHART
            GAMA(KDIHR)    =BW*TORAD
            NNN(KDIHR)     =ABS(INT(CW))
            IDONE = 1
         END IF
 833        CONTINUE
            ENDDO
         ENDDO
      ENDDO
C
C      -- UPDATE THE ACTUAL AMBER DIHR PARAMETER --
      CALL ICOPY(4*KDIHR,LLIST1,1,LLIST,1)
      NDIHR = KDIHR
      NDIHB = 0
      IF(NDIHR.GT.MXDIHR) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: IN RDAMBER, NDIHR EXCEEDED MXDIHR'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
C     **** SEARCH FOR LENNARD-JONES PARAMETERS ****
C
      DO ITIMES=1,NTIMES
         IF(ITIMES.EQ.1) MLINE = NLINA
         IF(ITIMES.EQ.2) MLINE = NLINB
         IF(ITIMES.EQ.3) MLINE = NLINC
         DO ILINE = 1, MLINE
            IF(ITIMES.EQ.1) TEXTA(ILINE)(96:100)='     '
            IF(ITIMES.EQ.2) TEXTB(ILINE)(96:100)='     '
            IF(ITIMES.EQ.3) TEXTC(ILINE)(96:100)='     '
            IF(ITIMES.EQ.1) WD100=TEXTA(ILINE)
            IF(ITIMES.EQ.2) WD100=TEXTB(ILINE)
            IF(ITIMES.EQ.3) WD100=TEXTC(ILINE)
C
C           - CHECK IF IT IS THE LINE ABOVE THE LJ SECTION -
            IIIYES = 1
            IF(WD100( 1:20).EQ.'                    ') IIIYES = 0
            IF(WD100( 1: 2).EQ.'  '                  ) IIIYES = 0
            IF(WD100( 3: 4).NE.'  '                  ) IIIYES = 0
            IF(WD100( 5: 6).EQ.'  '                  ) IIIYES = 0
            IF(WD100( 6: 6).EQ.'-'                   ) IIIYES = 0
            IF(WD100( 7: 8).NE.'  '                  ) IIIYES = 0
            IF(WD100( 9: 9).EQ.'-'                   ) IIIYES = 0
            IF(WD100( 9:10).EQ.'  '                  ) IIIYES = 0
            IF(WD100( 1: 1).NE.WD100 ( 5: 5)         ) IIIYES = 0
            IF(WD100( 1: 1).NE.WD100 ( 9: 9)         ) IIIYES = 0
            IF(WD100( 5: 5).NE.WD100 ( 9: 9)         ) IIIYES = 0
            IF(IIIYES.EQ.1) THEN
               IF(ITIMES.EQ.1) WD100A1=WD100A2
               IF(ITIMES.EQ.1) WD100A2=WD100
               IF(ITIMES.EQ.2) WD100B1=WD100B2
               IF(ITIMES.EQ.2) WD100B2=WD100
               IF(ITIMES.EQ.3) WD100C1=WD100C2
               IF(ITIMES.EQ.3) WD100C2=WD100
            END IF
C
C           - CHECK IF IT IS A LJ ENTRY -
            IF(WD100( 1:20).EQ.'                    ') GOTO 709
            IF(WD100( 3: 3).EQ.'-'                   ) GOTO 709
            IF(WD100( 6: 6).EQ.'-'                   ) GOTO 709
            IF(WD100( 9: 9).EQ.'-'                   ) GOTO 709
            CALL CHECKWD100(WD100,NSTRING)
            IF(NSTRING.LT.3) GOTO 709
            READ(WD100,*,ERR=709)ENTRY2,AW,BW
            IF(AW.GT.7.0D+00) GOTO 709
            IF(BW.GT.3.0D+00) GOTO 709
            IF(ENTRY2(1:1).EQ.'H'.AND.BW.GT.0.06D+00) GOTO 709
            IF(ITIMES.EQ.1) TEXTA(ILINE)(96:100)='LJ   '
            IF(ITIMES.EQ.2) TEXTB(ILINE)(96:100)='LJ   '
            IF(ITIMES.EQ.3) TEXTC(ILINE)(96:100)='LJ   '
 709        CONTINUE
         ENDDO
      ENDDO
C
      DO IFFAT=1,NFFAT
         DO ITIMES=1,NTIMES
            IDONE = 0
            AMBNAM1=AMBNAM(IFFAT)(1:2)
            IF(ITIMES.EQ.1) WD1001=WD100A1
            IF(ITIMES.EQ.1) WD1002=WD100A2
            IF(ITIMES.EQ.2) WD1001=WD100B1
            IF(ITIMES.EQ.2) WD1002=WD100B2
            IF(ITIMES.EQ.3) WD1001=WD100C1
            IF(ITIMES.EQ.3) WD1002=WD100C2
C           -- SAME VALUES HAVE BEEN USED FOR SEVERAL ATOM TYPES --
            DO I=2,25
               I1=(I-1)*4+1 
               I2=(I-1)*4+2 
               IF(AMBNAM1.EQ.WD1001(I1:I2)) AMBNAM1=WD1001(1:2)
               IF(AMBNAM1.EQ.WD1002(I1:I2)) AMBNAM1=WD1002(1:2)
            ENDDO
            IF(ITIMES.EQ.1) MLINE = NLINA           
            IF(ITIMES.EQ.2) MLINE = NLINB            
            IF(ITIMES.EQ.3) MLINE = NLINC            
            DO ILINE = 1, MLINE
               IF(ITIMES.EQ.1) WD100=TEXTA(ILINE)    
               IF(ITIMES.EQ.2) WD100=TEXTB(ILINE)    
               IF(ITIMES.EQ.3) WD100=TEXTC(ILINE)    
C
C              - CHECK IF IT IS A LJ ENTRY -
               IF(WD100(96:100).NE.'LJ   ') GOTO 943
               READ(WD100,*,ERR=943)ENTRY2,AW,BW
               IF(IDONE.GT.0)     GOTO 943
               IF(ENTRY2.EQ.AMBNAM1)THEN
                  SIG(IFFAT) = AW*TOBOHR*1.781797436280679D+00
                  EPS(IFFAT) = BW*TOHART
                  SIG2(IFFAT)= SIG(IFFAT)
                  EPS2(IFFAT)= EPS(IFFAT)*0.5D+00
                  IDONE = 1
               END IF
 943        CONTINUE
            ENDDO
         ENDDO
      ENDDO
C
C     **** SEARCH FOR ATOMIC POLARIZABILITY AND MASS ****
C
      DO ITIMES=1,NTIMES
         IF(ITIMES.EQ.1) MLINE = NLINA
         IF(ITIMES.EQ.2) MLINE = NLINB
         IF(ITIMES.EQ.3) MLINE = NLINC
         DO ILINE = 1, MLINE
            IF(ITIMES.EQ.1) WD100=TEXTA(ILINE)
            IF(ITIMES.EQ.2) WD100=TEXTB(ILINE)
            IF(ITIMES.EQ.3) WD100=TEXTC(ILINE)
C           - CHECK IF IT IS A MASS ENTRY -
            IF(WD100( 1:20).EQ.'                    ') GOTO 953
            IF(WD100( 1: 3).EQ.'   '                 ) GOTO 953
            IF(WD100( 6: 6).EQ.'-'                   ) GOTO 953
            IF(WD100( 9: 9).EQ.'-'                   ) GOTO 953
            CALL CHECKWD100(WD100,NSTRING)
            IF(NSTRING.LT.2) GOTO 953
            BW = ZERO
            CW = ZERO
            IF(WD100(15:24).EQ.'          ')THEN
               READ(WD100,*,ERR=953,END=953)ENTRY2,AW
               IF(AW.LT. 0.1D+00) GOTO 953
            ELSE IF(WD100(26:35).EQ.'          ')THEN
               READ(WD100,*,ERR=953,END=953)ENTRY2,AW,BW
               IF(AW.LT. 0.1D+00) GOTO 953
               IF(BW.GT.10.0D+00) GOTO 953
            ELSE
               READ(WD100,*,ERR=953,END=953)ENTRY2,AW,BW,CW
               IF(AW.LT. 0.1D+00) GOTO 953
               IF(BW.GT.10.0D+00) GOTO 953
               IF(CW.GT.10.0D+00) GOTO 953
            END IF
            DO IFFAT=1,NFFAT
               IDIFF=ABS(NINT(ZMAS(IFFAT)/1822.88850204D+00-AW))
               IF(ENTRY2.EQ.AMBNAM(IFFAT)(1:2).AND.IDIFF.LE.2)THEN
                  ZMAS(IFFAT)  = AW*1822.88850204D+00
                  POL(IFFAT)   = BW*TOBOHR**3
                  ONEMAS(IFFAT)= 1.0D+00/ZMAS(IFFAT)
               END IF
            ENDDO
 953     CONTINUE
         ENDDO
      ENDDO
C
      IF(MASWRK) THEN
         IF(LOUT.EQ.0.AND.NFFTYP/10000.EQ.3) THEN
         CLOSE(12)
         CLOSE(13)
         CLOSE(14)
         CLOSE(15)
         END IF
         CLOSE(16)
         CLOSE(18)
         CLOSE(19)
         IF(LOUT.EQ.1.AND.NFFTYP/10000.EQ.3) CLOSE(17)
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK RDCHARMM
!>
!> @brief    read CHARMM parameter and top files
!>    
!> @author   Hui Li group
!>   
!> @details  read files from CHARMM developers
!>
      SUBROUTINE RDCHARMM(CORD,ZANF,RESNAM,CHMNAM,PDBNAM,
     *                    ZMAS,ONEMAS,
     *                    CHARG,SIG,EPS,
     *                    SIG2,EPS2,
     *                    SSBOND,
     *                    BOND0,FCBOND,
     *                    ANGL0,FCANGL,
     *                    DIHB0,FCDIHB,
     *                    VROT,NNN,GAMA,
     *                    IPAIR,KLIST,LLIST,NLIST,
     *                    NRES,NATAAA,NSSBD,NNNCCC,MAPLST,
     *                    ITYPWAT,LLIST1,TEXTA)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK,RESNAMOK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      INTEGER CMSG(100)
      INTEGER SSBOND(4,*)
C
      CHARACTER*3  AAA,WORD3,TEXT3
      CHARACTER*4  PDBNAM
      CHARACTER*5  WORD5A,WORD5B,WORD5C,WORD5D,CHMNAM,
     *             WORD55
      CHARACTER*8  RESNAM,WORD8,CHARMM36
      CHARACTER*9  TEXT9,WORD9
      CHARACTER*10 ENTRY10,WORD10A,WORD10B
      CHARACTER*15 ENTRY15,WORD15A,WORD15B
      CHARACTER*20 ENTRY20,WORD20A,WORD20B,WORD20C,WORD20D,WORD20E,
     *             WORD20F
      CHARACTER*100 WD100
      CHARACTER*60 TOPFILE,PARFILE
      CHARACTER    TEXTA(20000)*100
C
      DIMENSION CHMNAM(*),RESNAM(*),PDBNAM(*),NATAAA(*),
     *          WORD55(12)
      DIMENSION CORD(3,*),ZANF(*),
     *          ZMAS(*),ONEMAS(*),CHARG(*),
     *          SIG(*),EPS(*),
     *          SIG2(*),EPS2(*),
     *          BOND0(*),FCBOND(*),
     *          ANGL0(*),FCANGL(*),
     *          DIHB0(*),FCDIHB(*),
     *          VROT(*),NNN(*),
     *          GAMA(*)
      DIMENSION IPAIR(2,*),KLIST(3,*),LLIST(4,*),LLIST1(4,*),
     *          NLIST(4,*),NNNCCC(*),MAPLST(6,*)
C
      COMMON /FFMAX / MXFFAT,MXBOND,MXANGL,MXDIHR,MXDIHB,MXCMAP,
     *                MXWAGG
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)

      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     AMINO ACIDS BY NANDUN THELLAMUREGE, SEP 20, 2011, LINCOLN
C     NUCLEIC ACIDS BY FENGCHAO CUI, OCT 2, 2011, LINCOLN
C     HUI LI, JULY 7, 2012, REMOVED BUGS
C     HUI LI, MAR 22, 2014, USE TEXTA
C
C     -- READ PARAMETERS FROM CHARMM PARAMETER/TOPOLOGY FILES --

      CALL PDB2CHARMM(RESNAM,PDBNAM,NATAAA,NNNCCC,NRES,CORD)
C
      DO J=1,60
         TOPFILE(J:J) = CHAR(JTOPFILE(J))
         PARFILE(J:J) = CHAR(JPARFILE(J))
      ENDDO
      IF(MASWRK) THEN
         IF(JTOPFILE(60).EQ.0) GOTO 100
         OPEN(12,FILE=TOPFILE(1:JTOPFILE(60)),STATUS='OLD',ERR=100)
         WRITE(IW,*)'  QUANPOL SUCCESSFULLY OPENED THE FILE:'
         GOTO 101
 100     CONTINUE
         WRITE(IW,*)'  WARNING: QUANPOL CANNOT OPEN THE FILE:'
 101     CONTINUE
         WRITE(IW,*)"  TOPFILE='",TOPFILE(1:JTOPFILE(60)),"'"
C
         IF(JPARFILE(60).EQ.0) GOTO 102
         OPEN(16,FILE=PARFILE(1:JPARFILE(60)),STATUS='OLD',ERR=102)
         WRITE(IW,*)'  QUANPOL SUCCESSFULLY OPENED THE FILE:'
         GOTO 103
 102     CONTINUE
         WRITE(IW,*)'  WARNING: QUANPOL CANNOT OPEN THE FILE:'
 103     CONTINUE
         WRITE(IW,*)"  PARFILE='",PARFILE(1:JPARFILE(60)),"'"
      END IF
C
      DO IFFAT=1,NFFAT
         CHMNAM(IFFAT)='     '
      ENDDO
C
C
C     **** READ IN CHARMM TOP FILE ****
C
      NLINA=0
      IF(MASWRK) REWIND(12)
 150  CONTINUE
      IEOF=0
      IF(MASWRK) THEN
         READ(12,'(A100)',END=151)WD100
C        ASCII CODE: 65-90 = UPPER CASE, 97-122, LOWER CASE
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         DO I=1,100
            CMSG(I) = ICHAR(WD100(I:I))
         ENDDO
         GOTO 152
 151     IEOF=1
 152     CONTINUE
      END IF
      IF(GOPARR) CALL DDI_BCAST(275,'I',IEOF,1  ,MASTER)
      IF(IEOF.EQ.1) GOTO 153
      IF(GOPARR) CALL DDI_BCAST(462,'I',CMSG,100,MASTER)
      IF (.NOT.MASWRK) THEN
         DO I=1,100
            WD100(I:I) = CHAR(CMSG(I))
         ENDDO
      END IF
      NLINA=NLINA+1
      TEXTA(NLINA)=WD100
      IF(NLINA.GT.20000) THEN
         IF(MASWRK) WRITE(IW,*) ' ERROR: NLINA EXCEEDED 20000.'
         CALL ABRT
      END IF
      GOTO 150
 153  CONTINUE
C
      CHARMM36='        '
      MLINE = NLINA
      DO ILINE = 1, MLINE
         WD100=TEXTA(ILINE)
         IF(WD100(9:42).EQ.'CHARMM36 ALL-HYDROGEN NUCLEIC ACID')
     *   CHARMM36='CHARMM36'
      ENDDO
C
      LFFAT = 0
      NDIHB = 0
      DO 200 IRES=1,NRES
         JATOM = NATAAA(IRES)
C
C        IDENTIFY THE FORM OF N- AND C-TERMINUS AND CHANGE RESIDUE NAMES
C        FOR DIFFERENT CASES.
C        INTERH =  3 :  NH3+ GROUP
C               =  2 :  NH2  GROUP
C               =  1 :  NH   GROUP (NORMAL PEPTIDE)
C        ICTERH =  0 :  COO- GROUP
C               =  1 :  COOH GROUP
C               = -1 :  C=O  GROUP (NORMAL PEPTIDE)
         INTERH =  1
         ICTERH = -1
         AAA=RESNAM(IRES)(1:3)
C
         IF     (NNNCCC(IRES).EQ.1)THEN
            DO II=1,JATOM
               IF(PDBNAM(LFFAT+II).EQ.'HT2 ') INTERH=2
               IF(PDBNAM(LFFAT+II).EQ.'HT3 ') INTERH=3
            ENDDO
         ELSE IF(NNNCCC(IRES).EQ.9)THEN
            DO II=1,JATOM
               IF(PDBNAM(LFFAT+II).EQ.'OT2 ') ICTERH=0
               IF(PDBNAM(LFFAT+II).EQ.'HT2 ') ICTERH=1
               IF(PDBNAM(LFFAT+II).EQ.'HT2 ') KHT2  =LFFAT+II
               IF(PDBNAM(LFFAT+II).EQ.'OT1 ') KOT1  =LFFAT+II
               IF(PDBNAM(LFFAT+II).EQ.'OT2 ') KOT2  =LFFAT+II
            ENDDO
            IF(ICTERH.EQ.1) THEN
               DISOH=(CORD(1,KOT2)-CORD(1,KHT2))**2
     *              +(CORD(2,KOT2)-CORD(2,KHT2))**2
     *              +(CORD(3,KOT2)-CORD(3,KHT2))**2
               IF(DISOH.LE.5.142D+00) THEN      ! <1.20 A
               ELSE
                  PDBNAM(KOT2)='OT1 '
                  PDBNAM(KOT1)='OT2 '
               END IF
            END IF
         END IF
C
C - ACE -   
         IF      (AAA.EQ.'ACE') THEN
            IF(JATOM.NE.6)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - ALA -   
         ELSE IF (AAA.EQ.'ALA') THEN
            IF(JATOM.NE.10 .AND. JATOM.NE.11 .AND. JATOM.NE.12)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - ARG -
         ELSE IF (AAA.EQ.'ARG') THEN
            IF(JATOM.NE.24 .AND. JATOM.NE.25 .AND. JATOM.NE.26)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - ASN -
         ELSE IF (AAA.EQ.'ASN') THEN
            IF(JATOM.NE.14 .AND. JATOM.NE.15 .AND. JATOM.NE.16)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - ASP -
         ELSE IF (AAA.EQ.'ASP') THEN
            NHD2=0
            DO IH=1,JATOM
               IF(PDBNAM(LFFAT+IH).EQ.'HD1 ') PDBNAM(LFFAT+IH)='HD2 '
               IF(PDBNAM(LFFAT+IH).EQ.'HD2 ') NHD2=1
               IF(PDBNAM(LFFAT+IH).EQ.'HD2 ') KHD2=LFFAT+IH
               IF(PDBNAM(LFFAT+IH).EQ.'OD1 ') KOD1=LFFAT+IH
               IF(PDBNAM(LFFAT+IH).EQ.'OD2 ') KOD2=LFFAT+IH
            ENDDO
            IF(NHD2.EQ.1) THEN
               RESNAM(IRES)='ASPP    '
               DISOH=(CORD(1,KOD2)-CORD(1,KHD2))**2
     *              +(CORD(2,KOD2)-CORD(2,KHD2))**2
     *              +(CORD(3,KOD2)-CORD(3,KHD2))**2
               IF(DISOH.LE.5.142D+00) THEN      ! <1.20 A
               ELSE
                  PDBNAM(KOD1)='OD2 '
                  PDBNAM(KOD2)='OD1 '
               END IF
            END IF
            IF(JATOM.NE.12 .AND. JATOM.NE.13 .AND. JATOM.NE.14 .AND.
     *         JATOM.NE.15)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - CYS - CYSSS -
         ELSE IF (AAA.EQ.'CYS') THEN
            KASE = 0
            DO ISSBD=1,NSSBD
               IF(IRES.EQ.SSBOND(1,ISSBD).OR.
     *            IRES.EQ.SSBOND(2,ISSBD)) KASE = 1
            ENDDO
            IF(KASE.EQ.0) THEN
               IF(NFFTYP/10000.EQ.3.AND.JATOM.EQ.10)
     *            RESNAM(IRES)='CYM     '
               IF(NFFTYP/10000.EQ.3.AND.
     *         (JATOM.NE.10 .AND. JATOM.NE.11 .AND.
     *          JATOM.NE.12 .AND. JATOM.NE.13))THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
               END IF
               IF(NFFTYP/10000.NE.3.AND.
     *         (JATOM.NE.11 .AND. JATOM.NE.12 .AND. JATOM.NE.13))THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
               END IF
            ELSE IF (KASE.EQ.1) THEN
               IF(NFFTYP/10000.EQ.3)
     *            RESNAM(IRES)='CYX     '
               IF(JATOM.NE.10 .AND. JATOM.NE.11 .AND. JATOM.NE.12)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
               END IF
            END IF
C - GLN -
         ELSE IF (AAA.EQ.'GLN') THEN
            IF(JATOM.NE.17 .AND. JATOM.NE.18 .AND. JATOM.NE.19)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - GLU -
         ELSE IF (AAA.EQ.'GLU') THEN
            NHE2=0
            DO IH=1,JATOM
               IF(PDBNAM(LFFAT+IH).EQ.'HE1 ') PDBNAM(LFFAT+IH)='HE2 '
               IF(PDBNAM(LFFAT+IH).EQ.'HE2 ') NHE2=1
               IF(PDBNAM(LFFAT+IH).EQ.'HE2 ') KHE2=LFFAT+IH
               IF(PDBNAM(LFFAT+IH).EQ.'OE1 ') KOE1=LFFAT+IH
               IF(PDBNAM(LFFAT+IH).EQ.'OE2 ') KOE2=LFFAT+IH
            ENDDO
            IF(NHE2.EQ.1) THEN
               IF(NFFTYP/10000.EQ.3) THEN
                  RESNAM(IRES)='GLH     '
               ELSE
                  RESNAM(IRES)='GLUP    '
               END IF
               DISOH=(CORD(1,KOE2)-CORD(1,KHE2))**2
     *              +(CORD(2,KOE2)-CORD(2,KHE2))**2
     *              +(CORD(3,KOE2)-CORD(3,KHE2))**2
               IF(DISOH.LE.5.142D+00) THEN      ! <1.20 A
               ELSE
                  PDBNAM(KOE1)='OE2 '
                  PDBNAM(KOE2)='OE1 '
               END IF
            END IF
            IF(JATOM.NE.15 .AND. JATOM.NE.16 .AND. JATOM.NE.17 .AND.
     *         JATOM.NE.18)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - GLY -
         ELSE IF (AAA.EQ.'GLY') THEN
            IF(JATOM.NE.7 .AND. JATOM.NE.8 .AND. JATOM.NE.9)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - HIS - HSD - HSE - HSP -
         ELSE IF (AAA.EQ.'HIS') THEN
            NHD1=0
            NHE2=0
            DO IH=1,JATOM
               IF(PDBNAM(LFFAT+IH).EQ.'HD1 ') NHD1=1
               IF(PDBNAM(LFFAT+IH).EQ.'HE2 ') NHE2=1
            ENDDO
            IF      (NHE2.EQ.0.AND.NHD1.EQ.1) THEN
               RESNAM(IRES)='HSD     '
               IF(NFFTYP/10000.EQ.3)
     *            RESNAM(IRES)='HID     '
            ELSE IF (NHE2.EQ.1.AND.NHD1.EQ.1) THEN
               RESNAM(IRES)='HSP     '
               IF(NFFTYP/10000.EQ.3)
     *            RESNAM(IRES)='HIP     '
            ELSE IF (NHE2.EQ.1.AND.NHD1.EQ.0) THEN
               RESNAM(IRES)='HSE     '
               IF(NFFTYP/10000.EQ.3)
     *            RESNAM(IRES)='HIE     '
            END IF
            IF(JATOM.NE.17 .AND. JATOM.NE.18
     *                     .AND. JATOM.NE.19 .AND. JATOM.NE.20)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - ILE -
         ELSE IF (AAA.EQ.'ILE') THEN
            IF(JATOM.NE.19 .AND. JATOM.NE.20 .AND. JATOM.NE.21)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - LEU -
         ELSE IF (AAA.EQ.'LEU') THEN
            IF(JATOM.NE.19 .AND. JATOM.NE.20 .AND. JATOM.NE.21)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - LYS -
         ELSE IF (AAA.EQ.'LYS') THEN
            NHZ1=0
            NHZ2=0
            NHZ3=0
            DO IH=1,JATOM
               IF(PDBNAM(LFFAT+IH).EQ.'HZ1 ') NHZ1=1
               IF(PDBNAM(LFFAT+IH).EQ.'HZ2 ') NHZ2=1
               IF(PDBNAM(LFFAT+IH).EQ.'HZ3 ') NHZ3=1
            ENDDO
            NHZ = NHZ1 + NHZ2 + NHZ3
            IF(NHZ.EQ.2) RESNAM(IRES)='LSN     '
            IF(JATOM.NE.21.AND.JATOM.NE.22 .AND. JATOM.NE.23 .AND.
     *         JATOM.NE.24)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - MET -
         ELSE IF (AAA.EQ.'MET') THEN
            IF(JATOM.NE.17 .AND. JATOM.NE.18 .AND. JATOM.NE.19)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - PHE -
         ELSE IF (AAA.EQ.'PHE') THEN
            IF(JATOM.NE.20 .AND. JATOM.NE.21 .AND. JATOM.NE.22)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - PRO - PROP
         ELSE IF (AAA.EQ.'PRO') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.16) THEN
                  RESNAM(IRES)='PROP    '
               END IF
            END IF
            IF(JATOM.NE.14 .AND. JATOM.NE.15 .AND. JATOM.NE.16)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - SER -
         ELSE IF (AAA.EQ.'SER') THEN
            IF(JATOM.NE.11 .AND. JATOM.NE.12 .AND. JATOM.NE.13)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - THR -
         ELSE IF (AAA.EQ.'THR') THEN
            IF(JATOM.NE.14 .AND. JATOM.NE.15 .AND. JATOM.NE.16)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - TRP -
         ELSE IF (AAA.EQ.'TRP') THEN
            IF(JATOM.NE.24 .AND. JATOM.NE.25 .AND. JATOM.NE.26)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - TYR -
         ELSE IF (AAA.EQ.'TYR') THEN
            IF(JATOM.NE.21 .AND. JATOM.NE.22 .AND. JATOM.NE.23)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C - VAL -
         ELSE IF (AAA.EQ.'VAL') THEN
            IF(JATOM.NE.16 .AND. JATOM.NE.17 .AND. JATOM.NE.18)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
C
C --- NUCLEIC ACIDS ---
C
C - RNA ADE -  
         ELSE IF (AAA.EQ.'  A') THEN
            INTERH = -99
            ICTERH = -99
            RESNAM(IRES) = 'ADE     '
C - RNA CYT -
         ELSE IF (AAA.EQ.'  C') THEN
            INTERH = -99
            ICTERH = -99
            RESNAM(IRES) = 'CYT     '
C - RNA GUA -
         ELSE IF (AAA.EQ.'  G') THEN
            INTERH = -99
            ICTERH = -99
            RESNAM(IRES) = 'GUA     '
C - RNA URA -
         ELSE IF (AAA.EQ.'  U') THEN
            INTERH = -99
            ICTERH = -99
            RESNAM(IRES) = 'URA     '
C - DNA ADE -
         ELSE IF (AAA.EQ.' DA') THEN
            INTERH = -99
            ICTERH = -99
            RESNAM(IRES) = 'ADED    '
C - DNA CYT -
         ELSE IF (AAA.EQ.' DC') THEN
            INTERH = -99
            ICTERH = -99
            RESNAM(IRES) = 'CYTD    '
C - DNA GUA -
         ELSE IF (AAA.EQ.' DG') THEN
            INTERH = -99
            ICTERH = -99
            RESNAM(IRES) = 'GUAD    '
C - DNA THY -
         ELSE IF (AAA.EQ.' DT') THEN
            INTERH = -99
            ICTERH = -99
            RESNAM(IRES) = 'THYD    '
C - HOH -
         ELSE IF (AAA.EQ.'HOH') THEN
            IF(JATOM.NE.ITYPWAT/100)THEN
               IF(MASWRK) WRITE(IW,'(1X,A6,I6,A)')
     *         AAA,IRES,' WRONG NUMBER OF ATOMS'
               IF(MASWRK) WRITE(IW,*)' '
               CALL ABRT
            END IF
            WRITE(RESNAM(IRES),'(A3,I3)') AAA, ITYPWAT
         END IF
C
C        -- QUANPOL CANNOT HANDLE NEUTRAL N-TER AND C-TER FOR AMBER --
C
         IF(NFFTYP/10000.EQ.3.AND.NNNCCC(IRES).EQ.1.AND.INTERH.EQ.2)THEN
            IF(MASWRK) WRITE(IW,'(/1X,A,A6,I6,A/)')
     *      'ERROR: QUANPOL CANNOT HANDLE NEUTRAL N-TERMINA:',
     *      AAA,IRES,' FOR AMBER.'
            IF(MASWRK) WRITE(IW,*)' '
            CALL ABRT
         END IF
         IF(NFFTYP/10000.EQ.3.AND.NNNCCC(IRES).EQ.9.AND.ICTERH.EQ.1)THEN
            IF(MASWRK) WRITE(IW,'(/1X,A,A6,I6,A/)')
     *      'ERROR: QUANPOL CANNOT HANDLE NEUTRAL C-TERMINA:',
     *      AAA,IRES,' FOR AMBER.'
            IF(MASWRK) WRITE(IW,*)' '
            CALL ABRT
         END IF
C
C        -- QUANPOL CANNOT HANDLE NEUTRAL N-TER AND C-TER FOR OPLSAA --
C
         IF(NFFTYP/10000.EQ.4.AND.NNNCCC(IRES).EQ.1.AND.INTERH.EQ.2)THEN
            IF(MASWRK) WRITE(IW,'(/1X,A,A6,I6,A/)')
     *      'ERROR: QUANPOL CANNOT HANDLE NEUTRAL N-TERMINA:',
     *      AAA,IRES,' FOR OPLSAA.'
            IF(MASWRK) WRITE(IW,*)' '
            CALL ABRT
         END IF
         IF(NFFTYP/10000.EQ.4.AND.NNNCCC(IRES).EQ.9.AND.ICTERH.EQ.1)THEN
            IF(MASWRK) WRITE(IW,'(/1X,A,A6,I6,A/)')
     *      'ERROR: QUANPOL CANNOT HANDLE NEUTRAL C-TERMINA:',
     *      AAA,IRES,' FOR OPLSAA.'
            IF(MASWRK) WRITE(IW,*)' '
            CALL ABRT
         END IF
C
C        -- SKIP HETATM --
C
         IF(AAA.EQ.' LI'.OR.AAA.EQ.' BE'.OR.
     *      AAA.EQ.'  B'.OR.AAA.EQ.'  F'.OR.
     *      AAA.EQ.' NA'.OR.AAA.EQ.' MG'.OR.
     *      AAA.EQ.' AL'.OR.AAA.EQ.' SI'.OR.
     *      AAA.EQ.' CL'.OR.AAA.EQ.'  K'.OR.
     *      AAA.EQ.' CA'.OR.AAA.EQ.' SC'.OR.
     *      AAA.EQ.' TI'.OR.AAA.EQ.'  V'.OR.
     *      AAA.EQ.' CR'.OR.AAA.EQ.' MN'.OR.
     *      AAA.EQ.' FE'.OR.AAA.EQ.' CO'.OR.
     *      AAA.EQ.' NI'.OR.AAA.EQ.' CU'.OR.
     *      AAA.EQ.'CU1'.OR.AAA.EQ.' ZN'.OR.
     *      AAA.EQ.' GA'.OR.AAA.EQ.' GE'.OR.
     *      AAA.EQ.' AS'.OR.AAA.EQ.' SE'.OR.
     *      AAA.EQ.' BR'.OR.AAA.EQ.' KR'.OR.
     *      AAA.EQ.' RB'.OR.AAA.EQ.' SR'.OR.
     *      AAA.EQ.'  Y'.OR.AAA.EQ.' ZR'.OR.
     *      AAA.EQ.' NB'.OR.AAA.EQ.' MO'.OR.
     *      AAA.EQ.' TC'.OR.AAA.EQ.' RU'.OR.
     *      AAA.EQ.' RH'.OR.AAA.EQ.' PD'.OR.
     *      AAA.EQ.' AG'.OR.AAA.EQ.' CD'.OR.
     *      AAA.EQ.' IN'.OR.AAA.EQ.' SN'.OR.
     *      AAA.EQ.' SB'.OR.AAA.EQ.' TE'.OR.
     *      AAA.EQ.'  I'.OR.AAA.EQ.' XE'.OR.
     *      AAA.EQ.' CS'.OR.AAA.EQ.' BA'.OR.
     *      AAA.EQ.' LA'.OR.AAA.EQ.' CE'.OR.
     *      AAA.EQ.' PR'.OR.AAA.EQ.' ND'.OR.
     *      AAA.EQ.' PM'.OR.AAA.EQ.' SM'.OR.
     *      AAA.EQ.' EU'.OR.AAA.EQ.' GD'.OR.
     *      AAA.EQ.' TB'.OR.AAA.EQ.' DY'.OR.
     *      AAA.EQ.' HO'.OR.AAA.EQ.' ER'.OR.
     *      AAA.EQ.' TM'.OR.AAA.EQ.' YB'.OR.
     *      AAA.EQ.' LU'.OR.AAA.EQ.' HF'.OR.
     *      AAA.EQ.' TA'.OR.AAA.EQ.'  W'.OR.
     *      AAA.EQ.' RE'.OR.AAA.EQ.' OS'.OR.
     *      AAA.EQ.' IR'.OR.AAA.EQ.' PT'.OR.
     *      AAA.EQ.' AU'.OR.AAA.EQ.' HG'.OR.
     *      AAA.EQ.' TI'.OR.AAA.EQ.' PB'.OR.
     *      AAA.EQ.' BI'.OR.AAA.EQ.' PO'.OR.
     *      AAA.EQ.' AT'.OR.AAA.EQ.' RN'.OR.
     *      AAA.EQ.' FR'.OR.AAA.EQ.' RA'.OR.
     *      AAA.EQ.' AC'.OR.AAA.EQ.' TH'.OR.
     *      AAA.EQ.' PA'.OR.
     *      AAA.EQ.' NP'.OR.AAA.EQ.' PU'.OR.
     *      AAA.EQ.' AM'.OR.AAA.EQ.' CM'.OR.
     *      AAA.EQ.' BK'.OR.AAA.EQ.' CF'.OR.
     *      AAA.EQ.' ES'.OR.AAA.EQ.' FM'.OR.
     *      AAA.EQ.' MD'.OR.AAA.EQ.' NO'.OR.
     *      AAA.EQ.' LR'.OR.AAA.EQ.' RF'.OR.
     *      AAA.EQ.' DB'.OR.AAA.EQ.' SG'.OR.
     *      AAA.EQ.' BH'.OR.AAA.EQ.' HS'.OR.
     *      AAA.EQ.' MT'.OR.AAA.EQ.' DS'.OR.
     *      AAA.EQ.' RG'.OR.AAA.EQ.' CN'.OR.
     *      AAA.EQ.'TI2'.OR.AAA.EQ.' V2'.OR.
     *      AAA.EQ.'CR2'.OR.AAA.EQ.'FE2'.OR.
     *      AAA.EQ.'AG2'.OR.AAA.EQ.'SM2'.OR.
     *      AAA.EQ.'YB2'.OR.AAA.EQ.'MN3'.OR.
     *      AAA.EQ.'3CO'.OR.AAA.EQ.'EU3'.OR.
     *      AAA.EQ.'AU3'.OR.AAA.EQ.'HOH'    ) GOTO 200
C
C        **** READ IN ATOM NAMES AND CHARGES FROM TOP FILE ****
C
         TEXT3=RESNAM(IRES)(1:3)
         IF(RESNAM(IRES).EQ.'LSN     ')TEXT3='LYS'
         MLINE = NLINA
         KKK   = 10000000
         DO ILINE = 1, MLINE
         WD100=TEXTA(ILINE)
         IF(WD100(1:8).EQ.'RESIDUE '.OR.
     *      WD100(1:5).EQ.'RESI '   .OR.
     *      WD100(1:5).EQ.'PRES '       ) THEN
            READ(WD100,*) WORD8,WORD3
            IF(WORD3.EQ.TEXT3) KKK = ILINE
         END IF
         IF(ILINE.LE.KKK) GOTO 223
         IF(WD100(1:4).EQ.'END ')GOTO 226
         IF(WD100(1:4).EQ.'BOND')GOTO 226
         IF(WD100(1:4).NE.'ATOM')GOTO 223
         READ(WD100,*)WORD5A,WORD5B,WORD5C,AW
         DO IFFAT=1,NATAAA(IRES)
            IF(PDBNAM(IFFAT+LFFAT).EQ.WORD5B)THEN
               CHMNAM(IFFAT+LFFAT)=WORD5C
               CHARG (IFFAT+LFFAT)=AW
            END IF
         ENDDO
 223     CONTINUE
         ENDDO
 226     CONTINUE
C
C        -- FOR TERMINAL RESIDUES --
C
         IF(NFFTYP/10000.EQ.2.OR.NFFTYP/10000.EQ.4) THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF       (INTERH.EQ.3)THEN
                  IF     (RESNAM(IRES).EQ.'PROP    ')THEN
                     TEXT9='PRES PROP'
                  ELSE IF(RESNAM(IRES).EQ.'GLY     ')THEN
                     TEXT9='PRES GLYP'
                  ELSE
                     TEXT9='PRES NTER'
                  END IF
               ELSE IF  (INTERH.EQ.2)THEN
                     TEXT9='PRES NNEU'
               ELSE IF(INTERH.EQ.-99)THEN
                  IF         (PDBNAM(LFFAT+1).EQ.'O5''  ') THEN
                     TEXT9='PRES 5TER'
                  ELSE IF    (PDBNAM(LFFAT+1).EQ.'C5''  ') THEN
                     TEXT9='PRES 5MET'
                  ELSE IF(PDBNAM(LFFAT+JATOM-4).EQ.'P   ') THEN
                     TEXT9='PRES 5PHO'
                  ELSE IF(PDBNAM(LFFAT+JATOM-7).EQ.'P   ') THEN
                     TEXT9='PRES 5POM'
                  END IF
               END IF
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF     (ICTERH.EQ.1) THEN
                     TEXT9='PRES CNEU'
               ELSE IF(ICTERH.EQ.0) THEN
                  IF     (NFFTYP/10000.EQ.4 .AND.
     *                    RESNAM(IRES).EQ.'PRO     ') THEN
                     TEXT9='PRES PROC'
                  ELSE IF(NFFTYP/10000.EQ.4 .AND.
     *                    RESNAM(IRES).EQ.'GLY     ') THEN
                     TEXT9='PRES GLYC'
                  ELSE
                     TEXT9='PRES CTER'
                  END IF
               ELSE IF(ICTERH.EQ.-99) THEN
                  IF     (PDBNAM(LFFAT+JATOM-4).EQ.'P3  ') THEN
                     TEXT9='PRES 3PHO'
                  ELSE IF(PDBNAM(LFFAT+JATOM-3).EQ.'P3  ') THEN
                     TEXT9='PRES 3PO3'
                  ELSE IF(PDBNAM(LFFAT+JATOM-7).EQ.'P3  ') THEN
                     TEXT9='PRES 3POM'
                  ELSE
                     TEXT9='PRES 3TER'
                  END IF
               END IF
            ELSE
               GOTO 236
            END IF
         END IF
         IF(NFFTYP/10000.EQ.3) THEN
            IF     (NNNCCC(IRES).EQ.1)THEN
                 IF(INTERH.EQ.3)THEN
                    TEXT9='PRES '//'N'//RESNAM(IRES)(1:3)
                 END IF
                 IF(    RESNAM(IRES)(1:3).EQ.'ADE'
     *              .OR.RESNAM(IRES)(1:3).EQ.'URA'
     *              .OR.RESNAM(IRES)(1:3).EQ.'THY'
     *              .OR.RESNAM(IRES)(1:3).EQ.'CYT'
     *              .OR.RESNAM(IRES)(1:3).EQ.'GUA') THEN
                    TEXT9='PRES '//RESNAM(IRES)(1:3)//'5'
                 END IF
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
                 IF(ICTERH.EQ.0) THEN
                    TEXT9='PRES '//'C'//RESNAM(IRES)(1:3)
                 END IF
                 IF(    RESNAM(IRES)(1:3).EQ.'ADE'
     *              .OR.RESNAM(IRES)(1:3).EQ.'URA'
     *              .OR.RESNAM(IRES)(1:3).EQ.'THY'
     *              .OR.RESNAM(IRES)(1:3).EQ.'CYT'
     *              .OR.RESNAM(IRES)(1:3).EQ.'GUA') THEN
                    TEXT9='PRES '//RESNAM(IRES)(1:3)//'3'
                 END IF
            ELSE 
                 GOTO 236
            END IF
         END IF
C
         MLINE = NLINA
         KKK   = 10000000
         DO ILINE = 1, MLINE
         WD100=TEXTA(ILINE)
         IF(WD100(1:9).EQ.TEXT9) KKK = ILINE
         IF(ILINE.LE.KKK) GOTO 233
         IF(WD100(1:4).EQ.'END ')GOTO 236
         IF(WD100(1:4).EQ.'BOND')GOTO 236
         IF(WD100(1:4).NE.'ATOM')GOTO 233
         READ(WD100,*)WORD5A,WORD5B,WORD5C,AW
         DO IFFAT=1,NATAAA(IRES)
            IF(PDBNAM(IFFAT+LFFAT).EQ.WORD5B)THEN
               CHMNAM(IFFAT+LFFAT)=WORD5C
               CHARG (IFFAT+LFFAT)=AW
            END IF
         ENDDO
 233     CONTINUE
         ENDDO
 236     CONTINUE
C
C        -- FOR NEUTRAL GLU/ASP/LYS RESIDUES --
C
         IF(NFFTYP/10000.EQ.2.OR.NFFTYP/10000.EQ.4) THEN
C
         IF     (RESNAM(IRES).EQ.'GLUP     ') THEN
            TEXT9='PRES GLUP'
         ELSE IF(RESNAM(IRES).EQ.'ASPP     ') THEN
            TEXT9='PRES ASPP'
         ELSE IF(RESNAM(IRES).EQ.'LSN      ') THEN
            TEXT9='PRES LSN '
         ELSE
            GOTO 246
         END IF
C
         MLINE = NLINA
         KKK   = 10000000
         DO ILINE = 1, MLINE
         WD100=TEXTA(ILINE)
         IF(WD100(1:9).EQ.TEXT9) KKK = ILINE
         IF(ILINE.LE.KKK) GOTO 243
         IF(WD100(1:4).EQ.'END ')GOTO 246
         IF(WD100(1:4).EQ.'BOND')GOTO 246
         IF(WD100(1:4).NE.'ATOM')GOTO 243
         READ(WD100,*)WORD5A,WORD5B,WORD5C,AW
         DO IFFAT=1,NATAAA(IRES)
            IF(PDBNAM(IFFAT+LFFAT).EQ.WORD5B)THEN
               CHMNAM(IFFAT+LFFAT)=WORD5C
               CHARG (IFFAT+LFFAT)=AW
            END IF
         ENDDO
 243     CONTINUE
         ENDDO
         END IF
 246     CONTINUE
C
C        -- FOR DISULFIDE CYS GROUP --
C           CYX DOES NOT NEED THE 'DISU' PATCH
C
         IF     (RESNAM(IRES).EQ.'CYS     '.AND.KASE.EQ.1)THEN
            TEXT9='PRES DISU'
         ELSE IF(RESNAM(IRES).EQ.'CYX     '.AND.KASE.EQ.1)THEN
            DO IFFAT=1,NATAAA(IRES)
               IF(PDBNAM(IFFAT+LFFAT).EQ.'SG  ')THEN
                  CHMNAM(IFFAT+LFFAT)   ='S    '
               END IF
            ENDDO
            GOTO 256
         ELSE
            GOTO 256
         END IF
C
         MLINE = NLINA
         KKK   = 10000000
         DO ILINE = 1, MLINE
         WD100=TEXTA(ILINE)
         IF(WD100(1:9).EQ.TEXT9) KKK = ILINE
         IF(ILINE.LE.KKK) GOTO 253
         IF(WD100(1:4).EQ.'END ')GOTO 256
         IF(WD100(1:4).EQ.'BOND')GOTO 256
         IF(WD100(1:4).NE.'ATOM')GOTO 253
         READ(WD100,*)WORD5A,WORD5B,WORD5C,WORD9
         DO KKK=1,9
            IF(WORD9(KKK:KKK).EQ.'!') WORD9(KKK:KKK)=' '
         ENDDO
         READ(WORD9,*)AW
         DO IFFAT=1,NATAAA(IRES)
            IF('1'//PDBNAM(IFFAT+LFFAT)(1:3).EQ.WORD5B(1:4))THEN
               CHMNAM(IFFAT+LFFAT)=WORD5C
               CHARG (IFFAT+LFFAT)=AW
            END IF
         ENDDO
 253     CONTINUE
         ENDDO
 256     CONTINUE
C
C        -- FOR DNA PATCHES --
C
         IF     (RESNAM(IRES).EQ.'ADED    ')THEN
            TEXT9='PRES DEO2'
            IF(CHARMM36.EQ.'CHARMM36') THEN
               IF(NNNCCC(IRES).EQ.1) THEN
                  TEXT9='PRES DEO5'
               ELSE
                  TEXT9='PRES DEOX'
               END IF
            END IF
            IF(NFFTYP/10000.EQ.3) THEN
               IF(NNNCCC(IRES).EQ.1) THEN
                  TEXT9='PRES DOA5'
               ELSE IF(NNNCCC(IRES).EQ.9) THEN
                  TEXT9='PRES DOA3'
               ELSE
                  TEXT9='PRES DOA '
               END IF
            END IF
         ELSE IF(RESNAM(IRES).EQ.'GUAD    ')THEN
            TEXT9='PRES DEO2'
            IF(CHARMM36.EQ.'CHARMM36') THEN
               IF(NNNCCC(IRES).EQ.1) THEN
                  TEXT9='PRES DEO5'
               ELSE
                  TEXT9='PRES DEOX'
               END IF
            END IF
            IF(NFFTYP/10000.EQ.3) THEN
               IF(NNNCCC(IRES).EQ.1) THEN
                  TEXT9='PRES DOG5'
               ELSE IF(NNNCCC(IRES).EQ.9) THEN
                  TEXT9='PRES DOG3'
               ELSE
                  TEXT9='PRES DOG '
               END IF
            END IF
         ELSE IF(RESNAM(IRES).EQ.'CYTD    ')THEN
            TEXT9='PRES DEO1'
            IF(CHARMM36.EQ.'CHARMM36') THEN
               IF(NNNCCC(IRES).EQ.1) THEN
                  TEXT9='PRES DEO5'
               ELSE
                  TEXT9='PRES DEOX'
               END IF
            END IF
            IF(NFFTYP/10000.EQ.3) THEN
               IF(NNNCCC(IRES).EQ.1) THEN
                  TEXT9='PRES DOC5'
               ELSE IF(NNNCCC(IRES).EQ.9) THEN
                  TEXT9='PRES DOC3'
               ELSE
                  TEXT9='PRES DOC '
               END IF
            END IF
         ELSE IF(RESNAM(IRES).EQ.'THYD    ')THEN
            IF(NFFTYP/10000.EQ.3) THEN
               GOTO 266
            ELSE
               TEXT9='PRES DEO1'
            IF(CHARMM36.EQ.'CHARMM36') THEN
               IF(NNNCCC(IRES).EQ.1) THEN
                  TEXT9='PRES DEO5'
               ELSE
                  TEXT9='PRES DEOX'
               END IF
            END IF
            END IF
         ELSE
            GOTO 266
         END IF
C
         MLINE = NLINA
         KKK   = 10000000
         DO ILINE = 1, MLINE
         WD100=TEXTA(ILINE)
         IF(WD100(1:9).EQ.TEXT9) KKK = ILINE
         IF(ILINE.LE.KKK) GOTO 263
         IF(WD100(1:4).EQ.'END ')GOTO 266
         IF(WD100(1:4).EQ.'BOND')GOTO 266
         IF(WD100(1:4).NE.'ATOM')GOTO 263
         READ(WD100,*)WORD5A,WORD5B,WORD5C,AW
         DO IFFAT=1,NATAAA(IRES)
            IF(PDBNAM(IFFAT+LFFAT).EQ.WORD5B)THEN
               CHMNAM(IFFAT+LFFAT)=WORD5C
               CHARG (IFFAT+LFFAT)=AW
            END IF
         ENDDO
 263     CONTINUE
         ENDDO
 266     CONTINUE
C
C
C        **** SEARCH TOP FILE FOR DIHB LIST ****
C
         TEXT3=RESNAM(IRES)(1:3)
         IF(RESNAM(IRES).EQ.'LSN     ')TEXT3='LYS'
         MLINE = NLINA
         KKK   = 10000000
         DO ILINE = 1, MLINE
         WD100=TEXTA(ILINE)
         IF(WD100(1:8).EQ.'RESIDUE '.OR.
     *      WD100(1:5).EQ.'RESI '       ) THEN
            READ(WD100,*) WORD8,WORD3
            IF(WORD3.EQ.TEXT3) KKK = ILINE
         END IF
         IF(ILINE.LE.KKK) GOTO 283
         IF(WD100(1:4).EQ.'END ')GOTO 286
         IF(WD100(1:3).EQ.'IC ' )GOTO 286
         IF(WD100(1:4).EQ.'ACCE')GOTO 286
         IF(WD100(1:4).EQ.'DONO')GOTO 286
         IF(WD100(1:1).EQ.'!')   GOTO 283
         IF(WD100(2:2).EQ.'!')   GOTO 283
         IF(WD100(3:3).EQ.'!')   GOTO 283
         IF(WD100(1:4).NE.'IMPR')GOTO 283
C
         CALL CHECKWD100(WD100,NSTRING)
         IF      (NSTRING.GT.9) THEN
            MTIMES = 3
            READ(WD100,*)WORD5A,
     *                   WORD55(1),WORD55(2),WORD55(3),WORD55(4),
     *                   WORD55(5),WORD55(6),WORD55(7),WORD55(8),
     *                   WORD55(9),WORD55(10),WORD55(11),WORD55(12)
         ELSE IF (NSTRING.GT.5) THEN
            MTIMES = 2
            READ(WD100,*)WORD5A,
     *                   WORD55(1),WORD55(2),WORD55(3),WORD55(4),
     *                   WORD55(5),WORD55(6),WORD55(7),WORD55(8)
         ELSE IF (NSTRING.LE.5) THEN
            MTIMES = 1
            READ(WD100,*)WORD5A,
     *                   WORD55(1),WORD55(2),WORD55(3),WORD55(4)
         END IF
C
         DO KTIMES = 1, MTIMES
            NDIHB = NDIHB + 1
            IF(NDIHB.GT.MXDIHB) THEN
               IF(MASWRK) WRITE(IW,*)
     *         'ERROR: IN RDCHARMM, NDIHB EXCEEDED MXDIHB'
               IF(MASWRK)WRITE(IW,*)' '
               CALL ABRT
            END IF
            DO JJJ = 1, 4
               III = (KTIMES-1)*4+JJJ
               JRES = IRES - 1
               IF(WORD55(III)(1:1).EQ.'-')THEN
                  IF(NNNCCC(IRES).EQ.1)THEN
                     NDIHB = NDIHB - 1
                     GOTO 287
                  END IF
                  JRES =  IRES -2
                  WORD55(III)=WORD55(III)(2:5)
                  IF(RESNAM(IRES-1)(1:3).EQ.'ACE') WORD55(III)='CY   '
               ELSE IF(WORD55(III)(1:1).EQ.'+') THEN
                  IF(NNNCCC(IRES).EQ.9)THEN
                     NDIHB = NDIHB - 1
                     GOTO 287
                  END IF
                  JRES =  IRES
                  WORD55(III)=WORD55(III)(2:5)
               END IF
               JJATOM = 0
               DO KRES = 1,JRES
                  JJATOM = JJATOM+NATAAA(KRES)
               ENDDO
               DO IFFAT = 1,NATAAA(JRES+1)
                  IF(WORD55(III)(1:4).EQ.PDBNAM(IFFAT+JJATOM)) THEN
                     NLIST(JJJ,NDIHB)=IFFAT+JJATOM
                  END IF
               ENDDO
            ENDDO
 287        CONTINUE
         ENDDO
 283     CONTINUE
         ENDDO
 286     CONTINUE
C
C        --- READ ADDITIONAL DIHB PARAMETERS FOR C-TERMINAL ---
C
         IF(NNNCCC(IRES).EQ.9)THEN
            IF(ICTERH.EQ.1) TEXT9='PRES CNEU'
            IF(ICTERH.EQ.0) THEN
               IF     (NFFTYP/10000.EQ.4 .AND.
     *                 RESNAM(IRES).EQ.'PRO     ') THEN
                       TEXT9='PRES PROC'
               ELSE IF(NFFTYP/10000.EQ.4 .AND.
     *                 RESNAM(IRES).EQ.'GLY     ') THEN
                       TEXT9='PRES GLYC'
               ELSE IF(NFFTYP/10000.EQ.3) THEN
                       TEXT9='PRES '//'C'//RESNAM(IRES)(1:3)
               ELSE
                       TEXT9='PRES CTER'
               END IF
            END IF
            IF(ICTERH.EQ.-99) GOTO 296
         ELSE
            GOTO 296
         END IF
C
         MLINE = NLINA
         KKK   = 10000000
         DO ILINE = 1, MLINE
         WD100=TEXTA(ILINE)
         IF(WD100(1:9).EQ.TEXT9) KKK = ILINE
         IF(ILINE.LE.KKK) GOTO 293
         IF(WD100(1:4).EQ.'END ')GOTO 296
         IF(WD100(1:3).EQ.'IC ' )GOTO 296
         IF(WD100(1:4).EQ.'ACCE')GOTO 296
         IF(WD100(1:4).EQ.'DONO')GOTO 296
         IF(WD100(1:1).EQ.'!')   GOTO 293
         IF(WD100(2:2).EQ.'!')   GOTO 293
         IF(WD100(3:3).EQ.'!')   GOTO 293
         IF(WD100(1:4).NE.'IMPR')GOTO 293
         READ(WD100,*)WORD5A,WORD55(1),WORD55(2),WORD55(3),WORD55(4)
         NDIHB  = NDIHB + 1
         JRES   = IRES - 1
         JJATOM = 0
         DO KRES = 1,JRES
            JJATOM = JJATOM+NATAAA(KRES)
         ENDDO
         DO III = 1,4
            DO IFFAT = 1,NATAAA(JRES+1)
               IF(WORD55(III)(1:4).EQ.PDBNAM(IFFAT+JJATOM)) THEN
                  NLIST(III,NDIHB)=IFFAT+JJATOM
               END IF
            ENDDO
         ENDDO
 293     CONTINUE
         ENDDO
 296     CONTINUE
C
C        --- READ ADDITIONAL DIHB PARAMETERS FOR ACETYLATED N-TER ---
C
         IF(RESNAM(IRES)(1:3).EQ.'ACE') THEN
         MLINE = NLINA
         KKK   = 10000000
         DO ILINE = 1, MLINE
         WD100=TEXTA(ILINE)
         IF(WD100(1:9).EQ.'PRES ACE ') KKK = ILINE
         IF(WD100(1:9).EQ.'PRES ACED') KKK = ILINE
         IF(ILINE.LE.KKK) GOTO 313
         IF(WD100(1:4).EQ.'END ')GOTO 316
         IF(WD100(1:3).EQ.'IC ' )GOTO 316
         IF(WD100(1:4).EQ.'ACCE')GOTO 316
         IF(WD100(1:4).EQ.'DONO')GOTO 316
         IF(WD100(1:4).EQ.'CMAP')GOTO 316
         IF(WD100(1:1).EQ.'!')   GOTO 313
         IF(WD100(2:2).EQ.'!')   GOTO 313
         IF(WD100(3:3).EQ.'!')   GOTO 313
         IF(WD100(1:4).NE.'IMPR')GOTO 313
         READ(WD100,*)WORD5A,WORD55(1),WORD55(2),WORD55(3),WORD55(4)
         NDIHB  = NDIHB + 1
         DO III = 1,4
         JRES   = IRES - 1
            IF(WORD55(III)(1:1)  .EQ.'N'.AND.
     *         WORD55(III-1)(1:3).EQ.'CAY'   )THEN
               JRES = IRES
            END IF
            IF(WORD55(III)(1:1)  .EQ.'N'.AND.
     *         WORD55(III+1)(1:2).EQ.'CY'    )THEN
               NDIHB  = NDIHB - 1
               GOTO 313 
            END IF
            JJATOM = 0
            DO KRES = 1,JRES
               JJATOM = JJATOM+NATAAA(KRES)
            ENDDO
            DO IFFAT = 1,NATAAA(JRES+1)
               IF(WORD55(III)(1:4).EQ.PDBNAM(IFFAT+JJATOM)) THEN
                  NLIST(III,NDIHB)=IFFAT+JJATOM
               END IF
            ENDDO
         ENDDO
 313     CONTINUE
         ENDDO
 316     CONTINUE
         END IF
C
         LFFAT = LFFAT + JATOM
 200  CONTINUE
C
C
C     **** MASS IN TOP ****
C
      MLINE = NLINA
      KKK   = 10000000
      DO ILINE = 1, MLINE
      WD100=TEXTA(ILINE)
      READ(WD100,'(A8)')WORD8
      IF(WORD8(1:4).EQ.'END ') GOTO 393
      IF(WORD8(1:1).EQ.'!')    GOTO 390
      IF(WORD8(1:4).NE.'MASS') GOTO 390
      READ(WD100,*)WORD5A,KK,WORD5B,WORD9
      DO KKK=1,9
         IF(WORD9(KKK:KKK).EQ.'!') WORD9(KKK:KKK)=' '
      ENDDO
      READ(WORD9,*)AW
      DO IFFAT=1,NFFAT
         WORD5C =  CHMNAM(IFFAT)
         IF(WORD5B.EQ.WORD5C)THEN
            ZMAS(IFFAT)  = AW*1822.88850204D+00
            KK           = KK
            ONEMAS(IFFAT)= 1.0D+00/ZMAS(IFFAT)
         END IF
      ENDDO
 390  CONTINUE
      ENDDO
 393  CONTINUE
C
C
C     **** READ IN CHARMM PAR FILE ****
C
      NLINA=0
      IF(MASWRK) REWIND(16)
 400  CONTINUE
      IEOF=0
      IF(MASWRK) THEN
         READ(16,'(A100)',END=401)WD100
C        ASCII CODE: 65-90 = UPPER CASE, 97-122, LOWER CASE
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         DO I=1,100
            CMSG(I) = ICHAR(WD100(I:I))
         ENDDO
         GOTO 402
 401     IEOF=1
 402     CONTINUE
      END IF
      IF(GOPARR) CALL DDI_BCAST(275,'I',IEOF,1  ,MASTER)
      IF(IEOF.EQ.1) GOTO 403
      IF(GOPARR) CALL DDI_BCAST(462,'I',CMSG,100,MASTER)
      IF (.NOT.MASWRK) THEN
         DO I=1,100
            WD100(I:I) = CHAR(CMSG(I))
         ENDDO
      END IF
      NLINA=NLINA+1
      TEXTA(NLINA)=WD100
      IF(NLINA.GT.20000) THEN
         IF(MASWRK) WRITE(IW,*) ' ERROR: NLINA EXCEEDED 20000.'
         CALL ABRT
      END IF
      GOTO 400
 403  CONTINUE
C
C     **** GENERATE BONDS, ANGLES, DIHEDRAL ANGLES ****
C
      CALL FFBOND(NFFAT,IPAIR,ZANF,CORD,NBOND)
      CALL FFANGL(IPAIR,NBOND,KLIST,NANGL)
      CALL FFDIHR(KLIST,NANGL,LLIST,NDIHR)
C
C     **** SEARCH FOR BOND PARAMETERS ****
C
      MLINE = NLINA
      KKK   = 10000000
      DO ILINE = 1, MLINE
      WD100=TEXTA(ILINE)
      IF(WD100(1:4).EQ.'BOND') KKK = ILINE
      IF(ILINE.LE.KKK) GOTO 405
      READ(WD100,'(A8)')WORD8
      IF(WORD8.EQ.'END     ') GOTO 406
      IF(WORD8.EQ.'ANGLES  ') GOTO 406
      IF(WORD8.EQ.'ANGLE   ') GOTO 406
      IF(WORD8.EQ.'THETAS  ') GOTO 406
      IF(WORD8.EQ.'PHI     ') GOTO 406
      IF(WORD8.EQ.'DIHEDRAL') GOTO 406
      IF(WORD8.EQ.'NONBONDE') GOTO 406
      IF(WORD8.EQ.'CMAP    ') GOTO 406
      IF(WORD8.EQ.'IMPROPER') GOTO 406
      IF(WORD8.EQ.'IMPHI   ') GOTO 406
      IF(WORD8(1:1).EQ.'!')   GOTO 405
      IF(WORD8(2:2).EQ.'!')   GOTO 405
      IF(WORD8(3:3).EQ.'!')   GOTO 405
      IF(WORD8.EQ.'        ') GOTO 405
      READ(WD100,*)WORD5A,WORD5B
      ENTRY10 = WORD5A//WORD5B
      DO IBOND=1,NBOND
         KK1    = IPAIR(1,IBOND)
         KK2    = IPAIR(2,IBOND)
         WORD10A= CHMNAM(KK1)//CHMNAM(KK2)
         WORD10B= CHMNAM(KK2)//CHMNAM(KK1)
         IF(ENTRY10.EQ.WORD10A .OR. ENTRY10.EQ.WORD10B)THEN
            READ(WD100,*)WORD5A,WORD5B,AW,BW
            FCBOND(IBOND) = AW*TOHART*TOANGS*TOANGS
            BOND0(IBOND)  = BW*TOBOHR
         END IF
      ENDDO
 405  CONTINUE
      ENDDO
 406  CONTINUE
C
C     **** SEARCH FOR ANGLE PARAMETERS ****
C
      MLINE = NLINA
      KKK   = 10000000
      DO ILINE = 1, MLINE
      WD100=TEXTA(ILINE)
      IF(WD100(1:5).EQ.'ANGLE') KKK = ILINE
      IF(WD100(1:5).EQ.'THETA') KKK = ILINE
      IF(ILINE.LE.KKK) GOTO 413
      READ(WD100,'(A8)')WORD8
      IF(WORD8.EQ.'END     ') GOTO 416
      IF(WORD8.EQ.'BONDS   ') GOTO 416
      IF(WORD8.EQ.'BOND    ') GOTO 416
      IF(WORD8.EQ.'DIHEDRAL') GOTO 416
      IF(WORD8.EQ.'PHI     ') GOTO 416
      IF(WORD8.EQ.'NONBONDE') GOTO 416
      IF(WORD8.EQ.'CMAP    ') GOTO 416
      IF(WORD8.EQ.'IMPROPER') GOTO 416
      IF(WORD8.EQ.'IMPHI   ') GOTO 416
      IF(WORD8(1:1).EQ.'!')   GOTO 413
      IF(WORD8(2:2).EQ.'!')   GOTO 413
      IF(WORD8(3:3).EQ.'!')   GOTO 413
      IF(WORD8.EQ.'        ') GOTO 413
      READ(WD100,*)WORD5A,WORD5B,WORD5C
      ENTRY15 = WORD5A//WORD5B//WORD5C
      DO IANGL=1,NANGL
         KK1    = KLIST(1,IANGL)
         KK2    = KLIST(2,IANGL)
         KK3    = KLIST(3,IANGL)
         WORD15A= CHMNAM(KK1)//CHMNAM(KK2)//CHMNAM(KK3)
         WORD15B= CHMNAM(KK3)//CHMNAM(KK2)//CHMNAM(KK1)
         ENTRY15 = WORD5A//WORD5B//WORD5C
         IF(ENTRY15.EQ.WORD15A .OR. ENTRY15.EQ.WORD15B)THEN
            READ(WD100,*)WORD5A,WORD5B,WORD5C,AW,BW
            FCANGL(IANGL) = AW*TOHART
            ANGL0(IANGL)  = BW*TORAD
            CALL CHECKWD100(WD100,NSTRING)
            IF(NFFTYP/10000.EQ.2 .AND. NSTRING.GT.5) THEN
               READ(WD100,*)WORD5A,WORD5B,WORD5C,AW,BW,CW,DW
               NBOND = NBOND + 1
               IPAIR(1,NBOND) = KK1
               IPAIR(2,NBOND) = KK3
               FCBOND(NBOND)  = CW*TOHART*TOANGS*TOANGS
               BOND0(NBOND)   = DW*TOBOHR
            END IF
         ELSE
            IF(NFFTYP/10000.EQ.2) THEN
C              -- THE CHARMM PAR FILE SHOULD HAVE:
C              'NH2  CT1  CT1   67.700    110.00'
C              FOR NEUTRAL NNEU OF ILE, THR, VAL
C              'NH2  CT1  CT3   67.700    110.00'
C              FOR NEUTRAL NNEU OF ALA
               IF(CHMNAM(KK1).EQ.'NH2  '.AND.
     *            CHMNAM(KK2).EQ.'CT1  '.AND.
     *            CHMNAM(KK3).EQ.'CT1  '     ) THEN
                  FCANGL(IANGL) = 67.7D+00*TOHART
                  ANGL0(IANGL)  = 110.0D+00*TORAD
               END IF
               IF(CHMNAM(KK1).EQ.'NH2  '.AND.
     *            CHMNAM(KK2).EQ.'CT1  '.AND.
     *            CHMNAM(KK3).EQ.'CT3  '     ) THEN
                  FCANGL(IANGL) = 67.7D+00*TOHART
                  ANGL0(IANGL)  = 110.0D+00*TORAD
               END IF
C              -- THE CHARMM PAR FILE SHOULD HAVE
C              'CT1  CT1  CD     52.000   108.0000'
C              FOR NEUTRAL CNEU OF ILE, THR, VAL
C              'CT3  CT1  CD     52.000   108.0000'
C              FOR NEUTRAL CNEU OF ALA
               IF(CHMNAM(KK1).EQ.'CD   '.AND.
     *            CHMNAM(KK2).EQ.'CT1  '.AND.
     *            CHMNAM(KK3).EQ.'CT1  '     ) THEN
                  FCANGL(IANGL) = 52.0D+00*TOHART
                  ANGL0(IANGL)  = 108.0D+00*TORAD
               END IF
               IF(CHMNAM(KK1).EQ.'CD   '.AND.
     *            CHMNAM(KK2).EQ.'CT1  '.AND.
     *            CHMNAM(KK3).EQ.'CT3  '     ) THEN
                  FCANGL(IANGL) = 52.0D+00*TOHART
                  ANGL0(IANGL)  = 108.0D+00*TORAD
               END IF
            END IF
         END IF
      ENDDO
 413  CONTINUE
      ENDDO
 416  CONTINUE
C
C     **** SEARCH FOR DIHEDRAL ROTATION PARAMETERS ****
C
      KDIHR=0
      CALL VICLR(LLIST1,1,4*MXDIHR)
C
      DO IIIREAD=1,2
C
      MLINE = NLINA
      KKK   = 10000000
      DO ILINE = 1, MLINE
      WD100=TEXTA(ILINE)
      IF(WD100(1:8).EQ.'DIHEDRAL') KKK = ILINE
      IF(WD100(1:3).EQ.'PHI')      KKK = ILINE
      IF(ILINE.LE.KKK) GOTO 423
      READ(WD100,'(A8)')WORD8
      IF(WORD8.EQ.'END     ') GOTO 426
      IF(WORD8.EQ.'BONDS   ') GOTO 426
      IF(WORD8.EQ.'BOND    ') GOTO 426
      IF(WORD8.EQ.'ANGLE   ') GOTO 426
      IF(WORD8.EQ.'ANGLES  ') GOTO 426
      IF(WORD8.EQ.'THETAS  ') GOTO 426
      IF(WORD8.EQ.'NONBONDE') GOTO 426
      IF(WORD8.EQ.'CMAP    ') GOTO 426
      IF(WORD8.EQ.'IMPROPER') GOTO 426
      IF(WORD8.EQ.'IMPHI   ') GOTO 426
      IF(WORD8(1:1).EQ.'!')   GOTO 423
      IF(WORD8(2:2).EQ.'!')   GOTO 423
      IF(WORD8(3:3).EQ.'!')   GOTO 423
      IF(WORD8.EQ.'        ') GOTO 423
      READ(WD100,*)WORD5A,WORD5B,WORD5C,WORD5D
      IF(IIIREAD.EQ.1)THEN
         IF(WORD5A.EQ.'X    '.AND.WORD5D.EQ.'X    ')GOTO 423
         ENTRY20 = WORD5A//WORD5B//WORD5C//WORD5D
         DO IDIHR=1,NDIHR
            KK1    = ABS(LLIST(1,IDIHR))
            KK2    = ABS(LLIST(2,IDIHR))
            KK3    = ABS(LLIST(3,IDIHR))
            KK4    = ABS(LLIST(4,IDIHR))
            WORD20A= CHMNAM(KK1)//CHMNAM(KK2)//
     *               CHMNAM(KK3)//CHMNAM(KK4)
            WORD20B= CHMNAM(KK4)//CHMNAM(KK3)//
     *               CHMNAM(KK2)//CHMNAM(KK1)
            IF(ENTRY20.EQ.WORD20A .OR.
     *         ENTRY20.EQ.WORD20B     ) THEN
               READ(WD100,*)WORD5A,WORD5B,WORD5C,WORD5D,AW,JW,BW
               KDIHR         = KDIHR +1
               LLIST(1,IDIHR)=-KK1
               LLIST(2,IDIHR)=-KK2
               LLIST(3,IDIHR)=-KK3
               LLIST(4,IDIHR)=-KK4
               LLIST1(1,KDIHR)=KK1
               LLIST1(2,KDIHR)=KK2
               LLIST1(3,KDIHR)=KK3
               LLIST1(4,KDIHR)=KK4
               VROT(KDIHR)    =DBLE(NINT(AW*945.0D+04))/945.0D+04
               VROT(KDIHR)    =VROT(KDIHR)*TOHART
               NNN(KDIHR)     =JW
               GAMA(KDIHR)    =BW*TORAD
            END IF
         ENDDO
      END IF
      IF(IIIREAD.EQ.2)THEN
         IF(WORD5A.NE.'X    '.OR.WORD5A.NE.'X    ')GOTO 423
         ENTRY20 = WORD5A//WORD5B//WORD5C//WORD5D
         DO IDIHR=1,NDIHR
            KK1    = LLIST(1,IDIHR)
            KK2    = LLIST(2,IDIHR)
            KK3    = LLIST(3,IDIHR)
            KK4    = LLIST(4,IDIHR)
            IF(KK1.LT.0.OR.KK2.LT.0.OR.KK3.LT.0.OR.KK4.LT.0) THEN
            ELSE
               WORD20C= 'X    '//CHMNAM(KK2)//
     *                  CHMNAM(KK3)//'X    '
               WORD20D= 'X    '//CHMNAM(KK3)//
     *                  CHMNAM(KK2)//'X    '
               IF(ENTRY20.EQ.WORD20C .OR.
     *            ENTRY20.EQ.WORD20D     ) THEN
                  READ(WD100,*)WORD5A,WORD5B,WORD5C,WORD5D,AW,JW,BW
                  KDIHR         = KDIHR +1
                  LLIST1(1,KDIHR)=KK1
                  LLIST1(2,KDIHR)=KK2
                  LLIST1(3,KDIHR)=KK3
                  LLIST1(4,KDIHR)=KK4
                  VROT(KDIHR)    =DBLE(NINT(AW*945.0D+04))/945.0D+04
                  VROT(KDIHR)    =VROT(KDIHR)*TOHART
                  NNN(KDIHR)     =JW
                  GAMA(KDIHR)    =BW*TORAD
               END IF
            END IF
         ENDDO
      END IF
 423  CONTINUE
      ENDDO
 426  CONTINUE
C
      ENDDO
C
      DO IDIHR=1,NDIHR
         LLIST(1,IDIHR) = ABS(LLIST(1,IDIHR))
         LLIST(2,IDIHR) = ABS(LLIST(2,IDIHR))
         LLIST(3,IDIHR) = ABS(LLIST(3,IDIHR))
         LLIST(4,IDIHR) = ABS(LLIST(4,IDIHR))
      ENDDO
C
      NDIHR = KDIHR
      CALL ICOPY(4*NDIHR,LLIST1,1,LLIST,1)
      IF(NDIHR.GT.MXDIHR) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: IN RDCHARMM, NDIHR EXCEEDED MXDIHR'
         IF(MASWRK)WRITE(IW,*)' '
         CALL ABRT
      END IF
C
C     -- FILL IN CMAP LIST --
C
      NCMAP=0
      IF(NFFTYP/10000.EQ.2) THEN
         LFFAT=0
         DO IRES=1,NRES-2
            RESNAMOK=.FALSE.
            IF(RESNAM(IRES  )(1:3).EQ.'ADE'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'CYT'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'GUA'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'URA'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'THY') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' LI'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' LI'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' BE'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' BE'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'  B'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.'  B'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'  F'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.'  F') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' NA'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' NA'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' MG'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' MG'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' AL'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' AL'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' SI'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' SI'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' CL'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' CL') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.'  K'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.'  K'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' CA'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' CA'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' SC'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' SC'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' TI'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' TI'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'  V'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.'  V'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' CR'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' CR'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' MN'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' MN') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' FE'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' FE'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' CO'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' CO'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' NI'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' NI'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' CU'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' CU'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'CU1'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.'CU1'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' ZN'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' ZN') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' GA'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' GA'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' GE'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' GE'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' AS'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' AS'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' SE'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' SE'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' BR'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' BR'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' KR'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' KR') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' RB'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' RB'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' SR'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' SR'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'  Y'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.'  Y'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' ZR'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' ZR'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' NB'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' NB'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' MO'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' MO'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' TC'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' TC') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' RU'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' RU'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' RH'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' RH'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' PD'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' PD'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' AG'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' AG'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' CD'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' CD') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' IN'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' IN'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' SN'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' SN'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' SB'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' SB'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' TE'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' TE'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'  I'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.'  I'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' XE'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' XE') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' CS'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' CS'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' BA'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' BA'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' LA'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' LA'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' CE'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' CE'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' PR'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' PR'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' ND'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' ND'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' PM'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' PM') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' SM'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' SM'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' EU'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' EU'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' GD'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' GD'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' TB'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' TB'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' DY'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' DY'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' HO'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' HO'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' ER'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' ER') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' TM'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' TM'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' YB'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' YB'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' LU'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' LU'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' HF'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' HF'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' TA'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' TA'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'  W'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.'  W'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' RE'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' RE') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' OS'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' OS'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' IR'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' IR'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' PT'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' PT'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' AU'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' AU'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' HG'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' HG') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' TL'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' TL'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' PB'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' PB'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' BI'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' BI'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' PO'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' PO'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' AT'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' AT'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' RN'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' RN') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' FR'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' FR'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' RA'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' RA'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' AC'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' AC'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' TH'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' TH'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' PA'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' PA'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'  U'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.'  U'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' NP'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' NP'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' PU'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' PU') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' AM'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' AM'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' CM'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' CM'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' BK'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' BK'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' CF'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' CF'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' ES'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' ES'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' FM'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' FM'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' MD'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' MD') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' NO'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' NO'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' LR'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' LR'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' RF'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' RF'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' DB'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' DB'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' SG'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' SG'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' BH'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' BH'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' HS'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' HS') RESNAMOK=.TRUE.
            IF(RESNAM(IRES  )(1:3).EQ.' MT'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' MT'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' DS'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' DS'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' RG'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' RG'.OR.
     *         RESNAM(IRES  )(1:3).EQ.' CN'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.' CN'.OR.
     *         RESNAM(IRES  )(1:3).EQ.'HOH'.OR.
     *         RESNAM(IRES+1)(1:3).EQ.'HOH') RESNAMOK=.TRUE.
            IF(RESNAMOK             .OR.
     *         NNNCCC(IRES  ).EQ.9  .OR.
     *         NNNCCC(IRES+1).EQ.9  .OR.
     *         LFFAT.GT.NFFAT    ) THEN
            ELSE
               NCMAP=NCMAP+1
               MAPLST(1,NCMAP)=3+LFFAT
C              --IT CAN ALSO HANDLE ACED FOR DIPEPTIDE
               IF(RESNAM(IRES)(1:3).EQ.'ACE') MAPLST(1,NCMAP)=1+LFFAT
               MAPLST(2,NCMAP)=1+NATAAA(IRES)+LFFAT
               MAPLST(3,NCMAP)=2+NATAAA(IRES)+LFFAT
               MAPLST(4,NCMAP)=3+NATAAA(IRES)+LFFAT
               MAPLST(5,NCMAP)=1+NATAAA(IRES)+NATAAA(IRES+1)+LFFAT
               MAPLST(6,NCMAP)=1 
               IF(RESNAM(IRES+1)(1:3).EQ.'PRO')
     *         MAPLST(6,NCMAP) = 2
               IF(RESNAM(IRES+1)(1:3).EQ.'GLY')
     *         MAPLST(6,NCMAP) = 3
            END IF
            LFFAT=LFFAT + NATAAA(IRES)
         ENDDO
         IF(NCMAP.GT.MXCMAP) THEN
            IF(MASWRK) WRITE(IW,*)
     *      'ERROR: IN RDCHARMM, NCMAP EXCEEDED MXCMAP'
            IF(MASWRK)WRITE(IW,*)' '
            CALL ABRT
         END IF
      END IF
C
C     **** SEARCH FOR DIHEDRAL BENDING (IMPROPER) PARAMETERS ****
C
      MLINE = NLINA
      KKK   = 10000000       
      DO ILINE = 1, MLINE
      WD100=TEXTA(ILINE)
      IF(WD100(1:8).EQ.'IMPROPER') KKK = ILINE
      IF(WD100(1:5).EQ.'IMPHI')    KKK = ILINE
      IF(ILINE.LE.KKK) GOTO 433
      READ(WD100,'(A8)')WORD8
      IF(WORD8.EQ.'END     ') GOTO 436
      IF(WORD8.EQ.'BONDS   ') GOTO 436
      IF(WORD8.EQ.'BOND    ') GOTO 436
      IF(WORD8.EQ.'ANGLES  ') GOTO 436
      IF(WORD8.EQ.'ANGLE   ') GOTO 436
      IF(WORD8.EQ.'THETAS  ') GOTO 436
      IF(WORD8.EQ.'NONBONDE') GOTO 436
      IF(WORD8.EQ.'CMAP    ') GOTO 436
      IF(WORD8.EQ.'DIHEDRAL') GOTO 436
      IF(WORD8.EQ.'PHI     ') GOTO 436
      IF(WORD8.EQ.'IMPROPER') GOTO 433
      IF(WORD8.EQ.'IMPHI   ') GOTO 433
      IF(WORD8(1:1).EQ.'!')   GOTO 433
      IF(WORD8(2:2).EQ.'!')   GOTO 433
      IF(WORD8(3:3).EQ.'!')   GOTO 433
      IF(WORD8.EQ.'        ') GOTO 433
      READ(WD100,*)WORD5A,WORD5B,WORD5C,WORD5D
      ENTRY20 = WORD5A//WORD5B//WORD5C//WORD5D
      DO IDIHB=1,NDIHB
         KK1    = NLIST(1,IDIHB)
         KK2    = NLIST(2,IDIHB)
         KK3    = NLIST(3,IDIHB)
         KK4    = NLIST(4,IDIHB)
         IF(NFFTYP/10000.EQ.2) THEN
         WORD20A= CHMNAM(KK1)//CHMNAM(KK2)//
     *            CHMNAM(KK3)//CHMNAM(KK4)
         WORD20B= CHMNAM(KK4)//CHMNAM(KK3)//
     *            CHMNAM(KK2)//CHMNAM(KK1)
         WORD20C= CHMNAM(KK1)//CHMNAM(KK3)//
     *            CHMNAM(KK2)//CHMNAM(KK4)
         WORD20D= CHMNAM(KK4)//CHMNAM(KK2)//
     *            CHMNAM(KK3)//CHMNAM(KK1)
         WORD20E= CHMNAM(KK1)//'X    '//
     *            'X    '//CHMNAM(KK4)
         WORD20F= CHMNAM(KK4)//'X    '//
     *            'X    '//CHMNAM(KK1)
         IF(ENTRY20.EQ.WORD20A .OR. ENTRY20.EQ.WORD20B .OR.
     *      ENTRY20.EQ.WORD20C .OR. ENTRY20.EQ.WORD20D .OR.
     *      ENTRY20.EQ.WORD20E .OR. ENTRY20.EQ.WORD20F) THEN
            READ(WD100,*)WORD5A,WORD5B,WORD5C,WORD5D,AW,K5F67,BW
            FCDIHB(IDIHB) =AW*TOHART
            K5F67         =K5F67
            DIHB0(IDIHB)  =BW*TORAD
         END IF
         END IF
         IF(NFFTYP/10000.EQ.3) THEN
         WORD20A= CHMNAM(KK1)//CHMNAM(KK2)//
     *            CHMNAM(KK3)//CHMNAM(KK4)
         WORD20B= CHMNAM(KK4)//CHMNAM(KK3)//
     *            CHMNAM(KK2)//CHMNAM(KK1)
         WORD20C= 'X    '//'X    '//
     *            CHMNAM(KK3)//CHMNAM(KK4)
         WORD20D= 'X    '//'X    '//
     *            CHMNAM(KK4)//CHMNAM(KK3)
         WORD20E= 'X    '//CHMNAM(KK2)//
     *            CHMNAM(KK3)//CHMNAM(KK4)
         IF(ENTRY20.EQ.WORD20A .OR. ENTRY20.EQ.WORD20B .OR.
     *      ENTRY20.EQ.WORD20C .OR. ENTRY20.EQ.WORD20D .OR.
     *      ENTRY20.EQ.WORD20E) THEN
            READ(WD100,*)WORD5A,WORD5B,WORD5C,WORD5D,AW,K5F67,BW
            KDIHR         = KDIHR +1
            VROT(KDIHR)   = AW*TOHART
            NNN(KDIHR)    = K5F67
            GAMA(KDIHR)   = BW*TORAD
            LLIST1(1,KDIHR)=KK1
            LLIST1(2,KDIHR)=KK2
            LLIST1(3,KDIHR)=KK3
            LLIST1(4,KDIHR)=KK4
         END IF
         END IF
         IF(NFFTYP/10000.EQ.4) THEN
         WORD20A= CHMNAM(KK1)//CHMNAM(KK2)//
     *            CHMNAM(KK3)//CHMNAM(KK4)
         WORD20B= CHMNAM(KK4)//CHMNAM(KK3)//
     *            CHMNAM(KK2)//CHMNAM(KK1)
         WORD20C= CHMNAM(KK1)//CHMNAM(KK3)//
     *            CHMNAM(KK2)//CHMNAM(KK4)
         WORD20D= CHMNAM(KK4)//CHMNAM(KK2)//
     *            CHMNAM(KK3)//CHMNAM(KK1)
         IF(ENTRY20.EQ.WORD20A .OR. ENTRY20.EQ.WORD20B .OR.
     *      ENTRY20.EQ.WORD20C .OR. ENTRY20.EQ.WORD20D) THEN
            READ(WD100,*)WORD5A,WORD5B,WORD5C,WORD5D,AW,K5F67,BW
            KDIHR         = KDIHR +1
            VROT(KDIHR)   = AW*TOHART
            NNN(KDIHR)    = K5F67
            GAMA(KDIHR)   = BW*TORAD
            LLIST1(1,KDIHR)=KK1
            LLIST1(2,KDIHR)=KK2
            LLIST1(3,KDIHR)=KK3
            LLIST1(4,KDIHR)=KK4
         END IF
         END IF
      ENDDO
 433  CONTINUE
      ENDDO
 436  CONTINUE
C
C     -- UPDATE THE ACTUAL DIHR PARAMETER --
      IF(NFFTYP/10000.EQ.3.OR.NFFTYP/10000.EQ.4) THEN
         CALL ICOPY(4*KDIHR,LLIST1,1,LLIST,1)
         NDIHR = KDIHR
         NDIHB = 0
         IF(NDIHR.GT.MXDIHR) THEN
            IF(MASWRK) WRITE(IW,*)
     *      'ERROR: IN RDCHARMM, NDIHR EXCEEDED MXDIHR'
            IF(MASWRK)WRITE(IW,*)' '
            CALL ABRT
         END IF
      END IF
C
C     **** LJ RMIN/2 AND EPSILON IN PAR ****
C
      MLINE = NLINA
      KKK   = 10000000       
      DO ILINE = 1, MLINE
      WD100=TEXTA(ILINE)
      IF(WD100(1:8).EQ.'NONBONDE') KKK = ILINE
      IF(ILINE.LE.KKK) GOTO 443
      READ(WD100,'(A8)')WORD8
      IF(WORD8.EQ.'END     ') GOTO 446
      IF(WORD8.EQ.'BONDS   ') GOTO 446
      IF(WORD8.EQ.'BOND    ') GOTO 446
      IF(WORD8.EQ.'ANGLES  ') GOTO 446
      IF(WORD8.EQ.'THETAS  ') GOTO 446
      IF(WORD8.EQ.'ANGLE   ') GOTO 446
      IF(WORD8.EQ.'CMAP    ') GOTO 446
      IF(WORD8.EQ.'DIHEDRAL') GOTO 446
      IF(WORD8.EQ.'PHI     ') GOTO 446
      IF(WORD8.EQ.'IMPROPER') GOTO 446
      IF(WORD8.EQ.'IMPHI   ') GOTO 446
      IF(WORD8.EQ.'NONBONDE') GOTO 443
      IF(WORD8(1:1).EQ.'!')   GOTO 443
      IF(WORD8(2:2).EQ.'!')   GOTO 443
      IF(WORD8(3:3).EQ.'!')   GOTO 443
      IF(WORD8.EQ.'        ') GOTO 443
      READ(WD100,*)WORD5A
      DO IFFAT=1,NFFAT
         IF(NFFTYP/10000.EQ.3.AND.
     *       CHMNAM(IFFAT)(1:1).EQ.'N')
     *   CHMNAM(IFFAT) = 'N'//'*'
         WORD5B =  CHMNAM(IFFAT)
         IF(WORD5A.EQ.WORD5B)THEN
            IF(NFFTYP/10000.EQ.2) THEN
               READ(WD100,*)WORD5A,AW,BW,CW
               EPS(IFFAT)  = ABS(BW*TOHART)
               SIG(IFFAT)  = CW*TOBOHR*1.781797436280679D+00
               EPS2(IFFAT) = 0.0D+00
               SIG2(IFFAT) = 0.0D+00
               CALL CHECKWD100(WD100,NSTRING)
               IF(NSTRING.GT.4)THEN
                  READ(WD100,*)WORD5A,AW,BW,CW,DW,EW,FW
                  EPS2(IFFAT) = ABS(EW*TOHART)
                  DW          = DW
                  SIG2(IFFAT) = FW*TOBOHR*1.781797436280679D+00
               END IF
            END IF
            IF(NFFTYP/10000.EQ.3) THEN
               READ(WD100,*)WORD5A,AW,BW,CW,DW,EW,FW
               EPS(IFFAT)  = ABS(BW*TOHART)
               SIG(IFFAT)  = CW*TOBOHR*1.781797436280679D+00
               EPS2(IFFAT) = ABS(EW*TOHART)
               DW          = DW
               FW          = FW
               SIG2(IFFAT) = SIG(IFFAT)
            END IF
            IF(NFFTYP/10000.EQ.4) THEN
               READ(WD100,*)WORD5A,AW,BW,CW,DW,EW,FW
               EPS(IFFAT)  = ABS(BW*TOHART)
               SIG(IFFAT)  = CW*1.781797436280679D+00
               SIG(IFFAT)  = DBLE(NINT(SIG(IFFAT)*1.0D+05))
     *                       *1.0D-05*TOBOHR
               EPS2(IFFAT) = ABS(EW*TOHART)
               DW          = DW
               FW          = FW
               SIG2(IFFAT) = SIG(IFFAT) 
            END IF
         END IF
      ENDDO
 443  CONTINUE
      ENDDO
 446  CONTINUE
C
      IF(MASWRK) THEN
         CLOSE(12)
         CLOSE(16)
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK PDB2CHARMM
!>
!> @brief    change standard PDB atom names to CHARMM style names
!>              
!> @author   Nandun Thellamurege and Fengchao Cui
!>   
!> @details  change standard PDB atom names to CHARMM style names
!>
      SUBROUTINE PDB2CHARMM(RESNAM,PDBNAM,NATAAA,NNNCCC,NRES,CORD)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      CHARACTER*4  PDBNAM
      CHARACTER*8  RESNAM
C
      DIMENSION PDBNAM(*),RESNAM(*),NATAAA(*),NNNCCC(*),CORD(3,*)
C
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
C
C     -- CONVERT STANDARD PDB ATOM NAMES TO CHARMM STYLE NAMES --
C
C     NANDUN THELLAMUREGE, SEP 16, 2011, LINCOLN
C     FENGCHAO CUI, OCT 2, 2011, LINCOLN
C
      LFFAT = 0
      DO IRES = 1,NRES
C        -- NUCLEIC ACIDS --
         IF(RESNAM(IRES)(1:3).EQ.' DA'.OR.
     *      RESNAM(IRES)(1:3).EQ.' DG'.OR.
     *      RESNAM(IRES)(1:3).EQ.' DC'.OR.
     *      RESNAM(IRES)(1:3).EQ.' DT') THEN
            DO IFFAT=1,NATAAA(IRES)
               IF(NFFTYP/10000.EQ.3) THEN
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'H51 ')
     *               PDBNAM(IFFAT+LFFAT)   ='H71 '
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'H52 ')
     *               PDBNAM(IFFAT+LFFAT)   ='H72 '
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'H53 ')
     *               PDBNAM(IFFAT+LFFAT)   ='H73 '
               ELSE
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'C7  ')
     *               PDBNAM(IFFAT+LFFAT)   ='C5M '
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'H71 ')
     *               PDBNAM(IFFAT+LFFAT)   ='H51 '
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'H72 ')
     *               PDBNAM(IFFAT+LFFAT)   ='H52 '
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'H73 ')
     *               PDBNAM(IFFAT+LFFAT)   ='H53 '
               END IF
               IF(PDBNAM(IFFAT+LFFAT).EQ.'OP1 ')
     *            PDBNAM(IFFAT+LFFAT)   ='O1P '
               IF(PDBNAM(IFFAT+LFFAT).EQ.'OP2 ')
     *            PDBNAM(IFFAT+LFFAT)   ='O2P '
               IF(PDBNAM(IFFAT+LFFAT).EQ."HO5'")
     *            PDBNAM(IFFAT+LFFAT)   ='H5T '
               IF(PDBNAM(IFFAT+LFFAT).EQ."HO3'")
     *            PDBNAM(IFFAT+LFFAT)   ='H3T '
            ENDDO
            GOTO 100
         END IF
         IF(RESNAM(IRES)(1:3).EQ.'  A'.OR.
     *      RESNAM(IRES)(1:3).EQ.'  C'.OR.
     *      RESNAM(IRES)(1:3).EQ.'  G'.OR.
     *      RESNAM(IRES)(1:3).EQ.'  U') THEN
            DO IFFAT=1,NATAAA(IRES)
               IF(NFFTYP/10000.EQ.3) THEN
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'H51 ')
     *               PDBNAM(IFFAT+LFFAT)   ='H71 '
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'H52 ')
     *               PDBNAM(IFFAT+LFFAT)   ='H72 '
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'H53 ')
     *               PDBNAM(IFFAT+LFFAT)   ='H73 '
               ELSE
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'C7  ')
     *               PDBNAM(IFFAT+LFFAT)   ='C5M '
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'H71 ')
     *               PDBNAM(IFFAT+LFFAT)   ='H51 '
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'H72 ')
     *               PDBNAM(IFFAT+LFFAT)   ='H52 '
                  IF(PDBNAM(IFFAT+LFFAT).EQ.'H73 ')
     *               PDBNAM(IFFAT+LFFAT)   ='H53 '
               END IF
               IF(PDBNAM(IFFAT+LFFAT).EQ."H2' ")
     *            PDBNAM(IFFAT+LFFAT)   ="H2''"
               IF(PDBNAM(IFFAT+LFFAT).EQ.'HO2''')
     *            PDBNAM(IFFAT+LFFAT)   ="H2' "
               IF(PDBNAM(IFFAT+LFFAT).EQ.'OP1 ')
     *            PDBNAM(IFFAT+LFFAT)   ='O1P '
               IF(PDBNAM(IFFAT+LFFAT).EQ.'OP2 ')
     *            PDBNAM(IFFAT+LFFAT)   ='O2P '
               IF(PDBNAM(IFFAT+LFFAT).EQ."HO5'")
     *            PDBNAM(IFFAT+LFFAT)   ='H5T '
               IF(PDBNAM(IFFAT+LFFAT).EQ."HO3'")
     *            PDBNAM(IFFAT+LFFAT)   ='H3T '
            ENDDO
            GOTO 100
         END IF
C        -- ACE --
         IF(RESNAM(IRES)(1:3).EQ.'ACE') THEN
            DO IFFAT=1,NATAAA(IRES)
               IF(PDBNAM(IFFAT+LFFAT).EQ.'CH3 ')
     *            PDBNAM(IFFAT+LFFAT)   ='CAY '
               IF(PDBNAM(IFFAT+LFFAT).EQ.'C   ')
     *            PDBNAM(IFFAT+LFFAT)   ='CY  '
               IF(PDBNAM(IFFAT+LFFAT).EQ.'O   ')
     *            PDBNAM(IFFAT+LFFAT)   ='OY  '
               IF(PDBNAM(IFFAT+LFFAT).EQ.'H1  ')
     *            PDBNAM(IFFAT+LFFAT)   ='HY1 '
               IF(PDBNAM(IFFAT+LFFAT).EQ.'H2  ')
     *            PDBNAM(IFFAT+LFFAT)   ='HY2 '
               IF(PDBNAM(IFFAT+LFFAT).EQ.'H3  ')
     *            PDBNAM(IFFAT+LFFAT)   ='HY3 '
            ENDDO
         END IF
C        -- AMINO ACIDS --
         IF(NNNCCC(IRES).EQ.1) THEN
            DO IFFAT=1,NATAAA(IRES)
               IF(PDBNAM(IFFAT+LFFAT  ).EQ.'H   ')
     *            PDBNAM(IFFAT+LFFAT  )   ='H1  '
               IF(PDBNAM(IFFAT+LFFAT-2).NE.'H1  '.AND.
     *            PDBNAM(IFFAT+LFFAT-1).EQ.'H2  '.AND.
     *            PDBNAM(IFFAT+LFFAT  ).EQ.'H3  '     ) THEN
                  PDBNAM(IFFAT+LFFAT-1)   ='H1  '
                  PDBNAM(IFFAT+LFFAT  )   ='H2  '
               END IF
            ENDDO
         END IF
         IF(NNNCCC(IRES).EQ.9)PDBNAM(4    +LFFAT)='OT1 '
         DO IFFAT=1,NATAAA(IRES)
            IF(PDBNAM(IFFAT+LFFAT).EQ.'OXT ')PDBNAM(IFFAT+LFFAT)='OT2 '
            IF(PDBNAM(IFFAT+LFFAT).EQ.'H   ')PDBNAM(IFFAT+LFFAT)='HN  '
            IF(PDBNAM(IFFAT+LFFAT).EQ.'H2  ')THEN
               IF(RESNAM(IRES)(1:3).EQ.'PRO') THEN
                  PDBNAM(IFFAT+LFFAT)  ='HN2 '
                  PDBNAM(IFFAT+LFFAT-1)='HN1 '
               ELSE
                  PDBNAM(IFFAT+LFFAT)  ='HT2 '
                  PDBNAM(IFFAT+LFFAT-1)='HT1 '
               END IF
            END IF
            IF(PDBNAM(IFFAT+LFFAT).EQ.'H3  ')PDBNAM(IFFAT+LFFAT)='HT3 '
            IF(PDBNAM(IFFAT+LFFAT-1).NE.'HB1 '.AND.
     *         PDBNAM(IFFAT+LFFAT  ).EQ.'HB2 '.AND.
     *         PDBNAM(IFFAT+LFFAT+1).EQ.'HB3 ') THEN
               PDBNAM(IFFAT+LFFAT  )='HB1 '
               PDBNAM(IFFAT+LFFAT+1)='HB2 '
            END IF
            IF(RESNAM(IRES).EQ.'SER     '.OR.
     *         RESNAM(IRES).EQ.'CYS     ')THEN
               IF(PDBNAM(IFFAT+LFFAT  ).EQ.'HG  ')
     *         PDBNAM(IFFAT+LFFAT  )='HG1 '
            END IF
            IF(PDBNAM(IFFAT+LFFAT  ).EQ.'HA2 '.AND.
     *         PDBNAM(IFFAT+LFFAT+1).EQ.'HA3 ') THEN
               PDBNAM(IFFAT+LFFAT  )='HA1 '
               PDBNAM(IFFAT+LFFAT+1)='HA2 '
            END IF
            IF(PDBNAM(IFFAT+LFFAT  ).EQ.'HG2 '.AND.
     *         PDBNAM(IFFAT+LFFAT+1).EQ.'HG3 ') THEN
               PDBNAM(IFFAT+LFFAT  )='HG1 '
               PDBNAM(IFFAT+LFFAT+1)='HG2 '
            END IF
            IF(PDBNAM(IFFAT+LFFAT  ).EQ.'HD2 '.AND.
     *         PDBNAM(IFFAT+LFFAT+1).EQ.'HD3 ') THEN
               PDBNAM(IFFAT+LFFAT  )='HD1 '
               PDBNAM(IFFAT+LFFAT+1)='HD2 '
            END IF
            IF(PDBNAM(IFFAT+LFFAT  ).EQ.'HD3 '.AND.
     *         PDBNAM(IFFAT+LFFAT+1).EQ.'HD2 ') THEN
               PDBNAM(IFFAT+LFFAT  )='HD2 '
               PDBNAM(IFFAT+LFFAT+1)='HD1 '
            END IF
            IF(PDBNAM(IFFAT+LFFAT-1).NE.'HE1 '.AND.
     *         PDBNAM(IFFAT+LFFAT  ).EQ.'HE2 '.AND.
     *         PDBNAM(IFFAT+LFFAT+1).EQ.'HE3 ') THEN
               PDBNAM(IFFAT+LFFAT  )='HE1 '
               PDBNAM(IFFAT+LFFAT+1)='HE2 '
            END IF
            IF(PDBNAM(IFFAT+LFFAT-1).NE.'HG11'.AND.
     *         PDBNAM(IFFAT+LFFAT  ).EQ.'HG12'.AND.
     *         PDBNAM(IFFAT+LFFAT+1).EQ.'HG13') THEN
               PDBNAM(IFFAT+LFFAT  )='HG11'
               PDBNAM(IFFAT+LFFAT+1)='HG12'
            END IF
            IF(PDBNAM(IFFAT+LFFAT-1).NE.'HG21'.AND.
     *         PDBNAM(IFFAT+LFFAT  ).EQ.'HG22'.AND.
     *         PDBNAM(IFFAT+LFFAT+1).EQ.'HG23') THEN
               PDBNAM(IFFAT+LFFAT  )='HG21'
               PDBNAM(IFFAT+LFFAT+1)='HG22'
            END IF
            IF(PDBNAM(IFFAT+LFFAT  ).EQ.'HD11'.AND.
     *         PDBNAM(IFFAT+LFFAT+1).EQ.'HD12'.AND.
     *         PDBNAM(IFFAT+LFFAT+2).EQ.'HD13') THEN
               IF (RESNAM(IRES).EQ.'ILE     ')THEN
                  PDBNAM(IFFAT+LFFAT  )='HD1 '
                  PDBNAM(IFFAT+LFFAT+1)='HD2 '
                  PDBNAM(IFFAT+LFFAT+2)='HD3 '
               END IF
            END IF
            IF(PDBNAM(IFFAT+LFFAT-1).NE.'HD21'.AND.
     *         PDBNAM(IFFAT+LFFAT  ).EQ.'HD22'.AND.
     *         PDBNAM(IFFAT+LFFAT+1).EQ.'HD23') THEN
               PDBNAM(IFFAT+LFFAT  )='HD21'
               PDBNAM(IFFAT+LFFAT+1)='HD22'
            END IF
            IF(PDBNAM(IFFAT+LFFAT-1).NE.'HE11'.AND.
     *         PDBNAM(IFFAT+LFFAT  ).EQ.'HE12'.AND.
     *         PDBNAM(IFFAT+LFFAT+1).EQ.'HE13') THEN
               PDBNAM(IFFAT+LFFAT  )='HE11'
               PDBNAM(IFFAT+LFFAT+1)='HE12'
            END IF
            IF(PDBNAM(IFFAT+LFFAT-1).NE.'HE21'.AND.
     *         PDBNAM(IFFAT+LFFAT  ).EQ.'HE22'.AND.
     *         PDBNAM(IFFAT+LFFAT+1).EQ.'HE23') THEN
               PDBNAM(IFFAT+LFFAT  )='HE21'
               PDBNAM(IFFAT+LFFAT+1)='HE22'
            END IF
            IF(PDBNAM(IFFAT+LFFAT  ).EQ.'HXT ')
     *         PDBNAM(IFFAT+LFFAT  )='HT2 '
            IF(PDBNAM(IFFAT+LFFAT  ).EQ.'CD1 ')THEN
               IF(RESNAM(IRES).EQ.'ILE     ')
     *            PDBNAM(IFFAT+LFFAT  )='CD  '
            END IF
         ENDDO
C        -- CHARMM ASN HD21,HD22 ARE JUST DIFFERENT FROM PDB !
C           CHARMM TOP FILE HAS: HD21 IS CIS TO OD1
C           NORMAL PDB FILE HAS: HD22 IS CIS TO OD1
         IF(RESNAM(IRES).EQ.'ASN     ')THEN
            DO IFFAT=1,NATAAA(IRES)
               IF(PDBNAM(LFFAT+IFFAT).EQ.'HD21') KHD21=LFFAT+IFFAT
               IF(PDBNAM(LFFAT+IFFAT).EQ.'HD22') KHD22=LFFAT+IFFAT
               IF(PDBNAM(LFFAT+IFFAT).EQ.'OD1 ') KOD1 =LFFAT+IFFAT
            ENDDO
            DISOH=(CORD(1,KOD1)-CORD(1,KHD21))**2
     *           +(CORD(2,KOD1)-CORD(2,KHD21))**2
     *           +(CORD(3,KOD1)-CORD(3,KHD21))**2
            IF(DISOH.LE.27.6D+00) THEN      ! <2.78 A
            ELSE
               PDBNAM(KHD21)='HD22'
               PDBNAM(KHD22)='HD21'
            END IF
         END IF
C        -- CHARMM GLN HE21,HE22 ARE JUST DIFFERENT FROM PDB !
C           CHARMM TOP FILE HAS: HE21 IS CIS TO OE1
C           NORMAL PDB FILE HAS: HE22 IS CIS TO OE1
         IF(RESNAM(IRES).EQ.'GLN     ')THEN
            DO IFFAT=1,NATAAA(IRES)
               IF(PDBNAM(LFFAT+IFFAT).EQ.'HE21') KHE21=LFFAT+IFFAT
               IF(PDBNAM(LFFAT+IFFAT).EQ.'HE22') KHE22=LFFAT+IFFAT
               IF(PDBNAM(LFFAT+IFFAT).EQ.'OE1 ') KOE1 =LFFAT+IFFAT
            ENDDO
            DISOH=(CORD(1,KOE1)-CORD(1,KHE21))**2
     *           +(CORD(2,KOE1)-CORD(2,KHE21))**2
     *           +(CORD(3,KOE1)-CORD(3,KHE21))**2
            IF(DISOH.LE.27.6D+00) THEN      ! <2.78 A
            ELSE
               PDBNAM(KHE21)='HE22'
               PDBNAM(KHE22)='HE21'
            END IF
         END IF
 100     LFFAT = LFFAT + NATAAA(IRES)
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK CHECKWD100
!>   
!> @brief    check a string of 100 characters
!>                   
!> @author   Hui Li
!>   
!> @details  determine how many sections in the string
!>
      SUBROUTINE CHECKWD100(WD100,NSTRING)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      CHARACTER*100  WD100
C
C     HUI LI, OCT 2011, LINCOLN
C
      NSTRING = 0
      IF(WD100(1:1).EQ.'!') RETURN
      DO I = 2, 100
         IF(WD100(I:I).EQ.'!') RETURN
         IF(WD100(I:I).EQ.' '.AND.WD100(I-1:I-1).NE.' ') THEN
            NSTRING = NSTRING + 1
         END IF
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK LOUT1
!>
!> @brief    create a general force field
!>
!> @author   Hui Li
!>           - Apr 2012
!>  
!> @details  create a general force field
!>
      SUBROUTINE LOUT1(ATMNAM,CORD,ZANF,ZMAS,CHARG,POL,
     *                 SIG,EPS,SIG2,EPS2,BOND0,FCBOND,
     *                 ANGL0,FCANGL,DIHB0,FCDIHB,
     *                 VROT,NNN,GAMA,IPAIR,KLIST,LLIST,
     *                 NLIST,CLPR,ZLPR,NLPR,
     *                 MXFFAT,MXBOND,MXANGL,MXDIHR,
     *                 MXDIHB,JRATTLE,LSTRATTMP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INTEGER P1, P2, P3, P4
C
      LOGICAL GOPARR, DSKWRK, MASWRK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (DEGREE=57.2957795130823D+00)
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (PT5=0.50D+00, ONE=1.0D+00)
C
      CHARACTER*10 ATMNAM
C
      DIMENSION ATMNAM(MXFFAT),CORD(3,MXFFAT),
     *          ZANF(MXFFAT),
     *          ZMAS(MXFFAT),
     *          CHARG(MXFFAT),POL(MXFFAT),SIG(MXFFAT),EPS(MXFFAT),
     *          SIG2(MXFFAT),EPS2(MXFFAT),
     *          BOND0(MXBOND),FCBOND(MXBOND),
     *          ANGL0(MXANGL),FCANGL(MXANGL),
     *          DIHB0(MXDIHB),FCDIHB(MXDIHB),
     *          VROT(MXDIHR),NNN(MXDIHR),GAMA(MXDIHR),IPAIR(2,MXBOND),
     *          KLIST(3,MXANGL),
     *          LLIST(4,MXDIHR),
     *          NLIST(4,MXDIHB),
     *          CLPR(4,MXFFAT),ZLPR(4,MXFFAT),NLPR(MXFFAT),
     *          LSTRATTMP(2,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, APR 21, 2012, LINCOLN
C     HUI LI, MAY 24, 2014, IMPROVEMENTS
C
      IF(MASWRK) THEN
       WRITE(IW,*)'************************************************'
       WRITE(IW,*)'LOUT=1      GENERATES A $FFDATA IN THE .DAT FILE'
       WRITE(IW,*)'PLEASE ADD FORMAL CHARGES TO IONS/IONIZED GROUPS'
       WRITE(IW,*)'************************************************'
      END IF
C
C     -- AUTOMATICALLY GENERATE BOND, ANGLE, DIHEDRAL ANGLE --
C     IPAIR, KLIST, LLIST ALL HAVE LOWER NUMBER BEFORE HIGHER NUMBERS.
C
      IF(MASWRK) THEN
         CALL FFBOND(NFFAT,IPAIR,ZANF,CORD,NBOND)
         IF(JRATTLE.GT.0) THEN
            DO III = 1, JRATTLE
               JADD = 1
               DO IBOND=1,NBOND
                 IF( (LSTRATTMP(1,III).EQ.IPAIR(1,IBOND).AND.
     *                LSTRATTMP(2,III).EQ.IPAIR(2,IBOND)     ).OR.
     *               (LSTRATTMP(2,III).EQ.IPAIR(1,IBOND).AND.
     *                LSTRATTMP(1,III).EQ.IPAIR(2,IBOND)     )    )
     *                JADD = 0
               ENDDO
               IF(JADD.EQ.1) THEN
                  NBOND = NBOND + 1
                  KKK1  = MIN(LSTRATTMP(1,III),LSTRATTMP(2,III))
                  KKK2  = MAX(LSTRATTMP(1,III),LSTRATTMP(2,III))
                  IPAIR(1,NBOND)=KKK1
                  IPAIR(2,NBOND)=KKK2
               END IF
            ENDDO
         END IF
         CALL FFANGL(IPAIR,NBOND,KLIST,NANGL)
         CALL FFDIHR(KLIST,NANGL,LLIST,NDIHR)
         CALL FFDIHB(CORD,IPAIR,KLIST,NLIST,10.0D+00)
      END IF
C
C     -- COORDINATES --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'$FFDATA       !   FROM LOUT=1,',
     *              ' TOTAL MM CHARGE = 0.000000, MAY NEED EDITING'
         WRITE(IP,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
         DO IFFAT=1,NFFAT
            WRITE(IP,1010) ATMNAM(IFFAT),ZANF(IFFAT),
     *      CORD(1,IFFAT)*TOANGS,
     *      CORD(2,IFFAT)*TOANGS,
     *      CORD(3,IFFAT)*TOANGS
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- CHARGE FROM POLAR BONDS --
C
      IF(MASWRK) THEN
         CALL VCLR(CHARG,1,NFFAT)
         DO IBOND=1,NBOND
            P1      = IPAIR(1,IBOND)
            P2      = IPAIR(2,IBOND)
            Z1      = ZANF(P1)
            Z2      = ZANF(P2)
            IF(Z1.EQ.1.0D+00)THEN
               IF(Z2.EQ.6.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.05D+00
                  CHARG(P2) = CHARG(P2) - 0.05D+00
               END IF
               IF(Z2.EQ.7.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.30D+00
                  CHARG(P2) = CHARG(P2) - 0.30D+00
               END IF
               IF(Z2.EQ.8.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.40D+00
                  CHARG(P2) = CHARG(P2) - 0.40D+00
               END IF
               IF(Z2.EQ.9.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.80D+00
                  CHARG(P2) = CHARG(P2) - 0.80D+00
               END IF
               IF(Z2.EQ.15.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.02D+00
                  CHARG(P2) = CHARG(P2) - 0.02D+00
               END IF
               IF(Z2.EQ.16.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.10D+00
                  CHARG(P2) = CHARG(P2) - 0.10D+00
               END IF
               IF(Z2.EQ.17.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.40D+00
                  CHARG(P2) = CHARG(P2) - 0.40D+00
               END IF
            END IF
            IF(Z1.EQ.6.0D+00)THEN
               IF(Z2.EQ.1.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.05D+00
                  CHARG(P2) = CHARG(P2) + 0.05D+00
               END IF
               IF(Z2.EQ.7.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.15D+00
                  CHARG(P2) = CHARG(P2) - 0.15D+00
               END IF
               IF(Z2.EQ.8.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.50D+00
                  CHARG(P2) = CHARG(P2) - 0.50D+00
               END IF
               IF(Z2.EQ.9.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.60D+00
                  CHARG(P2) = CHARG(P2) - 0.60D+00
               END IF
               IF(Z2.EQ.17.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.10D+00
                  CHARG(P2) = CHARG(P2) - 0.10D+00
               END IF
            END IF
            IF(Z1.EQ.7.0D+00)THEN
               IF(Z2.EQ.1.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.30D+00
                  CHARG(P2) = CHARG(P2) + 0.30D+00
               END IF
               IF(Z2.EQ.6.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.15D+00
                  CHARG(P2) = CHARG(P2) + 0.15D+00
               END IF
               IF(Z2.EQ.8.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.10D+00
                  CHARG(P2) = CHARG(P2) - 0.10D+00
               END IF
               IF(Z2.EQ.9.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.30D+00
                  CHARG(P2) = CHARG(P2) - 0.30D+00
               END IF
               IF(Z2.EQ.15.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.20D+00
                  CHARG(P2) = CHARG(P2) + 0.20D+00
               END IF
            END IF
            IF(Z1.EQ.8.0D+00)THEN
               IF(Z2.EQ.1.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.40D+00
                  CHARG(P2) = CHARG(P2) + 0.40D+00
               END IF
               IF(Z2.EQ.6.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.50D+00
                  CHARG(P2) = CHARG(P2) + 0.50D+00
               END IF
               IF(Z2.EQ.7.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.10D+00
                  CHARG(P2) = CHARG(P2) + 0.10D+00
               END IF
               IF(Z2.EQ.9.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.10D+00
                  CHARG(P2) = CHARG(P2) - 0.10D+00
               END IF
               IF(Z2.EQ.15.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.40D+00
                  CHARG(P2) = CHARG(P2) + 0.40D+00
               END IF
               IF(Z2.EQ.16.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.20D+00
                  CHARG(P2) = CHARG(P2) + 0.20D+00
               END IF
               IF(Z2.EQ.17.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.10D+00
                  CHARG(P2) = CHARG(P2) + 0.10D+00
               END IF
            END IF
            IF(Z1.EQ.9.0D+00)THEN
               IF(Z2.EQ.1.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.80D+00
                  CHARG(P2) = CHARG(P2) + 0.80D+00
               END IF
               IF(Z2.EQ.6.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.60D+00
                  CHARG(P2) = CHARG(P2) + 0.60D+00
               END IF
               IF(Z2.EQ.7.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.30D+00
                  CHARG(P2) = CHARG(P2) + 0.30D+00
               END IF
               IF(Z2.EQ.8.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.10D+00
                  CHARG(P2) = CHARG(P2) + 0.10D+00
               END IF
               IF(Z2.EQ.15.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.60D+00
                  CHARG(P2) = CHARG(P2) + 0.60D+00
               END IF
               IF(Z2.EQ.16.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.40D+00
                  CHARG(P2) = CHARG(P2) + 0.40D+00
               END IF
               IF(Z2.EQ.17.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.20D+00
                  CHARG(P2) = CHARG(P2) + 0.20D+00
               END IF
            END IF
            IF(Z1.EQ.15.0D+00)THEN
               IF(Z2.EQ.1.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.02D+00
                  CHARG(P2) = CHARG(P2) + 0.02D+00
               END IF
               IF(Z2.EQ.7.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.20D+00
                  CHARG(P2) = CHARG(P2) - 0.20D+00
               END IF
               IF(Z2.EQ.8.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.40D+00
                  CHARG(P2) = CHARG(P2) - 0.40D+00
               END IF
               IF(Z2.EQ.9.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.60D+00
                  CHARG(P2) = CHARG(P2) - 0.60D+00
               END IF
               IF(Z2.EQ.17.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.20D+00
                  CHARG(P2) = CHARG(P2) - 0.20D+00
               END IF
            END IF
            IF(Z1.EQ.16.0D+00)THEN
               IF(Z2.EQ.1.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.10D+00
                  CHARG(P2) = CHARG(P2) + 0.10D+00
               END IF
               IF(Z2.EQ.7.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.10D+00
                  CHARG(P2) = CHARG(P2) - 0.10D+00
               END IF
               IF(Z2.EQ.8.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.20D+00
                  CHARG(P2) = CHARG(P2) - 0.20D+00
               END IF
               IF(Z2.EQ.9.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.40D+00
                  CHARG(P2) = CHARG(P2) - 0.40D+00
               END IF
               IF(Z2.EQ.17.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.10D+00
                  CHARG(P2) = CHARG(P2) - 0.10D+00
               END IF
            END IF
            IF(Z1.EQ.17.0D+00)THEN
               IF(Z2.EQ.1.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.40D+00
                  CHARG(P2) = CHARG(P2) + 0.40D+00
               END IF
               IF(Z2.EQ.6.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.10D+00
                  CHARG(P2) = CHARG(P2) + 0.10D+00
               END IF
               IF(Z2.EQ.8.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.10D+00
                  CHARG(P2) = CHARG(P2) - 0.10D+00
               END IF
               IF(Z2.EQ.9.0D+00)THEN
                  CHARG(P1) = CHARG(P1) + 0.20D+00
                  CHARG(P2) = CHARG(P2) - 0.20D+00
               END IF
               IF(Z2.EQ.15.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.20D+00
                  CHARG(P2) = CHARG(P2) + 0.20D+00
               END IF
               IF(Z2.EQ.16.0D+00)THEN
                  CHARG(P1) = CHARG(P1) - 0.10D+00
                  CHARG(P2) = CHARG(P2) + 0.10D+00
               END IF
            END IF
         ENDDO
      END IF
C
C     -- LJ RMIN/2 AND EPSILON --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'PARAMETERS       MASS         Q      ',
     *              'POL   RMIN/2  EPSILON   RMIN/2  EPSILON'
         DO IFFAT=1,NFFAT
            SIG(IFFAT)  = 2.00D+00
            EPS(IFFAT)  = 0.10D+00
            IF(ZANF(IFFAT).EQ.1.0D+00) THEN
               SIG(IFFAT)= 0.600D+00
               EPS(IFFAT)= 0.016D+00
            END IF
            IF(ZANF(IFFAT).EQ.6.0D+00) THEN
               SIG(IFFAT)= 1.908D+00
               EPS(IFFAT)= 0.086D+00
            END IF
            IF(ZANF(IFFAT).EQ.7.0D+00) THEN
               SIG(IFFAT)= 1.824D+00
               EPS(IFFAT)= 0.170D+00
            END IF
            IF(ZANF(IFFAT).EQ.8.0D+00) THEN
               SIG(IFFAT)= 1.700D+00
               EPS(IFFAT)= 0.200D+00
            END IF
            IF(ZANF(IFFAT).EQ.9.0D+00) THEN
               SIG(IFFAT)= 1.750D+00
               EPS(IFFAT)= 0.061D+00
            END IF
            IF(ZANF(IFFAT).EQ.15.0D+00) THEN
               SIG(IFFAT)= 2.100D+00
               EPS(IFFAT)= 0.200D+00
            END IF
            IF(ZANF(IFFAT).EQ.16.0D+00) THEN
               SIG(IFFAT)= 2.000D+00
               EPS(IFFAT)= 0.250D+00
            END IF
            IF(ZANF(IFFAT).EQ.17.0D+00) THEN
               SIG(IFFAT)= 1.950D+00
               EPS(IFFAT)= 0.265D+00
            END IF
            IF(ZANF(IFFAT).EQ.35.0D+00) THEN
               SIG(IFFAT)= 2.020D+00
               EPS(IFFAT)= 0.420D+00
            END IF
            IF(ZANF(IFFAT).EQ.53.0D+00) THEN
               SIG(IFFAT)= 2.150D+00
               EPS(IFFAT)= 0.500D+00
            END IF
            SIG2(IFFAT) = 0.0D+00
            EPS2(IFFAT) = 0.0D+00
            POL(IFFAT)  = 0.0D+00
            NLPR(IFFAT) = 2
            CLPR(1,IFFAT) =30.0D+00
            ZLPR(1,IFFAT) = 0.7D+00
            CLPR(2,IFFAT) = 0.0D+00
            ZLPR(2,IFFAT) = 0.0D+00
            CLPR(3,IFFAT) = 0.0D+00
            ZLPR(3,IFFAT) = 0.0D+00
            CLPR(4,IFFAT) = 0.0D+00
            ZLPR(4,IFFAT) = 0.0D+00
            IF(ZANF(IFFAT).EQ.1.0D+00) THEN
               CLPR(1,IFFAT)= 2.0D+00
               ZLPR(1,IFFAT)= 2.0D+00
            END IF
            IF(ZANF(IFFAT).EQ.6.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.7D+00
            END IF
            IF(ZANF(IFFAT).EQ.7.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.6D+00
            END IF
            IF(ZANF(IFFAT).EQ.8.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.8D+00
            END IF
            IF(ZANF(IFFAT).EQ.9.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.8D+00
            END IF
            IF(ZANF(IFFAT).EQ.16.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.6D+00
            END IF
            IF(ZANF(IFFAT).EQ.17.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.6D+00
            END IF
            WRITE(IP,1020)ATMNAM(IFFAT),
     *                    ZMAS(IFFAT)/1822.88850204D+00,
     *                    CHARG(IFFAT),POL(IFFAT)*TOANGS**3,
     *                    SIG(IFFAT),EPS(IFFAT),
     *                    SIG2(IFFAT),EPS2(IFFAT)
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- PRINT OUT QMMMREP --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'QMMMREP    N       C1     Z1       C2     Z2',
     *          '       C3     Z3       C4     Z4'
         DO IFFAT=1,NFFAT
            WRITE(IP,1030) ATMNAM(IFFAT),4,
     *                     CLPR(1,IFFAT),ZLPR(1,IFFAT),
     *                     CLPR(2,IFFAT),ZLPR(2,IFFAT),
     *                     CLPR(3,IFFAT),ZLPR(3,IFFAT),
     *                     CLPR(4,IFFAT),ZLPR(4,IFFAT)
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- BONDS --
C
      IF(MASWRK) THEN
         WRITE(IP,*)
     *   'BOND     #     ATM1     ATM2           FC        R0'
         DO IBOND=1,NBOND
            P1      = IPAIR(1,IBOND)
            P2      = IPAIR(2,IBOND)
            X       = CORD(1,P1) - CORD(1,P2)
            Y       = CORD(2,P1) - CORD(2,P2)
            Z       = CORD(3,P1) - CORD(3,P2)
            R2      = X*X + Y*Y + Z*Z
            R       = SQRT(R2)
            FCBOND(IBOND) = 300.0D+00
            BOND0(IBOND)  = R
            IF(ZANF(P1).EQ.1.0D+00.AND.ZANF(P2).EQ.6.0D+00.OR.
     *         ZANF(P2).EQ.1.0D+00.AND.ZANF(P1).EQ.6.0D+00    )
     *         BOND0(IBOND)  = 1.09D+00*TOBOHR
            IF(ZANF(P1).EQ.1.0D+00.AND.ZANF(P2).EQ.7.0D+00.OR.
     *         ZANF(P2).EQ.1.0D+00.AND.ZANF(P1).EQ.7.0D+00    )
     *         BOND0(IBOND)  = 1.08D+00*TOBOHR
            IF(ZANF(P1).EQ.1.0D+00.AND.ZANF(P2).EQ.8.0D+00.OR.
     *         ZANF(P2).EQ.1.0D+00.AND.ZANF(P1).EQ.8.0D+00    )
     *         BOND0(IBOND)  = 1.01D+00*TOBOHR
            WRITE(IP,1040)IBOND,IPAIR(1,IBOND),IPAIR(2,IBOND),
     *                    FCBOND(IBOND),
     *                    BOND0(IBOND)*TOANGS
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- ANGLES --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'ANGLE    #     ATM1     ATM2     ATM3 ',
     *          '          FC      ANGLE0'
         DO IANGL=1,NANGL
            P1     =KLIST(1,IANGL)
            P2     =KLIST(2,IANGL)
            P3     =KLIST(3,IANGL)
            X13    =CORD(1,P1)-CORD(1,P3)
            Y13    =CORD(2,P1)-CORD(2,P3)
            Z13    =CORD(3,P1)-CORD(3,P3)
            X12    =CORD(1,P1)-CORD(1,P2)
            Y12    =CORD(2,P1)-CORD(2,P2)
            Z12    =CORD(3,P1)-CORD(3,P2)
            X23    =CORD(1,P2)-CORD(1,P3)
            Y23    =CORD(2,P2)-CORD(2,P3)
            Z23    =CORD(3,P2)-CORD(3,P3)
            R13R13 =X13*X13+Y13*Y13+Z13*Z13
            R12R12 =X12*X12+Y12*Y12+Z12*Z12
            R23R23 =X23*X23+Y23*Y23+Z23*Z23
            R12    =SQRT(R12R12)
            R23    =SQRT(R23R23)
            ONEBC  =ONE/(R12*R23)
            COSA   =(R12R12 + R23R23 - R13R13)*ONEBC*PT5
            IF(COSA.GT. ONE) COSA = ONE
            IF(COSA.LT.-ONE) COSA =-ONE
            ALPHA  =ACOS(COSA)
            FCANGL(IANGL) = 50.0D+00
            ANGL0(IANGL)  = ALPHA
            IF(ALPHA*DEGREE.GE.160.0D+00) ANGL0(IANGL) = PI
            WRITE(IP,1050)IANGL,KLIST(1,IANGL),KLIST(2,IANGL),
     *                    KLIST(3,IANGL),FCANGL(IANGL),
     *                    ANGL0(IANGL)*DEGREE
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- DIHEDRAL ROTATION --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'DIHROT   #     ATM1     ATM2     ATM3  ',
     *          '   ATM4        VROT     N    GAMMA'
         KDIHR = 0
         DO 500 IDIHR=1,NDIHR
            P1=LLIST(1,IDIHR)
            P2=LLIST(2,IDIHR)
            P3=LLIST(3,IDIHR)
            P4=LLIST(4,IDIHR)
C
            X12=CORD(1,P1)-CORD(1,P2)
            Y12=CORD(2,P1)-CORD(2,P2)
            Z12=CORD(3,P1)-CORD(3,P2)
            X13=CORD(1,P1)-CORD(1,P3)
            Y13=CORD(2,P1)-CORD(2,P3)
            Z13=CORD(3,P1)-CORD(3,P3)
            X23=CORD(1,P2)-CORD(1,P3)
            Y23=CORD(2,P2)-CORD(2,P3)
            Z23=CORD(3,P2)-CORD(3,P3)
            X34=CORD(1,P3)-CORD(1,P4)
            Y34=CORD(2,P3)-CORD(2,P4)
            Z34=CORD(3,P3)-CORD(3,P4)
            X24=CORD(1,P2)-CORD(1,P4)
            Y24=CORD(2,P2)-CORD(2,P4)
            Z24=CORD(3,P2)-CORD(3,P4)
C
            R13=SQRT(X13*X13+Y13*Y13+Z13*Z13)
            R12=SQRT(X12*X12+Y12*Y12+Z12*Z12)
            R23=SQRT(X23*X23+Y23*Y23+Z23*Z23)
            R34=SQRT(X34*X34+Y34*Y34+Z34*Z34)
            R24=SQRT(X24*X24+Y24*Y24+Z24*Z24)
C
C           HERE WE CHECK THE TWO ANGLES
C
            ONEBC  =ONE/(R12*R23)
            COSA   =(R12*R12 + R23*R23 - R13*R13)*ONEBC*PT5
            IF(COSA.GT. ONE) COSA = ONE
            IF(COSA.LT.-ONE) COSA =-ONE
            ALPHA1 =ACOS(COSA)
            ONEBC  =ONE/(R23*R34)
            COSA   =(R23*R23 + R34*R34 - R24*R24)*ONEBC*PT5
            IF(COSA.GT. ONE) COSA = ONE
            IF(COSA.LT.-ONE) COSA =-ONE
            ALPHA2 =ACOS(COSA)
            IF(ALPHA1*DEGREE.GE.160.0D+00) GOTO 500
            IF(ALPHA2*DEGREE.GE.160.0D+00) GOTO 500
C
            COS123=(-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
            COS234=(-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
            SIN2123= 1.0D+00-COS123*COS123
            SIN2234= 1.0D+00-COS234*COS234
            IF(SIN2123.LT.1.0D-04.OR.SIN2234.LT.1.0D-04) GOTO 500
            SIN123 = SQRT(ABS(SIN2123))
            SIN234 = SQRT(ABS(SIN2234))
            IF(ABS(SIN123).LT.1.0D-06) GOTO 500
            IF(ABS(SIN234).LT.1.0D-06) GOTO 500
            ONESIN = 1.0D+00/(SIN123*SIN234)
C
            COSTOR = ONESIN*(COS123*COS234-
     *                          ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
            IF(COSTOR.GT. 1.0D+00) COSTOR= 1.0D+00
            IF(COSTOR.LT.-1.0D+00) COSTOR=-1.0D+00
            TOR    = ACOS(COSTOR)
C           -- DIHEDRAL ANGLE IS 0 - 360 DEGREES
            XNORM  = -Y23*Z34 + Z23*Y34
            YNORM  = -Z23*X34 + X23*Z34
            ZNORM  = -X23*Y34 + Y23*X34
            DOTN12 = X12*XNORM + Y12*YNORM + Z12*ZNORM
            IF(DOTN12.LT.0.0D+00) TOR = 2.0D+00*PI - TOR
C
            KDIHR = KDIHR + 1
            VROT(IDIHR) = 0.4D+00
            GAMA(IDIHR) = 0.0D+00
            NNN(IDIHR)  = 3
            TORDEG = TOR*DEGREE
            IF((TORDEG.GE.160.0D+00.AND.TORDEG.LE.200.0D+00).OR.
     *          TORDEG.GE.340.0D+00                         .OR.
     *          TORDEG.LE. 20.0D+00) THEN
               IYES2 = 0
               IYES3 = 0
               DO IDIHB=1,NDIHB
                  IF(P2.EQ.NLIST(1,IDIHB)) IYES2 = 1
                  IF(P3.EQ.NLIST(1,IDIHB)) IYES3 = 1
               ENDDO
               IF(IYES2+IYES3.EQ.2) THEN
                  VROT(IDIHR) = 10.0D+00
                  GAMA(IDIHR) = PI
                  NNN(IDIHR)  = 2
               END IF
            END IF
            WRITE(IP,1060)
     *                 KDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                 LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                 VROT(IDIHR),NNN(IDIHR),
     *                 GAMA(IDIHR)*DEGREE
 500     CONTINUE
         WRITE(IP,*)'STOP'
      END IF
C
C     -- DIHEDRAL BENDING (IMPROPER) --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'DIHBND   #     ATM1     ATM2     ATM3  ',
     *          '   ATM4         FC    DIHB0'
         DO IDIHB=1,NDIHB
            FCDIHB(IDIHB) =20.0D+00
            DIHB0(IDIHB)  = 0.0D+00
            IF(MASWRK)WRITE(IP,1070)
     *                 IDIHB,NLIST(1,IDIHB),NLIST(2,IDIHB),
     *                       NLIST(3,IDIHB),NLIST(4,IDIHB),
     *                 FCDIHB(IDIHB),
     *                 DIHB0(IDIHB)
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
      IF(MASWRK) WRITE(IP,*)'$END'
C
C     -- DO NOT RUN MD --
      NSTEP=-1
C
 1010 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1020 FORMAT(1X,A10,1X,F10.6,1X,F9.5,1X,F8.6,1X,
     *       F8.6,1X,F8.6,1X,F8.6,1X,F8.6)
 1030 FORMAT(1X,A10,1X,I1,1X,F8.5,1X,F6.4,1X,F8.5,1X,F6.4,
     *                    1X,F8.5,1X,F6.4,1X,F8.5,1X,F6.4,
     *                    1X,F8.5,1X,F6.4,1X,F8.5,1X,F6.4)
 1040 FORMAT(1X,I10,1X,I8,1X,I8,1X,F12.6,1X,F9.6)
 1050 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,F12.6,1X,F11.5)
 1060 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,I8,1X,F11.6,1X,I5,1X,F8.2)
 1070 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,I8,1X,F10.4,1X,F8.2)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FIXSOL
!>
!> @brief    FixSol solvation model
!>
!> @author   Hui Li
!>           - Dec 2011
!>
!> @details  FixSol solvation model
!>
      SUBROUTINE FIXSOL(CORD,FFGRD,CHARG,ZANF,AFIX,QFIX,
     *                  VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                  RFIX,IDATOM,DAI,IDDAI,
     *                  POL,POLSV,DIP,FIELD1,FIELD2,FIELD3,
     *                  NONLS1,L1213J)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, PT50=0.50D+00,
     *           TWO=2.0D+00, THREE=3.0D+00, FOUR=4.0D+00)
      PARAMETER (ONESIX=1.0D+00/6.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),IDATOM(*),ZANF(*),
     *          QFIX(*),AFIX(*),XTSFIX(*),YTSFIX(*),ZTSFIX(*),
     *          IDDAI(41,*),DAI(3,40,*),
     *          FIELD1(3,*),FIELD2(3,*),FIELD3(3,*),POL(*),NONLS1(2,*),
     *          L1213J(2,*),DIP(3,*),VFIX1(*),VFIX2(*),POLSV(*)
C
      COMMON /FFDAMP/ IPODAMP,IPO1213,SCRFAC,RSCRFAC,SCRF2,SCRF3,SCRF4
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMF,L2BONDPMF,L1ANGLPMF,L2ANGLPMF,
     *                L1DIHRPMF,L2DIHRPMF,L1DIHBPMF,L2DIHBPMF,
     *                L1WAGGPMF,L2WAGGPMF,L1CMAPPMF,L2CMAPPMF,
     *                L11213PMF,L21213PMF,L1N14PMF,L2N14PMF,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FMCOM / XX(1)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     - FIXPVA SOLVATION MODEL (FIXSOL) -
C     HUI LI, DEC 12, 2011, LINCOLN
C
      ENPOL    = ZERO
      ENFIXSO  = ZERO
      IF(IDOCHG.EQ.0) RETURN
      IF(IFIXSOL.EQ.0) RETURN
C
      SQRTPI=SQRT(PI)
C
      CALL FIXTES(CORD,ZANF,XTSFIX,YTSFIX,ZTSFIX,
     *            AFIX,IDATOM,RFIX,DAI,IDDAI,
     *            XX(LFFDAIT),XX(LFFIDTMP),XX(LFFTMPTS),
     *            XX(LFFLISTQM))
C
      IF(NTSATM.EQ. 60) DISM0 = 0.4000D+00*TOBOHR
      IF(NTSATM.EQ.240) DISM0 = 0.2000D+00*TOBOHR
      IF(NTSATM.EQ.960) DISM0 = 0.1000D+00*TOBOHR
      FACTOR  = ONE/SQRT(FOUR*PI)/1.07D+00
      SCALE   = (FIXEPS - ONE)/FIXEPS
      ONESCALE= ONE/SCALE
      NFFPAR  = (NFFTS-1)/NPROC+1
C
      MXDIIS  = 200
      MXDII1  = MXDIIS  +   1
      CALL VALFM(LOADFM)
      LQFIXX  = LOADFM  +   1
      LDIMAT1 = LQFIXX  +   NFFTS
      LQREP1  = LDIMAT1 +   MXDII1*MXDII1
      LTMP11  = LQREP1  + 2*NFFTS *MXDII1
      LTMP12  = LTMP11  +   MXDII1
      LIPVT1  = LTMP12  +   MXDII1*MXDII1
      LAST    = LIPVT1  +   MXDII1
      NEED    = LAST    -   LOADFM -1
      CALL GETFM(NEED)
C
      DO I = 1, NFFTS
         IF(AFIX(I).EQ.ZERO) QFIX(I) = ZERO
      ENDDO
C
C     -- VFIX1: POTENTIAL AT NFFTS DUE TO MM CHARGES --
C
      DO I = 1, NFFTS
         VFIX1(I) = ZERO
         DO J = 1, NFFAT
            QJ      = CHARG(J)
            X       = XTSFIX(I) - CORD(1,J)
            Y       = YTSFIX(I) - CORD(2,J)
            Z       = ZTSFIX(I) - CORD(3,J)
            R2      = X*X+Y*Y+Z*Z
            R       = SQRT(R2)
            VFIX1(I)= VFIX1(I) + QJ/R
         ENDDO
      ENDDO
C
C     -- FIELD1: FIELD AT POL DUE TO MM CHARGES --
C
      CALL VCLR(FIELD1,1,3*NFFAT)
      CALL VCLR(DIP   ,1,3*NFFAT)
      IF(IDOPOL.EQ.0) GOTO 220
      DO LL=1,2
      IF(LL.EQ.1) THEN
         NN1  = 1
         NN2  = NTODO
         SIGN = 1.0D+00
      END IF
      IF(LL.EQ.2) THEN
         NN1  = L11213
         NN2  = L21213
         SIGN = -1.0D+00
      END IF
      DO 200 III=NN1, NN2
         IF(LL.EQ.1) THEN
            IFFAT = NONLS1(1,III)
            JFFAT = NONLS1(2,III)
         END IF
         IF(LL.EQ.2) THEN
            IFFAT = L1213J(1,III)
            JFFAT = L1213J(2,III)
         END IF
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 200
         IF(CHARG(IFFAT).EQ.ZERO.AND.  POL(IFFAT).EQ.ZERO) GOTO 200
         IF(CHARG(JFFAT).EQ.ZERO.AND.  POL(JFFAT).EQ.ZERO) GOTO 200
         IF(  POL(IFFAT).EQ.ZERO.AND.  POL(JFFAT).EQ.ZERO) GOTO 200
         IF(CHARG(IFFAT).EQ.ZERO.AND.CHARG(JFFAT).EQ.ZERO) GOTO 200
         QI    = CHARG(IFFAT)
         QJ    = CHARG(JFFAT)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         R2    = X*X+Y*Y+Z*Z
         ONER2 = ONE/R2
         ONER  = SQRT(ONER2)
         ONER3 = ONER2*ONER
         DUMI  = QJ*ONER3*SIGN
         DUMJ  = QI*ONER3*SIGN
         FIELD1(1,IFFAT)=FIELD1(1,IFFAT)+DUMI*X
         FIELD1(2,IFFAT)=FIELD1(2,IFFAT)+DUMI*Y
         FIELD1(3,IFFAT)=FIELD1(3,IFFAT)+DUMI*Z
         FIELD1(1,JFFAT)=FIELD1(1,JFFAT)-DUMJ*X
         FIELD1(2,JFFAT)=FIELD1(2,JFFAT)-DUMJ*Y
         FIELD1(3,JFFAT)=FIELD1(3,JFFAT)-DUMJ*Z
 200  CONTINUE
      ENDDO
      IF(GOPARR) CALL DDI_GSUMF(2405,FIELD1,3*NFFAT)
 220  CONTINUE
C
C     -- DETERMINE FIXSOL SURFACE CHARGES --
C
      NCYCLE = 0
 300  CONTINUE
      NCYCLE = NCYCLE + 1
C
C     -- VFIX2: POTENTIAL AT NFFTS DUE TO SURFACE CHARGES --
      CALL VCLR(VFIX2,1,NFFTS)
      IPCOUNT = ME - 1
      DO 315 I = 1, NFFTS
         IF(AFIX(I).EQ.ZERO) GOTO 315
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 315
         END IF
         DO 320 J = I+1, NFFTS
            IF(AFIX(J).EQ.ZERO) GOTO 320
            X   = XTSFIX(I) - XTSFIX(J)
            Y   = YTSFIX(I) - YTSFIX(J)
            Z   = ZTSFIX(I) - ZTSFIX(J)
            R2  = X*X+Y*Y+Z*Z 
            R   = SQRT(R2)
            IF(R.GT.DISM0) THEN
               VFIX2(I)=VFIX2(I) + QFIX(J)/R
               VFIX2(J)=VFIX2(J) + QFIX(I)/R
            ELSE
               DUM = 1.5D+00/DISM0 - PT50*R2/DISM0**3
               VFIX2(I)=VFIX2(I) + QFIX(J)*DUM
               VFIX2(J)=VFIX2(J) + QFIX(I)*DUM
            END IF
 320     CONTINUE
 315  CONTINUE
      IF(IDOPOL.EQ.0) GOTO 380
C
C     -- FIELD2: FIELD AT POL DUE TO FIXSOL SURFACE CHARGES
      CALL VCLR(FIELD2,1,3*NFFAT)
      IPCOUNT = ME - 1
      DO 360 IFFAT=1,NFFAT
         XI = CORD(1,IFFAT)
         YI = CORD(2,IFFAT)
         ZI = CORD(3,IFFAT)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 360
         END IF
         DO 365 JFFTS=1, NFFTS
            XJ   = XTSFIX(JFFTS)
            YJ   = YTSFIX(JFFTS)
            ZJ   = ZTSFIX(JFFTS)
            QJ   = QFIX(JFFTS)*SCALE
            X    = XI - XJ
            Y    = YI - YJ
            Z    = ZI - ZJ
            R2   = X*X + Y*Y + Z*Z
            ONER2= ONE/R2
            ONER = SQRT(ONER2)
            ONER3= ONER2*ONER
            DUM  = QJ*ONER3
            FIELD2(1,IFFAT)=FIELD2(1,IFFAT)+DUM*X
            FIELD2(2,IFFAT)=FIELD2(2,IFFAT)+DUM*Y
            FIELD2(3,IFFAT)=FIELD2(3,IFFAT)+DUM*Z
 365     CONTINUE
 360  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2406,FIELD2,3*NFFAT)
C
C     -- UPDATE POL --
      CALL GETDIP(CORD,POL,POLSV,DIP,FIELD1,FIELD2,
     *            FIELD3,NONLS1,L1213J)
C
C     -- VFIX2: POTENTIAL AT NFFTS DUE TO MM POL --
      IPCOUNT = ME - 1
      DO 370 IFFTS = 1, NFFTS
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 370
         END IF
         XI     = XTSFIX(IFFTS)
         YI     = YTSFIX(IFFTS)
         ZI     = ZTSFIX(IFFTS)
         DO 375 JFFAT = 1, NFFAT
            XJ    = CORD(1,JFFAT)
            YJ    = CORD(2,JFFAT)
            ZJ    = CORD(3,JFFAT)
            DIPJX = DIP(1,JFFAT)
            DIPJY = DIP(2,JFFAT)
            DIPJZ = DIP(3,JFFAT)
            X     = XI - XJ
            Y     = YI - YJ
            Z     = ZI - ZJ
            R2    = X*X + Y*Y + Z*Z
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            VFIX2(IFFTS)=VFIX2(IFFTS) +
     *                  (DIPJX*X+DIPJY*Y+DIPJZ*Z)*ONER3
 375     CONTINUE
 370  CONTINUE
 380  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(2408,VFIX2,NFFTS)
      DO I = 1, NFFTS
         XX(LQFIXX+I-1) = -FACTOR*SQRT(AFIX(I))*
     *                     (VFIX1(I) + VFIX2(I))
      ENDDO
C
      DIFFS = ZERO
      DO I = 1, NFFTS
         DIFFS=DIFFS + ABS(QFIX(I)-XX(LQFIXX+I-1))
      ENDDO
      IF(DIFFS.GT.(NFFTS*FIXTOL).AND.NCYCLE.LT.200) THEN
         CALL FIXDIIS(NFFPAR,NCYCLE,MXDIIS,XX(LQFIXX),QFIX,
     *                XX(LDIMAT1),XX(LQREP1),XX(LTMP11),
     *                XX(LTMP12),XX(LIPVT1),NFFTS)
         CALL DCOPY(NFFTS,XX(LQFIXX),1,QFIX,1)
         GOTO 300
      END IF
C
C     -- FIXSOL CONVERGED --
C
      CALL DSCAL(NFFTS,SCALE,QFIX,1)
      FIXQ = ZERO
      DO I = 1, NFFTS
         FIXQ=FIXQ + QFIX(I)
      ENDDO
C
C     -- SOLVATION ENERGY --
C
      ENPOL    = ZERO
      ENFIXSO  = ZERO
      DO IFFAT = 1, NFFAT
         ENPOL = ENPOL - FIELD1(1,IFFAT)*DIP(1,IFFAT)
     *                 - FIELD1(2,IFFAT)*DIP(2,IFFAT)
     *                 - FIELD1(3,IFFAT)*DIP(3,IFFAT)
      ENDDO
      DO IFFTS = 1, NFFTS
         ENFIXSO = ENFIXSO + VFIX1(IFFTS)*QFIX(IFFTS)
      ENDDO
      ENPOL    = PT50*ENPOL
      ENFIXSO  = PT50*ENFIXSO 
C
C     -- COMPUETE GRADIENT --
C
      FACTORX = PT50*1.07D+00*SQRTPI*ONESCALE
      IPCOUNT  = ME - 1
      DO 400 I = 1, NFFTS
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 400
         END IF
         IFFAT = IDATOM(I)   ! THIS ROUTINE FOR PURE MM
         QI    = QFIX(I)
         DO 410 J = 1, NFFAT
            JFFAT  = J
            QJ     = CHARG(J)
            X      = XTSFIX(I) - CORD(1,J)
            Y      = YTSFIX(I) - CORD(2,J)
            Z      = ZTSFIX(I) - CORD(3,J)
            R2     = X*X+Y*Y+Z*Z
            R      = SQRT(R2)
            R3     = R2*R
            ONER3  = ONE/R3
            DUM    = -QI*QJ*ONER3
            DX     = DUM*X
            DY     = DUM*Y
            DZ     = DUM*Z
            FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DX
            FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DY
            FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DZ
            FFGRD(1,JFFAT)=FFGRD(1,JFFAT) - DX
            FFGRD(2,JFFAT)=FFGRD(2,JFFAT) - DY
            FFGRD(3,JFFAT)=FFGRD(3,JFFAT) - DZ
            IF(IDOPOL.EQ.0) GOTO 410
            ONER5  = ONER3/R2
            DJX    = DIP(1,J)
            DJY    = DIP(2,J)
            DJZ    = DIP(3,J)
            QIONER3= QI*ONER3
            QIDOT  = THREE*ONER5*(DJX*X+DJY*Y+DJZ*Z)*QI
            DX     = -DJX*QIONER3 + QIDOT*X
            DY     = -DJY*QIONER3 + QIDOT*Y
            DZ     = -DJZ*QIONER3 + QIDOT*Z
            FFGRD(1,IFFAT)=FFGRD(1,IFFAT) - DX
            FFGRD(2,IFFAT)=FFGRD(2,IFFAT) - DY
            FFGRD(3,IFFAT)=FFGRD(3,IFFAT) - DZ
            FFGRD(1,JFFAT)=FFGRD(1,JFFAT) + DX
            FFGRD(2,JFFAT)=FFGRD(2,JFFAT) + DY
            FFGRD(3,JFFAT)=FFGRD(3,JFFAT) + DZ
 410     CONTINUE
         DO 420 J = I+1, NFFTS
            JFFAT  = IDATOM(J)
            QJ     = QFIX(J)
            X      = XTSFIX(I) - XTSFIX(J)
            Y      = YTSFIX(I) - YTSFIX(J)
            Z      = ZTSFIX(I) - ZTSFIX(J)
            R2     = X*X+Y*Y+Z*Z
            R      = SQRT(R2)
            IF(R.GT.DISM0) THEN
               R3     = R2*R
               ONER3  = ONE/R3
               DUM    = -QI*QJ*ONER3*ONESCALE
            ELSE
               DUM    = -QI*QJ*ONESCALE/DISM0**3
            END IF
            DX     = DUM*X
            DY     = DUM*Y
            DZ     = DUM*Z
            FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DX
            FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DY
            FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DZ
            FFGRD(1,JFFAT)=FFGRD(1,JFFAT) - DX
            FFGRD(2,JFFAT)=FFGRD(2,JFFAT) - DY
            FFGRD(3,JFFAT)=FFGRD(3,JFFAT) - DZ
 420     CONTINUE
         IF(AFIX(I).GT.1.0D-08) THEN
            DUM =-FACTORX*(QI**2)/SQRT(AFIX(I)**3)
            DO 430 III = 1, IDDAI(41,I)  ! THIS ROUTINE FOR PURE MM
               MFFAT = IDDAI(III,I)
               FFGRD(1,MFFAT)=FFGRD(1,MFFAT) + DUM*DAI(1,III,I)
               FFGRD(2,MFFAT)=FFGRD(2,MFFAT) + DUM*DAI(2,III,I)
               FFGRD(3,MFFAT)=FFGRD(3,MFFAT) + DUM*DAI(3,III,I)
 430        CONTINUE
         END IF
 400  CONTINUE
C
C
      IF(IDOPOL.EQ.0) GOTO 520
      DO LL=1,2
      IF(LL.EQ.1) THEN
         NN1  = 1
         NN2  = NTODO
         SIGN = 1.0D+00
      END IF
      IF(LL.EQ.2) THEN
         NN1  = L11213
         NN2  = L21213
         SIGN = -1.0D+00
      END IF
      DO 500 III=NN1, NN2
         IF(LL.EQ.1) THEN
            IFFAT = NONLS1(1,III)
            JFFAT = NONLS1(2,III)
         END IF
         IF(LL.EQ.2) THEN
            IFFAT = L1213J(1,III)
            JFFAT = L1213J(2,III)
         END IF
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 500
         IF(POL(IFFAT).EQ.ZERO.AND.CHARG(IFFAT).EQ.ZERO) GOTO 500
         QI    = CHARG(IFFAT)
         DIPIX = DIP(1,IFFAT)
         DIPIY = DIP(2,IFFAT)
         DIPIZ = DIP(3,IFFAT)
         IF(POL(JFFAT).EQ.ZERO.AND.CHARG(JFFAT).EQ.ZERO) GOTO 500
         QJ    = CHARG(JFFAT)
         DIPJX = DIP(1,JFFAT)
         DIPJY = DIP(2,JFFAT)
         DIPJZ = DIP(3,JFFAT)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         R2    = X*X+Y*Y+Z*Z
         X2    = X*X
         Y2    = Y*Y
         Z2    = Z*Z
         XY    = X*Y
         XZ    = X*Z
         YZ    = Y*Z
         R     = SQRT(R2)
C
         FE    = ONE
         FT    = ONE
         FEGRD = ZERO
         FTGRD = ZERO
         IF(IPODAMP.GT.0) THEN
            POLIJ = POLSV(IFFAT)*POLSV(JFFAT) + 1.0D-60
            POL6  = POLIJ**ONESIX
            RPOL6 = ONE/POL6
            RSFAC = RSCRFAC*RPOL6
            VFAC  = R*RSFAC
            VFAC2 = VFAC*VFAC
            VFAC3 = VFAC2*VFAC
            VFAC4 = VFAC3*VFAC
            UFAC  = R*RPOL6
            UFAC2 = UFAC*UFAC
            UFAC3 = UFAC2*UFAC
            IF(IPODAMP.EQ.1.AND.VFAC.LT.ONE) THEN
C              -- LINEAR THOLE MODEL
               FE    = FOUR*VFAC3-THREE*VFAC4
               FT    = VFAC4
               FEGRD = 12.0D+00*(VFAC2-VFAC3)*RSFAC
               FTGRD = FOUR*VFAC3*RSFAC
            ELSE IF(IPODAMP.EQ.2) THEN
C              -- EXPONENTIAL THOLE MODEL
               VALEXP= EXP(-SCRFAC*UFAC)
               FE    = ONE-(PT50*SCRF2*UFAC2+SCRFAC*UFAC+ONE)*VALEXP
               FT    = ONE-(ONESIX*SCRF3*UFAC3+PT50*SCRF2*UFAC2+
     *                      SCRFAC*UFAC+ONE)*VALEXP
               FEGRD = PT50*SCRF3*UFAC2*RPOL6*VALEXP
               FTGRD = ONESIX*SCRF4*UFAC3*RPOL6*VALEXP
            ELSE IF(IPODAMP.EQ.3) THEN
C              -- THOLE-TINKER EXPONENTIAL MODEL
               VALEXP= EXP(-SCRFAC*UFAC3)
               FE    = ONE-VALEXP
               FT    = ONE-(ONE+SCRFAC*UFAC3)*VALEXP
               FEGRD = THREE*SCRFAC*UFAC2*RPOL6*VALEXP
               FTGRD = FEGRD*SCRFAC*UFAC3
            END IF
         END IF
C
         ONER  = ONE/R
         ONER2 = ONER*ONER
         ONER3 = ONER2*ONER
         ONER4 = ONER2*ONER2
         ONER5 = ONER2*ONER3
         ONER6 = ONER3*ONER3
         ONER7 = ONER2*ONER5
C
C        - FORCES BETWEEN CHARGE AND DIPOLE
C
         QIDOT = THREE*ONER5*(DIPJX*X+DIPJY*Y+DIPJZ*Z)*QI
         QJDOT = THREE*ONER5*(DIPIX*X+DIPIY*Y+DIPIZ*Z)*QJ
         QIONER3= QI*ONER3
         QJONER3= QJ*ONER3
C              NEGATIVE FORCE ON QI BY DIPJ
         DXI   = DIPJX*QIONER3 - QIDOT*X
         DYI   = DIPJY*QIONER3 - QIDOT*Y
         DZI   = DIPJZ*QIONER3 - QIDOT*Z
C              NEGATIVE FORCE ON QJ BY DIPI
C                       FORCE ON DIPI BY QJ
         DXJ   = DIPIX*QJONER3 - QJDOT*X
         DYJ   = DIPIY*QJONER3 - QJDOT*Y
         DZJ   = DIPIZ*QJONER3 - QJDOT*Z
C              NEGATIVE FORCE ON IFFAT
         DX    = DXI - DXJ
         DY    = DYI - DYJ
         DZ    = DZI - DZJ
C
C        - FORCES BETWEEN DIPOLE AND DIPOLE -
C
         IF(IPO1213.EQ.1.AND.LL.EQ.2) GOTO 330
         DOTM  = DIPJX*DIPIX + DIPJY*DIPIY + DIPJZ*DIPIZ
         DOTXY = DIPJY*DIPIX + DIPIY*DIPJX
         DOTXZ = DIPJZ*DIPIX + DIPIZ*DIPJX
         DOTYZ = DIPJY*DIPIZ + DIPIY*DIPJZ
         DOTX  = TWO*DIPJX*DIPIX*X + DOTXY*Y + DOTXZ*Z
         DOTY  = TWO*DIPJY*DIPIY*Y + DOTXY*X + DOTYZ*Z
         DOTZ  = TWO*DIPJZ*DIPIZ*Z + DOTXZ*X + DOTYZ*Y
         DUM   = THREE*ONER5
         TEMP  = DIPIX*DIPJX*X2
     *          +DIPIY*DIPJY*Y2
     *          +DIPIZ*DIPJZ*Z2
     *          +(DIPIX*DIPJY+DIPIY*DIPJX)*XY
     *          +(DIPIX*DIPJZ+DIPIZ*DIPJX)*XZ
     *          +(DIPIY*DIPJZ+DIPIZ*DIPJY)*YZ
         DUM7  = 15.0D+00*TEMP*ONER7*FT
         FEDOTM= FE*DOTM
         FTDOTX= FT*DOTX
         FTDOTY= FT*DOTY
         FTDOTZ= FT*DOTZ
         DUM4  = FEGRD*DOTM*ONER4
         DUM6  = THREE*FTGRD*TEMP*ONER6
C        - NEGATIVE FORCE ON IFFAT
         DX    = DX - DUM*(FEDOTM*X+FTDOTX) + (DUM4-DUM6+DUM7)*X
         DY    = DY - DUM*(FEDOTM*Y+FTDOTY) + (DUM4-DUM6+DUM7)*Y
         DZ    = DZ - DUM*(FEDOTM*Z+FTDOTZ) + (DUM4-DUM6+DUM7)*Z
C
 330     CONTINUE
C
         DEX   = DX*SIGN
         DEY   = DY*SIGN
         DEZ   = DZ*SIGN
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DEX
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DEY
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DEZ
         FFGRD(1,JFFAT)=FFGRD(1,JFFAT) - DEX
         FFGRD(2,JFFAT)=FFGRD(2,JFFAT) - DEY
         FFGRD(3,JFFAT)=FFGRD(3,JFFAT) - DEZ
 500  CONTINUE
      ENDDO
 520  CONTINUE
C
      CALL RETFM(NEED)
C
      CALL FLSHBF(IW)
      RETURN
      END
C*MODULE QUANPO  *DECK GETDIP
!>
!> @brief    determine induced dipoles
!>
!> @author   Hui Li
!>           - Dec 2011
!>
!> @details  using iterative method
!>
      SUBROUTINE GETDIP(CORD,POL,POLSV,DIP,FIELD1,FIELD2,
     *                  FIELD3,NONLS1,L1213J)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ONE=1.0D+00, ZERO=0.0D+00, PT5=0.5D+00,
     *           THREE=3.0D+00, FOUR=4.0D+00)
      PARAMETER (ONESIX=1.0D+00/6.0D+00)
C
      DIMENSION CORD(3,*),POL(*),DIP(3,*),FIELD1(3,*),FIELD2(3,*),
     *          FIELD3(3,*),NONLS1(2,*),L1213J(2,*),POLSV(*)
C
      COMMON /FFDAMP/ IPODAMP,IPO1213,SCRFAC,RSCRFAC,SCRF2,SCRF3,SCRF4
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPT3/ NACTMM,LACTMM(2020),LFFDIPOLD,JUMBUP,
     *                NACTQM,LACTQM(2020),LFFOLDC,LFFQMVELSV,MMHESS
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMF,L2BONDPMF,L1ANGLPMF,L2ANGLPMF,
     *                L1DIHRPMF,L2DIHRPMF,L1DIHBPMF,L2DIHBPMF,
     *                L1WAGGPMF,L2WAGGPMF,L1CMAPPMF,L2CMAPPMF,
     *                L11213PMF,L21213PMF,L1N14PMF,L2N14PMF,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FMCOM / XX(1)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, DEC 9, 2011, LINCOLN
C     HUI LI, MAR 2, 2014, ADD DIPOLD
C
C
      IF(IDOPOL.EQ.0) THEN
         CALL VCLR(DIP,1,3*NFFAT)
         RETURN
      END IF
C
      SUMOLD=ZERO
      DO 305 ITER = 1, IDOPOL
      SUM = ZERO
      CALL VCLR(FIELD3,1,3*NFFAT)
      IF(IDOPOL.EQ.1) GOTO 301
C
C     -- FIELD3: FIELD AT POL DUE TO INDUCED DIPOLES --
C
      NTIMES=2
      IF(IPO1213.EQ.1) NTIMES=1
      DO LL=1,NTIMES
      IF(LL.EQ.1) THEN
         NN1  = 1
         NN2  = NTODO
         SIGN = 1.0D+00
      END IF
      IF(LL.EQ.2) THEN
         NN1  = L11213
         NN2  = L21213
         SIGN = -1.0D+00
      END IF
      DO 300 III=NN1, NN2
         IF(LL.EQ.1) THEN
            IFFAT = NONLS1(1,III)
            JFFAT = NONLS1(2,III)
         END IF
         IF(LL.EQ.2) THEN
            IFFAT = L1213J(1,III)
            JFFAT = L1213J(2,III)
         END IF
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 300
         IF(POL(IFFAT).EQ.ZERO) GOTO 300
         DIPIX = DIP(1,IFFAT)
         DIPIY = DIP(2,IFFAT)
         DIPIZ = DIP(3,IFFAT)
         IF(POL(JFFAT).EQ.ZERO) GOTO 300
         DIPJX = DIP(1,JFFAT)
         DIPJY = DIP(2,JFFAT)
         DIPJZ = DIP(3,JFFAT)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         PBCX  = XBOX * ANINT(X*ONEXBOX)
         PBCY  = YBOX * ANINT(Y*ONEYBOX)
         PBCZ  = ZBOX * ANINT(Z*ONEZBOX)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         IF(R2.GT.SWRB2) GOTO 300
         IF(R2.LT.0.01D+00) GOTO 300
         R     = SQRT(R2)
C
         FE    = ONE
         FT    = ONE
         IF(IPODAMP.GT.0) THEN
            POL6  = (POLSV(IFFAT)*POLSV(JFFAT))**ONESIX
            RPOL6 = ONE/POL6
            RSFAC = RSCRFAC*RPOL6
            VFAC  = R*RSFAC
            VFAC3 = VFAC*VFAC*VFAC
            VFAC4 = VFAC3*VFAC
            UFAC  = R*RPOL6
            UFAC2 = UFAC*UFAC
            UFAC3 = UFAC2*UFAC
            IF(IPODAMP.EQ.1.AND.VFAC.LT.ONE) THEN
C              -- LINEAR THOLE MODEL
               FE    = FOUR*VFAC3-THREE*VFAC4
               FT    = VFAC4
            ELSE IF(IPODAMP.EQ.2) THEN
C              -- EXPONENTIAL THOLE MODEL
               VALEXP= EXP(-SCRFAC*UFAC)
               FE    = ONE-(PT5*SCRF2*UFAC2+SCRFAC*UFAC+ONE)*VALEXP
               FT    = ONE-(ONESIX*SCRF3*UFAC3+PT5*SCRF2*UFAC2+
     *                      SCRFAC*UFAC+ONE)*VALEXP
            ELSE IF(IPODAMP.EQ.3) THEN
C              -- THOLE-TINKER EXPONENTIAL MODEL
               VALEXP= EXP(-SCRFAC*UFAC3)
               FE    = ONE-VALEXP
               FT    = ONE-(ONE+SCRFAC*UFAC3)*VALEXP
            END IF
         END IF
         ONER  = ONE/R
         IF(IPOLSHF.EQ.1) CALL SHIFT(R2,R,ONER,X,Y,Z)
         IF(IPOLSHF.EQ.0) CALL SWFUNC(R2,X,Y,Z)
C
         ONER2 = ONER*ONER
         ONER3 = ONER2*ONER
         ONER5 = ONER2*ONER3
         FER3  = ONER3*FE
         FTR5  = ONER5*FT
         DOTJ  = THREE*FTR5*(DIPJX*X+DIPJY*Y+DIPJZ*Z)
         DOTI  = THREE*FTR5*(DIPIX*X+DIPIY*Y+DIPIZ*Z)
         SWF   = SWF*SIGN
         FIELD3(1,IFFAT)=FIELD3(1,IFFAT)+(-DIPJX*FER3+DOTJ*X)*SWF
         FIELD3(2,IFFAT)=FIELD3(2,IFFAT)+(-DIPJY*FER3+DOTJ*Y)*SWF
         FIELD3(3,IFFAT)=FIELD3(3,IFFAT)+(-DIPJZ*FER3+DOTJ*Z)*SWF
         FIELD3(1,JFFAT)=FIELD3(1,JFFAT)+(-DIPIX*FER3+DOTI*X)*SWF
         FIELD3(2,JFFAT)=FIELD3(2,JFFAT)+(-DIPIY*FER3+DOTI*Y)*SWF
         FIELD3(3,JFFAT)=FIELD3(3,JFFAT)+(-DIPIZ*FER3+DOTI*Z)*SWF
 300  CONTINUE
      ENDDO
      IF(GOPARR) CALL DDI_GSUMF(2407,FIELD3,3*NFFAT)
 301  CONTINUE
C
C     - UPDATE DIPOLES -
      DO IFFAT=1,NFFAT
         DIP(1,IFFAT)=POL(IFFAT)*(FIELD1(1,IFFAT)
     *                           +FIELD2(1,IFFAT)
     *                           +FIELD3(1,IFFAT))
         DIP(2,IFFAT)=POL(IFFAT)*(FIELD1(2,IFFAT)
     *                           +FIELD2(2,IFFAT)
     *                           +FIELD3(2,IFFAT))
         DIP(3,IFFAT)=POL(IFFAT)*(FIELD1(3,IFFAT)
     *                           +FIELD2(3,IFFAT)
     *                           +FIELD3(3,IFFAT))
         SUM=SUM+ABS(DIP(1,IFFAT))+ABS(DIP(2,IFFAT))+ABS(DIP(3,IFFAT))
      ENDDO
      IF(ITER.EQ.1) CALL DCOPY(3*NFFAT,DIP,1,XX(LFFDIPOLD),1)
      DO IFFAT=1,NFFAT
         DIP(1,IFFAT)=0.75D+00*DIP(1,IFFAT)+
     *                0.25D+00*XX(LFFDIPOLD+(IFFAT-1)*3  )
         DIP(2,IFFAT)=0.75D+00*DIP(2,IFFAT)+
     *                0.25D+00*XX(LFFDIPOLD+(IFFAT-1)*3+1)
         DIP(3,IFFAT)=0.75D+00*DIP(3,IFFAT)+
     *                0.25D+00*XX(LFFDIPOLD+(IFFAT-1)*3+2)
      ENDDO
      CALL DCOPY(3*NFFAT,DIP,1,XX(LFFDIPOLD),1)
C
      IF(ITER.GT.2) THEN
         DIFFS= ABS(SUM - SUMOLD)
         IF(DIFFS.LT.POLTOL)THEN
C           IF(MASWRK) WRITE(IW,'(A,F16.14,A,I4,A)')
C    *      'INDUCED DIPOLE CONVERGED TO ',POLTOL,' IN ',ITER,' STEPS.'
            GOTO 306
         END IF
      END IF
      SUMOLD=SUM
      IF(IDOPOL.EQ.1) GOTO 306
 305  CONTINUE
      IF(MASWRK) WRITE(IW,'(A,F16.14,A,I4,A)')
     *'INDUCED DIPOLE NOT CONVERGED TO ',POLTOL,' IN ',IDOPOL,' STEPS.'
      IF(MASWRK) WRITE(IW,'(1X,A,F20.16)')'DIFF=',DIFFS
      IF(MASWRK) WRITE(IW,*)'THIS IS A PROBLEM ONLY WHEN THIS MESSAGE',
     *                      ' APPEARS FREQUENTLY'
 306  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK FIXTES
!>
!> @brief    FixSol tessellation
!>
!> @author   Hui Li
!>           - Nov 2011
!>
!> @details  modified from PCM code
!>
      SUBROUTINE FIXTES(CORD,ZANF,XTS,YTS,ZTS,AFIX,IDATOM,
     *                  RFIX,DAI,IDDAI,DAIT,IDTMP,TMPTS,
     *                  LISTQM)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (GOLD=1.618033988749895D+00, ONEGOLD=1.0D+00/GOLD,
     *           SQRT13=0.577350269189626D+00)
C
      DIMENSION AST(960),CDTST(3,960),VT20(3,20),
     *          IDUM(360),THEV(24),FIV(24),JVT1(6,60),CV(122,3),
     *          XTS(*),YTS(*),ZTS(*),AFIX(*),RFIX(*),IDATOM(*),
     *          CORD(3,*),ZANF(*),
     *          DAI(3,40,*),IDDAI(41,*),LISTQM(*)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
      EQUIVALENCE (IDUM(1),JVT1(1,1))
C
C
      DATA THEV/0.6523581398D+00,1.107148718D+00,1.382085796D+00,
     *          1.759506858D+00,2.034443936D+00,2.489234514D+00,
     *                         0.3261790699D+00,0.5535743589D+00,
     *          0.8559571251D+00,0.8559571251D+00,1.017221968D+00,
     *          1.229116717D+00,1.229116717D+00,1.433327788D+00,
     *          1.570796327D+00,1.570796327D+00,1.708264866D+00,
     *          1.912475937D+00,1.912475937D+00,2.124370686D+00,
     *          2.285635528D+00,2.285635528D+00,2.588018295D+00,
     *          2.815413584D+00/
      DATA FIV/               0.6283185307D+00,0.0000000000D+00,
     *         0.6283185307D+00,0.0000000000D+00,0.6283185307D+00,
     *         0.0000000000D+00,0.6283185307D+00,0.0000000000D+00,
     *         0.2520539002D+00,1.004583161D+00,0.6283185307D+00,
     *         0.3293628477D+00,0.9272742138D+00,0.0000000000D+00,
     *         0.3141592654D+00,0.9424777961D+00,0.6283185307D+00,
     *         0.2989556830D+00,0.9576813784D+00,0.0000000000D+00,
     *         0.3762646305D+00,0.8803724309D+00,0.6283188307D+00,
     *         0.0000000000D+00/
      DATA FIR/1.256637061D+00/
C
C
      DATA (IDUM(III),III=1,280)/
     *   1, 6, 2, 32, 36, 37, 1, 2, 3, 33, 32, 38, 1, 3, 4, 34,
     *   33, 39, 1, 4, 5, 35, 34, 40, 1, 5, 6, 36, 35, 41, 7, 2, 6, 51,
     *   42, 37, 8, 3, 2, 47, 43, 38, 9, 4, 3, 48, 44, 39, 10, 5, 4,
     *   49, 45, 40, 11, 6, 5, 50, 46, 41, 8, 2, 12, 62, 47, 52, 9,
     *   3, 13, 63, 48, 53, 10, 4, 14, 64, 49, 54, 11, 5, 15, 65, 50,
     *   55, 7, 6, 16, 66, 51, 56, 7, 12, 2, 42, 57, 52, 8, 13, 3,
     *   43, 58, 53, 9, 14, 4, 44, 59, 54, 10, 15, 5, 45, 60, 55, 11,
     *   16, 6, 46, 61, 56, 8, 12, 18, 68, 62, 77, 9, 13, 19, 69, 63,
     *   78, 10, 14, 20, 70, 64, 79, 11, 15, 21, 71, 65, 80, 7, 16,
     *   17, 67, 66, 81, 7, 17, 12, 57, 67, 72, 8, 18, 13, 58, 68, 73,
     *   9, 19, 14, 59, 69, 74, 10, 20, 15, 60, 70, 75, 11, 21, 16,
     *   61, 71, 76, 22, 12, 17, 87, 82, 72, 23, 13, 18, 88, 83, 73,
     *   24, 14, 19, 89, 84, 74, 25, 15, 20, 90, 85, 75, 26, 16, 21,
     *   91, 86, 76, 22, 18, 12, 82, 92, 77, 23, 19, 13, 83, 93, 78,
     *   24, 20, 14, 84, 94, 79, 25, 21, 15, 85, 95, 80, 26, 17, 16,
     *   86, 96, 81, 22, 17, 27, 102, 87, 97, 23, 18, 28, 103, 88, 98,
     *   24, 19, 29, 104, 89, 99, 25, 20, 30, 105, 90, 100, 26, 21,
     *   31, 106, 91, 101, 22, 28, 18, 92, 107, 98, 23, 29, 19, 93/
      DATA (IDUM(III),III=281,360)/
     *   108, 99, 24, 30, 20, 94, 109, 100, 25, 31, 21, 95, 110, 101,
     *   26, 27, 17, 96, 111, 97, 22, 27, 28, 107, 102, 112, 23, 28,
     *   29, 108, 103, 113, 24, 29, 30, 109, 104, 114, 25, 30, 31,
     *   110, 105, 115, 26, 31, 27, 111, 106, 116, 122, 28, 27, 117,
     *   118, 112, 122, 29, 28, 118, 119, 113, 122, 30, 29, 119, 120,
     *   114, 122, 31, 30, 120, 121, 115, 122, 27, 31, 121, 117, 116 /
C
C     ADAPTED FROM PCM CODE
C     HUI LI, NOV 26, 2011
C
C     COORDINATES OF VERTICES OF TESSERAE IN A SPHERE WITH UNIT RADIUS.
C
C                                    1
C
C                                 4     5
C
C                              3     6     2
C
      CV(  1,1) =  0.0D+00
      CV(  1,2) =  0.0D+00
      CV(  1,3) =  1.0D+00
      CV(122,1) =  0.0D+00
      CV(122,2) =  0.0D+00
      CV(122,3) = -1.0D+00
      II=1
      DO I=1,24
         TH=THEV(I)
         FI=FIV(I)
         CTH=COS(TH)
         STH=SIN(TH)
         DO J=1,5
            FI=FI+FIR
            IF(J.EQ.1) FI=FIV(I)
            II=II+1
            CV(II,1)=STH*COS(FI)
            CV(II,2)=STH*SIN(FI)
            CV(II,3)=CTH
         ENDDO
      ENDDO
C
      IF(NTSATM.EQ.4) THEN
         VT20(1,1)  = 1.0D+00
         VT20(2,1)  = 1.0D+00
         VT20(3,1)  = 1.0D+00
         VT20(1,2)  =-1.0D+00
         VT20(2,2)  =-1.0D+00
         VT20(3,2)  = 1.0D+00
         VT20(1,3)  =-1.0D+00
         VT20(2,3)  = 1.0D+00
         VT20(3,3)  =-1.0D+00
         VT20(1,4)  = 1.0D+00
         VT20(2,4)  =-1.0D+00
         VT20(3,4)  =-1.0D+00
         CALL DSCAL(12,SQRT13,VT20,1)
      END IF
C
      IF(NTSATM.EQ.6) THEN
         VT20(1,1)  = 1.0D+00
         VT20(2,1)  = 0.0D+00
         VT20(3,1)  = 0.0D+00
         VT20(1,2)  =-1.0D+00
         VT20(2,2)  = 0.0D+00
         VT20(3,2)  = 0.0D+00
         VT20(1,3)  = 0.0D+00
         VT20(2,3)  = 1.0D+00
         VT20(3,3)  = 0.0D+00
         VT20(1,4)  = 0.0D+00
         VT20(2,4)  =-1.0D+00
         VT20(3,4)  = 0.0D+00
         VT20(1,5)  = 0.0D+00
         VT20(2,5)  = 0.0D+00
         VT20(3,5)  = 1.0D+00
         VT20(1,6)  = 0.0D+00
         VT20(2,6)  = 0.0D+00
         VT20(3,6)  =-1.0D+00
      END IF
C
      IF(NTSATM.EQ.8) THEN
         VT20(1,1)  = 1.0D+00
         VT20(2,1)  = 1.0D+00
         VT20(3,1)  = 1.0D+00
         VT20(1,2)  =-1.0D+00
         VT20(2,2)  = 1.0D+00
         VT20(3,2)  = 1.0D+00
         VT20(1,3)  = 1.0D+00
         VT20(2,3)  =-1.0D+00
         VT20(3,3)  = 1.0D+00
         VT20(1,4)  = 1.0D+00
         VT20(2,4)  = 1.0D+00
         VT20(3,4)  =-1.0D+00
         VT20(1,5)  =-1.0D+00
         VT20(2,5)  =-1.0D+00
         VT20(3,5)  = 1.0D+00
         VT20(1,6)  =-1.0D+00
         VT20(2,6)  = 1.0D+00
         VT20(3,6)  =-1.0D+00
         VT20(1,7)  = 1.0D+00
         VT20(2,7)  =-1.0D+00
         VT20(3,7)  =-1.0D+00
         VT20(1,8)  =-1.0D+00
         VT20(2,8)  =-1.0D+00
         VT20(3,8)  =-1.0D+00
         CALL DSCAL(24,SQRT13,VT20,1)
      END IF
C
      IF(NTSATM.EQ.12) THEN
         VT20(1,1)  = 0.0D+00
         VT20(2,1)  = 1.0D+00
         VT20(3,1)  =    GOLD
         VT20(1,2)  = 0.0D+00
         VT20(2,2)  = 1.0D+00
         VT20(3,2)  =   -GOLD
         VT20(1,3)  = 0.0D+00
         VT20(2,3)  =-1.0D+00
         VT20(3,3)  =    GOLD
         VT20(1,4)  = 0.0D+00
         VT20(2,4)  =-1.0D+00
         VT20(3,4)  =   -GOLD
         VT20(3,5)  = 0.0D+00
         VT20(1,5)  = 1.0D+00
         VT20(2,5)  =    GOLD
         VT20(3,6)  = 0.0D+00
         VT20(1,6)  = 1.0D+00
         VT20(2,6)  =   -GOLD
         VT20(3,7)  = 0.0D+00
         VT20(1,7)  =-1.0D+00
         VT20(2,7)  =    GOLD
         VT20(3,8)  = 0.0D+00
         VT20(1,8)  =-1.0D+00
         VT20(2,8)  =   -GOLD
         VT20(2,9)  = 0.0D+00
         VT20(3,9)  = 1.0D+00
         VT20(1,9)  =    GOLD
         VT20(2,10) = 0.0D+00
         VT20(3,10) = 1.0D+00
         VT20(1,10) =   -GOLD
         VT20(2,11) = 0.0D+00
         VT20(3,11) =-1.0D+00
         VT20(1,11) =    GOLD
         VT20(2,12) = 0.0D+00
         VT20(3,12) =-1.0D+00
         VT20(1,12) =   -GOLD
         CALL DSCAL(36,0.525731112119134D+00,VT20,1)
      END IF
C
      IF(NTSATM.EQ.20) THEN
         VT20(1,1)  = 1.0D+00
         VT20(2,1)  = 1.0D+00
         VT20(3,1)  = 1.0D+00
         VT20(1,2)  = 1.0D+00
         VT20(2,2)  = 1.0D+00
         VT20(3,2)  =-1.0D+00
         VT20(1,3)  = 1.0D+00
         VT20(2,3)  =-1.0D+00
         VT20(3,3)  = 1.0D+00
         VT20(1,4)  =-1.0D+00
         VT20(2,4)  = 1.0D+00
         VT20(3,4)  = 1.0D+00
         VT20(1,5)  = 1.0D+00
         VT20(2,5)  =-1.0D+00
         VT20(3,5)  =-1.0D+00
         VT20(1,6)  =-1.0D+00
         VT20(2,6)  = 1.0D+00
         VT20(3,6)  =-1.0D+00
         VT20(1,7)  =-1.0D+00
         VT20(2,7)  =-1.0D+00
         VT20(3,7)  = 1.0D+00
         VT20(1,8)  =-1.0D+00
         VT20(2,8)  =-1.0D+00
         VT20(3,8)  =-1.0D+00
         VT20(1,9)  = 0.0D+00
         VT20(2,9)  = ONEGOLD
         VT20(3,9)  =    GOLD
         VT20(1,10) = 0.0D+00
         VT20(2,10) = ONEGOLD
         VT20(3,10) =   -GOLD
         VT20(1,11) = 0.0D+00
         VT20(2,11) =-ONEGOLD
         VT20(3,11) =    GOLD
         VT20(1,12) = 0.0D+00
         VT20(2,12) =-ONEGOLD
         VT20(3,12) =   -GOLD
         VT20(3,13) = 0.0D+00
         VT20(1,13) = ONEGOLD
         VT20(2,13) =    GOLD
         VT20(3,14) = 0.0D+00
         VT20(1,14) = ONEGOLD
         VT20(2,14) =   -GOLD
         VT20(3,15) = 0.0D+00
         VT20(1,15) =-ONEGOLD
         VT20(2,15) =    GOLD
         VT20(3,16) = 0.0D+00
         VT20(1,16) =-ONEGOLD
         VT20(2,16) =   -GOLD
         VT20(2,17) = 0.0D+00
         VT20(3,17) = ONEGOLD
         VT20(1,17) =    GOLD
         VT20(2,18) = 0.0D+00
         VT20(3,18) = ONEGOLD
         VT20(1,18) =   -GOLD
         VT20(2,19) = 0.0D+00
         VT20(3,19) =-ONEGOLD
         VT20(1,19) =    GOLD
         VT20(2,20) = 0.0D+00
         VT20(3,20) =-ONEGOLD
         VT20(1,20) =   -GOLD
         CALL DSCAL(60,SQRT13,VT20,1)
      END IF
C
      CALL VCLR(RFIX,1,NFFAT+NAT)
C
      IF(MEANFLD.GT.0.AND.MFQMCHG.EQ.-10) THEN
         DO I = 1, NFFAT+NAT
            IF(I.LE.NFFAT) INUC=INT(ZANF(I))
            IF(I.GT.NFFAT) INUC=INT(ZAN(I-NFFAT))
                           RFIX(I) = 2.400D+00*TOBOHR
            IF(INUC.EQ. 1) RFIX(I) = 0.001D+00*TOBOHR
            IF(INUC.EQ. 3) RFIX(I) = 1.400D+00*TOBOHR
            IF(INUC.EQ. 4) RFIX(I) = 1.400D+00*TOBOHR
            IF(INUC.EQ. 5) RFIX(I) = 1.400D+00*TOBOHR
            IF(INUC.EQ. 6) RFIX(I) = 2.100D+00*TOBOHR
            IF(INUC.EQ. 7) RFIX(I) = 2.000D+00*TOBOHR
            IF(INUC.EQ. 8) RFIX(I) = 1.900D+00*TOBOHR
            IF(INUC.EQ. 9) RFIX(I) = 1.800D+00*TOBOHR
            IF(INUC.EQ.10) RFIX(I) = 1.800D+00*TOBOHR
            IF(INUC.EQ.11) RFIX(I) = 1.800D+00*TOBOHR
            IF(INUC.EQ.12) RFIX(I) = 1.800D+00*TOBOHR
            IF(INUC.EQ.13) RFIX(I) = 1.800D+00*TOBOHR
            IF(INUC.EQ.14) RFIX(I) = 2.000D+00*TOBOHR
            IF(INUC.EQ.15) RFIX(I) = 2.200D+00*TOBOHR
            IF(INUC.EQ.16) RFIX(I) = 2.400D+00*TOBOHR
            IF(INUC.EQ.17) RFIX(I) = 2.760D+00*TOBOHR
            IF(INUC.EQ.18) RFIX(I) = 3.000D+00*TOBOHR
            IF(I.EQ.1) RFIX(I) = 0.001D+00*TOBOHR ! ONLY 1 MM ATOM
         ENDDO
         GOTO 400
      END IF
C
C     -- SIMPLIFIED UNITED ATOMIC RADII (SUAR) --
      DO I = 1, NFFAT+NAT
         IF(I.LE.NFFAT) INUC=INT(ZANF(I))
         IF(I.GT.NFFAT) INUC=INT(ZAN(I-NFFAT))
                        RFIX(I) = 2.400D+00*TOBOHR
         IF(INUC.EQ. 1) RFIX(I) = 0.001D+00*TOBOHR
         IF(INUC.EQ. 3) RFIX(I) = 1.400D+00*TOBOHR
         IF(INUC.EQ. 4) RFIX(I) = 1.400D+00*TOBOHR
         IF(INUC.EQ. 5) RFIX(I) = 1.400D+00*TOBOHR
         IF(INUC.EQ. 6) RFIX(I) = 2.100D+00*TOBOHR
         IF(INUC.EQ. 7) RFIX(I) = 2.000D+00*TOBOHR
         IF(INUC.EQ. 8) RFIX(I) = 1.900D+00*TOBOHR
         IF(INUC.EQ. 9) RFIX(I) = 1.800D+00*TOBOHR
         IF(INUC.EQ.10) RFIX(I) = 1.800D+00*TOBOHR
         IF(INUC.EQ.11) RFIX(I) = 1.800D+00*TOBOHR
         IF(INUC.EQ.12) RFIX(I) = 1.800D+00*TOBOHR
         IF(INUC.EQ.13) RFIX(I) = 1.800D+00*TOBOHR
         IF(INUC.EQ.14) RFIX(I) = 2.000D+00*TOBOHR
         IF(INUC.EQ.15) RFIX(I) = 2.200D+00*TOBOHR
         IF(INUC.EQ.16) RFIX(I) = 2.400D+00*TOBOHR
         IF(INUC.EQ.17) RFIX(I) = 2.760D+00*TOBOHR
         IF(INUC.EQ.18) RFIX(I) = 3.000D+00*TOBOHR
         IF(I.GT.NFFAT.AND.LISTQM(I).GT.0)  ! LET MM DO IT
     *                  RFIX(I) = 0.001D+00*TOBOHR
      ENDDO
C
      IF(RALLMM.GT.0.0D+00) THEN
         DO IFFAT=1,NFFAT
            INUC=INT(ZANF(IFFAT))
            RFIX(IFFAT) = RALLMM
            IF(INUC.EQ.1) RFIX(IFFAT) = 0.001D+00*TOBOHR
         ENDDO
      END IF
      IF(RALLQM.GT.0.0D+00) THEN
         DO IAT=1,NAT
            INUC=INT(ZAN(IAT))
            RFIX(NFFAT+IAT) = RALLQM
            IF(INUC.EQ.1) RFIX(NFFAT+IAT) = 0.001D+00*TOBOHR
            IF(LISTQM(NFFAT+IAT).GT.0) THEN  ! LET MM DO IT
               RFIX(NFFAT+IAT) = 0.001D+00*TOBOHR
               IFFAT = LISTQM(NFFAT+IAT)
               INUC=INT(ZANF(IFFAT))
               RFIX(IFFAT) = RALLQM
               IF(INUC.EQ.1) RFIX(IFFAT) = 0.001D+00*TOBOHR
            END IF
         ENDDO
      END IF
C
      DO II=1,NRADMM
         IFFAT = INT(RADMM(II))
         RFFAT = (RADMM(II) - DBLE(IFFAT))*1.0D+04
         IF(IFFAT.GT.0.AND.IFFAT.LE.NFFAT)
     *      RFIX(IFFAT) = RFFAT
      ENDDO
      DO II=1,NRADQM
         IAT = INT(RADQM(II))
         RAT = (RADQM(II) - DBLE(IAT))*1.0D+04
         IF(IAT.GT.0.AND.IAT.LE.NAT) THEN
            RFIX(NFFAT+IAT) = RAT
            IF(LISTQM(NFFAT+IAT).GT.0) THEN  ! LET MM DO IT
               RFIX(NFFAT+IAT) = 0.001D+00*TOBOHR
               RFIX(LISTQM(NFFAT+IAT)) = RAT
            END IF
         END IF
      ENDDO
C
 400  CONTINUE
C
C     -- NOTE: 'ME' STARTS AT 0 --
C
      CALL  VCLR(XTS   ,1,     MXFFTS)
      CALL  VCLR(YTS   ,1,     MXFFTS)
      CALL  VCLR(ZTS   ,1,     MXFFTS)
      CALL  VCLR(AFIX  ,1,     MXFFTS)
      CALL VICLR(IDATOM,1,     MXFFTS)
      CALL  VCLR(DAI   ,1,3*40*MXFFTS)
      CALL VICLR(IDDAI ,1,  41*MXFFTS)
      NFFTS   = ME*(MXFFTS/NPROC - 1)   ! NFFTS IS LOCAL
      IPCOUNT = ME - 1
      DO 500 IFFAT = 1, NFFAT+NAT
         IF(RFIX(IFFAT).LE.0.1D+00) GOTO 500
         IF(GOPARR) THEN
           IPCOUNT = IPCOUNT + 1
           IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 500
         END IF
         CALL FIXPVA2(IFFAT,CORD,JVT1,CV,CDTST,AST,
     *                XTS,YTS,ZTS,AFIX,RFIX,IDATOM,
     *                DAI,IDDAI,DAIT,IDTMP,TMPTS,VT20)
 500  CONTINUE
      IF(GOPARR) THEN
         CALL DDI_GSUMF(2418,XTS   ,      MXFFTS)
         CALL DDI_GSUMF(2419,YTS   ,      MXFFTS)
         CALL DDI_GSUMF(2420,ZTS   ,      MXFFTS)
         CALL DDI_GSUMF(2421,AFIX  ,      MXFFTS)
         CALL DDI_GSUMI(2422,IDATOM,      MXFFTS)
         CALL DDI_GSUMF(2423,DAI   , 3*40*MXFFTS)
         CALL DDI_GSUMI(2424,IDDAI ,   41*MXFFTS)
      END IF
C
      KFFTS = 0
      DO 600 ITS=1,MXFFTS
         IF(AFIX(ITS).LT.1.0D-04) GOTO 600  ! 1.0D-04
         KFFTS = KFFTS + 1
         IF(KFFTS.GT.MXFFTS) THEN
            WRITE(*,*)'FIXTES ERROR: PLEASE INCREASE MXFFTS.'
            WRITE(*,*)' '
            CALL ABRT
         END IF
         XTS(KFFTS)      = XTS(ITS)
         YTS(KFFTS)      = YTS(ITS)
         ZTS(KFFTS)      = ZTS(ITS)
         AFIX(KFFTS)     = AFIX(ITS)
         IDATOM(KFFTS)   = IDATOM(ITS)
         IDDAI(41,KFFTS) = IDDAI(41,ITS)
         DO JJJ = 1, IDDAI(41,ITS)
            IDDAI(JJJ,KFFTS) = IDDAI(JJJ,ITS)
            DAI(1,JJJ,KFFTS) = DAI(1,JJJ,ITS)
            DAI(2,JJJ,KFFTS) = DAI(2,JJJ,ITS)
            DAI(3,JJJ,KFFTS) = DAI(3,JJJ,ITS)
         ENDDO
 600  CONTINUE
      NFFTS = KFFTS   ! NFFTS IS GLOBAL
C
      FIXA = 0.0D+00
      DO IFFTS=1,NFFTS
         FIXA = FIXA + AFIX(IFFTS)
      ENDDO
      FIXA = FIXA*TOANGS**2
C
      CALL FLSHBF(IW)
      RETURN
      END
C*MODULE QUANPO  *DECK FIXPVA2
!>   
!> @brief    FixPVA2 tessellation scheme
!>   
!> @author   Hui Li
!>           - Nov 2011
!>    
!> @details  area scaling
!>
      SUBROUTINE FIXPVA2(IFFAT,CORD,JVT1,CV,CDTST,AST,
     *                   XTS,YTS,ZTS,AFIX,RFIX,IDATOM,
     *                   DAI,IDDAI,DAIT,IDTMP,TMPTS,VT20)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR, DSKWRK, MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (ONE3RD=1.0D+00/3.0D+00, FOURPI=4.0D+00*PI)
C
      DIMENSION XTS(*),YTS(*),ZTS(*),VT20(3,20),
     *          AFIX(*),RFIX(*),IDATOM(*),CORD(3,*),
     *          JVT1(6,60),AST(960),CDTST(3,960),CV(122,3),
     *          DAIT(3,40,960),DAI(3,40,*),IDDAI(41,*),
     *          TMPTS(3,*),IDTMP(41,960),IDTMPTS(41)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     PARTITION OF THE CAVITY SURFACE INTO TESSERAE
C     HUI LI, NOV 26, 2011
C
      IF(IFFAT.LE.NFFAT) THEN
         XII    = CORD(1,IFFAT)
         YII    = CORD(2,IFFAT)
         ZII    = CORD(3,IFFAT)
      END IF
      IF(IFFAT.GT.NFFAT) THEN
         XII    = C(1,IFFAT-NFFAT)
         YII    = C(2,IFFAT-NFFAT)
         ZII    = C(3,IFFAT-NFFAT)
      END IF
      RII    = RFIX(IFFAT)
      AREA0  = FOURPI*RII*RII/NTSATM
      CALL VCLR(CDTST ,1,   3*960)
      CALL VCLR(AST   ,1,     960)
      CALL VCLR(DAIT  ,1,3*40*960)
      CALL VICLR(IDTMP,1,  41*960)
C
C
C
C     --- USE 20 TESSERAE FOR EACH SPHERE ---
      IF(NTSATM.EQ.20) THEN
      DO 210 ITS = 1, NTSATM
C
         CDTST(1,ITS) = XII + VT20(1,ITS)*RII
         CDTST(2,ITS) = YII + VT20(2,ITS)*RII
         CDTST(3,ITS) = ZII + VT20(3,ITS)*RII
C
         CALL VCLR(TMPTS,1,3*(NFFAT+NAT))
         CALL VICLR(IDTMPTS,1,41)
         KFFAT=IFFAT
         AST(ITS) = AREA0
         CALL FIXPVASWF(KFFAT,CORD,CDTST,ITS,AST(ITS),RFIX,
     *                  TMPTS,IDTMPTS)
         IF(AST(ITS).GT.0.9D-04) THEN
            DO KKK = 1, IDTMPTS(41)
               MFFAT = IDTMPTS(KKK)
               DUMMY=ABS(TMPTS(1,MFFAT))+
     *               ABS(TMPTS(2,MFFAT))+
     *               ABS(TMPTS(3,MFFAT))
               IF(DUMMY.GT.1.0D-05) THEN
                  IDTMP(41,ITS) = IDTMP(41,ITS) + 1
                  III = IDTMP(41,ITS)
                  IDTMP(III,ITS)  = MFFAT
                  DAIT(1,III,ITS) = TMPTS(1,MFFAT)
                  DAIT(2,III,ITS) = TMPTS(2,MFFAT)
                  DAIT(3,III,ITS) = TMPTS(3,MFFAT)
               END IF
            ENDDO
         END IF
 210  CONTINUE
      END IF
C
C
C
C     --- USE 60 TESSERAE FOR EACH SPHERE ---
      IF(NTSATM.EQ.60) THEN
      DO 310 ITS = 1, NTSATM
C
         N1 = JVT1(1,ITS)
         N2 = JVT1(2,ITS)
         N3 = JVT1(3,ITS)
         P4X = (CV(N1,1)+CV(N2,1)+CV(N3,1))*ONE3RD
         P4Y = (CV(N1,2)+CV(N2,2)+CV(N3,2))*ONE3RD
         P4Z = (CV(N1,3)+CV(N2,3)+CV(N3,3))*ONE3RD
         DNORM4 = P4X**2+P4Y**2+P4Z**2
         SCALE4 = 1.0D+00/SQRT(DNORM4)
         CDTST(1,ITS) = XII + P4X*SCALE4*RII
         CDTST(2,ITS) = YII + P4Y*SCALE4*RII
         CDTST(3,ITS) = ZII + P4Z*SCALE4*RII
C
         CALL VCLR(TMPTS,1,3*(NFFAT+NAT))
         CALL VICLR(IDTMPTS,1,41)
         KFFAT=IFFAT
         AST(ITS) = AREA0
         CALL FIXPVASWF(KFFAT,CORD,CDTST,ITS,AST(ITS),RFIX,
     *                  TMPTS,IDTMPTS)
         IF(AST(ITS).GT.0.9D-04) THEN
            DO KKK = 1, IDTMPTS(41)
               MFFAT = IDTMPTS(KKK)
               DUMMY=ABS(TMPTS(1,MFFAT))+
     *               ABS(TMPTS(2,MFFAT))+
     *               ABS(TMPTS(3,MFFAT))
               IF(DUMMY.GT.1.0D-05) THEN
                  IDTMP(41,ITS) = IDTMP(41,ITS) + 1
                  III = IDTMP(41,ITS)
                  IDTMP(III,ITS)  = MFFAT
                  DAIT(1,III,ITS) = TMPTS(1,MFFAT)
                  DAIT(2,III,ITS) = TMPTS(2,MFFAT)
                  DAIT(3,III,ITS) = TMPTS(3,MFFAT)
               END IF
            ENDDO
         END IF
 310  CONTINUE
      END IF
C
C
C
C     --- USE 240 TESSERAE FOR EACH SPHERE ---
      IF(NTSATM.EQ.240) THEN
      DO 350 KTS = 1, 60
C
      DO 360 JTS = 1, 4
         ITS = (KTS-1)*4 + JTS
         IF(JTS.EQ.1) THEN
            N1 = JVT1(1,KTS)
            N2 = JVT1(4,KTS)
            N3 = JVT1(5,KTS)
         END IF
         IF(JTS.EQ.2) THEN
            N1 = JVT1(6,KTS)
            N2 = JVT1(4,KTS)
            N3 = JVT1(5,KTS)
         END IF
         IF(JTS.EQ.3) THEN
            N1 = JVT1(3,KTS)
            N2 = JVT1(4,KTS)
            N3 = JVT1(6,KTS)
         END IF
         IF(JTS.EQ.4) THEN
            N1 = JVT1(2,KTS)
            N2 = JVT1(6,KTS)
            N3 = JVT1(5,KTS)
         END IF
         P4X = (CV(N1,1)+CV(N2,1)+CV(N3,1))*ONE3RD
         P4Y = (CV(N1,2)+CV(N2,2)+CV(N3,2))*ONE3RD
         P4Z = (CV(N1,3)+CV(N2,3)+CV(N3,3))*ONE3RD
         DNORM4 = P4X**2+P4Y**2+P4Z**2
         SCALE4 = 1.0D+00/SQRT(DNORM4)
         CDTST(1,ITS) = XII + P4X*SCALE4*RII
         CDTST(2,ITS) = YII + P4Y*SCALE4*RII
         CDTST(3,ITS) = ZII + P4Z*SCALE4*RII
         KKK = MOD(ITS,4)
         IF(KKK.EQ.1) FACTOR = 0.97527227808D+00
         IF(KKK.EQ.2) FACTOR = 1.04680294088D+00
         IF(KKK.EQ.3) FACTOR = 0.98896281888D+00
         IF(KKK.EQ.0) FACTOR = 0.98896281888D+00
C
         CALL VCLR(TMPTS,1,3*(NFFAT+NAT))
         CALL VICLR(IDTMPTS,1,41)
         KFFAT=IFFAT
         AST(ITS) = AREA0*FACTOR
         CALL FIXPVASWF(KFFAT,CORD,CDTST,ITS,AST(ITS),RFIX,
     *                  TMPTS,IDTMPTS)
         IF(AST(ITS).GT.0.9D-04) THEN
            DO KKK = 1, IDTMPTS(41)
               MFFAT = IDTMPTS(KKK)
               DUMMY=ABS(TMPTS(1,MFFAT))+
     *               ABS(TMPTS(2,MFFAT))+
     *               ABS(TMPTS(3,MFFAT))
               IF(DUMMY.GT.1.0D-05) THEN
                  IDTMP(41,ITS) = IDTMP(41,ITS) + 1
                  III = IDTMP(41,ITS)
                  IDTMP(III,ITS)  = MFFAT
                  DAIT(1,III,ITS) = TMPTS(1,MFFAT)
                  DAIT(2,III,ITS) = TMPTS(2,MFFAT)
                  DAIT(3,III,ITS) = TMPTS(3,MFFAT)
               END IF
            ENDDO
         END IF
 360  CONTINUE
 350  CONTINUE
      END IF
C
C
C
C     --- USE 960 TESSERAE FOR EACH SPHERE ---
      IF(NTSATM.EQ.960) THEN
      DO 380 KTS = 1, 60
C
      DO 381 JTS = 1, 4
         IF(JTS.EQ.1) THEN
            N1 = JVT1(1,KTS)
            N2 = JVT1(4,KTS)
            N3 = JVT1(5,KTS)
         END IF
         IF(JTS.EQ.2) THEN
            N1 = JVT1(6,KTS)
            N2 = JVT1(4,KTS)
            N3 = JVT1(5,KTS)
         END IF
         IF(JTS.EQ.3) THEN
            N1 = JVT1(3,KTS)
            N2 = JVT1(4,KTS)
            N3 = JVT1(6,KTS)
         END IF
         IF(JTS.EQ.4) THEN
            N1 = JVT1(2,KTS)
            N2 = JVT1(6,KTS)
            N3 = JVT1(5,KTS)
         END IF
         P1X = CV(N1,1)
         P1Y = CV(N1,2)
         P1Z = CV(N1,3)
         P2X = CV(N2,1)
         P2Y = CV(N2,2)
         P2Z = CV(N2,3)
         P3X = CV(N3,1)
         P3Y = CV(N3,2)
         P3Z = CV(N3,3)
C           COMPUTE THE COORDINATES OF POINTS 4, 5, 6
C
C                          1
C
C                       4     5
C
C                    3     6     2
C
C
         P4X = (P1X+P3X)/2.0D+00
         P4Y = (P1Y+P3Y)/2.0D+00
         P4Z = (P1Z+P3Z)/2.0D+00
         P5X = (P1X+P2X)/2.0D+00
         P5Y = (P1Y+P2Y)/2.0D+00
         P5Z = (P1Z+P2Z)/2.0D+00
         P6X = (P2X+P3X)/2.0D+00
         P6Y = (P2Y+P3Y)/2.0D+00
         P6Z = (P2Z+P3Z)/2.0D+00
C
         DNORM4 = P4X**2+P4Y**2+P4Z**2
         DNORM5 = P5X**2+P5Y**2+P5Z**2
         DNORM6 = P6X**2+P6Y**2+P6Z**2
         SCALE4 = 1.0D+00/SQRT(DNORM4)
         SCALE5 = 1.0D+00/SQRT(DNORM5)
         SCALE6 = 1.0D+00/SQRT(DNORM6)
         P4X = P4X*SCALE4
         P4Y = P4Y*SCALE4
         P4Z = P4Z*SCALE4
         P5X = P5X*SCALE5
         P5Y = P5Y*SCALE5
         P5Z = P5Z*SCALE5
         P6X = P6X*SCALE6
         P6Y = P6Y*SCALE6
         P6Z = P6Z*SCALE6
C
      DO 382 LTS = 1, 4
         ITS = ((KTS-1)*4 + JTS-1)*4 + LTS
         IF(LTS.EQ.1) THEN
           PTS11=P1X
           PTS21=P1Y
           PTS31=P1Z
           PTS12=P4X
           PTS22=P4Y
           PTS32=P4Z
           PTS13=P5X
           PTS23=P5Y
           PTS33=P5Z
         ELSE IF(LTS.EQ.2) THEN
           PTS11=P6X
           PTS21=P6Y
           PTS31=P6Z
           PTS12=P4X
           PTS22=P4Y
           PTS32=P4Z
           PTS13=P5X
           PTS23=P5Y
           PTS33=P5Z
         ELSE IF(LTS.EQ.3) THEN
           PTS11=P3X
           PTS21=P3Y
           PTS31=P3Z
           PTS12=P4X
           PTS22=P4Y
           PTS32=P4Z
           PTS13=P6X
           PTS23=P6Y
           PTS33=P6Z
         ELSE IF(LTS.EQ.4) THEN
           PTS11=P2X
           PTS21=P2Y
           PTS31=P2Z
           PTS12=P6X
           PTS22=P6Y
           PTS32=P6Z
           PTS13=P5X
           PTS23=P5Y
           PTS33=P5Z
         END IF
C
         P7X = (PTS11+PTS12+PTS13)*ONE3RD
         P7Y = (PTS21+PTS22+PTS23)*ONE3RD
         P7Z = (PTS31+PTS32+PTS33)*ONE3RD
         DNORM7 = P7X**2+P7Y**2+P7Z**2
         SCALE7 = 1.0D+00/SQRT(DNORM7)
         CDTST(1,ITS) = XII + P7X*SCALE7*RII
         CDTST(2,ITS) = YII + P7Y*SCALE7*RII
         CDTST(3,ITS) = ZII + P7Z*SCALE7*RII
         KKK = MOD(ITS,16)
         IF(KKK.EQ. 1) FACTOR = 0.96853843384D+00
         IF(KKK.EQ. 2) FACTOR = 0.98634758299D+00
         IF(KKK.EQ. 3) FACTOR = 0.97310155328D+00
         IF(KKK.EQ. 4) FACTOR = 0.97310155328D+00
         IF(KKK.EQ. 5) FACTOR = 1.04026074020D+00
         IF(KKK.EQ. 6) FACTOR = 1.05941468448D+00
         IF(KKK.EQ. 7) FACTOR = 1.04376817374D+00
         IF(KKK.EQ. 8) FACTOR = 1.04376817369D+00
         IF(KKK.EQ. 9) FACTOR = 0.98544774054D+00
         IF(KKK.EQ.10) FACTOR = 1.00020007354D+00
         IF(KKK.EQ.11) FACTOR = 0.98676349755D+00
         IF(KKK.EQ.12) FACTOR = 0.98343824680D+00
         IF(KKK.EQ.13) FACTOR = 0.98544774307D+00
         IF(KKK.EQ.14) FACTOR = 1.00020007615D+00
         IF(KKK.EQ.15) FACTOR = 0.98343824928D+00
         IF(KKK.EQ. 0) FACTOR = 0.98676350013D+00
C
         CALL VCLR(TMPTS,1,3*(NFFAT+NAT))
         CALL VICLR(IDTMPTS,1,41)
         KFFAT=IFFAT
         AST(ITS) = AREA0*FACTOR
         CALL FIXPVASWF(KFFAT,CORD,CDTST,ITS,AST(ITS),RFIX,
     *                  TMPTS,IDTMPTS)
         IF(AST(ITS).GT.0.9D-04) THEN
            DO KKK = 1, IDTMPTS(41)
               MFFAT = IDTMPTS(KKK)
               DUMMY=ABS(TMPTS(1,MFFAT))+
     *               ABS(TMPTS(2,MFFAT))+
     *               ABS(TMPTS(3,MFFAT))
               IF(DUMMY.GT.1.0D-05) THEN
                  IDTMP(41,ITS) = IDTMP(41,ITS) + 1
                  III = IDTMP(41,ITS)
                  IDTMP(III,ITS)  = MFFAT
                  DAIT(1,III,ITS) = TMPTS(1,MFFAT)
                  DAIT(2,III,ITS) = TMPTS(2,MFFAT)
                  DAIT(3,III,ITS) = TMPTS(3,MFFAT)
               END IF
            ENDDO
         END IF
 382  CONTINUE
 381  CONTINUE
 380  CONTINUE
      END IF
C
C
      DO 500 ITS=1,NTSATM
         IF(AST(ITS).LT.0.95D-04) GOTO 500      !  0.95D-04
         NFFTS = NFFTS + 1
         IF(NFFTS.GT.(ME+1)*(MXFFTS/NPROC-1)) THEN
            WRITE(*,*)'FIXPVA2 ERROR: PLEASE INCREASE MXFFTS.'
            WRITE(*,*)' '
            CALL ABRT
         END IF
         XTS(NFFTS)      = CDTST(1,ITS)
         YTS(NFFTS)      = CDTST(2,ITS)
         ZTS(NFFTS)      = CDTST(3,ITS)
         AFIX(NFFTS)     = AST(ITS)
         IDATOM(NFFTS)   = IFFAT
         IDDAI(41,NFFTS) = IDTMP(41,ITS)
         DO JJJ = 1, IDTMP(41,ITS)
            IDDAI(JJJ,NFFTS) = IDTMP(JJJ,ITS)
            DAI(1,JJJ,NFFTS) = DAIT(1,JJJ,ITS)
            DAI(2,JJJ,NFFTS) = DAIT(2,JJJ,ITS)
            DAI(3,JJJ,NFFTS) = DAIT(3,JJJ,ITS)
         ENDDO
 500  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK FIXPVASWF
!>   
!> @brief    FixPVA2 switching function
!>   
!> @author   Hui Li
!>           - Nov 2011
!>    
!> @details  FixPVA2 area and area derivatives
!>
      SUBROUTINE FIXPVASWF(IFFAT,CORD,CDTST,ITS,AREA,RFIX,
     *                     TMP,IDTMPTS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00,
     *           PT5=0.5D+00, TEN=10.0D+00)
C
      DIMENSION CORD(3,*),TMP(3,*),CDTST(3,*),RFIX(*),IDTMPTS(41)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
C     DETERMINE THE AREA AND AREA DERIVATIVES FOR A TESSERA
C     USING FIXPVA2
C     HUI LI, NOV 27, 2011, LINCOLN
C
C     P1 = X1, Y1, Z1 (THE CURRENT TESSERA)
C     P2 = X2, Y2, Z2 (THE CENTER OF THE SPHERE OF THE TESSERA)
C     P3 = X3, Y3, Z3 (THE CENTER OF A NEIGHBOR SPHERE)
C
C
      DISM0 = 0.30D+00*TOBOHR
      ONEDISM0 = ONE/DISM0
      DISN1 = 0.70D+00*TOBOHR
      DISN2 = 1.20D+00*TOBOHR   ! DISN2 MUST BE < RA
C
      X1 = CDTST(1,ITS)
      Y1 = CDTST(2,ITS)
      Z1 = CDTST(3,ITS)
      IF(IFFAT.LE.NFFAT) THEN
         X2 = CORD(1,IFFAT)
         Y2 = CORD(2,IFFAT)
         Z2 = CORD(3,IFFAT)
      END IF
      IF(IFFAT.GT.NFFAT) THEN
         X2 = C(1,IFFAT-NFFAT)
         Y2 = C(2,IFFAT-NFFAT)
         Z2 = C(3,IFFAT-NFFAT)
      END IF
      RA = RFIX(IFFAT)
C
      DO 150 JFFAT=1,NFFAT+NAT
C
C        IF AREA=0, RETURN
C        SKIP DISTANT SPHERES
C
         IF(JFFAT.EQ.IFFAT .OR. RFIX(JFFAT).LT.0.10D+00) GOTO 150
         IF(JFFAT.LE.NFFAT) THEN
            X3 = CORD(1,JFFAT)
            Y3 = CORD(2,JFFAT)
            Z3 = CORD(3,JFFAT)
         END IF
         IF(JFFAT.GT.NFFAT) THEN
            X3 = C(1,JFFAT-NFFAT)
            Y3 = C(2,JFFAT-NFFAT)
            Z3 = C(3,JFFAT-NFFAT)
         END IF
         RB = RFIX(JFFAT)
         IF(ABS(X2-X3).GT.(RA+RB+DISN2)) GOTO 150
         IF(ABS(Y2-Y3).GT.(RA+RB+DISN2)) GOTO 150
         IF(ABS(Z2-Z3).GT.(RA+RB+DISN2)) GOTO 150
         DISC2 = (X2-X3)**2 + (Y2-Y3)**2 + (Z2-Z3)**2
         ONEDISC2 = ONE/DISC2
         IF(DISC2.GE.(RA+RB+DISN2)**2) GOTO 150
         IF(DISC2.LE.(RA-RB)**2 .AND. RB.LT.RA) GOTO 150
         IF(DISC2.LE.(RA-RB)**2 .AND. RB.GT.RA) THEN
            AREA = ZERO
            RETURN
         END IF
         DISC   = SQRT(DISC2)
         ONEDISC= ONE/DISC
         DISC3  = DISC*DISC2
         DIS132 = (X1-X3)**2+(Y1-Y3)**2+(Z1-Z3)**2
         DIS13  = SQRT(DIS132)
C
         DUM = RB*ONEDISC
         X5  = X3 + (X2-X3)*DUM
         Y5  = Y3 + (Y2-Y3)*DUM
         Z5  = Z3 + (Z2-Z3)*DUM
         DISN = SQRT((X1-X5)**2+(Y1-Y5)**2+(Z1-Z5)**2)
         IF(DISN.GE.DISN2 .OR. DISC.LE.RB) THEN
            SWF2   = ONE
            DSWF2X = ZERO
            DSWF2Y = ZERO
            DSWF2Z = ZERO
         ELSE IF (DISN.LE.DISN1) THEN
            AREA   = ZERO
            RETURN
         ELSE
            DUW  = (DISN**2 - DISN1**2)/(DISN2**2-DISN1**2)
            SWF2 = 10.0D+00*DUW**3 - 15.0D+00*DUW**4 + 6.0D+00*DUW**5
            DUM    = RB/DISC3
            DX5DX3 = ONE - RB*ONEDISC + DUM*(X2-X3)*(X2-X3)
            DY5DX3 =                    DUM*(Y2-Y3)*(X2-X3)
            DZ5DX3 =                    DUM*(Z2-Z3)*(X2-X3)
            DX5DY3 =                    DUM*(X2-X3)*(Y2-Y3)
            DY5DY3 = ONE - RB*ONEDISC + DUM*(Y2-Y3)*(Y2-Y3)
            DZ5DY3 =                    DUM*(Z2-Z3)*(Y2-Y3)
            DX5DZ3 =                    DUM*(X2-X3)*(Z2-Z3)
            DY5DZ3 =                    DUM*(Y2-Y3)*(Z2-Z3)
            DZ5DZ3 = ONE - RB*ONEDISC + DUM*(Z2-Z3)*(Z2-Z3)
            DDISN2X=-TWO*((X1-X5)*DX5DX3+(Y1-Y5)*DY5DX3+(Z1-Z5)*DZ5DX3)
            DDISN2Y=-TWO*((X1-X5)*DX5DY3+(Y1-Y5)*DY5DY3+(Z1-Z5)*DZ5DY3)
            DDISN2Z=-TWO*((X1-X5)*DX5DZ3+(Y1-Y5)*DY5DZ3+(Z1-Z5)*DZ5DZ3)
            DUM = (30.0D+00*DUW**2-60.0D+00*DUW**3+30.0D+00*DUW**4)/
     *            (DISN2**2-DISN1**2)
            DSWF2X = DUM*DDISN2X
            DSWF2Y = DUM*DDISN2Y
            DSWF2Z = DUM*DDISN2Z
         END IF
C
C
         IF(DISC.GE.(RA+RB)) THEN
            SWF1   = ONE
            DSWF1X = ZERO
            DSWF1Y = ZERO
            DSWF1Z = ZERO
         ELSE
            DISD = DIS13
            FB =  RA**2 + DISC2 - DISD**2
            FA =  RA**2 + DISC2 - RB**2
            R1 =  RA    + DISC  + DISD
            R2 =  RA    + DISC  - DISD
            R3 =  RA    - DISC  + DISD
            R4 = -RA    + DISC  + DISD
            R5 =  RA    + DISC  + RB
            R6 =  RA    + DISC  - RB
            R7 =  RA    - DISC  + RB
            R8 = -RA    + DISC  + RB
            FAB = SQRT(ABS(R1*R2*R3*R4*R5*R6*R7*R8))
            ONEFAB = ONE/FAB
            DISM = SQRT(ABS(TWO*RA*RA - (FA*FB + FAB)*PT5*ONEDISC2))
            IF(DISM.GE.DISM0) THEN
               IF(DIS13.LT.RB) THEN
                  AREA   = ZERO
                  RETURN
               END IF
               SWF1   = ONE
               DSWF1X = ZERO
               DSWF1Y = ZERO
               DSWF1Z = ZERO
            ELSE
               ONEDISM  = 1.0D+04
               IF(DISM.GT.1.0D-04) ONEDISM  = ONE/DISM
               ONEDISD  = ONE/DISD
               DDDIS    = (DISM-DISM0)*ONEDISM0
               SWF1     = PT5*DDDIS*DDDIS
               IF(DIS13.GE.RB) SWF1 = ONE - SWF1
               CX3 =  (X3-X2)*ONEDISC
               CY3 =  (Y3-Y2)*ONEDISC
               CZ3 =  (Z3-Z2)*ONEDISC
               DX3 =  (X3-X1)*ONEDISD
               DY3 =  (Y3-Y1)*ONEDISD
               DZ3 =  (Z3-Z1)*ONEDISD
               R1X =  CX3 + DX3
               R1Y =  CY3 + DY3
               R1Z =  CZ3 + DZ3
               R2X =  CX3 - DX3
               R2Y =  CY3 - DY3
               R2Z =  CZ3 - DZ3
               R3X = -CX3 + DX3
               R3Y = -CY3 + DY3
               R3Z = -CZ3 + DZ3
               R4X =  CX3 + DX3
               R4Y =  CY3 + DY3
               R4Z =  CZ3 + DZ3
               R5X =  CX3
               R5Y =  CY3
               R5Z =  CZ3
               R6X =  CX3
               R6Y =  CY3
               R6Z =  CZ3
               R7X = -CX3
               R7Y = -CY3
               R7Z = -CZ3
               R8X =  CX3
               R8Y =  CY3
               R8Z =  CZ3
               FABX = (R1X*R2*R3*R4*R5*R6*R7*R8+
     *                 R1*R2X*R3*R4*R5*R6*R7*R8+
     *                 R1*R2*R3X*R4*R5*R6*R7*R8+
     *                 R1*R2*R3*R4X*R5*R6*R7*R8+
     *                 R1*R2*R3*R4*R5X*R6*R7*R8+
     *                 R1*R2*R3*R4*R5*R6X*R7*R8+
     *                 R1*R2*R3*R4*R5*R6*R7X*R8+
     *                 R1*R2*R3*R4*R5*R6*R7*R8X)*ONEFAB*PT5
               FABY = (R1Y*R2*R3*R4*R5*R6*R7*R8+
     *                 R1*R2Y*R3*R4*R5*R6*R7*R8+
     *                 R1*R2*R3Y*R4*R5*R6*R7*R8+
     *                 R1*R2*R3*R4Y*R5*R6*R7*R8+
     *                 R1*R2*R3*R4*R5Y*R6*R7*R8+
     *                 R1*R2*R3*R4*R5*R6Y*R7*R8+
     *                 R1*R2*R3*R4*R5*R6*R7Y*R8+
     *                 R1*R2*R3*R4*R5*R6*R7*R8Y)*ONEFAB*PT5
               FABZ = (R1Z*R2*R3*R4*R5*R6*R7*R8+
     *                 R1*R2Z*R3*R4*R5*R6*R7*R8+
     *                 R1*R2*R3Z*R4*R5*R6*R7*R8+
     *                 R1*R2*R3*R4Z*R5*R6*R7*R8+
     *                 R1*R2*R3*R4*R5Z*R6*R7*R8+
     *                 R1*R2*R3*R4*R5*R6Z*R7*R8+
     *                 R1*R2*R3*R4*R5*R6*R7Z*R8+
     *                 R1*R2*R3*R4*R5*R6*R7*R8Z)*ONEFAB*PT5
               TEMP = (FA*FB + FAB)*ONEDISC2*ONEDISC2
               DDISM2X= (X3-X2)*TEMP
     *                 -((X1-X2)*FA+(X3-X2)*FB)*ONEDISC2
     *                 -FABX*PT5*ONEDISC2
               DDISM2Y= (Y3-Y2)*TEMP
     *                 -((Y1-Y2)*FA+(Y3-Y2)*FB)*ONEDISC2
     *                 -FABY*PT5*ONEDISC2
               DDISM2Z= (Z3-Z2)*TEMP
     *                 -((Z1-Z2)*FA+(Z3-Z2)*FB)*ONEDISC2
     *                 -FABZ*PT5*ONEDISC2
               DUM =    (DISM-DISM0)*ONEDISM0*ONEDISM0
     *                  *PT5*ONEDISM
               IF(DIS13.GE.RB) DUM = -DUM
               DSWF1X = DUM*DDISM2X
               DSWF1Y = DUM*DDISM2Y
               DSWF1Z = DUM*DDISM2Z
               IF(DSWF1X.GT. TEN) DSWF1X =  TEN  ! AVOID SINGULARITY WHEN DISM=0
               IF(DSWF1X.LT.-TEN) DSWF1X = -TEN
               IF(DSWF1Y.GT. TEN) DSWF1Y =  TEN
               IF(DSWF1Y.LT.-TEN) DSWF1Y = -TEN
               IF(DSWF1Z.GT. TEN) DSWF1Z =  TEN
               IF(DSWF1Z.LT.-TEN) DSWF1Z = -TEN
            END IF
         END IF
C
C        - NOTE: LOOP 150 MEANS MULTI-SPHERE SCALING
C                AREA MUST BE SCALED AFTER AREA DERIVATIVES
C
         TMP(1,JFFAT) = AREA*(SWF1*DSWF2X + SWF2*DSWF1X)
         TMP(2,JFFAT) = AREA*(SWF1*DSWF2Y + SWF2*DSWF1Y)
         TMP(3,JFFAT) = AREA*(SWF1*DSWF2Z + SWF2*DSWF1Z)
         IF(JFFAT.GE.2) THEN
            DO KFFAT = 1, JFFAT-1
               TMP(1,KFFAT) = TMP(1,KFFAT)*SWF1*SWF2
               TMP(2,KFFAT) = TMP(2,KFFAT)*SWF1*SWF2
               TMP(3,KFFAT) = TMP(3,KFFAT)*SWF1*SWF2
            ENDDO
         END IF
         AREA = AREA*SWF1*SWF2
         IF(AREA.LT.0.9D-04) THEN   ! 0.9D-04
            AREA = ZERO
            RETURN
         END IF
         DUMMY=ABS(TMP(1,JFFAT))+ABS(TMP(2,JFFAT))+ABS(TMP(3,JFFAT))
         IF(DUMMY.LT.0.9D-05) GOTO 150    ! 0.9D-05
         IDTMPTS(41)  = IDTMPTS(41) + 1
         KKK          = IDTMPTS(41)
         IF(KKK.EQ.39) THEN
            WRITE(*,*)'FIXPVASWF ERROR: IDTMPTS EXCEEDED 40.'
            WRITE(*,*)' '
            CALL ABRT
            STOP
         END IF
         IDTMPTS(KKK) = JFFAT
 150  CONTINUE
C
C
      IDTMPTS(41)  = IDTMPTS(41) + 1
      KKK          = IDTMPTS(41)
      IDTMPTS(KKK) = IFFAT
      DO KFFAT = 1,NFFAT+NAT
         IF(KFFAT.NE.IFFAT) THEN
            TMP(1,IFFAT) = TMP(1,IFFAT) - TMP(1,KFFAT)
            TMP(2,IFFAT) = TMP(2,IFFAT) - TMP(2,KFFAT)
            TMP(3,IFFAT) = TMP(3,IFFAT) - TMP(3,KFFAT)
         END IF
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK FIXDIIS
!>
!> @brief    DIIS for FixSol surface charges
!>
!> @author   Hui Li
!>           - Nov 2011
!>
!> @details  modified from PCM code
!>
      SUBROUTINE FIXDIIS(NFFPAR,NIT,MXDIIS,QOUT,QIN,
     *                   DIMAT,QREP,TMP,TMPMAT,IPVT,NSIZE)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL GOPARR, DSKWRK, MASWRK
C
      PARAMETER (ONE=1.0D+00)
C
      DIMENSION DIMAT(MXDIIS+1,MXDIIS+1),QIN(*),QOUT(*),
     *          QREP(NFFPAR,MXDIIS,2),TMP(MXDIIS+1),
     *          TMPMAT(MXDIIS+1,MXDIIS+1),IPVT(MXDIIS+1)
C
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     ADAPTED BY HUI LI
C     NOV 18, 2011, LINCOLN
C
      NITMAX=MIN(NIT,MXDIIS)
      NIT0=MOD(NIT-1,MXDIIS)+1
C
      IMIN=ME*NFFPAR+1
      IMAX=MIN((ME+1)*NFFPAR,NSIZE)
      NFFME=MAX(0,IMAX-IMIN+1)
C
C     -- STORE THE CHARGES
C        QREP(,,1)=QOUT
C        QREP(,,2)=QOUT-QIN
C
      CALL DCOPY(NFFME,QOUT(IMIN),1,QREP(1,NIT0,1),1)
      CALL DCOPY(NFFME,QOUT(IMIN),1,QREP(1,NIT0,2),1)
      CALL DAXPY(NFFME,-ONE,QIN(IMIN),1,QREP(1,NIT0,2),1)
C
C     -- UPGRADE THE INTERPOLATION MATRIX
C
      IF(NIT.GT.MXDIIS) THEN
         DO I=1,MXDIIS-1
            DO J=1,MXDIIS-1
               DIMAT(I+1,J+1)=DIMAT(I+2,J+2)
            ENDDO
         ENDDO
      END IF
C
      I0=NIT0
      DO I=NITMAX,1,-1
         TMP(I)=DDOT(NFFME,QREP(1,NIT0,2),1,QREP(1,I0,2),1)
         I0=I0-1
         IF(I0.EQ.0) I0=I0+MXDIIS
      ENDDO
      IF(GOPARR) CALL DDI_GSUMF(2452,TMP,NITMAX)
C
      DIMAT(NITMAX+1,1)=-1.0D+00
      DIMAT(1,NITMAX+1)=-1.0D+00
      DO I=NITMAX,1,-1
         DIMAT(NITMAX+1,I+1)=TMP(I)
         DIMAT(I+1,NITMAX+1)=TMP(I)
      ENDDO
C
C     -- AT THE FIRST ITERATION ONLY MATRIX INITIALIZATION
C
      IF (NIT.EQ.1) THEN
         DIMAT(1,1)=0.0D+00
         RETURN
      END IF
C
C     -- VECTOR INITIALIZATION
C
      TMP(1)=-1.0D+00
      CALL VCLR(TMP(2),1,NITMAX)
C
C     -- COPY THE MATRIX (SHOULD BE DESTROYED)
C
      DO I=1,NITMAX+1
         DO J=1,NITMAX+1
            TMPMAT(I,J)=DIMAT(I,J)
         ENDDO
      ENDDO
C
C     -- SOLVE THE LINEAR SYSTEM
C
      CALL DGEFA(TMPMAT,MXDIIS+1,NITMAX+1,IPVT,INFO)
      IF (INFO.NE.0) THEN
         WRITE(*,*) 'ERROR: SINGULAR MATRIX IN FIXDIIS.'
         CALL ABRT
      END IF
      CALL DGESL(TMPMAT,MXDIIS+1,NITMAX+1,IPVT,TMP,0)
C
C     -- INTERPOLATE
C
      CALL VCLR(QOUT,1,NSIZE)
      I0=NIT0
      DO I=NITMAX,1,-1
         CALL DAXPY(NFFME,TMP(I+1),QREP(1,I0,1),1,QOUT(IMIN),1)
         I0=I0-1
         IF(I0.EQ.0) I0=I0+MXDIIS
      ENDDO
      IF(GOPARR) CALL DDI_GSUMF(2452,QOUT,NSIZE)
      RETURN
C
      END
C*MODULE QUANPO  *DECK FIXSOLINT
!>
!> @brief    1-e integral due to MM induced dipoles and surface charges
!>
!> @author   Hui Li
!>           - Dec 2011
!>
!> @details  This must be done in every SCF step
!>
      SUBROUTINE FIXSOLINT(H1,FA,FB,DENTOT,HADD,OLDADD,
     *                     L2,L1,MCITER,NONLSTQ,CORD,
     *                     CHARG,ZANF,AFIX,QFIX,
     *                     VFIX1,VFIX2,XTSFIX,YTSFIX,ZTSFIX,
     *                     RFIX,IDATOM,DAI,IDDAI,
     *                     POL,POLSV,DIP,FIELD1,FIELD2,FIELD3,
     *                     NONLS1,L1213J)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, PT5=0.50D+00,
     *           FOUR=4.0D+00)
C
      DIMENSION H1(L2),FA(L2),FB(L2),DENTOT(L2),HADD(L2),OLDADD(L2),
     *          NONLSTQ(*),IDATOM(*),CORD(3,*),CHARG(*),ZANF(*),
     *          QFIX(*),AFIX(*),XTSFIX(*),YTSFIX(*),ZTSFIX(*),
     *          IDDAI(41,*),DAI(3,40,*),
     *          FIELD1(3,*),FIELD2(3,*),FIELD3(3,*),POL(*),NONLS1(2,*),
     *          L1213J(2,*),DIP(3,*),VFIX1(*),VFIX2(*)
C
      LOGICAL GOPARR,MASWRK,DSKWRK,DIRSCF,FDIFF,DIRDIF
C
      COMMON /CONV  / ACURCY,ENUCR,AJUNK(3),DIFF,ITER,ICALCP,ICBET
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FMCOM / XX(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /OPTSCF/ DIRSCF,FDIFF
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RHF,GVB/8HRHF     ,8HGVB     /
      DATA RMC/8HMCSCF   /
C
C     - FIXPVA SOLVATION MODEL (FIXSOL) FOR QM/MM(POL) -
C     HUI LI, DEC 12, 2011, LINCOLN
C
      ENPOL    = ZERO
      ENFIXSO  = ZERO
      XENPOL   = ZERO
      XENRXN   = ZERO
      IF(IFIXSOL.EQ.0) RETURN
C
C     CAUTION, GVB ITERATIONS START AT 1, BUT RHF,UHF,ROHF AT 0!
C
      IFIRST = 0
      IF(SCFTYP.NE.GVB) IFIRST=1
      IF(SCFTYP.EQ.RMC) THEN
         IFIRST=2
         ITER=MCITER
      END IF
      DIRDIF = DIRSCF  .AND.  FDIFF  .AND.  SCFTYP.NE.GVB
C
      IF(ITER.EQ.IFIRST) THEN
         CALL FIXTES(CORD,ZANF,XTSFIX,YTSFIX,ZTSFIX,
     *               AFIX,IDATOM,RFIX,DAI,IDDAI,
     *               XX(LFFDAIT),XX(LFFIDTMP),XX(LFFTMPTS),
     *               XX(LFFLISTQM))
C        - VFIX1: POTENTIAL AT SURFACE DUE TO QM NUC AND MM CHG
         CALL VCLR(VFIX1,1,NFFTS)
         IPCOUNT = ME - 1
         DO 100 IFFTS=1, NFFTS
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 100
            END IF
            DO JAT=1,NAT
               R2 =  (XTSFIX(IFFTS)-C(1,JAT))**2
     *              +(YTSFIX(IFFTS)-C(2,JAT))**2
     *              +(ZTSFIX(IFFTS)-C(3,JAT))**2
               R  = SQRT(R2)
               VFIX1(IFFTS) = VFIX1(IFFTS)+ZAN(JAT)/R
            ENDDO
            DO JFFAT=1,NFFAT
               R2 =  (XTSFIX(IFFTS) - CORD(1,JFFAT))**2
     *              +(YTSFIX(IFFTS) - CORD(2,JFFAT))**2
     *              +(ZTSFIX(IFFTS) - CORD(3,JFFAT))**2
               R  = SQRT(R2)
               VFIX1(IFFTS) = VFIX1(IFFTS)+CHARG(JFFAT)/R
            ENDDO
 100     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2405,VFIX1,NFFTS)
         CALL VCLR(QFIX,1,NFFTS)
         CALL VCLR(DIP,1,3*NFFAT)
      END IF
C
      IF(NTSATM.EQ. 60) DISM0 = 0.4000D+00*TOBOHR
      IF(NTSATM.EQ.240) DISM0 = 0.2000D+00*TOBOHR
      IF(NTSATM.EQ.960) DISM0 = 0.1000D+00*TOBOHR
      FACTOR  = ONE/SQRT(FOUR*PI)/1.07D+00
      SCALE   = (FIXEPS - ONE)/FIXEPS
      NFFPAR  = (NFFTS-1)/NPROC+1
C
      MXDIIS  = 200   
      MXDII1  = MXDIIS  +   1
      CALL VALFM(LOADFM)
      LQFIXX  = LOADFM  +   1
      LDIMAT1 = LQFIXX  +   NFFTS
      LQREP1  = LDIMAT1 +   MXDII1*MXDII1
      LTMP11  = LQREP1  + 2*NFFTS *MXDII1
      LTMP12  = LTMP11  +   MXDII1
      LIPVT1  = LTMP12  +   MXDII1*MXDII1
      LXEFI   = LIPVT1  +   MXDII1
      LYEFI   = LXEFI   +   L2
      LZEFI   = LYEFI   +   L2
      LABFLD  = LZEFI   +   L2
      LABPOT  = LABFLD  + 3*NFFAT
      LSCR    = LABPOT  +   NFFTS
      LAST    = LSCR    +   L2
      NEED    = LAST    -   LOADFM
      CALL GETFM(NEED)
C
C
C     -- VFIX1: POTENTIAL AT NFFTS DUE TO QM NUC AND MM CHARGES --
C               ALREADY DONE ABOVE
C     -- VFIX1: POTENTIAL AT NFFTS DUE TO QM ELECTRONS --
C               MUST REMOVE ELECTRONIC TERM BELOW
C
      CALL VCLR (XX(LABPOT),1,NFFTS)
      CALL EPOTEN(-ONE,XTSFIX,YTSFIX,ZTSFIX,XX(LABPOT),DENTOT,NFFTS,L2)
      IF(GOPARR) CALL DDI_GSUMF(2668,XX(LABPOT),NFFTS)
      CALL VADD(XX(LABPOT),1,VFIX1,1,VFIX1,1,NFFTS)
C
C     -- FIELD1: FIELD AT POL DUE TO QM NUC AND MM CHARGES --
C                ALREADY DONE IN 1-E INTEGRAL
C     -- FIELD1: FIELD AT POL DUE TO ELECTRONS --
C                MUST REMOVE ELECTRONIC TERM BELOW
C
      IF(IDOPOL.EQ.0) THEN
         CALL VCLR(XX(LABFLD),1,3*NFFAT)
         CALL VCLR(DIP   ,1,3*NFFAT)
         GOTO 201
      END IF
C
      CALL VCLR(XX(LABFLD),1,3*NFFAT)
      IPCOUNT = ME - 1
      DO 200 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         IF(POL(IFFAT).EQ.ZERO) GOTO 200
         CALL QMMMPOLFLDINT(IFFAT,CORD,
     *             XX(LXEFI),XX(LYEFI),XX(LZEFI),L2)
         XX(LABFLD+3*(IFFAT-1)  )=TRACEP(DENTOT,XX(LXEFI),L1)
         XX(LABFLD+3*(IFFAT-1)+1)=TRACEP(DENTOT,XX(LYEFI),L1)
         XX(LABFLD+3*(IFFAT-1)+2)=TRACEP(DENTOT,XX(LZEFI),L1)
 200  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(668,XX(LABFLD),3*NFFAT)
 201  CONTINUE
      CALL VADD(XX(LABFLD),1,FIELD1,1,FIELD1,1,3*NFFAT)
C
C
C     -- DETERMINE FIXSOL SURFACE CHARGES --
C
      NCYCLE = 0 
 300  CONTINUE
      NCYCLE = NCYCLE + 1
C
C     -- VFIX2: POTENTIAL AT NFFTS DUE TO SURFACE CHARGES --
      CALL VCLR(VFIX2,1,NFFTS)
      IPCOUNT = ME - 1
      DO 315 I = 1, NFFTS
         IF(AFIX(I).EQ.ZERO) GOTO 315
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 315
         END IF
         DO 320 J = I+1, NFFTS
            IF(AFIX(J).EQ.ZERO) GOTO 320
            X   = XTSFIX(I) - XTSFIX(J)
            Y   = YTSFIX(I) - YTSFIX(J)
            Z   = ZTSFIX(I) - ZTSFIX(J)
            R2  = X*X+Y*Y+Z*Z
            R   = SQRT(R2)
            IF(R.GT.DISM0) THEN
               VFIX2(I)=VFIX2(I) + QFIX(J)/R
               VFIX2(J)=VFIX2(J) + QFIX(I)/R
            ELSE
               DUM = 1.5D+00/DISM0 - PT5*R2/DISM0**3
               VFIX2(I)=VFIX2(I) + QFIX(J)*DUM
               VFIX2(J)=VFIX2(J) + QFIX(I)*DUM
            END IF
 320     CONTINUE
 315  CONTINUE
      IF(IDOPOL.EQ.0) GOTO 380
C
C     -- FIELD2: FIELD AT POL DUE TO FIXSOL SURFACE CHARGES
      CALL VCLR(FIELD2,1,3*NFFAT)
      IPCOUNT = ME - 1
      DO 360 IFFAT=1,NFFAT
         XI = CORD(1,IFFAT)
         YI = CORD(2,IFFAT)
         ZI = CORD(3,IFFAT)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 360
         END IF
         DO 365 JFFTS=1, NFFTS
            XJ   = XTSFIX(JFFTS)
            YJ   = YTSFIX(JFFTS)
            ZJ   = ZTSFIX(JFFTS)
            QJ   = QFIX(JFFTS)*SCALE
            X    = XI - XJ
            Y    = YI - YJ
            Z    = ZI - ZJ
            R2   = X*X + Y*Y + Z*Z
            ONER2= ONE/R2
            ONER = SQRT(ONER2)
            ONER3= ONER2*ONER
            DUM  = QJ*ONER3
            FIELD2(1,IFFAT)=FIELD2(1,IFFAT)+DUM*X
            FIELD2(2,IFFAT)=FIELD2(2,IFFAT)+DUM*Y
            FIELD2(3,IFFAT)=FIELD2(3,IFFAT)+DUM*Z
 365     CONTINUE
 360  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2406,FIELD2,3*NFFAT)
C
C     -- UPDATE POL --
      CALL GETDIP(CORD,POL,POLSV,DIP,FIELD1,FIELD2,
     *            FIELD3,NONLS1,L1213J)
C
C     -- VFIX2: POTENTIAL AT NFFTS DUE TO MM POL --
      IPCOUNT = ME - 1
      DO 370 I = 1, NFFTS
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 370
         END IF
         XI     = XTSFIX(I)
         YI     = YTSFIX(I)
         ZI     = ZTSFIX(I)
         DO 375 JFFAT = 1, NFFAT
            XJ    = CORD(1,JFFAT)
            YJ    = CORD(2,JFFAT)
            ZJ    = CORD(3,JFFAT)
            DIPJX = DIP(1,JFFAT)
            DIPJY = DIP(2,JFFAT)
            DIPJZ = DIP(3,JFFAT)
            X     = XI - XJ
            Y     = YI - YJ
            Z     = ZI - ZJ
            R2    = X*X + Y*Y + Z*Z
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            VFIX2(I)=VFIX2(I) +
     *                  (DIPJX*X+DIPJY*Y+DIPJZ*Z)*ONER3
 375     CONTINUE
 370  CONTINUE
 380  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(2408,VFIX2,NFFTS)
      DO I = 1, NFFTS
         XX(LQFIXX+I-1) = -FACTOR*SQRT(AFIX(I))*
     *                     (VFIX1(I) + VFIX2(I))
      ENDDO
C
      DIFFS = ZERO
      DO I = 1, NFFTS
         DIFFS=DIFFS + ABS(QFIX(I)-XX(LQFIXX+I-1))
      ENDDO
      IF(DIFFS.GT.(NFFTS*FIXTOL).AND.NCYCLE.LT.200) THEN
         CALL FIXDIIS(NFFPAR,NCYCLE,MXDIIS,XX(LQFIXX),QFIX,
     *                XX(LDIMAT1),XX(LQREP1),XX(LTMP11),
     *                XX(LTMP12),XX(LIPVT1),NFFTS)
         CALL DCOPY(NFFTS,XX(LQFIXX),1,QFIX,1)
         GOTO 300
      END IF
C
C     -- FIXSOL CONVERGED --
C
      CALL DSCAL(NFFTS,SCALE,QFIX,1)
      FIXQ = ZERO
      DO I = 1, NFFTS
         FIXQ=FIXQ + QFIX(I)
      ENDDO
C
C     -- COMPUTE POLARIZATION ENERGY CORRECTION --
C        NOTE BY HUI LI:
C        ENPOL   = -(1/2)*FIELD*DIPOLE
C                = -(1/2)*(F_NUC + F_MM + F_ELE)*DIPOLE
C        ENFIXSO =  (1/2)*POTENTIAL*ASC
C                =  (1/2)*(V_NUC + V_MM + V_ELE)*ASC
C        HOWEVER, A FULL TERM OF [-(1.0)*F_ELE*DIPOLE] 
C        AND A FULL TERM OF      [(1.0)*V_ELE*ASC]     ARE INCLUDED IN
C        THE SCF ENERGY VIA 1-E INTEGRALS, SO WE NEED TO REMOVE IT:
C             XENPOL =  (F_ELE)*DIPOLE
C             XENRXN = -(V_ELE)*ASC
C
      ENPOL    = ZERO
      ENFIXSO  = ZERO
      DO IFFAT = 1, NFFAT
         ENPOL = ENPOL - FIELD1(1,IFFAT)*DIP(1,IFFAT)
     *                 - FIELD1(2,IFFAT)*DIP(2,IFFAT)
     *                 - FIELD1(3,IFFAT)*DIP(3,IFFAT)
      ENDDO
      DO I = 1, NFFTS
         ENFIXSO = ENFIXSO + VFIX1(I)*QFIX(I)
      ENDDO
      ENPOL    = PT5*ENPOL
      ENFIXSO  = PT5*ENFIXSO
C
      XENPOL   = ZERO
      XENRXN   = ZERO
      DO IFFAT=1,NFFAT
         FLDX   = XX(LABFLD+3*(IFFAT-1)  )
         FLDY   = XX(LABFLD+3*(IFFAT-1)+1)
         FLDZ   = XX(LABFLD+3*(IFFAT-1)+2)
         XENPOL = XENPOL + (FLDX*DIP(1,IFFAT)
     *                   +  FLDY*DIP(2,IFFAT)
     *                   +  FLDZ*DIP(3,IFFAT))
      ENDDO
      DO I=1,NFFTS
         XENRXN = XENRXN - XX(LABPOT+I-1)*QFIX(I)
      ENDDO
C
      CALL VSUB(XX(LABFLD),1,FIELD1,1,FIELD1,1,3*NFFAT)
      CALL VSUB(XX(LABPOT),1,VFIX1,1,VFIX1,1,NFFTS)
C
C     -- CALCULATE INTEGRALS --
C
      IF(GOPARR) THEN
         IF(.NOT.DIRDIF) CALL DSCAL(L2,ONE/NPROC,H1,1)
      END IF
      IF(DIRDIF) CALL VCLR(HADD,1,L2)
C
      IF(IDOPOL.EQ.0) GOTO 701
      IPCOUNT = ME - 1
      DO 700 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 700
         END IF
         IF(POL(IFFAT).EQ.ZERO) GOTO 700
         CALL QMMMPOLFLDINT(IFFAT,XX(LFFCORD),
     *             XX(LXEFI),XX(LYEFI),XX(LZEFI),L2)
         IF(DIRDIF) THEN
            DO K=1,L2
               HADD(K)=HADD(K)
     *                -XX(LXEFI+K-1)*DIP(1,IFFAT)
     *                -XX(LYEFI+K-1)*DIP(2,IFFAT)
     *                -XX(LZEFI+K-1)*DIP(3,IFFAT)
            ENDDO
         ELSE
            DO K=1,L2
               H1(K)=H1(K)
     *                -XX(LXEFI+K-1)*DIP(1,IFFAT)
     *                -XX(LYEFI+K-1)*DIP(2,IFFAT)
     *                -XX(LZEFI+K-1)*DIP(3,IFFAT)
            ENDDO
         END IF
 700  CONTINUE
 701  CONTINUE
C
      IPCOUNT = ME - 1
      DO 720 I=1,NFFTS
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 720
         END IF
         CALL INTMEP(XX(LSCR),XTSFIX(I),YTSFIX(I),ZTSFIX(I))
         IF(DIRDIF) THEN
            DO K=1,L2
               HADD(K)= HADD(K)-XX(LSCR+K-1)*QFIX(I)
            ENDDO
         ELSE
            DO K=1,L2
               H1(K)  = H1(K)-XX(LSCR+K-1)*QFIX(I)
            ENDDO
        END IF
 720  CONTINUE
C
      IF(GOPARR) THEN
         IF(DIRDIF) THEN
            CALL DDI_GSUMF(686,HADD,L2)
         ELSE
            CALL DDI_GSUMF(687, H1,L2)
         END IF
      END IF
C
C     ----- ADD DIFFERENCE IN PERTURBATION WHEN DIRSCF AND FDIFF -----
C
      IF(SCFTYP.EQ.RHF) THEN
         IF(DIRSCF  .AND.  FDIFF) THEN
            IF(ITER.EQ.1) CALL VCLR(OLDADD,1,L2)
            CALL VADD(  H1,1, HADD,1,  H1,1,L2)
            CALL VSUB(OLDADD,1, HADD,1,OLDADD,1,L2)
            CALL VADD(  FA,1,OLDADD,1,  FA,1,L2)
            CALL DCOPY(L2,HADD,1,OLDADD,1)
         END IF
      ELSE
         IF(DIRDIF) THEN
            IF(ITER .EQ. 1) CALL VCLR(OLDADD,1,L2)
            CALL VADD(  H1,1, HADD,1,  H1,1,L2)
            CALL VSUB(OLDADD,1, HADD,1,OLDADD,1,L2)
            CALL VADD(  FA,1,OLDADD,1,  FA,1,L2)
            CALL VADD(  FB,1,OLDADD,1,  FB,1,L2)
            CALL DCOPY(L2,HADD,1,OLDADD,1)
         END IF
      END IF
C
C     --- FOR MCSCF/GVB H1 MUST BE WRITTEN TO DAF ---
C
      CALL DAWRIT(IDAF,IODA,H1,L2,80,0)
      IF (SCFTYP.EQ.GVB .OR. SCFTYP.EQ.RMC) THEN
         CALL DAWRIT(IDAF,IODA,H1,L2,11,0)
      END IF
C
      CALL RETFM(NEED)
      RETURN
C
      END
C*MODULE QUANPO  *DECK FIXSOLINT2
!>
!> @brief    1-e integral due to MM induced dipoles and surface charges
!>
!> @author   Hui Li
!>           - Dec 2011
!>
!> @details  dipoles and surface charges induced by MP2 and TDDFT densities
!>
      SUBROUTINE FIXSOLINT2(H1,DENTOT,
     *                      L2,L1,NONLSTQ,CORD,
     *                      AFIX,VFIX2,XTSFIX,
     *                      YTSFIX,ZTSFIX,POL,POLSV,
     *                      DIPTMP,FIELD2,FIELD3,
     *                      NONLS1,L1213J)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, PT5=0.50D+00,
     *           FOUR=4.0D+00)
C
      DIMENSION H1(L2),DENTOT(L2),
     *          NONLSTQ(*),CORD(3,*),
     *          AFIX(*),XTSFIX(*),YTSFIX(*),ZTSFIX(*),
     *          FIELD2(3,*),FIELD3(3,*),POL(*),NONLS1(2,*),
     *          L1213J(2,*),DIPTMP(3,*),VFIX2(*)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FMCOM / XX(1)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C     - FIXPVA SOLVATION MODEL (FIXSOL) INTEGRALS FOR MP2 AND TDDFT -
C     HUI LI, DEC 13, 2011, LINCOLN
C
C
      IF(NTSATM.EQ. 60) DISM0 = 0.4000D+00*TOBOHR
      IF(NTSATM.EQ.240) DISM0 = 0.2000D+00*TOBOHR
      IF(NTSATM.EQ.960) DISM0 = 0.1000D+00*TOBOHR
      FACTOR  = ONE/SQRT(FOUR*PI)/1.07D+00
      SCALE   = (FIXEPS - ONE)/FIXEPS
      NFFPAR  = (NFFTS-1)/NPROC+1
C
      MXDIIS  = 200   
      MXDII1  = MXDIIS  +   1
      CALL VALFM(LOADFM)
      LQFIXX  = LOADFM  +   1
      LQTMP   = LQFIXX  +   NFFTS
      LDIMAT1 = LQTMP   +   NFFTS
      LQREP1  = LDIMAT1 +   MXDII1*MXDII1
      LTMP11  = LQREP1  + 2*NFFTS *MXDII1
      LTMP12  = LTMP11  +   MXDII1
      LIPVT1  = LTMP12  +   MXDII1*MXDII1
      LXEFI   = LIPVT1  +   MXDII1
      LYEFI   = LXEFI   +   L2
      LZEFI   = LYEFI   +   L2
      LABFLD  = LZEFI   +   L2
      LABPOT  = LABFLD  + 3*NFFAT
      LSCR    = LABPOT  +   NFFTS
      LAST    = LSCR    +   L2
      NEED    = LAST    -   LOADFM
      CALL GETFM(NEED)
C
C     -- LABPOT: POTENTIAL AT NFFTS DUE TO DENTOT --
C
      CALL VCLR (XX(LABPOT),1,NFFTS)
      CALL EPOTEN(-ONE,XTSFIX,YTSFIX,ZTSFIX,XX(LABPOT),DENTOT,NFFTS,L2)
      IF(GOPARR) CALL DDI_GSUMF(2668,XX(LABPOT),NFFTS)
C
C     -- LABFLD: FIELD AT POL DUE TO DENTOT --
C
      IF(IDOPOL.EQ.0) THEN
         CALL VCLR(XX(LABFLD),1,3*NFFAT)
         GOTO 201
      END IF
C
      CALL VCLR(XX(LABFLD),1,3*NFFAT)
      IPCOUNT = ME - 1
      DO 200 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         IF(POL(IFFAT).EQ.ZERO) GOTO 200
         CALL QMMMPOLFLDINT(IFFAT,CORD,
     *             XX(LXEFI),XX(LYEFI),XX(LZEFI),L2)
         XX(LABFLD+3*(IFFAT-1)  )=TRACEP(DENTOT,XX(LXEFI),L1)
         XX(LABFLD+3*(IFFAT-1)+1)=TRACEP(DENTOT,XX(LYEFI),L1)
         XX(LABFLD+3*(IFFAT-1)+2)=TRACEP(DENTOT,XX(LZEFI),L1)
 200  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(668,XX(LABFLD),3*NFFAT)
 201  CONTINUE
C
C
C     -- DETERMINE FIXSOL SURFACE CHARGES --
C
      CALL VCLR(XX(LQTMP),1,NFFTS)
      CALL VCLR(DIPTMP,1,3*NFFAT)
C
      NCYCLE = 0 
 300  CONTINUE
      NCYCLE = NCYCLE + 1
C
C     -- VFIX2: POTENTIAL AT NFFTS DUE TO SURFACE CHARGES --
      CALL VCLR(VFIX2,1,NFFTS)
      IPCOUNT = ME - 1
      DO 315 I = 1, NFFTS
         IF(AFIX(I).EQ.ZERO) GOTO 315
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 315
         END IF
         DO 320 J = I+1, NFFTS
            IF(AFIX(J).EQ.ZERO) GOTO 320
            X   = XTSFIX(I) - XTSFIX(J)
            Y   = YTSFIX(I) - YTSFIX(J)
            Z   = ZTSFIX(I) - ZTSFIX(J)
            R2  = X*X+Y*Y+Z*Z
            R   = SQRT(R2)
            IF(R.GT.DISM0) THEN
               VFIX2(I)=VFIX2(I) + XX(LQTMP+J-1)/R
               VFIX2(J)=VFIX2(J) + XX(LQTMP+I-1)/R
            ELSE
               DUM = 1.5D+00/DISM0 - PT5*R2/DISM0**3
               VFIX2(I)=VFIX2(I) + XX(LQTMP+J-1)*DUM
               VFIX2(J)=VFIX2(J) + XX(LQTMP+I-1)*DUM
            END IF
 320     CONTINUE
 315  CONTINUE
      IF(IDOPOL.EQ.0) GOTO 380
C
C     -- FIELD2: FIELD AT POL DUE TO FIXSOL SURFACE CHARGES
      CALL VCLR(FIELD2,1,3*NFFAT)
      IPCOUNT = ME - 1
      DO 360 IFFAT=1,NFFAT
         XI = CORD(1,IFFAT)
         YI = CORD(2,IFFAT)
         ZI = CORD(3,IFFAT)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 360
         END IF
         DO 365 JFFTS=1, NFFTS
            XJ   = XTSFIX(JFFTS)
            YJ   = YTSFIX(JFFTS)
            ZJ   = ZTSFIX(JFFTS)
            QJ   = XX(LQTMP+JFFTS-1)*SCALE
            X    = XI - XJ
            Y    = YI - YJ
            Z    = ZI - ZJ
            R2   = X*X + Y*Y + Z*Z
            ONER2= ONE/R2
            ONER = SQRT(ONER2)
            ONER3= ONER2*ONER
            DUM  = QJ*ONER3
            FIELD2(1,IFFAT)=FIELD2(1,IFFAT)+DUM*X
            FIELD2(2,IFFAT)=FIELD2(2,IFFAT)+DUM*Y
            FIELD2(3,IFFAT)=FIELD2(3,IFFAT)+DUM*Z
 365     CONTINUE
 360  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2406,FIELD2,3*NFFAT)
C
C     -- UPDATE POL --
      CALL GETDIP(CORD,POL,POLSV,DIPTMP,XX(LABFLD),FIELD2,
     *            FIELD3,NONLS1,L1213J)
C
C     -- VFIX2: POTENTIAL AT NFFTS DUE TO MM POL --
      IPCOUNT = ME - 1
      DO 370 I = 1, NFFTS
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 370
         END IF
         XI     = XTSFIX(I)
         YI     = YTSFIX(I)
         ZI     = ZTSFIX(I)
         DO 375 JFFAT = 1, NFFAT
            XJ    = CORD(1,JFFAT)
            YJ    = CORD(2,JFFAT)
            ZJ    = CORD(3,JFFAT)
            DIPJX = DIPTMP(1,JFFAT)
            DIPJY = DIPTMP(2,JFFAT)
            DIPJZ = DIPTMP(3,JFFAT)
            X     = XI - XJ
            Y     = YI - YJ
            Z     = ZI - ZJ
            R2    = X*X + Y*Y + Z*Z
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            VFIX2(I)=VFIX2(I) +
     *                  (DIPJX*X+DIPJY*Y+DIPJZ*Z)*ONER3
 375     CONTINUE
 370  CONTINUE
 380  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(2408,VFIX2,NFFTS)
      DO I = 1, NFFTS
         XX(LQFIXX+I-1) = -FACTOR*SQRT(AFIX(I))*
     *                     (XX(LABPOT+I-1) + VFIX2(I))
      ENDDO
C
      DIFFS = ZERO
      DO I = 1, NFFTS
         DIFFS=DIFFS + ABS(XX(LQTMP+I-1)-XX(LQFIXX+I-1))
      ENDDO
      IF(DIFFS.GT.(NFFTS*FIXTOL).AND.NCYCLE.LT.200) THEN
         CALL FIXDIIS(NFFPAR,NCYCLE,MXDIIS,XX(LQFIXX),XX(LQTMP),
     *                XX(LDIMAT1),XX(LQREP1),XX(LTMP11),
     *                XX(LTMP12),XX(LIPVT1),NFFTS)
         CALL DCOPY(NFFTS,XX(LQFIXX),1,XX(LQTMP),1)
         GOTO 300
      END IF
C
C     -- FIXSOL CONVERGED --
C
      CALL DSCAL(NFFTS,SCALE,XX(LQTMP),1)
C
C     -- CALCULATE INTEGRALS --
C
      IF(GOPARR) CALL DSCAL(L2,ONE/NPROC,H1,1)
      FAGTOR=1.0D+00
      IF(TDDFTYP.NE.RNONE) FAGTOR=2.0D+00
C
      IF(IDOPOL.EQ.0) GOTO 701
      IPCOUNT = ME - 1
      DO 700 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 700
         END IF
         IF(POL(IFFAT).EQ.ZERO) GOTO 700
         CALL QMMMPOLFLDINT(IFFAT,XX(LFFCORD),
     *             XX(LXEFI),XX(LYEFI),XX(LZEFI),L2)
         DO K=1,L2
            H1(K)=H1(K) - XX(LXEFI+K-1)*DIPTMP(1,IFFAT)*FAGTOR
     *                  - XX(LYEFI+K-1)*DIPTMP(2,IFFAT)*FAGTOR
     *                  - XX(LZEFI+K-1)*DIPTMP(3,IFFAT)*FAGTOR
         ENDDO
 700  CONTINUE
 701  CONTINUE
C
      IPCOUNT = ME - 1
      DO 720 I=1,NFFTS
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 720
         END IF
         CALL INTMEP(XX(LSCR),XTSFIX(I),YTSFIX(I),ZTSFIX(I))
         DO K=1,L2
            H1(K)  = H1(K)-XX(LSCR+K-1)*XX(LQTMP+I-1)*FAGTOR
         ENDDO
 720  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(687, H1,L2)
C
      CALL RETFM(NEED)
      RETURN
C
      END
C*MODULE QUANPO  *DECK FFMP2DIP2
!>
!> @brief    MP2 solvation energy
!>
!> @author   Hui Li
!>           - Dec 2011
!>
!> @details  the P(2) corrected solvation energy, no gradient
!>
      SUBROUTINE FFMP2DIP2(L2,L1,NONLSTQ,CORD,
     *                     AFIX,VFIX2,
     *                     XTSFIX,YTSFIX,ZTSFIX,
     *                     POL,POLSV,DIPTMP,FIELD2,FIELD3,
     *                     NONLS1,L1213J)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, PT5=0.50D+00,
     *           FOUR=4.0D+00)
C
      DIMENSION NONLSTQ(*),CORD(3,*),
     *          AFIX(*),XTSFIX(*),YTSFIX(*),ZTSFIX(*),
     *          FIELD2(3,*),FIELD3(3,*),POL(*),NONLS1(2,*),
     *          L1213J(2,*),DIPTMP(3,*),VFIX2(*)
C
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FMCOM / XX(1)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA ROHF,UHF,RHF/8HROHF    ,8HUHF     ,8HRHF     /
C
C     HUI LI, DEC 14, 2011, LINCOLN
C
      IF(NTSATM.EQ. 60) DISM0 = 0.4000D+00*TOBOHR
      IF(NTSATM.EQ.240) DISM0 = 0.2000D+00*TOBOHR
      IF(NTSATM.EQ.960) DISM0 = 0.1000D+00*TOBOHR
      FACTOR  = ONE/SQRT(FOUR*PI)/1.07D+00
      SCALE   = (FIXEPS - ONE)/FIXEPS
      NFFPAR  = (NFFTS-1)/NPROC+1
C
      MXDIIS  = 200   
      MXDII1  = MXDIIS  +   1
      CALL VALFM(LOADFM)
      LQTMP   = LOADFM  +   1
      LQFIXX  = LQTMP   +   NFFTS
      LDIMAT1 = LQFIXX  +   NFFTS
      LQREP1  = LDIMAT1 +   MXDII1*MXDII1
      LTMP11  = LQREP1  + 2*NFFTS *MXDII1
      LTMP12  = LTMP11  +   MXDII1
      LIPVT1  = LTMP12  +   MXDII1*MXDII1
      LXEFI   = LIPVT1  +   MXDII1
      LYEFI   = LXEFI   +   L2
      LZEFI   = LYEFI   +   L2
      LABFLD  = LZEFI   +   L2
      LABPOT  = LABFLD  + 3*NFFAT
      LMP     = LABPOT  +   NFFTS
      LAST    = LMP     +   L2
      NEED    = LAST    -   LOADFM
      CALL GETFM(NEED)
C
      IF(SCFTYP.EQ.UHF) THEN
C        - BORROW LXEFI AND LYEFI FOR 0.001 SECONDS
         CALL DAREAD(IDAF,IODA,XX(LXEFI),L2,417,0)
         CALL DAREAD(IDAF,IODA,XX(LYEFI),L2,427,0)
         CALL VADD(XX(LXEFI),1,XX(LYEFI),1,XX(LMP),1,L2)
      ELSE IF(SCFTYP.EQ.RHF .OR. SCFTYP.EQ.ROHF) THEN
         KREC7 = 307
         CALL DAREAD(IDAF,IODA,XX(LMP),L2,KREC7,0)
      END IF
C
C     -- LABPOT: POTENTIAL AT NFFTS DUE TO P(2) --
C
      CALL VCLR (XX(LABPOT),1,NFFTS)
      CALL EPOTEN(-ONE,XTSFIX,YTSFIX,ZTSFIX,
     *            XX(LABPOT),XX(LMP),NFFTS,L2)
      IF(GOPARR) CALL DDI_GSUMF(2668,XX(LABPOT),NFFTS)
C
C     -- LABFLD: FIELD AT POL DUE TO P(2) --
C
      IF(IDOPOL.EQ.0) THEN
         CALL VCLR(XX(LABFLD),1,3*NFFAT)
         GOTO 201
      END IF
C
      CALL VCLR(XX(LABFLD),1,3*NFFAT)
      IPCOUNT = ME - 1
      DO 200 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         IF(POL(IFFAT).EQ.ZERO) GOTO 200
         CALL QMMMPOLFLDINT(IFFAT,CORD,
     *             XX(LXEFI),XX(LYEFI),XX(LZEFI),L2)
         XX(LABFLD+3*(IFFAT-1)  )=TRACEP(XX(LMP),XX(LXEFI),L1)
         XX(LABFLD+3*(IFFAT-1)+1)=TRACEP(XX(LMP),XX(LYEFI),L1)
         XX(LABFLD+3*(IFFAT-1)+2)=TRACEP(XX(LMP),XX(LZEFI),L1)
 200  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(668,XX(LABFLD),3*NFFAT)
 201  CONTINUE
C
C
C     -- DETERMINE FIXSOL SURFACE CHARGES --
C
      CALL VCLR(XX(LQTMP),1,NFFTS)
      CALL VCLR(DIPTMP,1,3*NFFAT)
C
      NCYCLE = 0 
 300  CONTINUE
      NCYCLE = NCYCLE + 1
C
C     -- VFIX2: POTENTIAL AT NFFTS DUE TO SURFACE CHARGES --
      CALL VCLR(VFIX2,1,NFFTS)
      IPCOUNT = ME - 1
      DO 315 I = 1, NFFTS
         IF(AFIX(I).EQ.ZERO) GOTO 315
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 315
         END IF
         DO 320 J = I+1, NFFTS
            IF(AFIX(J).EQ.ZERO) GOTO 320
            X   = XTSFIX(I) - XTSFIX(J)
            Y   = YTSFIX(I) - YTSFIX(J)
            Z   = ZTSFIX(I) - ZTSFIX(J)
            R2  = X*X+Y*Y+Z*Z
            R   = SQRT(R2)
            IF(R.GT.DISM0) THEN
               VFIX2(I)=VFIX2(I) + XX(LQTMP+J-1)/R
               VFIX2(J)=VFIX2(J) + XX(LQTMP+I-1)/R
            ELSE
               DUM = 1.5D+00/DISM0 - PT5*R2/DISM0**3
               VFIX2(I)=VFIX2(I) + XX(LQTMP+J-1)*DUM
               VFIX2(J)=VFIX2(J) + XX(LQTMP+I-1)*DUM
            END IF
 320     CONTINUE
 315  CONTINUE
      IF(IDOPOL.EQ.0) GOTO 380
C
C     -- FIELD2: FIELD AT POL DUE TO FIXSOL SURFACE CHARGES
      CALL VCLR(FIELD2,1,3*NFFAT)
      IPCOUNT = ME - 1
      DO 360 IFFAT=1,NFFAT
         XI = CORD(1,IFFAT)
         YI = CORD(2,IFFAT)
         ZI = CORD(3,IFFAT)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 360
         END IF
         DO 365 JFFTS=1, NFFTS
            XJ   = XTSFIX(JFFTS)
            YJ   = YTSFIX(JFFTS)
            ZJ   = ZTSFIX(JFFTS)
            QJ   = XX(LQTMP+JFFTS-1)*SCALE
            X    = XI - XJ
            Y    = YI - YJ
            Z    = ZI - ZJ
            R2   = X*X + Y*Y + Z*Z
            ONER2= ONE/R2
            ONER = SQRT(ONER2)
            ONER3= ONER2*ONER
            DUM  = QJ*ONER3
            FIELD2(1,IFFAT)=FIELD2(1,IFFAT)+DUM*X
            FIELD2(2,IFFAT)=FIELD2(2,IFFAT)+DUM*Y
            FIELD2(3,IFFAT)=FIELD2(3,IFFAT)+DUM*Z
 365     CONTINUE
 360  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2406,FIELD2,3*NFFAT)
C
C     -- UPDATE POL --
      CALL GETDIP(CORD,POL,POLSV,DIPTMP,XX(LABFLD),
     *            FIELD2,FIELD3,NONLS1,L1213J)
C
C     -- VFIX2: POTENTIAL AT NFFTS DUE TO MM POL --
      IPCOUNT = ME - 1
      DO 370 I = 1, NFFTS
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 370
         END IF
         XI     = XTSFIX(I)
         YI     = YTSFIX(I)
         ZI     = ZTSFIX(I)
         DO 375 JFFAT = 1, NFFAT
            XJ    = CORD(1,JFFAT)
            YJ    = CORD(2,JFFAT)
            ZJ    = CORD(3,JFFAT)
            DIPJX = DIPTMP(1,JFFAT)
            DIPJY = DIPTMP(2,JFFAT)
            DIPJZ = DIPTMP(3,JFFAT)
            X     = XI - XJ
            Y     = YI - YJ
            Z     = ZI - ZJ
            R2    = X*X + Y*Y + Z*Z
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            VFIX2(I)=VFIX2(I) +
     *                  (DIPJX*X+DIPJY*Y+DIPJZ*Z)*ONER3
 375     CONTINUE
 370  CONTINUE
 380  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(2408,VFIX2,NFFTS)
      DO I = 1, NFFTS
         XX(LQFIXX+I-1) = -FACTOR*SQRT(AFIX(I))*
     *                     (XX(LABPOT+I-1) + VFIX2(I))
      ENDDO
C
      DIFFS = ZERO
      DO I = 1, NFFTS
         DIFFS=DIFFS + ABS(XX(LQTMP+I-1)-XX(LQFIXX+I-1))
      ENDDO
      IF(DIFFS.GT.(NFFTS*FIXTOL).AND.NCYCLE.LT.200) THEN
         CALL FIXDIIS(NFFPAR,NCYCLE,MXDIIS,XX(LQFIXX),XX(LQTMP),
     *                XX(LDIMAT1),XX(LQREP1),XX(LTMP11),
     *                XX(LTMP12),XX(LIPVT1),NFFTS)
         CALL DCOPY(NFFTS,XX(LQFIXX),1,XX(LQTMP),1)
         GOTO 300
      END IF
      CALL DSCAL(NFFTS,SCALE,XX(LQTMP),1)
C
      CALL DCOPY(NFFTS,XX(LQTMP),1,XX(LFFQFIXMP),1)
      CALL DCOPY(3*NFFAT,DIPTMP,1,XX(LFFDIPMP),1)
C
      E2RXN = ZERO
      DO ITS = 1, NFFTS
         E2RXN = E2RXN + XX(LABPOT+ITS-1)*
     *           (XX(LFFQFIX+ITS-1) + PT5*XX(LFFQFIXMP+ITS-1))
      ENDDO
      E2POL = ZERO
      DO IFFAT = 1, NFFAT
         DIPX  =          XX(LFFDIP  +3*(IFFAT-1)  )
     *              + PT5*XX(LFFDIPMP+3*(IFFAT-1)  )
         DIPY  =          XX(LFFDIP  +3*(IFFAT-1)+1)
     *              + PT5*XX(LFFDIPMP+3*(IFFAT-1)+1)
         DIPZ  =          XX(LFFDIP  +3*(IFFAT-1)+2)
     *              + PT5*XX(LFFDIPMP+3*(IFFAT-1)+2)
         E2POL = E2POL - XX(LABFLD+3*(IFFAT-1)  )*DIPX
     *                 - XX(LABFLD+3*(IFFAT-1)+1)*DIPY
     *                 - XX(LABFLD+3*(IFFAT-1)+2)*DIPZ
      ENDDO
      IF(MASWRK) THEN
         WRITE(IW,900)' ------------------------------------------'
         WRITE(IW,900)' THE P(2) CORRECTED MP2-POLARIZATION ENERGY'
         WRITE(IW,900)'   INCLUDING INDUCED DIPOLES AND CHARGES'
         WRITE(IW,900)'      (CURRENTLY NO ANALYTIC GRADIENT)'
         WRITE(IW,900)' EMP2                =', EMP2
         WRITE(IW,900)' EPOL(2)             =', E2POL
         WRITE(IW,900)' ERXN(2)             =', E2RXN
         WRITE(IW,900)' EMP2+EPOL(2)+ERXN(2)=', EMP2+E2POL+E2RXN
         WRITE(IW,900)' ------------------------------------------'
      END IF
C
      CALL RETFM(NEED)
 900  FORMAT(A,F20.10)
      RETURN
C
      END
C*MODULE QUANPO  *DECK FFTDDFTDIP2
!>   
!> @brief    induced dipole and charges due to TDDFT densities TA and XY
!>   
!> @author   Hui Li   
!>           - Dec 2011
!>   
!> @details  called by TDDFT Z-vector code
!>
      SUBROUTINE FFTDDFTDIP2(L3,L2,L1,NONLSTQ,CORD,
     *                       AFIX,VFIX2,
     *                       XTSFIX,YTSFIX,ZTSFIX,
     *                       POL,POLSV,DIPTMP,FIELD2,FIELD3,
     *                       NONLS1,L1213J)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL TRIPLET,SG1T,TAMMD,TPA,ALPHKWD,BETAKWD
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, PT5=0.50D+00,
     *           FOUR=4.0D+00)
C
      DIMENSION NONLSTQ(*),CORD(3,*),
     *          AFIX(*),XTSFIX(*),YTSFIX(*),ZTSFIX(*),
     *          FIELD2(3,*),FIELD3(3,*),POL(*),NONLS1(2,*),
     *          L1213J(2,*),DIPTMP(3,*),VFIX2(*)
C
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FMCOM / X(1)
      COMMON /INFOTD/ CNVTOL,PFREQ(2),
     *                JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,ITDPRP,
     *                TRIPLET,SG1T,NONEQR,TAMMD,TPA,ALPHKWD,BETAKWD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, DEC 14, 2011, LINCOLN
C
      IF(NTSATM.EQ. 60) DISM0 = 0.4000D+00*TOBOHR
      IF(NTSATM.EQ.240) DISM0 = 0.2000D+00*TOBOHR
      IF(NTSATM.EQ.960) DISM0 = 0.1000D+00*TOBOHR
      FACTOR  = ONE/SQRT(FOUR*PI)/1.07D+00
      SCALE   = (FIXEPS - ONE)/FIXEPS
      NFFPAR  = (NFFTS-1)/NPROC+1
C
      MXDIIS  = 200   
      MXDII1  = MXDIIS  +   1
      CALL VALFM(LOADFM)
      LQTMP   = LOADFM  +   1
      LQFIXX  = LQTMP   +   NFFTS
      LDIMAT1 = LQFIXX  +   NFFTS
      LQREP1  = LDIMAT1 +   MXDII1*MXDII1
      LTMP11  = LQREP1  + 2*NFFTS *MXDII1
      LTMP12  = LTMP11  +   MXDII1
      LIPVT1  = LTMP12  +   MXDII1*MXDII1
      LXEFI   = LIPVT1  +   MXDII1
      LYEFI   = LXEFI   +   L2
      LZEFI   = LYEFI   +   L2
      LDTEMP  = LZEFI   +   L2
      LTA     = LDTEMP  +   L3
      LXY     = LTA     +   L2
      LFLDTA  = LXY     +   L2
      LFLDXY  = LFLDTA  + 3*NFFAT
      LPOTTA  = LFLDXY  + 3*NFFAT
      LPOTXY  = LPOTTA  +   NFFTS
      LAST    = LPOTXY  +   NFFTS
      NEED    = LAST    -   LOADFM
      CALL GETFM(NEED)
C
C     TA = EXCITATION DIFFERENCE DENSITY
      CALL DAREAD(IDAF,IODA,X(LDTEMP),L3,IRECTD+4,0)
      CALL TDPCMDEN(X(LTA),X(LDTEMP),L1)
C
C     XY = X + Y = TRANSITION STATE DENSITY
      CALL DAREAD(IDAF,IODA,X(LDTEMP),L3,IRECTD+2,0)
      CALL TDPCMDEN(X(LXY),X(LDTEMP),L1)
C
C     -- LPOTTA: POTENTIAL AT NFFTS DUE TO P(TA) --
C     -- LPOTXY: POTENTIAL AT NFFTS DUE TO P(XY) --
C
      CALL VCLR (X(LPOTTA),1,NFFTS)
      CALL EPOTEN(-ONE,XTSFIX,YTSFIX,ZTSFIX,
     *            X(LPOTTA),X(LTA),NFFTS,L2)
      IF(GOPARR) CALL DDI_GSUMF(2668,X(LPOTTA),NFFTS)
      CALL VCLR (X(LPOTXY),1,NFFTS)
      CALL EPOTEN(-ONE,XTSFIX,YTSFIX,ZTSFIX,
     *            X(LPOTXY),X(LXY),NFFTS,L2)
      IF(GOPARR) CALL DDI_GSUMF(2668,X(LPOTXY),NFFTS)
C
C     -- LFLDTA: FIELD AT POL DUE TO TA --
C     -- LFLDXY: FIELD AT POL DUE TO XY --
C
      IF(IDOPOL.EQ.0) THEN
         CALL VCLR(X(LFLDTA),1,6*NFFAT)
         GOTO 101
      END IF
C
      CALL VCLR(X(LFLDTA),1,6*NFFAT)
      IPCOUNT = ME - 1
      DO 100 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 100
         END IF
         IF(POL(IFFAT).EQ.ZERO) GOTO 100
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),
     *                      X(LXEFI),X(LYEFI),X(LZEFI),L2)
         X(LFLDTA+3*(IFFAT-1)  )=TRACEP(X(LTA),X(LXEFI),L1)
         X(LFLDTA+3*(IFFAT-1)+1)=TRACEP(X(LTA),X(LYEFI),L1)
         X(LFLDTA+3*(IFFAT-1)+2)=TRACEP(X(LTA),X(LZEFI),L1)
         X(LFLDXY+3*(IFFAT-1)  )=TRACEP(X(LXY),X(LXEFI),L1)
         X(LFLDXY+3*(IFFAT-1)+1)=TRACEP(X(LXY),X(LYEFI),L1)
         X(LFLDXY+3*(IFFAT-1)+2)=TRACEP(X(LXY),X(LZEFI),L1)
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(668,X(LFLDTA),6*NFFAT)
 101  CONTINUE
C
C
C     -- DETERMINE FIXSOL SURFACE CHARGES OF P(TA) --
C
      CALL VCLR(X(LQTMP),1,NFFTS)
      CALL VCLR(DIPTMP,1,3*NFFAT)
C
      NCYCLE = 0 
 300  CONTINUE
      NCYCLE = NCYCLE + 1
C
C     -- VFIX2: POTENTIAL AT NFFTS DUE TO SURFACE CHARGES --
      CALL VCLR(VFIX2,1,NFFTS)
      IPCOUNT = ME - 1
      DO 315 I = 1, NFFTS
         IF(AFIX(I).EQ.ZERO) GOTO 315
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 315
         END IF
         DO 320 J = I+1, NFFTS
            IF(AFIX(J).EQ.ZERO) GOTO 320
            DX   = XTSFIX(I) - XTSFIX(J)
            DY   = YTSFIX(I) - YTSFIX(J)
            DZ   = ZTSFIX(I) - ZTSFIX(J)
            R2   = DX*DX+DY*DY+DZ*DZ
            R    = SQRT(R2)
            IF(R.GT.DISM0) THEN
               VFIX2(I)=VFIX2(I) + X(LQTMP+J-1)/R
               VFIX2(J)=VFIX2(J) + X(LQTMP+I-1)/R
            ELSE
               DUM = 1.5D+00/DISM0 - PT5*R2/DISM0**3
               VFIX2(I)=VFIX2(I) + X(LQTMP+J-1)*DUM
               VFIX2(J)=VFIX2(J) + X(LQTMP+I-1)*DUM
            END IF
 320     CONTINUE
 315  CONTINUE
      IF(IDOPOL.EQ.0) GOTO 380
C
C     -- FIELD2: FIELD AT POL DUE TO FIXSOL SURFACE CHARGES
      CALL VCLR(FIELD2,1,3*NFFAT)
      IPCOUNT = ME - 1
      DO 360 IFFAT=1,NFFAT
         XI = CORD(1,IFFAT)
         YI = CORD(2,IFFAT)
         ZI = CORD(3,IFFAT)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 360
         END IF
         DO 365 JFFTS=1, NFFTS
            XJ   = XTSFIX(JFFTS)
            YJ   = YTSFIX(JFFTS)
            ZJ   = ZTSFIX(JFFTS)
            QJ   = X(LQTMP+JFFTS-1)*SCALE
            DX   = XI - XJ
            DY   = YI - YJ
            DZ   = ZI - ZJ
            R2   = DX*DX + DY*DY + DZ*DZ
            ONER2= ONE/R2
            ONER = SQRT(ONER2)
            ONER3= ONER2*ONER
            DUM  = QJ*ONER3
            FIELD2(1,IFFAT)=FIELD2(1,IFFAT)+DUM*DX
            FIELD2(2,IFFAT)=FIELD2(2,IFFAT)+DUM*DY
            FIELD2(3,IFFAT)=FIELD2(3,IFFAT)+DUM*DZ
 365     CONTINUE
 360  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2406,FIELD2,3*NFFAT)
C
C     -- UPDATE POL --
      CALL GETDIP(CORD,POL,POLSV,DIPTMP,X(LFLDTA),
     *            FIELD2,FIELD3,NONLS1,L1213J)
C
C     -- VFIX2: POTENTIAL AT NFFTS DUE TO MM POL --
      IPCOUNT = ME - 1
      DO 370 I = 1, NFFTS
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 370
         END IF
         XI     = XTSFIX(I)
         YI     = YTSFIX(I)
         ZI     = ZTSFIX(I)
         DO 375 JFFAT = 1, NFFAT
            XJ    = CORD(1,JFFAT)
            YJ    = CORD(2,JFFAT)
            ZJ    = CORD(3,JFFAT)
            DIPJX = DIPTMP(1,JFFAT)
            DIPJY = DIPTMP(2,JFFAT)
            DIPJZ = DIPTMP(3,JFFAT)
            DX    = XI - XJ
            DY    = YI - YJ
            DZ    = ZI - ZJ
            R2    = DX*DX + DY*DY + DZ*DZ
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            VFIX2(I)=VFIX2(I) +
     *               (DIPJX*DX+DIPJY*DY+DIPJZ*DZ)*ONER3
 375     CONTINUE
 370  CONTINUE
 380  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(2408,VFIX2,NFFTS)
      DO I = 1, NFFTS
         X(LQFIXX+I-1) = -FACTOR*SQRT(AFIX(I))*
     *                     (X(LPOTTA+I-1) + VFIX2(I))
      ENDDO
C
      DIFFS = ZERO
      DO I = 1, NFFTS
         DIFFS=DIFFS + ABS(X(LQTMP+I-1)-X(LQFIXX+I-1))
      ENDDO
      IF(DIFFS.GT.(NFFTS*FIXTOL).AND.NCYCLE.LT.200) THEN
         CALL FIXDIIS(NFFPAR,NCYCLE,MXDIIS,X(LQFIXX),X(LQTMP),
     *                X(LDIMAT1),X(LQREP1),X(LTMP11),
     *                X(LTMP12),X(LIPVT1),NFFTS)
         CALL DCOPY(NFFTS,X(LQFIXX),1,X(LQTMP),1)
         GOTO 300
      END IF
      CALL DSCAL(NFFTS,SCALE,X(LQTMP),1)
      CALL DCOPY(NFFTS,X(LQTMP),1,X(LFFQFIXTA),1)
      CALL DCOPY(3*NFFAT,DIPTMP,1,X(LFFDIPTA),1)
C
C
C
C     -- DETERMINE FIXSOL SURFACE CHARGES OF P(XY) --
C
      CALL VCLR(X(LQTMP),1,NFFTS)
      CALL VCLR(DIPTMP,1,3*NFFAT)
C
      NCYCLE = 0
 500  CONTINUE
      NCYCLE = NCYCLE + 1
C
C     -- VFIX2: POTENTIAL AT NFFTS DUE TO SURFACE CHARGES --
      CALL VCLR(VFIX2,1,NFFTS)
      IPCOUNT = ME - 1
      DO 515 I = 1, NFFTS
         IF(AFIX(I).EQ.ZERO) GOTO 515
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 515
         END IF
         DO 520 J = I+1, NFFTS
            IF(AFIX(J).EQ.ZERO) GOTO 520
            DX   = XTSFIX(I) - XTSFIX(J)
            DY   = YTSFIX(I) - YTSFIX(J)
            DZ   = ZTSFIX(I) - ZTSFIX(J)
            R2   = DX*DX+DY*DY+DZ*DZ 
            R    = SQRT(R2)
            IF(R.GT.DISM0) THEN
               VFIX2(I)=VFIX2(I) + X(LQTMP+J-1)/R
               VFIX2(J)=VFIX2(J) + X(LQTMP+I-1)/R
            ELSE
               DUM = 1.5D+00/DISM0 - PT5*R2/DISM0**3
               VFIX2(I)=VFIX2(I) + X(LQTMP+J-1)*DUM
               VFIX2(J)=VFIX2(J) + X(LQTMP+I-1)*DUM
            END IF
 520     CONTINUE
 515  CONTINUE
      IF(IDOPOL.EQ.0) GOTO 580
C
C     -- FIELD2: FIELD AT POL DUE TO FIXSOL SURFACE CHARGES
      CALL VCLR(FIELD2,1,3*NFFAT)
      IPCOUNT = ME - 1
      DO 560 IFFAT=1,NFFAT
         XI = CORD(1,IFFAT)
         YI = CORD(2,IFFAT)
         ZI = CORD(3,IFFAT)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 560
         END IF
         DO 565 JFFTS=1, NFFTS
            XJ   = XTSFIX(JFFTS)
            YJ   = YTSFIX(JFFTS)
            ZJ   = ZTSFIX(JFFTS)
            QJ   = X(LQTMP+JFFTS-1)*SCALE
            DX   = XI - XJ
            DY   = YI - YJ
            DZ   = ZI - ZJ
            R2   = DX*DX + DY*DY + DZ*DZ
            ONER2= ONE/R2
            ONER = SQRT(ONER2)
            ONER3= ONER2*ONER
            DUM  = QJ*ONER3
            FIELD2(1,IFFAT)=FIELD2(1,IFFAT)+DUM*DX
            FIELD2(2,IFFAT)=FIELD2(2,IFFAT)+DUM*DY
            FIELD2(3,IFFAT)=FIELD2(3,IFFAT)+DUM*DZ
 565     CONTINUE
 560  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2406,FIELD2,3*NFFAT)
C
C     -- UPDATE POL --
      CALL GETDIP(CORD,POL,POLSV,DIPTMP,X(LFLDXY),
     *            FIELD2,FIELD3,NONLS1,L1213J)
C
C     -- VFIX2: POTENTIAL AT NFFTS DUE TO MM POL --
      IPCOUNT = ME - 1
      DO 570 I = 1, NFFTS
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 570
         END IF
         XI     = XTSFIX(I)
         YI     = YTSFIX(I)
         ZI     = ZTSFIX(I)
         DO 575 JFFAT = 1, NFFAT
            XJ    = CORD(1,JFFAT)
            YJ    = CORD(2,JFFAT)
            ZJ    = CORD(3,JFFAT)
            DIPJX = DIPTMP(1,JFFAT)
            DIPJY = DIPTMP(2,JFFAT)
            DIPJZ = DIPTMP(3,JFFAT)
            DX    = XI - XJ
            DY    = YI - YJ
            DZ    = ZI - ZJ
            R2    = DX*DX + DY*DY + DZ*DZ
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            VFIX2(I)=VFIX2(I) +
     *               (DIPJX*DX+DIPJY*DY+DIPJZ*DZ)*ONER3
 575     CONTINUE
 570  CONTINUE
 580  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(2408,VFIX2,NFFTS)
      DO I = 1, NFFTS
         X(LQFIXX+I-1) = -FACTOR*SQRT(AFIX(I))*
     *                     (X(LPOTXY+I-1) + VFIX2(I))
      ENDDO
C
      DIFFS = ZERO
      DO I = 1, NFFTS
         DIFFS=DIFFS + ABS(X(LQTMP+I-1)-X(LQFIXX+I-1))
      ENDDO
      IF(DIFFS.GT.(NFFTS*FIXTOL).AND.NCYCLE.LT.200) THEN
         CALL FIXDIIS(NFFPAR,NCYCLE,MXDIIS,X(LQFIXX),X(LQTMP),
     *                X(LDIMAT1),X(LQREP1),X(LTMP11),
     *                X(LTMP12),X(LIPVT1),NFFTS)
         CALL DCOPY(NFFTS,X(LQFIXX),1,X(LQTMP),1)
         GOTO 500
      END IF
      CALL DSCAL(NFFTS,SCALE,X(LQTMP),1)
      CALL DCOPY(NFFTS,X(LQTMP),1,X(LFFQFIXXY),1)
      CALL DCOPY(3*NFFAT,DIPTMP,1,X(LFFDIPXY),1)
C
      CALL RETFM(NEED)
      RETURN
C
      END
C*MODULE QUANPO  *DECK RATTLE1
!>
!> @brief    RATTLE step 1
!>
!> @author   Nandun Thellamurege
!>           - Jan 2012
!>
!> @details  RATTLE step 1
!>
      SUBROUTINE RATTLE1(CORD,OLDCORD,VEL,DSTRAT,ONEMAS,LSTRAT,ISTEP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD(3,*),VEL(3,*),DSTRAT(*),ONEMAS(*),
     *          LSTRAT(2,*),OLDCORD(3,*)
C
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 13, 2012, LINCOLN
C     HUI LI, FEB 14, 2012 (ADD PRESSURE CORRECTION)
C
      ONEDT  = 1.0D+00/DT
      TWODT2 = 2.0D+00/DT2
C
      VIRRAT(1) = 0.0D+00
      VIRRAT(2) = 0.0D+00
      VIRRAT(3) = 0.0D+00
C
      NDONERAT = 0
  100 CONTINUE
      NDONERAT = NDONERAT + 1
      IF(NDONERAT.GT.MXRATT) THEN
         IF(MASWRK) WRITE(IW,*)' '
         IF(MASWRK) WRITE(IW,*)
     *   'WARNING: RATTLE STEP 1 DID NOT CONVERGE. USING SMALLER',
     *   ' "DT=" OR LARGER "MXRATT" MAY HELP.'
         IF(MASWRK) WRITE(IW,*)
     *   'IF THIS WARNING APPEARS FREQUENTLY, THERE MAY BE ',
     *   'PROBLEMS IN THE MOLECULAR SYSTEM.' 
         IF(MASWRK) WRITE(IW,*)' '
         RETURN
      END IF
      ICHECK = 0
      DO 110 III = 1, NRATTLE
         IFFAT  = LSTRAT(1,III)
         JFFAT  = LSTRAT(2,III)
         DSTRAT2= DSTRAT(III)
         ONERMAS= ONEMAS(IFFAT)+ONEMAS(JFFAT)
         IF(ONERMAS.EQ.0.0D+00) GOTO 110
         XSV    = OLDCORD(1,IFFAT)-OLDCORD(1,JFFAT)
         YSV    = OLDCORD(2,IFFAT)-OLDCORD(2,JFFAT)
         ZSV    = OLDCORD(3,IFFAT)-OLDCORD(3,JFFAT)
C
         X      = CORD(1,IFFAT)-CORD(1,JFFAT)
         Y      = CORD(2,IFFAT)-CORD(2,JFFAT)
         Z      = CORD(3,IFFAT)-CORD(3,JFFAT)
         DIFF2  = X*X + Y*Y + Z*Z - DSTRAT2
         IF(ABS(DIFF2).LT.RATOLC) GOTO 110
         ICHECK = ICHECK + 1
         DOTR   = X*XSV + Y*YSV + Z*ZSV
         DUM1   = DOTR*ONERMAS
         DUM1   = DUM1 + DUM1
         GIJ    = SCALRAT*DIFF2/DUM1
C
         GIJMASI  = GIJ*ONEMAS(IFFAT)
         GIJMASIX = GIJMASI*XSV
         GIJMASIY = GIJMASI*YSV
         GIJMASIZ = GIJMASI*ZSV
         GIJMASJ  = GIJ*ONEMAS(JFFAT)
         GIJMASJX = GIJMASJ*XSV
         GIJMASJY = GIJMASJ*YSV
         GIJMASJZ = GIJMASJ*ZSV
C
         CORD(1,IFFAT) = CORD(1,IFFAT) - GIJMASIX
         CORD(2,IFFAT) = CORD(2,IFFAT) - GIJMASIY
         CORD(3,IFFAT) = CORD(3,IFFAT) - GIJMASIZ
         CORD(1,JFFAT) = CORD(1,JFFAT) + GIJMASJX
         CORD(2,JFFAT) = CORD(2,JFFAT) + GIJMASJY
         CORD(3,JFFAT) = CORD(3,JFFAT) + GIJMASJZ
         VEL(1,IFFAT)  = VEL(1,IFFAT)  - GIJMASIX*ONEDT
         VEL(2,IFFAT)  = VEL(2,IFFAT)  - GIJMASIY*ONEDT
         VEL(3,IFFAT)  = VEL(3,IFFAT)  - GIJMASIZ*ONEDT
         VEL(1,JFFAT)  = VEL(1,JFFAT)  + GIJMASJX*ONEDT
         VEL(2,JFFAT)  = VEL(2,JFFAT)  + GIJMASJY*ONEDT
         VEL(3,JFFAT)  = VEL(3,JFFAT)  + GIJMASJZ*ONEDT
C
         GIJVIR        = GIJ*TWODT2
         VIRRAT(1)     = VIRRAT(1) + GIJVIR*XSV*X
         VIRRAT(2)     = VIRRAT(2) + GIJVIR*YSV*Y
         VIRRAT(3)     = VIRRAT(3) + GIJVIR*ZSV*Z
  110 CONTINUE
C
      IF (ICHECK.GT.0) GOTO 100
      IF(MASWRK.AND.(ISTEP.EQ.0.OR.MOD(ISTEP,JOUT).EQ.0))
     *   WRITE(IW,'(1X,A,I5,A)')'RATTLE STEP 1 CONVERGED IN ',
     *                         NDONERAT,' ITERATIONS.'
C
      RETURN
      END
C*MODULE QUANPO  *DECK RATTLE2a
!>   
!> @brief    RATTLE step 2
!>    
!> @author   Nandun Thellamurege
!>           - Jan 2012
!>    
!> @details  RATTLE step 2 
!>
      SUBROUTINE RATTLE2a(CORD,VEL,DSTRAT,ONEMAS,LSTRAT,ISTEP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD(3,*),VEL(3,*),ONEMAS(*),LSTRAT(2,*),DSTRAT(*)
C
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 13, 2012, LINCOLN
C
      NDONERAT = 0
  100 CONTINUE
      NDONERAT = NDONERAT + 1
      IF(NDONERAT.GT.MXRATT) THEN
         IF(MASWRK) WRITE(IW,*)' '
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: RATTLE STEP 2 DID NOT CONVERGE. USING SMALLER',
     *   ' "DT=" OR LARGER "MXRATT" MAY HELP.'
         IF(MASWRK) WRITE(IW,*)
     *   'IF THIS WARNING APPEARS FREQUENTLY, THERE MAY BE ',
     *   'PROBLEMS IN THE MOLECULAR SYSTEM.'
         IF(MASWRK) WRITE(IW,*)' '
         RETURN
      END IF
      ICHECK = 0
      DO 110 III= 1, NRATTLE
         IFFAT  = LSTRAT(1,III)
         JFFAT  = LSTRAT(2,III)
         ONERMAS= ONEMAS(IFFAT)+ONEMAS(JFFAT)
         IF(ONERMAS.EQ.0.0D+00) GOTO 110
         DUM1   = SCALRAT/(DSTRAT(III)*ONERMAS)
         X      = CORD(1,IFFAT)-CORD(1,JFFAT)
         Y      = CORD(2,IFFAT)-CORD(2,JFFAT)
         Z      = CORD(3,IFFAT)-CORD(3,JFFAT)
C
         VX     = VEL(1,IFFAT)-VEL(1,JFFAT)
         VY     = VEL(2,IFFAT)-VEL(2,JFFAT)
         VZ     = VEL(3,IFFAT)-VEL(3,JFFAT)
         DOT    = X*VX+Y*VY+Z*VZ
         IF(ABS(DOT).LT.RATOLV) GOTO 110
         ICHECK = ICHECK + 1
         CON    = DOT*DUM1
         CONMASI= CON*ONEMAS(IFFAT)
         CONMASJ= CON*ONEMAS(JFFAT)
         VEL(1,IFFAT) = VEL(1,IFFAT) - CONMASI*X
         VEL(2,IFFAT) = VEL(2,IFFAT) - CONMASI*Y
         VEL(3,IFFAT) = VEL(3,IFFAT) - CONMASI*Z
         VEL(1,JFFAT) = VEL(1,JFFAT) + CONMASJ*X
         VEL(2,JFFAT) = VEL(2,JFFAT) + CONMASJ*Y
         VEL(3,JFFAT) = VEL(3,JFFAT) + CONMASJ*Z
  110 CONTINUE
C
      IF (ICHECK.GT.0) GOTO 100
      IF(MASWRK.AND.(ISTEP.EQ.0.OR.MOD(ISTEP,JOUT).EQ.0)) 
     *   WRITE(IW,'(1X,A,I5,A)')'RATTLE STEP 2 CONVERGED IN ',
     *                         NDONERAT,' ITERATIONS.'
C
      RETURN
      END
C*MODULE QUANPO  *DECK SAVEQMAB
!>   
!> @brief    save a copy of all QM information
!>    
!> @author   Hui Li
!>           - May 2012
!>    
!> @details  save a copy of all QM information
!>
      SUBROUTINE SAVEQMAB
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000,MXSH=5000,MXGTOT=20000)
      PARAMETER (MXMPA=3*MXATM,MXMPSH=2*MXATM,MXMPGT=5*MXMPSH)
C
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /FMCOM / XX(1)
      COMMON /MACHIN/ NWDVAR,MAXFM,MAXSM,LIMFM,LIMSM
C
C     HUI LI, MAY 7, 2012
C
      CALL VALFM(LOADFM)
      LFFZANX   = LOADFM    + 1
      LFFCLPX   = LFFZANX   + MXATM
      LFFZLPX   = LFFCLPX   + 400
      LFFNLPX   = LFFZLPX   + 400
      LFFKFRSTX = LFFNLPX   + 400/NWDVAR + 1
      LFFKLASTX = LFFKFRSTX + MXATM*6/NWDVAR + 1
      LFFLMAXX  = LFFKLASTX + MXATM*6/NWDVAR + 1
      LFFLPSKIPX= LFFLMAXX  + MXATM/NWDVAR + 1
      LFFIZCOREX= LFFLPSKIPX+ MXATM/NWDVAR + 1
      LFFCX     = LFFIZCOREX+ MXATM/NWDVAR + 1
      LFFIANX   = LFFCX     + MXATM*3
      LFFANAMX  = LFFIANX   + MXATM/NWDVAR + 1
      LFFEXX    = LFFANAMX  + MXATM
      LFFCSX    = LFFEXX    + MXGTOT
      LFFCPX    = LFFCSX    + MXGTOT
      LFFCDX    = LFFCPX    + MXGTOT
      LFFCFX    = LFFCDX    + MXGTOT
      LFFCGX    = LFFCFX    + MXGTOT
      LFFCHX    = LFFCGX    + MXGTOT
      LFFCIX    = LFFCHX    + MXGTOT
      LFFKSTARTX= LFFCIX    + MXSH
      LFFKATOMX = LFFKSTARTX+ MXSH/NWDVAR  + 1
      LFFKTYPEX = LFFKATOMX + MXSH/NWDVAR  + 1
      LFFKNGX   = LFFKTYPEX + MXSH/NWDVAR  + 1
      LFFKLOCX  = LFFKNGX   + MXSH/NWDVAR  + 1
      LFFMINX   = LFFKLOCX  + MXSH/NWDVAR  + 1
      LFFMAXX   = LFFMINX   + MXSH/NWDVAR  + 1
      LFFMPTYPX = LFFMAXX   + MXSH/NWDVAR  + 1
      LFFAN0X   = LFFMPTYPX + MXATM/NWDVAR + 1
      LFFALPN0X = LFFAN0X   + MXMPA
      LFFAN1X   = LFFALPN0X + MXMPA
      LFFALPN1X = LFFAN1X   + MXMPA
      LFFMPSKPX = LFFALPN1X + MXMPA
      LFFNOAN0X = LFFMPSKPX + MXATM/NWDVAR + 1
      LFFNOAN1X = LFFNOAN0X + MXATM/NWDVAR + 1
      LFFBPARX  = LFFNOAN1X + MXATM/NWDVAR + 1
      LFFEXPMPX = LFFBPARX  + MXMPSH
      LFFCSMPX  = LFFEXPMPX + MXMPGT
      LFFCPMPX  = LFFCSMPX  + MXMPGT
      LFFCDMPX  = LFFCPMPX  + MXMPGT
      LFFCFMPX  = LFFCDMPX  + MXMPGT
      LFFMPSKIPX= LFFCFMPX  + MXMPGT
      LFFNOCOSHX= LFFMPSKIPX+ MXATM/NWDVAR + 1
      LFFMPKSTAX= LFFNOCOSHX+ MXATM/NWDVAR + 1
      LFFMPKNGX = LFFMPKSTAX+ MXMPSH/NWDVAR+ 1
      LFFMPKTYPX= LFFMPKNGX + MXMPSH/NWDVAR+ 1
      LFFMPKMINX= LFFMPKTYPX+ MXMPSH/NWDVAR+ 1
      LFFMPKMAXX= LFFMPKMINX+ MXMPSH/NWDVAR+ 1
      LFFMPKLOCX= LFFMPKMAXX+ MXMPSH/NWDVAR+ 1
      LAST      = LFFMPKLOCX+ MXMPSH/NWDVAR+ 1
      NEED      = LAST      - LOADFM       - 1
      CALL GETFM(NEED)
      CALL VCLR(XX(LOADFM+1),1,NEED)
C     **** WE DO NOT RETURN THE MEMORY ****
      CALL SAVEQMABX(XX(LFFZANX),XX(LFFCLPX),XX(LFFZLPX),XX(LFFNLPX),
     *            XX(LFFKFRSTX),XX(LFFKLASTX),XX(LFFLMAXX),
     *            XX(LFFLPSKIPX),
     *            XX(LFFIZCOREX),XX(LFFCX),XX(LFFIANX),
     *            XX(LFFEXX),XX(LFFCSX),XX(LFFCPX),XX(LFFCDX),
     *            XX(LFFCFX),XX(LFFCGX),
     *            XX(LFFCHX),XX(LFFCIX),XX(LFFKSTARTX),XX(LFFKATOMX),
     *            XX(LFFKTYPEX),XX(LFFKNGX),XX(LFFKLOCX),XX(LFFMINX),
     *            XX(LFFMAXX),
     *            XX(LFFMPTYPX),XX(LFFAN0X),XX(LFFALPN0X),XX(LFFAN1X),
     *            XX(LFFALPN1X),XX(LFFMPSKPX),XX(LFFNOAN0X),
     *            XX(LFFNOAN1X),
     *            XX(LFFBPARX),XX(LFFEXPMPX),XX(LFFCSMPX),
     *            XX(LFFCPMPX),XX(LFFCDMPX),XX(LFFCFMPX),
     *            XX(LFFMPSKIPX),XX(LFFNOCOSHX),XX(LFFMPKSTAX),
     *            XX(LFFMPKNGX),XX(LFFMPKTYPX),XX(LFFMPKMINX),
     *            XX(LFFMPKMAXX),XX(LFFMPKLOCX),XX(LFFANAMX))
      RETURN
      END
C*MODULE QUANPO  *DECK SAVEQMABX
!>    
!> @brief    save a copy of all QM information
!>    
!> @author   Hui Li
!>           - May 2012
!>    
!> @details  save a copy of all QM information
!>
      SUBROUTINE SAVEQMABX(ZANX,CLPX,ZLPX,NLPX,
     *                  KFRSTX,KLASTX,LMAXX,LPSKIPX,
     *                  IZCOREX,CX,IANX,
     *                  EXX,CSX,CPX,CDX,CFX,CGX,
     *                  CHX,CIX,KSTARTX,KATOMX,KTYPEX,
     *                  KNGX,KLOCX,MINX,MAXX,
     *                  MPTYPX,AN0X,ALPN0X,AN1X,ALPN1X,
     *                  MPSKPX,NOAN0X,NOAN1X,
     *                  BPARX,EXPMPX,CSMPX,
     *                  CPMPX,CDMPX,CFMPX,
     *                  MPSKIPX,NOCOSHX,MPKSTAX,
     *                  MPKNGX,MPKTYPX,MPKMINX,
     *                  MPKMAXX,MPKLOCX,ANAMX)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXSH=5000,MXATM=2000,MXGTOT=20000,MXAO=8192)
      PARAMETER (MXMPA=3*MXATM,MXMPSH=2*MXATM,MXMPGT=5*MXMPSH)
C
      DIMENSION ZANX(MXATM),CLPX(400),ZLPX(400),NLPX(400),
     *          KFRSTX(MXATM,6),KLASTX(MXATM,6),LMAXX(MXATM),
     *          LPSKIPX(MXATM),IZCOREX(MXATM),CX(3,MXATM),IANX(MXATM),
     *          EXX(MXGTOT),CSX(MXGTOT),CPX(MXGTOT),CDX(MXGTOT),
     *          CFX(MXGTOT),CGX(MXGTOT),CHX(MXGTOT),CIX(MXGTOT),
     *          KSTARTX(MXSH),KATOMX(MXSH),
     *          KTYPEX(MXSH),KNGX(MXSH),
     *          KLOCX(MXSH),MINX(MXSH),MAXX(MXSH),
     *          MPTYPX(MXATM),AN0X(MXMPA),ALPN0X(MXMPA),
     *          AN1X(MXMPA),ALPN1X(MXMPA),
     *          MPSKPX(MXATM),NOAN0X(MXATM),NOAN1X(MXATM),
     *          BPARX(MXMPSH),EXPMPX(MXMPGT),CSMPX(MXMPGT),
     *          CPMPX(MXMPGT),CDMPX(MXMPGT),CFMPX(MXMPGT),
     *          MPSKIPX(MXATM),NOCOSHX(MXATM),MPKSTAX(MXMPSH),
     *          MPKNGX(MXMPSH),MPKTYPX(MXMPSH),MPKMINX(MXMPSH),
     *          MPKMAXX(MXMPSH),MPKLOCX(MXMPSH),ANAMX(MXATM)
C
      COMMON /ECP2  / CLP(400),ZLP(400),NLP(400),KFRST(MXATM,6),
     *                KLAST(MXATM,6),LMAX(MXATM),LPSKIP(MXATM),
     *                IZCORE(MXATM)
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /FMCOM / XX(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INTOPT/ ISCHWZ,IECP,NECP,IEXTFLD
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /MMPDOC/ MPTYP(MXATM),IMVO,IMCORE
      COMMON /MMP1  / AN0(MXMPA),ALPN0(MXMPA),AN1(MXMPA),ALPN1(MXMPA),
     *                MPSKP(MXATM),NOAN0(MXATM),NOAN1(MXATM)
      COMMON /MMP2  / BPAR(MXMPSH),EXPMP(MXMPGT),CSMP(MXMPGT),
     *                CPMP(MXMPGT),CDMP(MXMPGT),CFMP(MXMPGT),
     *                MPSKIP(MXATM),NOCOSH(MXATM),MPKSTA(MXMPSH),
     *                MPKNG(MXMPSH),MPKTYP(MXMPSH),MPKMIN(MXMPSH),
     *                MPKMAX(MXMPSH),MPKLOC(MXMPSH)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),MIN(MXSH),MAX(MXSH),NSHELL
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
C
C     HUI LI, MAY 7, 2012
C
      CALL VCLR(ZANX,1,MXATM)
      CALL VCLR(CX,1,3*MXATM)
      CALL VCLR(EXX,1,MXGTOT)
      CALL VCLR(CSX,1,MXGTOT)
      CALL VCLR(CPX,1,MXGTOT)
      CALL VCLR(CDX,1,MXGTOT)
      CALL VCLR(CFX,1,MXGTOT)
      CALL VCLR(CGX,1,MXGTOT)
      CALL VCLR(CHX,1,MXGTOT)
      CALL VCLR(CIX,1,MXGTOT)
C
      CALL VICLR(IANX   ,1,MXATM)
      CALL VICLR(IZCOREX,1,MXATM)
      CALL VICLR(KSTARTX,1,MXSH)
      CALL VICLR(KATOMX ,1,MXSH)
      CALL VICLR(KTYPEX ,1,MXSH)
      CALL VICLR(KNGX   ,1,MXSH)
      CALL VICLR(KLOCX  ,1,MXSH)
      CALL VICLR(MINX   ,1,MXSH)
      CALL VICLR(MAXX   ,1,MXSH)
C
      CALL VICLR(MPTYPX ,1, MXATM)
      CALL VCLR (AN0X   ,1, MXMPA)
      CALL VCLR (ALPN0X ,1, MXMPA)
      CALL VCLR (AN1X   ,1, MXMPA)
      CALL VCLR (ALPN1X ,1, MXMPA)
      CALL VICLR(MPSKPX ,1, MXATM)
      CALL VICLR(NOAN0X ,1, MXATM)
      CALL VICLR(NOAN1X ,1, MXATM)
      CALL VCLR (BPARX  ,1, MXMPSH)
      CALL VCLR (EXPMPX ,1, MXMPGT)
      CALL VCLR (CSMPX  ,1, MXMPGT)
      CALL VCLR (CPMPX  ,1, MXMPGT)
      CALL VCLR (CDMPX  ,1, MXMPGT)
      CALL VCLR (CFMPX  ,1, MXMPGT)
      CALL VICLR(MPSKIPX,1, MXATM)
      CALL VICLR(NOCOSHX,1, MXATM)
      CALL VICLR(MPKSTAX,1, MXMPSH)
      CALL VICLR(MPKNGX ,1, MXMPSH)
      CALL VICLR(MPKTYPX,1, MXMPSH)
      CALL VICLR(MPKMINX,1, MXMPSH)
      CALL VICLR(MPKMAXX,1, MXMPSH)
      CALL VICLR(MPKLOCX,1, MXMPSH)
C
C
C     -- MAXIMUM SIZES ARE USED TO OCCUPY THE DAF SPACES
C
      CALL VALFM(LOADFM)
      LWORK   = LOADFM  + 1
      LAST    = LWORK   + NUM*NUM
      NEED    = LAST    - LOADFM  - 1
      CALL GETFM(NEED)
C
      LL2  = (NUM*NUM+NUM)/2
      NSH2 = (NSHELL*NSHELL+NSHELL)/2
C
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,14,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,18,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,23,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,24,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,25,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,26,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,27,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,28,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,35,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,36,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,51,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,95,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,96,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,97,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),3*NUM,250,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,308,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,355,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,418,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),LL2,428,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),NSH2,54,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),NUM*NUM,15,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),NUM*NUM,19,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),NUM*NUM,61,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),NUM*NUM,71,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),NUM*NUM,72,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),(NA+NB)*(NA+NB),73,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),NA*NA,74,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),(NA+NB)*(NA+NB),285,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),NUM,324,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),NUM,356,0)
      CALL DAWRIT(IDAF,IODA,XX(LWORK),NUM,357,0)
      CALL RETFM(NEED)
C
C     - SAVE BASIS SET INFORMATION -
C
      IECPX   =  IECP
      NSHELLX =  NSHELL
      DO III  =  1, MATOMA+MATOMB
         ZANX(III)   = ZAN(III)
         DO JJJ = 1, 6
            KFRSTX(III,JJJ) = KFRST(III,JJJ)
            KLASTX(III,JJJ) = KLAST(III,JJJ)
         ENDDO
         LMAXX(III)  = LMAX(III)
         LPSKIPX(III)= LPSKIP(III)
         IZCOREX(III)= IZCORE(III)
         CX(1,III)   = C(1,III)
         CX(2,III)   = C(2,III)
         CX(3,III)   = C(3,III)
         IANX(III)   = IAN(III)
         ANAMX(III)  = ANAM(III)
      ENDDO
      DO III = 1, 400
         CLPX(III) = CLP(III)
         ZLPX(III) = ZLP(III)
         NLPX(III) = NLP(III)
      ENDDO
C
      DO III  =  1, MXGTOT
         EXX(III)  = EX(III)
         CSX(III)  = CS(III)
         CPX(III)  = CP(III)
         CDX(III)  = CD(III)
         CFX(III)  = CF(III)
         CGX(III)  = CG(III)
         CHX(III)  = CH(III)
         CIX(III)  = CI(III)
      ENDDO
      DO III  =  1, MXSH
         KSTARTX(III)  = KSTART(III)
         KATOMX(III)   = KATOM(III)
         KTYPEX(III)   = KTYPE(III)
         KNGX(III)     = KNG(III)
         KLOCX(III)    = KLOC(III)
         MINX(III)     = MIN(III)
         MAXX(III)     = MAX(III)
      ENDDO
C
      CALL ICOPY(MXATM ,MPTYP ,1, MPTYPX ,1)
      CALL DCOPY(MXMPA ,AN0   ,1, AN0X   ,1)
      CALL DCOPY(MXMPA ,ALPN0 ,1, ALPN0X ,1)
      CALL DCOPY(MXMPA ,AN1   ,1, AN1X   ,1)
      CALL DCOPY(MXMPA ,ALPN1 ,1, ALPN1X ,1)
      CALL ICOPY(MXATM ,MPSKP ,1, MPSKPX ,1)
      CALL ICOPY(MXATM ,NOAN0 ,1, NOAN0X ,1)
      CALL ICOPY(MXATM ,NOAN1 ,1, NOAN1X ,1)
      CALL DCOPY(MXMPSH,BPAR  ,1, BPARX  ,1)
      CALL DCOPY(MXMPGT,EXPMP ,1, EXPMPX ,1)
      CALL DCOPY(MXMPGT,CSMP  ,1, CSMPX  ,1)
      CALL DCOPY(MXMPGT,CPMP  ,1, CPMPX  ,1)
      CALL DCOPY(MXMPGT,CDMP  ,1, CDMPX  ,1)
      CALL DCOPY(MXMPGT,CFMP  ,1, CFMPX  ,1)
      CALL ICOPY(MXATM ,MPSKIP,1, MPSKIPX,1)
      CALL ICOPY(MXATM ,NOCOSH,1, NOCOSHX,1)
      CALL ICOPY(MXMPSH,MPKSTA,1, MPKSTAX,1)
      CALL ICOPY(MXMPSH,MPKNG ,1, MPKNGX ,1)
      CALL ICOPY(MXMPSH,MPKTYP,1, MPKTYPX,1)
      CALL ICOPY(MXMPSH,MPKMIN,1, MPKMINX,1)
      CALL ICOPY(MXMPSH,MPKMAX,1, MPKMAXX,1)
      CALL ICOPY(MXMPSH,MPKLOC,1, MPKLOCX,1)
C
      RETURN
      END
C*MODULE QUANPO  *DECK SETQMAB
!>    
!> @brief    set QM information from saved copy
!>    
!> @author   Hui Li
!>           - May 2012
!>    
!> @details  set QM information from saved copy
!>
      SUBROUTINE SETQMAB(KDOAB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      COMMON /FFQMFE/ ETOTQA,EMP2QA,ESTATEQA,ETOTQB,EMP2QB,ESTATEQB,
     *                FRE1QMMM,FRE2QMMM,
     *                VIRA(3),VIRB(3),
     *                LFFFFGRDA,LFFFFGRDB,LFFQMGRDA,LFFQMGRDB,
     *                LFFCORDX,LFFCHARGX,LFFPOLX,LFFSIGX,LFFEPSX,
     *                LFFSIG2X,LFFEPS2X,LFFCLPRX,LFFZLPRX,LFFCHGIMX,
     *                LFFCRDIMX,LFFLISTAQM,LFFLISTBQM,NIMGPTX,
     *                LFFDIPIMX,LFFQADIMX,LFFOCTIMX
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /FMCOM / X(1)
C
C     HUI LI, MAY 7, 2012
C
      CALL SETQMABX(KDOAB,X(LFFZANX),X(LFFCLPX),X(LFFZLPX),
     *           X(LFFNLPX),
     *           X(LFFKFRSTX),X(LFFKLASTX),X(LFFLMAXX),
     *           X(LFFLPSKIPX),
     *           X(LFFIZCOREX),X(LFFCX),X(LFFIANX),
     *           X(LFFEXX),X(LFFCSX),X(LFFCPX),X(LFFCDX),
     *           X(LFFCFX),X(LFFCGX), 
     *           X(LFFCHX),X(LFFCIX),X(LFFKSTARTX),
     *           X(LFFKATOMX),
     *           X(LFFKTYPEX),X(LFFKNGX),X(LFFKLOCX),
     *           X(LFFMINX),X(LFFMAXX),
     *           X(LFFMPTYPX),X(LFFAN0X),X(LFFALPN0X),
     *           X(LFFAN1X),
     *           X(LFFALPN1X),X(LFFMPSKPX),X(LFFNOAN0X),
     *           X(LFFNOAN1X),
     *           X(LFFBPARX),X(LFFEXPMPX),X(LFFCSMPX),
     *           X(LFFCPMPX),X(LFFCDMPX),X(LFFCFMPX),
     *           X(LFFMPSKIPX),X(LFFNOCOSHX),X(LFFMPKSTAX),
     *           X(LFFMPKNGX),X(LFFMPKTYPX),X(LFFMPKMINX),
     *           X(LFFMPKMAXX),X(LFFMPKLOCX),X(LFFLISTBQM),
     *           X(LFFLISTAQM),X(LFFANAMX))
      RETURN
      END
C*MODULE QUANPO  *DECK SETQMABX
!>               
!> @brief    set QM information from saved copy
!>               
!> @author   Hui Li
!>           - May 2012
!>               
!> @details  set QM information from saved copy
!>   
      SUBROUTINE SETQMABX(KDOAB,ZANX,CLPX,ZLPX,NLPX,
     *                 KFRSTX,KLASTX,LMAXX,LPSKIPX,
     *                 IZCOREX,CX,IANX,
     *                 EXX,CSX,CPX,CDX,CFX,CGX,
     *                 CHX,CIX,KSTARTX,KATOMX,KTYPEX,
     *                 KNGX,KLOCX,MINX,MAXX,
     *                 MPTYPX,AN0X,ALPN0X,AN1X,ALPN1X,
     *                 MPSKPX,NOAN0X,NOAN1X,
     *                 BPARX,EXPMPX,CSMPX,
     *                 CPMPX,CDMPX,CFMPX,
     *                 MPSKIPX,NOCOSHX,MPKSTAX,
     *                 MPKNGX,MPKTYPX,MPKMINX,
     *                 MPKMAXX,MPKLOCX,LISTBQM,LISTAQM,ANAMX)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL MPTEST
C
      PARAMETER (MXSH=5000,MXATM=2000,MXGTOT=20000,MXAO=8192)
      PARAMETER (MXMPA=3*MXATM,MXMPSH=2*MXATM,MXMPGT=5*MXMPSH)
C
      DIMENSION ZANX(MXATM),CLPX(400),ZLPX(400),NLPX(400),
     *          KFRSTX(MXATM,6),KLASTX(MXATM,6),LMAXX(MXATM),
     *          LPSKIPX(MXATM),IZCOREX(MXATM),CX(3,MXATM),IANX(MXATM),
     *          EXX(MXGTOT),CSX(MXGTOT),CPX(MXGTOT),CDX(MXGTOT),
     *          CFX(MXGTOT),CGX(MXGTOT),CHX(MXGTOT),CIX(MXGTOT),
     *          KSTARTX(MXSH),KATOMX(MXSH),
     *          KTYPEX(MXSH),KNGX(MXSH),
     *          KLOCX(MXSH),MINX(MXSH),MAXX(MXSH),
     *          MPTYPX(MXATM),AN0X(MXMPA),ALPN0X(MXMPA),
     *          AN1X(MXMPA),ALPN1X(MXMPA),ANAMX(MXATM),
     *          MPSKPX(MXATM),NOAN0X(MXATM),NOAN1X(MXATM),
     *          BPARX(MXMPSH),EXPMPX(MXMPGT),CSMPX(MXMPGT),
     *          CPMPX(MXMPGT),CDMPX(MXMPGT),CFMPX(MXMPGT),
     *          MPSKIPX(MXATM),NOCOSHX(MXATM),MPKSTAX(MXMPSH),
     *          MPKNGX(MXMPSH),MPKTYPX(MXMPSH),MPKMINX(MXMPSH),
     *          MPKMAXX(MXMPSH),MPKLOCX(MXMPSH),LISTBQM(*),LISTAQM(*)
C
      COMMON /ECP2  / CLP(400),ZLP(400),NLP(400),KFRST(MXATM,6),
     *                KLAST(MXATM,6),LMAX(MXATM),LPSKIP(MXATM),
     *                IZCORE(MXATM)
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFQMPA/ ENFFQM2,ENPAV2,ENPMFLDAV2,
     *                SCFTYP2,TDDFT2,MPLEVL2,CITYP2,
     *                ICHARG2,MULT2,IDOQM2,IREDOX,IQMPKA,IQMRXN,
     *                MATOMA,MCHARGA,MULTA,MELEA,
     *                MATOMB,MCHARGB,MULTB,MELEB,
     *                IECPX,NSHELLX,IMP,JMP,ICORSH,IGTF,
     *                LFFZANX,LFFCLPX,LFFZLPX,LFFNLPX,LFFKFRSTX,
     *                LFFKLASTX,LFFLMAXX,LFFLPSKIPX,LFFIZCOREX,
     *                LFFCX,LFFIANX,LFFEXX,LFFCSX,LFFCPX,LFFCDX,
     *                LFFCFX,LFFCGX,LFFCHX,LFFCIX,LFFKSTARTX,
     *                LFFKATOMX,LFFKTYPEX,LFFKNGX,LFFKLOCX,
     *                LFFMINX,LFFMAXX,LFFMPTYPX,LFFAN0X,
     *                LFFALPN0X,LFFAN1X,LFFALPN1X,LFFMPSKPX,
     *                LFFNOAN0X,LFFNOAN1X,LFFBPARX,LFFEXPMPX,
     *                LFFCSMPX,LFFCPMPX,LFFCDMPX,LFFCFMPX,LFFMPSKIPX,
     *                LFFNOCOSHX,LFFMPKSTAX,LFFMPKNGX,LFFMPKTYPX,
     *                LFFMPKMINX,LFFMPKMAXX,LFFMPKLOCX,LFFANAMX
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INTOPT/ ISCHWZ,IECP,NECP,IEXTFLD
      COMMON /MMPDOC/ MPTYP(MXATM),IMVO,IMCORE
      COMMON /MMP1  / AN0(MXMPA),ALPN0(MXMPA),AN1(MXMPA),ALPN1(MXMPA),
     *                MPSKP(MXATM),NOAN0(MXATM),NOAN1(MXATM)
      COMMON /MMP2  / BPAR(MXMPSH),EXPMP(MXMPGT),CSMP(MXMPGT),
     *                CPMP(MXMPGT),CDMP(MXMPGT),CFMP(MXMPGT),
     *                MPSKIP(MXATM),NOCOSH(MXATM),MPKSTA(MXMPSH),
     *                MPKNG(MXMPSH),MPKTYP(MXMPSH),MPKMIN(MXMPSH),
     *                MPKMAX(MXMPSH),MPKLOC(MXMPSH)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),MIN(MXSH),MAX(MXSH),NSHELL
      COMMON /RESTAR/ TIMLIM,IREST,NREC,INTLOC,IST,JST,KST,LST
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                T(432),INVT(48),NT
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
C     HUI LI, MAY 7, 2012
C
      IMP     = 0
      JMP     = 0
      ICORSH  = 0
      IGTF    = 0
C
C     -- SET QM STATE A --
C
      NT      =  1
      NAT     =  MATOMA
      ICH     =  MCHARGA
      MUL     =  MULTA
      NE      =  MELEA
      NA      =  (NE-1+MUL)/2
      NB      =  (NE+1-MUL)/2
      IAT     =  0
      IECP    =  0
      IMPIM   =  0
      JMPIM   =  0
      ICORSHIM=  0
      IGTFIM  =  0
      IMCORE  =  0
      IF(KDOAB.EQ.1) LQMCT=LISTBQM(LQMCT) ! SET LQMCT FOR A
      DO III  =  1, MATOMA
         IAT      = IAT + 1
         ZAN(IAT) = ZANX(III)
C        - CX WAS SAVED -
         C(1,IAT) = CX(1,III)
         C(2,IAT) = CX(2,III)
         C(3,IAT) = CX(3,III)
         IAN(IAT) = IANX(III)
         ANAM(IAT)= ANAMX(III)
         DO JJJ = 1, 6
            KFRST(IAT,JJJ) = KFRSTX(III,JJJ)
            KLAST(IAT,JJJ) = KLASTX(III,JJJ)
         ENDDO
         LMAX(IAT) = LMAXX(III)
         LPSKIP(IAT)= LPSKIPX(III)
         DO LLL = 1, LMAX(IAT) + 1
            KF = KFRST(IAT,LLL)
            KL = KLAST(IAT,LLL)
            KFIII = KFRSTX(III,LLL)
            DO KKK = KF, KL
               CLP(KKK) = CLPX(KFIII + (KKK-KF))
               ZLP(KKK) = ZLPX(KFIII + (KKK-KF))
               NLP(KKK) = NLPX(KFIII + (KKK-KF))
            ENDDO
         ENDDO
         IZCORE(IAT) = IZCOREX(III)
         IF(IZCOREX(III).GT.0) IECP = IECPX
         MPTYP(IAT)  = MPTYPX(III)
         MPSKP(IAT)  = MPSKPX(III)
         NOAN0(IAT)  = NOAN0X(III)
         NOAN1(IAT)  = NOAN1X(III)
         MPSKIP(IAT) = MPSKIPX(III)
         NOCOSH(IAT) = NOCOSHX(III)
         DO LLL = 1, NOAN0X(III)
            AN0(IMPIM+LLL)    = AN0X(IMP+LLL)
            ALPN0(IMPIM+LLL)  = ALPN0X(IMP+LLL)
         ENDDO
         DO LLL = 1, NOAN1X(III)
            AN1(JMPIM+LLL)    = AN1X(JMP+LLL)
            ALPN1(JMPIM+LLL)  = ALPN1X(JMP+LLL)
         ENDDO
         DO LLL = 1, NOCOSHX(III)
            BPAR  (ICORSHIM+LLL) = BPARX  (ICORSH+LLL)
            MPKNG (ICORSHIM+LLL) = MPKNGX (ICORSH+LLL)
            MPKTYP(ICORSHIM+LLL) = MPKTYPX(ICORSH+LLL)
            IF(MPKTYP(ICORSHIM+LLL).EQ.1) IMCORE = IMCORE + 1
            IF(MPKTYP(ICORSHIM+LLL).EQ.2) IMCORE = IMCORE + 3
            IF(MPKTYP(ICORSHIM+LLL).EQ.3) IMCORE = IMCORE + 6
            IF(MPKTYP(ICORSHIM+LLL).EQ.4) IMCORE = IMCORE + 10
            MPKMIN(ICORSHIM+LLL) = MPKMINX(ICORSH+LLL)
            MPKMAX(ICORSHIM+LLL) = MPKMAXX(ICORSH+LLL)
            MPKLOC(ICORSHIM+LLL) = MPKLOCX(ICORSH+LLL)
            MPKSTA(ICORSHIM+LLL) = MPKSTAX(ICORSH+LLL)-IGTF+IGTFIM
            DO KKK = 1, MPKNGX(ICORSH+LLL)
               IGTFIM        = IGTFIM + 1
               IGTF          = IGTF   + 1
               EXPMP(IGTFIM) = EXPMPX(IGTF)
               CSMP(IGTFIM)  = CSMPX(IGTF)
               CPMP(IGTFIM)  = CPMPX(IGTF)
               CDMP(IGTFIM)  = CDMPX(IGTF)
               CFMP(IGTFIM)  = CFMPX(IGTF)
            ENDDO
         ENDDO
         IMPIM       = IMPIM   + NOAN0X (III)
         JMPIM       = JMPIM   + NOAN1X (III)
         ICORSHIM    = ICORSHIM+ NOCOSHX(III)
         IMP         = IMP     + NOAN0X (III)
         JMP         = JMP     + NOAN1X (III)
         ICORSH      = ICORSH  + NOCOSHX(III)
         IF(IAT.EQ.NAT) MPNUM = MPKLOC(ICORSHIM) + MPKMAX(ICORSHIM)
     *                                           - MPKMIN(ICORSHIM)
      ENDDO
      MPNUMA = MPNUM
C
      III    = 0
      JJJ    = 0
      NUM    = 0
      NPGALL = 0
      DO KKK  =  1, NSHELLX
         IATX=KATOMX(KKK)
         IF(IATX.GE.1 .AND. IATX.LE.MATOMA) THEN
            III = III + 1
            KSTART(III)  = KSTARTX(KKK) - NPGALL
            KATOM(III)   = KATOMX(KKK)
            KTYPE(III)   = KTYPEX(KKK)
            KNG(III)     = KNGX(KKK)
            KLOC(III)    = KLOCX(KKK)
            MIN(III)     = MINX(KKK)
            MAX(III)     = MAXX(KKK)
            I1 = KSTARTX(KKK)
            I2 = I1 + KNGX(KKK) - 1
            DO IG = I1, I2
               JJJ = JJJ + 1
               EX(JJJ)  = EXX(IG)
               CS(JJJ)  = CSX(IG)
               CP(JJJ)  = CPX(IG)
               CD(JJJ)  = CDX(IG)
               CF(JJJ)  = CFX(IG)
               CG(JJJ)  = CGX(IG)
               CH(JJJ)  = CHX(IG)
               CI(JJJ)  = CIX(IG)
            ENDDO
         ELSE
            NPGALL = NPGALL + KNGX(KKK)
         END IF
         IF(IATX.EQ.MATOMA) THEN
            NUM = KLOC(III) + MAX(III) - MIN(III)
         END IF
      ENDDO
      NSHELL = III
      NQMT   = NUM
      NUMA   = NUM
C
      IF(KDOAB.EQ.0) RETURN
      IF(KDOAB.EQ.1) THEN
         IF(IREDOX.EQ.0.AND.IQMRXN.EQ.0) THEN
            CALL SYMORB
            IREST = 0
            NEVALS= 0
         END IF
         IF(MPLEVL.EQ.2) CALL MP2INP(MPTEST)
         RETURN
      END IF
C
C     -- SET QM STATE B --
C        (MUST SET A BEFORE B)
C
      NT      =  1
      NAT     =  MATOMB
      ICH     =  MCHARGB
      MUL     =  MULTB
      NE      =  MELEB
      NA      =  (NE-1+MUL)/2
      NB      =  (NE+1-MUL)/2
      IAT     =  0
      IECP    =  0
      IMPIM   =  0
      JMPIM   =  0
      ICORSHIM=  0
      IGTFIM  =  0
      IMCORE  =  0
      LQMCT   = LISTAQM(LQMCT)      ! SET LQMCT FOR B
      DO III  =  MATOMA+1, MATOMA+MATOMB
         IAT      = IAT + 1
         ZAN(IAT) = ZANX(III)
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1) THEN
            IATBB = IAT
            IATAA = LISTBQM(IATBB)
            C(1,IAT) = CX(1,IATAA)  ! CX IS THE CURRENT A COORDINATES
            C(2,IAT) = CX(2,IATAA)
            C(3,IAT) = CX(3,IATAA)
C           - UPDATE MATOMB COORDINATES, ALWAYS -
            CX(1,III)= C(1,IAT)
            CX(2,III)= C(2,IAT)
            CX(3,III)= C(3,IAT)
         END IF
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2) THEN
            C(1,IAT) = CX(1,III)  ! CX NEVER CHANGE DUE TO NFIXMM
            C(2,IAT) = CX(2,III)
            C(3,IAT) = CX(3,III)
         END IF
C
         IAN(IAT) = IANX(III)
         ANAM(IAT)= ANAMX(III)
         DO JJJ = 1, 6
            KFRST(IAT,JJJ) = KFRSTX(III,JJJ)
            KLAST(IAT,JJJ) = KLASTX(III,JJJ)
         ENDDO
         LMAX(IAT) = LMAXX(III)
         LPSKIP(IAT)= LPSKIPX(III)
         DO LLL = 1, LMAX(IAT) + 1
            KF = KFRST(IAT,LLL)
            KL = KLAST(IAT,LLL)
            KFIII = KFRSTX(III,LLL)
            DO KKK = KF, KL
               CLP(KKK) = CLPX(KFIII + (KKK-KF))
               ZLP(KKK) = ZLPX(KFIII + (KKK-KF))
               NLP(KKK) = NLPX(KFIII + (KKK-KF))
            ENDDO
         ENDDO
         IZCORE(IAT) = IZCOREX(III)
         IF(IZCOREX(III).GT.0) IECP = IECPX
         MPTYP(IAT)  = MPTYPX(III)
         MPSKP(IAT)  = MPSKPX(III)
         NOAN0(IAT)  = NOAN0X(III)
         NOAN1(IAT)  = NOAN1X(III)
         MPSKIP(IAT) = MPSKIPX(III)
         NOCOSH(IAT) = NOCOSHX(III)
         DO LLL = 1, NOAN0X(III)
            AN0(IMPIM+LLL)    = AN0X(IMP+LLL)
            ALPN0(IMPIM+LLL)  = ALPN0X(IMP+LLL)
         ENDDO
         DO LLL = 1, NOAN1X(III)
            AN1(JMPIM+LLL)    = AN1X(JMP+LLL)
            ALPN1(JMPIM+LLL)  = ALPN1X(JMP+LLL)
         ENDDO
         DO LLL = 1, NOCOSHX(III)
            BPAR  (ICORSHIM+LLL) = BPARX  (ICORSH+LLL)
            MPKNG (ICORSHIM+LLL) = MPKNGX (ICORSH+LLL)
            MPKTYP(ICORSHIM+LLL) = MPKTYPX(ICORSH+LLL)
            IF(MPKTYP(ICORSHIM+LLL).EQ.1) IMCORE = IMCORE + 1
            IF(MPKTYP(ICORSHIM+LLL).EQ.2) IMCORE = IMCORE + 3
            IF(MPKTYP(ICORSHIM+LLL).EQ.3) IMCORE = IMCORE + 6
            IF(MPKTYP(ICORSHIM+LLL).EQ.4) IMCORE = IMCORE + 10
            MPKMIN(ICORSHIM+LLL) = MPKMINX(ICORSH+LLL)
            MPKMAX(ICORSHIM+LLL) = MPKMAXX(ICORSH+LLL)
            MPKLOC(ICORSHIM+LLL) = MPKLOCX(ICORSH+LLL)-MPNUMA
            MPKSTA(ICORSHIM+LLL) = MPKSTAX(ICORSH+LLL)-IGTF+IGTFIM
            DO KKK = 1, MPKNGX(ICORSH+LLL)
               IGTFIM        = IGTFIM + 1
               IGTF          = IGTF   + 1
               EXPMP(IGTFIM) = EXPMPX(IGTF)
               CSMP(IGTFIM)  = CSMPX(IGTF)
               CPMP(IGTFIM)  = CPMPX(IGTF)
               CDMP(IGTFIM)  = CDMPX(IGTF)
               CFMP(IGTFIM)  = CFMPX(IGTF)
            ENDDO
         ENDDO
         IMPIM       = IMPIM   + NOAN0X (III)
         JMPIM       = JMPIM   + NOAN1X (III)
         ICORSHIM    = ICORSHIM+ NOCOSHX(III)
         IMP         = IMP     + NOAN0X (III)
         JMP         = JMP     + NOAN1X (III)
         ICORSH      = ICORSH  + NOCOSHX(III)
         IF(IAT.EQ.NAT) MPNUM = MPKLOC(ICORSHIM) + MPKMAX(ICORSHIM)
     *                                           - MPKMIN(ICORSHIM)
      ENDDO
C
      III    = 0
      JJJ    = 0
      NUM    = 0
      NPGALL = 0
      DO KKK  =  1, NSHELLX
         IATX=KATOMX(KKK)
         IF(IATX.GE.(MATOMA+1).AND. IATX.LE.(MATOMA+MATOMB)) THEN
            III = III + 1
            KSTART(III)  = KSTARTX(KKK) - NPGALL
            KATOM(III)   = KATOMX(KKK) - MATOMA
            KTYPE(III)   = KTYPEX(KKK)
            KNG(III)     = KNGX(KKK)
            KLOC(III)    = KLOCX(KKK) - NUMA
            MIN(III)     = MINX(KKK)
            MAX(III)     = MAXX(KKK)
            I1 = KSTARTX(KKK)
            I2 = I1 + KNGX(KKK) - 1
            DO IG = I1, I2
               JJJ = JJJ + 1
               EX(JJJ)  = EXX(IG)
               CS(JJJ)  = CSX(IG)
               CP(JJJ)  = CPX(IG)
               CD(JJJ)  = CDX(IG)
               CF(JJJ)  = CFX(IG)
               CG(JJJ)  = CGX(IG)
               CH(JJJ)  = CHX(IG)
               CI(JJJ)  = CIX(IG)
            ENDDO
         ELSE
            NPGALL = NPGALL + KNGX(KKK)
         END IF
         IF(IATX.EQ.(MATOMA+MATOMB)) THEN
            NUM = KLOC(III) + MAX(III) - MIN(III)
         END IF
      ENDDO
      NSHELL = III
      NQMT   = NUM
C
      IF(IREDOX.EQ.0.AND.IQMRXN.EQ.0) THEN
         CALL SYMORB
         IREST = 0
         NEVALS= 0
      END IF
      IF(MPLEVL.EQ.2) CALL MP2INP(MPTEST)
C
      RETURN
      END
C*MODULE QUANPO  *DECK SAVEABPROP
!>
!> @brief    save a copy of all QM properties
!>
!> @author   Fengchao Cui
!>           - May 2012
!>
!> @details  save a copy of all QM properties
!>
      SUBROUTINE SAVEABPROP(KDOAB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL TRIPLET,SG1T,TAMMD,TPA,ALPHKWD,BETAKWD
C
      PARAMETER (MXATM=2000, MXRT=100)
C
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFQMFE/ ETOTQA,EMP2QA,ESTATEQA,ETOTQB,EMP2QB,ESTATEQB,
     *                FRE1QMMM,FRE2QMMM,
     *                VIRA(3),VIRB(3),
     *                LFFFFGRDA,LFFFFGRDB,LFFQMGRDA,LFFQMGRDB,
     *                LFFCORDX,LFFCHARGX,LFFPOLX,LFFSIGX,LFFEPSX,
     *                LFFSIG2X,LFFEPS2X,LFFCLPRX,LFFZLPRX,LFFCHGIMX,
     *                LFFCRDIMX,LFFLISTAQM,LFFLISTBQM,NIMGPTX,
     *                LFFDIPIMX,LFFQADIMX,LFFOCTIMX
      COMMON /FMCOM / XX(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,PFREQ(2),
     *                JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,ITDPRP,
     *                TRIPLET,SG1T,NONEQR,TAMMD,TPA,ALPHKWD,BETAKWD
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C     FENGCHAO CUI, MAY 7, 2012
C
C     -- SAVE ENERGY AND GRADIENT FOR STATE A --
C
      IF(KDOAB.EQ.1) THEN
         EN12A    = EN12
         EN123A   = EN123
         EN12312A = EN12312
         EN123R4A = EN123R4
         EN234W1A = EN234W1
         EN123B4A = EN123B4
         ENCHARA  = ENCHAR
         ENPOLA   = ENPOL
         ENRXNA   = ENRXN
         ENRXNPOLA= ENRXNPOL
         ENRXNRA  = ENRXNR
         ENLJRA   = ENLJR
         ENLJDA   = ENLJD
         ENCMAPA  = ENCMAP
         ENFIXSOA = ENFIXSO
         ENCENTA  = ENCENT
         ENIMGCHA = ENIMGCH
                              ETOTQA   = ETOT
         IF(MPLEVL.EQ.2)      EMP2QA   = EMP2
         IF(TDDFTYP.NE.RNONE) ESTATEQA = ESTATE(NTHST)
         CALL DCOPY(3*NFFAT,XX(LFFFFGRD2),1,XX(LFFFFGRDA),1)
         CALL DCOPY(3*NAT  ,XX(LFFQMGRD2),1,XX(LFFQMGRDA),1)
         CALL DCOPY(3      ,VIR          ,1,VIRA         ,1)
      END IF
C
C     -- SAVE ENERGY AND GRADIENT FOR STATE B --
C
      IF(KDOAB.EQ.2) THEN
         EN12B    = EN12
         EN123B   = EN123
         EN12312B = EN12312
         EN123R4B = EN123R4
         EN234W1B = EN234W1
         EN123B4B = EN123B4
         ENCHARB  = ENCHAR
         ENPOLB   = ENPOL
         ENRXNB   = ENRXN
         ENRXNPOLB= ENRXNPOL
         ENRXNRB  = ENRXNR
         ENLJRB   = ENLJR
         ENLJDB   = ENLJD
         ENCMAPB  = ENCMAP
         ENFIXSOB = ENFIXSO
         ENCENTB  = ENCENT
         ENIMGCHB = ENIMGCH
                              ETOTQB   = ETOT
         IF(MPLEVL.EQ.2)      EMP2QB   = EMP2
         IF(TDDFTYP.NE.RNONE) ESTATEQB = ESTATE(NTHST)
         CALL DCOPY(3*NFFAT,XX(LFFFFGRD2),1,XX(LFFFFGRDB),1)
         CALL DCOPY(3*NAT  ,XX(LFFQMGRD2),1,XX(LFFQMGRDB),1)
         CALL DCOPY(3      ,VIR          ,1,VIRB         ,1)
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK MIXABPROP
!>    
!> @brief    mix QM properties
!>    
!> @author   Fengchao Cui
!>           - May 2012
!>    
!> @details  mix QM properties
!>
      SUBROUTINE MIXABPROP
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL TRIPLET,SG1T,TAMMD,TPA,ALPHKWD,BETAKWD
C
      PARAMETER (MXATM=2000, MXRT=100)
C
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFFIXS/ ENFIXSO,FIXEPS,FIXTOL,FIXA,FIXQ,RALLMM,RALLQM,
     *                RADMM(200),RADQM(200),NRADMM,NRADQM,IFIXSOL,
     *                LFFDAI,LFFDAIT,LFFIDDAI,LFFIDTMP,LFFTMPTS,
     *                LFFAFIX,LFFIDATOM,LFFRFIX,LFFQFIX,NTSATM,
     *                LFFQFIXMP,LFFQFIXTA,LFFQFIXXY,
     *                LFFXTSFIX,LFFYTSFIX,LFFZTSFIX,
     *                LFFVFIX1,LFFVFIX2,NCYCLE,MXFFTS,NFFTS
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1, 
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFQMFE/ ETOTQA,EMP2QA,ESTATEQA,ETOTQB,EMP2QB,ESTATEQB,
     *                FRE1QMMM,FRE2QMMM,
     *                VIRA(3),VIRB(3),
     *                LFFFFGRDA,LFFFFGRDB,LFFQMGRDA,LFFQMGRDB,
     *                LFFCORDX,LFFCHARGX,LFFPOLX,LFFSIGX,LFFEPSX,
     *                LFFSIG2X,LFFEPS2X,LFFCLPRX,LFFZLPRX,LFFCHGIMX,
     *                LFFCRDIMX,LFFLISTAQM,LFFLISTBQM,NIMGPTX,
     *                LFFDIPIMX,LFFQADIMX,LFFOCTIMX
      COMMON /FMCOM / XX(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,PFREQ(2),
     *                JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,ITDPRP,
     *                TRIPLET,SG1T,NONEQR,TAMMD,TPA,ALPHKWD,BETAKWD
C
C     FENGCHAO CUI, MAY 7, 2012
C
C     - MIX ENERGY AND GRADIENT OF STATE A AND B -
C
      EN12    = (1-WSIMUL)*EN12A    + WSIMUL*EN12B
      EN123   = (1-WSIMUL)*EN123A   + WSIMUL*EN123B
      EN12312 = (1-WSIMUL)*EN12312A + WSIMUL*EN12312B
      EN123R4 = (1-WSIMUL)*EN123R4A + WSIMUL*EN123R4B
      EN234W1 = (1-WSIMUL)*EN234W1A + WSIMUL*EN234W1B
      EN123B4 = (1-WSIMUL)*EN123B4A + WSIMUL*EN123B4B
      ENCHAR  = (1-WSIMUL)*ENCHARA  + WSIMUL*ENCHARB
      ENPOL   = (1-WSIMUL)*ENPOLA   + WSIMUL*ENPOLB
      ENRXN   = (1-WSIMUL)*ENRXNA   + WSIMUL*ENRXNB
      ENRXNPOL= (1-WSIMUL)*ENRXNPOLA+ WSIMUL*ENRXNPOLB
      ENRXNR  = (1-WSIMUL)*ENRXNRA  + WSIMUL*ENRXNRB
      ENLJR   = (1-WSIMUL)*ENLJRA   + WSIMUL*ENLJRB
      ENLJD   = (1-WSIMUL)*ENLJDA   + WSIMUL*ENLJDB
      ENCMAP  = (1-WSIMUL)*ENCMAPA  + WSIMUL*ENCMAPB
      ENFIXSO = (1-WSIMUL)*ENFIXSOA + WSIMUL*ENFIXSOB
      ENCENT  = (1-WSIMUL)*ENCENTA  + WSIMUL*ENCENTB
      ENIMGCH = (1-WSIMUL)*ENIMGCHA + WSIMUL*ENIMGCHB
      ETOT    = (1-WSIMUL)*ETOTQA   + WSIMUL*ETOTQB
      EMP2    = (1-WSIMUL)*EMP2QA   + WSIMUL*EMP2QB
      ESTATE(NTHST)
     *        = (1-WSIMUL)*ESTATEQA + WSIMUL*ESTATEQB
C
      DO III=1, NFFAT
         XX(LFFFFGRD2+3*(III-1)  )=
     *                       (1-WSIMUL)*XX(LFFFFGRDA+3*(III-1)  )+
     *                           WSIMUL*XX(LFFFFGRDB+3*(III-1)  )
         XX(LFFFFGRD2+3*(III-1)+1)=
     *                       (1-WSIMUL)*XX(LFFFFGRDA+3*(III-1)+1)+
     *                           WSIMUL*XX(LFFFFGRDB+3*(III-1)+1)
         XX(LFFFFGRD2+3*(III-1)+2)=
     *                       (1-WSIMUL)*XX(LFFFFGRDA+3*(III-1)+2)+
     *                           WSIMUL*XX(LFFFFGRDB+3*(III-1)+2)
      ENDDO
      DO III=1, NAT
C        - III IS RUNNING OVER QM A, LET'S FIND THE QM B ATOM JJJ
         JJJ = 0
         CALL GETIFFAT(XX(LFFLISTAQM),III,JJJ)
         IF(JJJ.EQ.0) THEN
            XX(LFFQMGRD2+3*(III-1)  )=
     *                       (1-WSIMUL)*XX(LFFQMGRDA+3*(III-1)  )
            XX(LFFQMGRD2+3*(III-1)+1)=
     *                       (1-WSIMUL)*XX(LFFQMGRDA+3*(III-1)+1)
            XX(LFFQMGRD2+3*(III-1)+2)=
     *                       (1-WSIMUL)*XX(LFFQMGRDA+3*(III-1)+2)
         ELSE
            XX(LFFQMGRD2+3*(III-1)  )=
     *                       (1-WSIMUL)*XX(LFFQMGRDA+3*(III-1)  )+
     *                           WSIMUL*XX(LFFQMGRDB+3*(JJJ-1)  )
            XX(LFFQMGRD2+3*(III-1)+1)=
     *                       (1-WSIMUL)*XX(LFFQMGRDA+3*(III-1)+1)+
     *                           WSIMUL*XX(LFFQMGRDB+3*(JJJ-1)+1)
            XX(LFFQMGRD2+3*(III-1)+2)=
     *                       (1-WSIMUL)*XX(LFFQMGRDA+3*(III-1)+2)+
     *                           WSIMUL*XX(LFFQMGRDB+3*(JJJ-1)+2)
         END IF
      ENDDO
      VIR(1) = (1-WSIMUL)*VIRA(1) + WSIMUL*VIRB(1)
      VIR(2) = (1-WSIMUL)*VIRA(2) + WSIMUL*VIRB(2)
      VIR(3) = (1-WSIMUL)*VIRA(3) + WSIMUL*VIRB(3)
C
      RETURN
      END
C*MODULE QUANPO  *DECK SAVEFFDATA
!>    
!> @brief    save a copy of all MM information
!>    
!> @author   Fengchao Cui
!>           - May 2012
!>    
!> @details  save a copy of all MM information
!>
      SUBROUTINE SAVEFFDATA
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
C
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FMCOM / X(1)
      COMMON /FFQMFE/ ETOTQA,EMP2QA,ESTATEQA,ETOTQB,EMP2QB,ESTATEQB,
     *                FRE1QMMM,FRE2QMMM,
     *                VIRA(3),VIRB(3),
     *                LFFFFGRDA,LFFFFGRDB,LFFQMGRDA,LFFQMGRDB,
     *                LFFCORDX,LFFCHARGX,LFFPOLX,LFFSIGX,LFFEPSX,
     *                LFFSIG2X,LFFEPS2X,LFFCLPRX,LFFZLPRX,LFFCHGIMX,
     *                LFFCRDIMX,LFFLISTAQM,LFFLISTBQM,NIMGPTX,
     *                LFFDIPIMX,LFFQADIMX,LFFOCTIMX
C
C     FENGCHAO CUI, MAY 11, 2012
C
      CALL DCOPY(3*NFFAT,X(LFFCORD) ,1,X(LFFCORDX)  ,1)
      CALL DCOPY(4*NFFAT,X(LFFCLPR) ,1,X(LFFCLPRX)  ,1)
      CALL DCOPY(4*NFFAT,X(LFFZLPR) ,1,X(LFFZLPRX)  ,1)
      CALL DCOPY(  NFFAT,X(LFFCHARG),1,X(LFFCHARGX) ,1)
      CALL DCOPY(  NFFAT,X(LFFPOL)  ,1,X(LFFPOLX)   ,1)
      CALL DCOPY(  NFFAT,X(LFFSIG)  ,1,X(LFFSIGX)   ,1)
      CALL DCOPY(  NFFAT,X(LFFEPS)  ,1,X(LFFEPSX)   ,1)
      CALL DCOPY(  NFFAT,X(LFFSIG2) ,1,X(LFFSIG2X)  ,1)
      CALL DCOPY(  NFFAT,X(LFFEPS2) ,1,X(LFFEPS2X)  ,1)
      NIMGPTX = NIMGPT
      IF(MEANFLD.GT.0)THEN
      CALL DCOPY(   MXATM,X(LFFCHGIMG),1,X(LFFCHGIMX),1)
      CALL DCOPY( 3*MXATM,X(LFFDIPIMG),1,X(LFFDIPIMX),1)
      CALL DCOPY( 6*MXATM,X(LFFQADIMG),1,X(LFFQADIMX),1)
      CALL DCOPY(10*MXATM,X(LFFOCTIMG),1,X(LFFOCTIMX),1)
      CALL DCOPY( 3*MXATM,X(LFFCRDIMG),1,X(LFFCRDIMX),1)
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK SETFFDATAB
!>                    
!> @brief    set MM information from saved
!>                    
!> @author   Fengchao Cui
!>           - May 2012
!>    
!> @details  set MM information from saved
!>
      SUBROUTINE SETFFDATAB(KDOAB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
C
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFFRE2/ N1FFAT,N1BOND,N1ANGL,N1DIHR,N1DIHB,N1CMAP,N1WAGG,
     *                N2FFAT,N2BOND,N2ANGL,N2DIHR,N2DIHB,N2CMAP,N2WAGG,
     *                LFF2ATMNAM,LFF2CORD,LFF2ZANF,LFF2ZMAS,
     *                LFF2ONEMAS,LFF2CHARG,LFF2POL,
     *                LFF2SIG,LFF2EPS,LFF2SIG2,LFF2EPS2,
     *                LFF2BOND0,LFF2FCBOND,LFF2ANGL0,LFF2FCANGL,
     *                LFF2FCWAGG,LFF2DIHB0,LFF2FCDIHB,
     *                LFF2VROT,LFF2NNN,LFF2GAMA,LFF2IPAIR,
     *                LFF2KLIST,LFF2LLIST,LFF2MLIST,LFF2NLIST,
     *                LFF2VEL,LFF2QMVEL,LFF2CLPR,LFF2ZLPR,
     *                LFF2NLPR,LFF2MAPLST,LFFKFREEA,LFFKFREEB,
     *                LFFLISTB2A,NTODOA,LFFNONLSA,NTODOB,LFFNONLSB,
     *                N1213A,LFFL1213A,N1213B,LFFL1213B,
     *                N14A,LFFL14A,N14B,LFFL14B,
     *                NTODOPMA,LFFNONLSPMA,NBONDPMA,LFFLSBONDPMA,
     *                NANGLPMA,LFFLSANGLPMA,NDIHRPMA,LFFLSDIHRPMA,
     *                NDIHBPMA,LFFLSDIHBPMA,NWAGGPMA,LFFLSWAGGPMA,
     *                NCMAPPMA,LFFLSCMAPPMA,
     *                N1213PMA,LFFL1213PMA,
     *                N14PMA,LFFL14PMA,
     *                NTODOPMB,LFFNONLSPMB,NBONDPMB,LFFLSBONDPMB,
     *                NANGLPMB,LFFLSANGLPMB,NDIHRPMB,LFFLSDIHRPMB,
     *                NDIHBPMB,LFFLSDIHBPMB,NWAGGPMB,LFFLSWAGGPMB,
     *                NCMAPPMB,LFFLSCMAPPMB,
     *                N1213PMB,LFFL1213PMB,
     *                N14PMB,LFFL14PMB
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLS1,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /FMCOM / X(1)
      COMMON /FFQMFE/ ETOTQA,EMP2QA,ESTATEQA,ETOTQB,EMP2QB,ESTATEQB,
     *                FRE1QMMM,FRE2QMMM,
     *                VIRA(3),VIRB(3),
     *                LFFFFGRDA,LFFFFGRDB,LFFQMGRDA,LFFQMGRDB,
     *                LFFCORDX,LFFCHARGX,LFFPOLX,LFFSIGX,LFFEPSX,
     *                LFFSIG2X,LFFEPS2X,LFFCLPRX,LFFZLPRX,LFFCHGIMX,
     *                LFFCRDIMX,LFFLISTAQM,LFFLISTBQM,NIMGPTX,
     *                LFFDIPIMX,LFFQADIMX,LFFOCTIMX
C
C     FENGCHAO CUI, MAY 11, 2012
C
C     -- SET FORCE FIELD STATE A --
C
      IF(KDOAB.EQ.1) THEN
         CALL DCOPY(3*NFFAT,X(LFFCORDX) ,1,X(LFFCORD)  ,1)
         CALL DCOPY(4*NFFAT,X(LFFCLPRX) ,1,X(LFFCLPR)  ,1)
         CALL DCOPY(4*NFFAT,X(LFFZLPRX) ,1,X(LFFZLPR)  ,1)
         CALL DCOPY(  NFFAT,X(LFFCHARGX),1,X(LFFCHARG) ,1)
         CALL DCOPY(  NFFAT,X(LFFPOLX)  ,1,X(LFFPOL)   ,1)
         CALL DCOPY(  NFFAT,X(LFFSIGX)  ,1,X(LFFSIG)   ,1)
         CALL DCOPY(  NFFAT,X(LFFEPSX)  ,1,X(LFFEPS)   ,1)
         CALL DCOPY(  NFFAT,X(LFFSIG2X) ,1,X(LFFSIG2)  ,1)
         CALL DCOPY(  NFFAT,X(LFFEPS2X) ,1,X(LFFEPS2)  ,1)
         NIMGPT = NIMGPTX
         IF(MEANFLD.GT.0)THEN
         CALL DCOPY(   MXATM,X(LFFCHGIMX),1,X(LFFCHGIMG),1)
         CALL DCOPY( 3*MXATM,X(LFFDIPIMX),1,X(LFFDIPIMG),1)
         CALL DCOPY( 6*MXATM,X(LFFQADIMX),1,X(LFFQADIMG),1)
         CALL DCOPY(10*MXATM,X(LFFOCTIMX),1,X(LFFOCTIMG),1)
         CALL DCOPY( 3*MXATM,X(LFFCRDIMX),1,X(LFFCRDIMG),1)
         END IF
      END IF
C
C     -- SET FORCE FIELD STATE B --
C
      IF(KDOAB.EQ.2) THEN
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.1)THEN
            CALL DCOPY(3*NFFAT,X(LFFCORDX),1,X(LFFCORD) ,1)
            CALL DCOPY(3*NFFAT,X(LFFCORD) ,1,X(LFF2CORD),1)
         END IF
         IF(IFEPTOP.EQ.1.AND.IFEPTYP.EQ.2)THEN
            CALL DCOPY(3*NFFAT,X(LFFCORDX),1,X(LFFCORD) ,1)
            DO III=1,NFIXMMB
               IFFAT = IFIXMMB(III)
               X(LFFCORD+3*(IFFAT-1)  ) = X(LFF2CORD+3*(IFFAT-1)  )
               X(LFFCORD+3*(IFFAT-1)+1) = X(LFF2CORD+3*(IFFAT-1)+1)
               X(LFFCORD+3*(IFFAT-1)+2) = X(LFF2CORD+3*(IFFAT-1)+2)
            ENDDO
            CALL DCOPY(3*NFFAT,X(LFFCORD) ,1,X(LFF2CORD),1)
         END IF
         CALL DCOPY(4*NFFAT,X(LFF2CLPR) ,1,X(LFFCLPR)  ,1)
         CALL DCOPY(4*NFFAT,X(LFF2ZLPR) ,1,X(LFFZLPR)  ,1)
         CALL DCOPY(  NFFAT,X(LFF2CHARG),1,X(LFFCHARG) ,1)
         CALL DCOPY(  NFFAT,X(LFF2POL)  ,1,X(LFFPOL)   ,1)
         CALL DCOPY(  NFFAT,X(LFF2SIG)  ,1,X(LFFSIG)   ,1)
         CALL DCOPY(  NFFAT,X(LFF2EPS)  ,1,X(LFFEPS)   ,1)
         CALL DCOPY(  NFFAT,X(LFF2SIG2) ,1,X(LFFSIG2)  ,1)
         CALL DCOPY(  NFFAT,X(LFF2EPS2) ,1,X(LFFEPS2)  ,1)
         NIMGPT = NIMBPT
         IF(MEANFLD.GT.0)THEN
         CALL DCOPY(   MXATM,X(LFFCHGIMB),1,X(LFFCHGIMG),1)
         CALL DCOPY( 3*MXATM,X(LFFDIPIMB),1,X(LFFDIPIMG),1)
         CALL DCOPY( 6*MXATM,X(LFFQADIMB),1,X(LFFQADIMG),1)
         CALL DCOPY(10*MXATM,X(LFFOCTIMB),1,X(LFFOCTIMG),1)
         CALL DCOPY( 3*MXATM,X(LFFCRDIMB),1,X(LFFCRDIMG),1)
         END IF
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK EWALDPREPARE
!>
!> @brief    prepare Ewald calculation
!>
!> @author   Hui Li
!>           - Jun 2012
!>
!> @details  modified from Lyuda's code
!>
      SUBROUTINE EWALDPREPARE(KVEC)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (PT5=0.50D+00)
C
      DIMENSION KVEC(3,*)
C
      COMMON /FFEWLD/ SPLIT,IEWALD,KEWALD,NKVEC,
     *                L1KVEC,L2KVEC,LFFRKEXPEL,LFFRKVEC,
     *                LFFKVEC,LFFTCHCH,LFFCOSCH,LFFSINCH
C
C     HUI LI, JUNE 19, 2012
C
      RK2 = (KEWALD+PT5)**2
      N = 0
      M = 0
C
      DO IX = -KEWALD,KEWALD
      DO IY = -KEWALD,KEWALD
      DO IZ = -KEWALD,KEWALD
         N = N + 1
C        - L1KVEC AND L2KVEC NATURALLY CONTROL EVERYTHING -
         IF(N.GE.L1KVEC.AND.N.LE.L2KVEC) THEN
            IF(IEWALD.EQ.1) THEN
               M = M + 1
               KVEC(1,M) = IX
               KVEC(2,M) = IY
               KVEC(3,M) = IZ
            END IF
            IF(IEWALD.EQ.2) THEN
               R2 = (ABS(IX)-PT5)**2+(ABS(IY)-PT5)**2+(ABS(IZ)-PT5)**2
               IF(R2.LE.RK2)THEN
                  M = M + 1
                  KVEC(1,M) = IX
                  KVEC(2,M) = IY
                  KVEC(3,M) = IZ
               END IF
            END IF
         END IF
      ENDDO
      ENDDO
      ENDDO
C
      IF(IEWALD.EQ.2) L2KVEC = L1KVEC + M - 1
C
      RETURN
      END
C*MODULE QUANPO  *DECK EWALDRECIPR
!>
!> @brief    Ewald summation calculation
!>
!> @author   Hui Li
!>           - Jun 2012
!>
!> @details  modified from Lyuda's code
!>
      SUBROUTINE EWALDRECIPR(ESELF,ERECIPR,CORD,CHARG,FFGRD,RKEXPEL,
     *                       RKVEC,TCHCH,COSCH,SINCH,KVEC)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (PI=3.14159265358979323846264338D+00,TWOPI=2.0D+00*PI,
     *           FOURPI=4.0D+00*PI)
      PARAMETER (ZERO=0.0D+00, TWO=2.0D+00, FOUR=4.0D+00)
C
      DIMENSION CORD(3,*),CHARG(*),FFGRD(3,*),TCHCH(*),
     *          COSCH(*),SINCH(*),RKEXPEL(*),RKVEC(3,*),KVEC(3,*)
C
      COMMON /FFEWLD/ SPLIT,IEWALD,KEWALD,NKVEC,
     *                L1KVEC,L2KVEC,LFFRKEXPEL,LFFRKVEC,
     *                LFFKVEC,LFFTCHCH,LFFCOSCH,LFFSINCH
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFNODE/ L1BOND,L2BOND,L1ANGL,L2ANGL,L1DIHR,L2DIHR,
     *                L1DIHB,L2DIHB,L1CMAP,L2CMAP,L1WAGG,L2WAGG,
     *                L11213,L21213,L1N14J,L2N14J,
     *                L11213A,L21213A,L1N14A,L2N14A,
     *                L11213B,L21213B,L1N14B,L2N14B,
     *                L1BONDPMF,L2BONDPMF,L1ANGLPMF,L2ANGLPMF,
     *                L1DIHRPMF,L2DIHRPMF,L1DIHBPMF,L2DIHBPMF,
     *                L1WAGGPMF,L2WAGGPMF,L1CMAPPMF,L2CMAPPMF,
     *                L11213PMF,L21213PMF,L1N14PMF,L2N14PMF,
     *                L1BONDPMB,L2BONDPMB,L1ANGLPMB,L2ANGLPMB,
     *                L1DIHRPMB,L2DIHRPMB,L1DIHBPMB,L2DIHBPMB,
     *                L1WAGGPMB,L2WAGGPMB,L1CMAPPMB,L2CMAPPMB,
     *                L11213PMB,L21213PMB,L1N14PMB,L2N14PMB,
     *                L1FFAT,L2FFAT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
C
C     HUI LI, JUNE 18, 2012
C
      SQRTPI=SQRT(PI)
C
C     -- SELF ENERGY --
      ESELF = -DDOT((L2FFAT-L1FFAT+1),CHARG(L1FFAT),1,
     *               CHARG(L1FFAT),1)*SPLIT/SQRTPI
C
C     -- PREPARE RKVEC --
C     THIS MUST BE DONE AT EVERY MD STEP IF XBOX CHANGES
C
      RCOEFF=FOURPI*ONEXBOX*ONEYBOX*ONEZBOX
      DO I = 1, L2KVEC-L1KVEC+1
         RKVEC(1,I) = TWOPI*KVEC(1,I)*ONEXBOX
         RKVEC(2,I) = TWOPI*KVEC(2,I)*ONEYBOX
         RKVEC(3,I) = TWOPI*KVEC(3,I)*ONEZBOX
         RK2        = RKVEC(1,I)*RKVEC(1,I)
     *              + RKVEC(2,I)*RKVEC(2,I)
     *              + RKVEC(3,I)*RKVEC(3,I)
         IF(RK2.EQ.ZERO) THEN
            RKEXPEL(I) = ZERO
         ELSE
            RKEXPEL(I) = RCOEFF*EXP(-RK2/(FOUR*SPLIT*SPLIT))/RK2
         END IF
      ENDDO
C
      CALL VCLR(COSCH,1,L2KVEC-L1KVEC+1)
      CALL VCLR(SINCH,1,L2KVEC-L1KVEC+1)
      CALL VCLR(TCHCH,1,L2KVEC-L1KVEC+1)
C
C     -- ENERGY --
      DO 200 I = 1, L2KVEC-L1KVEC+1
         DO 210 IFFAT=1,NFFAT
            IF(CHARG(IFFAT).EQ.ZERO) GOTO 210
            RK       = RKVEC(1,I)*CORD(1,IFFAT)
     *               + RKVEC(2,I)*CORD(2,IFFAT)
     *               + RKVEC(3,I)*CORD(3,IFFAT)
            COSKR    = COS(RK)
            SINKR    = SIN(RK)
            COSCH(I) = COSCH(I)+CHARG(IFFAT)*COSKR
            SINCH(I) = SINCH(I)+CHARG(IFFAT)*SINKR
 210     CONTINUE
         TCHCH(I)=TCHCH(I) + COSCH(I)*COSCH(I) + SINCH(I)*SINCH(I)
 200  CONTINUE
      ERECIPR=DDOT((L2KVEC-L1KVEC+1),RKEXPEL,1,TCHCH,1)
C
C     -- HUI LI: THIS IS THE CORRECT WAY TO DO EWALD VIRIAL --
      VIR(1) = VIR(1) - ERECIPR/3.0D+00
      VIR(2) = VIR(2) - ERECIPR/3.0D+00
      VIR(3) = VIR(3) - ERECIPR/3.0D+00
C
C     -- GRADIENT --
      DO 300 IFFAT=1,NFFAT
         IF(CHARG(IFFAT).EQ.ZERO) GOTO 300
         GCHCHX = ZERO
         GCHCHY = ZERO
         GCHCHZ = ZERO
         DO I = 1, L2KVEC-L1KVEC+1
            RK     = RKVEC(1,I)*CORD(1,IFFAT)
     *             + RKVEC(2,I)*CORD(2,IFFAT)
     *             + RKVEC(3,I)*CORD(3,IFFAT)
            COSKR  = COS(RK)
            SINKR  = SIN(RK)
            DUM    = RKEXPEL(I)*(COSCH(I)*SINKR-SINCH(I)*COSKR)
            GCHCHX = GCHCHX + DUM*RKVEC(1,I)
            GCHCHY = GCHCHY + DUM*RKVEC(2,I)
            GCHCHZ = GCHCHZ + DUM*RKVEC(3,I)
         ENDDO
         CONX   = -TWO*CHARG(IFFAT)*GCHCHX
         CONY   = -TWO*CHARG(IFFAT)*GCHCHY
         CONZ   = -TWO*CHARG(IFFAT)*GCHCHZ
         FFGRD(1,IFFAT) = FFGRD(1,IFFAT) + CONX
         FFGRD(2,IFFAT) = FFGRD(2,IFFAT) + CONY
         FFGRD(3,IFFAT) = FFGRD(3,IFFAT) + CONZ
 300  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK UMBRELLA
!>
!> @brief    Umbrella sampling
!>
!> @author   Fengchao Cui and Hui Li
!>           - Jul 2012
!>
!> @details  apply the bias potentials and record
!>           histogram
!>
      SUBROUTINE UMBRELLA(CORD,FFGRD,UMBHIS,UM2HIS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INTEGER P1,P2,P3,P4
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (PT5=0.5D+00, ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),UMBHIS(*),UM2HIS(NUM2BIN,*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                EN12312,ENQUANP(30),
     *                ENBIAS,ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFUMBR/ UMBFC,UMBR0,UMBSIZE,
     *                NUMBBIN,NUMBATM(6),NUMBTYP,LFFUMBHIS,
     *                UM2FC,UM2R0,UM2SIZE,
     *                NUM2BIN,NUM2ATM(6),NUM2TYP,LFFUM2HIS
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     FENGCHAO CUI AND HUI LI, JUL 25, 2012, LINCOLN
C
C     FORMULA:  E = 0.5*K*(R-R0)**2
C
      ENBIAS = ZERO
C
      IF(.NOT.MASWRK)  RETURN
      IF(NUMBTYP.EQ.0) RETURN
C
      R0 = UMBR0
C
      IF(NUMBTYP.EQ.12) THEN
         P1    = NUMBATM(1)
         P2    = NUMBATM(2)
         X     = CORD(1,P1) - CORD(1,P2)
         Y     = CORD(2,P1) - CORD(2,P2)
         Z     = CORD(3,P1) - CORD(3,P2)
         R2    = X*X + Y*Y + Z*Z
         R     = SQRT(R2)
         ENBIAS= PT5*UMBFC*(R-R0)*(R-R0)
         DUM   = UMBFC*(R-R0)/R
         DEX   = DUM*X
         DEY   = DUM*Y
         DEZ   = DUM*Z
         FFGRD(1,P1)=FFGRD(1,P1) + DEX
         FFGRD(2,P1)=FFGRD(2,P1) + DEY
         FFGRD(3,P1)=FFGRD(3,P1) + DEZ
         FFGRD(1,P2)=FFGRD(1,P2) - DEX
         FFGRD(2,P2)=FFGRD(2,P2) - DEY
         FFGRD(3,P2)=FFGRD(3,P2) - DEZ
      END IF
C
      IF(NUMBTYP.EQ.1212) THEN
         P1      = NUMBATM(1)
         P2      = NUMBATM(2)
         P3      = NUMBATM(3)
         P4      = NUMBATM(4)
         X12     = CORD(1,P1) - CORD(1,P2)
         Y12     = CORD(2,P1) - CORD(2,P2)
         Z12     = CORD(3,P1) - CORD(3,P2)
         X34     = CORD(1,P3) - CORD(1,P4)
         Y34     = CORD(2,P3) - CORD(2,P4)
         Z34     = CORD(3,P3) - CORD(3,P4)
         R12     = X12*X12 + Y12*Y12 + Z12*Z12
         R12     = SQRT(R12)
         R34     = X34*X34 + Y34*Y34 + Z34*Z34
         R34     = SQRT(R34)
         R       = R12 - R34
         ENBIAS  = PT5*UMBFC*(R-R0)*(R-R0)
         DUM     = UMBFC*(R-R0)
         DUM12   = DUM/R12
         DUM34   = DUM/R34
         DEX12   = DUM12*X12
         DEY12   = DUM12*Y12
         DEZ12   = DUM12*Z12
         DEX34   = DUM34*X34
         DEY34   = DUM34*Y34
         DEZ34   = DUM34*Z34
         FFGRD(1,P1)=FFGRD(1,P1) + DEX12
         FFGRD(2,P1)=FFGRD(2,P1) + DEY12
         FFGRD(3,P1)=FFGRD(3,P1) + DEZ12
         FFGRD(1,P2)=FFGRD(1,P2) - DEX12
         FFGRD(2,P2)=FFGRD(2,P2) - DEY12
         FFGRD(3,P2)=FFGRD(3,P2) - DEZ12
         FFGRD(1,P3)=FFGRD(1,P3) - DEX34
         FFGRD(2,P3)=FFGRD(2,P3) - DEY34
         FFGRD(3,P3)=FFGRD(3,P3) - DEZ34
         FFGRD(1,P4)=FFGRD(1,P4) + DEX34
         FFGRD(2,P4)=FFGRD(2,P4) + DEY34
         FFGRD(3,P4)=FFGRD(3,P4) + DEZ34
      END IF
C
      IF(NUMBTYP.EQ.123) THEN
         P1      = NUMBATM(1)
         P2      = NUMBATM(2)
         P3      = NUMBATM(3)
         X12     = CORD(1,P1) - CORD(1,P2)
         Y12     = CORD(2,P1) - CORD(2,P2)
         Z12     = CORD(3,P1) - CORD(3,P2)
         X13     = CORD(1,P1) - CORD(1,P3)
         Y13     = CORD(2,P1) - CORD(2,P3)
         Z13     = CORD(3,P1) - CORD(3,P3)
         X23     = CORD(1,P2) - CORD(1,P3)
         Y23     = CORD(2,P2) - CORD(2,P3)
         Z23     = CORD(3,P2) - CORD(3,P3)
         R13R13  = X13*X13+Y13*Y13+Z13*Z13
         R12R12  = X12*X12+Y12*Y12+Z12*Z12
         R23R23  = X23*X23+Y23*Y23+Z23*Z23
         R12     = SQRT(R12R12)
         R23     = SQRT(R23R23)
         ONEBC   = ONE/(R12*R23)
         COSA    = (R12R12 + R23R23 - R13R13)*ONEBC*PT5
         IF(COSA.GT. ONE) COSA = ONE
         IF(COSA.LT.-ONE) COSA =-ONE
         R       = ACOS(COSA)
         ENBIAS  = PT5*UMBFC*(R-R0)*(R-R0)
C        - CALCULATE GRADIENTS
         DR23X2 =-X23*ONEBC
         DR23Y2 =-Y23*ONEBC
         DR23Z2 =-Z23*ONEBC
         DR12X1A=-COSA*X12/R12R12
         DR12Y1A=-COSA*Y12/R12R12
         DR12Z1A=-COSA*Z12/R12R12
         DR23X2A=COSA*X23/R23R23
         DR23Y2A=COSA*Y23/R23R23
         DR23Z2A=COSA*Z23/R23R23
         DR12X1 =X12*ONEBC
         DR12Y1 =Y12*ONEBC
         DR12Z1 =Z12*ONEBC
         SINA   =SQRT(ABS(ONE - COSA*COSA))
         IF(SINA.LT.1.0D-06) SINA = 1.0D-06
         DUMY   = -UMBFC*(R-R0)/SINA
         DEX1   = DUMY*(DR12X1A+DR23X2)
         DEY1   = DUMY*(DR12Y1A+DR23Y2)
         DEZ1   = DUMY*(DR12Z1A+DR23Z2)
         FFGRD(1,P1)=FFGRD(1,P1) + DEX1
         FFGRD(2,P1)=FFGRD(2,P1) + DEY1
         FFGRD(3,P1)=FFGRD(3,P1) + DEZ1
         DEX3   = DUMY*(DR23X2A+DR12X1)
         DEY3   = DUMY*(DR23Y2A+DR12Y1)
         DEZ3   = DUMY*(DR23Z2A+DR12Z1)
         FFGRD(1,P3)=FFGRD(1,P3)+DEX3
         FFGRD(2,P3)=FFGRD(2,P3)+DEY3
         FFGRD(3,P3)=FFGRD(3,P3)+DEZ3
         FFGRD(1,P2)=FFGRD(1,P2)-DEX1-DEX3
         FFGRD(2,P2)=FFGRD(2,P2)-DEY1-DEY3
         FFGRD(3,P2)=FFGRD(3,P2)-DEZ1-DEZ3
      END IF
C
      IF(NUMBTYP.EQ.1234) THEN
         P1      = NUMBATM(1)
         P2      = NUMBATM(2)
         P3      = NUMBATM(3)
         P4      = NUMBATM(4)
         X12     = CORD(1,P1) - CORD(1,P2)
         Y12     = CORD(2,P1) - CORD(2,P2)
         Z12     = CORD(3,P1) - CORD(3,P2)
         X23     = CORD(1,P2) - CORD(1,P3)
         Y23     = CORD(2,P2) - CORD(2,P3)
         Z23     = CORD(3,P2) - CORD(3,P3)
         X34     = CORD(1,P3) - CORD(1,P4)
         Y34     = CORD(2,P3) - CORD(2,P4)
         Z34     = CORD(3,P3) - CORD(3,P4)
         R12     = SQRT(X12*X12+Y12*Y12+Z12*Z12)
         R23     = SQRT(X23*X23+Y23*Y23+Z23*Z23)
         R34     = SQRT(X34*X34+Y34*Y34+Z34*Z34)
         COS123  = (-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
         COS234  = (-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
         SIN2123 = ONE-COS123*COS123
         SIN2234 = ONE-COS234*COS234
         SIN123  = SQRT(ABS(SIN2123))
         SIN234  = SQRT(ABS(SIN2234))
         IF(ABS(SIN123).LT.1.0D-06) GOTO 500
         IF(ABS(SIN234).LT.1.0D-06) GOTO 500
         ONESIN  = ONE/(SIN123*SIN234)
         COSTOR  = ONESIN*(COS123*COS234-
     *                    ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
         IF(COSTOR.GT. ONE) COSTOR= ONE
         IF(COSTOR.LT.-ONE) COSTOR=-ONE
         TOR     = ACOS(COSTOR)
C        -- DIHEDRAL ANGLE IS 0 - 360 DEGREES
         XNORM   = -Y23*Z34 + Z23*Y34
         YNORM   = -Z23*X34 + X23*Z34
         ZNORM   = -X23*Y34 + Y23*X34
         DOTN12  = X12*XNORM + Y12*YNORM + Z12*ZNORM
         IF(DOTN12.LT.ZERO) TOR = TWO*PI - TOR
         R       = TOR
         DRR0    = R - R0
         IF     (DRR0.GT. PI) THEN
            DRR0 = DRR0 - TWO*PI
         ELSE IF(DRR0.LT.-PI) THEN
            DRR0 = DRR0 + TWO*PI
         END IF
         R       = DRR0 + R0
         ENBIAS  = PT5*UMBFC*DRR0*DRR0
C        - CALCULATING DERIVATIVES
         A123=ONE/(R12*SIN2123)
         A432=ONE/(R34*SIN2234)
         B123=R12*COS123/R23
         B432=R34*COS234/R23
         C123=B123-ONE
         FACT=UMBFC*DRR0
         DUMY       =  FACT*A123/(R12*R23)
         DEX1       =  DUMY*(-Y12*Z23+Z12*Y23)
         DEY1       =  DUMY*(-Z12*X23+X12*Z23)
         DEZ1       =  DUMY*(-X12*Y23+Y12*X23)
         FFGRD(1,P1)=FFGRD(1,P1)+DEX1
         FFGRD(2,P1)=FFGRD(2,P1)+DEY1
         FFGRD(3,P1)=FFGRD(3,P1)+DEZ1
         DUMY       =  FACT*(-A432)/(R23*R34)
         DEX4       =  DUMY*(-Y23*Z34+Z23*Y34)
         DEY4       =  DUMY*(-Z23*X34+X23*Z34)
         DEZ4       =  DUMY*(-X23*Y34+Y23*X34)
         FFGRD(1,P4)=FFGRD(1,P4)+DEX4
         FFGRD(2,P4)=FFGRD(2,P4)+DEY4
         FFGRD(3,P4)=FFGRD(3,P4)+DEZ4
         DEX2       =  C123*DEX1 - B432*DEX4
         DEY2       =  C123*DEY1 - B432*DEY4
         DEZ2       =  C123*DEZ1 - B432*DEZ4
         FFGRD(1,P2)=FFGRD(1,P2)+DEX2
         FFGRD(2,P2)=FFGRD(2,P2)+DEY2
         FFGRD(3,P2)=FFGRD(3,P2)+DEZ2
         FFGRD(1,P3)=FFGRD(1,P3)-DEX1-DEX2-DEX4
         FFGRD(2,P3)=FFGRD(2,P3)-DEY1-DEY2-DEY4
         FFGRD(3,P3)=FFGRD(3,P3)-DEZ1-DEZ2-DEZ4
 500     CONTINUE
      END IF
C
      UMBRLOW  = UMBR0 - (DBLE(NUMBBIN-1)/2)*UMBSIZE
      IBIN     = NINT((R-UMBRLOW)/UMBSIZE) + 1
      IF(IBIN.GE.1.AND.IBIN.LE.NUMBBIN) UMBHIS(IBIN)=UMBHIS(IBIN)+1
C
C
C     ********* 2D UMBRELLA SAMPLING **********
C
      IF(NUM2TYP.EQ.0) RETURN
C
      R0 = UM2R0
      IF(NUM2TYP.EQ.12) THEN
         P1    = NUM2ATM(1)
         P2    = NUM2ATM(2)
         X     = CORD(1,P1) - CORD(1,P2)
         Y     = CORD(2,P1) - CORD(2,P2)
         Z     = CORD(3,P1) - CORD(3,P2)
         R2    = X*X + Y*Y + Z*Z 
         R     = SQRT(R2)
         ENBIAS= ENBIAS + PT5*UM2FC*(R-R0)*(R-R0)
         DUM   = UM2FC*(R-R0)/R
         DEX   = DUM*X
         DEY   = DUM*Y
         DEZ   = DUM*Z
         FFGRD(1,P1)=FFGRD(1,P1) + DEX
         FFGRD(2,P1)=FFGRD(2,P1) + DEY
         FFGRD(3,P1)=FFGRD(3,P1) + DEZ
         FFGRD(1,P2)=FFGRD(1,P2) - DEX
         FFGRD(2,P2)=FFGRD(2,P2) - DEY
         FFGRD(3,P2)=FFGRD(3,P2) - DEZ
      END IF
C
      IF(NUM2TYP.EQ.1212) THEN
         P1      = NUM2ATM(1)
         P2      = NUM2ATM(2)
         P3      = NUM2ATM(3)
         P4      = NUM2ATM(4)
         X12     = CORD(1,P1) - CORD(1,P2)
         Y12     = CORD(2,P1) - CORD(2,P2)
         Z12     = CORD(3,P1) - CORD(3,P2)
         X34     = CORD(1,P3) - CORD(1,P4)
         Y34     = CORD(2,P3) - CORD(2,P4)
         Z34     = CORD(3,P3) - CORD(3,P4)
         R12     = X12*X12 + Y12*Y12 + Z12*Z12
         R12     = SQRT(R12)
         R34     = X34*X34 + Y34*Y34 + Z34*Z34
         R34     = SQRT(R34)
         R       = R12 - R34
         ENBIAS  = ENBIAS + PT5*UM2FC*(R-R0)*(R-R0)
         DUM     = UM2FC*(R-R0)
         DUM12   = DUM/R12
         DUM34   = DUM/R34
         DEX12   = DUM12*X12
         DEY12   = DUM12*Y12
         DEZ12   = DUM12*Z12
         DEX34   = DUM34*X34
         DEY34   = DUM34*Y34
         DEZ34   = DUM34*Z34
         FFGRD(1,P1)=FFGRD(1,P1) + DEX12
         FFGRD(2,P1)=FFGRD(2,P1) + DEY12
         FFGRD(3,P1)=FFGRD(3,P1) + DEZ12
         FFGRD(1,P2)=FFGRD(1,P2) - DEX12
         FFGRD(2,P2)=FFGRD(2,P2) - DEY12
         FFGRD(3,P2)=FFGRD(3,P2) - DEZ12
         FFGRD(1,P3)=FFGRD(1,P3) - DEX34
         FFGRD(2,P3)=FFGRD(2,P3) - DEY34
         FFGRD(3,P3)=FFGRD(3,P3) - DEZ34
         FFGRD(1,P4)=FFGRD(1,P4) + DEX34
         FFGRD(2,P4)=FFGRD(2,P4) + DEY34
         FFGRD(3,P4)=FFGRD(3,P4) + DEZ34
      END IF
C
      IF(NUM2TYP.EQ.123) THEN
         P1      = NUM2ATM(1)
         P2      = NUM2ATM(2)
         P3      = NUM2ATM(3)
         X12     = CORD(1,P1) - CORD(1,P2)
         Y12     = CORD(2,P1) - CORD(2,P2)
         Z12     = CORD(3,P1) - CORD(3,P2)
         X13     = CORD(1,P1) - CORD(1,P3)
         Y13     = CORD(2,P1) - CORD(2,P3)
         Z13     = CORD(3,P1) - CORD(3,P3)
         X23     = CORD(1,P2) - CORD(1,P3)
         Y23     = CORD(2,P2) - CORD(2,P3)
         Z23     = CORD(3,P2) - CORD(3,P3)
         R13R13  = X13*X13+Y13*Y13+Z13*Z13
         R12R12  = X12*X12+Y12*Y12+Z12*Z12
         R23R23  = X23*X23+Y23*Y23+Z23*Z23
         R12     = SQRT(R12R12)
         R23     = SQRT(R23R23)
         ONEBC   = ONE/(R12*R23)
         COSA    = (R12R12 + R23R23 - R13R13)*ONEBC*PT5
         IF(COSA.GT. ONE) COSA = ONE
         IF(COSA.LT.-ONE) COSA =-ONE
         R       = ACOS(COSA)
         ENBIAS  = ENBIAS + PT5*UM2FC*(R-R0)*(R-R0)
C        - CALCULATE GRADIENTS
         DR23X2 =-X23*ONEBC
         DR23Y2 =-Y23*ONEBC
         DR23Z2 =-Z23*ONEBC
         DR12X1A=-COSA*X12/R12R12
         DR12Y1A=-COSA*Y12/R12R12
         DR12Z1A=-COSA*Z12/R12R12
         DR23X2A=COSA*X23/R23R23
         DR23Y2A=COSA*Y23/R23R23
         DR23Z2A=COSA*Z23/R23R23
         DR12X1 =X12*ONEBC
         DR12Y1 =Y12*ONEBC
         DR12Z1 =Z12*ONEBC
         SINA   =SQRT(ABS(ONE - COSA*COSA))
         IF(SINA.LT.1.0D-06) SINA = 1.0D-06
         DUMY   = -UM2FC*(R-R0)/SINA
         DEX1   = DUMY*(DR12X1A+DR23X2)
         DEY1   = DUMY*(DR12Y1A+DR23Y2)
         DEZ1   = DUMY*(DR12Z1A+DR23Z2)
         FFGRD(1,P1)=FFGRD(1,P1) + DEX1
         FFGRD(2,P1)=FFGRD(2,P1) + DEY1
         FFGRD(3,P1)=FFGRD(3,P1) + DEZ1
         DEX3   = DUMY*(DR23X2A+DR12X1)
         DEY3   = DUMY*(DR23Y2A+DR12Y1)
         DEZ3   = DUMY*(DR23Z2A+DR12Z1)
         FFGRD(1,P3)=FFGRD(1,P3)+DEX3
         FFGRD(2,P3)=FFGRD(2,P3)+DEY3
         FFGRD(3,P3)=FFGRD(3,P3)+DEZ3
         FFGRD(1,P2)=FFGRD(1,P2)-DEX1-DEX3
         FFGRD(2,P2)=FFGRD(2,P2)-DEY1-DEY3
         FFGRD(3,P2)=FFGRD(3,P2)-DEZ1-DEZ3
      END IF
C
      IF(NUM2TYP.EQ.1234) THEN
         P1      = NUM2ATM(1)
         P2      = NUM2ATM(2)
         P3      = NUM2ATM(3)
         P4      = NUM2ATM(4)
         X12     = CORD(1,P1) - CORD(1,P2)
         Y12     = CORD(2,P1) - CORD(2,P2)
         Z12     = CORD(3,P1) - CORD(3,P2)
         X23     = CORD(1,P2) - CORD(1,P3)
         Y23     = CORD(2,P2) - CORD(2,P3)
         Z23     = CORD(3,P2) - CORD(3,P3)
         X34     = CORD(1,P3) - CORD(1,P4)
         Y34     = CORD(2,P3) - CORD(2,P4)
         Z34     = CORD(3,P3) - CORD(3,P4)
         R12     = SQRT(X12*X12+Y12*Y12+Z12*Z12)
         R23     = SQRT(X23*X23+Y23*Y23+Z23*Z23)
         R34     = SQRT(X34*X34+Y34*Y34+Z34*Z34)
         COS123  = (-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
         COS234  = (-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
         SIN2123 = ONE-COS123*COS123
         SIN2234 = ONE-COS234*COS234
         SIN123  = SQRT(ABS(SIN2123))
         SIN234  = SQRT(ABS(SIN2234))
         IF(ABS(SIN123).LT.1.0D-06) GOTO 600
         IF(ABS(SIN234).LT.1.0D-06) GOTO 600
         ONESIN  = ONE/(SIN123*SIN234)
         COSTOR  = ONESIN*(COS123*COS234-
     *                    ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
         IF(COSTOR.GT. ONE) COSTOR= ONE
         IF(COSTOR.LT.-ONE) COSTOR=-ONE
         TOR     = ACOS(COSTOR)
C        -- DIHEDRAL ANGLE IS 0 - 360 DEGREES
         XNORM   = -Y23*Z34 + Z23*Y34
         YNORM   = -Z23*X34 + X23*Z34
         ZNORM   = -X23*Y34 + Y23*X34
         DOTN12  = X12*XNORM + Y12*YNORM + Z12*ZNORM
         IF(DOTN12.LT.ZERO) TOR = TWO*PI - TOR
         R       = TOR
         DRR0    = R - R0
         IF     (DRR0.GT. PI) THEN
            DRR0 = DRR0 - TWO*PI
         ELSE IF(DRR0.LT.-PI) THEN
            DRR0 = DRR0 + TWO*PI
         END IF
         R       = DRR0 + R0
         ENBIAS  = PT5*UM2FC*DRR0*DRR0
C        - CALCULATING DERIVATIVES
         A123=ONE/(R12*SIN2123)
         A432=ONE/(R34*SIN2234)
         B123=R12*COS123/R23
         B432=R34*COS234/R23
         C123=B123-ONE
         FACT=UM2FC*DRR0
         DUMY       =  FACT*A123/(R12*R23)
         DEX1       =  DUMY*(-Y12*Z23+Z12*Y23)
         DEY1       =  DUMY*(-Z12*X23+X12*Z23)
         DEZ1       =  DUMY*(-X12*Y23+Y12*X23)
         FFGRD(1,P1)=FFGRD(1,P1)+DEX1
         FFGRD(2,P1)=FFGRD(2,P1)+DEY1
         FFGRD(3,P1)=FFGRD(3,P1)+DEZ1
         DUMY       =  FACT*(-A432)/(R23*R34)
         DEX4       =  DUMY*(-Y23*Z34+Z23*Y34)
         DEY4       =  DUMY*(-Z23*X34+X23*Z34)
         DEZ4       =  DUMY*(-X23*Y34+Y23*X34)
         FFGRD(1,P4)=FFGRD(1,P4)+DEX4
         FFGRD(2,P4)=FFGRD(2,P4)+DEY4
         FFGRD(3,P4)=FFGRD(3,P4)+DEZ4
         DEX2       =  C123*DEX1 - B432*DEX4
         DEY2       =  C123*DEY1 - B432*DEY4
         DEZ2       =  C123*DEZ1 - B432*DEZ4
         FFGRD(1,P2)=FFGRD(1,P2)+DEX2
         FFGRD(2,P2)=FFGRD(2,P2)+DEY2
         FFGRD(3,P2)=FFGRD(3,P2)+DEZ2
         FFGRD(1,P3)=FFGRD(1,P3)-DEX1-DEX2-DEX4
         FFGRD(2,P3)=FFGRD(2,P3)-DEY1-DEY2-DEY4
         FFGRD(3,P3)=FFGRD(3,P3)-DEZ1-DEZ2-DEZ4
 600     CONTINUE
      END IF
C
      UM2RLOW  = UM2R0 - (DBLE(NUM2BIN-1)/2)*UM2SIZE
      JBIN     = NINT((R-UM2RLOW)/UM2SIZE) + 1
      IF(IBIN.GE.1.AND.IBIN.LE.NUMBBIN) THEN
         IF(JBIN.GE.1.AND.JBIN.LE.NUM2BIN) THEN
            UM2HIS(JBIN,IBIN)=UM2HIS(JBIN,IBIN)+1
         END IF
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK VELDIP
!>       
!> @brief    print out velocity and dipole moment
!>       
!> @author   Fengchao Cui and Hui Li
!>           - Aug 2012
!>       
!> @details  to get Vib and IR spectra
!>
      SUBROUTINE VELDIP(CORD,ZMAS,CHARG,DIP,ISTEP,DIPSTEP,
     *                  VELSTEP,VEL,IVIBMM,
     *                  DQMSTEP,DMMSTEP,DM1STEP,
     *                  VQMSTEP,VMMSTEP,VM1STEP,
     *                  QMVEL,QMVSTEP,MMVSTEP,LISTQM)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DOUBLE PRECISION MMVSTEP
C
      PARAMETER (MXATM=2000)
      PARAMETER (DB2AU=1.0D+00/2.541766D+00)
      PARAMETER (ZERO=0.0D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD(3,*),ZMAS(*),CHARG(*),DIP(3,*),DIPSTEP(3,*),
     *          VELSTEP(3,*),VEL(3,*),IVIBMM(*),QMVEL(3,*),
     *          DQMSTEP(3,*),DMMSTEP(3,*),DM1STEP(3,*),
     *          VQMSTEP(3,*),VMMSTEP(3,*),VM1STEP(3,*),
     *          QMVSTEP(3,NAT+1,*),MMVSTEP(3,NVIBMM+1,*),LISTQM(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFVIB / JVIBOUT,NVIBMM,LFFDIPSTEP,LFFVELSTEP,LFFIVIBMM,
     *                LFFDQMSTEP,LFFVQMSTEP,LFFDM1STEP,LFFVM1STEP,
     *                LFFDMMSTEP,LFFVMMSTEP,LFFQMVSTEP,LFFMMVSTEP
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /XYZPRP/ XP,YP,ZP,
     *                DMX,DMY,DMZ,
     *                QXX,QYY,QZZ,QXY,QXZ,QYZ,
     *                QMXX,QMYY,QMZZ,QMXY,QMXZ,QMYZ,
     *                OXXX,OXXY,OXXZ,OXYY,OYYY,OYYZ,
     *                OXZZ,OYZZ,OZZZ,OXYZ,
     *                OMXXX,OMXXY,OMXXZ,OMXYY,OMYYY,
     *                OMYYZ,OMXZZ,OMYZZ,OMZZZ,OMXYZ
C
C     FENGCHAO CUI AND HUI LI, AUG 16, 2012
C
      IF(ISTEP.EQ.0) THEN
         CALL VCLR(DIPSTEP,1,3*JVIBOUT)
         CALL VCLR(DQMSTEP,1,3*JVIBOUT)
         CALL VCLR(DM1STEP,1,3*JVIBOUT)
         CALL VCLR(DMMSTEP,1,3*JVIBOUT)
         CALL VCLR(VELSTEP,1,3*JVIBOUT)
         CALL VCLR(VQMSTEP,1,3*JVIBOUT)
         CALL VCLR(VM1STEP,1,3*JVIBOUT)
         CALL VCLR(VMMSTEP,1,3*JVIBOUT)
         CALL VCLR(QMVSTEP,1,3*JVIBOUT*(NAT+1))
         CALL VCLR(MMVSTEP,1,3*JVIBOUT*(NVIBMM+1))
         RETURN
      END IF
C
      KKK = MOD(ISTEP,JVIBOUT)
      IF(KKK.EQ.0) KKK = JVIBOUT
C
C
C     -- ALL MM ATOMS --
      AMX = ZERO
      AMY = ZERO
      AMZ = ZERO
      AMT = ZERO
      DO IFFAT = 1, NFFAT
         AMX = AMX  + CORD(1,IFFAT)*ZMAS(IFFAT)
         AMY = AMY  + CORD(2,IFFAT)*ZMAS(IFFAT)
         AMZ = AMZ  + CORD(3,IFFAT)*ZMAS(IFFAT)
         AMT = AMT  + ZMAS(IFFAT)
      ENDDO
      AMX = AMX/AMT
      AMY = AMY/AMT
      AMZ = AMZ/AMT
      DO IFFAT = 1, NFFAT
         DMMSTEP(1,KKK)=DMMSTEP(1,KKK)+
     *                  CHARG(IFFAT)*(CORD(1,IFFAT)-AMX)
         DMMSTEP(2,KKK)=DMMSTEP(2,KKK)+
     *                  CHARG(IFFAT)*(CORD(2,IFFAT)-AMY)
         DMMSTEP(3,KKK)=DMMSTEP(3,KKK)+
     *                  CHARG(IFFAT)*(CORD(3,IFFAT)-AMZ)
      ENDDO
      IF(IDOPOL.GT.0) THEN
         DO IFFAT = 1, NFFAT
            DMMSTEP(1,KKK) = DMMSTEP(1,KKK) + DIP(1,IFFAT)
            DMMSTEP(2,KKK) = DMMSTEP(2,KKK) + DIP(2,IFFAT)
            DMMSTEP(3,KKK) = DMMSTEP(3,KKK) + DIP(3,IFFAT)
         ENDDO
      END IF
C
C     -- SOME MM ATOMS --
      IF(NVIBMM.GT.0) THEN
         AMX = ZERO
         AMY = ZERO
         AMZ = ZERO
         AMT = ZERO
         DO III = 1, NVIBMM
            IFFAT= IVIBMM(III)
            AMX  = AMX  + CORD(1,IFFAT)*ZMAS(IFFAT)
            AMY  = AMY  + CORD(2,IFFAT)*ZMAS(IFFAT)
            AMZ  = AMZ  + CORD(3,IFFAT)*ZMAS(IFFAT)
            AMT  = AMT  + ZMAS(IFFAT)
         ENDDO
         AMX = AMX/AMT
         AMY = AMY/AMT
         AMZ = AMZ/AMT
         DO III=1,NVIBMM
            IFFAT = IVIBMM(III)
            DM1STEP(1,KKK)=DM1STEP(1,KKK)+
     *                     CHARG(IFFAT)*(CORD(1,IFFAT)-AMX)
            DM1STEP(2,KKK)=DM1STEP(2,KKK)+
     *                     CHARG(IFFAT)*(CORD(2,IFFAT)-AMY)
            DM1STEP(3,KKK)=DM1STEP(3,KKK)+
     *                     CHARG(IFFAT)*(CORD(3,IFFAT)-AMZ)
         ENDDO
         IF(IDOPOL.GT.0) THEN
            DO III=1, NVIBMM
               IFFAT = IVIBMM(III)
               DM1STEP(1,KKK) = DM1STEP(1,KKK) + DIP(1,IFFAT)
               DM1STEP(2,KKK) = DM1STEP(2,KKK) + DIP(2,IFFAT)
               DM1STEP(3,KKK) = DM1STEP(3,KKK) + DIP(3,IFFAT)
            ENDDO
         END IF
      END IF
C
      DIPSTEP(1,KKK) = DMMSTEP(1,KKK)
      DIPSTEP(2,KKK) = DMMSTEP(2,KKK)
      DIPSTEP(3,KKK) = DMMSTEP(3,KKK)
C
      IF(NAT.GT.0) THEN
         DQMSTEP(1,KKK) = DMX*DB2AU
         DQMSTEP(2,KKK) = DMY*DB2AU
         DQMSTEP(3,KKK) = DMZ*DB2AU
         DIPSTEP(1,KKK) = DIPSTEP(1,KKK) + DMX*DB2AU
         DIPSTEP(2,KKK) = DIPSTEP(2,KKK) + DMY*DB2AU
         DIPSTEP(3,KKK) = DIPSTEP(3,KKK) + DMZ*DB2AU
      END IF
C
      LLLAST = ((ISTEP-1)/JVIBOUT)*JVIBOUT
      IF(MOD(ISTEP,JVIBOUT).EQ.0.OR.ISTEP.EQ.NSTEP) THEN
         IF(MASWRK) THEN
            WRITE(38,'(/A,I10,A,I10/1X,A,2X,F10.6,A,
     *                20X,A,15X,A,15X,A)')
     *      ' TOTAL DIPOLE MOMENT (E*BOHR)       FROM MD STEP ',
     *      LLLAST+1,' TO MD STEP ',ISTEP,
     *      'DT=',DT*2.418884326505D-02,' FS',
     *      'DIPX','DIPY','DIPZ'
            DO JJJ = LLLAST+1, ISTEP
               WRITE(38,'(A,I10,1X,F18.10,1X,F18.10,1X,F18.10)')
     *         ' DIP MD STEP= ', JJJ, 
     *         DIPSTEP(1,JJJ-LLLAST), 
     *         DIPSTEP(2,JJJ-LLLAST),
     *         DIPSTEP(3,JJJ-LLLAST)
            ENDDO
            WRITE(38,*)' '
C
            IF(NAT.GT.0) THEN
               WRITE(38,'(/A,I10,A,I10/1X,A,2X,F10.6,A,
     *                   20X,A,15X,A,15X,A)')
     *         ' QM DIPOLE MOMENT (E*BOHR)          FROM MD STEP ',
     *         LLLAST+1,' TO MD STEP ',ISTEP,
     *         'DT=',DT*2.418884326505D-02,' FS',
     *         'DIPX','DIPY','DIPZ'
               DO JJJ = LLLAST+1, ISTEP
                  WRITE(38,'(A,I10,1X,F18.10,1X,F18.10,1X,F18.10)')
     *            ' DQM MD STEP= ', JJJ,
     *            DQMSTEP(1,JJJ-LLLAST),
     *            DQMSTEP(2,JJJ-LLLAST),
     *            DQMSTEP(3,JJJ-LLLAST)
               ENDDO
               WRITE(38,*)' '
            END IF
C
            IF(NVIBMM.GT.0) THEN
               WRITE(38,'(/A,I10,A,I10/1X,A,2X,F10.6,A,
     *                   20X,A,15X,A,15X,A)')
     *         ' MM1 DIPOLE MOMENT (E*BOHR)         FROM MD STEP ',
     *         LLLAST+1,' TO MD STEP ',ISTEP,
     *         'DT=',DT*2.418884326505D-02,' FS',
     *         'DIPX','DIPY','DIPZ'
               DO JJJ = LLLAST+1, ISTEP
                  WRITE(38,'(A,I10,1X,F18.10,1X,F18.10,1X,F18.10)')
     *            ' DM1 MD STEP= ', JJJ,
     *            DM1STEP(1,JJJ-LLLAST),
     *            DM1STEP(2,JJJ-LLLAST),
     *            DM1STEP(3,JJJ-LLLAST)
               ENDDO
               WRITE(38,*)' '
            END IF
         END IF
         CALL VCLR(DIPSTEP,1,3*JVIBOUT)
         CALL VCLR(DQMSTEP,1,3*JVIBOUT)
         CALL VCLR(DM1STEP,1,3*JVIBOUT)
         CALL VCLR(DMMSTEP,1,3*JVIBOUT)
      END IF
C
C
C     -- ALL MM ATOMS --
      DO IFFAT = 1, NFFAT
         VMMSTEP(1,KKK)=VMMSTEP(1,KKK)+VEL(1,IFFAT)
         VMMSTEP(2,KKK)=VMMSTEP(2,KKK)+VEL(2,IFFAT)
         VMMSTEP(3,KKK)=VMMSTEP(3,KKK)+VEL(3,IFFAT)
      ENDDO
C
C     -- SOME MM ATOMS --
      IF(NVIBMM.GT.0) THEN
         DO III = 1, NVIBMM
            IFFAT= IVIBMM(III)
            VM1STEP(1,KKK)=VM1STEP(1,KKK)+VEL(1,IFFAT)
            VM1STEP(2,KKK)=VM1STEP(2,KKK)+VEL(2,IFFAT)
            VM1STEP(3,KKK)=VM1STEP(3,KKK)+VEL(3,IFFAT)
            MMVSTEP(1,IFFAT,KKK)=VEL(1,IFFAT)
            MMVSTEP(2,IFFAT,KKK)=VEL(2,IFFAT)
            MMVSTEP(3,IFFAT,KKK)=VEL(3,IFFAT)
         ENDDO
      END IF
C
      VELSTEP(1,KKK) = VMMSTEP(1,KKK)
      VELSTEP(2,KKK) = VMMSTEP(2,KKK)
      VELSTEP(3,KKK) = VMMSTEP(3,KKK)
C
      IF(NAT.GT.0) THEN
         DO IAT = 1, NAT
            VQMSTEP(1,KKK)=VQMSTEP(1,KKK)+QMVEL(1,IAT)
            VQMSTEP(2,KKK)=VQMSTEP(2,KKK)+QMVEL(2,IAT)
            VQMSTEP(3,KKK)=VQMSTEP(3,KKK)+QMVEL(3,IAT)
            QMVSTEP(1,IAT,KKK)=QMVEL(1,IAT)
            QMVSTEP(2,IAT,KKK)=QMVEL(2,IAT)
            QMVSTEP(3,IAT,KKK)=QMVEL(3,IAT)
         ENDDO
         VELSTEP(1,KKK) = VELSTEP(1,KKK) + VQMSTEP(1,KKK)
         VELSTEP(2,KKK) = VELSTEP(2,KKK) + VQMSTEP(2,KKK)
         VELSTEP(3,KKK) = VELSTEP(3,KKK) + VQMSTEP(3,KKK)
         DO IAT = 1, NAT
            IF(LISTQM(NFFAT+IAT).GT.0) THEN
               VELSTEP(1,KKK) = VELSTEP(1,KKK) - QMVEL(1,IAT)
               VELSTEP(2,KKK) = VELSTEP(2,KKK) - QMVEL(2,IAT)
               VELSTEP(3,KKK) = VELSTEP(3,KKK) - QMVEL(3,IAT)
            END IF
         ENDDO
      END IF
C
      LLLAST = ((ISTEP-1)/JVIBOUT)*JVIBOUT
      IF(MOD(ISTEP,JVIBOUT).EQ.0.OR.ISTEP.EQ.NSTEP) THEN
         IF(MASWRK) THEN
            WRITE(38,'(/A,I10,A,I10/1X,A,2X,F10.6,A,
     *                20X,A,15X,A,15X,A)')
     *      ' TOTAL VELOCITY SUM                 FROM MD STEP ',
     *      LLLAST+1,' TO MD STEP ',ISTEP,
     *      'DT=',DT*2.418884326505D-02,' FS',
     *      'VELX','VELY','VELZ'
            DO JJJ = LLLAST+1, ISTEP
               WRITE(38,'(A,I10,1X,F18.10,1X,F18.10,1X,F18.10)')
     *         ' VEL MD STEP= ', JJJ,
     *         VELSTEP(1,JJJ-LLLAST),
     *         VELSTEP(2,JJJ-LLLAST),
     *         VELSTEP(3,JJJ-LLLAST)
            ENDDO
            WRITE(38,*)' '
C
            IF(NAT.GT.0) THEN
               WRITE(38,'(/A,I10,A,I10/1X,A,2X,F10.6,A,
     *                   20X,A,15X,A,15X,A)')
     *         ' QM VELOCITY SUM                    FROM MD STEP ',
     *         LLLAST+1,' TO MD STEP ',ISTEP,
     *         'DT=',DT*2.418884326505D-02,' FS',
     *         'VELX','VELY','VELZ'
               DO JJJ = LLLAST+1, ISTEP
                  WRITE(38,'(A,I10,1X,F18.10,1X,F18.10,1X,F18.10)')
     *            ' VQM MD STEP= ', JJJ,
     *            VQMSTEP(1,JJJ-LLLAST),
     *            VQMSTEP(2,JJJ-LLLAST),
     *            VQMSTEP(3,JJJ-LLLAST)
               ENDDO
               WRITE(38,*)' '
C
               WRITE(38,'(/A,I10,A,I10/1X,A,2X,F10.6,A,
     *                   20X,A,15X,A,15X,A)')
     *         ' QM VELOCITY                        FROM MD STEP ',
     *         LLLAST+1,' TO MD STEP ',ISTEP,
     *         'DT=',DT*2.418884326505D-02,' FS',
     *         'VELX','VELY','VELZ'
               DO JJJ = LLLAST+1, ISTEP
                  DO IAT = 1, NAT
                     WRITE(38,'(A,I10,1X,F18.10,1X,F18.10,1X,F18.10)')
     *               ' QMV MD STEP= ',JJJ,
     *               QMVSTEP(1,IAT,JJJ-LLLAST),
     *               QMVSTEP(2,IAT,JJJ-LLLAST),
     *               QMVSTEP(3,IAT,JJJ-LLLAST)
                  ENDDO
               ENDDO
               WRITE(38,*)' '
            END IF
C
            IF(NVIBMM.GT.0) THEN
               WRITE(38,'(/A,I10,A,I10/1X,A,2X,F10.6,A,
     *                   20X,A,15X,A,15X,A)')
     *         ' NVIBMM VELOCITY SUM                FROM MD STEP ',
     *         LLLAST+1,' TO MD STEP ',ISTEP,
     *         'DT=',DT*2.418884326505D-02,' FS',
     *         'VELX','VELY','VELZ'
               DO JJJ = LLLAST+1, ISTEP
                  WRITE(38,'(A,I10,1X,F18.10,1X,F18.10,1X,F18.10)')
     *            ' VM1 MD STEP= ', JJJ,
     *            VM1STEP(1,JJJ-LLLAST),
     *            VM1STEP(2,JJJ-LLLAST),
     *            VM1STEP(3,JJJ-LLLAST)
               ENDDO
               WRITE(38,*)' '
C
               WRITE(38,'(/A,I10,A,I10/1X,A,2X,F10.6,A,
     *                   20X,A,15X,A,15X,A)')
     *         ' NVIBMM VELOCITY                    FROM MD STEP ',
     *         LLLAST+1,' TO MD STEP ',ISTEP,
     *         'DT=',DT*2.418884326505D-02,' FS',
     *         'VELX','VELY','VELZ'
               DO JJJ = LLLAST+1, ISTEP
                  DO III = 1, NVIBMM
                     IFFAT= IVIBMM(III)
                     WRITE(38,'(A,I10,1X,F18.10,1X,F18.10,1X,F18.10)')
     *               ' MMV MD STEP= ', JJJ,
     *               MMVSTEP(1,IFFAT,JJJ-LLLAST),
     *               MMVSTEP(2,IFFAT,JJJ-LLLAST),
     *               MMVSTEP(3,IFFAT,JJJ-LLLAST)
                  ENDDO
               ENDDO
               WRITE(38,*)' '
            END IF
         END IF
         CALL VCLR(VELSTEP,1,3*JVIBOUT)
         CALL VCLR(VQMSTEP,1,3*JVIBOUT)
         CALL VCLR(VM1STEP,1,3*JVIBOUT)
         CALL VCLR(VMMSTEP,1,3*JVIBOUT)
         CALL VCLR(QMVSTEP,1,3*JVIBOUT*(NAT+1))
         CALL VCLR(MMVSTEP,1,3*JVIBOUT*(NVIBMM+1))
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK MMFFTYPE
!>                    
!> @brief    determine MMFF94 atomic types
!>                    
!> @author   Hongbo Zhu and Hui Li
!>           - Feb 2013
!>                    
!> @details  resolve MMFF94 atomic type based on atom
!>           connectivity
!>
      SUBROUTINE MMFFTYPE(CORD,ZANF,IPAIR,
     *                    KLIST,LLIST,
     *                    NTYPE,QMMFF,BORDER,
     *                    LBOND,LISTRIN,NUMRIN,
     *                    LISTRIB,NRINTYP,
     *                    NBNDT,NBNDT2,LQATOM,RQATOM,IFFPDB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, THIRD=1.0D+00/3.0D+00, ONE=1.0D+00,
     *           ONEPT5=1.5D+00, TWO=2.0D+00, THREE=3.0D+00,
     *           FOUR=4.0D+00, FIVE=5.0D+00, SIX=6.0D+00,
     *           PT5=0.5D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD(3,*),ZANF(*),IPAIR(2,*),KLIST(3,*),LLIST(4,*),
     *          NTYPE(*),QMMFF(*),LBOND(10,*),BORDER(*),
     *          LISTRIN(10,*),NUMRIN(10,*),
     *          LISTRIB(10,*),NRINTYP(*),
     *          NBNDT(4,*),NBNDT2(4,*),LQATOM(50),RQATOM(50)
      DIMENSION NLEGN2(5)
C
C     HONGBO ZHU, HUI LI, FEB 25, 2013, LINCOLN
C
      IF(MASWRK)THEN
      WRITE(IW,*)' '   
      WRITE(IW,*)'==============================================='
      WRITE(IW,*)'      MMFF94 IN QUANPOL IS IMPLEMENTED BY      '
      WRITE(IW,*)'             HONGBO ZHU AND HUI LI             '
      WRITE(IW,*)'         UNIVERSITY OF NEBRASKA-LINCOLN        '
      WRITE(IW,*)'==============================================='
      END IF
C
      IF(IFFPDB.NE.1)THEN
         CALL FFBOND(NFFAT,IPAIR,ZANF,CORD,NBOND)
      END IF
      KBOND=0
      DO IBOND=1,NBOND
         I1=IPAIR(1,IBOND)
         I2=IPAIR(2,IBOND)
         IF(NINT(ZANF(I1)).NE.26.AND.
     *      NINT(ZANF(I1)).NE.12.AND.
     *      NINT(ZANF(I1)).NE.19.AND.
     *      NINT(ZANF(I1)).NE.29.AND.
     *      NINT(ZANF(I1)).NE.11.AND.
     *      NINT(ZANF(I1)).NE.30.AND.
     *      NINT(ZANF(I1)).NE.20.AND.
     *      NINT(ZANF(I1)).NE. 3.AND.
     *      NINT(ZANF(I2)).NE.20.AND.
     *      NINT(ZANF(I2)).NE.26.AND.
     *      NINT(ZANF(I2)).NE.12.AND.
     *      NINT(ZANF(I2)).NE.19.AND.
     *      NINT(ZANF(I2)).NE.29.AND.
     *      NINT(ZANF(I2)).NE.11.AND.
     *      NINT(ZANF(I2)).NE.30.AND.
     *      NINT(ZANF(I2)).NE. 3     ) THEN
            KBOND=KBOND+1
            IPAIR(1,KBOND)=I1
            IPAIR(2,kBOND)=I2
         END IF
      ENDDO
      DO IBOND=KBOND+1,NBOND
         IPAIR(1,IBOND)=0
         IPAIR(2,IBOND)=0
      ENDDO
      NBOND=KBOND
      CALL FFANGL(IPAIR,NBOND,KLIST,NANGL)
      CALL FFDIHR(KLIST,NANGL,LLIST,NDIHR)
C
      CALL VICLR(NTYPE   ,1,   NFFAT)
      CALL VICLR(NBNDT   ,1, 4*NFFAT)
      CALL VICLR(NBNDT2  ,1, 4*NFFAT)
      CALL VCLR (QMMFF   ,1,   NFFAT)
      CALL VICLR(LBOND   ,1,10*NFFAT)
      CALL VCLR (BORDER  ,1,   NBOND)
      CALL VICLR(LISTRIN ,1,10*NFFAT)
      CALL VICLR(LISTRIB ,1,10*NFFAT)
      CALL VICLR(NUMRIN  ,1,10*NFFAT)
      CALL VICLR(NRINTYP ,1,   NFFAT)
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.26) QMMFF(IFFAT)=3.0D+00
         IF(NINT(ZANF(IFFAT)).EQ.29) QMMFF(IFFAT)=2.0D+00
      ENDDO
      DO I=1,50
         IF(LQATOM(I).GT.0) QMMFF(LQATOM(I))=RQATOM(I)
      ENDDO
C
C     -- DETERMINE RINGS --
C
      NRING = 0
C     FIND RINGS IN MOLECULE
C     - THREE MEMBER RING
      DO IANGL=1,NANGL
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL)
         DO IBOND=1,NBOND
            I1=IPAIR(1,IBOND)
            I2=IPAIR(2,IBOND)
            IF(I1.EQ.K1.AND.I2.EQ.K3) THEN
               NRING = NRING + 1
               LISTRIN(10,NRING) = 3
               LISTRIN(1 ,NRING) = K1
               LISTRIN(2 ,NRING) = K2
               LISTRIN(3 ,NRING) = K3
               MADD   =1
               MCHECK1=1
               MCHECK2=1
               DO I=1,LISTRIN(10,NRING)
                  MCHECK1=MCHECK1+LISTRIN(I,NRING)
                  MCHECK2=MCHECK2*(MOD(LISTRIN(I,NRING),100)+1)
               ENDDO
               DO IRING=1,NRING-1
                  IF(LISTRIN(10,IRING).EQ.LISTRIN(10,NRING)) THEN
                     LCHECK1=1
                     LCHECK2=1
                     DO I=1,LISTRIN(10,IRING)
                        LCHECK1=LCHECK1+LISTRIN(I,IRING)
                        LCHECK2=LCHECK2*(MOD(LISTRIN(I,IRING),100)+1)
                     ENDDO
                     IF(LCHECK1.EQ.MCHECK1.AND.LCHECK2.EQ.MCHECK2)
     *                  MADD=0
                  END IF
               ENDDO
               IF(MADD.EQ.0) THEN
                  DO I=1,10
                     LISTRIN(I,NRING)=0
                  ENDDO
                  NRING=NRING-1
               ELSE
                  NUMRIN(10,K1) = NUMRIN(10,K1) + 1
                  NUMRIN(NUMRIN(10,K1),K1) = NRING
                  NUMRIN(10,K2) = NUMRIN(10,K2) + 1
                  NUMRIN(NUMRIN(10,K2),K2) = NRING
                  NUMRIN(10,K3) = NUMRIN(10,K3) + 1
                  NUMRIN(NUMRIN(10,K3),K3) = NRING
               END IF
            END IF
         ENDDO
      ENDDO
C
C     - FOUR MEMBER RING
      DO IANGL=1,NANGL
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL)
         DO JANGL=1,NANGL
            KK1=KLIST(1,JANGL)
            KK2=KLIST(2,JANGL)
            KK3=KLIST(3,JANGL)
            IF(KK1.EQ.K1.AND.KK3.EQ.K3.AND.KK2.NE.K2)THEN
               NRING = NRING + 1
               LISTRIN(10,NRING) = 4
               LISTRIN(1 ,NRING) = K1
               LISTRIN(2 ,NRING) = K2
               LISTRIN(3 ,NRING) = K3
               LISTRIN(4 ,NRING) = KK2
               LCBOND=0
               DO JBOND=1,NBOND
                  I1=IPAIR(1,JBOND)
                  I2=IPAIR(2,JBOND)
                  DO I=1,LISTRIN(10,NRING)
                     IFFAT = LISTRIN(I,NRING)
                     DO J=I+1,LISTRIN(10,NRING)
                        JFFAT = LISTRIN(J,NRING)
                        IF((IFFAT.EQ.I1.AND.JFFAT.EQ.I2).OR.
     *                     (IFFAT.EQ.I2.AND.JFFAT.EQ.I1)    )
     *                  LCBOND=LCBOND+1
                     ENDDO
                  ENDDO
               ENDDO
               MADD   =1
               MCHECK1=1
               MCHECK2=1
               DO I=1,LISTRIN(10,NRING)
                  MCHECK1=MCHECK1+LISTRIN(I,NRING)
                  MCHECK2=MCHECK2*(MOD(LISTRIN(I,NRING),100)+1)
               ENDDO
               DO IRING=1,NRING-1
                  IF(LISTRIN(10,IRING).EQ.LISTRIN(10,NRING)) THEN
                     LCHECK1=1
                     LCHECK2=1
                     DO I=1,LISTRIN(10,IRING)
                        LCHECK1=LCHECK1+LISTRIN(I,IRING)
                        LCHECK2=LCHECK2*(MOD(LISTRIN(I,IRING),100)+1)
                     ENDDO
                     IF(LCHECK1.EQ.MCHECK1.AND.LCHECK2.EQ.MCHECK2)
     *                  MADD=0
                  END IF
               ENDDO
               IF(MADD.EQ.0.OR.LCBOND.GT.LISTRIN(10,NRING))THEN
                  DO I=1,10
                     LISTRIN(I,NRING)=0
                  ENDDO
                  NRING=NRING-1
               ELSE
                  NUMRIN(10,K1) = NUMRIN(10,K1 ) + 1
                  NUMRIN(NUMRIN(10,K1),K1  ) = NRING
                  NUMRIN(10,K2) = NUMRIN(10,K2 ) + 1
                  NUMRIN(NUMRIN(10,K2),K2  ) = NRING
                  NUMRIN(10,K3) = NUMRIN(10,K3 ) + 1
                  NUMRIN(NUMRIN(10,K3),K3  ) = NRING
                  NUMRIN(10,KK2)= NUMRIN(10,KK2) + 1
                  NUMRIN(NUMRIN(10,KK2),KK2) = NRING
               END IF
            END IF
         ENDDO
      ENDDO
C
C     - FIVE MEMBER RING
      DO IANGL=1,NANGL
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL)
         DO IDIHR=1,NDIHR
            L1=LLIST(1,IDIHR)
            L2=LLIST(2,IDIHR)
            L3=LLIST(3,IDIHR)
            L4=LLIST(4,IDIHR)
            IF(L1.EQ.K1.AND.L4.EQ.K3.AND.L2.NE.K2.AND.L3.NE.K2) THEN
               NRING = NRING + 1
               LISTRIN(10,NRING) = 5
               LISTRIN(1 ,NRING) = K1
               LISTRIN(2 ,NRING) = K2
               LISTRIN(3 ,NRING) = K3
               LISTRIN(4 ,NRING) = L3
               LISTRIN(5 ,NRING) = L2
               LCBOND=0
               DO JBOND=1,NBOND
                  I1=IPAIR(1,JBOND)
                  I2=IPAIR(2,JBOND)
                  DO I=1,LISTRIN(10,NRING)
                     IFFAT = LISTRIN(I,NRING)
                     DO J=I+1,LISTRIN(10,NRING)
                        JFFAT = LISTRIN(J,NRING)
                        IF((IFFAT.EQ.I1.AND.JFFAT.EQ.I2).OR.
     *                     (IFFAT.EQ.I2.AND.JFFAT.EQ.I1)    )
     *                  LCBOND=LCBOND+1
                     ENDDO
                  ENDDO
               ENDDO
               MADD   =1
               MCHECK1=1
               MCHECK2=1
               DO I=1,LISTRIN(10,NRING)
                  MCHECK1=MCHECK1+LISTRIN(I,NRING)
                  MCHECK2=MCHECK2*(MOD(LISTRIN(I,NRING),100)+1)
               ENDDO
               DO IRING=1,NRING-1
                  IF(LISTRIN(10,IRING).EQ.LISTRIN(10,NRING)) THEN
                     LCHECK1=1
                     LCHECK2=1
                     DO I=1,LISTRIN(10,IRING)
                        LCHECK1=LCHECK1+LISTRIN(I,IRING)
                        LCHECK2=LCHECK2*(MOD(LISTRIN(I,IRING),100)+1)
                     ENDDO
                     IF(LCHECK1.EQ.MCHECK1.AND.LCHECK2.EQ.MCHECK2)
     *                  MADD=0
                  END IF
               ENDDO
               IF(MADD.EQ.0.OR.LCBOND.GT.LISTRIN(10,NRING))THEN
                  DO I=1,10
                     LISTRIN(I,NRING)=0
                  ENDDO
                  NRING=NRING-1
               ELSE
                  NUMRIN(10,K1) = NUMRIN(10,K1) + 1
                  NUMRIN(NUMRIN(10,K1),K1) = NRING
                  NUMRIN(10,K2) = NUMRIN(10,K2) + 1
                  NUMRIN(NUMRIN(10,K2),K2) = NRING
                  NUMRIN(10,K3) = NUMRIN(10,K3) + 1
                  NUMRIN(NUMRIN(10,K3),K3) = NRING
                  NUMRIN(10,L3) = NUMRIN(10,L3) + 1
                  NUMRIN(NUMRIN(10,L3),L3) = NRING
                  NUMRIN(10,L2) = NUMRIN(10,L2) + 1
                  NUMRIN(NUMRIN(10,L2),L2) = NRING
               END IF
            END IF
         ENDDO
      ENDDO
C
C     - SIX   MEMBER RING
C
      DO IDIHR=1,NDIHR
         L1=LLIST(1,IDIHR)
         L2=LLIST(2,IDIHR)
         L3=LLIST(3,IDIHR)
         L4=LLIST(4,IDIHR)
         DO JDIHR=1,NDIHR
            LL1=LLIST(1,JDIHR)
            LL2=LLIST(2,JDIHR)
            LL3=LLIST(3,JDIHR)
            LL4=LLIST(4,JDIHR)
            IF(LL1.EQ.L1.AND.LL4.EQ.L4.AND.LL2.NE.L2.AND.LL3.NE.L3)THEN
               NRING = NRING + 1
               LISTRIN(10,NRING) = 6
               LISTRIN(1 ,NRING) = L1
               LISTRIN(2 ,NRING) = L2
               LISTRIN(3 ,NRING) = L3
               LISTRIN(4 ,NRING) = L4
               LISTRIN(5 ,NRING) = LL3
               LISTRIN(6 ,NRING) = LL2
               LCBOND=0
               DO JBOND=1,NBOND
                  I1=IPAIR(1,JBOND)
                  I2=IPAIR(2,JBOND)
                  DO I=1,LISTRIN(10,NRING)
                     IFFAT = LISTRIN(I,NRING)
                     DO J=I+1,LISTRIN(10,NRING)
                        JFFAT = LISTRIN(J,NRING)
                        IF((IFFAT.EQ.I1.AND.JFFAT.EQ.I2).OR.
     *                     (IFFAT.EQ.I2.AND.JFFAT.EQ.I1)    )
     *                  LCBOND=LCBOND+1
                     ENDDO
                  ENDDO
               ENDDO
               MADD   =1
               MCHECK1=1
               MCHECK2=1
               DO I=1,LISTRIN(10,NRING)
                  MCHECK1=MCHECK1+LISTRIN(I,NRING)
                  MCHECK2=MCHECK2*(MOD(LISTRIN(I,NRING),100)+1)
               ENDDO
               DO IRING=1,NRING-1
                  IF(LISTRIN(10,IRING).EQ.LISTRIN(10,NRING)) THEN
                     LCHECK1=1
                     LCHECK2=1
                     DO I=1,LISTRIN(10,IRING)
                        LCHECK1=LCHECK1+LISTRIN(I,IRING)
                        LCHECK2=LCHECK2*(MOD(LISTRIN(I,IRING),100)+1)
                     ENDDO
                     IF(LCHECK1.EQ.MCHECK1.AND.LCHECK2.EQ.MCHECK2)
     *                  MADD=0
                  END IF
               ENDDO
               LCOUNT=0
               IF(NUMRIN(10,L1).GE.1.AND.
     *            NUMRIN(10,L2).GE.1.AND.
     *            NUMRIN(10,L3).GE.1.AND.
     *            NUMRIN(10,L4).GE.1     )THEN
                  DO K1=1,NUMRIN(10,L1)
                     DO K2=1,NUMRIN(10,L2)
                        DO K3=1,NUMRIN(10,L3)
                           DO K4=1,NUMRIN(10,L4)
                              IF(NUMRIN(K4,L4).EQ.NUMRIN(K2,L2).AND.
     *                           NUMRIN(K4,L4).EQ.NUMRIN(K1,L1).AND.
     *                           NUMRIN(K4,L4).EQ.NUMRIN(K3,L3)     )
     *                           LCOUNT=NUMRIN(K4,L4)
                           ENDDO
                        ENDDO
                     ENDDO
                  ENDDO
               END IF
               IF(LISTRIN(10,LCOUNT).GE.3.AND.
     *            LISTRIN(10,LCOUNT).LT.6.AND.LCOUNT.NE.0) MADD=0
               IF(MADD.EQ.0.OR.LCBOND.GT.LISTRIN(10,NRING))THEN
                  DO I=1,10
                     LISTRIN(I,NRING)=0
                  ENDDO
                  NRING=NRING-1
               ELSE
                  NUMRIN(10,L1) = NUMRIN(10,L1) + 1
                  NUMRIN(NUMRIN(10,L1),L1) = NRING
                  NUMRIN(10,L2) = NUMRIN(10,L2) + 1
                  NUMRIN(NUMRIN(10,L2),L2) = NRING
                  NUMRIN(10,L3) = NUMRIN(10,L3) + 1
                  NUMRIN(NUMRIN(10,L3),L3) = NRING
                  NUMRIN(10,L4) = NUMRIN(10,L4) + 1
                  NUMRIN(NUMRIN(10,L4),L4) = NRING
                  NUMRIN(10,LL3) = NUMRIN(10,LL3) + 1
                  NUMRIN(NUMRIN(10,LL3),LL3) = NRING
                  NUMRIN(10,LL2) = NUMRIN(10,LL2) + 1
                  NUMRIN(NUMRIN(10,LL2),LL2) = NRING
               END IF
            END IF
         ENDDO
      ENDDO
C
C     - SEVEN MEMBER RING
C     - EIGHT MEMBER RING
C
      DO IDIHR=1,NDIHR
         L1=LLIST(1,IDIHR)
         L2=LLIST(2,IDIHR)
         L3=LLIST(3,IDIHR)
         L4=LLIST(4,IDIHR)
         DO JDIHR=1,NDIHR
            LL1=LLIST(1,JDIHR)
            LL2=LLIST(2,JDIHR)
            LL3=LLIST(3,JDIHR)
            LL4=LLIST(4,JDIHR)
            IF(LL1.EQ.L1.AND.LL2.NE.L2.AND.LL3.NE.L3.AND.L4.NE.LL4)THEN
               DO IBOND=1,NBOND
                  I1=IPAIR(1,IBOND)
                  I2=IPAIR(2,IBOND)
                  IF((I1.EQ.L4.AND.I2.EQ.LL4).OR.
     *               (I2.EQ.L4.AND.I1.EQ.LL4)    ) THEN
                     NRING = NRING + 1
                     LISTRIN(10,NRING) = 7
                     LISTRIN(1 ,NRING) = L1
                     LISTRIN(2 ,NRING) = L2
                     LISTRIN(3 ,NRING) = L3
                     LISTRIN(4 ,NRING) = L4
                     LISTRIN(5 ,NRING) = LL4
                     LISTRIN(6 ,NRING) = LL3
                     LISTRIN(7 ,NRING) = LL2
                     LCBOND=0
                     DO JBOND=1,NBOND
                        I1=IPAIR(1,JBOND)
                        I2=IPAIR(2,JBOND)
                        DO I=1,LISTRIN(10,NRING)
                           IFFAT = LISTRIN(I,NRING)
                           DO J=I+1,LISTRIN(10,NRING)
                              JFFAT = LISTRIN(J,NRING)
                              IF((IFFAT.EQ.I1.AND.JFFAT.EQ.I2).OR.
     *                           (IFFAT.EQ.I2.AND.JFFAT.EQ.I1)    )
     *                        LCBOND=LCBOND+1
                           ENDDO
                        ENDDO
                     ENDDO
                     MADD   =1
                     MCHECK1=1
                     MCHECK2=1
                     DO I=1,LISTRIN(10,NRING)
                        MCHECK1=MCHECK1+LISTRIN(I,NRING)
                        MCHECK2=MCHECK2*(MOD(LISTRIN(I,NRING),100)+1)
                     ENDDO
                     DO IRING=1,NRING-1
                        IF(LISTRIN(10,IRING).EQ.LISTRIN(10,NRING)) THEN
                           LCHECK1=1
                           LCHECK2=1
                           DO I=1,LISTRIN(10,IRING)
                              LCHECK1=LCHECK1+LISTRIN(I,IRING)
                              LCHECK2=
     *                        LCHECK2*(MOD(LISTRIN(I,IRING),100)+1)
                           ENDDO
                     IF(LCHECK1.EQ.MCHECK1.AND.LCHECK2.EQ.MCHECK2)
     *                  MADD=0
                        END IF
                     ENDDO
                     DO M=1,7
                        MBEFO=M-1
                        IF(MBEFO.EQ.0) MBEFO=7
                        MBEFO2=MBEFO-1
                        IF(MBEFO2.EQ.0) MBEFO2=7
                        DO JJ=1,NUMRIN(10,LISTRIN(M,NRING))
                           DO KK=1,NUMRIN(10,LISTRIN(MBEFO2,NRING))
                              IF(NUMRIN(JJ,LISTRIN(M,NRING)).EQ.
     *                           NUMRIN(KK,LISTRIN(MBEFO2,NRING)) )
     *                           MADD=0
                           ENDDO
                        ENDDO
                     ENDDO
                     IF(MADD.EQ.0.OR.LCBOND.GT.LISTRIN(10,NRING))THEN
                        DO I=1,10
                           LISTRIN(I,NRING)=0
                        ENDDO
                        NRING=NRING-1
                     ELSE
                        NUMRIN(10,L1) = NUMRIN(10,L1) + 1
                        NUMRIN(NUMRIN(10,L1),L1) = NRING
                        NUMRIN(10,L2) = NUMRIN(10,L2) + 1
                        NUMRIN(NUMRIN(10,L2),L2) = NRING
                        NUMRIN(10,L3) = NUMRIN(10,L3) + 1
                        NUMRIN(NUMRIN(10,L3),L3) = NRING
                        NUMRIN(10,L4) = NUMRIN(10,L4) + 1
                        NUMRIN(NUMRIN(10,L4),L4) = NRING
                        NUMRIN(10,LL4) = NUMRIN(10,LL4) + 1
                        NUMRIN(NUMRIN(10,LL4),LL4) = NRING
                        NUMRIN(10,LL3) = NUMRIN(10,LL3) + 1
                        NUMRIN(NUMRIN(10,LL3),LL3) = NRING
                        NUMRIN(10,LL2) = NUMRIN(10,LL2) + 1
                        NUMRIN(NUMRIN(10,LL2),LL2) = NRING
                     END IF
                  END IF
               ENDDO
               DO IANGL=1,NANGL
                  K1   =KLIST(1,IANGL)
                  K2   =KLIST(2,IANGL)
                  K3   =KLIST(3,IANGL)
                  IF(K2.NE.L2.AND.K2.NE.L3.AND.K2.NE.LL2.AND.
     *               K2.NE.LL3.AND. ((K1.EQ.L4.AND.K3.EQ.LL4).OR.
     *                               (K1.EQ.LL4.AND.K3.EQ.L4))   )THEN
                     NRING = NRING + 1
                     LISTRIN(10,NRING) = 8
                     LISTRIN(1 ,NRING) = L1
                     LISTRIN(2 ,NRING) = L2
                     LISTRIN(3 ,NRING) = L3
                     LISTRIN(4 ,NRING) = L4
                     LISTRIN(5 ,NRING) = K2
                     LISTRIN(6 ,NRING) = LL4
                     LISTRIN(7 ,NRING) = LL3
                     LISTRIN(8 ,NRING) = LL2
                     LCBOND=0
                     DO JBOND=1,NBOND
                        I1=IPAIR(1,JBOND)
                        I2=IPAIR(2,JBOND)
                        DO I=1,LISTRIN(10,NRING)
                           IFFAT = LISTRIN(I,NRING)
                           DO J=I+1,LISTRIN(10,NRING)
                              JFFAT = LISTRIN(J,NRING)
                              IF((IFFAT.EQ.I1.AND.JFFAT.EQ.I2).OR.
     *                           (IFFAT.EQ.I2.AND.JFFAT.EQ.I1)    )
     *                        LCBOND=LCBOND+1
                           ENDDO
                        ENDDO
                     ENDDO
                     MADD   =1
                     MCHECK1=1
                     MCHECK2=1
                     DO I=1,LISTRIN(10,NRING)
                        MCHECK1=MCHECK1+LISTRIN(I,NRING)
                        MCHECK2=MCHECK2*(MOD(LISTRIN(I,NRING),100)+1)
                     ENDDO
                     DO IRING=1,NRING-1
                        IF(LISTRIN(10,IRING).EQ.LISTRIN(10,NRING)) THEN
                           LCHECK1=1
                           LCHECK2=1
                           DO I=1,LISTRIN(10,IRING)
                              LCHECK1=LCHECK1+LISTRIN(I,IRING)
                              LCHECK2=
     *                        LCHECK2*(MOD(LISTRIN(I,IRING),100)+1)
                           ENDDO
                     IF(LCHECK1.EQ.MCHECK1.AND.LCHECK2.EQ.MCHECK2)
     *                  MADD=0
                        END IF
                     ENDDO
                     DO M=1,8
                        MBEFO=M-1
                        IF(MBEFO.EQ.0) MBEFO=8
                        MBEFO2=MBEFO-1
                        IF(MBEFO2.EQ.0) MBEFO2=8
                        DO JJ=1,NUMRIN(10,LISTRIN(M,NRING))
                           DO KK=1,NUMRIN(10,LISTRIN(MBEFO2,NRING))
                              IF(NUMRIN(JJ,LISTRIN(M,NRING)).EQ. 
     *                           NUMRIN(KK,LISTRIN(MBEFO2,NRING)) )
     *                           MADD=0
                           ENDDO
                        ENDDO
                     ENDDO
                     IF(MADD.EQ.0.OR.LCBOND.GT.LISTRIN(10,NRING))THEN
                        DO I=1,10
                           LISTRIN(I,NRING)=0
                        ENDDO
                        NRING=NRING-1
                     ELSE
                        NUMRIN(10,L1) = NUMRIN(10,L1) + 1
                        NUMRIN(NUMRIN(10,L1),L1) = NRING
                        NUMRIN(10,L2) = NUMRIN(10,L2) + 1
                        NUMRIN(NUMRIN(10,L2),L2) = NRING
                        NUMRIN(10,L3) = NUMRIN(10,L3) + 1
                        NUMRIN(NUMRIN(10,L3),L3) = NRING
                        NUMRIN(10,L4) = NUMRIN(10,L4) + 1
                        NUMRIN(NUMRIN(10,L4),L4) = NRING
                        NUMRIN(10,K2) = NUMRIN(10,K2) + 1
                        NUMRIN(NUMRIN(10,K2),K2) = NRING
                        NUMRIN(10,LL4) = NUMRIN(10,LL4) + 1
                        NUMRIN(NUMRIN(10,LL4),LL4) = NRING
                        NUMRIN(10,LL3) = NUMRIN(10,LL3) + 1
                        NUMRIN(NUMRIN(10,LL3),LL3) = NRING
                        NUMRIN(10,LL2) = NUMRIN(10,LL2) + 1
                        NUMRIN(NUMRIN(10,LL2),LL2) = NRING
                     END IF
                  END IF
               ENDDO
            END IF
         ENDDO
      ENDDO
C
      IF(NRING.GT.0) THEN
         DO IRING=1,NRING
            MB=LISTRIN(10,IRING)
            DO M=1,MB
               IFFAT = LISTRIN(M,IRING)
               MNEXT = M+1
               IF(M.EQ.MB) MNEXT=1
               JFFAT = LISTRIN(MNEXT,IRING)
               DO IBOND=1,NBOND
                  I1=IPAIR(1,IBOND)
                  I2=IPAIR(2,IBOND)
                  IF((IFFAT.EQ.I1.AND.JFFAT.EQ.I2).OR.
     *               (IFFAT.EQ.I2.AND.JFFAT.EQ.I1)   )
     *               LISTRIB(M,IRING)=IBOND
               ENDDO
            ENDDO
         ENDDO
      END IF
C
C     -- DETERMINE BOND ATOMS AND SOME 1ST ORDER BONDS --
C
      ICASE=0
      JCASE=0
 950  CONTINUE
      DO IBOND=1,NBOND
         I1=IPAIR(1,IBOND)
         I2=IPAIR(2,IBOND)
         LBOND(10,I1)=LBOND(10,I1)+1
         IF(LBOND(10,I1).GT.9)THEN
            IF(MASWRK)WRITE(IW,'(/1X,A,I8,A/)')
     *      ' ERROR: ATOM ',I1,' FORMS MORE THAN 9 BONDS.'
            IF(MASWRK)THEN
            DO JJJ=1,LBOND(10,I1)
            WRITE(*,*) IPAIR(1,LBOND(JJJ,I1)),
     *                 IPAIR(2,LBOND(JJJ,I1)),LBOND(JJJ,I1)
            ENDDO
            END IF
            CALL ABRT
         END IF
         LBOND(LBOND(10,I1),I1)=IBOND
         LBOND(10,I2)=LBOND(10,I2)+1
         IF(LBOND(10,I2).GT.9)THEN
            IF(MASWRK)WRITE(IW,'(/1X,A,I8,A/)')
     *      ' ERROR: ATOM ',I2,' FORMS MORE THAN 9 BONDS.'
            IF(MASWRK)THEN
            DO JJJ=1,LBOND(10,I2)
            WRITE(*,*) IPAIR(1,LBOND(JJJ,I2)),
     *                 IPAIR(2,LBOND(JJJ,I2)),LBOND(JJJ,I2)
            ENDDO
            END IF
            CALL ABRT
         END IF
         LBOND(LBOND(10,I2),I2)=IBOND
C
         IF(NINT(ZANF(I1)).EQ.1.OR.
     *      NINT(ZANF(I2)).EQ.1.OR.
     *      NINT(ZANF(I1)).EQ.9.OR.
     *      NINT(ZANF(I2)).EQ.9    ) THEN
            BORDER(IBOND) = ONE
         END IF
         IF((NINT(ZANF(I1)).EQ.17.AND.NINT(ZANF(I2)).EQ. 6).OR.
     *      (NINT(ZANF(I2)).EQ.17.AND.NINT(ZANF(I1)).EQ. 6).OR.
     *      (NINT(ZANF(I1)).EQ.35.AND.NINT(ZANF(I2)).EQ. 6).OR.
     *      (NINT(ZANF(I2)).EQ.35.AND.NINT(ZANF(I1)).EQ. 6).OR.
     *      (NINT(ZANF(I1)).EQ.53.AND.NINT(ZANF(I2)).EQ. 6).OR.
     *      (NINT(ZANF(I2)).EQ.53.AND.NINT(ZANF(I1)).EQ. 6)    )THEN
            BORDER(IBOND) = ONE
         END IF
         IF((NINT(ZANF(I1)).EQ.17.AND.NINT(ZANF(I2)).EQ. 7).OR.
     *      (NINT(ZANF(I2)).EQ.17.AND.NINT(ZANF(I1)).EQ. 7).OR.
     *      (NINT(ZANF(I1)).EQ.35.AND.NINT(ZANF(I2)).EQ. 7).OR.
     *      (NINT(ZANF(I2)).EQ.35.AND.NINT(ZANF(I1)).EQ. 7).OR.
     *      (NINT(ZANF(I1)).EQ.53.AND.NINT(ZANF(I2)).EQ. 7).OR.
     *      (NINT(ZANF(I2)).EQ.53.AND.NINT(ZANF(I1)).EQ. 7)    )THEN
            BORDER(IBOND) = ONE
         END IF
         IF((NINT(ZANF(I1)).EQ.17.AND.NINT(ZANF(I2)).EQ.14).OR.
     *      (NINT(ZANF(I2)).EQ.17.AND.NINT(ZANF(I1)).EQ.14).OR.
     *      (NINT(ZANF(I1)).EQ.35.AND.NINT(ZANF(I2)).EQ.14).OR.
     *      (NINT(ZANF(I2)).EQ.35.AND.NINT(ZANF(I1)).EQ.14).OR.
     *      (NINT(ZANF(I1)).EQ.53.AND.NINT(ZANF(I2)).EQ.14).OR.
     *      (NINT(ZANF(I2)).EQ.53.AND.NINT(ZANF(I1)).EQ.14)    )THEN
            BORDER(IBOND) = ONE
         END IF
         IF((NINT(ZANF(I1)).EQ.17.AND.NINT(ZANF(I2)).EQ.15).OR.
     *      (NINT(ZANF(I2)).EQ.17.AND.NINT(ZANF(I1)).EQ.15).OR.
     *      (NINT(ZANF(I1)).EQ.35.AND.NINT(ZANF(I2)).EQ.15).OR.
     *      (NINT(ZANF(I2)).EQ.35.AND.NINT(ZANF(I1)).EQ.15).OR.
     *      (NINT(ZANF(I1)).EQ.53.AND.NINT(ZANF(I2)).EQ.15).OR.
     *      (NINT(ZANF(I2)).EQ.53.AND.NINT(ZANF(I1)).EQ.15)    )THEN
            BORDER(IBOND) = ONE
         END IF
         IF((NINT(ZANF(I1)).EQ.17.AND.NINT(ZANF(I2)).EQ.16).OR.
     *      (NINT(ZANF(I2)).EQ.17.AND.NINT(ZANF(I1)).EQ.16).OR.
     *      (NINT(ZANF(I1)).EQ.35.AND.NINT(ZANF(I2)).EQ.16).OR.
     *      (NINT(ZANF(I2)).EQ.35.AND.NINT(ZANF(I1)).EQ.16).OR.
     *      (NINT(ZANF(I1)).EQ.53.AND.NINT(ZANF(I2)).EQ.16).OR.
     *      (NINT(ZANF(I2)).EQ.53.AND.NINT(ZANF(I1)).EQ.16)    )THEN
            BORDER(IBOND) = ONE
         END IF
      ENDDO
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         DO M=1,MB
            MBEFO=M-1
            IF(MBEFO.EQ.0) MBEFO=MB
            J       = LISTRIN(M     ,IRING)
            IF(NINT(ZANF(J)).EQ.16.OR.
     *         NINT(ZANF(J)).EQ.8     ) THEN
               BORDER(LISTRIB(M     ,IRING))=ONE
               BORDER(LISTRIB(MBEFO ,IRING))=ONE
            END IF
         ENDDO
      ENDDO
      DO IFFAT=1,NFFAT
         IF((NINT(ZANF(IFFAT)).EQ.8.OR.NINT(ZANF(IFFAT)).EQ.16).AND.
     *       LBOND(10,IFFAT).EQ.1.AND.
     *       QMMFF(IFFAT).EQ.-ONE)
     *       BORDER(LBOND(1,IFFAT))=ONE
         IF((NINT(ZANF(IFFAT)).EQ.8.OR.NINT(ZANF(IFFAT)).EQ.16).AND.
     *       LBOND(10,IFFAT).EQ.2.AND.
     *       QMMFF(IFFAT).EQ.ONE)THEN
             BTHERE=THREE
             LHIDY=0
             DO I=1,2
                KBOND=LBOND(I,IFFAT)
                IF(BORDER(KBOND).LT.0.1D-10) LHIDY=LHIDY+1
                BTHERE=BTHERE-BORDER(KBOND)
             ENDDO
             IF(LHIDY.EQ.1)THEN
             DO I=1,2
                KBOND=LBOND(I,IFFAT)
                IF(BORDER(KBOND).LT.0.1D-10)
     *          BORDER(KBOND)=BTHERE
             ENDDO
             END IF
         END IF
         IF((NINT(ZANF(IFFAT)).EQ.8.OR.NINT(ZANF(IFFAT)).EQ.16).AND.
     *       LBOND(10,IFFAT).EQ.1.AND.
     *       ABS(BORDER(LBOND(1,IFFAT))-ONE).LT.0.1D-10)
     *       QMMFF(IFFAT)=-ONE
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.2.AND.
     *      QMMFF(IFFAT).EQ.-ONE )THEN
            BORDER(LBOND(1,IFFAT))=ONE
            BORDER(LBOND(2,IFFAT))=ONE
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.2.AND. 
     *      QMMFF(IFFAT).EQ.ONE )THEN
            BORDER(LBOND(1,IFFAT))=TWO
            BORDER(LBOND(2,IFFAT))=TWO
         END IF
      ENDDO
C
C     -- DETERMINE MORE BONDS --
C
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.3)THEN
            LOXY1=0
            LOXY2=0
            LOXY1C=0
            JBONDO1=0
            JBONDO2=0
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)THEN
                  LOXY1=LOXY1+1
                  JBONDO1=KBOND
               END IF
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1.AND.
     *            QMMFF(JFFAT).EQ.-ONE)THEN
                  LOXY1C=LOXY1C+1
               END IF
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.2)THEN
                  LOXY2=LOXY2+1
                  JBONDO2=KBOND
               END IF
            ENDDO
            IF(LOXY1.EQ.1.AND.LOXY2.EQ.1.AND.LOXY1C.EQ.0)THEN
               BORDER(JBONDO1)=TWO
               BORDER(JBONDO2)=ONE
            END IF
            IF(LOXY1.EQ.1.AND.LOXY2.EQ.1.AND.LOXY1C.EQ.1.AND.
     *         NUMRIN(10,IFFAT).GT.0)THEN
               BORDER(JBONDO1)=ONE
               BORDER(JBONDO2)=ONE
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.4)THEN
            LOXY=0
            DO I=1,LBOND(10,IFFAT)
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)
     *         LOXY=LOXY+1
            ENDDO
            IF(LOXY.EQ.1)THEN
            DO I=1,LBOND(10,IFFAT)
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)THEN
                  BORDER(KBOND)=TWO
               ELSE
                  BORDER(KBOND)=ONE
               END IF
            ENDDO
            END IF
            IF(LOXY.EQ.0)THEN
            DO I=1,LBOND(10,IFFAT)
               BORDER(LBOND(I,IFFAT))=ONE
            ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.4)THEN
            DO I=1,LBOND(10,IFFAT)
               BORDER(LBOND(I,IFFAT))=ONE
            ENDDO
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.1)THEN
            KBOND=LBOND(1,IFFAT)
            JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
            IF(NINT(ZANF(JFFAT)).EQ.6) THEN
               BORDER(LBOND(1,IFFAT))=THREE
            END IF
         END IF
C        - ACID RADICAL
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.3)THEN
            NOXY = 0
            NTWO = 0
            NS1L = 0
            DO I=1,LBOND(10,IFFAT)
               KBOND = LBOND(I,IFFAT)
               JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.QMMFF(JFFAT).EQ.ZERO)THEN
                  NOXY=NOXY+1
                  IF(LBOND(10,JFFAT).EQ.2)NTWO=NTWO+1
               END IF
               IF(NINT(ZANF(JFFAT)).EQ.16.AND.
     *            LBOND(10,JFFAT).EQ.1) NS1L=NS1L+1
            ENDDO
            IF(NS1L.EQ.2)THEN
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.16.AND.
     *            LBOND(10,JFFAT).EQ.1) BORDER(LBOND(1,JFFAT))=ONEPT5
               ENDDO
            END IF
            IF(NOXY.EQ.1.AND.NTWO.EQ.0)THEN
               JC = 0
               JN = 0
               JP = 0
               JS = 0
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ. 6) JC = JC + 1
                  IF(NINT(ZANF(JFFAT)).EQ. 7) JN = JN + 1
                  IF(NINT(ZANF(JFFAT)).EQ.15) JP = JP + 1
                  IF(NINT(ZANF(JFFAT)).EQ.16) JS = JS + 1
               ENDDO
               IF((JC.EQ.1.AND.JN.EQ.1).OR.JN.EQ.2)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND = LBOND(I,IFFAT)
                     JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ.6) 
     *                  BORDER(KBOND) = ONE
                     IF(NINT(ZANF(JFFAT)).EQ.7) 
     *                  BORDER(KBOND) = ONE
                     IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                  ABS(QMMFF(JFFAT)).LT.0.1D-10)
     *                  BORDER(KBOND) = TWO
                  ENDDO
               END IF
            END IF
            IF(NOXY.EQ.2.AND.NTWO.EQ.0)THEN
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8)THEN
                     BORDER(KBOND) = ONEPT5
                  ELSE
                     BORDER(KBOND) = ONE
                  END IF
               ENDDO
            END IF
            IF(NOXY.EQ.2.AND.NTWO.EQ.1)THEN
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8)THEN
                     IF(LBOND(10,JFFAT).EQ.2)THEN
                        BORDER(KBOND) = ONE
                        DO J=1,LBOND(10,JFFAT)
                           IF(BORDER(LBOND(J,JFFAT)).EQ.ZERO)
     *                        BORDER(LBOND(J,JFFAT))=ONE
                        ENDDO
                     END IF
                  END IF
               ENDDO
            END IF
         END IF
         IF(NUMRIN(10,IFFAT).EQ.0.AND.
     *      NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.3)THEN
            NNIT = 0
            NTWO = 0
            DO I=1,LBOND(10,IFFAT)
               KBOND = LBOND(I,IFFAT)
               JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.7)THEN
                  NNIT=NNIT+1
                  IF(LBOND(10,JFFAT).EQ.2)NTWO=NTWO+1
               END IF
            ENDDO
            IF(NNIT.EQ.3.AND.NTWO.EQ.1)THEN
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(LBOND(10,JFFAT).EQ.2) BORDER(KBOND) = TWO
                  IF(LBOND(10,JFFAT).EQ.3) BORDER(KBOND) = ONE
               ENDDO
            END IF
            IF(NNIT.EQ.3.AND.NTWO.EQ.0)THEN
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  BORDER(KBOND) = FOUR/THREE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.3)THEN
            NOXY = 0
            NTWO = 0
            DO I=1,LBOND(10,IFFAT)
               KBOND = LBOND(I,IFFAT)
               JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.QMMFF(JFFAT).EQ.ZERO.AND.
     *            LBOND(10,JFFAT).EQ.1)THEN
                  NOXY=NOXY+1
               END IF
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *            LBOND(10,JFFAT).EQ.2)NTWO=NTWO+1
            ENDDO
            IF(NOXY.EQ.2.AND.NTWO.EQ.0)THEN
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *            LBOND(10,JFFAT).EQ.1)THEN
                     BORDER(KBOND) = TWO
                  ELSE
                     BORDER(KBOND) = ONE
                  END IF
               ENDDO
            END IF
            IF(NOXY.EQ.1.AND.NTWO.EQ.0)THEN
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *               QMMFF(JFFAT).EQ.ZERO.AND.
     *               LBOND(10,JFFAT).EQ.1)THEN
                     BORDER(KBOND) = TWO
                  END IF
               ENDDO
               BTHERE=5.0D+00
               LINKN3=3
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  BTHERE=BTHERE-BORDER(KBOND)
                  IF(BORDER(KBOND).GT.0.1D-10) LINKN3=LINKN3-1
               ENDDO
               IF(LINKN3.EQ.1)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND = LBOND(I,IFFAT)
                     IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=BTHERE
                  ENDDO
               END IF
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.15.AND.LBOND(10,IFFAT).EQ.4)THEN
            NOXY = 0
            NTWO = 0
            NCARBON=0
            DO I=1,LBOND(10,IFFAT)
               KBOND = LBOND(I,IFFAT)
               JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8)THEN
                  NOXY=NOXY+1
                  IF(LBOND(10,JFFAT).EQ.2)NTWO=NTWO+1
               END IF
               IF(NINT(ZANF(JFFAT)).EQ.6) NCARBON=NCARBON+1
            ENDDO
            IF(NTWO.EQ.0.AND.NOXY.EQ.2.AND.NCARBON.EQ.2)THEN
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8)THEN
                     BORDER(KBOND)=ONEPT5
                  END IF
                  IF(NINT(ZANF(JFFAT)).EQ.6) BORDER(KBOND)=ONE
               ENDDO
            END IF
            IF(NOXY.EQ.4)THEN
               BTEMP = (FIVE-DBLE(NTWO))/(FOUR-DBLE(NTWO))
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8)THEN
                     IF(LBOND(10,JFFAT).EQ.2)THEN
                        BORDER(KBOND) = ONE
                        DO J=1,LBOND(10,JFFAT)
                           IF(BORDER(LBOND(J,JFFAT)).EQ.ZERO)
     *                        BORDER(LBOND(J,JFFAT))=ONE
                        ENDDO
                     END IF
                     IF(LBOND(10,JFFAT).EQ.1)THEN
                        BORDER(KBOND)=BTEMP
                     END IF
                  END IF
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.16.AND.LBOND(10,IFFAT).EQ.3)THEN
            NOXY = 0
            NTWO = 0
            DO I=1,LBOND(10,IFFAT)
               KBOND = LBOND(I,IFFAT)
               JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8)THEN
                  NOXY=NOXY+1
                  IF(LBOND(10,JFFAT).EQ.2)NTWO=NTWO+1
               END IF
            ENDDO
            IF(NOXY.EQ.1.AND.NTWO.EQ.0)THEN
               JC = 0
               JN = 0
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.6) JC = JC + 1
                  IF(NINT(ZANF(JFFAT)).EQ.7) JN = JN + 1
               ENDDO
               IF((JC+JN).EQ.2)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND = LBOND(I,IFFAT)
                     JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ.6)
     *                  BORDER(KBOND) = ONE
                     IF(NINT(ZANF(JFFAT)).EQ.7)
     *                  BORDER(KBOND) = ONE
                     IF(NINT(ZANF(JFFAT)).EQ.8)
     *                  BORDER(KBOND) = TWO
                  ENDDO
               END IF
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.16.AND.LBOND(10,IFFAT).EQ.4)THEN
            NOXY = 0
            NTWO = 0
            DO I=1,LBOND(10,IFFAT)
               KBOND = LBOND(I,IFFAT)
               JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8)THEN
                  NOXY=NOXY+1
                  IF(LBOND(10,JFFAT).EQ.2)NTWO=NTWO+1
               END IF
            ENDDO
            BTEMP = (SIX-DBLE(NTWO))/(FOUR-DBLE(NTWO))
            IF(NOXY.EQ.4)THEN
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8)THEN
                     IF(LBOND(10,JFFAT).EQ.2)THEN
                        BORDER(KBOND) = ONE
                        DO J=1,LBOND(10,JFFAT)
                           IF(BORDER(LBOND(J,JFFAT)).EQ.ZERO)
     *                        BORDER(LBOND(J,JFFAT))=ONE
                        ENDDO
                     END IF
                     IF(LBOND(10,JFFAT).EQ.1)THEN
                        BORDER(KBOND)=BTEMP
                     END IF
                  END IF
               ENDDO
            END IF
            IF(NOXY.EQ.3.AND.NTWO.EQ.1)THEN
               JCNP = 0
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ. 6.OR.
     *               NINT(ZANF(JFFAT)).EQ. 7.OR.
     *               NINT(ZANF(JFFAT)).EQ.15    ) JCNP=JCNP+1
               ENDDO
               IF(JCNP.EQ.1)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND = LBOND(I,IFFAT)
                     JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ. 6.OR.
     *                  NINT(ZANF(JFFAT)).EQ. 7.OR.
     *                  NINT(ZANF(JFFAT)).EQ.15    )
     *                  BORDER(KBOND) = ONE
                     IF(NINT(ZANF(JFFAT)).EQ. 8) THEN
                        IF(LBOND(10,JFFAT).EQ.1) BORDER(KBOND) = TWO
                        IF(LBOND(10,JFFAT).EQ.2) BORDER(KBOND) = ONE
                     END IF
                  ENDDO
               END IF
            END IF
            IF(NOXY.EQ.2.AND.NTWO.EQ.0)THEN
               JCNP = 0
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ. 6.OR.
     *               NINT(ZANF(JFFAT)).EQ. 7.OR.
     *               NINT(ZANF(JFFAT)).EQ.15    ) JCNP=JCNP+1
               ENDDO
               IF(JCNP.EQ.2)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND = LBOND(I,IFFAT)
                     JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ. 6.OR.
     *                  NINT(ZANF(JFFAT)).EQ. 7.OR.
     *                  NINT(ZANF(JFFAT)).EQ.15    )
     *                  BORDER(KBOND) = ONE
                     IF(NINT(ZANF(JFFAT)).EQ. 8)
     *                  BORDER(KBOND) = TWO
                  ENDDO
               END IF
            END IF
         END IF
      ENDDO
C
C     -- PROPAGATE SINGLE BONDS (3 TIMES) --
C
      DO L123=1,3
         DO IFFAT=1,NFFAT
            IF(NINT(ZANF(IFFAT)).EQ. 6.OR.
     *         NINT(ZANF(IFFAT)).EQ.14.   ) THEN
               BLEFT=FOUR
               DO I=1,LBOND(10,IFFAT)
                  BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
               ENDDO
               IF(BLEFT.EQ.ONE)THEN
                  DO I=1,LBOND(10,IFFAT)
                     IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *                  BORDER(LBOND(I,IFFAT))=ONE
                  ENDDO
               END IF
            END IF
         ENDDO
      ENDDO
C
C     -- DETERMINE SOME BOND ORDER
C
      BCOUNT2=ZERO
      ICOUNT=0
 920  CONTINUE
      DO IANGL=1,NANGL
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL)
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.2.AND.
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.3     )THEN
            BLFTC=FOUR
            ICASE1=0
            ICASE2=0
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10) ICASE1=1
               IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10) ICASE2=1
               BLFTC=BLFTC-BORDER(KBOND)
            ENDDO
            IF(BLFTC.EQ.THREE.AND.ICASE1.EQ.1.AND.ICASE2.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,K2)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                  IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=TWO
                  IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.   
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.3     )THEN
            BLFTC=FOUR
            ICASE1=0
            ICASE2=0
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10) ICASE1=1
               IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10) ICASE2=1
               BLFTC=BLFTC-BORDER(KBOND)
            ENDDO
            IF(BLFTC.EQ.THREE.AND.ICASE1.EQ.1.AND.ICASE2.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,K2)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                  IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=TWO
                  IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.8.AND.NINT(ZANF(K3)).EQ.6.AND.
     *      NINT(ZANF(K1)).EQ.6.AND.LBOND(10,K2).EQ.2)THEN
            DO I=1,LBOND(10,K2)
               IF(BORDER(LBOND(I,K2)).LT.0.1D-10) 
     *         BORDER(LBOND(I,K2))=ONE
            ENDDO
         END IF
         IF(NINT(ZANF(K2)).EQ.16.AND.NINT(ZANF(K3)).EQ.6.AND.
     *      NINT(ZANF(K1)).EQ.6.AND.LBOND(10,K2).EQ.2)THEN
            DO I=1,LBOND(10,K2)
               IF(BORDER(LBOND(I,K2)).LT.0.1D-10) 
     *         BORDER(LBOND(I,K2))=ONE
            ENDDO
         END IF
      ENDDO
      DO IBOND=1,NBOND
         I1=IPAIR(1,IBOND)
         I2=IPAIR(2,IBOND)
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)).LT.0.1D-10.AND.
     *      LBOND(10,I1).EQ.3.AND.LBOND(10,I2).EQ.2)THEN
            LHYDRG=0
            DO I=1,2
               KBOND=LBOND(I,I2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-I2
               IF(NINT(ZANF(JFFAT)).EQ.1) LHYDRG=1
            ENDDO
            IF(LHYDRG.EQ.1) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I2)).EQ. 7.AND.NINT(ZANF(I1)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)).LT.0.1D-10.AND.
     *      LBOND(10,I2).EQ.3.AND.LBOND(10,I1).EQ.2)THEN
            LHYDRG=0
            DO I=1,2
               KBOND=LBOND(I,I1)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-I1
               IF(NINT(ZANF(JFFAT)).EQ.1) LHYDRG=1
            ENDDO
            IF(LHYDRG.EQ.1) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10.AND.LBOND(10,I1).EQ.2.AND.
     *      LBOND(10,I2).EQ.1   )THEN
            BLFT1=THREE
            BLFT2=TWO
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(ABS(BLFT1+ONE).LT.0.1D-10.AND.
     *         NLFT1.EQ.0.AND.NLFT2.EQ.0) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I1)).EQ. 8.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10.AND.LBOND(10,I1).EQ.1.AND.
     *      LBOND(10,I2).EQ.2   )THEN
            BLFT1=TWO
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(ABS(BLFT2+ONE).LT.0.1D-10.AND.
     *         NLFT1.EQ.0.AND.NLFT2.EQ.0) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *      BORDER(IBOND).LT.0.1D-10)THEN
            BLFT1=THREE
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         ABS(BLFT1-BLFT2).LT.0.1D-10)
     *      BORDER(IBOND)=BLFT1
         END IF
         IF(NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 6) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.BLEFT2.EQ.ONE) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF((BLEFT1.EQ.TWO.AND.BLEFT2.EQ.TWO)        .AND.
     *         (LBOND(10,I1).EQ.3.AND.LBOND(10,I2).EQ.3)     )THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO 
            END IF
            IF((BLEFT1.EQ.THREE.AND.BLEFT2.EQ.THREE)    .AND.
     *         (LBOND(10,I1).EQ.2.AND.LBOND(10,I2).EQ.2)     )THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 7) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.LBOND(10,I2).EQ.4)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT1.EQ.TWO.AND.LBOND(10,I1).EQ.3)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF(BLEFT1.EQ.THREE.AND.LBOND(10,I2).EQ.1)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF(NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ. 7) THEN
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT2.EQ.ONE.AND.LBOND(10,I1).EQ.4)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT2.EQ.TWO.AND.LBOND(10,I2).EQ.3)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF(BLEFT2.EQ.THREE.AND.LBOND(10,I1).EQ.1)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF((NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 8).OR.
     *      (NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ.16)    ) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.LBOND(10,I2).EQ.2) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT1.EQ.TWO.AND.LBOND(10,I2).EQ.1) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
         END IF
         IF((NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ. 8).OR.
     *      (NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ.16)    ) THEN
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT2.EQ.ONE.AND.LBOND(10,I1).EQ.2) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT2.EQ.TWO.AND.LBOND(10,I1).EQ.1) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
         END IF
         IF(NINT(ZANF(I2)).EQ.7.AND.NINT(ZANF(I1)).EQ.7.AND.
     *      LBOND(10,I1).EQ.LBOND(10,I2).AND.
     *      BORDER(IBOND).LT.0.1D-10                        )THEN
            BIN1=THREE
            BIN2=THREE
            NIN1=LBOND(10,I1)
            NIN2=LBOND(10,I2)
            DO IX1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IX1,I1)).GT.0.1D-10) NIN1=NIN1-1
               BIN1=BIN1-BORDER(LBOND(IX1,I1))
            ENDDO
            DO IX2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IX2,I2)).GT.0.1D-10) NIN2=NIN2-1
               BIN2=BIN2-BORDER(LBOND(IX2,I2))
            ENDDO
            IF(NIN2.EQ.1.AND.NIN1.EQ.1.AND.ABS(BIN1-BIN2).LT.0.1D-10)
     *      BORDER(IBOND)=BIN1
         END IF
      ENDDO
C
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.15.AND.LBOND(10,IFFAT).EQ.2)THEN
            BTHERE=THREE
            DO JJ=1,2
               KBOND=LBOND(JJ,IFFAT)
               IF(BORDER(KBOND).EQ.ONE) BTHERE=BTHERE-ONE
            ENDDO
            IF(BTHERE.EQ.TWO)THEN
               DO JJ=1,2
                  KBOND=LBOND(JJ,IFFAT)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=TWO
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ. 8.AND.LBOND(10,IFFAT).EQ.1)THEN
            KBOND=LBOND(1,IFFAT)
            JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
            IF(LBOND(10,JFFAT).EQ.1.AND.NINT(ZANF(JFFAT)).EQ. 1)THEN
               BORDER(KBOND)=ONE
               NTYPE(IFFAT)=35
               NTYPE(JFFAT)=21
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.16.AND.LBOND(10,IFFAT).EQ.4)THEN
            LOXY=0
            LNTR=0
            LCAB=0
            DO JJ=1,4
               KBOND=LBOND(JJ,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)
     *         LOXY=LOXY+1
               IF(NINT(ZANF(JFFAT)).EQ.7.AND.LBOND(10,JFFAT).EQ.2)
     *         LNTR=LNTR+1
               IF(NINT(ZANF(JFFAT)).EQ.6.AND.LBOND(10,JFFAT).EQ.2)
     *         LCAB=LCAB+1
            ENDDO
            IF(LCAB.EQ.1.AND.LOXY.EQ.2.AND.LNTR.EQ.1)THEN
            DO JJ=1,4
               KBOND=LBOND(JJ,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)
     *         BORDER(KBOND)=TWO
               IF(NINT(ZANF(JFFAT)).EQ.7.AND.LBOND(10,JFFAT).EQ.2)
     *         BORDER(KBOND)=ONE
               IF(NINT(ZANF(JFFAT)).EQ.6.AND.LBOND(10,JFFAT).EQ.2)
     *         BORDER(KBOND)=ONE
            ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.15.AND.LBOND(10,IFFAT).EQ.2)THEN
            ICARBN=0
            DO I=1,2
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)
               IF(NINT(ZANF(JFFAT)).EQ.6.AND.BORDER(KBOND).GT.0.1D-10)
     *         ICARBN=ICARBN+1
            ENDDO
            IF(ICARBN.EQ.1)THEN
               DO I=1,2
                  KBOND=LBOND(I,IFFAT)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.15.AND.LBOND(10,IFFAT).EQ.4)THEN
            BLEFT=FIVE
            NLFTP=4
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).GT.1.0D-10) NLFTP=NLFTP-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFTP.EQ.1) THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).LT.1.0D-10)
     *            BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.2)THEN
            BLEFT=FOUR
            NLFTC=2
            DO I=1,2
               IF(BORDER(LBOND(I,IFFAT)).GT.0.1D-10) NLFTC=NLFTC-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFTC.EQ.1)THEN
               DO I=1,2
                  IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10) 
     *            BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.3)THEN
            BLEFT=FOUR
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).EQ.ONE)
     *         BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(BLEFT.EQ.TWO)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *               BORDER(LBOND(I,IFFAT))=TWO
               ENDDO
            END IF
            BLEFT=FOUR
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).EQ.TWO)
     *         BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(BLEFT.EQ.TWO)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *               BORDER(LBOND(I,IFFAT))=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.3.AND.
     *      QMMFF(IFFAT).EQ.ONE)THEN
            BLEFT=4.0D+00
            NLFET=3
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).GT.0.1D-10) NLFET=NLFET-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFET.EQ.1)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10) 
     *               BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
      ENDDO
C
      BCOUNT1=ZERO
      ICOUNT=ICOUNT+1
      DO IBOND=1,NBOND 
         BCOUNT1=BCOUNT1+BORDER(IBOND)
      ENDDO
      IF(ABS(BCOUNT1-BCOUNT2).LT.0.1D-10) GOTO 921
      IF(ICOUNT.GT.300) GOTO 921
      BCOUNT2=BCOUNT1
      IF(ICASE.EQ.0)THEN
         DO IRING=1,NRING
            MB=LISTRIN(10,IRING)
            DO M=1,MB
               RECRIB=LISTRIB(M,IRING)
            ENDDO
            IF(ABS(RECRIB).LT.0.1D-10)THEN
               DO M=1,MB
                  KBOND=LISTRIB(M,IRING)
                  I1=IPAIR(1,KBOND)
                  I2=IPAIR(2,KBOND)
                  NI1=0
                  NI2=0
                  DO JJ=1,LBOND(10,I1)
                     IF(ABS(BORDER(LBOND(JJ,I1))-ONE).LT.0.1D-10)
     *               NI1=NI1+1
                  ENDDO
                  DO JJ=1,LBOND(10,I2)
                     IF(ABS(BORDER(LBOND(JJ,I2))-ONE).LT.0.1D-10)
     *               NI2=NI2+1
                  ENDDO
                  IF(NI1.EQ.1.AND.NI2.EQ.1)THEN
                     BORDER(KBOND)=ONE
                     ICASE=2
                     GOTO 920 
                  END IF
               ENDDO
            END IF
         ENDDO
      END IF
      IF(ICASE.EQ.1)THEN
         DO IRING=1,NRING
            MB=LISTRIN(10,IRING)
            DO M=1,MB
               RECRIB=LISTRIB(M,IRING)
            ENDDO
            IF(ABS(RECRIB).LT.0.1D-10)THEN
               DO M=1,MB
                  KBOND=LISTRIB(M,IRING)
                  I1=IPAIR(1,KBOND)
                  I2=IPAIR(2,KBOND)
                  NI1=0
                  NI2=0
                  DO J1=1,LBOND(10,I1)
                     IF(ABS(BORDER(LBOND(J1,I1))-ONE).LT.0.1D-10)
     *               NI1=NI1+1
                  ENDDO
                  DO J2=1,LBOND(10,I2)
                     IF(ABS(BORDER(LBOND(J2,I2))-ONE).LT.0.1D-10)
     *               NI2=NI2+1
                  ENDDO
                  IF(NI1.EQ.1.AND.NI2.EQ.1)THEN
                     ICASE=2
                     BORDER(KBOND)=TWO
                     GOTO 920
                  END IF
               ENDDO
            END IF
         ENDDO
      END IF
      GOTO 920
 921  CONTINUE
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.6)THEN
            BTHERE=ZERO
            DO I=1,LBOND(10,IFFAT)
               BTHERE=BTHERE+BORDER(LBOND(I,IFFAT))
            ENDDO
            IF((BTHERE-FOUR).GT.0.2D+00)THEN
               IF(JCASE.EQ.5) GOTO 951
               DO IBOND=1,NBOND
                  BORDER(IBOND)=ZERO
               ENDDO
               DO JFFAT=1,NFFAT
                  LBOND(10,JFFAT)=0
               ENDDO
               ICASE=1
               JCASE=JCASE+1
               GOTO 950
            END IF
         END IF
      ENDDO
 951  CONTINUE
C
C     -- DETERMINE RING BOND ORDERS (HIGH PRIORITY) --
C
C     DETERMINE PHENOXIDE SALT AND ALKOXIDE
C
      DO IFFAT=1,NFFAT
         IF((NINT(ZANF(IFFAT)).EQ.8.OR.
     *      NINT(ZANF(IFFAT)).EQ.16).AND.
     *      LBOND(10,IFFAT).EQ.1.AND.
     *      QMMFF(IFFAT).EQ.-ONE.AND.
     *      BORDER(LBOND(1,IFFAT)).EQ.ZERO)THEN
            BORDER(LBOND(1,IFFAT))=ONE
         ELSE IF((NINT(ZANF(IFFAT)).EQ.8.OR.
     *      NINT(ZANF(IFFAT)).EQ.16).AND.
     *      LBOND(10,IFFAT).EQ.1.AND.
     *      QMMFF(IFFAT).EQ.ZERO.AND.
     *      BORDER(LBOND(1,IFFAT)).EQ.ZERO)THEN
            KBOND=LBOND(1,IFFAT)
            JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
            IF(NUMRIN(10,JFFAT).EQ.1.AND.
     *        (LISTRIN(10,NUMRIN(1,JFFAT)).EQ.6.OR.
     *         LISTRIN(10,NUMRIN(1,JFFAT)).EQ.5))
     *        BORDER(LBOND(1,IFFAT))=TWO
         END IF
      ENDDO
C
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         IF(MB.EQ.5.OR.MB.EQ.6)THEN
            NOXGYN=0
            NSULFR=0
            NCARBN=0
            NNITR3=0
            NNITR2=0
            NOXYCB=0
            NN3OXY=0
            DO M=1,MB
               MBEFO=M-1
               IF(MBEFO.EQ.0) MBEFO=MB
               MNEXT=M+1
               IF(M.EQ.MB)    MNEXT=1
               INEXT =LISTRIN(MNEXT,IRING)
               IBEFO =LISTRIN(MBEFO,IRING)
               IFFAT = LISTRIN(M,IRING)
               IF(NINT(ZANF(IFFAT)).EQ. 6.AND.
     *            LBOND(10,IFFAT)  .EQ. 3 ) THEN
                  NCARBN=NCARBN+1
                  LOXY=0
                  DO I=1,3
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *               LBOND(10,JFFAT).EQ.1.AND.
     *               QMMFF(JFFAT).EQ.ZERO  ) LOXY=LOXY+1
                     IF(NINT(ZANF(JFFAT)).EQ.16.AND.
     *               LBOND(10,JFFAT).EQ.1.AND.
     *               QMMFF(JFFAT).EQ.ZERO    ) LOXY=LOXY+1
                  ENDDO
                  IF(LOXY.NE.0) NOXYCB=NOXYCB+1
               END IF
               IF(NINT(ZANF(IFFAT)).EQ.16.AND.
     *            LBOND(10,IFFAT)  .EQ. 2 ) NSULFR=NSULFR+1
               IF(NINT(ZANF(IFFAT)).EQ. 8.AND.
     *            LBOND(10,IFFAT)  .EQ. 2 ) NOXGYN=NOXGYN+1
               IF(NINT(ZANF(IFFAT)).EQ. 7.AND.
     *            LBOND(10,IFFAT)  .EQ. 2 ) NNITR2=NNITR2+1
               IF(NINT(ZANF(IFFAT)).EQ. 7.AND.
     *            LBOND(10,IFFAT)  .EQ. 3 ) THEN
                  NNITR3=NNITR3+1
                  DO I=1,3
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                  JFFAT.NE.INEXT.AND.LBOND(10,JFFAT).EQ.1.AND.
     *                  JFFAT.NE.IBEFO     ) NN3OXY=NN3OXY+1
                  ENDDO
               END IF
            ENDDO
            IAROMTC=NNITR2+NCARBN+2*NNITR3-NN3OXY+2*(NSULFR+NOXGYN)
            ICOUNTA=NNITR2+NCARBN+NNITR3+NSULFR+NOXGYN
            IF((NSULFR+NOXGYN).LT.2.AND.IAROMTC.GE.5.AND.
     *          IAROMTC.LE.7.AND.MB.EQ.ICOUNTA) NRINTYP(IRING)=1
         END IF
      ENDDO
C
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         IF(MB.EQ.5) THEN
            IRING3=0
            IDOUBL=0
            DO M=1,MB
               J=LISTRIN(M,IRING)
               IF(NUMRIN(10,J).GE.3) THEN
                  LRING=0
                  DO I=1,NUMRIN(10,J)
                     IF(NRINTYP(NUMRIN(I,J)).EQ.1) LRING=LRING+1
                  ENDDO
                  IF(LRING.GE.3)  IRING3=IRING3+1
               END IF
            ENDDO
            IF(IRING3.EQ.2) IRING3=0
            DO M=1,MB
               MBEFO=M-1
               IF(MBEFO.EQ.0) MBEFO=MB
               MNEXT=M+1
               IF(M.EQ.MB) MNEXT=1
               J       = LISTRIN(M     ,IRING)
               JBEFO   = LISTRIN(MBEFO ,IRING)
               JNEXT   = LISTRIN(MNEXT ,IRING)
               DO I=1,LBOND(10,J)
                  IF(LBOND(I,J).NE.LISTRIB(M    ,IRING).AND.
     *               LBOND(I,J).NE.LISTRIB(MBEFO,IRING).AND.
     *               ABS(BORDER(LBOND(I,J))-TWO).LT.0.1D-10.AND.
     *               NUMRIN(10,J).EQ.1)THEN
                     IDOUBL=IDOUBL+1
                     IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.3)THEN
                        DO JJ=1,3
                           KBOND=LBOND(JJ,J)
                           K=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                           IF(K.NE.JBEFO.AND.K.NE.JNEXT.AND.
     *                        IDOUBL.GT.0) IDOUBL=IDOUBL-1
                        ENDDO
                     END IF
                  END IF
               ENDDO
            ENDDO
            IF(IRING3.EQ.0.AND.IDOUBL.EQ.0)THEN
               NNITRO=0
               NOXGYN=0
               NSULFR=0
               NCARBN=0
               NNITR3=0
               NNITR2=0
               NOXYCB=0
               NN3OXY=0
               DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0) MBEFO=MB
                  MNEXT=M+1
                  IF(M.EQ.MB)    MNEXT=1
                  INEXT =LISTRIN(MNEXT,IRING)
                  IBEFO =LISTRIN(MBEFO,IRING)
                  IFFAT = LISTRIN(M,IRING)
                  IF(NINT(ZANF(IFFAT)).EQ. 6.AND.
     *               LBOND(10,IFFAT)  .EQ. 3 ) THEN
                     NCARBN=NCARBN+1
                     LOXY=0
                     DO I=1,3
                        KBOND=LBOND(I,IFFAT)
                        JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                        IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                  LBOND(10,JFFAT).EQ.1.AND.
     *                  QMMFF(JFFAT).EQ.ZERO  ) LOXY=LOXY+1
                        IF(NINT(ZANF(JFFAT)).EQ.16.AND.
     *                  LBOND(10,JFFAT).EQ.1.AND.       
     *                  QMMFF(JFFAT).EQ.ZERO    ) LOXY=LOXY+1
                     ENDDO
                     IF(LOXY.NE.0) NOXYCB=NOXYCB+1
                  END IF
                  IF(NINT(ZANF(IFFAT)).EQ.16.AND.
     *               LBOND(10,IFFAT)  .EQ. 2 ) NSULFR=NSULFR+1
                  IF(NINT(ZANF(IFFAT)).EQ. 7 ) NNITRO=NNITRO+1
                  IF(NINT(ZANF(IFFAT)).EQ. 8.AND.
     *               LBOND(10,IFFAT)  .EQ. 2 ) NOXGYN=NOXGYN+1
                  IF(NINT(ZANF(IFFAT)).EQ. 7.AND.
     *               LBOND(10,IFFAT)  .EQ. 2 ) NNITR2=NNITR2+1
                  IF(NINT(ZANF(IFFAT)).EQ. 7.AND.
     *               LBOND(10,IFFAT)  .EQ. 3 ) THEN
                     NNITR3=NNITR3+1
                     DO I=1,3
                        KBOND=LBOND(I,IFFAT)
                        JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                        IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                     JFFAT.NE.INEXT.AND.LBOND(10,JFFAT).EQ.1.AND.
     *                     JFFAT.NE.IBEFO     ) NN3OXY=NN3OXY+1
                     ENDDO
                  END IF
               ENDDO
               IF(NOXYCB.EQ.0.AND.NCARBN.EQ.1.AND.NNITR2.EQ.2.AND.
     *            NNITR3.EQ.2.AND.NN3OXY.EQ.0)THEN
                  LCASE=0
                  ICASE=0
                  DO M=1,MB
                     MBEFO=M-1
                     IF(MBEFO.EQ.0) MBEFO=MB
                     MNEXT=M+1
                     IF(M.EQ.MB) MNEXT=1
                     J    =LISTRIN(M     ,IRING)
                     JBEFO=LISTRIN(MBEFO ,IRING)
                     JNEXT=LISTRIN(MNEXT ,IRING)
                     IF(NINT(ZANF(J    )).EQ.6.AND.
     *                  NINT(ZANF(JBEFO)).EQ.7.AND.
     *                  NINT(ZANF(JNEXT)).EQ.7.AND.
     *                  LBOND(10,JBEFO).EQ.3.AND.
     *                  LBOND(10,JNEXT).EQ.3     ) ICASE=1
                     IF(NINT(ZANF(J)).EQ.7)THEN
                        DO I=1,3
                           KBOND=LBOND(I,J)
                           IXN=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                           IF((IXN.NE.JBEFO.AND.IXN.NE.JNEXT).AND.
     *                         NINT(ZANF(IXN)).NE.1 .AND.
     *                         NINT(ZANF(IXN)).NE.8 .AND.
     *                         NINT(ZANF(IXN)).NE.16   ) LCASE=LCASE+1
                        ENDDO
                     END IF
                  ENDDO
                  IF(ICASE.EQ.1.AND.LCASE.EQ.2)THEN
                     LRING=0
                     DO M=1,MB
                        J    =LISTRIN(M     ,IRING)
                        IF(NINT(ZANF(J)).EQ.7)THEN
                           IF(NUMRIN(10,J).GE.2) LRING=LRING+1
                        END IF
                     ENDDO
                     IF(LRING.EQ.0) LCASE=0
                  END IF
                  IF(LCASE.NE.2) THEN
                     IF(ICASE.EQ.1) THEN
                     DO M=1,MB
                        MBEFO=M-1
                        IF(MBEFO.EQ.0) MBEFO=MB
                        MNEXT=M+1
                        IF(M.EQ.MB) MNEXT=1
                        MBEFO2=MBEFO-1
                        IF(MBEFO2.EQ.0) MBEFO2=MB
                        MNEXT2=MNEXT+1
                        IF(MNEXT.EQ.MB) MNEXT2=1
                        J    =LISTRIN(M     ,IRING)
                        JBEFO=LISTRIN(MBEFO ,IRING)
                        JNEXT=LISTRIN(MNEXT ,IRING)
                        IF(NINT(ZANF(J    )).EQ.6.AND.
     *                     NINT(ZANF(JBEFO)).EQ.7.AND.
     *                     NINT(ZANF(JNEXT)).EQ.7.AND.
     *                     NUMRIN(10,J).EQ.1.AND.
     *                     LBOND(10,JBEFO).EQ.3.AND.
     *                     LBOND(10,JNEXT).EQ.3) THEN
                           NTYPE(J)=80
                           BORDER(LISTRIB(M     ,IRING))=ONEPT5
                           BORDER(LISTRIB(MBEFO ,IRING))=ONEPT5
                           BORDER(LISTRIB(MBEFO2,IRING))=ONE
                           BORDER(LISTRIB(MNEXT2,IRING))=TWO
                           BORDER(LISTRIB(MNEXT ,IRING))=ONE
                        END IF
                     ENDDO
                     DO M=1,MB
                        J= LISTRIN(M,IRING)
                        IF(NINT(ZANF(J)).EQ.7.AND.
     *                     LBOND(10,J).EQ.3         ) THEN
                           NTYPE(J)=81
                           QMMFF(J)=PT5
                        END IF
                        IF(NINT(ZANF(J)).EQ.7.AND.         
     *                     LBOND(10,J).EQ.2) NTYPE(J)=79
                     ENDDO
                     END IF
                  END IF
               END IF
               IF(NOXYCB.EQ.0.AND.NCARBN.EQ.1.AND.NSULFR.EQ.1.AND.
     *            NNITR2.EQ.3.AND.NN3OXY.EQ.0)THEN
                  DO M=1,MB
                     J       = LISTRIN(M     ,IRING)
                     IF(NINT(ZANF(J)).EQ.16) NTYPE(J)=44
                     IF(NINT(ZANF(J)).EQ.7)  NTYPE(J)=79
                     IF(NINT(ZANF(J)).EQ.6)  NTYPE(J)=78
                  ENDDO
               END IF
               IF(NOXYCB.EQ.0.AND.NCARBN.EQ.2.AND.NNITR2.EQ.1.AND.
     *            NNITR3.EQ.2.AND.NN3OXY.EQ.0)THEN
                  ICASE=0
                  DO M=1,MB
                     MBEFO=M-1
                     IF(MBEFO.EQ.0) MBEFO=MB
                     MNEXT=M+1
                     IF(M.EQ.MB) MNEXT=1
                     J       = LISTRIN(M     ,IRING)
                     JNEXT   =LISTRIN(MNEXT,IRING)
                     JBEFO   =LISTRIN(MBEFO,IRING)
                     IF(NINT(ZANF(J)).EQ. 6.AND.
     *                  NINT(ZANF(JNEXT)).EQ. 7.AND.
     *                  LBOND(10,JNEXT).EQ.3.AND.
     *                  NINT(ZANF(JBEFO)).EQ. 7.AND.
     *                  LBOND(10,JBEFO).EQ.3)THEN
                        NTYPE(J)=80
                        BORDER(LISTRIB(M,IRING))=ONEPT5
                        BORDER(LISTRIB(MBEFO,IRING))=ONEPT5
                        ICASE=1
                     END IF
                     IF(ICASE.EQ.1)THEN
                        DO MM=1,MB
                           J   = LISTRIN(MM ,IRING)
                           IF(NINT(ZANF(J)).EQ. 6.AND.
     *                        NTYPE(J).EQ.0) NTYPE(J)=78
                           IF(NINT(ZANF(J)).EQ. 7.AND.
     *                        LBOND(10,J)  .EQ. 3 )THEN
                              DO I=1,3
                                 KBOND=LBOND(I,J)
                                 IF(BORDER(KBOND).LT.0.1D-10)
     *                           BORDER(KBOND)=ONE
                              ENDDO
                              NTYPE(J)=81
                              QMMFF(J)=PT5
                           END IF
                           IF(NINT(ZANF(J)).EQ. 7.AND.
     *                     LBOND(10,J)  .EQ. 2 )   NTYPE(J)=79
                        ENDDO
                     END IF
                  ENDDO
               END IF
               IF(NOXYCB.EQ.0.AND.NCARBN.EQ.2.AND.NNITR2.EQ.1.AND.
     *            NNITR3.EQ.2.AND.NN3OXY.EQ.1)THEN
                  MFFAT=0
                  DO M=1,MB
                     MBEFO=M-1
                     IF(MBEFO.EQ.0) MBEFO=MB
                     MNEXT=M+1
                     IF(M.EQ.MB) MNEXT=1
                     J       = LISTRIN(M     ,IRING)
                     JBEFO   = LISTRIN(MBEFO ,IRING)
                     JNEXT   = LISTRIN(MNEXT ,IRING)
                     IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.3)THEN
                        DO I=1,3
                           KBOND=LBOND(I,J)
                           JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                           IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                     JFFAT.NE.INEXT.AND.LBOND(10,JFFAT).EQ.1.AND.
     *                     JFFAT.NE.IBEFO     ) MFFAT=J
                        ENDDO
                     END IF
                  ENDDO
                  DO M=1,MB
                     J       = LISTRIN(M     ,IRING)
                     IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.3.AND.
     *                  MFFAT.NE.J)THEN
                        DO I=1,3
                           KBOND=LBOND(I,J)
                           BORDER(KBOND)=ONE
                        ENDDO
                        NTYPE(J)=39
                     END IF
                     IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.2)
     *               NTYPE(J)=79
                     IF(J.EQ.MFFAT) THEN
                        NTYPE(J)=82
                        DO I=1,3
                           KBOND=LBOND(I,J)
                           JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                           IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                        LBOND(10,JFFAT).EQ.1) NTYPE(JFFAT)=32
                        ENDDO
                     END IF
                     IF(NINT(ZANF(J)).EQ.6) NTYPE(J)=78
                  ENDDO
               END IF
               IF(NOXYCB.EQ.0.AND.(NSULFR.EQ.1.OR.NOXGYN.EQ.1).AND.
     *            (NCARBN+NNITR2).EQ.4)THEN
                  DO M=1,MB
                     MBEFO=M-1
                     IF(MBEFO.EQ.0) MBEFO=MB
                     J= LISTRIN(M,IRING)
                     IF(NINT(ZANF(J)).EQ.6)THEN
                        NTYPE(J)=78
                     END IF
                     DO IBRING=1,4
                     IF(NINT(ZANF(J)).EQ.6.AND.
     *                  BORDER(LISTRIB(MBEFO ,IRING)).EQ.ZERO.AND.
     *                  BORDER(LISTRIB(M     ,IRING)).EQ.ONE)
     *                  BORDER(LISTRIB(MBEFO ,IRING))=TWO
                     IF(NINT(ZANF(J)).EQ.6.AND.
     *                  BORDER(LISTRIB(MBEFO ,IRING)).EQ.ZERO.AND.
     *                  BORDER(LISTRIB(M     ,IRING)).EQ.TWO)
     *                  BORDER(LISTRIB(MBEFO ,IRING))=ONE
                     IF(NINT(ZANF(J)).EQ.6.AND.
     *                  BORDER(LISTRIB(M     ,IRING)).EQ.ZERO.AND.
     *                  BORDER(LISTRIB(MBEFO ,IRING)).EQ.TWO)
     *                  BORDER(LISTRIB(M     ,IRING))=ONE
                     IF(NINT(ZANF(J)).EQ.6.AND.
     *                  BORDER(LISTRIB(M     ,IRING)).EQ.ZERO.AND.
     *                  BORDER(LISTRIB(MBEFO ,IRING)).EQ.ONE)
     *                  BORDER(LISTRIB(M     ,IRING))=TWO
                     IF(NINT(ZANF(J)).EQ.7.AND.
     *                  BORDER(LISTRIB(MBEFO ,IRING)).EQ.ZERO.AND.
     *                  BORDER(LISTRIB(M     ,IRING)).EQ.ONE)
     *                  BORDER(LISTRIB(MBEFO ,IRING))=TWO
                     IF(NINT(ZANF(J)).EQ.7.AND.
     *                  BORDER(LISTRIB(MBEFO ,IRING)).EQ.ZERO.AND.
     *                  BORDER(LISTRIB(M     ,IRING)).EQ.TWO)
     *                  BORDER(LISTRIB(MBEFO ,IRING))=ONE
                     IF(NINT(ZANF(J)).EQ.7.AND.
     *                  BORDER(LISTRIB(M     ,IRING)).EQ.ZERO.AND.
     *                  BORDER(LISTRIB(MBEFO ,IRING)).EQ.TWO)
     *                  BORDER(LISTRIB(M     ,IRING))=ONE
                     IF(NINT(ZANF(J)).EQ.7.AND.
     *                  BORDER(LISTRIB(M     ,IRING)).EQ.ZERO.AND.
     *                  BORDER(LISTRIB(MBEFO ,IRING)).EQ.ONE)
     *                  BORDER(LISTRIB(M     ,IRING))=TWO
                     ENDDO
                     IF(NINT(ZANF(J)).EQ.7)THEN
                        NTYPE(J)=79
                     END IF
                     IF(NINT(ZANF(J)).EQ.16) NTYPE(J)=44
                     IF(NINT(ZANF(J)).EQ.8 ) NTYPE(J)=59
                  ENDDO
               END IF
               IF(NOXYCB.EQ.0.AND.(NCARBN+NNITR2).EQ.5)THEN
                  DO M=1,MB
                     MBEFO=M-1
                     IF(MBEFO.EQ.0) MBEFO=MB
                     J= LISTRIN(M,IRING)
                     IF(NINT(ZANF(J)).EQ.6)THEN
                        BORDER(LISTRIB(M     ,IRING))=ONEPT5
                        BORDER(LISTRIB(MBEFO ,IRING))=ONEPT5
                        NTYPE(J)=78
                     END IF
                     IF(NINT(ZANF(J)).EQ.7)THEN
                        NTYPE(J)=76
                        QMMFF(J)=-ONE/NNITR2
                     END IF
                  ENDDO
               END IF
               IF(NCARBN.EQ.2.AND.NSULFR.EQ.1.AND.NNITRO.EQ.2.AND.
     *         NOXYCB.EQ.0)THEN
                  ICASE=0
                  DO M=1,MB
                     MBEFO=M-1
                     IF(MBEFO.EQ.0) MBEFO=MB
                     MBEFO2=MBEFO-1
                     IF(MBEFO2.EQ.0) MBEFO2=MB
                     MNEXT=M+1
                     IF(M.EQ.MB) MNEXT=1
                     MNEXT2=M+2
                     IF(MNEXT.EQ.MB) MNEXT2=1
                     J       = LISTRIN(M     ,IRING)
                     JBEFO   = LISTRIN(MBEFO ,IRING)
                     JNEXT   = LISTRIN(MNEXT ,IRING)
                     JBEFO2  = LISTRIN(MBEFO2,IRING)
                     JNEXT2  = LISTRIN(MNEXT2,IRING)
                     IF(NINT(ZANF(J    )).EQ.16.AND.
     *                  NINT(ZANF(JBEFO)).EQ.7 .AND.
     *                  NINT(ZANF(JNEXT)).EQ.7   ) ICASE=1
                     IF(NINT(ZANF(J    )).EQ.16.AND.
     *                  NINT(ZANF(JBEFO)).EQ.6 .AND.
     *                  NINT(ZANF(JNEXT)).EQ.6 .AND.
     *                  NINT(ZANF(JNEXT2)).EQ.7.AND.
     *                  NINT(ZANF(JBEFO2)).EQ.7  ) ICASE=2
                  ENDDO
                  IF(ICASE.EQ.1.OR.ICASE.EQ.2)THEN
                     DO M=1,MB
                        MBEFO=M-1
                        IF(MBEFO.EQ.0) MBEFO=MB
                        MBEFO2=MBEFO-1
                        IF(MBEFO2.EQ.0) MBEFO2=MB
                        MNEXT=M+1
                        IF(M.EQ.MB) MNEXT=1
                        MNEXT2=M+2
                        IF(MNEXT.EQ.MB) MNEXT2=1
                        J       = LISTRIN(M     ,IRING)
                        IF(NINT(ZANF(J)).EQ.16) THEN
                           BORDER(LISTRIB(M     ,IRING))=ONE
                           BORDER(LISTRIB(MBEFO ,IRING))=ONE
                           BORDER(LISTRIB(MBEFO2,IRING))=TWO
                           BORDER(LISTRIB(MNEXT ,IRING))=TWO
                           BORDER(LISTRIB(MNEXT2,IRING))=ONE
                        END IF
                        IF(NINT(ZANF(J)).EQ.16) NTYPE(J)=44
                        IF(NINT(ZANF(J)).EQ. 6) NTYPE(J)=78
                        IF(NINT(ZANF(J)).EQ. 7.AND.
     *                     LBOND(10,J)  .EQ. 2) NTYPE(J)=79
                        IF(NINT(ZANF(J)).EQ. 7.AND.
     *                     LBOND(10,J)  .EQ. 3) NTYPE(J)=81
                     ENDDO
                  ELSE
                     DO M=1,MB
                        J       = LISTRIN(M     ,IRING)
                        IF(NINT(ZANF(J)).EQ.16) NTYPE(J)=44
                        IF(NINT(ZANF(J)).EQ. 6) NTYPE(J)=78
                        IF(NINT(ZANF(J)).EQ. 7.AND.
     *                     LBOND(10,J)  .EQ. 2) NTYPE(J)=79
                        IF(NINT(ZANF(J)).EQ. 7.AND.
     *                     LBOND(10,J)  .EQ. 3) NTYPE(J)=81
                     ENDDO
                  END IF
               END IF
               IF(NCARBN.EQ.2.AND.NSULFR.EQ.1.AND.NNITR2.EQ.2.AND.
     *            NOXYCB.EQ.0)THEN
                  DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0) MBEFO=MB
                  MBEFO2=MBEFO-1
                  IF(MBEFO2.EQ.0) MBEFO2=MB
                  MNEXT=M+1
                  IF(M.EQ.MB) MNEXT=1
                  MNEXT2=M+2
                  IF(MNEXT.EQ.MB) MNEXT2=1
                  J       = LISTRIN(M     ,IRING)
                  IF(NINT(ZANF(J)).EQ.16) THEN
                     BORDER(LISTRIB(M     ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO2,IRING))=TWO
                     BORDER(LISTRIB(MNEXT ,IRING))=TWO
                     BORDER(LISTRIB(MNEXT2,IRING))=ONE
                  END IF
                  IF(NINT(ZANF(J)).EQ.16) NTYPE(J)=44
                  IF(NINT(ZANF(J)).EQ. 6) NTYPE(J)=78
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *               LBOND(10,J)  .EQ. 2) NTYPE(J)=79
                  ENDDO
               END IF
               IF(NCARBN.EQ.3.AND.NSULFR.EQ.1.AND.NNITRO.EQ.1.AND.
     *         NOXYCB.EQ.0)THEN
               DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0) MBEFO=MB
                  MBEFO2=MBEFO-1 
                  IF(MBEFO2.EQ.0) MBEFO2=MB
                  MNEXT=M+1
                  IF(M.EQ.MB) MNEXT=1
                  MNEXT2=M+2
                  IF(MNEXT.EQ.MB) MNEXT2=1
                  J       = LISTRIN(M     ,IRING)
                  IF(NINT(ZANF(J)).EQ.16) THEN
                     BORDER(LISTRIB(M     ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO2,IRING))=TWO
                     BORDER(LISTRIB(MNEXT ,IRING))=TWO
                     BORDER(LISTRIB(MNEXT2,IRING))=ONE
                  END IF
                  IF(NINT(ZANF(J)).EQ.16) NTYPE(J)=44
                  IF(NINT(ZANF(J)).EQ. 6) NTYPE(J)=78
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *               LBOND(10,J)  .EQ. 2) NTYPE(J)=79
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *               LBOND(10,J)  .EQ. 3) NTYPE(J)=81
               ENDDO
               END IF
               IF(NCARBN.EQ.2.AND.NOXGYN.EQ.1.AND.NNITR2.EQ.2.AND.
     *         NOXYCB.EQ.0)THEN
                  ICASE=0
                  DO M=1,MB
                     MBEFO=M-1
                     IF(MBEFO.EQ.0) MBEFO=MB
                     MBEFO2=MBEFO-1
                     IF(MBEFO2.EQ.0) MBEFO2=MB
                     MNEXT=M+1
                     IF(M.EQ.MB) MNEXT=1
                     MNEXT2=M+2
                     IF(MNEXT.EQ.MB) MNEXT2=1
                     J       = LISTRIN(M     ,IRING)
                     JBEFO   = LISTRIN(MBEFO ,IRING)
                     JNEXT   = LISTRIN(MNEXT ,IRING)
                     IF(NINT(ZANF(J    )).EQ.8.AND.
     *                  NINT(ZANF(JBEFO)).EQ.7.AND.
     *                  NINT(ZANF(JNEXT)).EQ.7    ) ICASE=1
                  ENDDO
                  IF(ICASE.EQ.1)THEN
                     DO M=1,MB
                        MBEFO=M-1
                        IF(MBEFO.EQ.0) MBEFO=MB
                        MBEFO2=MBEFO-1
                        IF(MBEFO2.EQ.0) MBEFO2=MB
                        MNEXT=M+1
                        IF(M.EQ.MB) MNEXT=1
                        MNEXT2=M+2
                        IF(MNEXT.EQ.MB) MNEXT2=1
                        J       = LISTRIN(M     ,IRING)
                        IF(NINT(ZANF(J)).EQ.8) THEN
                           BORDER(LISTRIB(M     ,IRING))=ONE
                           BORDER(LISTRIB(MBEFO ,IRING))=ONE
                           BORDER(LISTRIB(MBEFO2,IRING))=TWO
                           BORDER(LISTRIB(MNEXT ,IRING))=TWO
                           BORDER(LISTRIB(MNEXT2,IRING))=ONE
                        END IF
                        IF(NINT(ZANF(J)).EQ. 8) NTYPE(J)=59
                        IF(NINT(ZANF(J)).EQ. 6) NTYPE(J)=78
                        IF(NINT(ZANF(J)).EQ. 7.AND.
     *                     LBOND(10,J)  .EQ. 2) NTYPE(J)=79
                     ENDDO
                  END IF
               END IF
               IF(NCARBN.EQ.2.AND.NOXGYN.EQ.1.AND.NNITR2.EQ.1.AND.
     *         NOXYCB.EQ.0.AND.NN3OXY.EQ.0.AND.NNITR3.EQ.1)THEN
                  DO M=1,MB
                     J       = LISTRIN(M     ,IRING)
                     IF(NINT(ZANF(J)).EQ. 8) NTYPE(J)=59
                     IF(NINT(ZANF(J)).EQ. 6) NTYPE(J)=78
                     IF(NINT(ZANF(J)).EQ. 7.AND.
     *                  LBOND(10,J)  .EQ. 3) THEN
                        NTYPE(J)=81
                        QMMFF(J)=ONE
                     END IF
                     IF(NINT(ZANF(J)).EQ. 7.AND.
     *                  LBOND(10,J)  .EQ. 2) NTYPE(J)=79
                  ENDDO
               END IF
               IF(NCARBN.EQ.2.AND.NOXGYN.EQ.1.AND.NNITR2.EQ.1.AND.
     *         NOXYCB.EQ.0.AND.NN3OXY.EQ.1)THEN
                  DO M=1,MB
                     J       = LISTRIN(M     ,IRING) 
                     IF(NINT(ZANF(J)).EQ. 8) NTYPE(J)=59
                     IF(NINT(ZANF(J)).EQ. 6) NTYPE(J)=78
                     IF(NINT(ZANF(J)).EQ. 7.AND.
     *                  LBOND(10,J)  .EQ. 3) THEN
                        NTYPE(J)=82
                        DO I=1,3
                           KBOND=LBOND(I,J)
                           JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                           IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                        LBOND(10,JFFAT).EQ.1) NTYPE(JFFAT)=32
                        ENDDO
                     END IF
                     IF(NINT(ZANF(J)).EQ. 7.AND.
     *                  LBOND(10,J)  .EQ. 2) NTYPE(J)=79
                  ENDDO
               END IF
               IF(NCARBN.EQ.3.AND.NOXGYN.EQ.1.AND.NNITRO.EQ.1.AND.
     *         NOXYCB.EQ.0)THEN
               DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0) MBEFO=MB
                  MBEFO2=MBEFO-1
                  IF(MBEFO2.EQ.0) MBEFO2=MB
                  MNEXT=M+1
                  IF(M.EQ.MB) MNEXT=1
                  MNEXT2=M+2
                  IF(MNEXT.EQ.MB) MNEXT2=1
                  J       = LISTRIN(M     ,IRING)
                  IF(NINT(ZANF(J)).EQ.8) THEN
                     BORDER(LISTRIB(M     ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO2,IRING))=TWO
                     BORDER(LISTRIB(MNEXT ,IRING))=TWO
                     BORDER(LISTRIB(MNEXT2,IRING))=ONE
                  END IF
                  IF(NINT(ZANF(J)).EQ. 8) NTYPE(J)=59
                  IF(NINT(ZANF(J)).EQ. 6) NTYPE(J)=78
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *               LBOND(10,J)  .EQ. 2) NTYPE(J)=79
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *               LBOND(10,J)  .EQ. 3) NTYPE(J)=81
               ENDDO
               END IF
C
               IF(NCARBN.EQ.2.AND.NNITR2.EQ.2.AND.NNITR3.EQ.1.AND.
     *         NOXYCB.EQ.0)THEN
                  DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0) MBEFO=MB
                  MBEFO2=MBEFO-1
                  IF(MBEFO2.EQ.0) MBEFO2=MB
                  MNEXT=M+1
                  IF(M.EQ.MB) MNEXT=1
                  MNEXT2=M+2
                  IF(MNEXT.EQ.MB) MNEXT2=1
                  J      = LISTRIN(M     ,IRING)
                  IF(NINT(ZANF(J)).EQ.7.AND.
     *               LBOND(10,J).EQ.3) THEN
                     BORDER(LISTRIB(M     ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO2,IRING))=TWO
                     BORDER(LISTRIB(MNEXT ,IRING))=TWO
                     BORDER(LISTRIB(MNEXT2,IRING))=ONE
                  END IF
                  IF(NINT(ZANF(J)).EQ. 6.AND.
     *               NTYPE(J)     .NE.80) NTYPE(J)=78
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *               LBOND(10,J)  .EQ. 2) NTYPE(J)=79
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *               LBOND(10,J)  .EQ. 3) NTYPE(J)=39
                  ENDDO
               END IF
C
               IF(NCARBN.EQ.1.AND.NNITR2.EQ.3.AND.NNITR3.EQ.1.AND.
     *         NOXYCB.EQ.0)THEN
                  DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0) MBEFO=MB
                  MBEFO2=MBEFO-1
                  IF(MBEFO2.EQ.0) MBEFO2=MB
                  MNEXT=M+1
                  IF(M.EQ.MB) MNEXT=1
                  MNEXT2=M+2
                  IF(MNEXT.EQ.MB) MNEXT2=1
                  J      = LISTRIN(M     ,IRING)
                  IF(NINT(ZANF(J)).EQ.7.AND.
     *               LBOND(10,J).EQ.3) THEN
                     BORDER(LISTRIB(M     ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO2,IRING))=TWO
                     BORDER(LISTRIB(MNEXT ,IRING))=TWO
                     BORDER(LISTRIB(MNEXT2,IRING))=ONE
                  END IF
                  IF(NINT(ZANF(J)).EQ. 6.AND.
     *               NTYPE(J)     .NE.80) NTYPE(J)=78
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *               LBOND(10,J)  .EQ. 2) NTYPE(J)=79
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *               LBOND(10,J)  .EQ. 3) NTYPE(J)=39
                  ENDDO
               END IF
               IF(NCARBN.EQ.3.AND.NNITR2.EQ.1.AND.NNITR3.EQ.1.AND.
     *         NOXYCB.EQ.0)THEN
                  DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0) MBEFO=MB
                  MBEFO2=MBEFO-1 
                  IF(MBEFO2.EQ.0) MBEFO2=MB
                  MNEXT=M+1
                  IF(M.EQ.MB) MNEXT=1
                  MNEXT2=M+2
                  IF(MNEXT.EQ.MB) MNEXT2=1
                  J      = LISTRIN(M     ,IRING)
                  IF(NINT(ZANF(J)).EQ.7.AND.
     *               LBOND(10,J).EQ.3) THEN
                     BORDER(LISTRIB(M     ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO2,IRING))=TWO
                     BORDER(LISTRIB(MNEXT ,IRING))=TWO
                     BORDER(LISTRIB(MNEXT2,IRING))=ONE
                  END IF
                  IF(NINT(ZANF(J)).EQ. 6.AND.
     *               NTYPE(J)     .NE.80) NTYPE(J)=78
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *               LBOND(10,J)  .EQ. 2) NTYPE(J)=79
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *               LBOND(10,J)  .EQ. 3) NTYPE(J)=39
                  ENDDO
               END IF
C
               IF(NCARBN.EQ.3.AND.NNITR3.EQ.2.AND.NOXYCB.EQ.0)THEN
                  LCASE=0
                  ICASE=0
                  DO M=1,MB
                     MBEFO=M-1
                     IF(MBEFO.EQ.0) MBEFO=MB
                     MNEXT=M+1
                     IF(M.EQ.MB) MNEXT=1
                     J    =LISTRIN(M     ,IRING)
                     JBEFO=LISTRIN(MBEFO ,IRING)
                     JNEXT=LISTRIN(MNEXT ,IRING)
                     IF(NINT(ZANF(J    )).EQ.6.AND.
     *                  NINT(ZANF(JBEFO)).EQ.7.AND.
     *                  NINT(ZANF(JNEXT)).EQ.7     ) ICASE=1
                     IF(NINT(ZANF(J)).EQ.7)THEN
                        DO I=1,3
                           KBOND=LBOND(I,J)
                           IXN=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                           IF((IXN.NE.JBEFO.AND.IXN.NE.JNEXT).AND.
     *                         NINT(ZANF(IXN)).NE.1 .AND.
     *                         NINT(ZANF(IXN)).NE.8 .AND.
     *                         NINT(ZANF(IXN)).NE.16   ) LCASE=LCASE+1
                        ENDDO
                     END IF
                  ENDDO
                  IF(ICASE.EQ.1.AND.LCASE.EQ.2)THEN
                     LRING=0
                     DO M=1,MB
                        J    =LISTRIN(M     ,IRING)
                        IF(NINT(ZANF(J)).EQ.7)THEN
                           IF(NUMRIN(10,J).GE.2) LRING=LRING+1
                        END IF
                     ENDDO
                     IF(LRING.EQ.0) LCASE=0
                  END IF
                  IF(LCASE.NE.2) THEN
                     IF(ICASE.EQ.1) THEN
                     DO M=1,MB
                        MBEFO=M-1
                        IF(MBEFO.EQ.0) MBEFO=MB
                        MNEXT=M+1
                        IF(M.EQ.MB) MNEXT=1
                        MBEFO2=MBEFO-1
                        IF(MBEFO2.EQ.0) MBEFO2=MB
                        MNEXT2=MNEXT+1
                        IF(MNEXT.EQ.MB) MNEXT2=1
                        J    =LISTRIN(M     ,IRING)
                        JBEFO=LISTRIN(MBEFO ,IRING)
                        JNEXT=LISTRIN(MNEXT ,IRING)
                        IF(NINT(ZANF(J    )).EQ.6.AND.
     *                     NINT(ZANF(JBEFO)).EQ.7.AND.
     *                     NINT(ZANF(JNEXT)).EQ.7.AND.
     *                     NUMRIN(10,J).EQ.1.AND.
     *                     LBOND(10,JBEFO).EQ.3.AND.
     *                     LBOND(10,JNEXT).EQ.3) THEN
                           NTYPE(J)=80
                           BORDER(LISTRIB(M     ,IRING))=ONEPT5
                           BORDER(LISTRIB(MBEFO ,IRING))=ONEPT5
                           BORDER(LISTRIB(MBEFO2,IRING))=ONE
                           BORDER(LISTRIB(MNEXT2,IRING))=TWO
                           BORDER(LISTRIB(MNEXT ,IRING))=ONE
                        END IF
                     ENDDO
                     DO M=1,MB
                        J= LISTRIN(M,IRING)
                        IF(NINT(ZANF(J)).EQ.6.AND.
     *                     NTYPE(J).EQ.0              ) NTYPE(J)=78
                        IF(NINT(ZANF(J)).EQ.7         ) THEN
                           NTYPE(J)=81
                           QMMFF(J)=PT5
                        END IF
                     ENDDO
                     END IF
                     IF(ICASE.EQ.0)THEN
                        DO M=1,MB
                           J= LISTRIN(M,IRING)
                           IF(NINT(ZANF(J)).EQ.6.AND.
     *                        NTYPE(J).EQ.0              ) NTYPE(J)=78
                           IF(NINT(ZANF(J)).EQ.7         ) NTYPE(J)=81
                           KBOND=LISTRIB(M,IRING)
                           I1=IPAIR(1,KBOND)
                           I2=IPAIR(2,KBOND)
                           IF(NINT(ZANF(I1)).EQ.7.AND.
     *                        NINT(ZANF(I2)).EQ.7     )THEN
                              BORDER(KBOND)=ONE
                           ELSE
                              BORDER(KBOND)=ONEPT5
                           END IF
                        ENDDO
                     END IF
                  ELSE 
                     DO M=1,MB
                        MBEFO=M-1
                        IF(MBEFO.EQ.0) MBEFO=MB
                        MNEXT=M+1
                        IF(M.EQ.MB) MNEXT=1
                        J    =LISTRIN(M     ,IRING)
                        IF(NINT(ZANF(J    )).EQ.7.AND.
     *                     NUMRIN(10,J).EQ.1) THEN
                           DO I=1,3
                              BORDER(LBOND(I,J))=ONE
                           ENDDO
                        END IF
                     ENDDO
                  END IF
               END IF
C
               IF(NCARBN.EQ.4.AND.NOXGYN.EQ.1.AND.NOXYCB.EQ.0)THEN
               DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0) MBEFO=MB
                  MBEFO2=MBEFO-1
                  IF(MBEFO2.EQ.0) MBEFO2=MB
                  MNEXT=M+1
                  IF(M.EQ.MB) MNEXT=1
                  J       = LISTRIN(M     ,IRING)
                  IF(NINT(ZANF(J)).EQ.7) THEN
                     BORDER(LISTRIB(M     ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO2,IRING))=TWO
                     BORDER(LISTRIB(MNEXT ,IRING))=TWO
                     BORDER(LISTRIB(MNEXT2,IRING))=ONE
                  END IF
                  IF(NINT(ZANF(J)).EQ. 8) NTYPE(J)=59
                  IF(NINT(ZANF(J)).EQ. 6) NTYPE(J)=78
               ENDDO
               END IF
C
               IF(NCARBN.EQ.4.AND.NSULFR.EQ.1.AND.NOXYCB.EQ.0)THEN
                  DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0) MBEFO=MB
                  MBEFO2=MBEFO-1
                  IF(MBEFO2.EQ.0) MBEFO2=MB
                  MNEXT=M+1
                  IF(M.EQ.MB) MNEXT=1
                  MNEXT2=MNEXT+1
                  IF(MNEXT.EQ.MB) MNEXT2=1
                  J       = LISTRIN(M     ,IRING)
                  IF(NINT(ZANF(J)).EQ.16) THEN
                     BORDER(LISTRIB(M     ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO2,IRING))=TWO
                     BORDER(LISTRIB(MNEXT ,IRING))=TWO
                     BORDER(LISTRIB(MNEXT2,IRING))=ONE
                  END IF
                  IF(NINT(ZANF(J)).EQ. 16) NTYPE(J)=44
                  IF(NINT(ZANF(J)).EQ. 6 ) NTYPE(J)=78
                  ENDDO
               END IF
C
               IF(NCARBN.EQ.4.AND.NNITR3.EQ.1.AND.NOXYCB.EQ.0)THEN
               DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0) MBEFO=MB
                  MBEFO2=MBEFO-1
                  IF(MBEFO2.EQ.0) MBEFO2=MB
                  MNEXT=M+1
                  IF(M.EQ.MB) MNEXT=1
                  MNEXT2=MNEXT+1
                  IF(MNEXT.EQ.MB) MNEXT2=1
                  J    = LISTRIN(M,IRING)
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *               LBOND(10,J)  .EQ. 3) THEN
                     NTYPE(J)=39
                     BORDER(LISTRIB(M     ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO ,IRING))=ONE
                     BORDER(LISTRIB(MBEFO2,IRING))=TWO
                     BORDER(LISTRIB(MNEXT ,IRING))=TWO
                     BORDER(LISTRIB(MNEXT2,IRING))=ONE
                  END IF
                  IF(NINT(ZANF(J)).EQ. 6) NTYPE(J)=78
               ENDDO
               END IF
         END IF
         END IF  ! IRING3.EQ.0
      ENDDO
      DO IFFAT=1,NFFAT
         IF(NTYPE(IFFAT).EQ.39)THEN
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=ONE
            ENDDO
         END IF
      ENDDO
      BCOUNT2=ZERO
      ICOUNT=0
 940  CONTINUE
      DO IANGL=1,NANGL
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL)
         IF(NINT(ZANF(K2)).EQ.7.AND.LBOND(10,K2).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.8.AND.NINT(ZANF(K3)).EQ.8      )THEN
            BTHERE=ZERO
            DO JJ=1,2
               KBOND=LBOND(JJ,K2)
               BTHERE=BTHERE+BORDER(KBOND)
            ENDDO
            IF(ABS(BTHERE-ONE).LT.0.1D-10)THEN
               DO JJ=1,2
                  KBOND=LBOND(JJ,K2)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=TWO
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.7.AND.LBOND(10,K2).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.16.AND.NINT(ZANF(K3)).EQ.16      )THEN
            BTHERE=ZERO
            DO JJ=1,2
               KBOND=LBOND(JJ,K2)
               BTHERE=BTHERE+BORDER(KBOND)
            ENDDO
            IF(ABS(BTHERE-ONE).LT.0.1D-10)THEN
               DO JJ=1,2
                  KBOND=LBOND(JJ,K2)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=TWO
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.2.AND.
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.3     )THEN
            BLFTC=FOUR
            ICASE1=0
            ICASE2=0
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10) ICASE1=1
               IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10) ICASE2=1
               BLFTC=BLFTC-BORDER(KBOND)
            ENDDO
            IF(BLFTC.EQ.THREE.AND.ICASE1.EQ.1.AND.ICASE2.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,K2)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                  IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=TWO
                  IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.   
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.3     )THEN
            BLFTC=FOUR
            ICASE1=0
            ICASE2=0
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10) ICASE1=1
               IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10) ICASE2=1
               BLFTC=BLFTC-BORDER(KBOND)
            ENDDO
            IF(BLFTC.EQ.THREE.AND.ICASE1.EQ.1.AND.ICASE2.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,K2)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                  IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=TWO
                  IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.8.AND.NINT(ZANF(K3)).EQ.6.AND.
     *      NINT(ZANF(K1)).EQ.6.AND.LBOND(10,K2).EQ.2)THEN
            DO I=1,LBOND(10,K2)
               IF(BORDER(LBOND(I,K2)).LT.0.1D-10) 
     *         BORDER(LBOND(I,K2))=ONE
            ENDDO
         END IF
         IF(NINT(ZANF(K2)).EQ.16.AND.NINT(ZANF(K3)).EQ.6.AND.
     *      NINT(ZANF(K1)).EQ.6.AND.LBOND(10,K2).EQ.2)THEN
            DO I=1,LBOND(10,K2)
               IF(BORDER(LBOND(I,K2)).LT.0.1D-10)
     *         BORDER(LBOND(I,K2))=ONE
            ENDDO
         END IF
      ENDDO
      DO IBOND=1,NBOND
         I1=IPAIR(1,IBOND)
         I2=IPAIR(2,IBOND)
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)).LT.0.1D-10.AND.
     *      LBOND(10,I1).EQ.3.AND.LBOND(10,I2).EQ.2)THEN
            LHYDRG=0
            DO I=1,2
               KBOND=LBOND(I,I2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-I2
               IF(NINT(ZANF(JFFAT)).EQ.1) LHYDRG=1
            ENDDO
            IF(LHYDRG.EQ.1) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I2)).EQ. 7.AND.NINT(ZANF(I1)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)).LT.0.1D-10.AND.
     *      LBOND(10,I2).EQ.3.AND.LBOND(10,I1).EQ.2)THEN
            LHYDRG=0
            DO I=1,2
               KBOND=LBOND(I,I1)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-I1
               IF(NINT(ZANF(JFFAT)).EQ.1) LHYDRG=1
            ENDDO
            IF(LHYDRG.EQ.1) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10.AND.LBOND(10,I1).EQ.2.AND.
     *      LBOND(10,I2).EQ.1   )THEN
            BLFT1=THREE
            BLFT2=TWO
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(ABS(BLFT1+ONE).LT.0.1D-10.AND.
     *         NLFT1.EQ.0.AND.NLFT2.EQ.0) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I1)).EQ. 8.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10.AND.LBOND(10,I1).EQ.1.AND.
     *      LBOND(10,I2).EQ.2   )THEN
            BLFT1=TWO
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(ABS(BLFT2+ONE).LT.0.1D-10.AND.
     *         NLFT1.EQ.0.AND.NLFT2.EQ.0) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *      BORDER(IBOND).LT.0.1D-10)THEN
            BLFT1=THREE
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         ABS(BLFT1-BLFT2).LT.0.1D-10)
     *      BORDER(IBOND)=BLFT1
         END IF
         IF(NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 6) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.BLEFT2.EQ.ONE) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF((BLEFT1.EQ.TWO.AND.BLEFT2.EQ.TWO)        .AND.
     *         (LBOND(10,I1).EQ.3.AND.LBOND(10,I2).EQ.3)     )THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO 
            END IF
            IF((BLEFT1.EQ.THREE.AND.BLEFT2.EQ.THREE)    .AND.
     *         (LBOND(10,I1).EQ.2.AND.LBOND(10,I2).EQ.2)     )THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 7) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.LBOND(10,I2).EQ.4)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT1.EQ.TWO.AND.LBOND(10,I1).EQ.3)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF(BLEFT1.EQ.THREE.AND.LBOND(10,I2).EQ.1)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
            IF(BORDER(IBOND).EQ.ONE.AND.LBOND(10,I1).EQ.2.AND.
     *         LBOND(10,I2).EQ.2)THEN
               DO I=1,2
                  IF(BORDER(LBOND(I,I2)).EQ.ZERO)
     *               BORDER(LBOND(I,I2))=TWO
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ. 7) THEN
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT2.EQ.ONE.AND.LBOND(10,I1).EQ.4)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT2.EQ.TWO.AND.LBOND(10,I2).EQ.3)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF(BLEFT2.EQ.THREE.AND.LBOND(10,I1).EQ.1)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
            IF(BORDER(IBOND).EQ.ONE.AND.LBOND(10,I1).EQ.2.AND.
     *         LBOND(10,I2).EQ.2)THEN
               DO I=1,2
                  IF(BORDER(LBOND(I,I1)).EQ.ZERO) 
     *               BORDER(LBOND(I,I1))=TWO
               ENDDO
            END IF
         END IF
         IF((NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 8).OR.
     *      (NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ.16)    ) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.LBOND(10,I2).EQ.2) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT1.EQ.TWO.AND.LBOND(10,I2).EQ.1) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
         END IF
         IF((NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ. 8).OR.
     *      (NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ.16)    ) THEN
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT2.EQ.ONE.AND.LBOND(10,I1).EQ.2) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT2.EQ.TWO.AND.LBOND(10,I1).EQ.1) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ.8.AND. LBOND(10,I1).EQ.2.AND.
     *      NINT(ZANF(I2)).EQ.7.AND.(LBOND(10,I2).EQ.3.OR.
     *      LBOND(10,I2).EQ.2).AND.BORDER(IBOND).LT.0.1D-10 )THEN
            BINO=TWO
            BINN=THREE
            NIBO=2
            NIBN=LBOND(10,I2)
            DO IXN=1,LBOND(10,I2)
               IF(BORDER(LBOND(IXN,I2)).GT.0.1D-10) NIBN=NIBN-1
               BINN=BINN-BORDER(LBOND(IXN,I2))
            ENDDO
            DO IXO=1,2
               IF(BORDER(LBOND(IXO,I1)).GT.0.1D-10) NIBO=NIBO-1
               BINO=BINO-BORDER(LBOND(IXO,I1))
            ENDDO
            IF(NIBN.EQ.1.AND.NIBO.EQ.1.AND.ABS(BINO-BINN).LT.0.1D-10)
     *      BORDER(IBOND)=BINO
         END IF
         IF(NINT(ZANF(I2)).EQ.8.AND. LBOND(10,I2).EQ.2.AND.
     *      NINT(ZANF(I1)).EQ.7.AND.(LBOND(10,I1).EQ.3.OR.
     *      LBOND(10,I1).EQ.2).AND.BORDER(IBOND).LT.0.1D-10)THEN
            BINO=TWO
            BINN=THREE
            NIBO=2
            NIBN=LBOND(10,I1)
            DO IXN=1,LBOND(10,I1)
               IF(BORDER(LBOND(IXN,I1)).GT.0.1D-10) NIBN=NIBN-1
               BINN=BINN-BORDER(LBOND(IXN,I1))
            ENDDO
            DO IXO=1,2
               IF(BORDER(LBOND(IXO,I2)).GT.0.1D-10) NIBO=NIBO-1
               BINO=BINO-BORDER(LBOND(IXO,I2))
            ENDDO
            IF(NIBN.EQ.1.AND.NIBO.EQ.1.AND.ABS(BINO-BINN).LT.0.1D-10)
     *      BORDER(IBOND)=BINO
         END IF
         IF(NINT(ZANF(I2)).EQ.7.AND.NINT(ZANF(I1)).EQ.7.AND.
     *      LBOND(10,I1).EQ.LBOND(10,I2).AND.
     *      BORDER(IBOND).LT.0.1D-10                        )THEN
            BIN1=THREE
            BIN2=THREE
            NIN1=LBOND(10,I1)
            NIN2=LBOND(10,I2)
            DO IX1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IX1,I1)).GT.0.1D-10) NIN1=NIN1-1
               BIN1=BIN1-BORDER(LBOND(IX1,I1))
            ENDDO
            DO IX2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IX2,I2)).GT.0.1D-10) NIN2=NIN2-1
               BIN2=BIN2-BORDER(LBOND(IX2,I2))
            ENDDO
            IF(NIN2.EQ.1.AND.NIN1.EQ.1.AND.ABS(BIN1-BIN2).LT.0.1D-10)
     *      BORDER(IBOND)=BIN1
         END IF
      ENDDO
C
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.2.AND.
     *      QMMFF(IFFAT).EQ.-ONE)THEN
            NNN=2
            DO I=1,2
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(BORDER(KBOND).GT.0.1D-10) NNN=NNN-1
            ENDDO
            IF(NNN.EQ.1)THEN
               DO I=1,2
                  KBOND=LBOND(I,IFFAT)
                  IF(BORDER(KBOND).LT.0.1D-10)
     *            BORDER(KBOND)=THREE-BTHERE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.2.AND.
     *      QMMFF(IFFAT).EQ.ZERO)THEN
            LOXY=0
            NNN=2
            BTHERE=ZERO
            DO I=1,2
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.OR.
     *            NINT(ZANF(JFFAT)).EQ.16) LOXY=LOXY+1
               IF(BORDER(KBOND).GT.0.1D-10) NNN=NNN-1
               BTHERE=BTHERE+BORDER(KBOND)
            ENDDO
            IF(NNN.EQ.1.AND.LOXY.EQ.1)THEN
               DO I=1,2
                  KBOND=LBOND(I,IFFAT)
                  IF(BORDER(KBOND).LT.0.1D-10) 
     *            BORDER(KBOND)=THREE-BTHERE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.16.AND.LBOND(10,IFFAT).EQ.4)THEN
            LOXY=0
            LNTR=0
            LCAB=0
            DO JJ=1,4
               KBOND=LBOND(JJ,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)
     *         LOXY=LOXY+1
               IF(NINT(ZANF(JFFAT)).EQ.7.AND.LBOND(10,JFFAT).EQ.2)
     *         LNTR=LNTR+1
               IF(NINT(ZANF(JFFAT)).EQ.6.AND.LBOND(10,JFFAT).EQ.2)
     *         LCAB=LCAB+1
            ENDDO
            IF(LCAB.EQ.1.AND.LOXY.EQ.2.AND.LNTR.EQ.1)THEN
            DO JJ=1,4
               KBOND=LBOND(JJ,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)
     *         BORDER(KBOND)=TWO
               IF(NINT(ZANF(JFFAT)).EQ.7.AND.LBOND(10,JFFAT).EQ.2)
     *         BORDER(KBOND)=ONE
               IF(NINT(ZANF(JFFAT)).EQ.6.AND.LBOND(10,JFFAT).EQ.2)
     *         BORDER(KBOND)=ONE
            ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.15.AND.LBOND(10,IFFAT).EQ.2)THEN
            ICARBN=0
            DO I=1,2
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)
               IF(NINT(ZANF(JFFAT)).EQ.6.AND.BORDER(KBOND).GT.0.1D-10)
     *         ICARBN=ICARBN+1
            ENDDO
            IF(ICARBN.EQ.1)THEN
               DO I=1,2
                  KBOND=LBOND(I,IFFAT)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.15.AND.LBOND(10,IFFAT).EQ.4)THEN
            BLEFT=FIVE
            NLFTP=4
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).GT.1.0D-10) NLFTP=NLFTP-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFTP.EQ.1) THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).LT.1.0D-10)
     *            BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.2)THEN
            BLEFT=FOUR
            NLFTC=2
            DO I=1,2
               IF(BORDER(LBOND(I,IFFAT)).GT.0.1D-10) NLFTC=NLFTC-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFTC.EQ.1)THEN
               DO I=1,2
                  IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10) 
     *            BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.3)THEN
            BLEFT=FOUR
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).EQ.ONE)
     *         BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(BLEFT.EQ.TWO)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *               BORDER(LBOND(I,IFFAT))=TWO
               ENDDO
            END IF
            BLEFT=FOUR
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).EQ.TWO)
     *         BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(BLEFT.EQ.TWO)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *               BORDER(LBOND(I,IFFAT))=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.3)THEN
            BLEFT=THREE
            NLFET=3
            LOXY=0
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).GT.0.1D-10) NLFET=NLFET-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)
     *         LOXY=LOXY+1
            ENDDO
            IF(ABS(BLEFT).LT.0.1D-10.AND.NLFET.EQ.1.AND.LOXY.EQ.0)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10)
     *            BORDER(LBOND(I,IFFAT))=ONE
               ENDDO
            END IF
         END IF
      ENDDO
C
      BCOUNT1=ZERO
      ICOUNT=ICOUNT+1
      DO IBOND=1,NBOND
         BCOUNT1=BCOUNT1+BORDER(IBOND)
      ENDDO
      IF(ABS(BCOUNT1-BCOUNT2).LT.0.1D-10) GOTO 941
      IF(ICOUNT.GT.300) GOTO 941
      BCOUNT2=BCOUNT1
      GOTO 940
 941  CONTINUE
C
C
C
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         IF(MB.EQ.6) THEN
            IRING3=0
            IBCUNT=0
            IDOUBL=0
            I39CNT=0
            DO M=1,MB
               J=LISTRIN(M,IRING)
               IF(NUMRIN(10,J).GE.3) THEN
                  LRING=0
                  DO I=1,NUMRIN(10,J)
                     IF(NRINTYP(NUMRIN(I,J)).EQ.1) LRING=LRING+1
                  ENDDO
                  IF(LRING.GE.3)  IRING3=IRING3+1
               END IF
            ENDDO
            IF(IRING3.EQ.2) IRING3=0
            DO M=1,MB
               MBEFO=M-1
               IF(MBEFO.EQ.0) MBEFO=MB
               J=LISTRIN(M,IRING)
               JBEFO=LISTRIN(MBEFO,IRING)
               JNEXT=LISTRIN(MNEXT,IRING)
               IF(NTYPE(J).EQ.39.OR.
     *            NTYPE(J).EQ.59.OR.
     *            NTYPE(J).EQ.44    ) I39CNT=I39CNT+1
               IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.3.AND.
     *            NUMRIN(10,J).GE.2 ) IRING3=IRING3+1
               IF(BORDER(LISTRIB(M,IRING)).GT.0.1D-10) IBCUNT=IBCUNT+1
               DO I=1,LBOND(10,J)
                  IF(LBOND(I,J).NE.LISTRIB(M    ,IRING).AND.
     *               LBOND(I,J).NE.LISTRIB(MBEFO,IRING).AND.
     *               ABS(BORDER(LBOND(I,J))-TWO).LT.0.1D-10.AND.
     *               NUMRIN(10,J).EQ.1)THEN
                     IDOUBL=IDOUBL+1
                     IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.3)THEN
                        DO JJ=1,3
                           KBOND=LBOND(JJ,J)
                           K=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                           IF(K.NE.JBEFO.AND.K.NE.JNEXT.AND.
     *                        IDOUBL.GT.0) IDOUBL=IDOUBL-1
                        ENDDO
                     END IF
                  END IF
               ENDDO
            ENDDO
            IF(IRING3.NE.0.AND.IDOUBL.EQ.0)THEN
               NNITRO=0
               NNITR3=0
               NCARBN=0
               DO M=1,MB
                  IFFAT=LISTRIN(M     ,IRING)
                  IF(NUMRIN(10,IFFAT) .EQ.3.AND.
     *               NINT(ZANF(IFFAT)).EQ.7     ) THEN
                     DO I=1,3
                        BORDER(LBOND(I,IFFAT))=ONE
                     ENDDO
                     NNITR3=NNITR3+1
                     JFFAT=IFFAT
                  END IF
                  IF(NINT(ZANF(IFFAT)).EQ. 6.AND.
     *               LBOND(10,IFFAT)  .EQ. 3 ) NCARBN=NCARBN+1
                  IF(NINT(ZANF(IFFAT)).EQ. 7 ) NNITRO=NNITRO+1
               ENDDO
               IF(NNITR3.EQ.1.AND.NNITRO.EQ.2.AND.NCARBN.EQ.4)THEN
                  DO M=1,MB
                     MBEFO=M-1
                     IF(MBEFO.EQ.0) MBEFO=MB
                     MBEFO2=MBEFO-1
                     IF(MBEFO2.EQ.0) MBEFO2=MB
                     MNEXT=M+1
                     IF(M.EQ.MB) MNEXT=1
                     MNEXT2=MNEXT+1
                     IF(MNEXT.EQ.MB) MNEXT2=1
                     J     =LISTRIN(M     ,IRING)
                     JBEFO =LISTRIN(MBEFO ,IRING)
                     JBEFO2=LISTRIN(MBEFO2,IRING)
                     JNEXT =LISTRIN(MNEXT ,IRING)
                     JNEXT2=LISTRIN(MNEXT2,IRING)
                     IF(J.EQ.JFFAT.AND.NINT(ZANF(JBEFO)).EQ.6.AND.
     *                  NINT(ZANF(JBEFO2)).EQ.7   )THEN
                        BORDER(LISTRIB(MBEFO2,IRING))=TWO
                     END IF
                     IF(J.EQ.JFFAT.AND.NINT(ZANF(JNEXT)).EQ.6.AND.   
     *                  NINT(ZANF(JNEXT2)).EQ.7   )THEN
                        BORDER(LISTRIB(MNEXT,IRING))=TWO
                     END IF
                  ENDDO
               END IF
            END IF
            IF(IRING3.EQ.0.AND.IBCUNT.NE.0.AND.IDOUBL.LE.0.AND.
     *         I39CNT.EQ.0)THEN
               NCARBN=0
               NNITR2=0
               NOXYCB=0
               NNITR3=0
               NN3OXY=0
               IAROMTC=0
               ICOUNTA=0
               DO M=1,MB
                  IFFAT = LISTRIN(M,IRING)
                  IF(NINT(ZANF(IFFAT)).EQ. 6.AND.
     *               LBOND(10,IFFAT)  .EQ. 3 ) THEN
                     NCARBN=NCARBN+1
                     LOXY=0
                     DO I=1,3
                        KBOND=LBOND(I,IFFAT)
                        JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                        IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                  LBOND(10,JFFAT).EQ.1       ) LOXY=LOXY+1
                        IF(NINT(ZANF(JFFAT)).EQ.16.AND.
     *                  LBOND(10,JFFAT).EQ.1       ) LOXY=LOXY+1
                     ENDDO
                     IF(LOXY.NE.0) NOXYCB=NOXYCB+1
                  END IF
                  IF(NINT(ZANF(IFFAT)).EQ. 7.AND.
     *               LBOND(10,IFFAT)  .EQ. 2 ) NNITR2=NNITR2+1
                  IF(NINT(ZANF(IFFAT)).EQ. 7.AND.
     *               LBOND(10,IFFAT)  .EQ. 3 ) THEN
                     NNITR3=NNITR3+1
                     DO I=1,3
                        KBOND=LBOND(I,IFFAT)
                        JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                        IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                     JFFAT.NE.INEXT.AND.LBOND(10,JFFAT).EQ.1.AND.
     *                     JFFAT.NE.IBEFO     ) NN3OXY=NN3OXY+1
                     ENDDO
                  END IF
               ENDDO
               IF(NOXYCB.LT.2)THEN
                  IAROMTC=NNITR2+NCARBN+2*NNITR3-NN3OXY
                  ICOUNTA=NNITR2+NCARBN+NNITR3
                  IF((IAROMTC.EQ.6.OR.IAROMTC.EQ.7).AND.
     *               ICOUNTA.EQ.6)THEN
                     DO M=1,MB
                        MBEFO=M-1
                        IF(MBEFO.EQ.0) MBEFO=MB
                        MNEXT=M+1
                        IF(M.EQ.MB) MNEXT=1
                        JNEXT =LISTRIN(MNEXT ,IRING)
                        JBEFO =LISTRIN(MBEFO ,IRING)
                        J = LISTRIN(M,IRING)
                        IF(NINT(ZANF(J)).EQ.6.AND.NTYPE(J).EQ.0)
     *                     NTYPE(J)=37
                        IF(NINT(ZANF(J)).EQ.7.AND.NTYPE(J).EQ.0.AND.
     *                     LBOND(10,J).EQ.2)
     *                     NTYPE(J)=38
                        IF(NINT(ZANF(J)).EQ.7.AND.NTYPE(J).EQ.0.AND.
     *                     LBOND(10,J).EQ.3) THEN
                           LCOUNT=0
                           DO I=1,3
                              KBOND=LBOND(I,J)
                              K=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                              IF(K.NE.JNEXT.AND.K.NE.JBEFO.AND.
     *                           NINT(ZANF(K)).EQ.8.AND.
     *                           LBOND(10,K).EQ.1) LCOUNT=1
                           ENDDO
                           IF(LCOUNT.EQ.1)THEN
                              NTYPE(J)=69
                           ELSE
                              NTYPE(J)=58
                              QMMFF(J)=ONE
                           END IF
                        END IF
                     ENDDO
                  END IF
               END IF
            END IF
            IF(IRING3.EQ.0.AND.IBCUNT.EQ.0.AND.IDOUBL.LE.0.AND.
     *         I39CNT.EQ.0)THEN
            NCARBN=0
            NNITR2=0
            NOXYCB=0
            NNITR3=0
            NN3OXY=0
            IAROMTC=0
            ICOUNTA=0
            DO M=1,MB
               IFFAT = LISTRIN(M,IRING)
               IF(NINT(ZANF(IFFAT)).EQ. 6.AND.
     *            LBOND(10,IFFAT)  .EQ. 3 ) THEN
                  NCARBN=NCARBN+1
                  LOXY=0
                  DO I=1,3
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *               LBOND(10,JFFAT).EQ.1       ) LOXY=LOXY+1
                     IF(NINT(ZANF(JFFAT)).EQ.16.AND.
     *               LBOND(10,JFFAT).EQ.1       ) LOXY=LOXY+1
                  ENDDO
                  IF(LOXY.NE.0) NOXYCB=NOXYCB+1
               END IF
               IF(NINT(ZANF(IFFAT)).EQ. 7.AND.
     *            LBOND(10,IFFAT)  .EQ. 2 ) NNITR2=NNITR2+1
               IF(NINT(ZANF(IFFAT)).EQ. 7.AND.
     *            LBOND(10,IFFAT)  .EQ. 3 ) THEN
                  NNITR3=NNITR3+1
                  DO I=1,3
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                  JFFAT.NE.INEXT.AND.LBOND(10,JFFAT).EQ.1.AND.
     *                  JFFAT.NE.IBEFO     ) NN3OXY=NN3OXY+1
                  ENDDO
               END IF
            ENDDO
            IF(NOXYCB.LT.2)THEN
               IAROMTC=NNITR2+NCARBN+2*NNITR3-NN3OXY
               ICOUNTA=NNITR2+NCARBN+NNITR3
               IF((IAROMTC.EQ.6.OR.IAROMTC.EQ.7).AND.
     *            ICOUNTA.EQ.6)THEN
                  DO M=1,MB
                     MBEFO=M-1
                     IF(MBEFO.EQ.0) MBEFO=MB
                     MNEXT=M+1
                     IF(M.EQ.MB) MNEXT=1
                     JNEXT =LISTRIN(MNEXT ,IRING)
                     JBEFO =LISTRIN(MBEFO ,IRING)
                     J = LISTRIN(M,IRING)
                     IF(NINT(ZANF(J)).EQ.6.AND.NTYPE(J).EQ.0)
     *                  NTYPE(J)=37
                     IF(NINT(ZANF(J)).EQ.7.AND.NTYPE(J).EQ.0.AND.
     *                  LBOND(10,J).EQ.2)
     *                  NTYPE(J)=38
                     IF(NINT(ZANF(J)).EQ.7.AND.NTYPE(J).EQ.0.AND.
     *                  LBOND(10,J).EQ.3) THEN
                        LCOUNT=0
                        DO I=1,3
                           KBOND=LBOND(I,J)
                           K=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                           IF(K.NE.JNEXT.AND.K.NE.JBEFO.AND.
     *                        NINT(ZANF(K)).EQ.8.AND.
     *                        LBOND(10,K).EQ.1) LCOUNT=1
                        ENDDO
                        IF(LCOUNT.EQ.1)THEN
                           NTYPE(J)=69
                        ELSE
                           NTYPE(J)=58
                           QMMFF(J)=ONE
                        END IF
                     END IF
                  ENDDO
               END IF
            END IF
            IAROMTC=NNITR2+NCARBN
            IF(NOXYCB.EQ.0.AND.IAROMTC.EQ.6) THEN
               DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0)MBEFO=MB
                  MNEXT=M+1
                  IF(M.EQ.MB) MNEXT=1
                  IFFAT=LISTRIN(M,IRING)
                  IF(NINT(ZANF(IFFAT)).EQ.6) THEN
                     IF(NTYPE(IFFAT).EQ.0) NTYPE(IFFAT)=37
                  END IF
                  IF(NINT(ZANF(IFFAT)).EQ.7) THEN
                     IF(LBOND(10,IFFAT).EQ.2) NTYPE(IFFAT)=38
                  END IF
                  IF(NINT(ZANF(J)).EQ.7.AND.NTYPE(J).EQ.0.AND.
     *               LBOND(10,J).EQ.3) THEN
                     LCOUNT=0
                     DO I=1,3
                        KBOND=LBOND(I,J)
                        K=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                        IF(K.NE.JNEXT.AND.K.NE.JBEFO.AND.
     *                     NINT(ZANF(K)).EQ.8.AND.
     *                     LBOND(10,K).EQ.1) LCOUNT=1
                     ENDDO
                     IF(LCOUNT.EQ.1)THEN
                        NTYPE(J)=69
                     ELSE
                        NTYPE(J)=58
                        QMMFF(J)=ONE
                     END IF
                  END IF
                  BNDRIN=ZERO
                  DO MM=1,MB
                     BNDRIN=BNDRIN+BORDER(LISTRIB(MM,IRING))
                  ENDDO
                  IF(BNDRIN.LT.0.1D-10)THEN
                     DO I=1,LBOND(10,IFFAT)
                        KBOND=LBOND(I,IFFAT)
                        JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                        IF(JFFAT.EQ.LISTRIN(MBEFO,IRING).OR.
     *                     JFFAT.EQ.LISTRIN(MNEXT,IRING)    ) THEN
                           IF(BORDER(KBOND).EQ.ZERO)BORDER(KBOND)=ONEPT5
                        END IF
                     ENDDO
                  END IF
               ENDDO
            END IF
            I1 = LISTRIN(1,IRING)
            I2 = LISTRIN(2,IRING)
            I3 = LISTRIN(3,IRING)
            I4 = LISTRIN(4,IRING)
            I5 = LISTRIN(5,IRING)
            I6 = LISTRIN(6,IRING)
            N1 = NINT(ZANF(I1))
            N2 = NINT(ZANF(I2))
            N3 = NINT(ZANF(I3))
            N4 = NINT(ZANF(I4))
            N5 = NINT(ZANF(I5))
            N6 = NINT(ZANF(I6))
            L1 = LBOND(10,I1)
            L2 = LBOND(10,I2)
            L3 = LBOND(10,I3)
            L4 = LBOND(10,I4)
            L5 = LBOND(10,I5)
            L6 = LBOND(10,I6)
            LOXY=0
            DO M=1,MB
               IFFAT = LISTRIN(M,IRING)
               DO J=1,LBOND(10,IFFAT)
                  KBOND = LBOND(J,IFFAT)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8) LOXY=LOXY+1
               ENDDO
            ENDDO
            IF(LOXY.LE.1          .AND.
     *         N1.EQ.6.AND.L1.EQ.3.AND.
     *         N2.EQ.6.AND.L2.EQ.3.AND.
     *         N3.EQ.6.AND.L3.EQ.3.AND.
     *         N4.EQ.6.AND.L4.EQ.3.AND.
     *         N5.EQ.6.AND.L5.EQ.3.AND.
     *         N6.EQ.6.AND.L6.EQ.3     ) THEN
               DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0)MBEFO=MB
                  MNEXT=M+1
                  IF(M.EQ.MB) MNEXT=1
                  IFFAT=LISTRIN(M,IRING)
                  IF(NINT(ZANF(IFFAT)).EQ.6) THEN
                     IF(NTYPE(IFFAT).EQ.0) NTYPE(IFFAT)=37
                  END IF
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(JFFAT.EQ.LISTRIN(MBEFO,IRING).OR.
     *                  JFFAT.EQ.LISTRIN(MNEXT,IRING)    ) THEN
                        IF(BORDER(KBOND).EQ.ZERO)BORDER(KBOND)=ONEPT5
                     END IF
                  ENDDO
               ENDDO
            END IF
            NALL = N1+N2+N3+N4+N5+N6
            NMAX = MAX(MAX(MAX(MAX(MAX(N1,N2),N3),N4),N5),N6)
            NMIN = MIN(MIN(MIN(MIN(MIN(N1,N2),N3),N4),N5),N6)
            LALL = L1+L2+L3+L4+L5+L6
            LMAX = MAX(MAX(MAX(MAX(MAX(L1,L2),L3),L4),L5),L6)
            LMIN = MIN(MIN(MIN(MIN(MIN(L1,L2),L3),L4),L5),L6)
            IF(LOXY.LE.1          .AND.
     *         (NMIN.EQ.6.AND.NMAX.EQ.7.AND.NALL.EQ.37.AND.
     *          LMIN.EQ.3.AND.LMAX.EQ.3.AND.LALL.EQ.18     ).OR.
     *         (NMIN.EQ.6.AND.NMAX.EQ.7.AND.NALL.EQ.37.AND.
     *          LMIN.EQ.2.AND.LMAX.EQ.3.AND.LALL.EQ.17     ).OR.
     *         (NMIN.EQ.6.AND.NMAX.EQ.7.AND.NALL.EQ.38.AND.
     *          LMIN.EQ.2.AND.LMAX.EQ.3.AND.LALL.EQ.16     ).OR.
     *         (NMIN.EQ.6.AND.NMAX.EQ.7.AND.NALL.EQ.38.AND.
     *          LMIN.EQ.2.AND.LMAX.EQ.3.AND.LALL.EQ.17     )    )THEN
               DO M=1,MB
                  MBEFO=M-1
                  IF(MBEFO.EQ.0)MBEFO=MB
                  MNEXT=M+1
                  IF(M.EQ.MB) MNEXT=1
                  IFFAT=LISTRIN(M,IRING)
                  JNEXT =LISTRIN(MNEXT ,IRING)
                  JBEFO =LISTRIN(MBEFO ,IRING)
                  IF(NINT(ZANF(IFFAT)).EQ.6) THEN
                     IF(NTYPE(IFFAT).EQ.0) NTYPE(IFFAT)=37
                  END IF
                  IF(NINT(ZANF(IFFAT)).EQ.7) THEN
                     IF(LBOND(10,IFFAT).EQ.2) NTYPE(IFFAT)=38
                     IF(LBOND(10,IFFAT).EQ.3) THEN
                        LCOUNT=0
                        DO I=1,3
                           KBOND=LBOND(I,IFFAT)
                           K=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                           IF(K.NE.JNEXT.AND.K.NE.JBEFO.AND.
     *                        NINT(ZANF(K)).EQ.8.AND.
     *                        LBOND(10,K).EQ.1) LCOUNT=1
                        ENDDO
                        IF(LCOUNT.EQ.1)THEN
                           NTYPE(IFFAT)=69
                        ELSE 
                           NTYPE(IFFAT)=58
                           QMMFF(IFFAT)=ONE 
                        END IF
                     END IF
                  END IF
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(JFFAT.EQ.LISTRIN(MBEFO,IRING).OR.
     *                  JFFAT.EQ.LISTRIN(MNEXT,IRING)    ) THEN
                        IF(BORDER(KBOND).EQ.ZERO)BORDER(KBOND)=ONEPT5
                     END IF
                  ENDDO
               ENDDO
            END IF
         END IF
         END IF  ! IRING3.EQ.0
      ENDDO
C
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         LCOUNT=0
         DO M=1,MB
            IF(BORDER(LISTRIB(M,IRING)).LT.0.1D-10) LCOUNT=LCOUNT+1
         ENDDO
         IF(LCOUNT.EQ.MB)THEN
            DO M=1,MB
               MBEFO=M-1
               IF(MBEFO.EQ.0)  MBEFO=MB
               MNEXT=M+1
               IF(MNEXT.EQ.MB) MNEXT=1
               IFFAT=LISTRIN(M    ,IRING)
               IBEFO=LISTRIN(MBEFO,IRING)
               INEXT=LISTRIN(MNEXT,IRING)
               IF(NINT(ZANF(IFFAT)).EQ.6)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF((NINT(ZANF(JFFAT)).EQ.8.OR.
     *                   NINT(ZANF(JFFAT)).EQ.16   ).AND.
     *                   JFFAT.NE.IBEFO.AND.JFFAT.NE.INEXT   )THEN
                         IF(NINT(ZANF(IBEFO)).EQ.7.AND.
     *                      LBOND(10,IBEFO).EQ.2.AND.
     *                      NINT(ZANF(INEXT)).NE.7) 
     *                   BORDER(LISTRIB(MBEFO,IRING))=TWO
                         IF(NINT(ZANF(INEXT)).EQ.7.AND.
     *                      LBOND(10,INEXT).EQ.2.AND.
     *                      NINT(ZANF(IBEFO)).NE.7)
     *                   BORDER(LISTRIB(M,IRING))=TWO
                     END IF
                  ENDDO
               END IF
            ENDDO
         END IF
      ENDDO
C
      BCOUNT2=ZERO
      ICOUNT=0
 933  CONTINUE
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         DO M=1,MB
            IFFAT=LISTRIN(M,IRING)
            MBEFO=M-1
            IF(MBEFO.EQ.0) MBEFO=MB
            IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.2.AND.
     *         QMMFF(IFFAT).EQ.ZERO)THEN
               BLEFT=THREE
               IF(BORDER(LISTRIB(M    ,IRING)).EQ.ZERO.AND.
     *            BORDER(LISTRIB(MBEFO,IRING)).NE.ZERO    )
     *         BORDER(LISTRIB(M    ,IRING))=
     *         BLEFT-BORDER(LISTRIB(MBEFO,IRING))
               IF(BORDER(LISTRIB(M    ,IRING)).NE.ZERO.AND.
     *            BORDER(LISTRIB(MBEFO,IRING)).EQ.ZERO    )
     *         BORDER(LISTRIB(MBEFO,IRING))=
     *         BLEFT-BORDER(LISTRIB(M,IRING))
            END IF
         ENDDO
      ENDDO
      DO IANGL=1,NANGL
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL)
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.2.AND.
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.3     )THEN
            BLFTC=FOUR
            ICASE1=0
            ICASE2=0
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10) ICASE1=1
               IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10) ICASE2=1
               BLFTC=BLFTC-BORDER(KBOND)
            ENDDO
            IF(BLFTC.EQ.THREE.AND.ICASE1.EQ.1.AND.ICASE2.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,K2)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                  IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=TWO
                  IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.   
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.3     )THEN
            BLFTC=FOUR
            ICASE1=0
            ICASE2=0
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10) ICASE1=1
               IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10) ICASE2=1
               BLFTC=BLFTC-BORDER(KBOND)
            ENDDO
            IF(BLFTC.EQ.THREE.AND.ICASE1.EQ.1.AND.ICASE2.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,K2)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                  IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=TWO
                  IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.8.AND.NINT(ZANF(K3)).EQ.6.AND.
     *      NINT(ZANF(K1)).EQ.6.AND.LBOND(10,K2).EQ.2)THEN
            DO I=1,LBOND(10,K2)
               IF(BORDER(LBOND(I,K2)).LT.0.1D-10) 
     *         BORDER(LBOND(I,K2))=ONE
            ENDDO
         END IF
         IF(NINT(ZANF(K2)).EQ.16.AND.NINT(ZANF(K3)).EQ.6.AND.
     *      NINT(ZANF(K1)).EQ.6.AND.LBOND(10,K2).EQ.2)THEN
            DO I=1,LBOND(10,K2)
               IF(BORDER(LBOND(I,K2)).LT.0.1D-10)
     *         BORDER(LBOND(I,K2))=ONE
            ENDDO
         END IF
      ENDDO
      DO IBOND=1,NBOND
         I1=IPAIR(1,IBOND)
         I2=IPAIR(2,IBOND)
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *      BORDER(IBOND).LT.0.1D-10)THEN
            BLFT1=THREE
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         ABS(BLFT1-BLFT2).LT.0.1D-10)
     *      BORDER(IBOND)=BLFT1
         END IF
         IF(NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 6) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.BLEFT2.EQ.ONE) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF((BLEFT1.EQ.TWO.AND.BLEFT2.EQ.TWO)        .AND.
     *         (LBOND(10,I1).EQ.3.AND.LBOND(10,I2).EQ.3)     )THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO 
            END IF
            IF((BLEFT1.EQ.THREE.AND.BLEFT2.EQ.THREE)    .AND.
     *         (LBOND(10,I1).EQ.2.AND.LBOND(10,I2).EQ.2)     )THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 7) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.LBOND(10,I2).EQ.4)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT1.EQ.TWO.AND.LBOND(10,I1).EQ.3)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF(BLEFT1.EQ.THREE.AND.LBOND(10,I2).EQ.1)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
            IF(BORDER(IBOND).EQ.ONE.AND.LBOND(10,I1).EQ.2.AND.
     *         LBOND(10,I2).EQ.2)THEN
               DO I=1,2
                  IF(BORDER(LBOND(I,I2)).EQ.ZERO)
     *               BORDER(LBOND(I,I2))=TWO
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ. 7) THEN
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT2.EQ.ONE.AND.LBOND(10,I1).EQ.4)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT2.EQ.TWO.AND.LBOND(10,I2).EQ.3)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF(BLEFT2.EQ.THREE.AND.LBOND(10,I1).EQ.1)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
            IF(BORDER(IBOND).EQ.ONE.AND.LBOND(10,I1).EQ.2.AND.
     *         LBOND(10,I2).EQ.2)THEN
               DO I=1,2
                  IF(BORDER(LBOND(I,I1)).EQ.ZERO) 
     *               BORDER(LBOND(I,I1))=TWO
               ENDDO
            END IF
         END IF
         IF((NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 8).OR.
     *      (NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ.16)    ) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.LBOND(10,I2).EQ.2) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT1.EQ.TWO.AND.LBOND(10,I2).EQ.1) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
         END IF
         IF((NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ. 8).OR.
     *      (NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ.16)    ) THEN
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT2.EQ.ONE.AND.LBOND(10,I1).EQ.2) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT2.EQ.TWO.AND.LBOND(10,I1).EQ.1) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ.8.AND. LBOND(10,I1).EQ.2.AND.
     *      NINT(ZANF(I2)).EQ.7.AND.(LBOND(10,I2).EQ.3.OR.
     *      LBOND(10,I2).EQ.2).AND.BORDER(IBOND).LT.0.1D-10 )THEN
            BINO=TWO
            BINN=THREE
            NIBO=2
            NIBN=LBOND(10,I2)
            DO IXN=1,LBOND(10,I2)
               IF(BORDER(LBOND(IXN,I2)).GT.0.1D-10) NIBN=NIBN-1
               BINN=BINN-BORDER(LBOND(IXN,I2))
            ENDDO
            DO IXO=1,2
               IF(BORDER(LBOND(IXO,I1)).GT.0.1D-10) NIBO=NIBO-1
               BINO=BINO-BORDER(LBOND(IXO,I1))
            ENDDO
            IF(NIBN.EQ.1.AND.NIBO.EQ.1.AND.ABS(BINO-BINN).LT.0.1D-10)
     *      BORDER(IBOND)=BINO
         END IF
         IF(NINT(ZANF(I2)).EQ.8.AND. LBOND(10,I2).EQ.2.AND.
     *      NINT(ZANF(I1)).EQ.7.AND.(LBOND(10,I1).EQ.3.OR.
     *      LBOND(10,I1).EQ.2).AND.BORDER(IBOND).LT.0.1D-10)THEN
            BINO=TWO
            BINN=THREE
            NIBO=2
            NIBN=LBOND(10,I1)
            DO IXN=1,LBOND(10,I1)
               IF(BORDER(LBOND(IXN,I1)).GT.0.1D-10) NIBN=NIBN-1
               BINN=BINN-BORDER(LBOND(IXN,I1))
            ENDDO
            DO IXO=1,2
               IF(BORDER(LBOND(IXO,I2)).GT.0.1D-10) NIBO=NIBO-1
               BINO=BINO-BORDER(LBOND(IXO,I2))
            ENDDO
            IF(NIBN.EQ.1.AND.NIBO.EQ.1.AND.ABS(BINO-BINN).LT.0.1D-10)
     *      BORDER(IBOND)=BINO
         END IF
         IF(NINT(ZANF(I2)).EQ.7.AND.NINT(ZANF(I1)).EQ.7.AND.
     *      LBOND(10,I1).EQ.LBOND(10,I2).AND.
     *      BORDER(IBOND).LT.0.1D-10                        )THEN
            BIN1=THREE
            BIN2=THREE
            NIN1=LBOND(10,I1)
            NIN2=LBOND(10,I2)
            DO IX1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IX1,I1)).GT.0.1D-10) NIN1=NIN1-1
               BIN1=BIN1-BORDER(LBOND(IX1,I1))
            ENDDO
            DO IX2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IX2,I2)).GT.0.1D-10) NIN2=NIN2-1
               BIN2=BIN2-BORDER(LBOND(IX2,I2))
            ENDDO
            IF(NIN2.EQ.1.AND.NIN1.EQ.1.AND.ABS(BIN1-BIN2).LT.0.1D-10)
     *      BORDER(IBOND)=BIN1
         END IF
      ENDDO
C
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.16.AND.LBOND(10,IFFAT).EQ.4)THEN
            LOXY=0
            LNTR=0
            LCAB=0
            DO JJ=1,4
               KBOND=LBOND(JJ,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)
     *         LOXY=LOXY+1
               IF(NINT(ZANF(JFFAT)).EQ.7.AND.LBOND(10,JFFAT).EQ.2)
     *         LNTR=LNTR+1
               IF(NINT(ZANF(JFFAT)).EQ.6.AND.LBOND(10,JFFAT).EQ.2)
     *         LCAB=LCAB+1
            ENDDO
            IF(LCAB.EQ.1.AND.LOXY.EQ.2.AND.LNTR.EQ.1)THEN
            DO JJ=1,4
               KBOND=LBOND(JJ,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)
     *         BORDER(KBOND)=TWO
               IF(NINT(ZANF(JFFAT)).EQ.7.AND.LBOND(10,JFFAT).EQ.2)
     *         BORDER(KBOND)=ONE
               IF(NINT(ZANF(JFFAT)).EQ.6.AND.LBOND(10,JFFAT).EQ.2)
     *         BORDER(KBOND)=ONE
            ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.15.AND.LBOND(10,IFFAT).EQ.2)THEN
            ICARBN=0
            DO I=1,2
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)
               IF(NINT(ZANF(JFFAT)).EQ.6.AND.BORDER(KBOND).GT.0.1D-10)
     *         ICARBN=ICARBN+1
            ENDDO
            IF(ICARBN.EQ.1)THEN
               DO I=1,2
                  KBOND=LBOND(I,IFFAT)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.15.AND.LBOND(10,IFFAT).EQ.4)THEN
            BLEFT=FIVE
            NLFTP=4
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).GT.1.0D-10) NLFTP=NLFTP-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFTP.EQ.1) THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).LT.1.0D-10)
     *            BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.2)THEN
            BLEFT=FOUR
            NLFTC=2
            DO I=1,2
               IF(BORDER(LBOND(I,IFFAT)).GT.0.1D-10) NLFTC=NLFTC-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFTC.EQ.1)THEN
               DO I=1,2
                  IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10) 
     *            BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.3)THEN
            BLEFT=FOUR
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).EQ.ONE)
     *         BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(BLEFT.EQ.TWO)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *               BORDER(LBOND(I,IFFAT))=TWO
               ENDDO
            END IF
            IF(BLEFT.EQ.FOUR)THEN
               LCN3=0
               LCN2=0
               DO I=1,LBOND(10,IFFAT)
                  KBOND=LBOND(I,IFFAT)
                  J    =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.3)
     *            LCN3=LCN3+1
                  IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.2)
     *            LCN2=LCN2+1
               ENDDO
               IF(LCN2.EQ.1.AND.LCN3.EQ.2)THEN
               DO I=1,LBOND(10,IFFAT)
                  KBOND=LBOND(I,IFFAT)
                  J    =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.3)
     *            BORDER(KBOND)=ONE
                  IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.2)THEN
                     DO II=1,LBOND(10,J)
                        JBOND=LBOND(II,J)
                        KFFAT=IPAIR(1,JBOND)+IPAIR(2,JBOND)-J
                        IF(KFFAT.NE.IFFAT.AND.BORDER(JBOND).LT.1.99D+00)
     *                  BORDER(KBOND)=TWO
                     ENDDO
                  END IF
               ENDDO
               END IF
            END IF
            BLEFT=FOUR
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).EQ.TWO)
     *         BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(BLEFT.EQ.TWO)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *               BORDER(LBOND(I,IFFAT))=ONE
               ENDDO
            END IF
         END IF
      ENDDO
C
      BCOUNT1=ZERO
      ICOUNT=ICOUNT+1
      DO IBOND=1,NBOND
         BCOUNT1=BCOUNT1+BORDER(IBOND)
      ENDDO
      IF(ABS(BCOUNT1-BCOUNT2).LT.0.1D-10) GOTO 931
      IF(ICOUNT.GT.300) GOTO 931
      BCOUNT2=BCOUNT1
      GOTO 933
 931  CONTINUE
C     - DETERMINE AROMATIC RINGS
      CALL VICLR(NRINTYP,1,NFFAT)
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         IARMTC=0
         DO M=1,MB
            J=LISTRIN(M,IRING)
            IF(NTYPE(J).EQ.78.OR.
     *         NTYPE(J).EQ.79.OR.
     *         NTYPE(J).EQ.81.OR.
     *         NTYPE(J).EQ.80.OR.
     *         NTYPE(J).EQ.82.OR.
     *         NTYPE(J).EQ.37.OR.
     *         NTYPE(J).EQ.38.OR.
     *         NTYPE(J).EQ.39.OR.
     *         NTYPE(J).EQ.44.OR.
     *         NTYPE(J).EQ.58.OR.
     *         NTYPE(J).EQ.59.OR.
     *         NTYPE(J).EQ.63.OR.
     *         NTYPE(J).EQ.64.OR.
     *         NTYPE(J).EQ.65.OR.
     *         NTYPE(J).EQ.66.OR.
     *         NTYPE(J).EQ.69.OR.
     *         NTYPE(J).EQ.76    ) IARMTC=IARMTC+1
         ENDDO
         IF(MB.EQ.IARMTC.AND.MB.GE.5) NRINTYP(IRING)=1
      ENDDO
C     -- TEST FOR AROMATIC RINGS
      ICASE = 0
      DO IRING=1,NRING
         IF(NRINTYP(IRING).EQ.1)THEN
            MB=LISTRIN(10,IRING)
            IDOUBL=0
            DO M=1,MB
               MBEFO=M-1
               IF(MBEFO.EQ.0) MBEFO=MB
               J=LISTRIN(M,IRING)
               MNEXT=M+1
               IF(M.EQ.MB) MNEXT=1
               JNEXT=LISTRIN(MNEXT,IRING)
               JBEFO=LISTRIN(MBEFO,IRING)
               IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.3)THEN
                  DO I=1,LBOND(10,J)
                     KBOND=LBOND(I,J)
                     ICN=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                     IF(ICN.NE.JNEXT.AND.ICN.NE.JBEFO.AND.
     *                  LBOND(10,ICN).EQ.3.AND.NUMRIN(10,ICN).EQ.0)THEN
                        INL3=0
                        INR3=0
                        DO JJ=1,3
                           JBOND=LBOND(JJ,ICN)
                           NNN=IPAIR(1,JBOND)+IPAIR(2,JBOND)-ICN
                           IF(NINT(ZANF(NNN)).EQ.7.AND.
     *                        LBOND(10,NNN).EQ.3 )THEN
                              INR3=INR3+1
                              IF(NUMRIN(10,NNN).EQ.0) INL3=INL3+1
                           END IF
                        ENDDO
                        IF(INR3.EQ.3.AND.INL3.GE.1) ICASE=1
                     END IF
                  ENDDO
               END IF
               IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.3.AND.
     *            NUMRIN(10,J).EQ.2.AND.
     *            NRINTYP(NUMRIN(1,J)).EQ.1.AND.
     *            NRINTYP(NUMRIN(2,J)).EQ.1.AND.
     *            LISTRIN(10,NUMRIN(1,J)).EQ.6.AND.
     *            LISTRIN(10,NUMRIN(2,J)).EQ.6     )THEN
                  IF(NUMRIN(10,JNEXT).EQ.2) NTYPE(JNEXT)=0
                  IF(NUMRIN(10,JBEFO).EQ.2) NTYPE(JBEFO)=0
                  DO JJ=1,2
                     JRING=NUMRIN(JJ,J)
                     JMB=LISTRIN(10,JRING)
                     DO JM=1,JMB
                        JK=LISTRIN(JM,JRING)
                        IF(NUMRIN(10,JK).EQ.2)THEN
                           LARMTC=0
                           DO KK=1,2
                              IF(NRINTYP(NUMRIN(KK,J)).EQ.1) 
     *                        LARMTC=LARMTC+1
                           ENDDO
                           IF(LARMTC.NE.2) NTYPE(J)=0
                        END IF
                        IF(NUMRIN(10,J).NE.2) NTYPE(J)=0
                     ENDDO
                  ENDDO
               END IF
               DO I=1,LBOND(10,J)
                  IF(LBOND(I,J).NE.LISTRIB(M    ,IRING).AND.
     *               LBOND(I,J).NE.LISTRIB(MBEFO,IRING).AND.
     *               ABS(BORDER(LBOND(I,J))-TWO).LT.0.1D-10)THEN
                     LARMTC=0
                     DO KK=1,NUMRIN(10,J)
                        IF(NRINTYP(NUMRIN(KK,J)).EQ.1) LARMTC=LARMTC+1
                     ENDDO
                     IF(LARMTC.NE.2) IDOUBL=IDOUBL+1
                     IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.3)THEN
                        DO JJ=1,3
                           KBOND=LBOND(JJ,J)
                           K=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                           IF(K.NE.JBEFO.AND.K.NE.JNEXT.AND.
     *                        IDOUBL.GT.0)THEN
                              IDOUBL=IDOUBL-1
                           END IF
                        ENDDO
                     END IF
                  END IF
               ENDDO
            ENDDO
            IF(IDOUBL.GT.0.OR.ICASE.EQ.1)THEN
               DO M=1,MB
                  J=LISTRIN(M,IRING)
                  IF(NUMRIN(10,J).EQ.2)THEN
                     LARMTC=0
                     DO KK=1,2
                        IF(NRINTYP(NUMRIN(KK,J)).EQ.1) LARMTC=LARMTC+1
                     ENDDO
                     IF(LARMTC.NE.2) NTYPE(J)=0
                  END IF
                  IF(NUMRIN(10,J).NE.2) NTYPE(J)=0
                  BORDER(LISTRIB(M,IRING))=ZERO
               ENDDO
            END IF
         END IF
      ENDDO
C     - DETERMINE AROMATIC RINGS
      CALL VICLR(NRINTYP ,1,   NFFAT)
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         IARMTC=0
         DO M=1,MB
            J=LISTRIN(M,IRING)
            IF(NTYPE(J).EQ.78.OR.
     *         NTYPE(J).EQ.79.OR.
     *         NTYPE(J).EQ.81.OR.
     *         NTYPE(J).EQ.80.OR.
     *         NTYPE(J).EQ.82.OR.
     *         NTYPE(J).EQ.37.OR.
     *         NTYPE(J).EQ.38.OR.
     *         NTYPE(J).EQ.39.OR.
     *         NTYPE(J).EQ.44.OR.
     *         NTYPE(J).EQ.58.OR.
     *         NTYPE(J).EQ.59.OR.
     *         NTYPE(J).EQ.63.OR.
     *         NTYPE(J).EQ.64.OR.
     *         NTYPE(J).EQ.65.OR.
     *         NTYPE(J).EQ.66.OR.
     *         NTYPE(J).EQ.69.OR.
     *         NTYPE(J).EQ.76    ) IARMTC=IARMTC+1
         ENDDO
         IF(MB.EQ.IARMTC.AND.MB.GE.5) THEN
            NRINTYP(IRING)=1
            BTHERE=ZERO
            DO M=1,MB
               MBEFO=M-1
               IF(MBEFO.EQ.0) MBEFO=MB
               J=LISTRIN(M,IRING)
               DO I=1,LBOND(10,J)
                  IF(LBOND(I,J).NE.LISTRIB(M,IRING).AND.
     *               LBOND(I,J).NE.LISTRIB(MBEFO,IRING) )THEN
                     IF(BORDER(LBOND(I,J)).LT.0.1D-10)
     *                  BORDER(LBOND(I,J))=ONE
                  END IF
               ENDDO
               BTHERE=BTHERE+BORDER(LISTRIB(M,IRING))
            ENDDO
            IF(ABS(BTHERE).LT.0.1D-10.AND.MB.EQ.6)THEN
               DO M=1,MB
                  BORDER(LISTRIB(M,IRING))=ONEPT5
               ENDDO
            END IF
         END IF
      ENDDO
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         IF(NRINTYP(IRING).EQ.1.AND.MB.EQ.5)THEN
C           - BETA  POSITION C OR N
            DO M=1,MB
               MBEFO=M-1
               IF(MBEFO.EQ.0) MBEFO=MB
               MBEFO2=MBEFO-1
               IF(MBEFO2.EQ.0) MBEFO2=MB
               MNEXT=M+1
               IF(M.EQ.MB) MNEXT=1
               MNEXT2=MNEXT+1
               IF(MNEXT.EQ.MB) MNEXT2=1
               J     =LISTRIN(M     ,IRING)
               LARMRIN=0
               DO KK=1,NUMRIN(10,J)
                  IF(NRINTYP(NUMRIN(KK,J)).EQ.1.AND.
     *               LISTRIN(10,NUMRIN(KK,J)).EQ.5)
     *                LARMRIN=LARMRIN+1
               ENDDO
               IF(LARMRIN.NE.2)THEN
               JBEFO =LISTRIN(MBEFO ,IRING)
               JBEFO2=LISTRIN(MBEFO2,IRING)
               JNEXT =LISTRIN(MNEXT ,IRING)
               JNEXT2=LISTRIN(MNEXT2,IRING)
               IF((NTYPE(J).EQ.78.OR.NTYPE(J).EQ.63).AND.
     *            (NINT(ZANF(JBEFO2)).EQ.16.OR.
     *             NINT(ZANF(JBEFO2)).EQ.8 .OR.
     *             NTYPE(JBEFO2).EQ.39  ))
     *             NTYPE(J)=64
               IF((NTYPE(J).EQ.78.OR.NTYPE(J).EQ.63).AND.
     *            (NINT(ZANF(JNEXT2)).EQ.16.OR.
     *             NINT(ZANF(JNEXT2)).EQ.8 .OR.
     *             NTYPE(JNEXT2).EQ.39  ))
     *             NTYPE(J)=64
               IF((NTYPE(J).EQ.79.OR.NTYPE(J).EQ.65).AND.
     *            (NINT(ZANF(JBEFO2)).EQ.16.OR.
     *             NINT(ZANF(JBEFO2)).EQ.8 .OR.
     *             NTYPE(JBEFO2).EQ.39  ))
     *             NTYPE(J)=66
               IF((NTYPE(J).EQ.79.OR.NTYPE(J).EQ.65).AND.
     *            (NINT(ZANF(JNEXT2)).EQ.16.OR.
     *             NINT(ZANF(JNEXT2)).EQ.8 .OR.
     *             NTYPE(JNEXT2).EQ.39  ))
     *             NTYPE(J)=66
               END IF
            ENDDO
C           - ALPHA POSITION C OR N
            DO M=1,MB
               MBEFO=M-1
               IF(MBEFO.EQ.0) MBEFO=MB
               MNEXT=M+1
               IF(M.EQ.MB) MNEXT=1
               J     =LISTRIN(M     ,IRING)
               JBEFO =LISTRIN(MBEFO ,IRING)
               JNEXT =LISTRIN(MNEXT ,IRING)
               IF(NTYPE(J).EQ.78.AND.NTYPE(JBEFO).EQ.81.AND.
     *            NTYPE(JNEXT).EQ.81) NTYPE(J)=80
               LARMRIN=0
               DO KK=1,NUMRIN(10,J)
                  IF(NRINTYP(NUMRIN(KK,J)).EQ.1.AND.
     *               LISTRIN(10,NUMRIN(KK,J)).EQ.5)
     *                LARMRIN=LARMRIN+1
               ENDDO
               IF(LARMRIN.NE.2)THEN
               IF((NTYPE(J).EQ.78.OR.NTYPE(J).EQ.64).AND.
     *            (NINT(ZANF(JBEFO)).EQ.16.OR.
     *             NINT(ZANF(JBEFO)).EQ.8 .OR.
     *             NTYPE(JBEFO).EQ.39    ) )
     *             NTYPE(J)=63
               IF((NTYPE(J).EQ.78.OR.NTYPE(J).EQ.64).AND.
     *            (NINT(ZANF(JNEXT)).EQ.16.OR.
     *             NINT(ZANF(JNEXT)).EQ.8 .OR.
     *             NTYPE(JNEXT).EQ.39    ) )
     *             NTYPE(J)=63
               IF((NTYPE(J).EQ.79.OR.NTYPE(J).EQ.66).AND.
     *            (NINT(ZANF(JBEFO)).EQ.16.OR.
     *             NINT(ZANF(JBEFO)).EQ.8 .OR.
     *             NTYPE(JBEFO).EQ.39    ) )
     *             NTYPE(J)=65
               IF((NTYPE(J).EQ.79.OR.NTYPE(J).EQ.66).AND.
     *            (NINT(ZANF(JNEXT)).EQ.16.OR.
     *             NINT(ZANF(JNEXT)).EQ.8 .OR.
     *             NTYPE(JNEXT).EQ.39     ) )
     *             NTYPE(J)=65
               END IF
            ENDDO
         END IF
      ENDDO
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         DO M=1,MB
            MBEFO=M-1
            IF(MBEFO.EQ.0) MBEFO=MB
            MBEFO2=MBEFO-1
            IF(MBEFO2.EQ.0) MBEFO2=MB
            J     =LISTRIN(M     ,IRING)
            JBEFO =LISTRIN(MBEFO ,IRING)
            JBEFO2=LISTRIN(MBEFO2,IRING)
            IF(NTYPE(J     ).EQ.81.AND.NTYPE(JBEFO).EQ.80.AND.
     *         NTYPE(JBEFO2).EQ.81)THEN
               BORDER(LISTRIB(MBEFO ,IRING))=ONEPT5
               BORDER(LISTRIB(MBEFO2,IRING))=ONEPT5
            END IF
         ENDDO
      ENDDO
C     - FORCE 1.0 ORDER FOR C-C IN POLYCYCLIC AROMATIC RINGS 
      IF(NRING.GT.1) THEN
         DO IFFAT=1,NFFAT
            IF(NINT(ZANF(IFFAT)).EQ.6.AND.
     *         NUMRIN(10,IFFAT).GT.1      )THEN
               TORDER=ZERO
               DO I=1,LBOND(10,IFFAT)
                  TORDER=TORDER+BORDER(LBOND(I,IFFAT))
               ENDDO
               IF(ABS(TORDER-4.5D+00).LT.0.01D+00) THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ.6.AND.
     *                  NUMRIN(10,JFFAT).GT.1)THEN
                        BORDER(KBOND) = ONE
                     END IF
                  ENDDO
               END IF
               IF(ABS(TORDER-5.0D+00).LT.0.01D+00) THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ.6.AND.
     *                  NUMRIN(10,JFFAT).GT.1)THEN
                        BORDER(KBOND) = ONE
                     END IF
                  ENDDO
               END IF
            END IF
         ENDDO
      END IF
      DO IBOND=1,NBOND
         I1=IPAIR(1,IBOND)
         I2=IPAIR(2,IBOND)
         IF(NINT(ZANF(I1)).EQ.8.AND.LBOND(10,I1).EQ.1.AND.
     *      NINT(ZANF(I2)).EQ.7.AND.LBOND(10,I2).EQ.2.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10)THEN
            BTHERE =ZERO
            LCARBON=0
            DO II=1,LBOND(10,I2)
               BTHERE=BTHERE+BORDER(LBOND(II,I2))
               IF(LBOND(II,I2).NE.IBOND)THEN
                  KBOND=LBOND(II,I2)
                  J1=IPAIR(1,KBOND)
                  J2=IPAIR(2,KBOND)
                  IF(NINT(ZANF(J1)).EQ.6.OR.
     *               NINT(ZANF(J2)).EQ.6    ) LCARBON=1
               END IF
            ENDDO
            IF(ABS(BTHERE-FOUR).LT.0.1D-10.AND.LCARBON.EQ.1)THEN
               BORDER(IBOND)=ONE
               QMMFF(I1)=-ONE
            END IF
         END IF
         IF(NINT(ZANF(I2)).EQ.8.AND.LBOND(10,I2).EQ.1.AND.
     *      NINT(ZANF(I1)).EQ.7.AND.LBOND(10,I1).EQ.2.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10)THEN
            BTHERE =ZERO
            LCARBON=0
            DO II=1,LBOND(10,I1)
               BTHERE=BTHERE+BORDER(LBOND(II,I1))
               IF(LBOND(II,I1).NE.IBOND)THEN
                  KBOND=LBOND(II,I1)
                  J1=IPAIR(1,KBOND)
                  J2=IPAIR(2,KBOND)
                  IF(NINT(ZANF(J1)).EQ.6.OR.
     *               NINT(ZANF(J1)).EQ.6    ) LCARBON=1
               END IF
            ENDDO
            IF(ABS(BTHERE-FOUR).LT.0.1D-10.AND.LCARBON.EQ.1)THEN
               BORDER(IBOND)=ONE
               QMMFF(I2)=-ONE
            END IF
         END IF
      ENDDO
      DO IFFAT=1,NFFAT
         IF((NINT(ZANF(IFFAT)).EQ.8.OR.
     *      NINT(ZANF(IFFAT)).EQ.16).AND.
     *      LBOND(10,IFFAT).EQ.1.AND.
     *      QMMFF(IFFAT).EQ.-ONE.AND.
     *      BORDER(LBOND(1,IFFAT)).EQ.ZERO)THEN
            BORDER(LBOND(1,IFFAT))=ONE
         ELSE IF((NINT(ZANF(IFFAT)).EQ.8.OR.
     *      NINT(ZANF(IFFAT)).EQ.16).AND.
     *      LBOND(10,IFFAT).EQ.1.AND.
     *      QMMFF(IFFAT).EQ.ZERO.AND.
     *      BORDER(LBOND(1,IFFAT)).EQ.ZERO)THEN
            BORDER(LBOND(1,IFFAT))=TWO
         END IF
      ENDDO
C
C     -- DETERMINE MORE BOND ORDER --
C
      BCOUNT2=ZERO
      ICOUNT=0
 900  CONTINUE
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         DO M=1,MB
            IFFAT=LISTRIN(M,IRING)
            MBEFO=M-1
            IF(MBEFO.EQ.0) MBEFO=MB
            IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.2.AND.
     *         QMMFF(IFFAT).EQ.ZERO)THEN
               BLEFT=THREE
               IF(BORDER(LISTRIB(M    ,IRING)).EQ.ZERO.AND.
     *            BORDER(LISTRIB(MBEFO,IRING)).NE.ZERO    )
     *         BORDER(LISTRIB(M    ,IRING))=
     *         BLEFT-BORDER(LISTRIB(MBEFO,IRING))
               IF(BORDER(LISTRIB(M    ,IRING)).NE.ZERO.AND.
     *            BORDER(LISTRIB(MBEFO,IRING)).EQ.ZERO    )
     *         BORDER(LISTRIB(MBEFO,IRING))=
     *         BLEFT-BORDER(LISTRIB(M,IRING))
            END IF
         ENDDO
      ENDDO
      DO IANGL=1,NANGL
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL)
         NBNDN=0
         NBNDO=0
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K1)).EQ.8.AND.NINT(ZANF(K3)).EQ.7.AND.
     *      LBOND(10,K1).EQ.2  .AND.LBOND(10,K3).EQ.3      )THEN
            BCTHERE=ZERO
            NBNDN=0
            NBNDO=0
            DO II=1,3
               KBOND=LBOND(II,K2)
               JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(NINT(ZANF(JJ)).EQ.7.AND.LBOND(10,JJ).EQ.3.AND.
     *            BORDER(KBOND).LT.0.1D-10)THEN
                  NBNDN=KBOND
               END IF
               IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.2.AND.
     *            BORDER(KBOND).LT.0.1D-10)THEN
                  DO KK=1,2
                     JBOND=LBOND(KK,JJ)
                     MM=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JJ
                     IF(NINT(ZANF(MM)).EQ.1) NBNDO=KBOND
                  ENDDO
               END IF
               BCTHERE=BCTHERE+BORDER(KBOND)
            ENDDO
            IF(ABS(BCTHERE-ONE).LT.0.1D-10.AND.NBNDN.NE.0.AND.
     *         NBNDO.NE.0)THEN
               BORDER(NBNDO)=TWO
               BORDER(NBNDN)=ONE
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K3)).EQ.8.AND.NINT(ZANF(K1)).EQ.7.AND.
     *      LBOND(10,K3).EQ.2  .AND.LBOND(10,K1).EQ.3      )THEN
            BCTHERE=ZERO
            NBNDN=0
            NBNDO=0
            DO II=1,3
               KBOND=LBOND(II,K2)
               JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(NINT(ZANF(JJ)).EQ.7.AND.LBOND(10,JJ).EQ.3.AND.
     *            BORDER(KBOND).LT.0.1D-10)THEN
                  NBNDN=KBOND
               END IF
               IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.2.AND.
     *            BORDER(KBOND).LT.0.1D-10)THEN
                  DO KK=1,2
                     JBOND=LBOND(KK,JJ)
                     MM=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JJ
                     IF(NINT(ZANF(MM)).EQ.1) NBNDO=KBOND
                  ENDDO
               END IF
               BCTHERE=BCTHERE+BORDER(KBOND)
            ENDDO
            IF(ABS(BCTHERE-ONE).LT.0.1D-10.AND.NBNDN.NE.0.AND.
     *         NBNDO.NE.0)THEN
               BORDER(NBNDO)=TWO
               BORDER(NBNDN)=ONE
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.7.AND.LBOND(10,K2).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.8.AND.NINT(ZANF(K3)).EQ.8      )THEN
            BTHERE=ZERO
            DO JJ=1,2
               KBOND=LBOND(JJ,K2)
               BTHERE=BTHERE+BORDER(KBOND)
            ENDDO
            IF(ABS(BTHERE-ONE).LT.0.1D-10)THEN
               DO JJ=1,2
                  KBOND=LBOND(JJ,K2)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=TWO
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.7.AND.LBOND(10,K2).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.16.AND.NINT(ZANF(K3)).EQ.16      )THEN
            BTHERE=ZERO
            DO JJ=1,2
               KBOND=LBOND(JJ,K2)
               BTHERE=BTHERE+BORDER(KBOND)
            ENDDO
            IF(ABS(BTHERE-ONE).LT.0.1D-10)THEN
               DO JJ=1,2
                  KBOND=LBOND(JJ,K2)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=TWO
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.2.AND.
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.3     )THEN
            BLFTC=FOUR
            ICASE1=0
            ICASE2=0
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10) ICASE1=1
               IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10) ICASE2=1
               BLFTC=BLFTC-BORDER(KBOND)
            ENDDO
            IF(BLFTC.EQ.THREE.AND.ICASE1.EQ.1.AND.ICASE2.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,K2)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                  IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=TWO
                  IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.   
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.3     )THEN
            BLFTC=FOUR
            ICASE1=0
            ICASE2=0
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10) ICASE1=1
               IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10) ICASE2=1
               BLFTC=BLFTC-BORDER(KBOND)
            ENDDO
            IF(BLFTC.EQ.THREE.AND.ICASE1.EQ.1.AND.ICASE2.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,K2)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                  IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=TWO
                  IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.8.AND.NINT(ZANF(K3)).EQ.6.AND.
     *      NINT(ZANF(K1)).EQ.6.AND.LBOND(10,K2).EQ.2)THEN
            DO I=1,LBOND(10,K2)
               IF(BORDER(LBOND(I,K2)).LT.0.1D-10) 
     *         BORDER(LBOND(I,K2))=ONE
            ENDDO
         END IF
         IF(NINT(ZANF(K2)).EQ.16.AND.NINT(ZANF(K3)).EQ.6.AND.
     *      NINT(ZANF(K1)).EQ.6.AND.LBOND(10,K2).EQ.2)THEN
            DO I=1,LBOND(10,K2)
               IF(BORDER(LBOND(I,K2)).LT.0.1D-10)
     *         BORDER(LBOND(I,K2))=ONE
            ENDDO
         END IF
      ENDDO
      DO IBOND=1,NBOND
         I1=IPAIR(1,IBOND)
         I2=IPAIR(2,IBOND)
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10.AND.LBOND(10,I1).EQ.2.AND.
     *      LBOND(10,I2).EQ.1   )THEN
            BLFT1=THREE
            BLFT2=TWO
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT2=BLFT2-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(ABS(BLFT1+ONE).LT.0.1D-10.AND.
     *         NLFT1.EQ.0.AND.NLFT2.EQ.0) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I2)).EQ. 7.AND.NINT(ZANF(I1)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10.AND.LBOND(10,I2).EQ.2.AND.
     *      LBOND(10,I1).EQ.1   )THEN
            BLFT2=THREE
            BLFT1=TWO
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(ABS(BLFT2+ONE).LT.0.1D-10.AND.
     *         NLFT1.EQ.0.AND.NLFT2.EQ.0) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 8.AND.
     *       LBOND(10,I1) .EQ. 3.AND.LBOND(10 ,I2) .EQ. 2    )THEN
            BLFT1=THREE
            BLFT2=TWO
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         ABS(BLFT1-BLFT2).LT.0.1D-10)
     *      BORDER(IBOND)=BLFT1
         END IF
         IF(NINT(ZANF(I1)).EQ. 8.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *       LBOND(10,I1) .EQ. 2.AND.LBOND(10 ,I2) .EQ. 3    )THEN
            BLFT1=TWO
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         ABS(BLFT1-BLFT2).LT.0.1D-10)
     *      BORDER(IBOND)=BLFT1
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *      BORDER(IBOND).LT.0.1D-10)THEN
            BLFT1=THREE
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         ABS(BLFT1-BLFT2).LT.0.1D-10)
     *      BORDER(IBOND)=BLFT1
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *      BORDER(IBOND).LT.0.1D-10.AND.
     *      LBOND(10,I1).EQ.LBOND(10,I2))THEN
            BLFT1=THREE
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         (BLEFT1.LT.0.1D-10.OR.BLEFT2.LT.0.1D-10).AND.
     *         (BLEFT1.GT.0.1D-10.OR.BLEFT2.GT.0.1D-10)     )THEN
                BTHERE=MAX(BLEFT1,BLEFT2)
                BORDER(IBOND)=BTHERE
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 6) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.BLEFT2.EQ.ONE) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF((BLEFT1.EQ.TWO.AND.BLEFT2.EQ.TWO)        .AND.
     *         (LBOND(10,I1).EQ.3.AND.LBOND(10,I2).EQ.3)     )THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO 
            END IF
            IF((BLEFT1.EQ.THREE.AND.BLEFT2.EQ.THREE)    .AND.
     *         (LBOND(10,I1).EQ.2.AND.LBOND(10,I2).EQ.2)     )THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 7) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.LBOND(10,I2).EQ.4)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT1.EQ.TWO.AND.LBOND(10,I1).EQ.3)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF(BLEFT1.EQ.THREE.AND.LBOND(10,I2).EQ.1)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF(NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ. 7) THEN
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT2.EQ.ONE.AND.LBOND(10,I1).EQ.4)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT2.EQ.TWO.AND.LBOND(10,I2).EQ.3)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF(BLEFT2.EQ.THREE.AND.LBOND(10,I1).EQ.1)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF((NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 8).OR.
     *      (NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ.16)    ) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.LBOND(10,I2).EQ.2) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT1.EQ.TWO.AND.LBOND(10,I2).EQ.1) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
         END IF
         IF((NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ. 8).OR.
     *      (NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ.16)    ) THEN
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT2.EQ.ONE.AND.LBOND(10,I1).EQ.2) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT2.EQ.TWO.AND.LBOND(10,I1).EQ.1) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ.8.AND. LBOND(10,I1).EQ.2.AND.
     *      NINT(ZANF(I2)).EQ.7.AND.(LBOND(10,I2).EQ.3.OR.
     *      LBOND(10,I2).EQ.2).AND.BORDER(IBOND).LT.0.1D-10 )THEN
            BINO=TWO
            BINN=THREE
            NIBO=2
            NIBN=LBOND(10,I2)
            DO IXN=1,LBOND(10,I2)
               IF(BORDER(LBOND(IXN,I2)).GT.0.1D-10) NIBN=NIBN-1
               BINN=BINN-BORDER(LBOND(IXN,I2))
            ENDDO
            DO IXO=1,2
               IF(BORDER(LBOND(IXO,I1)).GT.0.1D-10) NIBO=NIBO-1
               BINO=BINO-BORDER(LBOND(IXO,I1))
            ENDDO
            IF(NIBN.EQ.1.AND.NIBO.EQ.1.AND.ABS(BINO-BINN).LT.0.1D-10)
     *      BORDER(IBOND)=BINO
         END IF
         IF(NINT(ZANF(I2)).EQ.8.AND. LBOND(10,I2).EQ.2.AND.
     *      NINT(ZANF(I1)).EQ.7.AND.(LBOND(10,I1).EQ.3.OR.
     *      LBOND(10,I1).EQ.2).AND.BORDER(IBOND).LT.0.1D-10)THEN
            BINO=TWO
            BINN=THREE
            NIBO=2
            NIBN=LBOND(10,I1)
            DO IXN=1,LBOND(10,I1)
               IF(BORDER(LBOND(IXN,I1)).GT.0.1D-10) NIBN=NIBN-1
               BINN=BINN-BORDER(LBOND(IXN,I1))
            ENDDO
            DO IXO=1,2
               IF(BORDER(LBOND(IXO,I2)).GT.0.1D-10) NIBO=NIBO-1
               BINO=BINO-BORDER(LBOND(IXO,I2))
            ENDDO
            IF(NIBN.EQ.1.AND.NIBO.EQ.1.AND.ABS(BINO-BINN).LT.0.1D-10)
     *      BORDER(IBOND)=BINO
         END IF
         IF(NINT(ZANF(I2)).EQ.7.AND.NINT(ZANF(I1)).EQ.7.AND.
     *      LBOND(10,I1).EQ.LBOND(10,I2).AND.
     *      BORDER(IBOND).LT.0.1D-10                        )THEN
            BIN1=THREE
            BIN2=THREE
            NIN1=LBOND(10,I1)
            NIN2=LBOND(10,I2)
            DO IX1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IX1,I1)).GT.0.1D-10) NIN1=NIN1-1
               BIN1=BIN1-BORDER(LBOND(IX1,I1))
            ENDDO
            DO IX2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IX2,I2)).GT.0.1D-10) NIN2=NIN2-1
               BIN2=BIN2-BORDER(LBOND(IX2,I2))
            ENDDO
            IF(NIN2.EQ.1.AND.NIN1.EQ.1.AND.ABS(BIN1-BIN2).LT.0.1D-10)
     *      BORDER(IBOND)=BIN1
         END IF
      ENDDO
C
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.3)THEN
            NOXY = 0
            NTWO = 0
            DO I=1,LBOND(10,IFFAT)
               KBOND = LBOND(I,IFFAT)
               JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.QMMFF(JFFAT).EQ.ZERO.AND.
     *            LBOND(10,JFFAT).EQ.1)THEN
                  NOXY=NOXY+1
               END IF
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *            LBOND(10,JFFAT).EQ.2)NTWO=NTWO+1
            ENDDO
            IF(NOXY.EQ.1.AND.NTWO.EQ.0)THEN
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  JFFAT = IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *               QMMFF(JFFAT).EQ.ZERO.AND.
     *               LBOND(10,JFFAT).EQ.1)THEN
                     BORDER(KBOND) = TWO
                  END IF
               ENDDO
               BTHERE=5.0D+00
               LINKN3=3
               DO I=1,LBOND(10,IFFAT)
                  KBOND = LBOND(I,IFFAT)
                  BTHERE=BTHERE-BORDER(KBOND)
                  IF(BORDER(KBOND).GT.0.1D-10) LINKN3=LINKN3-1
               ENDDO
               IF(LINKN3.EQ.1)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND = LBOND(I,IFFAT)
                     IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=BTHERE
                  ENDDO
               END IF
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.16.AND.LBOND(10,IFFAT).EQ.4)THEN
            BTHERE=ZERO
            LSN=0
            LSO=0
            LSC=0
            NBN=0
            DO I=1,4
               KBOND=LBOND(I,IFFAT)
               JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JJ)).EQ.7.AND.
     *            ABS(BORDER(KBOND)-ONE).LT.0.1D-10   ) THEN
                  LSN=LSN+1
                  NBN=KBOND
               END IF
               IF(NINT(ZANF(JJ)).EQ.8.AND.
     *            ABS(BORDER(KBOND)-TWO).LT.0.1D-10   ) LSO=LSO+1 
               IF(NINT(ZANF(JJ)).EQ.6.AND.
     *            ABS(BORDER(KBOND)-ONE).LT.0.1D-10   ) LSC=LSC+1
               BTHERE=BTHERE+BORDER(KBOND)
            ENDDO
            IF(ABS(BTHERE-FIVE).LT.0.1D-10.AND.LSC.EQ.2.AND.
     *         LSO.EQ.1.AND.LSN.EQ.1   )THEN
               BORDER(NBN)=TWO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.15.AND.LBOND(10,IFFAT).EQ.2)THEN
            ICARBN=0
            DO I=1,2
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)
               IF(NINT(ZANF(JFFAT)).EQ.6.AND.BORDER(KBOND).GT.0.1D-10)
     *         ICARBN=ICARBN+1
            ENDDO
            IF(ICARBN.EQ.1)THEN
               DO I=1,2
                  KBOND=LBOND(I,IFFAT)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.15.AND.LBOND(10,IFFAT).EQ.4)THEN
            BLEFT=FIVE
            NLFTP=4
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).GT.1.0D-10) NLFTP=NLFTP-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFTP.EQ.1) THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).LT.1.0D-10)
     *            BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.2)THEN
            BLEFT=FOUR
            NLFTC=2
            DO I=1,2
               IF(BORDER(LBOND(I,IFFAT)).GT.0.1D-10) NLFTC=NLFTC-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFTC.EQ.1)THEN
               DO I=1,2
                  IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10) 
     *            BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.3)THEN
            BLEFT=FOUR
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).EQ.ONE)
     *         BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(BLEFT.EQ.TWO)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *               BORDER(LBOND(I,IFFAT))=TWO
               ENDDO
            END IF
            BLEFT=FOUR
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).EQ.TWO)
     *         BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(BLEFT.EQ.TWO)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *               BORDER(LBOND(I,IFFAT))=ONE
               ENDDO
            END IF
            IF(BLEFT.EQ.THREE)THEN
               NOXY=0
               NBOXY=0
               NOTWO=0
               DO I=1,3
                  KBOND=LBOND(I,IFFAT)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8) NOXY=NOXY+1 
                  IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *               BORDER(KBOND).LT.0.1D-10   )THEN
                     NBOXY=KBOND
                  END IF
                  IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *               QMMFF(JFFAT).EQ.ZERO.AND.
     *               LBOND(10,JFFAT).EQ.2.AND.
     *               BORDER(KBOND).LT.0.1D-10   ) THEN
                     DO J=1,2
                        JBOND=LBOND(J,JFFAT)
                        KFFAT=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JFFAT
                        IF(NINT(ZANF(KFFAT)).EQ.1) NOTWO=NOTWO+1
                     ENDDO
                  END IF
               ENDDO
               IF(NOTWO.EQ.2)THEN
                  JCASE=0
                  DO I=1,3
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                  LBOND(10,JFFAT).EQ.2.AND.JCASE.EQ.0.AND.
     *                  BORDER(KBOND).LT.0.1D-10   )THEN
                        BORDER(KBOND)=TWO
                        JCASE=2
                     END IF
                  ENDDO
               END IF
               IF(NOXY.EQ.1)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).NE.8)THEN
                        ICN=LBOND(10,JFFAT)
                        IBCN=0
                        DO J=1,ICN
                           JBOND=LBOND(J,JFFAT)
                           KFFAT=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JFFAT
                           IF(BORDER(JBOND).GT.0.1D-10) ICN=ICN-1
                           IF(KFFAT.EQ.IFFAT.AND.
     *                        BORDER(JBOND).LT.0.1D-10) IBCN=JBOND
                        ENDDO
                        IF(ICN.EQ.1.AND.IBCN.NE.0)THEN
                           BORDER(NBOXY)=TWO
                           BORDER(IBCN) =ONE
                        END IF
                     END IF
                  ENDDO
               END IF
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.3.AND.
     *      NUMRIN(10,IFFAT).EQ.0)THEN
            LOXY=0
            LOXY1=0
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8) LOXY=LOXY+1
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)THEN
                  LOXY1=LOXY1+1
                  KBOND2=KBOND
               END IF
            ENDDO
            IF(LOXY1.EQ.1.AND.LOXY.EQ.1)THEN
               BORDER(KBOND2)=ONE
            END IF
         END IF
      ENDDO
C
      BCOUNT1=ZERO
      ICOUNT=ICOUNT+1
      DO IBOND=1,NBOND
         BCOUNT1=BCOUNT1+BORDER(IBOND)
      ENDDO
      IF(ABS(BCOUNT1-BCOUNT2).LT.0.1D-10) GOTO 901
      IF(ICOUNT.GT.300) GOTO 901
      BCOUNT2=BCOUNT1
      GOTO 900
 901  CONTINUE
      DO IBOND=1,NBOND
         I1=IPAIR(1,IBOND)
         I2=IPAIR(2,IBOND)
         IF(NINT(ZANF(I1)).EQ.8.AND.LBOND(10,I1).EQ.1.AND.
     *      NINT(ZANF(I2)).EQ.7.AND.LBOND(10,I2).EQ.2.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10)THEN
            BTHERE =ZERO
            LCARBON=0
            DO II=1,LBOND(10,I2)
               BTHERE=BTHERE+BORDER(LBOND(II,I2))
               IF(LBOND(II,I2).NE.IBOND)THEN
                  KBOND=LBOND(II,I2)
                  J1=IPAIR(1,KBOND)
                  J2=IPAIR(2,KBOND)
                  IF(NINT(ZANF(J1)).EQ.6.OR.
     *               NINT(ZANF(J2)).EQ.6    ) LCARBON=1
               END IF
            ENDDO
            IF(ABS(BTHERE-FOUR).LT.0.1D-10.AND.LCARBON.EQ.1)THEN
               BORDER(IBOND)=ONE
               QMMFF(I1)=-ONE
            END IF
         END IF
         IF(NINT(ZANF(I2)).EQ.8.AND.LBOND(10,I2).EQ.1.AND.
     *      NINT(ZANF(I1)).EQ.7.AND.LBOND(10,I1).EQ.2.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10)THEN
            BTHERE =ZERO
            LCARBON=0
            DO II=1,LBOND(10,I1)
               BTHERE=BTHERE+BORDER(LBOND(II,I1))
               IF(LBOND(II,I1).NE.IBOND)THEN
                  KBOND=LBOND(II,I1)
                  J1=IPAIR(1,KBOND)
                  J2=IPAIR(2,KBOND)
                  IF(NINT(ZANF(J1)).EQ.6.OR.
     *               NINT(ZANF(J1)).EQ.6    ) LCARBON=1
               END IF
            ENDDO
            IF(ABS(BTHERE-FOUR).LT.0.1D-10.AND.LCARBON.EQ.1)THEN
               BORDER(IBOND)=ONE
               QMMFF(I2)=-ONE
            END IF
         END IF
      ENDDO
      BCOUNT2=ZERO
      ICOUNT=0
 970  CONTINUE
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.
     *   NUMRIN(10,IFFAT).EQ.0)THEN
            BTHERE=FOUR
            NCARBON=LBOND(10,IFFAT)
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).GT.0.1D-10)
     *         NCARBON=NCARBON-1
               BTHERE=BTHERE-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NCARBON.EQ.1)THEN
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10)
     *         BORDER(LBOND(I,IFFAT))=BTHERE
            ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.
     *   LBOND(10,IFFAT).EQ.3.AND.
     *   NUMRIN(10,IFFAT).EQ.0)THEN
            BTHERE=THREE
            NCARBON=LBOND(10,IFFAT)
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).GT.0.1D-10)
     *         NCARBON=NCARBON-1
               BTHERE=BTHERE-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NCARBON.EQ.1)THEN
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10)
     *         BORDER(LBOND(I,IFFAT))=BTHERE
            ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.3.AND.
     *      NUMRIN(10,IFFAT).EQ.0)THEN
            LOXY=0
            LOXY1=0
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8) LOXY=LOXY+1
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1.AND.
     *            QMMFF(JFFAT).EQ.ZERO)THEN
                  LOXY1=LOXY1+1
                  KBOND2=KBOND
               END IF
            ENDDO
            IF(LOXY1.EQ.1.AND.LOXY.EQ.1)THEN
               BORDER(KBOND2)=TWO
            END IF
         END IF
      ENDDO
      BCOUNT1=ZERO
      ICOUNT=ICOUNT+1
      DO IBOND=1,NBOND
         BCOUNT1=BCOUNT1+BORDER(IBOND)
      ENDDO
      IF(ABS(BCOUNT1-BCOUNT2).LT.0.1D-10) GOTO 971
      IF(ICOUNT.GT.300) GOTO 971
      BCOUNT2=BCOUNT1
      GOTO 970
 971  CONTINUE
      DO IBOND=1,NBOND
         I1=IPAIR(1,IBOND)
         I2=IPAIR(2,IBOND)
         IF(NINT(ZANF(I1)).EQ.8.AND.LBOND(10,I1).EQ.1.AND.
     *      NINT(ZANF(I2)).EQ.7.AND.LBOND(10,I2).EQ.2.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10)THEN
            BTHERE =ZERO
            LCARBON=0
            DO II=1,LBOND(10,I2)
               BTHERE=BTHERE+BORDER(LBOND(II,I2))
               IF(LBOND(II,I2).NE.IBOND)THEN
                  KBOND=LBOND(II,I2)
                  J1=IPAIR(1,KBOND)
                  J2=IPAIR(2,KBOND)
                  IF(NINT(ZANF(J1)).EQ.6.OR.
     *               NINT(ZANF(J2)).EQ.6    ) LCARBON=1
               END IF
            ENDDO
            IF(ABS(BTHERE-FOUR).LT.0.1D-10.AND.LCARBON.EQ.1)THEN
               BORDER(IBOND)=ONE
               QMMFF(I1)=-ONE
            END IF
         END IF
         IF(NINT(ZANF(I2)).EQ.8.AND.LBOND(10,I2).EQ.1.AND.
     *      NINT(ZANF(I1)).EQ.7.AND.LBOND(10,I1).EQ.2.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10)THEN
            BTHERE =ZERO
            LCARBON=0
            DO II=1,LBOND(10,I1)
               BTHERE=BTHERE+BORDER(LBOND(II,I1))
               IF(LBOND(II,I1).NE.IBOND)THEN
                  KBOND=LBOND(II,I1)
                  J1=IPAIR(1,KBOND)
                  J2=IPAIR(2,KBOND)
                  IF(NINT(ZANF(J1)).EQ.6.OR.
     *               NINT(ZANF(J1)).EQ.6    ) LCARBON=1
               END IF
            ENDDO
            IF(ABS(BTHERE-FOUR).LT.0.1D-10.AND.LCARBON.EQ.1)THEN
               BORDER(IBOND)=ONE
               QMMFF(I2)=-ONE
            END IF
         END IF
      ENDDO
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.NTYPE(IFFAT).EQ.0.AND.
     *      LBOND(10,IFFAT).EQ.3)THEN
            BTHERE=FOUR
            INTRO =0
            JBOND =0
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.7.AND.LBOND(10,JFFAT).EQ.3) THEN
                  INTRO=INTRO+1
               ELSE
                  JBOND=KBOND
                  IF(NINT(ZANF(JFFAT)).EQ.6.AND.LBOND(10,JFFAT).LE.3)
     *            JBOND=0
               END IF
               BTHERE=BTHERE-BORDER(KBOND)
            ENDDO
            IF(ABS(BTHERE).LT.0.1D-10.AND.INTRO.EQ.3)THEN
               DO I=1,3
                  KBOND=LBOND(I,IFFAT)
                  BORDER(KBOND)=ONEPT5
               ENDDO
            END IF
            IF(ABS(BTHERE).LT.0.1D-10.AND.INTRO.EQ.2.AND.
     *         JBOND.NE.0)THEN
               IF(ABS(BORDER(JBOND)-ONE).LT.0.1D-10)THEN
               DO I=1,3
                  KBOND=LBOND(I,IFFAT)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.7.AND.LBOND(10,JFFAT).EQ.3)
     *            BORDER(KBOND)=ONEPT5
               ENDDO
               END IF
            END IF
         END IF
      ENDDO
      DO IANGL=1,NANGL
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL) 
         IF(NINT(ZANF(K2)).EQ.7.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.2.AND.
     *      NINT(ZANF(K3)).EQ.8.AND.LBOND(10,K3).EQ.1.AND.
     *      QMMFF(K1).EQ.ZERO.AND.QMMFF(K2).EQ.ZERO.AND.
     *      QMMFF(K3).EQ.ZERO)THEN
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K3.OR.JFFAT.EQ.K1)THEN
                  IF(BORDER(KBOND).EQ.ZERO)BORDER(KBOND)=TWO
               END IF
            ENDDO
         END IF
         IF(NINT(ZANF(K2)).EQ.7.AND.LBOND(10,K2).EQ.3.AND. 
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.2.AND. 
     *      NINT(ZANF(K1)).EQ.8.AND.LBOND(10,K1).EQ.1.AND.
     *      QMMFF(K1).EQ.ZERO.AND.QMMFF(K2).EQ.ZERO.AND.
     *      QMMFF(K3).EQ.ZERO)THEN
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K3.OR.JFFAT.EQ.K1)THEN
                  IF(BORDER(KBOND).EQ.ZERO)BORDER(KBOND)=TWO
               END IF
            ENDDO
         END IF
      ENDDO
C
C     -- DETERMINE N CHARGE --
C
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.QMMFF(IFFAT).EQ.ZERO.AND.
     *      NTYPE(IFFAT).EQ.0) THEN
            QTEMP = -THREE
            DO I=1,LBOND(10,IFFAT)
               KBOND=LBOND(I,IFFAT)
               QTEMP = QTEMP + BORDER(KBOND)
            ENDDO
            IF(QTEMP.EQ. ONE) THEN
               LOXY=0
               IF(LBOND(10,IFFAT).EQ.3)THEN
                  DO I=1,3
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)
     *               LOXY=LOXY+1
                  ENDDO
               END IF
               IF(LOXY.EQ.0)
     *         QMMFF(IFFAT) =  ONE
            END IF
            IF(QTEMP.EQ.-ONE) QMMFF(IFFAT) = -ONE
            IF(QTEMP.EQ.THIRD) QMMFF(IFFAT) = THIRD
            IF(LBOND(10,IFFAT).EQ.3.AND.QMMFF(IFFAT).EQ.-ONE)
     *         QMMFF(IFFAT)=ZERO
         END IF
      ENDDO
C
C
C

C
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.NTYPE(IFFAT).EQ.0.AND.
     *      LBOND(10,IFFAT).EQ.3)THEN
            LOXY=0
            LNTG=0
            JBOND=0
            KFFAT=0
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.7.AND.
     *            LBOND(10,JFFAT).EQ.2.AND.
     *            QMMFF(JFFAT).EQ.-ONE ) THEN
                  LNTG=LNTG+1
                  JBOND=KBOND
                  KFFAT=JFFAT
               END IF
               IF((NINT(ZANF(JFFAT)).EQ.8.OR.
     *             NINT(ZANF(JFFAT)).EQ.16).AND.
     *             LBOND(10,JFFAT).EQ.1.AND.
     *             QMMFF(JFFAT).EQ.-ONE ) LOXY=LOXY+1
            ENDDO
            IF(LOXY.EQ.1.AND.LNTG.EQ.1.AND.JBOND.NE.0.AND.
     *         KFFAT.NE.0)THEN
               BORDER(JBOND)=TWO
               QMMFF(KFFAT)=ZERO
            END IF
         END IF
      ENDDO
C
C
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.8)THEN
            IF(LBOND(10,IFFAT).EQ.2)THEN
                  KBOND1=LBOND(1,IFFAT)
                  KBOND2=LBOND(2,IFFAT)
                  I1 = IPAIR(1,KBOND1)+IPAIR(2,KBOND1)-IFFAT
                  I2 = IPAIR(2,KBOND2)+IPAIR(1,KBOND2)-IFFAT
                  IF(NINT(ZANF(I1)).EQ.1.AND.NINT(ZANF(I2)).EQ.1) THEN
                     NTYPE(IFFAT)=70
                     NTYPE(I1)   =31
                     NTYPE(I2)   =31
                  END IF
            END IF
            IF(LBOND(10,IFFAT).EQ.3)THEN
               NTYPE(IFFAT)=49
               QMMFF(IFFAT)=1.0D+00
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.9)THEN
            IF(LBOND(10,IFFAT).EQ.0)THEN
               NTYPE(IFFAT)=89
               QMMFF(IFFAT)=-1.0D+00
            ELSE
               NTYPE(IFFAT)=11
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.14) THEN
            IF(LBOND(10,IFFAT).EQ.4)THEN
               NTYPE(IFFAT)=19
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.17)THEN
            IF(LBOND(10,IFFAT).EQ.4)THEN
               NTYPE(IFFAT)=77
            ELSE IF(LBOND(10,IFFAT).EQ.0)THEN
               NTYPE(IFFAT)=90
               QMMFF(IFFAT)=-1.0D+00
            ELSE
               NTYPE(IFFAT)=12
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.35)THEN
            IF(LBOND(10,IFFAT).EQ.0)THEN
               NTYPE(IFFAT)=91
               QMMFF(IFFAT)=-1.0D+00
            ELSE
               NTYPE(IFFAT)=13
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.53)THEN
            NTYPE(IFFAT)=14
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.3)THEN
            NTYPE(IFFAT)=92
            QMMFF(IFFAT)=1.0D+00
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.11)THEN
            NTYPE(IFFAT)=93
            QMMFF(IFFAT)=1.0D+00
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.12)THEN
            NTYPE(IFFAT)=99
            QMMFF(IFFAT)=2.0D+00
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.19)THEN
            NTYPE(IFFAT)=94
            QMMFF(IFFAT)=1.0D+00
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.20)THEN
            NTYPE(IFFAT)=96
            QMMFF(IFFAT)=2.0D+00
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.26)THEN
            IF     (QMMFF(IFFAT).EQ.2.0D+00)THEN
               NTYPE(IFFAT)=87
            ELSE IF(QMMFF(IFFAT).EQ.3.0D+00)THEN
               NTYPE(IFFAT)=88
            ELSE
               IF(MASWRK) WRITE(IW,'(/1X,A,A,I8/)')
     *         'ERROR: PLEASE USE MMFF94Q= TO',
     *         ' DEFINE +2.0 OR +3.0 CHARGE FOR ATOM ',IFFAT
               CALL ABRT
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.29)THEN
            IF     (QMMFF(IFFAT).EQ.2.0D+00)THEN
               NTYPE(IFFAT)=98
            ELSE IF(QMMFF(IFFAT).EQ.1.0D+00)THEN
               NTYPE(IFFAT)=97
            ELSE
               IF(MASWRK) WRITE(IW,'(/1X,A,A,I8/)')
     *         'ERROR: PLEASE USE MMFF94Q= TO',
     *         ' DEFINE +1.0 OR +2.0 CHARGE FOR ATOM ',IFFAT
               CALL ABRT
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.30)THEN
            NTYPE(IFFAT)=95
            QMMFF(IFFAT)=2.0D+00
         END IF
      ENDDO
C
C
C     -- C --
      DO 100 IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.NTYPE(IFFAT).EQ.ZERO)THEN
C           - C ATOM ATTACHED TO 4 ATOMS
            IF(LBOND(10,IFFAT).EQ.4)THEN
C              -ALIPHATIC CARBON IN 3-MEMBERED RING
               IF(LISTRIN(10,NUMRIN(1,IFFAT)).EQ.3)THEN
                  NTYPE(IFFAT)=22
                  GOTO 100
               END IF
C              -ALIPHATIC CARBON IN 4-MEMBERED RING
               IF(LISTRIN(10,NUMRIN(1,IFFAT)).EQ.4)THEN
                  NTYPE(IFFAT)=20
                  GOTO 100
               END IF
C              -ALKYL CARBON
               IF(NTYPE(IFFAT).EQ.0)THEN
                  NTYPE(IFFAT)=1
                  GOTO 100
               END IF
            END IF
C           - C ATOM ATTACHED TO 3 ATOMS
            IF(LBOND(10,IFFAT).EQ.3)THEN
C              -CARBON IN CARBOXYLATE AND IN THIOCARBOXYLATE AND ETC.
               LCTOH=0
               LCTOC=0
               LCTSC=0
               LCTSO=0
               LCTS3=0
               LCTP =0
               LCTN =0
               LCTN3=0
               LCTN2=0
               DO I=1,LBOND(10,IFFAT)
                  KBOND=LBOND(I,IFFAT)
                  J=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(J)).EQ. 8.AND.
     *                 LBOND(10,J).EQ.2) LCTOH=LCTOH+1
                  IF(NINT(ZANF(J)).EQ. 8.AND.
     *                 LBOND(10,J).EQ.1.AND.
     *                 QMMFF(J).GT.-ONE) LCTOC=LCTOC+1
                  IF(NINT(ZANF(J)).EQ.16.AND.
     *                 LBOND(10,J).EQ.1.AND.
     *                 QMMFF(J).GT.-ONE) LCTSC=LCTSC+1
                  IF(NINT(ZANF(J)).EQ.16.AND.
     *                 LBOND(10,J).EQ.2) LCTSO=LCTSO+1
                  IF(NINT(ZANF(J)).EQ.7) LCTN =LCTN +1
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *                 LBOND(10,J).EQ.3) LCTN3=LCTN3+1
                  IF(NINT(ZANF(J)).EQ. 7.AND.
     *                 LBOND(10,J).EQ.2) LCTN2=LCTN2+1
                  IF(NINT(ZANF(J)).EQ.16.AND.
     *                 LBOND(10,J).EQ.3) THEN
                     LOXY=0
                     DO K=1,3
                        KBOND=LBOND(K,J)
                        NXX  =IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                        IF(NINT(ZANF(NXX)).EQ.8) LOXY=LOXY+1
                     ENDDO
                     IF(LOXY.EQ.2)  LCTS3=LCTS3+1
                  END IF
                  IF(NINT(ZANF(J)).EQ.15)LCTP =LCTP +1
               ENDDO
               IF(LCTN2.EQ.1.AND.LCTN3.EQ.2)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     J=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(J)).EQ.7.AND.LBOND(10,J).EQ.2.AND.
     *                  ABS(BORDER(KBOND)-ONE).LT.0.1D-10)THEN
                        NTYPE(IFFAT)=57
                        GOTO 100
                     END IF
                  ENDDO
               END IF
               IF(LCTN3.EQ.2.AND.NTYPE(IFFAT).NE.57)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     J=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(J)).EQ.1.OR.NTYPE(J).EQ.37.OR.
     *                  NTYPE(J).EQ.1.OR.
     *                 ((NINT(ZANF(J)).NE.7.OR.LBOND(10,J).NE.3).AND.
     *                  ABS(BORDER(KBOND)-ONE).LT.0.1D-10      ))THEN
                        NTYPE(IFFAT)=57
                        GOTO 100
                     END IF
                  ENDDO
               END IF
               IF(LCTOC.EQ.2.OR.
     *           (LCTOC.EQ.1.AND.LCTSC.EQ.1).OR.
     *            LCTSC.EQ.2)THEN
                  NTYPE(IFFAT)=41
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     J=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(J)).EQ.8.AND.LBOND(10,J).EQ.1.AND.
     *                  QMMFF(J).EQ.ONE) NTYPE(IFFAT)=0
                  ENDDO
               END IF
               IF(LCTOC.EQ.1.OR.LCTSC.EQ.1.OR.LCTS3.EQ.1)THEN
                  NTYPE(IFFAT)=3
                  GOTO 100
               END IF
C              -CARBON ATTACHED TO P
               IF(NTYPE(IFFAT).EQ.0)THEN
                  IF(LCTP.GT.0)THEN
                     NTYPE(IFFAT)=3
                     GOTO 100
                  END IF
               END IF
            END IF
         END IF
 100  CONTINUE
C
C     -- C -- AGAIN
      DO 150 IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.NTYPE(IFFAT).NE.41.AND.
     *      LBOND(10,IFFAT).EQ.3)THEN
C           - C=C IN 4-RING
            IF(NTYPE(IFFAT).EQ.0)THEN
               DO I=1,NUMRIN(10,IFFAT)
                  IF(LISTRIN(10,NUMRIN(I,IFFAT)).EQ.4) THEN
                     NCARBON=0
                     DO II=1,3
                        KBOND=LBOND(II,IFFAT)
                        JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                        IF(NTYPE(JFFAT).NE.3.AND.
     *                     NINT(ZANF(JFFAT)).EQ.6.AND.
     *                     LBOND(10,JFFAT)  .EQ.3     )THEN
                           IARMTC=0
                           DO J=1,NUMRIN(10,JFFAT)
                              IF(NRINTYP(NUMRIN(J,JFFAT)).EQ.1)
     *                        IARMTC=IARMTC+1
                           ENDDO
                           IF(IARMTC.LT.1)THEN
                              NTYPE(IFFAT)=30
                              GOTO 150
                           END IF
                        END IF
                        IF(NINT(ZANF(JFFAT)).EQ.6)THEN
                           IARMTC=0
                           DO J=1,NUMRIN(10,JFFAT)
                              IF(NRINTYP(NUMRIN(J,JFFAT)).EQ.1)
     *                        IARMTC=IARMTC+1
                           ENDDO
                           IF(IARMTC.LT.1) NCARBON=NCARBON+1
                        END IF
                     ENDDO
                     IF(NCARBON.EQ.3)THEN
                        NTYPE(IFFAT)=30
                        GOTO 150
                     END IF
                  END IF
               ENDDO
            END IF
C           - CARBON ATTACHED TO NITROGEN
            IF(NTYPE(IFFAT).EQ.0)THEN
               LCOUNT2=0
               LCOUNT3=0
               LCOUNT4=0
               DO I=1,LBOND(10,IFFAT)
                  KBOND=LBOND(I,IFFAT)
                  IXX  =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(IXX)).EQ.7)THEN
                     LCOUNT2=LCOUNT2+1
                     IF(LBOND(10,IXX).EQ.2.AND.
     *                  BORDER(KBOND).NE.1) LCOUNT3=LCOUNT3+1
                     IF(LBOND(10,IXX).EQ.3) LCOUNT4=LCOUNT4+1
                  END IF
               ENDDO
               IF(LCOUNT2.GE.LCOUNT3.AND.LCOUNT3     .GE.1) 
     *                                                NTYPE(IFFAT)=3
               IF(LCOUNT2.EQ.1.AND.LCOUNT4.EQ.1.AND.
     *            BORDER(KBOND).EQ.TWO) THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     IXX  =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(IXX)).EQ.7.AND.
     *                  LBOND(10,IXX)  .EQ.3.AND.
     *                  BORDER(KBOND)  .EQ.TWO   )  NTYPE(IFFAT)=3
                  ENDDO
               END IF
               IF(LCOUNT4.EQ.3) NTYPE(IFFAT)=57
            END IF
C           - SP2 CARBON
            IF(NTYPE(IFFAT).EQ.0)THEN
               NTYPE(IFFAT)=2
               GOTO 150
            END IF
         END IF
C
C        -CARBON ATTACHED TO 2 ATOMS
         IF(LBOND(10,IFFAT).EQ.2.AND.NINT(ZANF(IFFAT)).EQ.6)THEN
            NTYPE(IFFAT)=4
            GOTO 150
         END IF
C        - CARBON ATTACHED TO 1 ATOM
         IF(LBOND(10,IFFAT).EQ.1.AND.NINT(ZANF(IFFAT)).EQ.6)THEN
            NTYPE(IFFAT)=60
            GOTO 150
         END IF
 150  CONTINUE
C
C
C     -- N --
      DO 200 IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.7)THEN
C           - ATTACHED TO 4 ATOMS
            IF(LBOND(10,IFFAT).EQ.4)THEN
               DO II=1,LBOND(10,IFFAT)
                  KBOND=LBOND(II,IFFAT)
                  IXX =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(IXX)).EQ.8)THEN
                     NTYPE(IFFAT)=68
                     QMMFF(IFFAT)=ZERO
                     GOTO 200
                  END IF
               ENDDO
               NTYPE(IFFAT)=34
               QMMFF(IFFAT)=1.0D+00
               GOTO 200
            END IF
C           - ATTACHED TO 1 ATOM
            IF(LBOND(10,IFFAT).EQ.1)THEN
               ICASE=0
               DO IANGL=1,NANGL
                  K1=KLIST(1,IANGL)
                  K2=KLIST(2,IANGL)
                  K3=KLIST(3,IANGL)
                  IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.7.AND.
     *               LBOND(10,K2).EQ.2.AND.(NINT(ZANF(K3)).EQ.7.OR.
     *               NINT(ZANF(K3)).EQ.6).AND.NTYPE(K3).NE.37) ICASE=1
                  IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.7.AND.
     *               LBOND(10,K2).EQ.2.AND.(NINT(ZANF(K1)).EQ.7.OR.
     *               NINT(ZANF(K1)).EQ.6).AND.NTYPE(K1).NE.37) ICASE=1
               ENDDO
               IF(ICASE.EQ.1)THEN
                  NTYPE(IFFAT)=47
               END IF
               IF(ICASE.EQ.0)THEN
                  NTYPE(IFFAT)=42
                  GOTO 200
               END IF
            END IF
         END IF
 200  CONTINUE
C
C     -- N -- AGAIN
      DO 230 IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.(LBOND(10,IFFAT).EQ.2.
     *      OR.LBOND(10,IFFAT).EQ.3).AND.NTYPE(IFFAT).EQ.0)THEN
C           - NITROGEN ATTACHED TO TWO ATOMS  
            IF(LBOND(10,IFFAT).EQ.2.AND.NTYPE(IFFAT).EQ.0)THEN
               IF(QMMFF(IFFAT).EQ.-ONE.AND.
     *            BORDER(LBOND(1,IFFAT)).NE.TWO.AND.
     *            BORDER(LBOND(2,IFFAT)).NE.TWO)THEN
                  NTYPE(IFFAT)=62
                  GOTO 230
               END IF
               LSO=0
               DO IANGL=1,NANGL
                  K1=KLIST(1,IANGL)
                  K2=KLIST(2,IANGL)
                  K3=KLIST(3,IANGL)
                  IF(NINT(ZANF(K2)).EQ.16)THEN
                     IF(K1.EQ.IFFAT.AND.NINT(ZANF(K3)).EQ.8.AND.
     *                  LBOND(10,K3).EQ.1) LSO=LSO+1
                     IF(K3.EQ.IFFAT.AND.NINT(ZANF(K1)).EQ.8.AND.
     *                  LBOND(10,K1).EQ.1) LSO=LSO+1
                  END IF
               ENDDO
               IF(LSO.EQ.1) THEN
                  NTYPE(IFFAT)=48
                  GOTO 230
               END IF
C              - N IN AMINIE AND IMINE NITROGEN, ISONITRILE NITROGEN
               LCOUNT2=1
               LCOUNT3=1
               LSUFER =0
               DO I=1,LBOND(10,IFFAT)
                  KBOND=LBOND(I,IFFAT)
                  IXX  =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(IXX)).EQ.6.OR.
     *               NINT(ZANF(IXX)).EQ.7)THEN
                     NTYPE(IFFAT)=9
                     QMMFF(IFFAT)=ZERO
                     IF(NTYPE(IXX).EQ.60)THEN
                        NTYPE(IFFAT)=61
                        GOTO 230
                     END IF
                     IF(NTYPE(IXX).EQ.42)THEN
                        NTYPE(IFFAT)=61
                        QMMFF(IFFAT)=ONE
                        GOTO 230
                     END IF
                  END IF
                  IF(NINT(ZANF(IXX)).EQ.16)THEN
                     LSUFER=LSUFER+1
                  END IF
                  IF(NINT(ZANF(IXX)).EQ.8.AND.LBOND(10,IXX).EQ.1.AND.
     *               BORDER(KBOND).EQ.TWO)THEN
                     NTYPE(IFFAT)=46
                     GOTO 230
                  END IF
               ENDDO
               IF(LSUFER.EQ.2)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     IXX  =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(IXX)).EQ.16)THEN
                     LOXY=0
                     DO JJ=1,LBOND(10,IXX)
                        JBOND=LBOND(JJ,IXX)
                        JXX=IPAIR(1,JBOND)+IPAIR(2,JBOND)-IXX
                        IF(NINT(ZANF(JXX)).EQ.8.AND.LBOND(10,JXX).EQ.1)
     *                  LOXY=LOXY+1
                     ENDDO
                     IF(LOXY.GE.2) THEN
                        NTYPE(IFFAT)=43
                        GOTO 230
                     END IF
                     END IF
                  ENDDO
               END IF
C              '=N=' IN C=N=N OR -N=N=N
               IF(NTYPE(IFFAT).EQ.9)THEN
                  DO IANGL=1,NANGL
                     K1=KLIST(1,IANGL)
                     K2=KLIST(2,IANGL)
                     K3=KLIST(3,IANGL)
                     IF(K2.EQ.IFFAT)THEN
                        IF(NTYPE(K1).EQ.47.OR.NTYPE(K3).EQ.47)THEN
                           NTYPE(IFFAT)=53
                           QMMFF(IFFAT)=ZERO
                           GOTO 230
                        END IF
                     END IF
                  ENDDO
               END IF
            END IF
C
            IF(LBOND(10,IFFAT).EQ.3)THEN
               LOXY=0
               DO III=1,LBOND(10,IFFAT)
                  KBOND=LBOND(III,IFFAT)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *               LBOND(10, JFFAT).EQ.1) LOXY=LOXY+1
               ENDDO
               IF(LOXY.GE.2) THEN
                  NTYPE(IFFAT)=45
                  QMMFF(IFFAT)=ZERO
                  GOTO 230
               END IF
            END IF
         END IF
 230  CONTINUE
C
C     -- N -- AGAIN
      DO 260 IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.2)THEN
            IFF53=0
            NB53 =0
            DO III=1,LBOND(10,IFFAT)
               KBOND=LBOND(III,IFFAT)
               IXX =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NTYPE(IXX).EQ.53)THEN
                  IFF53=1
                  NB53 =KBOND
               END IF
            ENDDO
            IF(IFF53.EQ.1)THEN
               DO III=1,LBOND(10,IFFAT)
                  KBOND=LBOND(III,IFFAT)
                  IF(BORDER(KBOND).LT.0.1D-10.AND.KBOND.NE.NB53)
     *            BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.NTYPE(IFFAT).EQ.0
     *      .AND.LBOND(10,IFFAT).EQ.3)THEN
            IF(QMMFF(IFFAT).EQ.ONE)THEN
               DO III=1,LBOND(10,IFFAT)
                  KBOND=LBOND(III,IFFAT)
                  IXX =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(IXX)).EQ.7.OR.NINT(ZANF(IXX)).EQ.6)THEN
                     NTYPE(IFFAT)=54
                     GOTO 260
                  END IF
               ENDDO
            END IF
            IF(NTYPE(IFFAT).EQ.0)THEN
               LCOUNT2=0
               DO III=1,LBOND(10,IFFAT)
                  KBOND=LBOND(III,IFFAT)
                  IXX =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(IXX)).EQ.8.AND.LBOND(10,IXX).EQ.1.AND.
     *               ABS(BORDER(KBOND)-ONE).GT.0.1D-10)
     *               LCOUNT2=LCOUNT2+1
               ENDDO
               IF(LCOUNT2.GT.0)THEN
                  NTYPE(IFFAT)=67
                  GOTO 260
               END IF
            END IF
            LCOUNT2=0
            LCOUNT3=0
            LCOUNT4=0
            LCOUNT5=0
            LCOUNT6=0
            LCOUNT7=0
            LCOUNT8=0
            LCOUNT9=0
            DO IANGL=1,NANGL
               K1=KLIST(1,IANGL)
               K2=KLIST(2,IANGL)
               K3=KLIST(3,IANGL)
               IF((K1.EQ.IFFAT.OR.K3.EQ.IFFAT).AND.NTYPE(K2).EQ.80.AND.
     *            NINT(ZANF(K1)).EQ.7.AND.NINT(ZANF(K3)).EQ.7)THEN
                  DO I=1,3
                     KBOND=LBOND(I,K2)
                     JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                     IF(NINT(ZANF(JJ)).EQ.7.AND.LBOND(10,JJ).EQ.3)THEN
                        IF(NTYPE(JJ).EQ.0) NTYPE(JJ)=56
                        QMMFF(JJ)=THIRD
                     END IF
                  ENDDO
                  GOTO 260
               END IF
               IF((K1.EQ.IFFAT.OR.K3.EQ.IFFAT).AND.NTYPE(K2).EQ.63.AND.
     *            NINT(ZANF(K1)).EQ.7.AND.NINT(ZANF(K3)).EQ.7.AND.
     *            LBOND(10,K1).EQ.3.AND.LBOND(10,K3).EQ.3)THEN
                  ICASE=0
                  JCASE=0
                  DO I=1,3
                     KBOND=LBOND(I,K2)
                     JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                     IF(NINT(ZANF(JJ)).NE.7.OR.LBOND(10,JJ).NE.3.AND.
     *               ABS(BORDER(KBOND)-ONE).LT.0.1D-10) ICASE=1 
                     IF(NTYPE(JJ).EQ.81) JCASE=1
                  ENDDO
                  IF(ICASE.EQ.1.AND.JCASE.EQ.1)THEN
                  DO I=1,3
                     KBOND=LBOND(I,K2)
                     JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                     IF(NINT(ZANF(JJ)).EQ.7.AND.LBOND(10,JJ).EQ.3)THEN
                        IF(NTYPE(JJ).EQ.0) NTYPE(JJ)=55
                        QMMFF(JJ)=PT5
                        NTYPE(K2)=80
                     END IF
                  ENDDO
                  GOTO 260
                  END IF
               END IF
               IF((K1.EQ.IFFAT.OR.K3.EQ.IFFAT).AND.NTYPE(K2).EQ.57.AND.
     *            NINT(ZANF(K1)).EQ.7.AND.NINT(ZANF(K3)).EQ.7)THEN
                  LCOUNT2=LCOUNT2+1
               END IF
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.16.AND.
     *            NINT(ZANF(K3)).EQ.8)THEN
                  LOXY=0
                  DO I=1,LBOND(10,K2)
                     KBOND=LBOND(I,K2)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                     IF(NINT(ZANF(JFFAT)).EQ.8) LOXY=LOXY+1
                  ENDDO
                  IF(LOXY.GE.2) LCOUNT3=LCOUNT3+1
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.16.AND.
     *            NINT(ZANF(K1)).EQ.8)THEN
                  LOXY=0
                  DO I=1,LBOND(10,K2)
                     KBOND=LBOND(I,K2)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                     IF(NINT(ZANF(JFFAT)).EQ.8) LOXY=LOXY+1
                  ENDDO
                  IF(LOXY.GE.2) LCOUNT3=LCOUNT3+1
               END IF
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *            LBOND(10,K2).EQ.2.AND.NINT(ZANF(K3)).EQ.7.AND.
     *            LBOND(10,K3).EQ.1)THEN
                  LCOUNT4=LCOUNT4+1
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *            LBOND(10,K2).EQ.2.AND.NINT(ZANF(K1)).EQ.7.AND.
     *            LBOND(10,K1).EQ.1)THEN
                  LCOUNT4=LCOUNT4+1
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *            LBOND(10,K2).LT.4.AND.(NINT(ZANF(K1)).EQ.7.OR.
     *            NINT(ZANF(K1)).EQ.15.OR.NINT(ZANF(K1)).EQ.6).AND.
     *            LBOND(10,K1).LT.4)THEN
                  IF((NINT(ZANF(K1)).EQ.7.OR.NINT(ZANF(K1)).EQ.15).AND.
     *                LBOND(10,K1).LT.3.AND.QMMFF(K1).NE.ONE.AND.
     *                QMMFF(K1).NE.-ONE)THEN
                      LCOUNT5=LCOUNT5+1
                  END IF
                  IF(NINT(ZANF(K1)).EQ.6)THEN
                      LCOUNT5=LCOUNT5+1
                  END IF
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *            LBOND(10,K2).LT.4.AND.NINT(ZANF(K1)).EQ.6.AND.
     *            LBOND(10,K1).LT.4)THEN
                  DO JJ=1,LBOND(10,K2)
                     KBOND=LBOND(JJ,K2)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                     IF(JFFAT.EQ.K1.AND.
     *                  ABS(BORDER(KBOND)-TWO).LT.0.1D-10)
     *                  LCOUNT8=LCOUNT8+1
                  ENDDO
               END IF
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *            LBOND(10,K2).LT.4.AND.NINT(ZANF(K3)).EQ.6.AND.
     *            LBOND(10,K3).LT.4)THEN
                  DO JJ=1,LBOND(10,K2)
                     KBOND=LBOND(JJ,K2)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                     IF(JFFAT.EQ.K3.AND.
     *                  ABS(BORDER(KBOND)-TWO).LT.0.1D-10)
     *                  LCOUNT8=LCOUNT8+1
                  ENDDO
               END IF
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *            LBOND(10,K2).LT.4.AND.(NINT(ZANF(K3)).EQ.7.OR.
     *            NINT(ZANF(K3)).EQ.6.OR.NINT(ZANF(K3)).EQ.15).AND.
     *            LBOND(10,K3).LT.4)THEN
                  IF((NINT(ZANF(K3)).EQ.7.OR.NINT(ZANF(K3)).EQ.15).AND.
     *                LBOND(10,K3).LT.3.AND.QMMFF(K3).NE.ONE.AND.
     *                QMMFF(K3).NE.-ONE)THEN
                      LCOUNT5=LCOUNT5+1
                  END IF
                  IF(NINT(ZANF(K3)).EQ.6)THEN
                      LCOUNT5=LCOUNT5+1
                  END IF
               END IF
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *            LBOND(10,K2).LT.4.AND.NINT(ZANF(K3)).EQ.8.AND.
     *            LBOND(10,K3).EQ.1)THEN
                  LCOUNT6=LCOUNT6+1
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *            LBOND(10,K2).LT.4.AND.NINT(ZANF(K1)).EQ.8.AND.
     *            LBOND(10,K1).EQ.1)THEN
                  LCOUNT6=LCOUNT6+1
               END IF
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *            LBOND(10,K2).LT.4.AND.NINT(ZANF(K3)).EQ.16.AND.
     *            LBOND(10,K3).EQ.1)THEN
                  LCOUNT9=LCOUNT9+1
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *            LBOND(10,K2).LT.4.AND.NINT(ZANF(K1)).EQ.16.AND.
     *            LBOND(10,K1).EQ.1)THEN
                  LCOUNT9=LCOUNT9+1
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.7.AND.
     *            LBOND(10,K2).EQ.2.AND.NINT(ZANF(K1)).EQ.7)THEN
                  LCOUNT7=LCOUNT7+1
               END IF
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.7.AND.
     *            LBOND(10,K2).EQ.2.AND.NINT(ZANF(K3)).EQ.7)THEN
                  LCOUNT7=LCOUNT7+1
               END IF
            ENDDO
            IF(LCOUNT2.EQ.1)THEN
               NTYPE(IFFAT)=55
               QMMFF(IFFAT)=0.5D+00 
               GOTO 260
            END IF
            IF(LCOUNT2.GE.2)THEN
               NTYPE(IFFAT)=56
               QMMFF(IFFAT)=THIRD
               GOTO 260
            END IF
            IF(LCOUNT3.GT.0.OR.LCOUNT4.GT.0)THEN
               NTYPE(IFFAT)=43
               GOTO 260
            END IF
            IF(LCOUNT6.GT.0)THEN
               NTYPE(IFFAT)=10
               GOTO 260
            END IF
            IF(LCOUNT8.GT.0)THEN
               NTYPE(IFFAT)=40
               GOTO 260
            END IF
            IF(LCOUNT9.GT.0)THEN
               NTYPE(IFFAT)=10
               GOTO 260
            END IF
            IF(LCOUNT5.GT.0)THEN
               NTYPE(IFFAT)=40
               GOTO 260
            END IF
            IF(LCOUNT7.GT.0)THEN
               NTYPE(IFFAT)=10
               GOTO 260
            END IF
            IF(NTYPE(IFFAT).EQ.0)THEN
               NTYPE(IFFAT)=8
               QMMFF(IFFAT)=ZERO
               GOTO 260
            END IF
         END IF
 260  CONTINUE
      DO IANGL=1,NANGL
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL)
         IF(NTYPE(K1).EQ.40.AND.NTYPE(K2).EQ.63.AND.
     *      NTYPE(K3).EQ.81.AND.ABS(QMMFF(K3)-ONE).LT.0.1D-10)THEN
            NTYPE(K1)=55
            QMMFF(K1)=PT5
            QMMFF(K3)=PT5
            NTYPE(K2)=80
         END IF
         IF(NTYPE(K3).EQ.40.AND.NTYPE(K2).EQ.63.AND.
     *      NTYPE(K1).EQ.81.AND.ABS(QMMFF(K1)-ONE).LT.0.1D-10)THEN
            NTYPE(K3)=55
            QMMFF(K1)=PT5
            QMMFF(K3)=PT5
            NTYPE(K2)=80
         END IF
      ENDDO
      DO IFFAT=1,NFFAT
         IF(NTYPE(IFFAT).EQ.56.OR.NTYPE(IFFAT).EQ.55)THEN
            DO II=1,3
               KBOND=LBOND(II,IFFAT)
               JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NTYPE(JJ).EQ.57) THEN
                  BORDER(KBOND)=ONEPT5
               ELSE
                  BORDER(KBOND)=ONE
               END IF
            ENDDO
         END IF
      ENDDO
C
C     -- DETERMINE MORE BOND ORDER --
C
      BCOUNT2=ZERO
      ICOUNT=0
 980  CONTINUE
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         DO M=1,MB
            IFFAT=LISTRIN(M,IRING)
            MBEFO=M-1
            IF(MBEFO.EQ.0) MBEFO=MB
            IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.2.AND.
     *         QMMFF(IFFAT).EQ.ZERO)THEN
               BLEFT=THREE
               IF(BORDER(LISTRIB(M    ,IRING)).EQ.ZERO.AND.
     *            BORDER(LISTRIB(MBEFO,IRING)).NE.ZERO    )
     *         BORDER(LISTRIB(M    ,IRING))=
     *         BLEFT-BORDER(LISTRIB(MBEFO,IRING))
               IF(BORDER(LISTRIB(M    ,IRING)).NE.ZERO.AND.
     *            BORDER(LISTRIB(MBEFO,IRING)).EQ.ZERO    )    
     *         BORDER(LISTRIB(MBEFO,IRING))=
     *         BLEFT-BORDER(LISTRIB(M,IRING))
            END IF
         ENDDO
      ENDDO
      DO IANGL=1,NANGL
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL)
         NBNDN=0
         NBNDO=0
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K1)).EQ.8.AND.NINT(ZANF(K3)).EQ.7.AND.
     *      LBOND(10,K1).EQ.1  .AND.LBOND(10,K3).EQ.2.AND.
     *      ABS(QMMFF(K3)).LT.0.1D-10  )THEN
            NBNDN=0
            NBNDO=0
            BTHERE=FOUR
            DO II=1,3
               KBOND=LBOND(II,K2)
               JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(NINT(ZANF(JJ)).EQ.7.AND.LBOND(10,JJ).EQ.2.AND.
     *            BORDER(KBOND).EQ.ONE)THEN
                  IF((BORDER(LBOND(1,JJ))+BORDER(LBOND(2,JJ))).LT.THREE)
     *            NBNDN=KBOND
               END IF
               IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.1.AND.
     *            BORDER(KBOND).EQ.TWO)THEN
                  DO KK=1,2
                     JBOND=LBOND(KK,JJ)
                     MM=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JJ
                     IF(NINT(ZANF(MM)).EQ.1) NBNDO=KBOND
                  ENDDO
               END IF
               BCTHERE=BCTHERE-BORDER(KBOND)
            ENDDO
            IF(ABS(BCTHERE).LT.0.1D-10.AND.NBNDN.NE.0.AND.
     *         NBNDO.NE.0)THEN
               BORDER(NBNDO)=ONE
               BORDER(NBNDN)=TWO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K3)).EQ.8.AND.NINT(ZANF(K1)).EQ.7.AND.
     *      LBOND(10,K3).EQ.1  .AND.LBOND(10,K1).EQ.2.AND.
     *      ABS(QMMFF(K1)).LT.0.1D-10  )THEN
            NBNDN=0
            NBNDO=0
            BTHERE=FOUR
            DO II=1,3
               KBOND=LBOND(II,K2)
               JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(NINT(ZANF(JJ)).EQ.7.AND.LBOND(10,JJ).EQ.2.AND.
     *            BORDER(KBOND).EQ.ONE)THEN
                  IF((BORDER(LBOND(1,JJ))+BORDER(LBOND(2,JJ))).LT.THREE)
     *            NBNDN=KBOND
               END IF
               IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.1.AND.
     *            BORDER(KBOND).EQ.TWO)THEN
                  DO KK=1,2
                     JBOND=LBOND(KK,JJ)
                     MM=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JJ
                     IF(NINT(ZANF(MM)).EQ.1) NBNDO=KBOND
                  ENDDO
               END IF
               BCTHERE=BCTHERE-BORDER(KBOND)
            ENDDO
            IF(ABS(BCTHERE).LT.0.1D-10.AND.NBNDN.NE.0.AND.
     *         NBNDO.NE.0)THEN
               BORDER(NBNDO)=ONE
               BORDER(NBNDN)=TWO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K1)).EQ.8.AND.NINT(ZANF(K3)).EQ.7.AND.
     *      LBOND(10,K1).EQ.2  .AND.LBOND(10,K3).EQ.3      )THEN
            BCTHERE=FOUR
            NBNDN=0
            NBNDO=0
            DO II=1,3
               KBOND=LBOND(II,K2)
               JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(NINT(ZANF(JJ)).EQ.7.AND.LBOND(10,JJ).EQ.3.AND.
     *            BORDER(KBOND).LT.0.1D-10)THEN
                  NBNDN=KBOND
               END IF
               IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.2.AND.
     *            BORDER(KBOND).LT.0.1D-10)THEN
                  DO KK=1,2
                     JBOND=LBOND(KK,JJ)
                     MM=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JJ
                     IF(NINT(ZANF(MM)).EQ.1) NBNDO=KBOND
                  ENDDO
               END IF
               BCTHERE=BCTHERE-BORDER(KBOND)
            ENDDO
            IF(ABS(BCTHERE).LT.0.1D-10.AND.NBNDN.NE.0.AND.
     *         NBNDO.NE.0)THEN
               BORDER(NBNDO)=TWO
               BORDER(NBNDN)=ONE
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K3)).EQ.8.AND.NINT(ZANF(K1)).EQ.7.AND.
     *      LBOND(10,K3).EQ.2  .AND.LBOND(10,K1).EQ.3      )THEN
            BCTHERE=FOUR
            NBNDN=0
            NBNDO=0
            DO II=1,3
               KBOND=LBOND(II,K2)
               JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(NINT(ZANF(JJ)).EQ.7.AND.LBOND(10,JJ).EQ.3.AND.
     *            BORDER(KBOND).LT.0.1D-10)THEN
                  NBNDN=KBOND
               END IF
               IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.2.AND.
     *            BORDER(KBOND).LT.0.1D-10)THEN
                  DO KK=1,2
                     JBOND=LBOND(KK,JJ)
                     MM=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JJ
                     IF(NINT(ZANF(MM)).EQ.1) NBNDO=KBOND
                  ENDDO
               END IF
               BCTHERE=BCTHERE-BORDER(KBOND)
            ENDDO
            IF(ABS(BCTHERE).LT.0.1D-10.AND.NBNDN.NE.0.AND.
     *         NBNDO.NE.0)THEN
               BORDER(NBNDO)=TWO
               BORDER(NBNDN)=ONE
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.7.AND.LBOND(10,K2).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.8.AND.NINT(ZANF(K3)).EQ.8      )THEN
            BTHERE=ZERO
            DO JJ=1,2
               KBOND=LBOND(JJ,K2)
               BTHERE=BTHERE+BORDER(KBOND)
            ENDDO
            IF(ABS(BTHERE-ONE).LT.0.1D-10)THEN
               DO JJ=1,2
                  KBOND=LBOND(JJ,K2)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=TWO
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.7.AND.LBOND(10,K2).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.16.AND.NINT(ZANF(K3)).EQ.16      )THEN
            BTHERE=ZERO
            DO JJ=1,2
               KBOND=LBOND(JJ,K2)
               BTHERE=BTHERE+BORDER(KBOND)
            ENDDO
            IF(ABS(BTHERE-ONE).LT.0.1D-10)THEN
               DO JJ=1,2
                  KBOND=LBOND(JJ,K2)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=TWO
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.2.AND.
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.3     )THEN
            BLFTC=FOUR
            ICASE1=0
            ICASE2=0
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10) ICASE1=1
               IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10) ICASE2=1
               BLFTC=BLFTC-BORDER(KBOND)
            ENDDO
            IF(BLFTC.EQ.THREE.AND.ICASE1.EQ.1.AND.ICASE2.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,K2)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                  IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=TWO
                  IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.3     )THEN
            BLFTC=FOUR
            ICASE1=0
            ICASE2=0
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10) ICASE1=1
               IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10) ICASE2=1
               BLFTC=BLFTC-BORDER(KBOND)
            ENDDO
            IF(BLFTC.EQ.THREE.AND.ICASE1.EQ.1.AND.ICASE2.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,K2)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                  IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=TWO
                  IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.8.AND.NINT(ZANF(K3)).EQ.6.AND.
     *      NINT(ZANF(K1)).EQ.6.AND.LBOND(10,K2).EQ.2)THEN
            DO I=1,LBOND(10,K2)
               IF(BORDER(LBOND(I,K2)).LT.0.1D-10)
     *         BORDER(LBOND(I,K2))=ONE
            ENDDO
         END IF
         IF(NINT(ZANF(K2)).EQ.16.AND.NINT(ZANF(K3)).EQ.6.AND.
     *      NINT(ZANF(K1)).EQ.6.AND.LBOND(10,K2).EQ.2)THEN
            DO I=1,LBOND(10,K2)
               IF(BORDER(LBOND(I,K2)).LT.0.1D-10)
     *         BORDER(LBOND(I,K2))=ONE
            ENDDO
         END IF
      ENDDO
      DO IBOND=1,NBOND
         I1=IPAIR(1,IBOND)
         I2=IPAIR(2,IBOND)
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)).LT.0.1D-10.AND.
     *      LBOND(10,I1).EQ.3.AND.LBOND(10,I2).EQ.2)THEN
            LHYDRG=0
            DO I=1,2
               KBOND=LBOND(I,I2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-I2
               IF(NINT(ZANF(JFFAT)).EQ.1) LHYDRG=1
            ENDDO
            IF(LHYDRG.EQ.1) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I2)).EQ. 7.AND.NINT(ZANF(I1)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)).LT.0.1D-10.AND.
     *      LBOND(10,I2).EQ.3.AND.LBOND(10,I1).EQ.2)THEN
            LHYDRG=0
            DO I=1,2
               KBOND=LBOND(I,I1)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-I1
               IF(NINT(ZANF(JFFAT)).EQ.1) LHYDRG=1
            ENDDO
            IF(LHYDRG.EQ.1) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10.AND.LBOND(10,I1).EQ.2.AND.
     *      LBOND(10,I2).EQ.1   )THEN
            BLFT1=THREE
            BLFT2=TWO
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(ABS(BLFT1+ONE).LT.0.1D-10.AND.
     *         NLFT1.EQ.0.AND.NLFT2.EQ.0) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I2)).EQ. 7.AND.NINT(ZANF(I1)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10.AND.LBOND(10,I2).EQ.2.AND.
     *      LBOND(10,I1).EQ.1   )THEN
            BLFT2=THREE
            BLFT1=TWO
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(ABS(BLFT2+ONE).LT.0.1D-10.AND.
     *         NLFT1.EQ.0.AND.NLFT2.EQ.0) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 8.AND.
     *       LBOND(10,I1) .EQ. 3.AND.LBOND(10 ,I2) .EQ. 2    )THEN
            BLFT1=THREE
            BLFT2=TWO
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         ABS(BLFT1-BLFT2).LT.0.1D-10)
     *      BORDER(IBOND)=BLFT1
         END IF
         IF(NINT(ZANF(I1)).EQ. 8.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *       LBOND(10,I1) .EQ. 2.AND.LBOND(10 ,I2) .EQ. 3    )THEN
            BLFT1=TWO
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         ABS(BLFT1-BLFT2).LT.0.1D-10)
     *      BORDER(IBOND)=BLFT1
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *      BORDER(IBOND).LT.0.1D-10)THEN
            BLFT1=THREE
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         ABS(BLFT1-BLFT2).LT.0.1D-10)
     *      BORDER(IBOND)=BLFT1
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *      BORDER(IBOND).LT.0.1D-10.AND.
     *      LBOND(10,I1).EQ.LBOND(10,I2))THEN
            BLFT1=THREE
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         (BLEFT1.LT.0.1D-10.OR.BLEFT2.LT.0.1D-10).AND.
     *         (BLEFT1.GT.0.1D-10.OR.BLEFT2.GT.0.1D-10)     )THEN
                BTHERE=MAX(BLEFT1,BLEFT2)
                BORDER(IBOND)=BTHERE
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 6) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.BLEFT2.EQ.ONE) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF((BLEFT1.EQ.TWO.AND.BLEFT2.EQ.TWO)        .AND.
     *         (LBOND(10,I1).EQ.3.AND.LBOND(10,I2).EQ.3)     )THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF((BLEFT1.EQ.THREE.AND.BLEFT2.EQ.THREE)    .AND.
     *         (LBOND(10,I1).EQ.2.AND.LBOND(10,I2).EQ.2)     )THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 7) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.LBOND(10,I2).EQ.4)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT1.EQ.TWO.AND.LBOND(10,I1).EQ.3)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF(BLEFT1.EQ.THREE.AND.LBOND(10,I2).EQ.1)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF(NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ. 7) THEN
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT2.EQ.ONE.AND.LBOND(10,I1).EQ.4)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT2.EQ.TWO.AND.LBOND(10,I2).EQ.3)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF(BLEFT2.EQ.THREE.AND.LBOND(10,I1).EQ.1)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF((NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 8).OR.
     *      (NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ.16)    ) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.LBOND(10,I2).EQ.2) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT1.EQ.TWO.AND.LBOND(10,I2).EQ.1) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
         END IF
         IF((NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ. 8).OR.
     *      (NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ.16)    ) THEN
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT2.EQ.ONE.AND.LBOND(10,I1).EQ.2) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT2.EQ.TWO.AND.LBOND(10,I1).EQ.1) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ.8.AND. LBOND(10,I1).EQ.2.AND.
     *      NINT(ZANF(I2)).EQ.7.AND.(LBOND(10,I2).EQ.3.OR.
     *      LBOND(10,I2).EQ.2).AND.BORDER(IBOND).LT.0.1D-10 )THEN
            BINO=TWO
            BINN=THREE
            NIBO=2
            NIBN=LBOND(10,I2)
            DO IXN=1,LBOND(10,I2)
               IF(BORDER(LBOND(IXN,I2)).GT.0.1D-10) NIBN=NIBN-1
               BINN=BINN-BORDER(LBOND(IXN,I2))
            ENDDO
            DO IXO=1,2
               IF(BORDER(LBOND(IXO,I1)).GT.0.1D-10) NIBO=NIBO-1
               BINO=BINO-BORDER(LBOND(IXO,I1))
            ENDDO
            IF(NIBN.EQ.1.AND.NIBO.EQ.1.AND.ABS(BINO-BINN).LT.0.1D-10)
     *      BORDER(IBOND)=BINO
         END IF
         IF(NINT(ZANF(I2)).EQ.8.AND. LBOND(10,I2).EQ.2.AND.
     *      NINT(ZANF(I1)).EQ.7.AND.(LBOND(10,I1).EQ.3.OR.
     *      LBOND(10,I1).EQ.2).AND.BORDER(IBOND).LT.0.1D-10)THEN
            BINO=TWO
            BINN=THREE
            NIBO=2
            NIBN=LBOND(10,I1)
            DO IXN=1,LBOND(10,I1)
               IF(BORDER(LBOND(IXN,I1)).GT.0.1D-10) NIBN=NIBN-1
               BINN=BINN-BORDER(LBOND(IXN,I1))
            ENDDO
            DO IXO=1,2
               IF(BORDER(LBOND(IXO,I2)).GT.0.1D-10) NIBO=NIBO-1
               BINO=BINO-BORDER(LBOND(IXO,I2))
            ENDDO
            IF(NIBN.EQ.1.AND.NIBO.EQ.1.AND.ABS(BINO-BINN).LT.0.1D-10)
     *      BORDER(IBOND)=BINO
         END IF
         IF(NINT(ZANF(I2)).EQ.7.AND.NINT(ZANF(I1)).EQ.7.AND.
     *      LBOND(10,I1).EQ.LBOND(10,I2).AND.
     *      BORDER(IBOND).LT.0.1D-10                        )THEN
            BIN1=THREE
            BIN2=THREE
            NIN1=LBOND(10,I1)
            NIN2=LBOND(10,I2)
            DO IX1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IX1,I1)).GT.0.1D-10) NIN1=NIN1-1
               BIN1=BIN1-BORDER(LBOND(IX1,I1))
            ENDDO
            DO IX2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IX2,I2)).GT.0.1D-10) NIN2=NIN2-1
               BIN2=BIN2-BORDER(LBOND(IX2,I2))
            ENDDO
            IF(NIN2.EQ.1.AND.NIN1.EQ.1.AND.ABS(BIN1-BIN2).LT.0.1D-10)
     *      BORDER(IBOND)=BIN1
         END IF
      ENDDO
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.2)THEN
            NLFTC=2
            BLEFT=THREE
            DO I=1,2
               IF(BORDER(LBOND(I,IFFAT)).GT.0.1D-10) NLFTC=NLFTC-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFTC.EQ.1)THEN
               DO I=1,2
                  IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10)
     *            BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.3.AND.
     *      NUMRIN(10,IFFAT).EQ.0)THEN
            LOXY=0
            LOXY1=0
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8) LOXY=LOXY+1
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1.AND.
     *            QMMFF(JFFAT).EQ.ZERO)THEN
                  LOXY1=LOXY1+1
                  KBOND2=KBOND
               END IF
            ENDDO
            IF(LOXY1.EQ.1.AND.LOXY.EQ.1)THEN
               BORDER(KBOND2)=TWO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.2)THEN
            BLEFT=FOUR
            NLFTC=2
            DO I=1,2
               IF(BORDER(LBOND(I,IFFAT)).GT.0.1D-10) NLFTC=NLFTC-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFTC.EQ.1)THEN
               DO I=1,2
                  IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10)
     *            BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.3)THEN
            BLEFT=FOUR
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).EQ.ONE)
     *         BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(BLEFT.EQ.TWO)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *               BORDER(LBOND(I,IFFAT))=TWO
               ENDDO
            END IF
            BLEFT=FOUR
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).EQ.TWO)
     *         BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(BLEFT.EQ.TWO)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *               BORDER(LBOND(I,IFFAT))=ONE
               ENDDO
            END IF
            IF(BLEFT.EQ.THREE)THEN
               NOXY=0
               NBOXY=0
               NOTWO=0
               DO I=1,3
                  KBOND=LBOND(I,IFFAT)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8) NOXY=NOXY+1
                  IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *               BORDER(KBOND).LT.0.1D-10   )THEN
                     NBOXY=KBOND
                  END IF
                  IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *               QMMFF(JFFAT).EQ.ZERO.AND.
     *               LBOND(10,JFFAT).EQ.2.AND.
     *               BORDER(KBOND).LT.0.1D-10   ) THEN
                     DO J=1,2
                        JBOND=LBOND(J,JFFAT)
                        KFFAT=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JFFAT
                        IF(NINT(ZANF(KFFAT)).EQ.1) NOTWO=NOTWO+1
                     ENDDO
                  END IF
               ENDDO
               IF(NOTWO.EQ.2)THEN
                  JCASE=0
                  DO I=1,3
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                  LBOND(10,JFFAT).EQ.2.AND.JCASE.EQ.0.AND.
     *                  BORDER(KBOND).LT.0.1D-10   )THEN
                        BORDER(KBOND)=TWO
                        JCASE=2
                     END IF
                  ENDDO
               END IF
               IF(NOXY.EQ.1)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).NE.8)THEN
                        ICN=LBOND(10,JFFAT)
                        IBCN=0
                        DO J=1,ICN
                           JBOND=LBOND(J,JFFAT)
                           KFFAT=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JFFAT
                           IF(BORDER(JBOND).GT.0.1D-10) ICN=ICN-1
                           IF(KFFAT.EQ.IFFAT.AND.
     *                        BORDER(JBOND).LT.0.1D-10) IBCN=JBOND
                        ENDDO
                        IF(ICN.EQ.1.AND.IBCN.NE.0)THEN
                           BORDER(NBOXY)=TWO
                           BORDER(IBCN) =ONE
                        END IF
                     END IF
                  ENDDO
               END IF
            END IF
         END IF
      ENDDO
C
      BCOUNT1=ZERO
      ICOUNT=ICOUNT+1
      DO IBOND=1,NBOND
         BCOUNT1=BCOUNT1+BORDER(IBOND)
      ENDDO
      IF(ABS(BCOUNT1-BCOUNT2).LT.0.1D-10) GOTO 981
      IF(ICOUNT.GT.300) GOTO 981
      BCOUNT2=BCOUNT1
      GOTO 980
 981  CONTINUE
C
C     -- DETERMINE O, S CHARGE --
C
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ. 8.OR.
     *      NINT(ZANF(IFFAT)).EQ.16.AND.QMMFF(IFFAT).EQ.ZERO.AND.
     *      NTYPE(IFFAT).EQ.0) THEN
            QTEMP = -TWO
            DO I=1,LBOND(10,IFFAT)
               KBOND=LBOND(I,IFFAT)
               QTEMP = QTEMP + BORDER(KBOND)
            ENDDO
            IF(QTEMP.EQ.-PT5) QMMFF(IFFAT) = -PT5
            IF(QTEMP.EQ.-ONE.AND.LBOND(10,IFFAT).NE.2) 
     *         QMMFF(IFFAT) = -ONE
            IF(QTEMP.EQ. ONE.AND.LBOND(10,IFFAT).NE.1) 
     *         QMMFF(IFFAT) =  ONE
         END IF
      ENDDO
      DO IFFAT=1,NFFAT
         IF((NINT(ZANF(IFFAT)).EQ. 8.OR.
     *      NINT(ZANF(IFFAT)).EQ.16).AND.QMMFF(IFFAT).EQ.ZERO.AND.
     *      LBOND(10,IFFAT).EQ.1)THEN
            IF(BORDER(LBOND(1,IFFAT)).EQ.ZERO)BORDER(LBOND(1,IFFAT))=TWO
         END IF
      ENDDO
      DO IFFAT=1,NFFAT     
         IF((NINT(ZANF(IFFAT)).EQ. 8.OR.
     *      NINT(ZANF(IFFAT)).EQ.16).AND.QMMFF(IFFAT).EQ.ZERO.AND.
     *      LBOND(10,IFFAT).EQ.2)THEN
            IF(BORDER(LBOND(1,IFFAT)).EQ.ZERO)BORDER(LBOND(1,IFFAT))=ONE
            IF(BORDER(LBOND(2,IFFAT)).EQ.ZERO)BORDER(LBOND(2,IFFAT))=ONE
         END IF
      ENDDO
C
C     -- DETERMINE MORE BOND ORDER --
C
      BCOUNT2=ZERO
      ICOUNT=0
 990  CONTINUE
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         DO M=1,MB
            IFFAT=LISTRIN(M,IRING)
            MBEFO=M-1
            IF(MBEFO.EQ.0) MBEFO=MB
            IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.2.AND.
     *         QMMFF(IFFAT).EQ.ZERO)THEN
               BLEFT=THREE
               IF(BORDER(LISTRIB(M    ,IRING)).EQ.ZERO.AND.
     *            BORDER(LISTRIB(MBEFO,IRING)).NE.ZERO    )
     *         BORDER(LISTRIB(M    ,IRING))=
     *         BLEFT-BORDER(LISTRIB(MBEFO,IRING))
               IF(BORDER(LISTRIB(M    ,IRING)).NE.ZERO.AND.
     *            BORDER(LISTRIB(MBEFO,IRING)).EQ.ZERO    )    
     *         BORDER(LISTRIB(MBEFO,IRING))=
     *         BLEFT-BORDER(LISTRIB(M,IRING))
            END IF
         ENDDO
      ENDDO
      DO IANGL=1,NANGL
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL)
         NBNDN=0
         NBNDO=0
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K1)).EQ.8.AND.NINT(ZANF(K3)).EQ.7.AND.
     *      LBOND(10,K1).EQ.1  .AND.LBOND(10,K3).EQ.2.AND.
     *      ABS(QMMFF(K3)).LT.0.1D-10  )THEN
            NBNDN=0
            NBNDO=0
            BTHERE=FOUR
            DO II=1,3
               KBOND=LBOND(II,K2)
               JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(NINT(ZANF(JJ)).EQ.7.AND.LBOND(10,JJ).EQ.2.AND.
     *            BORDER(KBOND).EQ.ONE)THEN
                  IF((BORDER(LBOND(1,JJ))+BORDER(LBOND(2,JJ))).LT.THREE)
     *            NBNDN=KBOND
               END IF
               IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.1.AND.
     *            BORDER(KBOND).EQ.TWO)THEN
                  DO KK=1,2
                     JBOND=LBOND(KK,JJ)
                     MM=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JJ
                     IF(NINT(ZANF(MM)).EQ.1) NBNDO=KBOND
                  ENDDO
               END IF
               BCTHERE=BCTHERE-BORDER(KBOND)
            ENDDO
            IF(ABS(BCTHERE).LT.0.1D-10.AND.NBNDN.NE.0.AND.
     *         NBNDO.NE.0)THEN
               BORDER(NBNDO)=ONE
               BORDER(NBNDN)=TWO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K3)).EQ.8.AND.NINT(ZANF(K1)).EQ.7.AND.
     *      LBOND(10,K3).EQ.1  .AND.LBOND(10,K1).EQ.2.AND.
     *      ABS(QMMFF(K1)).LT.0.1D-10  )THEN
            NBNDN=0
            NBNDO=0
            BTHERE=FOUR
            DO II=1,3
               KBOND=LBOND(II,K2)
               JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(NINT(ZANF(JJ)).EQ.7.AND.LBOND(10,JJ).EQ.2.AND.
     *            BORDER(KBOND).EQ.ONE)THEN
                  IF((BORDER(LBOND(1,JJ))+BORDER(LBOND(2,JJ))).LT.THREE)
     *            NBNDN=KBOND
               END IF
               IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.1.AND.
     *            BORDER(KBOND).EQ.TWO)THEN
                  DO KK=1,2
                     JBOND=LBOND(KK,JJ)
                     MM=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JJ
                     IF(NINT(ZANF(MM)).EQ.1) NBNDO=KBOND
                  ENDDO
               END IF
               BCTHERE=BCTHERE-BORDER(KBOND)
            ENDDO
            IF(ABS(BCTHERE).LT.0.1D-10.AND.NBNDN.NE.0.AND.
     *         NBNDO.NE.0)THEN
               BORDER(NBNDO)=ONE
               BORDER(NBNDN)=TWO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K1)).EQ.8.AND.NINT(ZANF(K3)).EQ.7.AND.
     *      LBOND(10,K1).EQ.2  .AND.LBOND(10,K3).EQ.3      )THEN
            BCTHERE=FOUR
            NBNDN=0
            NBNDO=0
            DO II=1,3
               KBOND=LBOND(II,K2)
               JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(NINT(ZANF(JJ)).EQ.7.AND.LBOND(10,JJ).EQ.3.AND.
     *            BORDER(KBOND).LT.0.1D-10)THEN
                  NBNDN=KBOND
               END IF
               IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.2.AND.
     *            BORDER(KBOND).LT.0.1D-10)THEN
                  DO KK=1,2
                     JBOND=LBOND(KK,JJ)
                     MM=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JJ
                     IF(NINT(ZANF(MM)).EQ.1) NBNDO=KBOND
                  ENDDO
               END IF
               BCTHERE=BCTHERE-BORDER(KBOND)
            ENDDO
            IF(ABS(BCTHERE).LT.0.1D-10.AND.NBNDN.NE.0.AND.
     *         NBNDO.NE.0)THEN
               BORDER(NBNDO)=TWO
               BORDER(NBNDN)=ONE
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K3)).EQ.8.AND.NINT(ZANF(K1)).EQ.7.AND.
     *      LBOND(10,K3).EQ.2  .AND.LBOND(10,K1).EQ.3      )THEN
            BCTHERE=FOUR
            NBNDN=0
            NBNDO=0
            DO II=1,3
               KBOND=LBOND(II,K2)
               JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(NINT(ZANF(JJ)).EQ.7.AND.LBOND(10,JJ).EQ.3.AND.
     *            BORDER(KBOND).LT.0.1D-10)THEN
                  NBNDN=KBOND
               END IF
               IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.2.AND.
     *            BORDER(KBOND).LT.0.1D-10)THEN
                  DO KK=1,2
                     JBOND=LBOND(KK,JJ)
                     MM=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JJ
                     IF(NINT(ZANF(MM)).EQ.1) NBNDO=KBOND
                  ENDDO
               END IF
               BCTHERE=BCTHERE-BORDER(KBOND)
            ENDDO
            IF(ABS(BCTHERE).LT.0.1D-10.AND.NBNDN.NE.0.AND.
     *         NBNDO.NE.0)THEN
               BORDER(NBNDO)=TWO
               BORDER(NBNDN)=ONE
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.7.AND.LBOND(10,K2).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.8.AND.NINT(ZANF(K3)).EQ.8      )THEN
            BTHERE=ZERO
            DO JJ=1,2
               KBOND=LBOND(JJ,K2)
               BTHERE=BTHERE+BORDER(KBOND)
            ENDDO
            IF(ABS(BTHERE-ONE).LT.0.1D-10)THEN
               DO JJ=1,2
                  KBOND=LBOND(JJ,K2)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=TWO
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.7.AND.LBOND(10,K2).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.16.AND.NINT(ZANF(K3)).EQ.16      )THEN
            BTHERE=ZERO
            DO JJ=1,2
               KBOND=LBOND(JJ,K2)
               BTHERE=BTHERE+BORDER(KBOND)
            ENDDO
            IF(ABS(BTHERE-ONE).LT.0.1D-10)THEN
               DO JJ=1,2
                  KBOND=LBOND(JJ,K2)
                  IF(BORDER(KBOND).LT.0.1D-10) BORDER(KBOND)=TWO
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.2.AND.
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.3     )THEN
            BLFTC=FOUR
            ICASE1=0
            ICASE2=0
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10) ICASE1=1
               IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10) ICASE2=1
               BLFTC=BLFTC-BORDER(KBOND)
            ENDDO
            IF(BLFTC.EQ.THREE.AND.ICASE1.EQ.1.AND.ICASE2.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,K2)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                  IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=TWO
                  IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.6.AND.LBOND(10,K2).EQ.3.AND.
     *      NINT(ZANF(K3)).EQ.7.AND.LBOND(10,K3).EQ.2.AND.
     *      NINT(ZANF(K1)).EQ.7.AND.LBOND(10,K1).EQ.3     )THEN
            BLFTC=FOUR
            ICASE1=0
            ICASE2=0
            DO I=1,3
               KBOND=LBOND(I,K2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
               IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10) ICASE1=1
               IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10) ICASE2=1
               BLFTC=BLFTC-BORDER(KBOND)
            ENDDO
            IF(BLFTC.EQ.THREE.AND.ICASE1.EQ.1.AND.ICASE2.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,K2)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                  IF(JFFAT.EQ.K3.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=TWO
                  IF(JFFAT.EQ.K1.AND.BORDER(KBOND).LT.0.1D-10)
     *               BORDER(KBOND)=ONE
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(K2)).EQ.8.AND.NINT(ZANF(K3)).EQ.6.AND.
     *      NINT(ZANF(K1)).EQ.6.AND.LBOND(10,K2).EQ.2)THEN
            DO I=1,LBOND(10,K2)
               IF(BORDER(LBOND(I,K2)).LT.0.1D-10)
     *         BORDER(LBOND(I,K2))=ONE
            ENDDO
         END IF
         IF(NINT(ZANF(K2)).EQ.16.AND.NINT(ZANF(K3)).EQ.6.AND.
     *      NINT(ZANF(K1)).EQ.6.AND.LBOND(10,K2).EQ.2)THEN
            DO I=1,LBOND(10,K2)
               IF(BORDER(LBOND(I,K2)).LT.0.1D-10)
     *         BORDER(LBOND(I,K2))=ONE
            ENDDO
         END IF
      ENDDO
      DO IBOND=1,NBOND
         I1=IPAIR(1,IBOND)
         I2=IPAIR(2,IBOND)
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)).LT.0.1D-10.AND.
     *      LBOND(10,I1).EQ.3.AND.LBOND(10,I2).EQ.2)THEN
            LHYDRG=0
            DO I=1,2
               KBOND=LBOND(I,I2)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-I2
               IF(NINT(ZANF(JFFAT)).EQ.1) LHYDRG=1
            ENDDO
            IF(LHYDRG.EQ.1) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I2)).EQ. 7.AND.NINT(ZANF(I1)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)).LT.0.1D-10.AND.
     *      LBOND(10,I2).EQ.3.AND.LBOND(10,I1).EQ.2)THEN
            LHYDRG=0
            DO I=1,2
               KBOND=LBOND(I,I1)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-I1
               IF(NINT(ZANF(JFFAT)).EQ.1) LHYDRG=1
            ENDDO
            IF(LHYDRG.EQ.1) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10.AND.LBOND(10,I1).EQ.2.AND.
     *      LBOND(10,I2).EQ.1   )THEN
            BLFT1=THREE
            BLFT2=TWO
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(ABS(BLFT1+ONE).LT.0.1D-10.AND.
     *         NLFT1.EQ.0.AND.NLFT2.EQ.0) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I2)).EQ. 7.AND.NINT(ZANF(I1)).EQ. 8.AND.
     *      ABS(BORDER(IBOND)-TWO).LT.0.1D-10.AND.LBOND(10,I2).EQ.2.AND.
     *      LBOND(10,I1).EQ.1   )THEN
            BLFT2=THREE
            BLFT1=TWO
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(ABS(BLFT2+ONE).LT.0.1D-10.AND.
     *         NLFT1.EQ.0.AND.NLFT2.EQ.0) BORDER(IBOND)=ONE
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 8.AND.
     *       LBOND(10,I1) .EQ. 3.AND.LBOND(10 ,I2) .EQ. 2    )THEN
            BLFT1=THREE
            BLFT2=TWO
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         ABS(BLFT1-BLFT2).LT.0.1D-10)
     *      BORDER(IBOND)=BLFT1
         END IF
         IF(NINT(ZANF(I1)).EQ. 8.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *       LBOND(10,I1) .EQ. 2.AND.LBOND(10 ,I2) .EQ. 3    )THEN
            BLFT1=TWO
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         ABS(BLFT1-BLFT2).LT.0.1D-10)
     *      BORDER(IBOND)=BLFT1
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *      BORDER(IBOND).LT.0.1D-10)THEN
            BLFT1=THREE
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         ABS(BLFT1-BLFT2).LT.0.1D-10)
     *      BORDER(IBOND)=BLFT1
         END IF
         IF(NINT(ZANF(I1)).EQ. 7.AND.NINT(ZANF(I2)).EQ. 7.AND.
     *      BORDER(IBOND).LT.0.1D-10.AND.
     *      LBOND(10,I1).EQ.LBOND(10,I2))THEN
            BLFT1=THREE
            BLFT2=THREE
            NLFT1=LBOND(10,I1)
            NLFT2=LBOND(10,I2)
            DO I=1,LBOND(10,I1)
               IF(BORDER(LBOND(I,I1)).GT.0.1D-10)
     *         NLFT1=NLFT1-1
               BLFT1=BLFT1-BORDER(LBOND(I,I1))
            ENDDO
            DO I=1,LBOND(10,I2)
               IF(BORDER(LBOND(I,I2)).GT.0.1D-10)
     *         NLFT2=NLFT2-1
               BLFT2=BLFT2-BORDER(LBOND(I,I2))
            ENDDO
            IF(NLFT1.EQ.1.AND.NLFT2.EQ.1.AND.
     *         (BLEFT1.LT.0.1D-10.OR.BLEFT2.LT.0.1D-10).AND.
     *         (BLEFT1.GT.0.1D-10.OR.BLEFT2.GT.0.1D-10)     )THEN
                BTHERE=MAX(BLEFT1,BLEFT2)
                BORDER(IBOND)=BTHERE
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 6) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.BLEFT2.EQ.ONE) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF((BLEFT1.EQ.TWO.AND.BLEFT2.EQ.TWO)        .AND.
     *         (LBOND(10,I1).EQ.3.AND.LBOND(10,I2).EQ.3)     )THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF((BLEFT1.EQ.THREE.AND.BLEFT2.EQ.THREE)    .AND.
     *         (LBOND(10,I1).EQ.2.AND.LBOND(10,I2).EQ.2)     )THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 7) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.LBOND(10,I2).EQ.4)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT1.EQ.TWO.AND.LBOND(10,I1).EQ.3)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF(BLEFT1.EQ.THREE.AND.LBOND(10,I2).EQ.1)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF(NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ. 7) THEN
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT2.EQ.ONE.AND.LBOND(10,I1).EQ.4)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT2.EQ.TWO.AND.LBOND(10,I2).EQ.3)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
            IF(BLEFT2.EQ.THREE.AND.LBOND(10,I1).EQ.1)THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=THREE
            END IF
         END IF
         IF((NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ. 8).OR.
     *      (NINT(ZANF(I1)).EQ. 6.AND.NINT(ZANF(I2)).EQ.16)    ) THEN
            BLEFT1=FOUR
            DO IB1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IB1,I1)).EQ.ONE)
     *         BLEFT1=BLEFT1-BORDER(LBOND(IB1,I1))
            ENDDO
            IF(BLEFT1.EQ.ONE.AND.LBOND(10,I2).EQ.2) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT1.EQ.TWO.AND.LBOND(10,I2).EQ.1) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
         END IF
         IF((NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ. 8).OR.
     *      (NINT(ZANF(I2)).EQ. 6.AND.NINT(ZANF(I1)).EQ.16)    ) THEN
            BLEFT2=FOUR
            DO IB2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IB2,I2)).EQ.ONE)
     *         BLEFT2=BLEFT2-BORDER(LBOND(IB2,I2))
            ENDDO
            IF(BLEFT2.EQ.ONE.AND.LBOND(10,I1).EQ.2) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=ONE
            END IF
            IF(BLEFT2.EQ.TWO.AND.LBOND(10,I1).EQ.1) THEN
               IF(BORDER(IBOND).EQ.ZERO) BORDER(IBOND)=TWO
            END IF
         END IF
         IF(NINT(ZANF(I1)).EQ.8.AND. LBOND(10,I1).EQ.2.AND.
     *      NINT(ZANF(I2)).EQ.7.AND.(LBOND(10,I2).EQ.3.OR.
     *      LBOND(10,I2).EQ.2).AND.BORDER(IBOND).LT.0.1D-10 )THEN
            BINO=TWO
            BINN=THREE
            NIBO=2
            NIBN=LBOND(10,I2)
            DO IXN=1,LBOND(10,I2)
               IF(BORDER(LBOND(IXN,I2)).GT.0.1D-10) NIBN=NIBN-1
               BINN=BINN-BORDER(LBOND(IXN,I2))
            ENDDO
            DO IXO=1,2
               IF(BORDER(LBOND(IXO,I1)).GT.0.1D-10) NIBO=NIBO-1
               BINO=BINO-BORDER(LBOND(IXO,I1))
            ENDDO
            IF(NIBN.EQ.1.AND.NIBO.EQ.1.AND.ABS(BINO-BINN).LT.0.1D-10)
     *      BORDER(IBOND)=BINO
         END IF
         IF(NINT(ZANF(I2)).EQ.8.AND. LBOND(10,I2).EQ.2.AND.
     *      NINT(ZANF(I1)).EQ.7.AND.(LBOND(10,I1).EQ.3.OR.
     *      LBOND(10,I1).EQ.2).AND.BORDER(IBOND).LT.0.1D-10)THEN
            BINO=TWO
            BINN=THREE
            NIBO=2
            NIBN=LBOND(10,I1)
            DO IXN=1,LBOND(10,I1)
               IF(BORDER(LBOND(IXN,I1)).GT.0.1D-10) NIBN=NIBN-1
               BINN=BINN-BORDER(LBOND(IXN,I1))
            ENDDO
            DO IXO=1,2
               IF(BORDER(LBOND(IXO,I2)).GT.0.1D-10) NIBO=NIBO-1
               BINO=BINO-BORDER(LBOND(IXO,I2))
            ENDDO
            IF(NIBN.EQ.1.AND.NIBO.EQ.1.AND.ABS(BINO-BINN).LT.0.1D-10)
     *      BORDER(IBOND)=BINO
         END IF
         IF(NINT(ZANF(I2)).EQ.7.AND.NINT(ZANF(I1)).EQ.7.AND.
     *      LBOND(10,I1).EQ.LBOND(10,I2).AND.
     *      BORDER(IBOND).LT.0.1D-10                        )THEN
            BIN1=THREE
            BIN2=THREE
            NIN1=LBOND(10,I1)
            NIN2=LBOND(10,I2)
            DO IX1=1,LBOND(10,I1)
               IF(BORDER(LBOND(IX1,I1)).GT.0.1D-10) NIN1=NIN1-1
               BIN1=BIN1-BORDER(LBOND(IX1,I1))
            ENDDO
            DO IX2=1,LBOND(10,I2)
               IF(BORDER(LBOND(IX2,I2)).GT.0.1D-10) NIN2=NIN2-1
               BIN2=BIN2-BORDER(LBOND(IX2,I2))
            ENDDO
            IF(NIN2.EQ.1.AND.NIN1.EQ.1.AND.ABS(BIN1-BIN2).LT.0.1D-10)
     *      BORDER(IBOND)=BIN1
         END IF
      ENDDO
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.2)THEN
            NLFTC=2
            BLEFT=THREE
            DO I=1,2
               IF(BORDER(LBOND(I,IFFAT)).GT.0.1D-10) NLFTC=NLFTC-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFTC.EQ.1)THEN
               DO I=1,2
                  IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10)
     *            BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.3.AND.
     *      NUMRIN(10,IFFAT).EQ.0)THEN
            LOXY=0
            LOXY1=0
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.8) LOXY=LOXY+1
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1.AND.
     *            QMMFF(JFFAT).EQ.ZERO)THEN
                  LOXY1=LOXY1+1
                  KBOND2=KBOND
               END IF
            ENDDO
            IF(LOXY1.EQ.1.AND.LOXY.EQ.1)THEN
               BORDER(KBOND2)=TWO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.2)THEN
            BLEFT=FOUR
            NLFTC=2
            DO I=1,2
               IF(BORDER(LBOND(I,IFFAT)).GT.0.1D-10) NLFTC=NLFTC-1
               BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(NLFTC.EQ.1)THEN
               DO I=1,2
                  IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10)
     *            BORDER(LBOND(I,IFFAT))=BLEFT
               ENDDO
            END IF
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.6.AND.LBOND(10,IFFAT).EQ.3)THEN
            BLEFT=FOUR
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).EQ.ONE)
     *         BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(BLEFT.EQ.TWO)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *               BORDER(LBOND(I,IFFAT))=TWO
               ENDDO
            END IF
            BLEFT=FOUR
            DO I=1,LBOND(10,IFFAT)
               IF(BORDER(LBOND(I,IFFAT)).EQ.TWO)
     *         BLEFT=BLEFT-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(BLEFT.EQ.TWO)THEN
               DO I=1,LBOND(10,IFFAT)
                  IF(BORDER(LBOND(I,IFFAT)).EQ.ZERO)
     *               BORDER(LBOND(I,IFFAT))=ONE
               ENDDO
            END IF
            IF(BLEFT.EQ.THREE)THEN
               NOXY=0
               NBOXY=0
               NOTWO=0
               DO I=1,3
                  KBOND=LBOND(I,IFFAT)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.8) NOXY=NOXY+1
                  IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *               BORDER(KBOND).LT.0.1D-10   )THEN
                     NBOXY=KBOND
                  END IF
                  IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *               QMMFF(JFFAT).EQ.ZERO.AND.
     *               LBOND(10,JFFAT).EQ.2.AND.
     *               BORDER(KBOND).LT.0.1D-10   ) THEN
                     DO J=1,2
                        JBOND=LBOND(J,JFFAT)
                        KFFAT=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JFFAT
                        IF(NINT(ZANF(KFFAT)).EQ.1) NOTWO=NOTWO+1
                     ENDDO
                  END IF
               ENDDO
               IF(NOTWO.EQ.2)THEN
                  JCASE=0
                  DO I=1,3
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).EQ.8.AND.
     *                  LBOND(10,JFFAT).EQ.2.AND.JCASE.EQ.0.AND.
     *                  BORDER(KBOND).LT.0.1D-10   )THEN
                        BORDER(KBOND)=TWO
                        JCASE=2
                     END IF
                  ENDDO
               END IF
               IF(NOXY.EQ.1)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                     IF(NINT(ZANF(JFFAT)).NE.8)THEN
                        ICN=LBOND(10,JFFAT)
                        IBCN=0
                        DO J=1,ICN
                           JBOND=LBOND(J,JFFAT)
                           KFFAT=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JFFAT
                           IF(BORDER(JBOND).GT.0.1D-10) ICN=ICN-1
                           IF(KFFAT.EQ.IFFAT.AND.
     *                        BORDER(JBOND).LT.0.1D-10) IBCN=JBOND
                        ENDDO
                        IF(ICN.EQ.1.AND.IBCN.NE.0)THEN
                           BORDER(NBOXY)=TWO
                           BORDER(IBCN) =ONE
                        END IF
                     END IF
                  ENDDO
               END IF
            END IF
         END IF
      ENDDO
C
      BCOUNT1=ZERO
      ICOUNT=ICOUNT+1
      DO IBOND=1,NBOND
         BCOUNT1=BCOUNT1+BORDER(IBOND)
      ENDDO
      IF(ABS(BCOUNT1-BCOUNT2).LT.0.1D-10) GOTO 991
      IF(ICOUNT.GT.300) GOTO 991
      BCOUNT2=BCOUNT1
      GOTO 990
 991  CONTINUE
C
C
C     -- P --
      DO 300 IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.15)THEN
            IF(LBOND(10,IFFAT).EQ.4)THEN
               NTYPE(IFFAT)=25
               GOTO 300
            END IF
            IF(LBOND(10,IFFAT).EQ.2)THEN
               NTYPE(IFFAT)=75
               GOTO 300
            END IF
            IF(LBOND(10,IFFAT).EQ.3)THEN
               NTYPE(IFFAT)=26
               GOTO 300
            END IF
         END IF
 300  CONTINUE
C
C
C     -- S --
      DO 400 IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.16)THEN
            IF(LBOND(10,IFFAT).EQ.2)THEN
               DO I=1,LBOND(10,IFFAT)
                  KBOND=LBOND(I,IFFAT)                  
                  IXX =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(IXX)).EQ.8.AND.
     *               LBOND(10,IXX).EQ.1)THEN
                     NTYPE(IFFAT)=74
                     QMMFF(IFFAT)=ZERO
                     GOTO 400
                  END IF
               ENDDO
               IF(NTYPE(IFFAT).EQ.0)THEN
                  NTYPE(IFFAT)=15
                  QMMFF(IFFAT)=ZERO
               END IF
            END IF
C
            IF(LBOND(10,IFFAT).EQ.3)THEN
               DO IANGL=1,NANGL
                  K1=KLIST(1,IANGL)
                  K2=KLIST(2,IANGL)
                  K3=KLIST(3,IANGL)
                  IF(K2.EQ.IFFAT)THEN
                     IF(NINT(ZANF(K1)).EQ.8.AND.(NINT(ZANF(K3)).EQ.16
     *                  .OR.NINT(ZANF(K3)).EQ.8).AND.
     *                  (LBOND(10,K3).EQ.1.AND.LBOND(10,K1).EQ.1))THEN
                        LOXY=0
                        LSUF=0
                        IDOUBLE=0
                        DO II=1,3
                           KBOND=LBOND(II,K2)
                           JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                           IF(JFFAT.NE.K1.AND.JFFAT.NE.K3.AND.
     *                        BORDER(KBOND).EQ.TWO) IDOUBLE=IDOUBLE+1
                           IF(NINT(ZANF(JFFAT)).EQ.8  ) LOXY=LOXY+1
                           IF(NINT(ZANF(JFFAT)).EQ.16 ) LSUF=LSUF+1
                        ENDDO
                        IF(LOXY.EQ.2.OR.(LOXY.EQ.1.AND.LSUF.EQ.1))THEN
                           IF(IDOUBLE.NE.1)THEN
                              NTYPE(IFFAT)=73
                           ELSE
                              NTYPE(IFFAT)=18
                           END IF
                           GOTO 400
                        END IF
                     END IF
                     IF(NINT(ZANF(K3)).EQ.8.AND.(NINT(ZANF(K1)).EQ.16
     *                  .OR.NINT(ZANF(K1)).EQ.8).AND.
     *                  (LBOND(10,K3).EQ.1.AND.LBOND(10,K1).EQ.1))THEN
                        LOXY=0
                        LSUF=0
                        IDOUBLE=0
                        DO II=1,3
                           KBOND=LBOND(II,K2)
                           JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                           IF(JFFAT.NE.K1.AND.JFFAT.NE.K3.AND.
     *                        BORDER(KBOND).EQ.TWO) IDOUBLE=IDOUBLE+1 
                           IF(NINT(ZANF(JFFAT)).EQ.8  ) LOXY=LOXY+1
                           IF(NINT(ZANF(JFFAT)).EQ.16 ) LSUF=LSUF+1
                        ENDDO
                        IF(LOXY.EQ.2.OR.(LOXY.EQ.1.AND.LSUF.EQ.1))THEN
                           IF(IDOUBLE.NE.1)THEN
                              NTYPE(IFFAT)=73
                           ELSE
                              NTYPE(IFFAT)=18
                           END IF
                           GOTO 400
                        END IF
                     END IF
                  END IF
               ENDDO
               LCOUNT3=0
               DO I=1,LBOND(10,IFFAT)
                  KBOND=LBOND(I,IFFAT)                  
                  IXX =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(IXX)).EQ.8.AND.
     *                LBOND(10,IXX).EQ.1)LCOUNT3=LCOUNT3+1
                  IF(NINT(ZANF(IXX)).EQ.7.AND.
     *              ABS(BORDER(KBOND)-TWO).LT.0.1D-10)LCOUNT3=LCOUNT3+1
               ENDDO
               IF(LCOUNT3.GT.0)THEN
                  NTYPE(IFFAT)=17
                  GOTO 400
               END IF
               IF(NTYPE(IFFAT).EQ.0) NTYPE(IFFAT)=17
            END IF
C
            IF(LBOND(10,IFFAT).EQ.1)THEN
               KBOND=LBOND(1,IFFAT)  
               IXX =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(IXX)).EQ.15)THEN
                  NTYPE(IFFAT)=72
                  GOTO 400
               END IF
               IF(NTYPE(IXX).EQ.73.OR.NTYPE(IXX).EQ.41)THEN
                  NTYPE(IFFAT)=72
                  QMMFF(IFFAT)=-0.5D+00
                  GOTO 400
               END IF
               IF(QMMFF(IFFAT).LT.-0.1D-15)THEN
                  NTYPE(IFFAT)=72
                  QMMFF(IFFAT)=-1.0D+00
                  GOTO 400
               END IF
               IF(NINT(ZANF(IXX)).EQ.6)THEN
                  NTYPE(IFFAT)=16
                  GOTO 400
               END IF
            END IF
            LCOUNT2=0
            DO I=1,LBOND(10,IFFAT)
               KBOND=LBOND(I,IFFAT)  
               IXX =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(IXX)).EQ.8.AND.
     *            LBOND(10,IXX).EQ.1)THEN
                  LCOUNT2=LCOUNT2+1
               END IF
               IF(NINT(ZANF(IXX)).EQ.7)THEN
                  LCOUNT2=LCOUNT2+1
               END IF
            ENDDO
            IF(LCOUNT2.GT.1.AND.NTYPE(IFFAT).EQ.0)THEN
               NTYPE(IFFAT)=18
               GOTO 400
            END IF
         END IF
 400  CONTINUE
C
C
C     -- O --
      DO 500 IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.8.AND.NTYPE(IFFAT).EQ.0)THEN
C           OXYGEN ATTACHED TO TWO ATOMS
            IF(LBOND(10,IFFAT).EQ.2)THEN
               IF(QMMFF(IFFAT).EQ.ONE)THEN
                  NTYPE(IFFAT)=51
                  GOTO 500
               END IF
               NTYPE(IFFAT)=6
               QMMFF(IFFAT)=ZERO
               LCOUNT2=1
               DO I=1,LBOND(10,IFFAT)
                  IF(NINT(ZANF(IFFAT)).EQ.1) LCOUNT2=LCOUNT2+1
               ENDDO
            END IF
C           -OXYGEN ATTACHED TO 1 ATOM
            IF(LBOND(10,IFFAT).EQ.1)THEN
               KBOND=LBOND(1,IFFAT)
               IXX =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NTYPE(IXX).EQ.41)THEN
                  NTYPE(IFFAT)=32
                  QMMFF(IFFAT)=-0.5D+00
                  GOTO 500
               END IF
               IF(NTYPE(IXX).EQ.77)THEN
                  NTYPE(IFFAT)=32
                  QMMFF(IFFAT)=-0.25D+00
                  GOTO 500
               END IF
               IF(NTYPE(IXX).EQ.69)THEN
                  NTYPE(IFFAT)=32
                  QMMFF(IFFAT)=ZERO
                  GOTO 500
               END IF
               IF(NINT(ZANF(IXX)).EQ.15.OR.
     *            NINT(ZANF(IXX)).EQ.16.OR.
     *            NINT(ZANF(IXX)).EQ.7.AND.
     *            NTYPE(IXX).NE.46     ) NTYPE(IFFAT)=32
               CALL VICLR(NLEGN2,1,5)
               DO IANGL=1,NANGL
                  K1=KLIST(1,IANGL)
                  K2=KLIST(2,IANGL)
                  K3=KLIST(3,IANGL)
                  IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.15.AND.
     *               NINT(ZANF(K3)).EQ.8)THEN
                     OXY=ZERO
                     DO II=1,LBOND(10,K2)
                        KBOND=LBOND(II,K2)
                        JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                        IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.1)
     *                  OXY=OXY+ONE
                     ENDDO
                     DO II=1,LBOND(10,K2)
                        KBOND=LBOND(II,K2)
                        JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                        IF(NINT(ZANF(JJ)).EQ.8.AND.
     *                     LBOND(10,JJ).EQ.1       )THEN
                           NTYPE(JJ)=32
                           QMMFF(JJ)=-(OXY-ONE)/OXY
                        END IF
                     ENDDO
                  END IF
                  IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.15.AND.
     *               NINT(ZANF(K1)).EQ.8)THEN
                     OXY=ZERO
                     DO II=1,LBOND(10,K2)
                        KBOND=LBOND(II,K2)
                        JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                        IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.1)
     *                  OXY=OXY+ONE
                     ENDDO
                     DO II=1,LBOND(10,K2)
                        KBOND=LBOND(II,K2)
                        JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                        IF(NINT(ZANF(JJ)).EQ.8.AND.
     *                     LBOND(10,JJ).EQ.1       )THEN
                           NTYPE(JJ)=32
                           QMMFF(JJ)=-(OXY-ONE)/OXY
                        END IF
                     ENDDO
                  END IF
                  IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.7.
     *               AND.NINT(ZANF(K3)).EQ.8)THEN
                     OXY=ZERO
                     DO II=1,LBOND(10,K2)
                        KBOND=LBOND(II,K2)
                        JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                        IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.1)
     *                  OXY=OXY+ONE
                     ENDDO
                     DO II=1,LBOND(10,K2)
                        KBOND=LBOND(II,K2)
                        JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                        IF(NINT(ZANF(JJ)).EQ.8.AND.
     *                     LBOND(10,JJ).EQ.1       )THEN
                           NTYPE(JJ)=32
                           QMMFF(JJ)=-(OXY-TWO)/OXY
                        END IF
                     ENDDO
                     GOTO 500
                  END IF
                  IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.7.
     *               AND.NINT(ZANF(K1)).EQ.8)THEN
                     OXY=ZERO
                     DO II=1,LBOND(10,K2)
                        KBOND=LBOND(II,K2)
                        JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                        IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.1)
     *                  OXY=OXY+ONE
                     ENDDO
                     DO II=1,LBOND(10,K2)
                        KBOND=LBOND(II,K2)
                        JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                        IF(NINT(ZANF(JJ)).EQ.8.AND.
     *                     LBOND(10,JJ).EQ.1       )THEN
                           NTYPE(JJ)=32
                           QMMFF(JJ)=-(OXY-TWO)/OXY
                        END IF
                     ENDDO
                     GOTO 500
                  END IF
                  IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.16.
     *               AND.NINT(ZANF(K3)).EQ.8.AND.LBOND(10,K3).EQ.1)THEN
                     OXY=ZERO
                     LCAR4=0
                     DO II=1,LBOND(10,K2)
                        KBOND=LBOND(II,K2)
                        JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                        IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.1)
     *                  OXY=OXY+ONE
                        IF(NINT(ZANF(JJ)).EQ.6.AND.LBOND(10,JJ).EQ.4)
     *                  LCAR4=LCAR4+1
                     ENDDO
                     DO II=1,LBOND(10,K2)
                        KBOND=LBOND(II,K2)
                        JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                        IF(NINT(ZANF(JJ)).EQ.8.AND.
     *                     LBOND(10,JJ).EQ.1       )THEN
                           NTYPE(JJ)=32
                           QMMFF(JJ)=-(OXY-TWO)/OXY
                        END IF
                        IF(NINT(ZANF(JJ)).EQ.8.AND.
     *                     LBOND(10,K2).EQ.3.AND.
     *                     LBOND(10,JJ).EQ.1.AND.
     *                     LCAR4.EQ.1       )THEN
                           NTYPE(JJ)=32
                           QMMFF(JJ)=-(OXY-ONE)/OXY
                        END IF
                     ENDDO
                     GOTO 500
                  END IF
                  IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.16.
     *               AND.NINT(ZANF(K1)).EQ.8.AND.LBOND(10,K1).EQ.1)THEN
                     OXY=ZERO
                     LCAR4=0
                     DO II=1,LBOND(10,K2)
                        KBOND=LBOND(II,K2)
                        JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                        IF(NINT(ZANF(JJ)).EQ.8.AND.LBOND(10,JJ).EQ.1)
     *                  OXY=OXY+ONE
                        IF(NINT(ZANF(JJ)).EQ.6.AND.LBOND(10,JJ).EQ.4)
     *                  LCAR4=LCAR4+1
                     ENDDO
                     DO II=1,LBOND(10,K2)
                        KBOND=LBOND(II,K2)
                        JJ=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                        IF(NINT(ZANF(JJ)).EQ.8.AND.
     *                     LBOND(10,JJ).EQ.1       )THEN
                           NTYPE(JJ)=32
                           QMMFF(JJ)=-(OXY-TWO)/OXY
                        END IF
                        IF(NINT(ZANF(JJ)).EQ.8.AND.
     *                     LBOND(10,K2).EQ.3.AND.
     *                     LBOND(10,JJ).EQ.1.AND.       
     *                     LCAR4.EQ.1       )THEN
                           NTYPE(JJ)=32
                           QMMFF(JJ)=-(OXY-ONE)/OXY
                        END IF
                     ENDDO
                     GOTO 500
                  END IF
                  IF((K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.15.
     *               AND.NINT(ZANF(K1)).EQ.8).OR.(K1.EQ.IFFAT.AND.
     *               NINT(ZANF(K2)).EQ.15.AND.NINT(ZANF(K3)).EQ.8))THEN
                     NTYPE(IFFAT)=32
                     LCOUNT5=0
                     DO IBOND=1,NBOND
                        J1=IPAIR(1,IBOND)
                        J2=IPAIR(2,IBOND)
                        IF(J1.EQ.K2.AND.NINT(ZANF(J2)).EQ.8.AND.
     *                     LBOND(10,J2).EQ.1)THEN
                           LCOUNT5=LCOUNT5+1
                        END IF
                        IF(J2.EQ.K2.AND.NINT(ZANF(J1)).EQ.8.AND.
     *                     LBOND(10,J1).EQ.1)THEN
                           LCOUNT5=LCOUNT5+1
                        END IF
                     ENDDO
                     IF(LCOUNT5.EQ.4)THEN
                        QMMFF(IFFAT)=-0.25D+00
                        DO III=1,LCOUNT5-1
                           NTYPE(NLEGN2(III))=32
                           QMMFF(NLEGN2(III))=QMMFF(IFFAT)
                        ENDDO
                     END IF
                  END IF
                  IF((K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.15.
     *               AND.NINT(ZANF(K1)).EQ.8).OR.(K1.EQ.IFFAT.AND.
     *               NINT(ZANF(K2)).EQ.15.AND.NINT(ZANF(K3)).EQ.8))THEN
                     NTYPE(IFFAT)=32
                     LCOUNT5=1
                     DO IBOND=1,NBOND
                        J1=IPAIR(1,IBOND)
                        J2=IPAIR(2,IBOND)
                        IF(J1.EQ.K2.AND.NINT(ZANF(J2)).EQ.8.AND.
     *                     LBOND(10,J2).EQ.1)THEN
                           NLEGN2(LCOUNT5)=J2
                           LCOUNT5=LCOUNT5+1
                        END IF
                        IF(J2.EQ.K2.AND.NINT(ZANF(J1)).EQ.8.AND.
     *                     LBOND(10,J1).EQ.1)THEN
                           NLEGN2(LCOUNT5)=J1
                           LCOUNT5=LCOUNT5+1
                        END IF
                     ENDDO
                     DO III=1,LCOUNT5-1
                        NTYPE(NLEGN2(III))=32
                     ENDDO
                     IF(LCOUNT5.LT.6.AND.LCOUNT5.GT.2)THEN
                        C2=0.0D+00
                        DO III=1,LCOUNT5-1
                           C2=C2+QMMFF(NLEGN2(III))
                        ENDDO
                        C2=C2+QMMFF(K2)
                        QMMFF(IFFAT)=C2/(LCOUNT5-1)
                        DO III=1,LCOUNT5-1
                          NTYPE(NLEGN2(III))=32
                          QMMFF(NLEGN2(III))=QMMFF(IFFAT)
                        ENDDO
                     END IF
                     GOTO 500
                  END IF
                  IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.16.AND.
     *               NINT(ZANF(K1)).EQ.16.AND.LBOND(10,K1).EQ.1)THEN
                     NTYPE(IFFAT)=32
                     QMMFF(IFFAT)=-0.5D+00
                     GOTO 500
                  END IF
                  IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.16.AND.
     *               NINT(ZANF(K3)).EQ.16.AND.LBOND(10,K3).EQ.1)THEN
                     NTYPE(IFFAT)=32
                     QMMFF(IFFAT)=-0.5D+00
                     GOTO 500
                  END IF
               ENDDO
               IF(QMMFF(IFFAT).EQ.(-1.0D+00))THEN
                  KBOND=LBOND(1,IFFAT)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.6.OR.
     *               NINT(ZANF(JFFAT)).EQ.7    )THEN
                     NTYPE(IFFAT)=35
                     GOTO 500
                  END IF
               END IF
               KBOND=LBOND(1,IFFAT)  
               IXX =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(IXX)).EQ.6.OR.NTYPE(IXX).EQ.46.OR.
     *            NINT(ZANF(IXX)).EQ.16)THEN
                  NTYPE(IFFAT)=7
                  GOTO 500
               END IF
            END IF
         END IF
 500  CONTINUE
C
C
C     -- LOOP NTYPE
C
      DO 605 KLOOP=1,3
      DO 601 IFFAT=1,NFFAT
         IF(NTYPE(IFFAT).EQ.32)THEN
            KBOND=LBOND(1,IFFAT)
            JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
            IF(NTYPE(JFFAT).EQ.82) QMMFF(IFFAT)=ZERO 
         END IF
         IF(NTYPE(IFFAT).EQ.3)THEN
            LSUFER=0
            LOXY  =0
            LLOXY =0
            LCARBON=0
            L46CUNT=0
            JBONDN=0
            LNTG =0
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.6) LCARBON=LCARBON+1
               IF(NTYPE(JFFAT).EQ.46)     L46CUNT=L46CUNT+1
               IF(NINT(ZANF(JFFAT)).EQ.16.AND.LBOND(10,JFFAT).EQ.1)
     *         LSUFER=LSUFER+1
               IF(NINT(ZANF(JFFAT)).EQ.8.AND.LBOND(10,JFFAT).EQ.1)
     *         LOXY=LOXY+1
               IF(NINT(ZANF(JFFAT)).EQ.7) THEN
                  LNTG=LNTG+1
                  JBONDN=KBOND
               END IF
               IF(NTYPE(JFFAT).EQ.25)THEN
                  LLOXY=0
                  DO JJ=1,LBOND(10,JFFAT)
                     JBOND=LBOND(JJ,JFFAT)
                     KFFAT=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JFFAT
                     IF(NINT(ZANF(KFFAT)).EQ.8.AND.LBOND(10,KFFAT).EQ.1)
     *               LLOXY=LLOXY+1 
                  ENDDO
               END IF
               IF(NINT(ZANF(JFFAT)).EQ.6.AND.LBOND(10,JFFAT).LE.3.AND.
     *            ABS(BORDER(KBOND)-TWO).LT.0.1D-10) NTYPE(IFFAT)=2
            ENDDO
            IF(LNTG.EQ.1.AND.LCARBON.EQ.2.AND.BORDER(JBONDN).EQ.ONE)
     *         NTYPE(IFFAT)=2
            IF(L46CUNT.EQ.1.AND.LCARBON.EQ.2) NTYPE(IFFAT)=2
            IF(LSUFER.EQ.0.AND.LOXY.EQ.0.AND.LLOXY.GE.2) NTYPE(IFFAT)=2
            IF(LSUFER.EQ.1.AND.LOXY.EQ.0)THEN
               DO I=1,3
                  KBOND=LBOND(I,IFFAT)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NTYPE(JFFAT).EQ.72) NTYPE(IFFAT)=2
              ENDDO
            END IF
            IF(LOXY.EQ.1.AND.LSUFER.EQ.0)THEN
               LTYP35=0
               LNGT  =0
               DO I=1,3
                  KBOND=LBOND(I,IFFAT)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NTYPE(JFFAT).EQ.35) LTYP35=LTYP35+1
                  IF(NINT(ZANF(JFFAT)).EQ.7.AND.BORDER(KBOND).EQ.TWO)
     *            LNGT=LNGT+1
              ENDDO
              IF(LTYP35.EQ.1.AND.LNGT.EQ.0) NTYPE(IFFAT)=2
            END IF
         END IF
         IF(NTYPE(IFFAT).EQ.2)THEN
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NTYPE(JFFAT).EQ.51.OR.NTYPE(JFFAT).EQ.74.OR.
     *            NTYPE(JFFAT).EQ.54) THEN
                  NTYPE(IFFAT)=3
                  GOTO 601
               END IF
               IF(NTYPE(JFFAT).EQ.67)THEN
                  DO M=1,3
                     MBOND=LBOND(M,JFFAT)
                     KFFAT=IPAIR(1,MBOND)+IPAIR(2,MBOND)-JFFAT
                     IF(KFFAT.NE.IFFAT.AND.NINT(ZANF(KFFAT)).NE.8.AND.
     *                  BORDER(MBOND).EQ.ONE) NTYPE(IFFAT)=3
                  ENDDO
               END IF
            ENDDO
         END IF
         IF(NTYPE(IFFAT).EQ.73)THEN
            BTHERE=FOUR
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               BTHERE=BTHERE-BORDER(KBOND)
            ENDDO
            IF(ABS(BTHERE).LT.0.1D-10)
     *         NTYPE(IFFAT)=18
         END IF
         IF(NTYPE(IFFAT).EQ.72.AND.ABS(QMMFF(IFFAT)).LT.0.1D-10)THEN
            MFFAT=0
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NTYPE(JFFAT).EQ.25)THEN
                  LOXY=0
                  DO J=1,LBOND(10,JFFAT)
                     JBOND=LBOND(J,JFFAT)
                     KFFAT=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JFFAT
                     IF(NTYPE(KFFAT).EQ.32)THEN
                        LOXY=LOXY+1
                        MFFAT=KFFAT
                     END IF
                  ENDDO
                  IF(LOXY.EQ.1)THEN
                     QMMFF(IFFAT)=-PT5
                     QMMFF(MFFAT)=-PT5
                  END IF
               END IF
            ENDDO
         END IF
         IF(NTYPE(IFFAT).EQ.7)THEN
            KBOND=LBOND(1,IFFAT)
            JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
            IF(NINT(ZANF(JFFAT)).EQ.16.AND.LBOND(10,JFFAT).EQ.4)THEN
               ICARBON=0
               INTRONG=0
               DO J=1,4
                  JBOND=LBOND(J,JFFAT)
                  KFFAT=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JFFAT
                  IF(NINT(ZANF(KFFAT)).EQ.7.AND.
     *            LBOND(10,KFFAT).EQ.2) INTRONG=INTRONG+1
                  IF(NINT(ZANF(KFFAT)).EQ.6) ICARBON=ICARBON+1
               ENDDO
               IF(ICARBON.EQ.2.AND.INTRONG.EQ.1) THEN
                  NTYPE(IFFAT)=32
                  GOTO 601
               END IF
            END IF
         END IF
         IF(NTYPE(IFFAT).EQ.57)THEN
            I56=0
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NTYPE(JFFAT).EQ.56) I56=I56+1
            ENDDO
            IF(I56.EQ.2)THEN
               DO I=1,3
                  KBOND=LBOND(I,IFFAT)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NTYPE(JFFAT).EQ.56)THEN
                     NTYPE(JFFAT)=55
                     QMMFF(JFFAT)=PT5
                  END IF
               ENDDO
            END IF
         END IF
         IF(NTYPE(IFFAT).EQ.8)THEN
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NTYPE(JFFAT).EQ.25)THEN
                  LOXY=0
                  DO J=1,LBOND(10,JFFAT)
                     JBOND=LBOND(J,JFFAT)
                     KFFAT=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JFFAT
                     IF(NINT(ZANF(KFFAT)).EQ.8.AND.
     *                  LBOND(10,KFFAT).EQ.1) LOXY=LOXY+1
                  ENDDO
                  IF(LOXY.GE.2)THEN
                     NTYPE(IFFAT)=43
                     GOTO 601
                  END IF
               END IF
               IF(NINT(ZANF(JFFAT)).EQ.6)THEN
                  DO K=1,LBOND(10,JFFAT)
                     JBOND=LBOND(K,JFFAT)
                     KFFAT=IPAIR(1,JBOND)+IPAIR(2,JBOND)-JFFAT
                     IF(NTYPE(KFFAT).EQ.51)THEN
                        NTYPE(IFFAT)=10
                        GOTO 601
                     END IF
                  ENDDO
               END IF
            ENDDO
         END IF
 601  CONTINUE
      DO IFFAT=1,NFFAT
         IF(NTYPE(IFFAT).EQ.9)THEN
            LCOUNT=2
            BTHERE=THREE
            DO I=1,2
               IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10)
     *         LCOUNT=LCOUNT-1
               BTHERE=BTHERE-BORDER(LBOND(I,IFFAT))
            ENDDO
            IF(LCOUNT.EQ.1)THEN
            DO I=1,2
               IF(BORDER(LBOND(I,IFFAT)).LT.0.1D-10)
     *         BORDER(LBOND(I,IFFAT))=BTHERE
            ENDDO
            END IF
         END IF
         IF(NTYPE(IFFAT).EQ.2)THEN
            LNTRO3=0
            LTPC3 =0
            LNTG  =0
            DO I=1,3
               KBOND=LBOND(I,IFFAT)
               JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
               IF(NINT(ZANF(JFFAT)).EQ.7.AND.LBOND(10,JFFAT).EQ.3)
     *         LNTRO3=LNTRO3+1
               IF(NTYPE(JFFAT).EQ.3) LTPC3=LTPC3+1
               IF(NINT(ZANF(JFFAT)).EQ.7.AND.BORDER(KBOND).EQ.TWO)
     *         LNTG=LNTG+1
            ENDDO
            IF(LNTG.EQ.1) NTYPE(IFFAT)=3
            IF(LNTRO3.EQ.2.AND.LTPC3.EQ.1)THEN
               DO I=1,3
                  KBOND=LBOND(I,IFFAT)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
                  IF(NINT(ZANF(JFFAT)).EQ.7.AND.
     *               LBOND(10,JFFAT).EQ.3     )THEN
                     NTYPE(JFFAT)=55
                     QMMFF(JFFAT)=PT5
                  END IF
               ENDDO
               NTYPE(IFFAT)=57
            END IF
         END IF
      ENDDO
 605  CONTINUE
C
C     -- MORE BOND ORDER
C
      BCOUNT2=ZERO
      ICOUNT=0
 995  CONTINUE
      DO IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.6)THEN
            BTHERE1=FOUR
            LINKC1=0
            JBOND=0
            DO I=1,LBOND(10,IFFAT)
               KBOND=LBOND(I,IFFAT)
               BTHERE1=BTHERE1-BORDER(KBOND)
               IF(BORDER(KBOND).EQ.ZERO) THEN
                  LINKC1=LINKC1+1
                  JBOND=KBOND
               END IF
            ENDDO
            IF(LINKC1.EQ.1.AND.JBOND.NE.0) BORDER(JBOND)=BTHERE1
         END IF
         IF(NINT(ZANF(IFFAT)).EQ.7.AND.LBOND(10,IFFAT).EQ.3)THEN
            LOXYB=0
            LOXY=0
            DO I=1,LBOND(10,IFFAT)
               KBOND=LBOND(I,IFFAT)
               IF(BORDER(KBOND).EQ.TWO) LOXYB=LOXYB+1
            ENDDO
            IF(LOXYB.EQ.0)THEN
               BTHERE=THREE
               LINKN=0
               JBOND=0
               DO I=1,LBOND(10,IFFAT)
                  KBOND=LBOND(I,IFFAT)
                  BTHERE=BTHERE-BORDER(KBOND)
                  IF(BORDER(KBOND).EQ.ZERO) THEN
                     LINKN=LINKN+1
                     JBOND=KBOND
                  END IF
               ENDDO
               IF(LINKN.EQ.1.AND.JBOND.NE.0) BORDER(JBOND)=BTHERE
               IF(LINKN.EQ.2.AND.BTHERE.EQ.TWO) THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     BTHERE=BTHERE-BORDER(KBOND)
                     IF(BORDER(KBOND).EQ.ZERO)  BORDER(KBOND)=ONE
                  ENDDO
               END IF
               IF(LINKN.EQ.3.AND.BTHERE.EQ.THREE)THEN
                  DO I=1,LBOND(10,IFFAT)
                     KBOND=LBOND(I,IFFAT)
                     BTHERE=BTHERE-BORDER(KBOND)
                     IF(BORDER(KBOND).EQ.ZERO)  BORDER(KBOND)=ONE
                  ENDDO
               END IF
            END IF
         END IF
      ENDDO
C
      BCOUNT1=ZERO
      ICOUNT=ICOUNT+1
      DO IBOND=1,NBOND
         BCOUNT1=BCOUNT1+BORDER(IBOND)
      ENDDO
      IF(ABS(BCOUNT1-BCOUNT2).LT.0.1D-10) GOTO 996
      IF(ICOUNT.GT.300) GOTO 996
      BCOUNT2=BCOUNT1
      GOTO 995
 996  CONTINUE
C
C
C     -- MORE NTYPE
      DO IFFAT=1,NFFAT
         IF(NTYPE(IFFAT).EQ.8)THEN
            DO IANGL=1,NANGL
               K1=KLIST(1,IANGL)
               K2=KLIST(2,IANGL)
               K3=KLIST(3,IANGL)
               JBOND=0
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *                            LBOND(10,K2).LT.4.AND.
     *            NINT(ZANF(K3)).EQ.16)THEN
                  DO I=1,LBOND(10,K2)
                     KBOND=LBOND(I,K2)
                     KKK3=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                     IF(BORDER(KBOND).EQ.TWO.AND.KKK3.EQ.K3) JBOND=KBOND
                  ENDDO
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *                            LBOND(10,K2).LT.4.AND.
     *            NINT(ZANF(K1)).EQ.16)THEN
                  DO I=1,LBOND(10,K2)
                     KBOND=LBOND(I,K2)
                     KKK3=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                     IF(BORDER(KBOND).EQ.TWO.AND.KKK3.EQ.K1) JBOND=KBOND
                  ENDDO
               END IF
               IF(JBOND.NE.0) NTYPE(IFFAT)=10
            ENDDO
         END IF
      ENDDO
      DO IFFAT=1,NFFAT
         IF(NTYPE(IFFAT).EQ.40.AND.NUMRIN(10,IFFAT).EQ.1.AND.
     *      LISTRIN(10,NUMRIN(1,IFFAT)).EQ.5.AND.
     *      NRINTYP(NUMRIN(1,IFFAT)).EQ.0)THEN
            DO IANGL=1,NANGL
               K1=KLIST(1,IANGL)
               K2=KLIST(2,IANGL)
               K3=KLIST(3,IANGL)
               JBOND=0
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *                            LBOND(10,K2).LT.4.AND.
     *            NINT(ZANF(K3)).EQ.16)THEN
                  DO I=1,LBOND(10,K2)
                     KBOND=LBOND(I,K2)
                     KKK3=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                     IF(BORDER(KBOND).EQ.TWO.AND.KKK3.EQ.K3) JBOND=KBOND
                  ENDDO
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.6.AND.
     *                            LBOND(10,K2).LT.4.AND.
     *            NINT(ZANF(K1)).EQ.16)THEN
                  DO I=1,LBOND(10,K2)
                     KBOND=LBOND(I,K2)
                     KKK3=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
                     IF(BORDER(KBOND).EQ.TWO.AND.KKK3.EQ.K1) JBOND=KBOND
                  ENDDO
               END IF
               IF(JBOND.NE.0) NTYPE(IFFAT)=10
            ENDDO
         END IF
      ENDDO
C
C
C     -- H NTYPE --
      DO 600 IFFAT=1,NFFAT
         IF(NINT(ZANF(IFFAT)).EQ.1.AND.NTYPE(IFFAT).EQ.0)THEN
            KBOND=LBOND(1,IFFAT)
            IXX =IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
            IF(NTYPE(IXX).EQ.54.OR.
     *         NTYPE(IXX).EQ.55.OR.
     *         NTYPE(IXX).EQ.56.OR.
     *         NTYPE(IXX).EQ.81.OR.
     *         NTYPE(IXX).EQ.58.OR.
     *         NTYPE(IXX).EQ.34    )THEN
               NTYPE(IFFAT)=36
               GOTO 600
            END IF
            IF(NTYPE(IXX).EQ.51) THEN
               NTYPE(IFFAT)=52
               GOTO 600
            END IF
            IF(NTYPE(IXX).EQ.49) THEN
               NTYPE(IFFAT)=50
               GOTO 600
            END IF
            IF(NINT(ZANF(IXX)).EQ.16.OR.
     *         NINT(ZANF(IXX)).EQ.15)THEN
               NTYPE(IFFAT)=71
               GOTO 600
            END IF
            IF(NTYPE(IXX).EQ.43.OR.
     *         NTYPE(IXX).EQ.10.OR.
     *         NTYPE(IXX).EQ.48) THEN
               NTYPE(IFFAT)=28
               GOTO 600
            END IF
            IF(NTYPE(IXX).EQ.8.OR.
     *         NTYPE(IXX).EQ.39.OR.
     *         NTYPE(IXX).EQ.62)THEN
               NTYPE(IFFAT)=23
               GOTO 600
            END IF
            DO IDIHR=1,NDIHR
               L1=LLIST(1,IDIHR)
               L2=LLIST(2,IDIHR)
               L3=LLIST(3,IDIHR)
               L4=LLIST(4,IDIHR)
               IF(L1.EQ.IFFAT.AND.NTYPE(L2).EQ.40.AND.
     *            NINT(ZANF(L3)).EQ.6.AND.NINT(ZANF(L4)).EQ.6.AND.
     *            LBOND(10,L3).LE.3.AND.LBOND(10,L4).LE.3)THEN
                  NTYPE(IFFAT)=28
                  GOTO 600
               END IF
               IF(L4.EQ.IFFAT.AND.NTYPE(L3).EQ.40.AND.
     *            NINT(ZANF(L2)).EQ.6.AND.NINT(ZANF(L1)).EQ.6.AND.
     *            LBOND(10,L2).LE.3.AND.LBOND(10,L1).LE.3)THEN
                  NTYPE(IFFAT)=28
                  GOTO 600
               END IF
               IF(L1.EQ.IFFAT.AND.NINT(ZANF(L2)).EQ.8.AND.
     *            NTYPE(L3).EQ.3.AND.NINT(ZANF(L4)).EQ.8)THEN
                  NTYPE(IFFAT)=24
                  GOTO 600
               END IF
               IF(L4.EQ.IFFAT.AND.NINT(ZANF(L3)).EQ.8.AND.
     *            NTYPE(L2).EQ.3.AND.NINT(ZANF(L1)).EQ.8)THEN
                  NTYPE(IFFAT)=24
                  GOTO 600
               END IF
            ENDDO
            DO IANGL=1,NANGL
               K1=KLIST(1,IANGL)
               K2=KLIST(2,IANGL)
               K3=KLIST(3,IANGL)
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.7.AND.
     *            NINT(ZANF(K3)).EQ.8.)THEN
                  NTYPE(IFFAT)=23
                  GOTO 600
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.7.AND.
     *            NINT(ZANF(K1)).EQ.8.)THEN
                  NTYPE(IFFAT)=23
                  GOTO 600
               END IF
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.8.AND.
     *            NINT(ZANF(K3)).EQ.15)THEN
                  NTYPE(IFFAT)=24
                  GOTO 600
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.8.AND.
     *            NINT(ZANF(K1)).EQ.15)THEN
                  NTYPE(IFFAT)=24
                  GOTO 600
               END IF
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.8.AND.
     *            NINT(ZANF(K3)).EQ.16.)THEN
                  NTYPE(IFFAT)=33
                  GOTO 600
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.8.AND.
     *            NINT(ZANF(K1)).EQ.16.)THEN
                  NTYPE(IFFAT)=33
                  GOTO 600
               END IF
               IF(K1.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.8.AND.
     *            (NTYPE(K3).EQ.37.OR.NTYPE(K3).EQ.2.OR.
     *             NTYPE(K3).EQ.78.OR.NTYPE(K3).EQ.63.OR.
     *             NTYPE(K3).EQ.64.OR.NTYPE(K3).EQ.30))THEN
                  NTYPE(IFFAT)=29
                  GOTO 600
               END IF
               IF(K3.EQ.IFFAT.AND.NINT(ZANF(K2)).EQ.8.AND.
     *             (NTYPE(K1).EQ.37.OR.NTYPE(K1).EQ.2.OR.
     *              NTYPE(K1).EQ.78.OR.NTYPE(K1).EQ.63.OR.
     *              NTYPE(K1).EQ.64.OR.NTYPE(K1).EQ.30))THEN
                  NTYPE(IFFAT)=29
                  GOTO 600
               END IF
            ENDDO
            DO IDIHR=1,NDIHR
               L1=LLIST(1,IDIHR)
               L2=LLIST(2,IDIHR)
               L3=LLIST(3,IDIHR)
               L4=LLIST(4,IDIHR)
               IF(L1.EQ.IFFAT.AND.NINT(ZANF(L2)).EQ.8.AND.
     *            NINT(ZANF(L3)).EQ.6.AND.NINT(ZANF(L4)).EQ.7.AND.
     *            NTYPE(L3).NE.1)THEN
                  NTYPE(IFFAT)=29
                  GOTO 600
               END IF
               IF(L4.EQ.IFFAT.AND.NINT(ZANF(L3)).EQ.8.AND.
     *            NINT(ZANF(L2)).EQ.6.AND.NINT(ZANF(L1)).EQ.7.AND.
     *            NTYPE(L2).NE.1)THEN
                  NTYPE(IFFAT)=29
                  GOTO 600
               END IF
            ENDDO
            IF(NINT(ZANF(IXX)).EQ.6.OR.
     *         NINT(ZANF(IXX)).EQ.14)THEN
               NTYPE(IFFAT)=5
               GOTO 600
            END IF
            IF(NINT(ZANF(IXX)).EQ.8)THEN
               NTYPE(IFFAT)=21
               GOTO 600
            END IF
            IF(NINT(ZANF(IXX)).EQ.7.AND.
     *         LBOND(10, IXX).EQ.2)THEN
               NTYPE(IFFAT)=27
            END IF
            IF(NINT(ZANF(IXX)).EQ.7.AND.
     *         LBOND(10, IXX).EQ.3)THEN
               NTYPE(IFFAT)=28
            END IF
         END IF
 600  CONTINUE
C
C
C     -- MORE NTYPE
      DO IFFAT=1,NFFAT
         IF(NTYPE(IFFAT).EQ.23)THEN
            KBOND=LBOND(1,IFFAT)
            JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-IFFAT
            IF(NTYPE(JFFAT).EQ.43) NTYPE(IFFAT)=28 
         END IF
         IF(NTYPE(IFFAT).EQ.81.AND.
     *      ABS(QMMFF(IFFAT)).LT.0.1D-10) QMMFF(IFFAT)=ONE
         IF(NTYPE(IFFAT).NE.32.AND.
     *      NTYPE(IFFAT).NE.34.AND.
     *      NTYPE(IFFAT).NE.35.AND.
     *      NTYPE(IFFAT).NE.49.AND.
     *      NTYPE(IFFAT).NE.51.AND.
     *      NTYPE(IFFAT).NE.54.AND.
     *      NTYPE(IFFAT).NE.55.AND.
     *      NTYPE(IFFAT).NE.56.AND.
     *      NTYPE(IFFAT).NE.58.AND.
     *      NTYPE(IFFAT).NE.62.AND.
     *      NTYPE(IFFAT).NE.72.AND.
     *      NTYPE(IFFAT).NE.76.AND.
     *      NTYPE(IFFAT).NE.81.AND.
     *      NTYPE(IFFAT).NE.61.AND.
     *      NTYPE(IFFAT).LE.86     ) QMMFF(IFFAT)=ZERO
      ENDDO
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         IF(NRINTYP(IRING).EQ.1.AND.MB.EQ.5)THEN
C           - BETA  POSITION C OR N
            DO M=1,MB
               MBEFO=M-1
               IF(MBEFO.EQ.0) MBEFO=MB
               MBEFO2=MBEFO-1
               IF(MBEFO2.EQ.0) MBEFO2=MB
               MNEXT=M+1
               IF(M.EQ.MB) MNEXT=1
               MNEXT2=MNEXT+1
               IF(MNEXT.EQ.MB) MNEXT2=1
               J     =LISTRIN(M     ,IRING)
               LARMRIN=0
               DO KK=1,NUMRIN(10,J)
                  IF(NRINTYP(NUMRIN(KK,J)).EQ.1.AND.
     *               LISTRIN(10,NUMRIN(KK,J)).EQ.5) 
     *                LARMRIN=LARMRIN+1
               ENDDO
               IF(LARMRIN.NE.2)THEN
               JBEFO =LISTRIN(MBEFO ,IRING)
               JBEFO2=LISTRIN(MBEFO2,IRING)
               JNEXT =LISTRIN(MNEXT ,IRING)
               JNEXT2=LISTRIN(MNEXT2,IRING)
               IF((NTYPE(J).EQ.78.OR.NTYPE(J).EQ.63).AND.
     *            (NINT(ZANF(JBEFO2)).EQ.16.OR.
     *             NINT(ZANF(JBEFO2)).EQ.8 .OR.
     *             NTYPE(JBEFO2).EQ.39  ))
     *             NTYPE(J)=64
               IF((NTYPE(J).EQ.78.OR.NTYPE(J).EQ.63).AND.
     *            (NINT(ZANF(JNEXT2)).EQ.16.OR.
     *             NINT(ZANF(JNEXT2)).EQ.8 .OR.
     *             NTYPE(JNEXT2).EQ.39  ))
     *             NTYPE(J)=64
               IF((NTYPE(J).EQ.79.OR.NTYPE(J).EQ.65).AND.
     *            (NINT(ZANF(JBEFO2)).EQ.16.OR.
     *             NINT(ZANF(JBEFO2)).EQ.8 .OR.
     *             NTYPE(JBEFO2).EQ.39  ))
     *             NTYPE(J)=66
               IF((NTYPE(J).EQ.79.OR.NTYPE(J).EQ.65).AND.
     *            (NINT(ZANF(JNEXT2)).EQ.16.OR.
     *             NINT(ZANF(JNEXT2)).EQ.8 .OR.
     *             NTYPE(JNEXT2).EQ.39  ))
     *             NTYPE(J)=66
               END IF
            ENDDO
C           - ALPHA POSITION C OR N
            DO M=1,MB
               MBEFO=M-1
               IF(MBEFO.EQ.0) MBEFO=MB
               MNEXT=M+1
               IF(M.EQ.MB) MNEXT=1
               J     =LISTRIN(M     ,IRING)
               LARMRIN=0
               DO KK=1,NUMRIN(10,J)
                  IF(NRINTYP(NUMRIN(KK,J)).EQ.1.AND.
     *               LISTRIN(10,NUMRIN(KK,J)).EQ.5) 
     *                LARMRIN=LARMRIN+1
               ENDDO
               IF(LARMRIN.NE.2)THEN
               JBEFO =LISTRIN(MBEFO ,IRING)
               JNEXT =LISTRIN(MNEXT ,IRING)
               IF((NTYPE(J).EQ.78.OR.NTYPE(J).EQ.64).AND.
     *            (NINT(ZANF(JBEFO)).EQ.16.OR.
     *             NINT(ZANF(JBEFO)).EQ.8 .OR.
     *             NTYPE(JBEFO).EQ.39    ) )
     *             NTYPE(J)=63
               IF((NTYPE(J).EQ.78.OR.NTYPE(J).EQ.64).AND.
     *            (NINT(ZANF(JNEXT)).EQ.16.OR.
     *             NINT(ZANF(JNEXT)).EQ.8 .OR.
     *             NTYPE(JNEXT).EQ.39    ) )
     *             NTYPE(J)=63
               IF((NTYPE(J).EQ.79.OR.NTYPE(J).EQ.66).AND.
     *            (NINT(ZANF(JBEFO)).EQ.16.OR.
     *             NINT(ZANF(JBEFO)).EQ.8 .OR.
     *             NTYPE(JBEFO).EQ.39    ) )
     *             NTYPE(J)=65
               IF((NTYPE(J).EQ.79.OR.NTYPE(J).EQ.66).AND.
     *            (NINT(ZANF(JNEXT)).EQ.16.OR.
     *             NINT(ZANF(JNEXT)).EQ.8 .OR.
     *             NTYPE(JNEXT).EQ.39     ) )
     *             NTYPE(J)=65
               END IF
            ENDDO
         END IF
      ENDDO
      DO IRING=1,NRING
         MB=LISTRIN(10,IRING)
         IF(NRINTYP(IRING).EQ.1.AND.MB.EQ.5)THEN
C           - BETA  POSITION C OR N
            DO K=1,MB
               LARMRIN=0
               J=LISTRIN(K     ,IRING)
               DO KK=1,NUMRIN(10,J)
                  IF(NRINTYP(NUMRIN(KK,J)).EQ.1.AND.
     *               LISTRIN(10,NUMRIN(KK,J)).EQ.5)
     *                LARMRIN=LARMRIN+1
               ENDDO
               IF(LARMRIN.EQ.2)THEN
               NTEST1=0
               NTEST2=0
               DO I=1,LBOND(10,J)
                  KBOND=LBOND(I,J)
                  JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-J
                  IF(NTYPE(JFFAT).EQ.59.OR.
     *               NTYPE(JFFAT).EQ.44.OR.
     *               NTYPE(JFFAT).EQ.39 ) NTEST1=NTEST1+1
                  DO II=1,LBOND(10,JFFAT)
                     MBOND=LBOND(II,JFFAT)
                     KFFAT=IPAIR(1,MBOND)+IPAIR(2,MBOND)-JFFAT
                     IF(NTYPE(KFFAT).EQ.59.OR.
     *                  NTYPE(KFFAT).EQ.44.OR.
     *                  NTYPE(KFFAT).EQ.39 ) NTEST2=NTEST2+1
                  ENDDO
               ENDDO
               IF(NTEST1.EQ.2.AND.NTEST2.EQ.0) NTYPE(J)=63
               IF(NTEST1.EQ.0.AND.NTEST2.EQ.2) NTYPE(J)=64
               IF(NTEST1.EQ.2.AND.NTEST2.EQ.2) NTYPE(J)=63
               END IF
            ENDDO
         END IF
      ENDDO
C
C     -- FINAL BOND ORDER
C
      DO IBOND=1,NBOND
         IF(BORDER(IBOND).EQ.ZERO) THEN
            IFFAT = IPAIR(1,IBOND)
            BNDCNT=ZERO
            DO I=1,LBOND(10,IFFAT)
               BNDADD = ZERO
               IF(LBOND(I,IFFAT).NE.IBOND) BNDADD = ONE
               BNDADD = MAX(BNDADD,BORDER(LBOND(I,IFFAT)))
               BNDCNT = BNDCNT+BNDADD
            ENDDO
            NBMAX = 1
            IF(NINT(ZANF(IFFAT)).EQ. 1) NBMAX = 1
            IF(NINT(ZANF(IFFAT)).EQ. 6) NBMAX = 4
            IF(NINT(ZANF(IFFAT)).EQ. 7) NBMAX = 3
            IF(NINT(ZANF(IFFAT)).EQ. 8) NBMAX = 2
            IF(NINT(ZANF(IFFAT)).EQ. 9) NBMAX = 1
            IF(NINT(ZANF(IFFAT)).EQ.14) NBMAX = 4
            IF(NINT(ZANF(IFFAT)).EQ.15) NBMAX = 3
            IF(NINT(ZANF(IFFAT)).EQ.16) NBMAX = 2
            IF(NINT(ZANF(IFFAT)).EQ.17) NBMAX = 1
            BMISS1 = DBLE(NBMAX) - BNDCNT
            IFFAT = IPAIR(2,IBOND)
            BNDCNT=ZERO
            DO I=1,LBOND(10,IFFAT)
               BNDADD = ZERO
               IF(LBOND(I,IFFAT).NE.IBOND) BNDADD = ONE
               BNDADD = MAX(BNDADD,BORDER(LBOND(I,IFFAT)))
               BNDCNT = BNDCNT+BNDADD
            ENDDO
            NBMAX = 1
            IF(NINT(ZANF(IFFAT)).EQ. 1) NBMAX = 1
            IF(NINT(ZANF(IFFAT)).EQ. 6) NBMAX = 4
            IF(NINT(ZANF(IFFAT)).EQ. 7) NBMAX = 3
            IF(NINT(ZANF(IFFAT)).EQ. 8) NBMAX = 2
            IF(NINT(ZANF(IFFAT)).EQ. 9) NBMAX = 1
            IF(NINT(ZANF(IFFAT)).EQ.14) NBMAX = 4
            IF(NINT(ZANF(IFFAT)).EQ.15) NBMAX = 3
            IF(NINT(ZANF(IFFAT)).EQ.16) NBMAX = 2
            IF(NINT(ZANF(IFFAT)).EQ.17) NBMAX = 1
            BMISS2 = DBLE(NBMAX) - BNDCNT
            IF(BMISS1.GT.ZERO.AND.BMISS2.GT.ZERO) THEN
               BORDER(IBOND) = (BMISS1 + BMISS2)*PT5
            END IF
         END IF
      ENDDO
C
C
C     -- ALL DONE AND PRINT
      IF(MASWRK) THEN
         WRITE(IW,'(/A)') '     ATOM    TYPE     FORMAL Q'
         DO IFFAT=1,NFFAT
            WRITE(IW,'(1X,I8,1X,I7,4X,F9.6)')
     *      IFFAT,NTYPE(IFFAT),QMMFF(IFFAT)
         ENDDO
         WRITE(IW,*) ' '
C
         WRITE(IW,'(A,I6,A,A)')' THERE ARE ',NRING,' RINGS.',
     *                       ' TYPE=1 IS AROMATIC.'
         IF(NRING.GT.0)
     *   WRITE(IW,'(A,A)')'    RING    TYPE     ATOM1   ATOM2',
     *         '   ATOM3   ATOM4   ATOM5   ATOM6   ATOM7   ATOM8'
         DO IRING=1,NRING
            WRITE(IW,'(2(1X,I7),A,8(1X,I7))')
     *      IRING,NRINTYP(IRING),'  ',(LISTRIN(J,IRING),J=1,8)
         ENDDO
C
         DO IFFAT=1,NFFAT
            IF(NTYPE(IFFAT).EQ.0)THEN
               WRITE(IW,*) '****************************************'
               WRITE(IW,'(A,I8)')
     *                    ' ERROR: MMFF94 NTYPE=0 FOR ATOM ',IFFAT
               WRITE(IW,*) '****************************************'
            END IF
            IF(NINT(ZANF(IFFAT)).EQ.6.AND.NTYPE(IFFAT).NE.57)THEN
               BNDCNT=ZERO
               DO I=1,LBOND(10,IFFAT)
                  BNDCNT=BNDCNT+BORDER(LBOND(I,IFFAT))
               ENDDO
               IF(ABS(BNDCNT-4.0D+00).GT.0.1D-10)THEN
               WRITE(IW,*) '*****************************************'
               WRITE(IW,'(A,I8,A)')
     *                   ' ERROR: ATOM ',IFFAT,' HAS WRONG BOND ORDER'
               WRITE(IW,*) '*****************************************'
               END IF
            END IF
         ENDDO
         WRITE(IW,*) ' '
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK MMFFPAR
!>                    
!> @brief    read MMFF94 parameter files
!>
!> @author   Hongbo Zhu and Hui Li
!>           - Feb 2013
!>          
!> @details  read MMFF94 parameter files
!>
      SUBROUTINE MMFFPAR(MXMMTP,ATMNAM,CORD,ZANF,ZMAS,CHARG,POL,
     *                   SIG,EPS,SIG2,EPS2,IPAIR,
     *                   KLIST,LLIST,MLIST,KBLST,
     *                   FCBOND,BOND0,FCANGL,ANGL0,
     *                   FCSTBD,FCWAGG,FCDIHR,
     *                   CLPR,ZLPR,NLPR,
     *                   FCLJTP,NTYPE,QMMFF,
     *                   LBOND,NRINTYP,
     *                   NSBTYP,NBNDTYP,IDATM,IMLTB,IPILP,
     *                   NBNDT,NBNDT2,NANGTYP,
     *                   ITTN,VDWIN,BNDCAG,
     *                   PCHAG,NLCBND,IADTYP,CHARGL,
     *                   NUMRIN,BORDER,LISTRIN,ANGLBC,NTYPMP,NMPCNT,
     *                   ICRD,LINH,IVAL)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
      PARAMETER (ZERO=0.0D+00, PT5=0.50D+00, ONE=1.0D+00)
      PARAMETER (PI=3.14159265358979323846264338D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10  ATMNAM
      CHARACTER*100 WD100
      CHARACTER*60  PARFILE
      CHARACTER*1   ADTYPE
      CHARACTER*27  DEFAULT
      CHARACTER*27  BLANK
C
      DIMENSION ATMNAM(*),CORD(3,*),ZANF(*),ZMAS(*),
     *          CHARG(*),POL(*),SIG(*),EPS(*),SIG2(*),EPS2(*),
     *          BOND0(*),FCBOND(*),ANGL0(*),FCANGL(*),IPAIR(2,*),
     *          CLPR(4,*),ZLPR(4,*),NLPR(*),
     *          KLIST(3,*),LLIST(4,*),MLIST(4,*),
     *          NTYPE(*),QMMFF(*),LBOND(10,*),NRINTYP(*),
     *          FCSTBD(2,*),FCWAGG(*),FCDIHR(3,*),
     *          NSBTYP(*),NBNDTYP(*),IDATM(2,MXMMTP),IMLTB(*),
     *          IPILP(*),
     *          NBNDT(4,*),NBNDT2(4,*),NANGTYP(*),
     *          ITTN(*),VDWIN(4,MXMMTP),BNDCAG(*),
     *          PCHAG(2,*),NLCBND(*),FCLJTP(2,MXMMTP,*),KBLST(2,*),
     *          IADTYP(MXMMTP),CHARGL(*),NUMRIN(10,*),BORDER(*),
     *          LISTRIN(10,*),ANGLBC(2,*),NTYPMP(5,*),NMPCNT(2,*),
     *          ICRD(*),LINH(*),IVAL(*)
C
      DIMENSION XAR(86),BLOMCVLN(54),ERPFTI(2,16)
C
      COMMON /FFMAX / MXFFAT,MXBOND,MXANGL,MXDIHR,MXDIHB,MXCMAP,
     *                MXWAGG
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFTYPE/ WT14LJ,WT14CH,C3BOND,C4BOND,C3ANGL,
     *                NFFTYP,NFFFILE,LJQMMM,INTCHG,
     *                LJSIGMA,JTOPFILE(60),JPARFILE(60),
     *                JTOPAMIA(60),JTOPNTER(60),JTOPCTER(60),
     *                JTOPNUCA(60),JPARFIL2(60),JPARFIL3(60)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     XAR DATA FOUND AT:
C     HTTP://WWW.WEBELEMENTS.COM/PERIODICITY/ELECTRONEG_ALLRED_ROCHOW/
C     HTTP://WWW.CCL.NET/CCA/DATA/MMFF94/
C
      DATA (XAR(NUCZ),NUCZ=1,2)/2.20D+00,5.50D+00/
      DATA (XAR(NUCZ),NUCZ=3,10)
     *  /0.97D+00,1.47D+00,2.01D+00,2.50D+00,
     *   3.07D+00,3.50D+00,4.10D+00,4.84D+00/
      DATA (XAR(NUCZ),NUCZ=11,18)
     *  /1.01D+00,1.23D+00,1.47D+00,1.74D+00,
     *   2.06D+00,2.44D+00,2.83D+00,3.20D+00/
      DATA (XAR(NUCZ),NUCZ=19,36)
     *  /0.91D+00,1.04D+00,
     *   1.30D+00,1.50D+00,1.60D+00,1.60D+00,1.50D+00,
     *   1.80D+00,1.80D+00,1.80D+00,1.90D+00,1.60D+00,
     *   1.82D+00,2.02D+00,2.20D+00,2.48D+00,2.74D+00,2.94D+00/
      DATA (XAR(NUCZ),NUCZ=37,54)
     *  /0.89D+00,0.99D+00,
     *   1.30D+00,1.40D+00,1.60D+00,1.80D+00,1.90D+00,
     *   2.20D+00,2.20D+00,2.20D+00,1.90D+00,1.70D+00,
     *   1.49D+00,1.72D+00,1.82D+00,2.01D+00,2.21D+00,2.40D+00/
      DATA (XAR(NUCZ),NUCZ=55,86)
     *  /0.86D+00,0.97D+00,
     *   1.08D+00,1.08D+00,1.07D+00,1.07D+00,1.07D+00,1.07D+00,1.01D+00,
     *   1.11D+00,1.10D+00,1.10D+00,1.10D+00,1.11D+00,1.11D+00,1.06D+00,
     *   1.14D+00,1.23D+00,1.33D+00,1.40D+00,1.46D+00,
     *   1.52D+00,1.55D+00,1.44D+00,1.42D+00,1.44D+00,
     *   1.44D+00,1.55D+00,1.67D+00,1.76D+00,1.90D+00,2.20D+00/
C
C     COVALENT RADII FOUND AT:
C     HTTP://WWW.CCL.NET/CCA/DATA/MMFF94/
C
      DATA (BLOMCVLN(NUCZ),NUCZ=1,2)/0.33D+00,0.00D+00/
      DATA (BLOMCVLN(NUCZ),NUCZ=3,10)
     *  /1.34D+00,0.90D+00,0.81D+00,0.77D+00,
     *   0.73D+00,0.72D+00,0.74D+00,0.00D+00/
      DATA (BLOMCVLN(NUCZ),NUCZ=11,18)
     *  /1.54D+00,1.30D+00,1.22D+00,1.15D+00,
     *   1.09D+00,1.03D+00,1.01D+00,0.00D+00/
      DATA (BLOMCVLN(NUCZ),NUCZ=19,36)
     *  /1.96D+00,1.74D+00,
     *   1.44D+00,1.36D+00,0.00D+00,0.00D+00,0.00D+00,
     *   0.00D+00,0.00D+00,0.00D+00,1.38D+00,1.31D+00,
     *   1.19D+00,1.20D+00,1.20D+00,1.16D+00,1.15D+00,0.00D+00/
      DATA (BLOMCVLN(NUCZ),NUCZ=37,54)
     *  /2.11D+00,1.92D+00,
     *   1.62D+00,1.48D+00,0.00D+00,0.00D+00,0.00D+00,
     *   0.00D+00,0.00D+00,0.00D+00,1.53D+00,1.48D+00,
     *   1.46D+00,1.40D+00,1.41D+00,1.35D+00,1.33D+00,0.00D+00/
C
C
C     HONGBO ZHU, HUI LI, FEB 25, 2013, LINCOLN
C
      CALL FFWAGG(MLIST,NFFAT,NBOND,NWAGG,IPAIR,CORD)
C
      MAXMAX = MAX(MXWAGG,MAX(MXBOND,MAX(MXANGL,MXDIHR)))
      CALL VCLR (FCBOND  ,1,   NBOND)
      CALL VCLR (BOND0   ,1,   NBOND)
      CALL VCLR (FCSTBD  ,1, 2*NANGL)
      CALL VCLR (FCWAGG  ,1,   NWAGG)
      CALL VCLR (FCDIHR  ,1, 3*NDIHR)
      CALL VICLR(NSBTYP  ,1,   NANGL)
      CALL VICLR(IDATM   ,1, 2*MXMMTP)
      CALL VICLR(IMLTB   ,1,   MXMMTP)
      CALL VICLR(IPILP   ,1,   MXMMTP)
      CALL VICLR(NBNDT   ,1, 4*NFFAT)
      CALL VICLR(NBNDT2  ,1, 4*NFFAT)
      CALL VICLR(NANGTYP ,1,   NANGL)
      CALL VICLR(ITTN    ,1,   NDIHR)
      CALL VCLR (VDWIN   ,1, 4*MXMMTP)
      CALL VCLR (BNDCAG  ,1,   NBOND)
      CALL VCLR (PCHAG   ,1, 2*MXMMTP)
      CALL VCLR (CHARG   ,1,   NFFAT)
      CALL VICLR(NLCBND  ,1,   MAXMAX)
      CALL VICLR(KBLST   ,1, 2*NANGL)
      CALL VCLR (FCLJTP  ,1, 2*MXMMTP*MXMMTP)
      CALL VICLR(IADTYP  ,1,   MXMMTP)
      CALL VCLR (CHARGL  ,1,   NFFAT)
      CALL VICLR(NBNDTYP ,1,   NBOND)
      DO JJJ = 1,27
         BLANK(JJJ:JJJ) = ' '
      ENDDO
C
      CALL VCLR(ERPFTI,1,32)
      ERPFTI(1, 6)=2.00D+00
      ERPFTI(2, 6)=2.12D+00
      ERPFTI(1, 7)=2.00D+00
      ERPFTI(2, 7)=1.50D+00
      ERPFTI(1, 8)=2.00D+00
      ERPFTI(2, 8)=0.20D+00
      ERPFTI(1,14)=1.25D+00
      ERPFTI(2,14)=1.22D+00
      ERPFTI(1,15)=1.25D+00
      ERPFTI(2,15)=2.40D+00
      ERPFTI(1,16)=1.25D+00
      ERPFTI(2,16)=0.49D+00
C
      DO IANGL=1,NANGL
         K1 = KLIST(1,IANGL)
         K2 = KLIST(2,IANGL)
         K3 = KLIST(3,IANGL)
         DO II=1,LBOND(10,K2)
            KBOND=LBOND(II,K2)
            JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
            IF(JFFAT.EQ.K1) KBLST(1,IANGL)=KBOND
            IF(JFFAT.EQ.K3) KBLST(2,IANGL)=KBOND
         ENDDO
      ENDDO
C
      DO J=1,60
         PARFILE(J:J) = CHAR(JPARFILE(J))
      ENDDO
      IF(JPARFILE(60).EQ.0) GOTO 100
      OPEN(12,FILE=PARFILE(1:JPARFILE(60)),STATUS='OLD',ERR=100)
      IF(MASWRK)WRITE(IW,*)' '
      IF(MASWRK)WRITE(IW,*)'QUANPOL SUCCESSFULLY OPENED THE FILE:'
      IF(MASWRK)WRITE(IW,*)"PARFILE='",PARFILE(1:JPARFILE(60)),"'"
      IF(MASWRK)WRITE(IW,*)' '
      GOTO 110
 100  CONTINUE
      IF(MASWRK)WRITE(IW,*)' '
      IF(MASWRK)WRITE(IW,*)'ERROR: QUANPOL CANNOT OPEN THE FILE:'
      IF(MASWRK)WRITE(IW,*)"  PARFILE='",PARFILE(1:JPARFILE(60)),"'"
      IF(MASWRK)WRITE(IW,*)' '
      CALL ABRT
C
C
 110  CONTINUE
C
C
      IF(MASWRK)THEN
         REWIND(12)
 800     CONTINUE
         READ(12,'(A100)',END=820) WD100
C        ASCII CODE: 65-90 = UPPER CASE, 97-122, LOWER CASE
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         IF(WD100(1:21).NE.'*SYMBOL  TYPE   DEFAU') GOTO 800
 810     CONTINUE
         READ(12,'(A100)',END=820) WD100
         DEFAULT=WD100(9:35)
         IF(DEFAULT.EQ.BLANK) GOTO 810
         READ(DEFAULT,*,ERR=820) LEVEL1,LEVEL2,LEVEL3,LEVEL4,LEVEL5
         NTYPMP(5,LEVEL1)=LEVEL1
         NTYPMP(4,LEVEL1)=LEVEL2
         NTYPMP(3,LEVEL1)=LEVEL3
         NTYPMP(2,LEVEL1)=LEVEL4
         NTYPMP(1,LEVEL1)=LEVEL5
         GOTO 810
 820     CONTINUE
      END IF
C
C     
      LLMMTP = 0
      IF(MASWRK)THEN
         REWIND(12)
 200     CONTINUE
         READ(12,'(A100)',END=220) WD100
C        ASCII CODE: 65-90 = UPPER CASE, 97-122, LOWER CASE
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         IF(WD100(1:21).NE.'* ATYPE ASPEC CRD VAL') GOTO 200
 210     CONTINUE
         READ(12,'(A100)',END=220) WD100
         READ(WD100,*,ERR=220) ITYPE,IZANF,ICRDD,IVALD,
     *                         IPILPD,IMLTBD,IAROM,LINHD,ISBMB
         IZANF  = IZANF
         ICRD(ITYPE)   = ICRDD
         IVAL(ITYPE)   = IVALD
         IPILP(ITYPE)  = IPILPD
         IMLTB(ITYPE)  = IMLTBD
         LINH(ITYPE)   = LINHD
         LLMMTP = MAX(LLMMTP,ITYPE)
         IDATM(1,ITYPE)=ISBMB
         IDATM(2,ITYPE)=IAROM
         GOTO 210
 220     CONTINUE
      END IF
      IF(GOPARR) CALL DDI_BCAST(274,'I',LLMMTP,1,MASTER)
      IF(GOPARR) CALL DDI_BCAST(275,'I',IDATM,2*MXMMTP,MASTER)
      IF(GOPARR) CALL DDI_BCAST(276,'I',IPILP,  MXMMTP,MASTER)
      IF(LLMMTP.GT.MXMMTP)THEN
         IF(MASWRK) THEN
            WRITE(IW,*)'ERROR: ITYPE EXCEEDED MXMMTP. INCREASE MXMMTP.'
            WRITE(IW,*)' '
         END IF
         CALL ABRT
      END IF
C
C     -- DETERMINE THE BOND TYPE --
C
      DO 211 IBOND=1,NBOND
         IF(BORDER(IBOND).EQ.ONE)THEN
            J1=IPAIR(1,IBOND)
            J2=IPAIR(2,IBOND)
            IF((IDATM(2,NTYPE(J1)).NE.1 .OR.
     *          IDATM(2,NTYPE(J2)).NE.1).AND.
     *         (IDATM(1,NTYPE(J1)).EQ.1 .AND.
     *          IDATM(1,NTYPE(J2)).EQ.1)     ) THEN
                NBNDTYP(IBOND)=1
                GOTO 211
            END IF
            ICNTRL=0
            IF(IDATM(2,NTYPE(J1)).EQ.1.AND.
     *         IDATM(2,NTYPE(J2)).EQ.1     )THEN
               DO IRING=1,NUMRIN(10,J1)
                  DO JRING=1,NUMRIN(10,J2)
                     IF(NUMRIN(IRING,J1).EQ.NUMRIN(JRING,J2).AND.
     *                  NRINTYP(NUMRIN(IRING,J1)).EQ.1) ICNTRL=1
                  ENDDO
               ENDDO
               IF(ICNTRL.EQ.0)THEN
                  NBNDTYP(IBOND)=1
                  GOTO 211
               END IF
            END IF
         END IF
 211  CONTINUE
C
C
C     -- PRINT BOND ORDER AND TYPE --
C
      IF(MASWRK) THEN
         WRITE(IW,'(/A)')
     *   '    ATOM1    ATOM2     BOND ORDER    BONDTYPE'
         DO IBOND=1,NBOND
            WRITE(IW,'(1X,I8,1X,I8,7X,F8.6,10X,I2)')
     *      IPAIR(1,IBOND),IPAIR(2,IBOND),BORDER(IBOND),NBNDTYP(IBOND)
         ENDDO
         WRITE(IW,*) ' '
         DO IBOND=1,NBOND
            IF(BORDER(IBOND).EQ.ZERO) THEN
            WRITE(IW,'(1X,A,1X,I8,1X,A,1X,I8,1X,A)')
     *      'WARNING: BOND BETWEEN',IPAIR(1,IBOND),'AND',
     *      IPAIR(2,IBOND),'HAS ZERO BOND ORDER.'
            END IF
         ENDDO
         WRITE(IW,*) ' '
      END IF
C
C
C
      ANGLBC(1, 1) = 1.395D+00
      ANGLBC(2, 1) = ZERO
      ANGLBC(1, 5) = ZERO
      ANGLBC(2, 5) = 0.704D+00
      ANGLBC(1, 6) = 2.494D+00
      ANGLBC(2, 6) = 1.016D+00
      ANGLBC(1, 7) = 2.711D+00
      ANGLBC(2, 7) = 1.113D+00
      ANGLBC(1, 8) = 3.045D+00
      ANGLBC(2, 8) = 1.337D+00
      ANGLBC(1, 9) = 2.847D+00
      ANGLBC(2, 9) = ZERO
      ANGLBC(1,14) = 2.350D+00
      ANGLBC(2,14) = 0.811D+00
      ANGLBC(1,15) = 2.350D+00
      ANGLBC(2,15) = 1.068D+00
      ANGLBC(1,16) = 2.980D+00
      ANGLBC(2,16) = 1.249D+00
      ANGLBC(1,17) = 2.909D+00
      ANGLBC(2,17) = 1.078D+00
      ANGLBC(1,35) = 3.017D+00
      ANGLBC(2,35) = ZERO
      ANGLBC(1,33) = ZERO
      ANGLBC(2,33) = 0.825D+00
      ANGLBC(1,53) = 3.086D+00
      ANGLBC(2,53) = ZERO
      DO IANGL=1,NANGL 
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL)
         NTYP12=NBNDTYP(KBLST(1,IANGL))
         NTYP23=NBNDTYP(KBLST(2,IANGL))
         LCOUNT=0
         LCOUNT2=0
         IF(NUMRIN(10,K1).GE.1.AND.
     *      NUMRIN(10,K2).GE.1.AND.
     *      NUMRIN(10,K3).GE.1     )THEN
            DO L1=1,NUMRIN(10,K1)
               DO L2=1,NUMRIN(10,K2)
                  DO L3=1,NUMRIN(10,K3)
                     IF(NUMRIN(L3,K3).EQ.NUMRIN(L2,K2).AND.
     *                  NUMRIN(L3,K3).EQ.NUMRIN(L1,K1)     )THEN
                        LCOUNT=NUMRIN(L3,K3)
                        IF(LCOUNT2.NE.0)THEN
                           IF(LISTRIN(10,LCOUNT ).GT.
     *                        LISTRIN(10,LCOUNT2).AND.
     *                        LISTRIN(10,LCOUNT2).LE.4) LCOUNT=LCOUNT2
                        END IF
                        LCOUNT2=LCOUNT
                     END IF
                  ENDDO
               ENDDO
            ENDDO
         END IF
         LTEMPRIN=0
         IF(LISTRIN(10,LCOUNT).GT.4.OR.LCOUNT.EQ.0)THEN
            DO JANGL=1,NANGL
               KK1=KLIST(1,JANGL)
               KK2=KLIST(2,JANGL)
               KK3=KLIST(3,JANGL)
               IF(KK1.EQ.K1.AND.KK3.EQ.K3.AND.KK2.NE.K2)THEN
                  LTEMPRIN=4
               END IF
            ENDDO
         END IF
         IF(LISTRIN(10,LCOUNT).GT.4) LCOUNT=0
         IF(LCOUNT.EQ.0.OR.LCOUNT.EQ.999) NANGTYP(IANGL)=NTYP12+NTYP23
         IF(LCOUNT.NE.0.AND.LISTRIN(10,LCOUNT).EQ.4.AND.
     *      NTYP12.EQ.0.AND.NTYP23.EQ.0     ) NANGTYP(IANGL)=4
         IF(LCOUNT.EQ.0.AND.LTEMPRIN.EQ.4.AND.
     *      NTYP12.EQ.0.AND.NTYP23.EQ.0     ) NANGTYP(IANGL)=4
         IF(LCOUNT.NE.0.AND.LISTRIN(10,LCOUNT).EQ.3.AND.
     *      NTYP12.EQ.0.AND.NTYP23.EQ.0     ) NANGTYP(IANGL)=3
         IF(LCOUNT.NE.0.AND.LISTRIN(10,LCOUNT).EQ.4.AND.
     *      NANGTYP(IANGL).NE.4) NANGTYP(IANGL)=6+NTYP12+NTYP23
         IF(LCOUNT.EQ.0.AND.LTEMPRIN.EQ.4.AND.
     *      NANGTYP(IANGL).NE.4) NANGTYP(IANGL)=6+NTYP12+NTYP23
         IF(LCOUNT.NE.999.AND.LISTRIN(10,LCOUNT).EQ.3.AND.
     *      NANGTYP(IANGL).NE.3) NANGTYP(IANGL)=4+NTYP12+NTYP23
         
      ENDDO
      DO IANGL=1,NANGL
         NTYPIJ=NBNDTYP(KBLST(1,IANGL))
         NTYPJK=NBNDTYP(KBLST(2,IANGL))
                                                 NSBTYP(IANGL)=0
         IF(NANGTYP(IANGL).EQ.0.AND.NTYPIJ.EQ.0.AND.NTYPJK.EQ.0)
     *                                           NSBTYP(IANGL)=0
         IF(NANGTYP(IANGL).EQ.1.AND.NTYPIJ.EQ.1.AND.NTYPJK.EQ.0)
     *                                           NSBTYP(IANGL)=1
         IF(NANGTYP(IANGL).EQ.1.AND.NTYPIJ.EQ.0.AND.NTYPJK.EQ.1)
     *                                           NSBTYP(IANGL)=2
         IF(NANGTYP(IANGL).EQ.2.AND.NTYPIJ.EQ.1.AND.NTYPJK.EQ.1)
     *                                           NSBTYP(IANGL)=3
         IF(NANGTYP(IANGL).EQ.4.AND.NTYPIJ.EQ.0.AND.NTYPJK.EQ.0)
     *                                           NSBTYP(IANGL)=4
         IF(NANGTYP(IANGL).EQ.3.AND.NTYPIJ.EQ.0.AND.NTYPJK.EQ.0)
     *                                           NSBTYP(IANGL)=5
         IF(NANGTYP(IANGL).EQ.5.AND.NTYPIJ.EQ.1.AND.NTYPJK.EQ.0)
     *                                           NSBTYP(IANGL)=6
         IF(NANGTYP(IANGL).EQ.5.AND.NTYPIJ.EQ.0.AND.NTYPJK.EQ.1)
     *                                           NSBTYP(IANGL)=7
         IF(NANGTYP(IANGL).EQ.6.AND.NTYPIJ.EQ.1.AND.NTYPJK.EQ.1)
     *                                           NSBTYP(IANGL)=8
         IF(NANGTYP(IANGL).EQ.7.AND.NTYPIJ.EQ.1.AND.NTYPJK.EQ.0)
     *                                           NSBTYP(IANGL)=9
         IF(NANGTYP(IANGL).EQ.7.AND.NTYPIJ.EQ.0.AND.NTYPJK.EQ.1)
     *                                           NSBTYP(IANGL)=10
         IF(NANGTYP(IANGL).EQ.8.AND.NTYPIJ.EQ.1.AND.NTYPJK.EQ.1)
     *                                           NSBTYP(IANGL)=11
         IF(NTYPE(KLIST(1,IANGL)).EQ.NTYPE(KLIST(3,IANGL)))THEN
            IF(NSBTYP(IANGL).EQ. 2) NSBTYP(IANGL) = 1
            IF(NSBTYP(IANGL).EQ. 7) NSBTYP(IANGL) = 6
            IF(NSBTYP(IANGL).EQ.10) NSBTYP(IANGL) = 9
         END IF
         IF(NTYPE(KLIST(1,IANGL)).GT.NTYPE(KLIST(3,IANGL)))THEN
            IF     (NSBTYP(IANGL).EQ. 1) THEN
               NSBTYP(IANGL) = 2
            ELSE IF(NSBTYP(IANGL).EQ. 2) THEN
               NSBTYP(IANGL) = 1
            ELSE IF(NSBTYP(IANGL).EQ. 6) THEN
               NSBTYP(IANGL) = 7
            ELSE IF(NSBTYP(IANGL).EQ. 7) THEN
               NSBTYP(IANGL) = 6
            ELSE IF(NSBTYP(IANGL).EQ. 9) THEN
               NSBTYP(IANGL) = 10
            ELSE IF(NSBTYP(IANGL).EQ.10) THEN
               NSBTYP(IANGL) = 9
            END IF
         END IF
      ENDDO
C
      DO 340 IDIHR=1,NDIHR
         L1=LLIST(1,IDIHR)
         L2=LLIST(2,IDIHR)
         L3=LLIST(3,IDIHR)
         L4=LLIST(4,IDIHR)
         LCOUNT=0
         LCOUNT2=0
         IF(NUMRIN(10,L1).GE.1.AND.
     *      NUMRIN(10,L2).GE.1.AND.
     *      NUMRIN(10,L3).GE.1.AND.
     *      NUMRIN(10,L4).GE.1     )THEN
            DO K1=1,NUMRIN(10,L1)
               DO K2=1,NUMRIN(10,L2)
                  DO K3=1,NUMRIN(10,L3)
                     DO K4=1,NUMRIN(10,L4)
                        IF(NUMRIN(K4,L4).EQ.NUMRIN(K2,L2).AND.
     *                     NUMRIN(K4,L4).EQ.NUMRIN(K1,L1).AND.
     *                     NUMRIN(K4,L4).EQ.NUMRIN(K3,L3)     )THEN
                           LCOUNT=NUMRIN(K4,L4)
                           IF(LCOUNT2.NE.0)THEN
                              IF(LISTRIN(10,LCOUNT ).GT.
     *                           LISTRIN(10,LCOUNT2).AND.
     *                           LISTRIN(10,LCOUNT2).GE.4)
     *                           LCOUNT=LCOUNT2
                           END IF
                           LCOUNT2=LCOUNT
                        END IF
                     ENDDO
                  ENDDO
               ENDDO
            ENDDO
         END IF
         IF(LISTRIN(10,LCOUNT).GT.5) LCOUNT=0
         IF(LISTRIN(10,LCOUNT).EQ.5.AND.LCOUNT.NE.0) THEN
            IF(NTYPE(L1).EQ.1.OR.NTYPE(L2).EQ.1.OR.
     *         NTYPE(L3).EQ.1.OR.NTYPE(L4).EQ.1) ITTN(IDIHR)=5
         END IF
         NTYP23=0
         NTYP12=0
         NTYP34=0
         DO JJ=1,LBOND(10,L2)
            KBOND=LBOND(JJ,L2)
            J3=IPAIR(1,KBOND)+IPAIR(2,KBOND)-L2
            IF(J3.EQ.L3)THEN
               NTYP23=NBNDTYP(KBOND)
            END IF
            IF(J3.EQ.L1)THEN
               NTYP12=NBNDTYP(KBOND)
            END IF
         ENDDO
         DO JJ=1,LBOND(10,L4)
            KBOND=LBOND(JJ,L4)
            J3=IPAIR(1,KBOND)+IPAIR(2,KBOND)-L4
            IF(J3.EQ.L3)THEN
               NTYP34=NBNDTYP(KBOND)
            END IF
         ENDDO
         IF(NTYP23.EQ.0) THEN
           IF((NTYP12.EQ.1.AND.NTYP34.EQ.0).OR.
     *        (NTYP12.EQ.0.AND.NTYP34.EQ.1)    ) THEN
               IF(NTYPE(L2).EQ.55.AND.NTYPE(L3).EQ.57)THEN
                  LHRDY=0
                  DO JJ=1,3
                     KBOND=LBOND(JJ,L2)
                     JJX=IPAIR(1,KBOND)+IPAIR(2,KBOND)-L2
                     IF(NINT(ZANF(JJX)).EQ.1) LHRDY=LHRDY+1
                  ENDDO
                  IF(LHRDY.EQ.2) ITTN(IDIHR)=2
               ELSE IF(NTYPE(L3).EQ.55.AND.NTYPE(L2).EQ.57)THEN
                  LHRDY=0
                  DO JJ=1,3
                     KBOND=LBOND(JJ,L3)
                     JJX=IPAIR(1,KBOND)+IPAIR(2,KBOND)-L3
                     IF(NINT(ZANF(JJX)).EQ.1) LHRDY=LHRDY+1
                  ENDDO
                  IF(LHRDY.EQ.2) ITTN(IDIHR)=2
               ELSE
               IF(NTYP12.EQ.1.AND.NTYP34.EQ.0.AND.NTYPE(L1).NE.57)
     *         ITTN(IDIHR)=2
               IF(NTYP12.EQ.0.AND.NTYP34.EQ.1.AND.NTYPE(L4).NE.57)
     *         ITTN(IDIHR)=2
               END IF
           END IF
         END IF
         LCOUNT=0
         LCOUNT2=0
         IF(NUMRIN(10,L1).GE.1.AND.
     *      NUMRIN(10,L2).GE.1.AND.
     *      NUMRIN(10,L3).GE.1.AND.
     *      NUMRIN(10,L4).GE.1     )THEN
            DO K1=1,NUMRIN(10,L1)
               DO K2=1,NUMRIN(10,L2)
                  DO K3=1,NUMRIN(10,L3)
                     DO K4=1,NUMRIN(10,L4)
                        IF(NUMRIN(K4,L4).EQ.NUMRIN(K2,L2).AND.
     *                     NUMRIN(K4,L4).EQ.NUMRIN(K1,L1).AND.
     *                     NUMRIN(K4,L4).EQ.NUMRIN(K3,L3)     )THEN
                           LCOUNT=NUMRIN(K4,L4)
                           IF(LCOUNT2.NE.0)THEN
                              IF(LISTRIN(10,LCOUNT ).GT.
     *                           LISTRIN(10,LCOUNT2).AND.
     *                           LISTRIN(10,LCOUNT2).GE.4)
     *                           LCOUNT=LCOUNT2
                           END IF
                           LCOUNT2=LCOUNT
                        END IF
                     ENDDO
                  ENDDO
               ENDDO
            ENDDO
         END IF
         IF(LISTRIN(10,LCOUNT).GT.5) LCOUNT=0
         IF(LISTRIN(10,LCOUNT).EQ.4.AND.LCOUNT.NE.0) ITTN(IDIHR)=4
         NTYP23=0
         NTYP12=0
         NTYP34=0
         DO JJ=1,LBOND(10,L2)
            KBOND=LBOND(JJ,L2)
            J3=IPAIR(1,KBOND)+IPAIR(2,KBOND)-L2
            IF(J3.EQ.L3)THEN
               NTYP23=NBNDTYP(KBOND)
            END IF
            IF(J3.EQ.L1)THEN
               NTYP12=NBNDTYP(KBOND)
            END IF
         ENDDO
         DO JJ=1,LBOND(10,L4)
            KBOND=LBOND(JJ,L4)
            J3=IPAIR(1,KBOND)+IPAIR(2,KBOND)-L4
            IF(J3.EQ.L3)THEN
               NTYP34=NBNDTYP(KBOND)
            END IF
         ENDDO
         IF(NTYP23.EQ.1) ITTN(IDIHR)=1
 340  CONTINUE
      IF(MASWRK) THEN
         WRITE(IW,*)
     *   '   ATOM1    ATOM2    ATOM3    ATOM4     ITTN'
         DO IDIHR=1,NDIHR
            L1=LLIST(1,IDIHR)
            L2=LLIST(2,IDIHR)
            L3=LLIST(3,IDIHR)
            L4=LLIST(4,IDIHR)
            WRITE(IW,'(1X,I8,1X,I8,1X,I8,1X,I8,1X,I8)')
     *      L1,L2,L3,L4,ITTN(IDIHR)
         ENDDO
         WRITE(IW,*)' '
      END IF
      DO IANGL=1,NANGL
         K1 = KLIST(1,IANGL)
         K2 = KLIST(2,IANGL)
         K3 = KLIST(3,IANGL)
         DO II=1,LBOND(10,K2)
            KBOND=LBOND(II,K2)
            JFFAT=IPAIR(1,KBOND)+IPAIR(2,KBOND)-K2
            IF(JFFAT.EQ.K1) KBLST(1,IANGL)=KBOND
            IF(JFFAT.EQ.K3) KBLST(2,IANGL)=KBOND
         ENDDO
      ENDDO
C
C     --BOND STRETCHING
C
      IF(MASWRK) THEN
         REWIND(12)
 400     CONTINUE
         READ(12,'(A100)',END=420) WD100
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         IF(WD100(1:21).NE.'*   TYPES       KB   ') GOTO 400
 410     CONTINUE
         READ(12,'(A100)',END=420) WD100
         READ(WD100,*,ERR=420) IBTIJ,ITYPE,JTYPE,CNSTKB,RAD0
         DO 411 IBOND=1,NBOND
            J1=IPAIR(1,IBOND)
            J2=IPAIR(2,IBOND)
            IF(NTYPE(J1).EQ.ITYPE.AND.NTYPE(J2).EQ.JTYPE.AND.
     *         IBTIJ.EQ.NBNDTYP(IBOND))THEN
               FCBOND(IBOND)=CNSTKB*71.96625D+00*TOANGS*TOANGS*TOHART
               BOND0 (IBOND)=RAD0*TOBOHR
               GOTO 411
            END IF
            IF(NTYPE(J2).EQ.ITYPE.AND.NTYPE(J1).EQ.JTYPE.AND.
     *         IBTIJ.EQ.NBNDTYP(IBOND))THEN
               FCBOND(IBOND)=CNSTKB*71.96625D+00*TOANGS*TOANGS*TOHART
               BOND0 (IBOND)=RAD0*TOBOHR
               GOTO 411
            END IF
 411     CONTINUE
         GOTO 410
 420     CONTINUE
C
         LCOUNT1=0
         DO IBOND=1,NBOND
            IF(FCBOND(IBOND).EQ.ZERO.AND.BOND0(IBOND).EQ.ZERO)
     *         LCOUNT1=LCOUNT1+1
         ENDDO
         IF(LCOUNT1.EQ.0)THEN
            GOTO 450
         ELSE
            GOTO 421
         END IF
 421     CONTINUE
C
         REWIND(12)
 430     CONTINUE
         READ(12,'(A100)',END=450) WD100
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         IF(WD100(1:21).NE.'*   SPECIES R0(REF) K') GOTO 430
 440     CONTINUE
         READ(12,'(A100)',END=450) WD100
         READ(WD100,*,ERR=450) IATM,JATM,RAD0,CNSTKB
         DO 441 IBOND=1,NBOND
            J1=IPAIR(1,IBOND)
            J2=IPAIR(2,IBOND)
            NUCJ1=NINT(ZANF(J1))
            NUCJ2=NINT(ZANF(J2))
            IF(FCBOND(IBOND).EQ.ZERO.AND.BOND0(IBOND).EQ.ZERO.AND.
     *         ((NUCJ1.EQ.IATM.AND.NUCJ2.EQ.JATM).OR.
     *          (NUCJ2.EQ.IATM.AND.NUCJ1.EQ.JATM)       )) THEN
               NBOIJ   =NINT(BORDER(IBOND))
               IF(IMLTB(NTYPE(J1)).EQ.1.AND.IMLTB(NTYPE(J2)).EQ.1)
     *         NBOIJ   =4
               IF(IMLTB(NTYPE(J1)).EQ.1.AND.IMLTB(NTYPE(J2)).EQ.2)
     *         NBOIJ   =5
               IF(IMLTB(NTYPE(J1)).EQ.2.AND.IMLTB(NTYPE(J2)).EQ.1)
     *         NBOIJ   =5
               ICNTRL  =0
               IF(IDATM(2,NTYPE(J1)).EQ.1.AND.
     *            IDATM(2,NTYPE(J2)).EQ.1     )THEN
                  DO IRING=1,NUMRIN(10,J1)
                     DO JRING=1,NUMRIN(10,J2)
                        IF(NUMRIN(IRING,J1).EQ.NUMRIN(JRING,J2).AND.
     *                  NRINTYP(NUMRIN(IRING,J1)).EQ.1) ICNTRL=1
                     ENDDO
                  ENDDO
                  IF(ICNTRL.NE.0)THEN
                    IF(IPILP(NTYPE(J1)).EQ.0.AND.
     *                 IPILP(NTYPE(J2)).EQ.0)THEN
                       NBOIJ   =4
                    ELSE
                       NBOIJ   =5
                    END IF
                  END IF
               END IF
               NHYBI   = 3
               NHYBJ   = 3
               IF(IMLTB(NTYPE(J1)).EQ.1.OR.IMLTB(NTYPE(J1)).EQ.2)
     *         NHYBI   = 2
               IF(IMLTB(NTYPE(J1)).EQ.3)
     *         NHYBI   = 1
               IF(IMLTB(NTYPE(J2)).EQ.1.OR.IMLTB(NTYPE(J2)).EQ.2)
     *         NHYBJ   = 2
               IF(IMLTB(NTYPE(J2)).EQ.3)
     *         NHYBJ   = 1
               R0I    = BLOMCVLN(NUCJ1)  !SINGLE BOND COVALENT RADIUS
               R0J    = BLOMCVLN(NUCJ2)  !SINGLE BOND COVALENT RADIUS
               IF(NBOIJ.EQ.5) THEN
                  R0I = R0I - 0.040D+00
                  R0J = R0J - 0.040D+00
               END IF
               IF(NBOIJ.EQ.4) THEN
                  R0I = R0I - 0.075D+00
                  R0J = R0J - 0.075D+00
               END IF
               IF(NBOIJ.EQ.3) THEN
                  R0I = R0I - 0.170D+00
                  R0J = R0J - 0.170D+00
               END IF
               IF(NBOIJ.EQ.2) THEN
                  R0I = R0I - 0.100D+00
                  R0J = R0J - 0.100D+00
               END IF
               IF(NBOIJ.EQ.1) THEN
C                 HUI LI: THE REDUCTION TERM SEEMS TO BE ZERO
C                 IF(NHYBI.EQ.1.AND.NUCJ1.GT.1) R0I=R0I-0.08D+00
C                 IF(NHYBI.EQ.2.AND.NUCJ1.GT.1) R0I=R0I-0.03D+00
C                 IF(NHYBJ.EQ.1.AND.NUCJ2.GT.1) R0J=R0J-0.08D+00
C                 IF(NHYBJ.EQ.2.AND.NUCJ2.GT.1) R0J=R0J-0.03D+00
                  IF(NHYBI.EQ.1.AND.NUCJ1.GT.1) R0I=R0I
                  IF(NHYBI.EQ.2.AND.NUCJ1.GT.1) R0I=R0I
                  IF(NHYBJ.EQ.1.AND.NUCJ2.GT.1) R0J=R0J
                  IF(NHYBJ.EQ.2.AND.NUCJ2.GT.1) R0J=R0J
               END IF
               XARI   = XAR(NUCJ1)
               XARJ   = XAR(NUCJ2)
               CCC    = 0.085D+00
               IF(NUCJ1.EQ.1.OR.NUCJ2.EQ.1) CCC = 0.050D+00
               DELTA  = 0.000D+00   !  HUI LI: DELTA SEEMS TO BE ZERO
C              -- EQ (18) IN JCC, 1996, 17, 616-641
               R0IJ   = R0I+R0J-CCC*(ABS(XARI-XARJ))**1.4D+00-DELTA
               R0REF  = RAD0
               CNSTKB = CNSTKB*(R0REF/R0IJ)**6
               FCBOND(IBOND)=CNSTKB*71.96625D+00*TOANGS*TOANGS*TOHART
               BOND0 (IBOND)=R0IJ*TOBOHR
               GOTO 441
            END IF
 441     CONTINUE
         GOTO 440
 450     CONTINUE
      END IF
      IF(GOPARR) CALL DDI_BCAST(276,'F',FCBOND,NBOND,MASTER)
      IF(GOPARR) CALL DDI_BCAST(277,'F',BOND0 ,NBOND,MASTER)
C
C     --ANGLE BENDING
C
      IF(MASWRK) THEN
         REWIND(12)
         CALL VICLR(NMPCNT,1,2*MAXMAX)
         DO IANGL=1,NANGL 
            DO I=1,2
               NMPCNT(I,IANGL)=1
            ENDDO
         ENDDO
 460     CONTINUE
         READ(12,'(A100)',END=480) WD100
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         IF(WD100(1:21).NE.'*    ATOM TYPES      ') GOTO 460
 470     CONTINUE
         READ(12,'(A100)',END=480) WD100
         READ(WD100,*,ERR=480) IATYP,ITYP,JTYP,KTYP,CNSTKB,THETA0
         DO IANGL=1,NANGL
            JJXX=1
            K1=KLIST(1,IANGL)
            K2=KLIST(2,IANGL)
            K3=KLIST(3,IANGL)
            JCOUNT=NMPCNT(1,IANGL)
            IF(NANGTYP(IANGL).EQ.IATYP.AND.NTYPE(K2).EQ.JTYP)THEN
               DO JJ=JCOUNT,5
                     IF(NTYPMP(JJ,NTYPE(K1)).EQ.ITYP.AND.
     *                  NTYPMP(JJ,NTYPE(K3)).EQ.KTYP     )THEN
                        FCANGL(IANGL)=
     *                  CNSTKB*2.1922D-02*TOHART*DEGREE*DEGREE
                        ANGL0 (IANGL)=THETA0*TORAD
                        IF(JJ.GT.JJXX) JJXX=JJ
                     END IF
                     IF(NTYPMP(JJ,NTYPE(K1)).EQ.KTYP.AND.
     *                  NTYPMP(JJ,NTYPE(K3)).EQ.ITYP)THEN
                        FCANGL(IANGL)=
     *                  CNSTKB*2.1922D-02*TOHART*DEGREE*DEGREE
                        ANGL0 (IANGL)=THETA0*TORAD
                        IF(JJ.GT.JJXX) JJXX=JJ
                     END IF
               ENDDO
               IF(JJXX.GT.NMPCNT(1,IANGL)) NMPCNT(1,IANGL)=JJXX
            END IF
         ENDDO
         GOTO 470
 480     CONTINUE
      END IF
      DO IANGL=1,NANGL
         IF(FCANGL(IANGL).LT.0.1D-10.AND.ANGL0(IANGL).GT.0.1D-10)THEN
            K1=KLIST(1,IANGL)
            K2=KLIST(2,IANGL)
            K3=KLIST(3,IANGL)
            J1=NINT(ZANF(K1))
            J2=NINT(ZANF(K2))
            J3=NINT(ZANF(K3))
            B12=BOND0(KBLST(1,IANGL))*TOANGS
            B23=BOND0(KBLST(2,IANGL))*TOANGS
            SUMB=B12+B23
            DIFB=B12-B23
            DDD=(DIFB*DIFB)/(SUMB*SUMB)
            IF(NANGTYP(IANGL).EQ.3.OR.NANGTYP(IANGL).EQ.5.OR.
     *         NANGTYP(IANGL).EQ.6)THEN
               CNSTKB=8.75D-02*ANGLBC(1,J1)*ANGLBC(2,J2)*ANGLBC(1,J3)/
     *                SUMB/(ANGL0(IANGL)*ANGL0(IANGL))*EXP(-2*DDD)
            END IF
            IF(NANGTYP(IANGL).EQ.4.OR.NANGTYP(IANGL).EQ.7.OR.
     *         NANGTYP(IANGL).EQ.8)THEN
               CNSTKB=1.4875D+00*ANGLBC(1,J1)*ANGLBC(2,J2)*ANGLBC(1,J3)/
     *                SUMB/(ANGL0(IANGL)*ANGL0(IANGL))*EXP(-2*DDD)
            END IF
            IF(NANGTYP(IANGL).EQ.0.OR.NANGTYP(IANGL).EQ.1.OR.
     *         NANGTYP(IANGL).EQ.2)THEN
               CNSTKB=1.75D+00*ANGLBC(1,J1)*ANGLBC(2,J2)*ANGLBC(1,J3)/
     *                SUMB/(ANGL0(IANGL)*ANGL0(IANGL))*EXP(-2*DDD)
            END IF
            FCANGL(IANGL)=CNSTKB*2.1922D-02*TOHART*DEGREE*DEGREE
         END IF
      ENDDO
      DO IANGL=1,NANGL
         IF(FCANGL(IANGL).LT.0.1D-10.AND.ANGL0(IANGL).LT.0.1D-10)THEN
            IF(NANGTYP(IANGL).EQ.3.OR.NANGTYP(IANGL).EQ.5.OR.
     *         NANGTYP(IANGL).EQ.6) ANGL0(IANGL)=60.0D+00*TORAD
            IF(NANGTYP(IANGL).EQ.4.OR.NANGTYP(IANGL).EQ.7.OR.
     *         NANGTYP(IANGL).EQ.8) ANGL0(IANGL)=90.0D+00*TORAD
         END IF
      ENDDO
      IF(MASWRK) WRITE(IW,*)
     *'   ATOM1    ATOM2    ATOM3  NANGTYP   NSBTYP',
     *'      ANGL0     FCANGL'
      DO IANGL=1,NANGL
         K1=KLIST(1,IANGL)
         K2=KLIST(2,IANGL)
         K3=KLIST(3,IANGL)
         IF(MASWRK)
     *   WRITE(IW,'(1X,I8,1X,I8,1X,I8,1X,I8,1X,I8,1X,F10.4,1X,F10.6)') 
     *              K1,K2,K3,NANGTYP(IANGL),NSBTYP(IANGL),
     *              ANGL0(IANGL)*DEGREE,
     *              FCANGL(IANGL)/2.1922D-02/TOHART/DEGREE/DEGREE
      ENDDO
      IF(MASWRK) WRITE(IW,*)' '
      IF(GOPARR) CALL DDI_BCAST(276,'F',FCANGL,NANGL,MASTER)
      IF(GOPARR) CALL DDI_BCAST(277,'F',ANGL0 ,NANGL,MASTER)
C
C     -- STRETCH-BEND INTERACTIONS     
C
      IF(MASWRK) THEN
C        - SUPPLY DEFAULT FIRST -
         REWIND(12)
 530     CONTINUE
         READ(12,'(A100)',END=550) WD100
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         IF(WD100(1:21).NE.'*   IR   JR   KR   F(') GOTO 530
 540     CONTINUE
         READ(12,'(A100)',END=550) WD100
         READ(WD100,*,ERR=550) IRXXX,JRXXX,KRXXX,FIJK,FKJI
         DO 541 IANGL=1,NANGL
            K1=KLIST(1,IANGL)
            K2=KLIST(2,IANGL)
            K3=KLIST(3,IANGL)
            IF(NINT(ZANF(K1)).LT.3)                           NROW1=0
            IF(NINT(ZANF(K1)).GT. 2.AND.NINT(ZANF(K1)).LT.11) NROW1=1
            IF(NINT(ZANF(K1)).GT.10.AND.NINT(ZANF(K1)).LT.19) NROW1=2
            IF(NINT(ZANF(K1)).GT.18.AND.NINT(ZANF(K1)).LT.37) NROW1=3
            IF(NINT(ZANF(K1)).GT.36.AND.NINT(ZANF(K1)).LT.55) NROW1=4
            IF(NINT(ZANF(K2)).LT.3)                           NROW2=0
            IF(NINT(ZANF(K2)).GT. 2.AND.NINT(ZANF(K2)).LT.11) NROW2=1
            IF(NINT(ZANF(K2)).GT.10.AND.NINT(ZANF(K2)).LT.19) NROW2=2
            IF(NINT(ZANF(K2)).GT.18.AND.NINT(ZANF(K2)).LT.37) NROW2=3
            IF(NINT(ZANF(K2)).GT.36.AND.NINT(ZANF(K2)).LT.55) NROW2=4
            IF(NINT(ZANF(K3)).LT.3)                           NROW3=0
            IF(NINT(ZANF(K3)).GT. 2.AND.NINT(ZANF(K3)).LT.11) NROW3=1
            IF(NINT(ZANF(K3)).GT.10.AND.NINT(ZANF(K3)).LT.19) NROW3=2
            IF(NINT(ZANF(K3)).GT.18.AND.NINT(ZANF(K3)).LT.37) NROW3=3
            IF(NINT(ZANF(K3)).GT.36.AND.NINT(ZANF(K3)).LT.55) NROW3=4
            IF(NROW2.EQ.JRXXX)THEN
               IF     (NROW1.EQ.IRXXX.AND.NROW3.EQ.KRXXX)THEN
                 FCSTBD(1,IANGL)=FIJK*2.5121D+00*TOANGS*TOHART*DEGREE
                 FCSTBD(2,IANGL)=FKJI*2.5121D+00*TOANGS*TOHART*DEGREE
               ELSE IF(NROW1.EQ.KRXXX.AND.NROW3.EQ.IRXXX)THEN
                 FCSTBD(1,IANGL)=FKJI*2.5121D+00*TOANGS*TOHART*DEGREE
                 FCSTBD(2,IANGL)=FIJK*2.5121D+00*TOANGS*TOHART*DEGREE
               END IF
            END IF
 541     CONTINUE
         GOTO 540
 550     CONTINUE
C
C        - SEARCH FOR SPECIFIC MATCHES -
         REWIND(12)
 500     CONTINUE
         READ(12,'(A100)',END=520) WD100
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         IF(WD100(1:21).NE.'* TYPES I, J, K    KB') GOTO 500
 510     CONTINUE
         READ(12,'(A100)',END=520) WD100
         READ(WD100,*,ERR=520) ISBTYP,ITYP,JTYP,KTYP,CKBIJK,CKBKJI
         DO IANGL=1,NANGL
            K1=KLIST(1,IANGL)
            K2=KLIST(2,IANGL)
            K3=KLIST(3,IANGL)
            KKKSW = 0
            NTYPIJ=NBNDTYP(KBLST(1,IANGL))
            NTYPJK=NBNDTYP(KBLST(2,IANGL))
            IF(NTYPE(K1).EQ.NTYPE(K3))THEN
               IF(NANGTYP(IANGL).EQ.1.AND.NTYPIJ.EQ.0.AND.NTYPJK.EQ.1)
     *                                              KKKSW=1
               IF(NANGTYP(IANGL).EQ.5.AND.NTYPIJ.EQ.0.AND.NTYPJK.EQ.1)
     *                                              KKKSW=1
               IF(NANGTYP(IANGL).EQ.7.AND.NTYPIJ.EQ.0.AND.NTYPJK.EQ.1)
     *                                              KKKSW=1
            END IF
            IF     (NTYPE(K1).EQ.ITYP.AND.NTYPE(K3).EQ.KTYP.AND.
     *              NTYPE(K2).EQ.JTYP)THEN
               IF(ISBTYP.EQ.NSBTYP(IANGL))THEN
                FCSTBD(1,IANGL)=CKBIJK*2.5121D+00*TOANGS*TOHART*DEGREE
                FCSTBD(2,IANGL)=CKBKJI*2.5121D+00*TOANGS*TOHART*DEGREE
                IF(KKKSW.EQ.1)THEN
                   DUM             = FCSTBD(1,IANGL)
                   FCSTBD(1,IANGL) = FCSTBD(2,IANGL)
                   FCSTBD(2,IANGL) = DUM
                END IF
               END IF
            ELSE IF(NTYPE(K3).EQ.ITYP.AND.NTYPE(K1).EQ.KTYP.AND.
     *              NTYPE(K2).EQ.JTYP)THEN
               IF(ISBTYP.EQ.NSBTYP(IANGL))THEN
                FCSTBD(2,IANGL)=CKBIJK*2.5121D+00*TOANGS*TOHART*DEGREE
                FCSTBD(1,IANGL)=CKBKJI*2.5121D+00*TOANGS*TOHART*DEGREE
                IF(KKKSW.EQ.1)THEN
                   DUM             = FCSTBD(1,IANGL)
                   FCSTBD(1,IANGL) = FCSTBD(2,IANGL)
                   FCSTBD(2,IANGL) = DUM
                END IF
               END IF
            END IF
         ENDDO
         GOTO 510
 520     CONTINUE
      END IF
      DO IANGL=1,NANGL
C        +/- 3 DEGREE TO A LINEAR BOND
         IF(ABS(ANGL0(IANGL)-PI).LT.0.053D+00 )THEN
            FCSTBD(1,IANGL)=ZERO
            FCSTBD(2,IANGL)=ZERO
         END IF
      ENDDO
      IF(GOPARR) CALL DDI_BCAST(276,'F',FCSTBD,2*NANGL,MASTER)
C
C     -- OUT-OF-PLANE BENDING AT TRICOORDINATE CENTERS
C        MMFF PAR FILE KOOP IS IN MILIDYNE*ANGSTROM/RAD**2
C
      IF(MASWRK) THEN
         CALL VICLR(NMPCNT,1,2*MAXMAX)
         DO IWAGG=1,NWAGG
            DO I=1,2
               NMPCNT(I,IWAGG)=1
            ENDDO
         ENDDO
         REWIND(12)
 560     CONTINUE
         READ(12,'(A100)',END=580) WD100
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         IF(WD100(1:21).NE.'*   MMFF  ATOM TYPES ') GOTO 560
 570     CONTINUE
         READ(12,'(A100)',END=580) WD100
         READ(WD100,*,ERR=580) ITYP,JTYP,KTYP,LTYP,CKOOP
         DO IWAGG=1,NWAGG
            JJXX=1
            K1=MLIST(1,IWAGG)
            K2=MLIST(2,IWAGG)
            K3=MLIST(3,IWAGG)
            K4=MLIST(4,IWAGG)
            JCOUNT=NMPCNT(1,IWAGG)
            IF(NTYPE(K4).EQ.JTYP)THEN
               DO JJ=JCOUNT,5
                  IF(NTYPMP(JJ,NTYPE(K1)).EQ.ITYP.AND.
     *               NTYPMP(JJ,NTYPE(K2)).EQ.KTYP.AND.
     *               NTYPMP(JJ,NTYPE(K3)).EQ.LTYP     )THEN
                  FCWAGG(IWAGG)=CKOOP*2.1922D-02*TOHART*DEGREE*DEGREE
                     IF(JJ.GT.JJXX) JJXX=JJ
                  END IF
                  IF(NTYPMP(JJ,NTYPE(K1)).EQ.KTYP.AND.
     *               NTYPMP(JJ,NTYPE(K2)).EQ.ITYP.AND.
     *               NTYPMP(JJ,NTYPE(K3)).EQ.LTYP     )THEN
                  FCWAGG(IWAGG)=CKOOP*2.1922D-02*TOHART*DEGREE*DEGREE
                     IF(JJ.GT.JJXX) JJXX=JJ
                  END IF
                  IF(NTYPMP(JJ,NTYPE(K1)).EQ.LTYP.AND.
     *               NTYPMP(JJ,NTYPE(K2)).EQ.KTYP.AND.
     *               NTYPMP(JJ,NTYPE(K3)).EQ.ITYP     )THEN
                  FCWAGG(IWAGG)=CKOOP*2.1922D-02*TOHART*DEGREE*DEGREE
                     IF(JJ.GT.JJXX) JJXX=JJ
                  END IF
                  IF(NTYPMP(JJ,NTYPE(K1)).EQ.KTYP.AND.
     *               NTYPMP(JJ,NTYPE(K2)).EQ.LTYP.AND.
     *               NTYPMP(JJ,NTYPE(K3)).EQ.ITYP     )THEN
                  FCWAGG(IWAGG)=CKOOP*2.1922D-02*TOHART*DEGREE*DEGREE
                     IF(JJ.GT.JJXX) JJXX=JJ
                  END IF
                  IF(NTYPMP(JJ,NTYPE(K1)).EQ.LTYP.AND.
     *               NTYPMP(JJ,NTYPE(K2)).EQ.ITYP.AND.
     *               NTYPMP(JJ,NTYPE(K3)).EQ.KTYP     )THEN
                  FCWAGG(IWAGG)=CKOOP*2.1922D-02*TOHART*DEGREE*DEGREE
                     IF(JJ.GT.JJXX) JJXX=JJ
                  END IF
                  IF(NTYPMP(JJ,NTYPE(K1)).EQ.ITYP.AND.
     *               NTYPMP(JJ,NTYPE(K2)).EQ.LTYP.AND.
     *               NTYPMP(JJ,NTYPE(K3)).EQ.KTYP     )THEN
                  FCWAGG(IWAGG)=CKOOP*2.1922D-02*TOHART*DEGREE*DEGREE
                     IF(JJ.GT.JJXX) JJXX=JJ
                  END IF
               ENDDO
               IF(JJXX.GT.NMPCNT(1,IWAGG)) NMPCNT(1,IWAGG)=JJXX
            END IF
         ENDDO
         GOTO 570
 580     CONTINUE
      END IF
      IF(GOPARR) CALL DDI_BCAST(276,'F',FCWAGG,NWAGG,MASTER)
C     - SHRINK THE WAGGING MLIST
      NWAGGNEW = 0
      DO IWAGG = 1, NWAGG
         IF(ABS(FCWAGG(IWAGG)).LT.1.0D-08)THEN
         ELSE
            NWAGGNEW          = NWAGGNEW + 1
            FCWAGG(NWAGGNEW)  = FCWAGG(IWAGG)
            MLIST(1,NWAGGNEW) = MLIST(1,IWAGG)
            MLIST(2,NWAGGNEW) = MLIST(2,IWAGG)
            MLIST(3,NWAGGNEW) = MLIST(3,IWAGG)
            MLIST(4,NWAGGNEW) = MLIST(4,IWAGG)
         END IF
      ENDDO
      DO IWAGG = NWAGGNEW+1, NWAGG
         FCWAGG(IWAGG)  = ZERO
         MLIST(1,IWAGG) = 0
         MLIST(2,IWAGG) = 0
         MLIST(3,IWAGG) = 0
         MLIST(4,IWAGG) = 0
      ENDDO
      NWAGG = NWAGGNEW
C
C     -- LOAD THE TORSION INTERACTIONS
C        MMFF PAR FILE VROT1, VROT2, VROT3 ARE IN KCAL/MOL
C
      IF(MASWRK) THEN
         CALL VICLR(NLCBND,1,NDIHR)
         CALL VICLR(NMPCNT,1,2*MAXMAX)
         DO IDIHR=1,NDIHR
            DO I=1,2
               NMPCNT(I,IDIHR)=1
            ENDDO
         ENDDO
         REWIND(12)
 600     CONTINUE
         READ(12,'(A100)',END=620) WD100
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         IF(WD100(1:21).NE.'*      ATOM TYPES    ') GOTO 600
 610     CONTINUE
         READ(12,'(A100)',END=620) WD100
         READ(WD100,*,ERR=620)ITT,ITYP,JTYP,KTYP,LTYP,VROT1,VROT2,VROT3
         DO 611 IDIHR=1,NDIHR
            JJXX=1
            KKXX=1
            L1=LLIST(1,IDIHR)
            L2=LLIST(2,IDIHR)
            L3=LLIST(3,IDIHR)
            L4=LLIST(4,IDIHR)
            JCOUNT=NMPCNT(1,IDIHR)
            KCOUNT=NMPCNT(2,IDIHR)
            IF(JCOUNT.EQ.5.AND.KCOUNT.EQ.5) GOTO 611
            IF(ITYP.EQ.0.AND.LTYP.NE.0.AND.
     *              (JTYP.NE.20.OR.KTYP.NE.30.OR.LTYP.NE.30))THEN
               IF(NTYPE(L2).EQ.JTYP.AND.
     *            NTYPE(L3).EQ.KTYP.AND.
     *            NTYPE(L2).NE.NTYPE(L3)     )THEN
                  DO JJ=JCOUNT,5
                     DO KK=3,5
                        IF(ITTN(IDIHR).EQ.ITT.AND.
     *                     NTYPMP(JJ,NTYPE(L1)).EQ.ITYP.AND.
     *                     NTYPMP(KK,NTYPE(L4)).EQ.LTYP     )THEN
                           FCDIHR(1,IDIHR)=VROT1*TOHART
                           FCDIHR(2,IDIHR)=VROT2*TOHART
                           FCDIHR(3,IDIHR)=VROT3*TOHART
                           IF(JJ.GT.JJXX) JJXX=JJ
                           IF(KK.GT.KKXX) KKXX=KK
                           NLCBND(IDIHR)=3
                        END IF
                     ENDDO
                  ENDDO
                  IF(JJXX.GT.NMPCNT(1,IDIHR)) NMPCNT(1,IDIHR)=JJXX
                  IF(KKXX.GT.NMPCNT(2,IDIHR)) NMPCNT(2,IDIHR)=KKXX
               ELSE IF(NTYPE(L2).EQ.KTYP.AND.
     *            NTYPE(L3).EQ.JTYP.AND.     
     *            NTYPE(L2).NE.NTYPE(L3)     )THEN
                  DO JJ=3,5
                     DO KK=KCOUNT,5
                        IF(ITTN(IDIHR).EQ.ITT.AND.
     *                     NTYPMP(JJ,NTYPE(L1)).EQ.LTYP.AND.
     *                     NTYPMP(KK,NTYPE(L4)).EQ.ITYP     )THEN
                           FCDIHR(1,IDIHR)=VROT1*TOHART
                           FCDIHR(2,IDIHR)=VROT2*TOHART
                           FCDIHR(3,IDIHR)=VROT3*TOHART
                           IF(JJ.GT.JJXX) JJXX=JJ
                           IF(KK.GT.KKXX) KKXX=KK
                           NLCBND(IDIHR)=3
                        END IF
                     ENDDO
                  ENDDO
                  IF(JJXX.GT.NMPCNT(1,IDIHR)) NMPCNT(1,IDIHR)=JJXX
                  IF(KKXX.GT.NMPCNT(2,IDIHR)) NMPCNT(2,IDIHR)=KKXX
               ELSE IF(NTYPE(L2).EQ.KTYP.AND.
     *            NTYPE(L3).EQ.JTYP.AND.     
     *            NTYPE(L2).EQ.NTYPE(L3)     )THEN
                  DO JJ=3,5
                     DO KK=KCOUNT,5
                        IF(ITTN(IDIHR).EQ.ITT.AND.
     *                     NTYPMP(JJ,NTYPE(L1)).EQ.LTYP.AND.
     *                     NTYPMP(KK,NTYPE(L4)).EQ.ITYP     )THEN
                           FCDIHR(1,IDIHR)=VROT1*TOHART
                           FCDIHR(2,IDIHR)=VROT2*TOHART
                           FCDIHR(3,IDIHR)=VROT3*TOHART
                           IF(JJ.GT.JJXX) JJXX=JJ
                           IF(KK.GT.KKXX) KKXX=KK
                           NLCBND(IDIHR)=3
                        END IF
                     ENDDO
                  ENDDO
                  IF(JJXX.GT.NMPCNT(1,IDIHR)) NMPCNT(1,IDIHR)=JJXX
                  IF(KKXX.GT.NMPCNT(2,IDIHR)) NMPCNT(2,IDIHR)=KKXX
                  IF(NMPCNT(1,IDIHR).GT.JCOUNT) JCOUNT=NMPCNT(1,IDIHR)
                  IF(NMPCNT(2,IDIHR).GT.KCOUNT) KCOUNT=NMPCNT(2,IDIHR)
                  DO JJ=JCOUNT,5
                     DO KK=3,5
                        IF(ITTN(IDIHR).EQ.ITT.AND.
     *                     NTYPMP(JJ,NTYPE(L1)).EQ.ITYP.AND.
     *                     NTYPMP(KK,NTYPE(L4)).EQ.LTYP     )THEN
                           FCDIHR(1,IDIHR)=VROT1*TOHART
                           FCDIHR(2,IDIHR)=VROT2*TOHART
                           FCDIHR(3,IDIHR)=VROT3*TOHART
                           IF(JJ.GT.JJXX) JJXX=JJ
                           IF(KK.GT.KKXX) KKXX=KK
                           NLCBND(IDIHR)=3
                        END IF
                     ENDDO
                  ENDDO
                  IF(JJXX.GT.NMPCNT(1,IDIHR)) NMPCNT(1,IDIHR)=JJXX
                  IF(KKXX.GT.NMPCNT(2,IDIHR)) NMPCNT(2,IDIHR)=KKXX
               END IF
            ELSE IF(ITYP.NE.0.AND.LTYP.EQ.0)THEN
               IF(NTYPE(L2).EQ.JTYP.AND.
     *            NTYPE(L3).EQ.KTYP.AND.
     *            NTYPE(L2).NE.NTYPE(L3)     )THEN
                  DO JJ=3,5
                     DO KK=KCOUNT,5
                        IF(ITTN(IDIHR).EQ.ITT.AND.
     *                     NTYPMP(JJ,NTYPE(L1)).EQ.ITYP.AND.
     *                     NTYPMP(KK,NTYPE(L4)).EQ.LTYP     )THEN
                           FCDIHR(1,IDIHR)=VROT1*TOHART
                           FCDIHR(2,IDIHR)=VROT2*TOHART
                           FCDIHR(3,IDIHR)=VROT3*TOHART
                           IF(JJ.GT.JJXX) JJXX=JJ
                           IF(KK.GT.KKXX) KKXX=KK
                           NLCBND(IDIHR)=3
                        END IF
                     ENDDO
                  ENDDO
                  IF(JJXX.GT.NMPCNT(1,IDIHR)) NMPCNT(1,IDIHR)=JJXX
                  IF(KKXX.GT.NMPCNT(2,IDIHR)) NMPCNT(2,IDIHR)=KKXX
               ELSE IF(NTYPE(L2).EQ.KTYP.AND.
     *            NTYPE(L3).EQ.JTYP.AND.
     *            NTYPE(L2).NE.NTYPE(L3)     )THEN
                  DO JJ=JCOUNT,5
                     DO KK=3,5
                        IF(ITTN(IDIHR).EQ.ITT.AND.
     *                     NTYPMP(JJ,NTYPE(L1)).EQ.LTYP.AND.
     *                     NTYPMP(KK,NTYPE(L4)).EQ.ITYP     )THEN
                           FCDIHR(1,IDIHR)=VROT1*TOHART
                           FCDIHR(2,IDIHR)=VROT2*TOHART
                           FCDIHR(3,IDIHR)=VROT3*TOHART
                           IF(JJ.GT.JJXX) JJXX=JJ
                           IF(KK.GT.KKXX) KKXX=KK
                           NLCBND(IDIHR)=3
                        END IF
                     ENDDO
                  ENDDO
                  IF(JJXX.GT.NMPCNT(1,IDIHR)) NMPCNT(1,IDIHR)=JJXX
                  IF(KKXX.GT.NMPCNT(2,IDIHR)) NMPCNT(2,IDIHR)=KKXX
               ELSE IF(NTYPE(L2).EQ.KTYP.AND.
     *            NTYPE(L3).EQ.JTYP.AND.
     *            NTYPE(L2).EQ.NTYPE(L3)     )THEN
                  DO JJ=JCOUNT,5
                     DO KK=3,5
                        IF(ITTN(IDIHR).EQ.ITT.AND.
     *                     NTYPMP(JJ,NTYPE(L1)).EQ.LTYP.AND.
     *                     NTYPMP(KK,NTYPE(L4)).EQ.ITYP     )THEN
                           FCDIHR(1,IDIHR)=VROT1*TOHART
                           FCDIHR(2,IDIHR)=VROT2*TOHART
                           FCDIHR(3,IDIHR)=VROT3*TOHART
                           IF(JJ.GT.JJXX) JJXX=JJ
                           IF(KK.GT.KKXX) KKXX=KK
                           NLCBND(IDIHR)=3
                        END IF
                     ENDDO
                  ENDDO
                  IF(JJXX.GT.NMPCNT(1,IDIHR)) NMPCNT(1,IDIHR)=JJXX
                  IF(KKXX.GT.NMPCNT(2,IDIHR)) NMPCNT(2,IDIHR)=KKXX
                  IF(NMPCNT(1,IDIHR).GT.JCOUNT) JCOUNT=NMPCNT(1,IDIHR)
                  IF(NMPCNT(2,IDIHR).GT.KCOUNT) KCOUNT=NMPCNT(2,IDIHR)
                  DO JJ=3,5
                     DO KK=KCOUNT,5
                        IF(ITTN(IDIHR).EQ.ITT.AND.
     *                     NTYPMP(JJ,NTYPE(L1)).EQ.ITYP.AND.
     *                     NTYPMP(KK,NTYPE(L4)).EQ.LTYP     )THEN
                           FCDIHR(1,IDIHR)=VROT1*TOHART
                           FCDIHR(2,IDIHR)=VROT2*TOHART
                           FCDIHR(3,IDIHR)=VROT3*TOHART
                           IF(JJ.GT.JJXX) JJXX=JJ
                           IF(KK.GT.KKXX) KKXX=KK
                           NLCBND(IDIHR)=3
                        END IF
                     ENDDO
                  ENDDO
                  IF(JJXX.GT.NMPCNT(1,IDIHR)) NMPCNT(1,IDIHR)=JJXX
                  IF(KKXX.GT.NMPCNT(2,IDIHR)) NMPCNT(2,IDIHR)=KKXX
               END IF
            ELSE
               JCOUNT=4
               IF(NTYPE(L2).EQ.JTYP.AND.
     *            NTYPE(L3).EQ.KTYP.AND.
     *            NTYPE(L2).NE.NTYPE(L3)     )THEN
                  IF(NLCBND(IDIHR).EQ.0)THEN
                     FCDIHR(1,IDIHR)=VROT1*TOHART
                     FCDIHR(2,IDIHR)=VROT2*TOHART
                     FCDIHR(3,IDIHR)=VROT3*TOHART
                     NLCBND(IDIHR)=1
                  END IF
                  IF(ITTN(IDIHR).EQ.ITT.AND.NLCBND(IDIHR).LE.1)THEN
                     FCDIHR(1,IDIHR)=VROT1*TOHART
                     FCDIHR(2,IDIHR)=VROT2*TOHART
                     FCDIHR(3,IDIHR)=VROT3*TOHART
                     NLCBND(IDIHR)=2
                  END IF
                  DO JJ=JCOUNT,5
                     IF(ITTN(IDIHR).EQ.ITT.AND.
     *                  NTYPMP(JJ,NTYPE(L1)).EQ.ITYP.AND.
     *                  NTYPMP(JJ,NTYPE(L4)).EQ.LTYP     )THEN
                        FCDIHR(1,IDIHR)=VROT1*TOHART
                        FCDIHR(2,IDIHR)=VROT2*TOHART
                        FCDIHR(3,IDIHR)=VROT3*TOHART
                        IF(JJ.GT.JJXX) JJXX=JJ
                        NLCBND(IDIHR)=3
                     END IF
                  ENDDO
                  IF(JJXX.GT.NMPCNT(1,IDIHR)) NMPCNT(1,IDIHR)=JJXX
               ELSE IF(NTYPE(L2).EQ.KTYP.AND.
     *            NTYPE(L3).EQ.JTYP.AND.
     *            NTYPE(L2).NE.NTYPE(L3)     )THEN
                  IF(NLCBND(IDIHR).EQ.0)THEN
                     FCDIHR(1,IDIHR)=VROT1*TOHART
                     FCDIHR(2,IDIHR)=VROT2*TOHART
                     FCDIHR(3,IDIHR)=VROT3*TOHART
                     NLCBND(IDIHR)=1
                  END IF
                  IF(ITTN(IDIHR).EQ.ITT.AND.NLCBND(IDIHR).LE.1)THEN
                     FCDIHR(1,IDIHR)=VROT1*TOHART
                     FCDIHR(2,IDIHR)=VROT2*TOHART
                     FCDIHR(3,IDIHR)=VROT3*TOHART
                     NLCBND(IDIHR)=2
                  END IF
                  DO JJ=JCOUNT,5
                     IF(ITTN(IDIHR).EQ.ITT.AND.
     *                  NTYPMP(JJ,NTYPE(L1)).EQ.LTYP.AND.
     *                  NTYPMP(JJ,NTYPE(L4)).EQ.ITYP     )THEN
                        FCDIHR(1,IDIHR)=VROT1*TOHART
                        FCDIHR(2,IDIHR)=VROT2*TOHART
                        FCDIHR(3,IDIHR)=VROT3*TOHART
                        IF(JJ.GT.JJXX) JJXX=JJ
                        NLCBND(IDIHR)=3
                     END IF
                  ENDDO
                  IF(JJXX.GT.NMPCNT(1,IDIHR)) NMPCNT(1,IDIHR)=JJXX
               ELSE IF(NTYPE(L2).EQ.KTYP.AND.
     *            NTYPE(L3).EQ.JTYP.AND.
     *            NTYPE(L2).EQ.NTYPE(L3)     )THEN
                  IF(NLCBND(IDIHR).EQ.0)THEN
                     FCDIHR(1,IDIHR)=VROT1*TOHART
                     FCDIHR(2,IDIHR)=VROT2*TOHART
                     FCDIHR(3,IDIHR)=VROT3*TOHART
                     NLCBND(IDIHR)=1
                  END IF
                  IF(ITTN(IDIHR).EQ.ITT.AND.NLCBND(IDIHR).LE.1)THEN
                     FCDIHR(1,IDIHR)=VROT1*TOHART
                     FCDIHR(2,IDIHR)=VROT2*TOHART
                     FCDIHR(3,IDIHR)=VROT3*TOHART
                     NLCBND(IDIHR)=2
                  END IF
                  DO JJ=JCOUNT,5
                     IF(ITTN(IDIHR).EQ.ITT.AND.
     *                  NTYPMP(JJ,NTYPE(L1)).EQ.LTYP.AND.
     *                  NTYPMP(JJ,NTYPE(L4)).EQ.ITYP     )THEN
                        FCDIHR(1,IDIHR)=VROT1*TOHART
                        FCDIHR(2,IDIHR)=VROT2*TOHART
                        FCDIHR(3,IDIHR)=VROT3*TOHART
                        IF(JJ.GT.JJXX) JJXX=JJ
                        NLCBND(IDIHR)=3
                     END IF
                  ENDDO
                  IF(JJXX.GT.NMPCNT(1,IDIHR)) NMPCNT(1,IDIHR)=JJXX
                  IF(NMPCNT(1,IDIHR).GT.JCOUNT) JCOUNT=NMPCNT(1,IDIHR)
                  DO JJ=JCOUNT,5
                     IF(ITTN(IDIHR).EQ.ITT.AND.
     *                  NTYPMP(JJ,NTYPE(L1)).EQ.ITYP.AND.
     *                  NTYPMP(JJ,NTYPE(L4)).EQ.LTYP     )THEN
                        FCDIHR(1,IDIHR)=VROT1*TOHART
                        FCDIHR(2,IDIHR)=VROT2*TOHART
                        FCDIHR(3,IDIHR)=VROT3*TOHART
                        IF(JJ.GT.JJXX) JJXX=JJ
                        NLCBND(IDIHR)=3
                     END IF
                  ENDDO
                  IF(JJXX.GT.NMPCNT(1,IDIHR)) NMPCNT(1,IDIHR)=JJXX
               END IF
            END IF
 611     CONTINUE
         GOTO 610
 620     CONTINUE
      END IF
      DO 621 IDIHR=1,NDIHR
         IF(ABS(FCDIHR(1,IDIHR)).LT.0.1D-10.AND.
     *      ABS(FCDIHR(2,IDIHR)).LT.0.1D-10.AND.
     *      ABS(FCDIHR(3,IDIHR)).LT.0.1D-10.AND.NLCBND(IDIHR).EQ.0)THEN
            L1=LLIST(1,IDIHR)
            L2=LLIST(2,IDIHR)
            L3=LLIST(3,IDIHR)
            L4=LLIST(4,IDIHR)
            IF(LINH(NTYPE(L2)).EQ.1.OR.LINH(NTYPE(L3)).EQ.1) GOTO 621
            IF(IDATM(2,NTYPE(L3)).EQ.1.AND.
     *         IDATM(2,NTYPE(L2)).EQ.1     )THEN
               ICNTRL=0
               DO IRING=1,NUMRIN(10,L2)
                  DO JRING=1,NUMRIN(10,L3)
                     IF(NUMRIN(IRING,L2).EQ.NUMRIN(JRING,L3).AND.
     *               NRINTYP(NUMRIN(IRING,L2)).EQ.1) ICNTRL=1
                  ENDDO
               ENDDO
               IF(ICNTRL.EQ.1)THEN
                  PIJK=0.3D+00
                  BETLA=6.0D+00
                  IF(IPILP(NTYPE(L2)).EQ.0.AND.IPILP(NTYPE(L3)).EQ.0)
     *            PIJK=0.5D+00
                  IF((IVAL(NTYPE(L2)).EQ.3.AND.IVAL(NTYPE(L3)).EQ.4).OR.
     *               (IVAL(NTYPE(L2)).EQ.4.AND.IVAL(NTYPE(L3)).EQ.3))
     *                BETLA=3.0D+00
                  FCDIHR(2,IDIHR)=BETLA*PIJK*
     *                           SQRT(ERPFTI(1,NINT(ZANF(L2)))*
     *                           ERPFTI(1,NINT(ZANF(L3))))*TOHART
               END IF
            END IF
            JBOND=0
            DO I=1,LBOND(10,L2)
               KBOND=LBOND(I,L2)
               LL3=IPAIR(1,KBOND)+IPAIR(2,KBOND)-L2
               IF(LL3.EQ.L3.AND.BORDER(KBOND).EQ.2.0D+00)
     *         JBOND=KBOND
            ENDDO
            IF(JBOND.NE.0)THEN
               PIJK=0.4D+00
               BETLA=6.0D+00
               IF(IMLTB(NTYPE(L2)).EQ.2.AND.IMLTB(NTYPE(L3)).EQ.2)THEN
               PIJK=1.0D+00
               FCDIHR(2,IDIHR)=BETLA*PIJK*
     *                         SQRT(ERPFTI(1,NINT(ZANF(L2)))*
     *                         ERPFTI(1,NINT(ZANF(L3))))*TOHART
               END IF
            END IF
            IF(ICRD(NTYPE(L2)).EQ.4.AND.ICRD(NTYPE(L3)).EQ.4)THEN
              FCDIHR(3,IDIHR)=TOHART*SQRT(ERPFTI(2,NINT(ZANF(L2)))*
     *                              ERPFTI(2,NINT(ZANF(L3))))/9.0D+00
            END IF
            IF(ICRD(NTYPE(L2)).EQ.4.AND.ICRD(NTYPE(L3)).NE.4)THEN
               IF((ICRD(NTYPE(L3)).EQ.3.AND.(IVAL(NTYPE(L3)).EQ.4.OR.
     *             IVAL(NTYPE(L3)).EQ.34.OR.IMLTB(NTYPE(L3)).NE.0)).OR.
     *            (ICRD(NTYPE(L3)).EQ.2.AND.(IVAL(NTYPE(L3)).EQ.3.OR.   
     *             IMLTB(NTYPE(L3)).NE.0)))THEN
                  FCDIHR(1,IDIHR)=ZERO
                  FCDIHR(2,IDIHR)=ZERO
                  FCDIHR(3,IDIHR)=ZERO
                  GOTO 621
               END IF
               FCDIHR(3,IDIHR)=TOHART*SQRT(ERPFTI(2,NINT(ZANF(L2)))*
     *                               ERPFTI(2,NINT(ZANF(L3))))/
     *                    ((ICRD(NTYPE(L2))-1)*(ICRD(NTYPE(L3))-1))
            END IF
            IF(ICRD(NTYPE(L2)).NE.4.AND.ICRD(NTYPE(L3)).EQ.4)THEN
               IF((ICRD(NTYPE(L2)).EQ.3.AND.(IVAL(NTYPE(L2)).EQ.4.OR.
     *             IVAL(NTYPE(L2)).EQ.34.OR.IMLTB(NTYPE(L2)).NE.0)).OR.
     *            (ICRD(NTYPE(L2)).EQ.2.AND.(IVAL(NTYPE(L2)).EQ.3.OR.   
     *             IMLTB(NTYPE(L2)).NE.0)))THEN
                  FCDIHR(1,IDIHR)=ZERO
                  FCDIHR(2,IDIHR)=ZERO
                  FCDIHR(3,IDIHR)=ZERO
                  GOTO 621
               END IF
               FCDIHR(3,IDIHR)=TOHART*SQRT(ERPFTI(2,NINT(ZANF(L2)))*
     *                               ERPFTI(2,NINT(ZANF(L3))))/
     *            ((ICRD(NTYPE(L2))-1)*(ICRD(NTYPE(L3))-1))
            END IF
            JBOND=0
            DO I=1,LBOND(10,L2)
               KBOND=LBOND(I,L2)
               LL3=IPAIR(1,KBOND)+IPAIR(2,KBOND)-L2
               IF(LL3.EQ.L3.AND.BORDER(KBOND).EQ.1.0D+00)
     *         JBOND=KBOND
            ENDDO
            IF(LBOND(10,L3).EQ.3.AND.LBOND(10,L2).EQ.3.AND.
     *         JBOND.NE.0)THEN
               IF((IMLTB(NTYPE(L2)).NE.0.AND.IMLTB(NTYPE(L3)).NE.0).OR.
     *            (IPILP(NTYPE(L2)).NE.0.AND.IMLTB(NTYPE(L3)).NE.0).OR.
     *            (IPILP(NTYPE(L3)).NE.0.AND.IMLTB(NTYPE(L2)).NE.0))THEN
                  IF(IPILP(NTYPE(L2)).EQ.1.AND.
     *               IPILP(NTYPE(L3)).EQ.1     )THEN
                     FCDIHR(1,IDIHR)=ZERO
                     FCDIHR(2,IDIHR)=ZERO
                     FCDIHR(3,IDIHR)=ZERO
                     GOTO 621
                  END IF
                  IF(IPILP(NTYPE(L2)).NE.0.AND.
     *               IPILP(NTYPE(L3)).NE.0     )THEN
                     BETLA=6.0D+00
                     PIJK=0.15D+00
                     IF(IMLTB(NTYPE(L2)).EQ.1.OR.IMLTB(NTYPE(L3)).EQ.1)
     *               PIJK=0.5D+00
                     IF((NINT(ZANF(L2)).EQ.6.OR.NINT(ZANF(L2)).EQ.14)
     *             .AND.(NINT(ZANF(L3)).EQ.6.OR.NINT(ZANF(L3)).EQ.14))
     *               PIJK=0.3D+00
                     FCDIHR(2,IDIHR)=BETLA*PIJK*
     *                               SQRT(ERPFTI(1,NINT(ZANF(L2)))*
     *                               ERPFTI(1,NINT(ZANF(L3))))*TOHART
                     GOTO 621
                  END IF
                  IF((IMLTB(NTYPE(L2)).EQ.1.OR.
     *                IMLTB(NTYPE(L3)).EQ.1).AND.
     *               (NINT(ZANF(L2)).NE.6.OR.NINT(ZANF(L3)).NE.6))THEN
                     BETLA=6.0D+00
                     PIJK=0.4D+00
                     FCDIHR(2,IDIHR)=BETLA*PIJK*
     *                              SQRT(ERPFTI(1,NINT(ZANF(L2)))*
     *                              ERPFTI(1,NINT(ZANF(L3))))*TOHART
                     GOTO 621
                  END IF
                  BETLA=6.0D+00
                  PIJK=0.15D+00
                  FCDIHR(2,IDIHR)=BETLA*PIJK*
     *   SQRT(ERPFTI(1,NINT(ZANF(L2)))*ERPFTI(1,NINT(ZANF(L3))))*TOHART
               END IF
               IF((NINT(ZANF(L2)).EQ.8.OR.NINT(ZANF(L2)).EQ.16).AND.
     *            (NINT(ZANF(L3)).EQ.8.OR.NINT(ZANF(L3)).EQ.16))THEN
                  FCDIHR(3,IDIHR)=TOHART*SQRT(ERPFTI(2,NINT(ZANF(L2)))*
     *                               ERPFTI(2,NINT(ZANF(L3))))/
     *                   ((ICRD(NTYPE(L2))-1)*(ICRD(NTYPE(L3))-1))
                  IF(LBOND(10,L2).EQ.1.AND.LBOND(10,L3).EQ.1.AND.
     *            QMMFF(L2).EQ.ZERO.AND.QMMFF(L3).EQ.ZERO)THEN
                  IF(NINT(ZANF(L2)).EQ.8)  TSINWJ=2.0D+00
                  IF(NINT(ZANF(L2)).EQ.16) TSINWJ=8.0D+00
                  IF(NINT(ZANF(L3)).EQ.8)  TSINWK=2.0D+00
                  IF(NINT(ZANF(L3)).EQ.16) TSINWK=8.0D+00
                  FCDIHR(2,IDIHR)=- SQRT(TSINWK*TSINWJ)*TOHART
                  END IF
               END IF
            END IF
         END IF
 621  CONTINUE
      DO IDIHR=1,NDIHR
         IF(ITTN(IDIHR).EQ.5)THEN
         L1=LLIST(1,IDIHR)
         L2=LLIST(2,IDIHR)
         L3=LLIST(3,IDIHR)
         L4=LLIST(4,IDIHR)
         IF(LINH(NTYPE(L2)).EQ.1.OR.LINH(NTYPE(L3)).EQ.1)THEN
            FCDIHR(1,IDIHR)=ZERO
            FCDIHR(2,IDIHR)=ZERO
            FCDIHR(3,IDIHR)=ZERO
         END IF
         JBOND=0
         DO I=1,LBOND(10,L2)
            KBOND=LBOND(I,L2)
            LL3=IPAIR(1,KBOND)+IPAIR(2,KBOND)-L2
            IF(LL3.EQ.L3.AND.BORDER(KBOND).EQ.1.0D+00)
     *      JBOND=KBOND
         ENDDO
         IF(LBOND(10,L3).EQ.3.AND.LBOND(10,L2).EQ.3.AND.
     *      JBOND.NE.0)THEN
            IF((IMLTB(NTYPE(L2)).NE.0.AND.IMLTB(NTYPE(L3)).NE.0).OR.
     *         (IPILP(NTYPE(L2)).NE.0.AND.IMLTB(NTYPE(L3)).NE.0).OR.
     *         (IPILP(NTYPE(L3)).NE.0.AND.IMLTB(NTYPE(L2)).NE.0))THEN
               IF(IPILP(NTYPE(L2)).EQ.1.AND.
     *            IPILP(NTYPE(L3)).EQ.1     )THEN
                  FCDIHR(1,IDIHR)=ZERO
                  FCDIHR(2,IDIHR)=ZERO
                  FCDIHR(3,IDIHR)=ZERO
               END IF
            END IF
         END IF
         END IF
      ENDDO
      IF(GOPARR) CALL DDI_BCAST(276,'F',FCDIHR,3*NDIHR,MASTER)
C
C     -- LOAD LJ DATA FOR EACH TYPE OF ATOM
C
      IF(MASWRK) THEN
         REWIND(12)
 630     CONTINUE
         READ(12,'(A100)',END=650) WD100
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         IF(WD100(1:21).NE.'*  TYPE  ALPHA-I     ') GOTO 630
         READ(12,'(A100)',END=650) WD100    ! THIS IS AN EXTRA LINE
 640     CONTINUE
         READ(12,'(A100)',END=650) WD100
         READ(WD100,*,ERR=650) IVTYP,ALPHAI,CNII,AIII,GIII,ADTYPE
         VDWIN(1,IVTYP)=ALPHAI
         VDWIN(2,IVTYP)=CNII
         VDWIN(3,IVTYP)=AIII
         VDWIN(4,IVTYP)=GIII
         IF(ADTYPE.EQ.'D')THEN
            IADTYP(IVTYP)=1
         END IF
         IF(ADTYPE.EQ.'A')THEN
            IADTYP(IVTYP)=2
         END IF
         GOTO 640
 650     CONTINUE
      END IF
      IF(GOPARR) CALL DDI_BCAST(275,'I',IADTYP,MXMMTP,MASTER)
      IF(GOPARR) CALL DDI_BCAST(276,'F',VDWIN,4*MXMMTP,MASTER)
C
C     -- LOAD THE POLARIZED CHARG ON EACH ATOM
C
      IF(MASWRK) THEN
         REWIND(12)
         CALL VICLR(NLCBND,1,NBOND)
 660     CONTINUE
         READ(12,'(A100)',END=680) WD100
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         IF(WD100(1:21).NE.'*  TYPES       BCI   ') GOTO 660
 670     CONTINUE
         READ(12,'(A100)',END=680) WD100
         READ(WD100,*,ERR=680) ICAGTYP,ITYP,JYP,BCI
         DO IBOND=1,NBOND
            J1=IPAIR(1,IBOND)
            J2=IPAIR(2,IBOND)
            IF(NBNDTYP(IBOND).EQ.ICAGTYP.AND.
     *         NTYPE(J1).EQ.ITYP.AND.NTYPE(J2).EQ.JYP)THEN
               BNDCAG(IBOND)=BCI
               IF(BCI.EQ.0.0D+00)THEN
                  NLCBND(IBOND)=9
               END IF
            END IF
            IF(NBNDTYP(IBOND).EQ.ICAGTYP.AND.
     *         NTYPE(J2).EQ.ITYP.AND.NTYPE(J1).EQ.JYP)THEN
               BNDCAG(IBOND)=-BCI
               IF(BCI.EQ.0.0D+00)THEN
                  NLCBND(IBOND)=9
               END IF
            END IF
         ENDDO
         GOTO 670
 680     CONTINUE
      END IF
      IF(GOPARR) CALL DDI_BCAST(275,'I',NLCBND,NBOND,MASTER)
      IF(GOPARR) CALL DDI_BCAST(276,'F',BNDCAG,NBOND,MASTER)
C
C     -- LOAD THE POLARIZED CHARG ON EACH ATOM
C
      IF(MASWRK) THEN
         REWIND(12)
 700     CONTINUE
         READ(12,'(A100)',END=720) WD100
         DO I=1,100
            J = IACHAR(WD100(I:I))
            IF(J.GE.97.AND.J.LE.122) J = J - 32
            WD100(I:I) = CHAR(J)
         ENDDO
         IF(WD100(1:21).NE.'* TYPE    PBCI      F') GOTO 700
 710     CONTINUE
         READ(12,'(A100)',END=720) WD100
         READ(WD100,*,ERR=720) ACONT,ITYPE,PBCI,FCDAIJ
         ACONT=ACONT
         DO JTYPE=1,MXMMTP
            IF(JTYPE.EQ.ITYPE)THEN
               PCHAG(1,JTYPE)=PBCI
               PCHAG(2,JTYPE)=FCDAIJ
            END IF
         ENDDO
         GOTO 710
 720     CONTINUE
      END IF
      IF(GOPARR) CALL DDI_BCAST(276,'F',PCHAG,2*MXMMTP,MASTER)
C
      CLOSE(12)
C
C     -- LOAD THE POLARIZED CHARG ON EACH ATOM
C
      CHGTOT = ZERO
      DO IBOND=1,NBOND
         J1=IPAIR(1,IBOND)
         J2=IPAIR(2,IBOND)
         IF(PCHAG(2,NTYPE(J2)).EQ.ZERO.AND.QMMFF(J1).NE.ZERO) THEN
            CHARGL(J2)=CHARGL(J2)+QMMFF(J1)*PCHAG(2,NTYPE(J1))
            IF(PCHAG(2,NTYPE(J1)).NE.ZERO.AND.QMMFF(J2).NE.ZERO)
     *      CHARGL(J1)=CHARGL(J1)-QMMFF(J2)*PCHAG(2,NTYPE(J1))
         END IF
         IF(PCHAG(2,NTYPE(J1)).EQ.ZERO.AND.QMMFF(J2).NE.ZERO) THEN
            CHARGL(J1)=CHARGL(J1)+QMMFF(J2)*PCHAG(2,NTYPE(J2))
            IF(PCHAG(2,NTYPE(J2)).NE.ZERO.AND.QMMFF(J1).NE.ZERO)
     *      CHARGL(J2)=CHARGL(J2)-QMMFF(J1)*PCHAG(2,NTYPE(J2))
         END IF
      ENDDO
      DO IFFAT=1,NFFAT
         LCOUNT1=0
         DO IBOND=1,NBOND
            J1=IPAIR(1,IBOND)
            J2=IPAIR(2,IBOND)
            IF(NLCBND(IBOND).EQ.9.OR.BNDCAG(IBOND).NE.0.0D+00)THEN
               IF(J1.EQ.IFFAT)THEN
                  CHARG(IFFAT)=CHARG(IFFAT)-BNDCAG(IBOND)+
     *                         PCHAG(2,NTYPE(IFFAT))*QMMFF(J2)
                  LCOUNT1=LCOUNT1+1
               END IF
               IF(J2.EQ.IFFAT)THEN
                  CHARG(IFFAT)=CHARG(IFFAT)+BNDCAG(IBOND)+
     *                         PCHAG(2,NTYPE(IFFAT))*QMMFF(J1)
                  LCOUNT1=LCOUNT1+1
               END IF
            END IF
         ENDDO
         IF(LCOUNT1.LT.LBOND(10,IFFAT))THEN
            DO IBOND=1,NBOND
               J1=IPAIR(1,IBOND)
               J2=IPAIR(2,IBOND)
               IF(NLCBND(IBOND).NE.9.AND.BNDCAG(IBOND).EQ.0.0D+00.AND.
     *            (J1.EQ.IFFAT.OR.J2.EQ.IFFAT))THEN
                  IF(J1.EQ.IFFAT)THEN
                     CHARG(IFFAT)=CHARG(IFFAT)
     *                           +PCHAG(1,NTYPE(J1))
     *                           -PCHAG(1,NTYPE(J2))
     *                           +PCHAG(2,NTYPE(J1))*QMMFF(J2)
                  END IF
                  IF(J2.EQ.IFFAT)THEN
                     CHARG(IFFAT)=CHARG(IFFAT)
     *                           -PCHAG(1,NTYPE(J1))
     *                           +PCHAG(1,NTYPE(J2))
     *                           +PCHAG(2,NTYPE(J2))*QMMFF(J1)
                  END IF
               END IF
            ENDDO
         END IF
         CHARG(IFFAT)=CHARG(IFFAT)
     *               +(1-LBOND(10,IFFAT)*PCHAG(2,NTYPE(IFFAT)))*
     *                QMMFF(IFFAT)+CHARGL(IFFAT)
         CHGTOT = CHGTOT + CHARG(IFFAT)
      ENDDO
C
C     -- COMPUTE THE MMFFLJ TABLE
C
      DO II=1,MXMMTP
         RRII=VDWIN(3,II)*SQRT(SQRT(VDWIN(1,II)))
         DO JJ=II,MXMMTP
            RRJJ    = VDWIN(3,JJ)*SQRT(SQRT(VDWIN(1,JJ)))
            GMIJ    = (RRII-RRJJ)/(RRII+RRJJ)
            BBB     = 0.2D+00
            BETA    = 12.0D+00
            IF(IADTYP(II).EQ.1.OR.IADTYP(JJ).EQ.1) BBB = 0.0D+00
            RRIJ   = PT5*(RRII+RRJJ)*
     *               (ONE + BBB*(ONE-EXP(-BETA*GMIJ*GMIJ)))
            RRIJ2  = RRIJ*RRIJ
            RRIJ6  = RRIJ2*RRIJ2*RRIJ2
            EPSNIJ = 181.16D+00*VDWIN(4,II)*VDWIN(4,JJ)*
     *               VDWIN(1,II)*VDWIN(1,JJ)/
     *               ((SQRT(VDWIN(1,II)/VDWIN(2,II))+
     *                 SQRT(VDWIN(1,JJ)/VDWIN(2,JJ)))*RRIJ6)
            IF((IADTYP(II).EQ.1.AND.IADTYP(JJ).EQ.2).OR.
     *         (IADTYP(II).EQ.2.AND.IADTYP(JJ).EQ.1)    )THEN
               RRIJ    = 0.8D+00*RRIJ
               EPSNIJ  = 0.5D+00*EPSNIJ
            END IF
            FCLJTP(1,JJ,II)=RRIJ*TOBOHR
            FCLJTP(2,JJ,II)=EPSNIJ*TOHART
            IF(RRII.EQ.ZERO.OR.RRJJ.EQ.ZERO) THEN
               FCLJTP(1,JJ,II)=ZERO
               FCLJTP(2,JJ,II)=ZERO
            END IF
            FCLJTP(1,II,JJ) = FCLJTP(1,JJ,II)
            FCLJTP(2,II,JJ) = FCLJTP(2,JJ,II)
         ENDDO
      ENDDO
C
C
C     **** PRINT OUT THE MMFF FORCE FIELD INTO $FFDATA ****
C
C     -- COORDINATES --
C
      IF(MASWRK) THEN
         WRITE(IP,'(A,A,F11.6,A)')
     *   ' $FFDATA       ! FROM LOUT=1,',
     *   ' TOTAL MM CHARGE=',CHGTOT,', MAY NEED EDITING'
         WRITE(IP,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
         DO IFFAT=1,NFFAT
            WRITE(IP,1010) ATMNAM(IFFAT),ZANF(IFFAT),
     *      CORD(1,IFFAT)*TOANGS,
     *      CORD(2,IFFAT)*TOANGS,
     *      CORD(3,IFFAT)*TOANGS
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- LJ RMIN/2 AND EPSILON --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'PARAMETERS       MASS         Q      ',
     *              'POL   RMIN/2  EPSILON   RMIN/2  EPSILON'
         DO IFFAT=1,NFFAT
            SIG(IFFAT)  = 0.0D+00
            EPS(IFFAT)  = 0.0D+00
            SIG2(IFFAT) = 0.0D+00
            EPS2(IFFAT) = 0.0D+00
            POL(IFFAT)  = 0.0D+00
            NLPR(IFFAT) = 2
            CLPR(1,IFFAT) =30.0D+00
            ZLPR(1,IFFAT) = 0.7D+00
            CLPR(2,IFFAT) = 0.0D+00
            ZLPR(2,IFFAT) = 0.0D+00
            CLPR(3,IFFAT) = 0.0D+00
            ZLPR(3,IFFAT) = 0.0D+00
            CLPR(4,IFFAT) = 0.0D+00
            ZLPR(4,IFFAT) = 0.0D+00
            IF(ZANF(IFFAT).EQ.1.0D+00) THEN
               CLPR(1,IFFAT)= 2.0D+00
               ZLPR(1,IFFAT)= 2.0D+00
            END IF
            IF(ZANF(IFFAT).EQ.6.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.7D+00
            END IF
            IF(ZANF(IFFAT).EQ.7.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.6D+00
            END IF
            IF(ZANF(IFFAT).EQ.8.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.8D+00
            END IF
            IF(ZANF(IFFAT).EQ.9.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.8D+00
            END IF
            IF(ZANF(IFFAT).EQ.16.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.6D+00
            END IF
            IF(ZANF(IFFAT).EQ.17.0D+00) THEN
               CLPR(1,IFFAT)=30.0D+00
               ZLPR(1,IFFAT)= 0.6D+00
            END IF
            WRITE(IP,1020)ATMNAM(IFFAT),
     *                    ZMAS(IFFAT)/1822.88850204D+00,
     *                    CHARG(IFFAT),POL(IFFAT)*TOANGS**3,
     *                    SIG(IFFAT),EPS(IFFAT),
     *                    SIG2(IFFAT),EPS2(IFFAT)
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- PRINT OUT QMMMREP --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'QMMMREP    N       C1     Z1       C2     Z2',
     *          '       C3     Z3       C4     Z4'
         DO IFFAT=1,NFFAT
            WRITE(IP,1030) ATMNAM(IFFAT),4,
     *                 CLPR(1,IFFAT),ZLPR(1,IFFAT),
     *                 CLPR(2,IFFAT),ZLPR(2,IFFAT),
     *                 CLPR(3,IFFAT),ZLPR(3,IFFAT),
     *                 CLPR(4,IFFAT),ZLPR(4,IFFAT)
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- BONDS --
C
      IF(MASWRK) THEN
         WRITE(IP,*)
     *   'BOND     #     ATM1     ATM2           FC        R0'
         DO IBOND=1,NBOND
            WRITE(IP,1040)IBOND,IPAIR(1,IBOND),IPAIR(2,IBOND),
     *                 FCBOND(IBOND)*TOKCAL*TOBOHR*TOBOHR,
     *                 BOND0(IBOND)*TOANGS
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- ANGLES --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'ANGLE    #     ATM1     ATM2     ATM3 ',
     *          '          FC      ANGLE0'
         DO IANGL=1,NANGL
            WRITE(IP,1050)IANGL,KLIST(1,IANGL),KLIST(2,IANGL),
     *                 KLIST(3,IANGL),FCANGL(IANGL)*TOKCAL,
     *                 ANGL0(IANGL)*DEGREE
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- STRETCH-BEND INTERACTION --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'STRBEND  #    BOND1    BOND2',
     *          '          FC1          FC2'
         WRITE(IW,*)'STRBEND  #    ATOM1    ATOM2',
     *          '    ATOM3    FCSTBD1    FCSTBD2'
         DO IANGL=1,NANGL
            WRITE(IP,1055)IANGL,KBLST(1,IANGL),KBLST(2,IANGL),
     *                    FCSTBD(1,IANGL)*TOBOHR*TOKCAL,
     *                    FCSTBD(2,IANGL)*TOBOHR*TOKCAL
            WRITE(IW,'(1X,I10,1X,I8,1X,I8,1X,I8,1X,F10.4,1X,F10.4)')
     *      IANGL,KLIST(1,IANGL),KLIST(2,IANGL),KLIST(3,IANGL),
     *      FCSTBD(1,IANGL)/2.5121D+00/TOANGS/TOHART/DEGREE,
     *      FCSTBD(2,IANGL)/2.5121D+00/TOANGS/TOHART/DEGREE
         ENDDO
         WRITE(IP,*)'STOP'
         WRITE(IW,*)' '
      END IF
C
C     -- DIHEDRAL ROTATION 3V --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'DIHR3V   #     ATM1     ATM2     ATM3  ',
     *              '   ATM4     VROT1     VROT2     VROT3'
         DO IDIHR=1,NDIHR
            WRITE(IP,1065)
     *                 IDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                 LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                 FCDIHR(1,IDIHR)*TOKCAL,
     *                 FCDIHR(2,IDIHR)*TOKCAL,
     *                 FCDIHR(3,IDIHR)*TOKCAL
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- WAGGING --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'WAGGING  #     ATM2     ATM3     ATM4  ',
     *          '   ATM1         FC '
         DO IWAGG=1,NWAGG
            WRITE(IP,1080)IWAGG,MLIST(2,IWAGG),MLIST(3,IWAGG),
     *                    MLIST(4,IWAGG),MLIST(1,IWAGG),
     *                    FCWAGG(IWAGG)*TOKCAL
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- MMFF ATOM TYPE --
C
      IF(MASWRK) THEN
         WRITE(IP,*)'MMTYPE   #  MMFF94 FROM LOUT=1'
         WRITE(IP,'(2X,I9)')NFFAT
         NLINE = (NFFAT-1)/20 + 1
         DO I=1,NLINE
            JSTOP = 20
            IF(I.EQ.NLINE) JSTOP = NFFAT - (NLINE-1)*20
            WRITE(IP,'(I3,19(1X,I3))') (NTYPE((I-1)*20+J),J=1,JSTOP)
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
C
C     -- MMFF LJ TABLE --
C
      DO II=1,MXMMTP
         DO JJ=1,MXMMTP
            FCLJTP(1,JJ,II)=TOBOHR*1.0D-06*
     *                      NINT(1.0D+06*FCLJTP(1,JJ,II)*TOANGS)
            FCLJTP(2,JJ,II)=TOHART*1.0D-06*
     *                      NINT(1.0D+06*FCLJTP(2,JJ,II)*TOKCAL)
         ENDDO
      ENDDO
C
      IF(MASWRK) THEN
         WRITE(IP,*)
     *   'MMFFLJ   #                  I   J      RIJ    EPSIJ'
         WRITE(IP,'(2X,I9)')MXMMTP
         DO II=1,MXMMTP
            DO JJ=1,MXMMTP,3
               IF(JJ.LE.MXMMTP-2) THEN
                  WRITE(IP,'(3(1X,I3,1X,I3,1X,F8.6,1X,F8.6))')
     *            II,JJ  ,FCLJTP(1,JJ  ,II)*TOANGS,
     *                    FCLJTP(2,JJ  ,II)*TOKCAL,
     *            II,JJ+1,FCLJTP(1,JJ+1,II)*TOANGS,
     *                    FCLJTP(2,JJ+1,II)*TOKCAL,
     *            II,JJ+2,FCLJTP(1,JJ+2,II)*TOANGS,
     *                    FCLJTP(2,JJ+2,II)*TOKCAL
               END IF
               IF(JJ.EQ.MXMMTP-1) THEN
                  WRITE(IP,'(2(1X,I3,1X,I3,1X,F8.6,1X,F8.6))')
     *            II,JJ  ,FCLJTP(1,JJ  ,II)*TOANGS,
     *                    FCLJTP(2,JJ  ,II)*TOKCAL,
     *            II,JJ+1,FCLJTP(1,JJ+1,II)*TOANGS,
     *                    FCLJTP(2,JJ+1,II)*TOKCAL
               END IF
               IF(JJ.EQ.MXMMTP  ) THEN
                  WRITE(IP,'(1X,I3,1X,I3,1X,F8.6,1X,F8.6)')
     *            II,JJ  ,FCLJTP(1,JJ  ,II)*TOANGS,
     *                    FCLJTP(2,JJ  ,II)*TOKCAL
               END IF
            ENDDO
         ENDDO
         WRITE(IP,*)'STOP'
      END IF
      IF(MASWRK) WRITE(IP,*)'$END'
C
      IF(MASWRK) THEN
         WRITE(IW,*)'********************************************'
         WRITE(IW,*)'$FFDATA FOR MMFF94 IS GENERATED IN .DAT FILE'
         WRITE(IW,*)'********************************************'
      END IF
C
 1010 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1020 FORMAT(1X,A10,1X,F10.6,1X,F9.5,1X,F8.6,1X,
     *       F8.6,1X,F8.6,1X,F8.6,1X,F8.6)
 1030 FORMAT(1X,A10,1X,I1,1X,F8.5,1X,F6.4,1X,F8.5,1X,F6.4,
     *                    1X,F8.5,1X,F6.4,1X,F8.5,1X,F6.4,
     *                    1X,F8.5,1X,F6.4,1X,F8.5,1X,F6.4)
 1040 FORMAT(1X,I10,1X,I8,1X,I8,1X,F12.6,1X,F9.6)
 1050 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,F12.6,1X,F11.5)
 1055 FORMAT(1X,I10,1X,I8,1X,I8,1X,F12.6,1X,F12.6)
 1065 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,I8,1X,F9.5,1X,F9.5,1X,F9.5)
 1080 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,I8,1X,F10.6)
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMDENMUL
!>
!> @brief    multipole expansion of QM charges
!>
!> @author   Hui Li
!>           - May 2013
!>
!> @details  using the density grid points
!>           very time consuming
!>
      SUBROUTINE QMDENMUL(NIMGPT,CRDIMG,CHGIMG,DIPIMG,QADIMG,OCTIMG)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000, MXAO=8192)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION ELDEN(1),CRDIMG(3,*),CHGIMG(*),
     *          DIPIMG(3,*),QADIMG(6,*),OCTIMG(10,*)
C
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /MASSES/ ZMASS(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
      COMMON /XYZPRP/ XP,YP,ZP,
     *                DMX,DMY,DMZ,
     *                QXX,QYY,QZZ,QXY,QXZ,QYZ,
     *                QMXX,QMYY,QMZZ,QMXY,QMXZ,QMYZ,
     *                OXXX,OXXY,OXXZ,OXYY,OYYY,OYYZ,
     *                OXZZ,OYZZ,OZZZ,OXYZ,
     *                OMXXX,OMXXY,OMXXZ,OMXYY,OMYYY,
     *                OMYYZ,OMXZZ,OMYZZ,OMZZZ,OMXYZ
C
      DATA ELDEN/8HELDEN   /
      DATA SEVEN/7.0D+00/
C
C     CALCULATE ELECTRON DENSITY FOR ENTIRE
C     WAVE FUNCTION AT GRID POINTS THEN COLLECT THE CHARGES
C     ON ATOMIC CENTERS AND BOND MIDPOINTS AS MULTIPOLAR
C     EXPANSION POINTS.
C
      NATSV = NAT
C
C     -- SET POINTERS FOR PARTITIONING OF MEMORY
C
      L1 = NUM
      L2 = (L1*L1+L1)/2
      L3 = L1*L1
      NVAL = 1
      MXGRID = 100000 * NAT
C
C     -- ALLOCATE MEMORY
C
      CALL VALFM(LOADFM)
      LCRD = LOADFM + 1
      LCHG = LCRD   + MXGRID*3
      LMON = LCHG   + MXGRID
      LDIP = LMON   + 3*NAT
      LQUA = LDIP   + 3*3*NAT
      LOCT = LQUA   + 6*3*NAT
      IELD = LOCT   + 10*3*NAT
      IEDW = IELD   + L2
C
      IDENSA = IEDW   + 784
      IDENSB = IDENSA + L2
      LAST1  = IDENSB + L2 - 1
C
      IMOS   = IEDW   + 784
      INDEX  = IMOS   + L3
      LAST2  = INDEX  + L1 - 1
C
      LAST = MAX(LAST1,LAST2)
      NEED = LAST - LCRD + 1
      CALL GETFM(NEED)
      CALL VCLR(X(LCRD),1,NEED)
C
C     -- OBTAIN TOTAL DENSITY MATRIX
      CALL DENDD1(X(IDENSA),X(IDENSB),L2)
C
C     -- DEFINE 3-D BOX FOR THE MOLECULE
C
      DO NCRD = 1, 3
        TMAX = C(NCRD,1)
        TMIN = C(NCRD,1)
        DO IAT = 2, NAT
          IF(C(NCRD,IAT).GT.TMAX) TMAX = C(NCRD,IAT)
          IF(C(NCRD,IAT).LT.TMIN) TMIN = C(NCRD,IAT)
        ENDDO
        IF(NCRD.EQ.1) XMAX = INT(TMAX + SEVEN)
        IF(NCRD.EQ.1) XMIN = INT(TMIN - SEVEN)
        IF(NCRD.EQ.2) YMAX = INT(TMAX + SEVEN)
        IF(NCRD.EQ.2) YMIN = INT(TMIN - SEVEN)
        IF(NCRD.EQ.3) ZMAX = INT(TMAX + SEVEN)
        IF(NCRD.EQ.3) ZMIN = INT(TMIN - SEVEN)
      ENDDO
      NGRIDX = INT(XMAX - XMIN)
      NGRIDY = INT(YMAX - YMIN)
      NGRIDZ = INT(ZMAX - ZMIN)
C
C     -- LOOP OVER GRID POINTS TO BE EVALUATED
C
      TOTAL = 0.0D+00
      IPOINT = 0
C
      IPCOUNT = ME - 1
      DO 300 IX = 1, NGRIDX
      DO 300 IY = 1, NGRIDY
      DO 300 IZ = 1, NGRIDZ
      IF(GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 300
      END IF
      IPOINT = IPOINT + 1
      XP = XMIN - 0.50D+00 + IX
      YP = YMIN - 0.50D+00 + IY
      ZP = ZMIN - 0.50D+00 + IZ
C
C     -- CALCULATE DELTA FUNCTION INTEGRALS
C
      CALL PRCALC(ELDEN,X(IELD),X(IEDW),NVAL,L2,.FALSE.)
C
C     -- CALCULATE ELECTRON DENSITY FOR ENTIRE WAVEFUNCTION
C
      EDENS = TRACEP(X(IDENSA),X(IELD),L1)
C
C     -- USE J-SUB-GRID
C
      IF (EDENS.GT.2.0D-06) THEN
         IPOINT = IPOINT - 1
         DO 310 JX = 0, 1
         DO 310 JY = 0, 1
         DO 310 JZ = 0, 1
         IPOINT = IPOINT + 1
         XP = XP - 0.25D+00 + 0.50D+00*JX
         YP = YP - 0.25D+00 + 0.50D+00*JY
         ZP = ZP - 0.25D+00 + 0.50D+00*JZ
C
         CALL PRCALC(ELDEN,X(IELD),X(IEDW),NVAL,L2,.FALSE.)
C
         EDENS = TRACEP(X(IDENSA),X(IELD),L1)
C
C        -- USE K-SUB-GRID
C
         IF (EDENS.GT.2.0D-02) THEN
            IPOINT = IPOINT - 1
            DO 320 KX = 0, 1
            DO 320 KY = 0, 1
            DO 320 KZ = 0, 1
            IPOINT = IPOINT + 1
            XP = XP - 0.125D+00 + 0.25D+00*KX
            YP = YP - 0.125D+00 + 0.25D+00*KY
            ZP = ZP - 0.125D+00 + 0.25D+00*KZ
C
            CALL PRCALC(ELDEN,X(IELD),X(IEDW),NVAL,L2,.FALSE.)
C
            EDENS = TRACEP(X(IDENSA),X(IELD),L1)
C
C           -- USE L-SUB-GRID
C
            IF (EDENS.GT.2.0D-01) THEN
               IPOINT = IPOINT - 1
               DO 330 LX = 0, 1
               DO 330 LY = 0, 1
               DO 330 LZ = 0, 1
               IPOINT = IPOINT + 1
               XP = XP - 0.0625D+00 + 0.125D+00*LX
               YP = YP - 0.0625D+00 + 0.125D+00*LY
               ZP = ZP - 0.0625D+00 + 0.125D+00*LZ
C
               CALL PRCALC(ELDEN,X(IELD),X(IEDW),NVAL,L2,.FALSE.)
C
               EDENS = TRACEP(X(IDENSA),X(IELD),L1)
C
C              -- USE M-SUB-GRID
C
               IF (EDENS.GT.2.0D+00) THEN
                  IPOINT = IPOINT - 1
                  DO 340 MX = 0, 1
                  DO 340 MY = 0, 1
                  DO 340 MZ = 0, 1
                  IPOINT = IPOINT + 1
                  XP =XP - 0.03125D+00 + 0.0625D+00*MX
                  YP =YP - 0.03125D+00 + 0.0625D+00*MY
                  ZP =ZP - 0.03125D+00 + 0.0625D+00*MZ
C
                  CALL PRCALC(ELDEN,X(IELD),X(IEDW),NVAL,L2,.FALSE.)
C
                  EDENS = TRACEP(X(IDENSA),X(IELD),L1)
C
C                 -- USE N-SUB-GRID
C
                  IF (EDENS.GT.2.0D+01) THEN
                     IPOINT = IPOINT - 1
                     DO 350 NX = 0, 1
                     DO 350 NY = 0, 1
                     DO 350 NZ = 0, 1
                     IPOINT = IPOINT + 1
                     XP =XP - 0.015625D+00 + 0.03125D+00*NX
                     YP =YP - 0.015625D+00 + 0.03125D+00*NY
                     ZP =ZP - 0.015625D+00 + 0.03125D+00*NZ
C
                     CALL PRCALC(ELDEN,X(IELD),X(IEDW),NVAL,L2,.FALSE.)
C
                     EDENS = TRACEP(X(IDENSA),X(IELD),L1)
C
C                    -- USE N2-SUB-GRID
C
                     IF (EDENS.GT.2.0D+02) THEN
                        IPOINT = IPOINT - 1
                        DO 360 N2X = 0, 1
                        DO 360 N2Y = 0, 1
                        DO 360 N2Z = 0, 1
                        IPOINT = IPOINT + 1
                        XP=XP- 0.0078125D+00 +0.015625D+00*N2X
                        YP=YP- 0.0078125D+00 +0.015625D+00*N2Y
                        ZP=ZP- 0.0078125D+00 +0.015625D+00*N2Z
C
                        CALL PRCALC(ELDEN,X(IELD),X(IEDW),
     *                              NVAL,L2,.FALSE.)
C
                        EDENS = TRACEP(X(IDENSA),X(IELD),L1)
C
C                       -- USE N3-SUB-GRID
C
                        IF (EDENS.GT.2.0D+03) THEN
                           IPOINT = IPOINT - 1
                           DO 370 N3X = 0, 1
                           DO 370 N3Y = 0, 1
                           DO 370 N3Z = 0, 1
                           IPOINT = IPOINT + 1
                           XP=XP-3.90625D-03 +7.8125D-03*N3X
                           YP=YP-3.90625D-03 +7.8125D-03*N3Y
                           ZP=ZP-3.90625D-03 +7.8125D-03*N3Z
C
                           CALL PRCALC(ELDEN,X(IELD),X(IEDW),
     *                                 NVAL,L2,.FALSE.)
C
                           EDENS = TRACEP(X(IDENSA),X(IELD),L1)
C
C                          -- USE N4-SUB-GRID
C
                           IF (EDENS.GT.2.0D+04) THEN
                              IPOINT = IPOINT - 1
                              DO 380 N4X = 0, 1
                              DO 380 N4Y = 0, 1
                              DO 380 N4Z = 0, 1
                              IPOINT = IPOINT + 1
                              XP=XP-1.953125D-03 +3.90625D-03*N4X
                              YP=YP-1.953125D-03 +3.90625D-03*N4Y
                              ZP=ZP-1.953125D-03 +3.90625D-03*N4Z
C
                              CALL PRCALC(ELDEN,X(IELD),X(IEDW),
     *                                    NVAL,L2,.FALSE.)
C
                              EDENS = TRACEP(X(IDENSA),X(IELD),L1)
                              X(LCRD+(IPOINT-1)*3  ) = XP
                              X(LCRD+(IPOINT-1)*3+1) = YP
                              X(LCRD+(IPOINT-1)*3+2) = ZP
                              DUM = EDENS*0.125D+00**8
                              X(LCHG-1+IPOINT) = DUM
                              TOTAL = TOTAL + DUM
                              XP=XP+1.953125D-03 -3.90625D-03*N4X
                              YP=YP+1.953125D-03 -3.90625D-03*N4Y
                              ZP=ZP+1.953125D-03 -3.90625D-03*N4Z
 380                          CONTINUE
                           ELSE
                              X(LCRD+(IPOINT-1)*3  ) = XP
                              X(LCRD+(IPOINT-1)*3+1) = YP
                              X(LCRD+(IPOINT-1)*3+2) = ZP
                              DUM = EDENS*0.125D+00**7
                              X(LCHG-1+IPOINT) = DUM
                              TOTAL = TOTAL + DUM
                           END IF
                           XP=XP+3.90625D-03 -7.8125D-03*N3X
                           YP=YP+3.90625D-03 -7.8125D-03*N3Y
                           ZP=ZP+3.90625D-03 -7.8125D-03*N3Z
 370                       CONTINUE
                        ELSE
                           X(LCRD+(IPOINT-1)*3  ) = XP
                           X(LCRD+(IPOINT-1)*3+1) = YP
                           X(LCRD+(IPOINT-1)*3+2) = ZP
                           DUM = EDENS*0.125D+00**6
                           X(LCHG-1+IPOINT) = DUM
                           TOTAL = TOTAL + DUM
                        END IF
                        XP=XP+ 0.0078125D+00 -0.015625D+00*N2X
                        YP=YP+ 0.0078125D+00 -0.015625D+00*N2Y
                        ZP=ZP+ 0.0078125D+00 -0.015625D+00*N2Z
 360                    CONTINUE
                     ELSE
                        X(LCRD+(IPOINT-1)*3  ) = XP
                        X(LCRD+(IPOINT-1)*3+1) = YP
                        X(LCRD+(IPOINT-1)*3+2) = ZP
                        DUM = EDENS*0.125D+00**5
                        X(LCHG-1+IPOINT) = DUM
                        TOTAL = TOTAL + DUM
                     END IF
                     XP =XP + 0.015625D+00 - 0.03125D+00*NX
                     YP =YP + 0.015625D+00 - 0.03125D+00*NY
                     ZP =ZP + 0.015625D+00 - 0.03125D+00*NZ
 350                 CONTINUE
                  ELSE
                     X(LCRD+(IPOINT-1)*3  ) = XP
                     X(LCRD+(IPOINT-1)*3+1) = YP
                     X(LCRD+(IPOINT-1)*3+2) = ZP
                     DUM = EDENS*0.125D+00**4
                     X(LCHG-1+IPOINT) = DUM
                     TOTAL = TOTAL + DUM
                  END IF
                  XP =XP + 0.03125D+00 - 0.0625D+00*MX
                  YP =YP + 0.03125D+00 - 0.0625D+00*MY
                  ZP =ZP + 0.03125D+00 - 0.0625D+00*MZ
 340              CONTINUE
               ELSE
                  X(LCRD+(IPOINT-1)*3  ) = XP
                  X(LCRD+(IPOINT-1)*3+1) = YP
                  X(LCRD+(IPOINT-1)*3+2) = ZP
                  DUM = EDENS*0.125D+00**3
                  X(LCHG-1+IPOINT) = DUM
                  TOTAL = TOTAL + DUM
               END IF
               XP = XP + 0.0625D+00 - 0.125D+00*LX
               YP = YP + 0.0625D+00 - 0.125D+00*LY
               ZP = ZP + 0.0625D+00 - 0.125D+00*LZ
 330           CONTINUE
            ELSE
               X(LCRD+(IPOINT-1)*3  ) = XP
               X(LCRD+(IPOINT-1)*3+1) = YP
               X(LCRD+(IPOINT-1)*3+2) = ZP
               DUM = EDENS*0.125D+00**2
               X(LCHG-1+IPOINT) = DUM
               TOTAL = TOTAL + DUM
            END IF
            XP = XP + 0.125D+00 - 0.25D+00*KX
            YP = YP + 0.125D+00 - 0.25D+00*KY
            ZP = ZP + 0.125D+00 - 0.25D+00*KZ
 320        CONTINUE
         ELSE
            X(LCRD+(IPOINT-1)*3  ) = XP
            X(LCRD+(IPOINT-1)*3+1) = YP
            X(LCRD+(IPOINT-1)*3+2) = ZP
            DUM = EDENS*0.125D+00
            X(LCHG-1+IPOINT) = DUM
            TOTAL = TOTAL + DUM
         END IF
         XP = XP + 0.25D+00 - 0.50D+00*JX
         YP = YP + 0.25D+00 - 0.50D+00*JY
         ZP = ZP + 0.25D+00 - 0.50D+00*JZ
 310     CONTINUE
      ELSE
         X(LCRD+(IPOINT-1)*3  ) = XP
         X(LCRD+(IPOINT-1)*3+1) = YP
         X(LCRD+(IPOINT-1)*3+2) = ZP
         DUM = EDENS
         X(LCHG-1+IPOINT) = DUM
         TOTAL = TOTAL + DUM
      END IF
 300  CONTINUE
C
      IPOINTSV = IPOINT
      IF(GOPARR) CALL DDI_GSUMI(2406,IPOINT,1)
      IPOINTT  = IPOINT
      IPOINT   = IPOINTSV
      IF(GOPARR) CALL DDI_GSUMF(2407,TOTAL,1)
C
      SCALE = NE/TOTAL
      DO JPT = 1, IPOINT
         X(LCHG-1+JPT) = X(LCHG-1+JPT) * SCALE
      END DO
      IF(MASWRK) THEN
         WRITE(IW,*) '- QUANPOL DENSITY BASED MULTIPOLE EXPANSION - '
         WRITE(IW,*) IPOINTT,'GRID POINTS ARE USED'
         WRITE(IW,*) 'TOTAL NUMBER OF ELECTRONS =', NE
         WRITE(IW,'(A,F9.5)')
     *     ' TOTAL CHARGE OBTAINED FROM GRID INTEGRAL =', TOTAL
         WRITE(IW,'(A,F7.5,A)')
     *     ' A SCALING FACTOR OF ', SCALE, ' IS APPLIED'
         WRITE(IW,*)
     *     'THE EXPANSION POINTS ARE PUNCHED OUT IN THE DAT FILE'
         WRITE(IW,*) ' '
      END IF
C
C
C     -- MULTIPOLAR EXPANSION
C
      DO 400 JPT = 1, IPOINT
         XPT = X(LCRD+(JPT-1)*3  )
         YPT = X(LCRD+(JPT-1)*3+1)
         ZPT = X(LCRD+(JPT-1)*3+2)
         QPT = X(LCHG+JPT-1)
C
C        - FIND THE CLOSEST EXPANSION POINT
         TEMPR2 = 1.0D+10
         JAT = 1
         DO 410 IAT = 1, NAT
            R2 = (XPT-C(1,IAT))*(XPT-C(1,IAT))
     *          +(YPT-C(2,IAT))*(YPT-C(2,IAT))
     *          +(ZPT-C(3,IAT))*(ZPT-C(3,IAT))
            IF(R2.LT.TEMPR2) THEN
               TEMPR2 = R2
               JAT    = IAT
            END IF
 410     CONTINUE
C
         KAT = 0
         DO 411 IAT = 1, NAT
            IF(NINT(ZAN(IAT)).LE. 3) TEMPR2 = (0.60D+00*TOBOHR)**2
            IF(NINT(ZAN(IAT)).GT. 3) TEMPR2 = (0.90D+00*TOBOHR)**2
            IF(NINT(ZAN(IAT)).GT.13) TEMPR2 = (1.10D+00*TOBOHR)**2
            R2 = (XPT-C(1,IAT))*(XPT-C(1,IAT))
     *          +(YPT-C(2,IAT))*(YPT-C(2,IAT))
     *          +(ZPT-C(3,IAT))*(ZPT-C(3,IAT))
            IF(R2.LT.TEMPR2.AND.IAT.NE.JAT) THEN
               KAT    = IAT
            END IF
 411     CONTINUE
         LAT = 0
         DO 412 IAT = 1, NAT
            IF(NINT(ZAN(IAT)).LE. 3) TEMPR2 = (0.60D+00*TOBOHR)**2
            IF(NINT(ZAN(IAT)).GT. 3) TEMPR2 = (0.90D+00*TOBOHR)**2
            IF(NINT(ZAN(IAT)).GT.13) TEMPR2 = (1.10D+00*TOBOHR)**2
            R2 = (XPT-C(1,IAT))*(XPT-C(1,IAT))
     *          +(YPT-C(2,IAT))*(YPT-C(2,IAT))
     *          +(ZPT-C(3,IAT))*(ZPT-C(3,IAT))
            IF(R2.LT.TEMPR2.AND.IAT.NE.JAT.AND.IAT.NE.KAT) THEN
               LAT    = IAT
            END IF
 412     CONTINUE
         MAT = 0
         DO 413 IAT = 1, NAT
            IF(NINT(ZAN(IAT)).LE. 3) TEMPR2 = (0.60D+00*TOBOHR)**2
            IF(NINT(ZAN(IAT)).GT. 3) TEMPR2 = (0.90D+00*TOBOHR)**2
            IF(NINT(ZAN(IAT)).GT.13) TEMPR2 = (1.10D+00*TOBOHR)**2
            R2 = (XPT-C(1,IAT))*(XPT-C(1,IAT))
     *          +(YPT-C(2,IAT))*(YPT-C(2,IAT))
     *          +(ZPT-C(3,IAT))*(ZPT-C(3,IAT))
            IF(R2.LT.TEMPR2.AND.IAT.NE.JAT.AND.IAT.NE.KAT
     *         .AND.IAT.NE.LAT) THEN
               MAT    = IAT
            END IF
 413     CONTINUE
         MAT2= 0
         DO 414 IAT = 1, NAT
            IF(NINT(ZAN(IAT)).LE. 3) TEMPR2 = (0.60D+00*TOBOHR)**2
            IF(NINT(ZAN(IAT)).GT. 3) TEMPR2 = (0.90D+00*TOBOHR)**2
            IF(NINT(ZAN(IAT)).GT.13) TEMPR2 = (1.10D+00*TOBOHR)**2
            R2 = (XPT-C(1,IAT))*(XPT-C(1,IAT))
     *          +(YPT-C(2,IAT))*(YPT-C(2,IAT))
     *          +(ZPT-C(3,IAT))*(ZPT-C(3,IAT))
            IF(R2.LT.TEMPR2.AND.IAT.NE.JAT.AND.IAT.NE.KAT
     *         .AND.IAT.NE.LAT.AND.IAT.NE.MAT) THEN
               MAT2   = IAT
            END IF
 414     CONTINUE
C
         IF(KAT.GT.0.AND.LAT.EQ.0.AND.MAT.EQ.0.AND.MAT2.EQ.0)
     *      QPT = 0.50D+00*X(LCHG+JPT-1)
         IF(KAT.GT.0.AND.LAT.GT.0.AND.MAT.EQ.0.AND.MAT2.EQ.0)
     *      QPT = X(LCHG+JPT-1)/3.0D+00
         IF(KAT.GT.0.AND.LAT.GT.0.AND.MAT.GT.0.AND.MAT2.EQ.0) 
     *      QPT = 0.25D+00*X(LCHG+JPT-1)
         IF(KAT.GT.0.AND.LAT.GT.0.AND.MAT.GT.0.AND.MAT2.GT.0)
     *      QPT = 0.20D+00*X(LCHG+JPT-1)
C
C        - DISTANCES
         DX = XPT - C(1,JAT)
         DY = YPT - C(2,JAT)
         DZ = ZPT - C(3,JAT)
C        - MONOPOLES
         X(LMON+JAT-1) = X(LMON+JAT-1) - QPT
C        - DIPOLES
         X(LDIP+(JAT-1)*3  ) = X(LDIP+(JAT-1)*3  ) - QPT*DX
         X(LDIP+(JAT-1)*3+1) = X(LDIP+(JAT-1)*3+1) - QPT*DY
         X(LDIP+(JAT-1)*3+2) = X(LDIP+(JAT-1)*3+2) - QPT*DZ
C        - QUADRUPOLES
         X(LQUA+(JAT-1)*6  ) = X(LQUA+(JAT-1)*6  ) - QPT*DX*DX
         X(LQUA+(JAT-1)*6+1) = X(LQUA+(JAT-1)*6+1) - QPT*DY*DY
         X(LQUA+(JAT-1)*6+2) = X(LQUA+(JAT-1)*6+2) - QPT*DZ*DZ
         X(LQUA+(JAT-1)*6+3) = X(LQUA+(JAT-1)*6+3) - QPT*DX*DY
         X(LQUA+(JAT-1)*6+4) = X(LQUA+(JAT-1)*6+4) - QPT*DX*DZ
         X(LQUA+(JAT-1)*6+5) = X(LQUA+(JAT-1)*6+5) - QPT*DY*DZ
C        - OCTUPOLES
         X(LOCT+(JAT-1)*10  ) = X(LOCT+(JAT-1)*10  ) - QPT*DX*DX*DX
         X(LOCT+(JAT-1)*10+1) = X(LOCT+(JAT-1)*10+1) - QPT*DY*DY*DY
         X(LOCT+(JAT-1)*10+2) = X(LOCT+(JAT-1)*10+2) - QPT*DZ*DZ*DZ
         X(LOCT+(JAT-1)*10+3) = X(LOCT+(JAT-1)*10+3) - QPT*DX*DX*DY
         X(LOCT+(JAT-1)*10+4) = X(LOCT+(JAT-1)*10+4) - QPT*DX*DX*DZ
         X(LOCT+(JAT-1)*10+5) = X(LOCT+(JAT-1)*10+5) - QPT*DX*DY*DY
         X(LOCT+(JAT-1)*10+6) = X(LOCT+(JAT-1)*10+6) - QPT*DY*DY*DZ
         X(LOCT+(JAT-1)*10+7) = X(LOCT+(JAT-1)*10+7) - QPT*DX*DZ*DZ
         X(LOCT+(JAT-1)*10+8) = X(LOCT+(JAT-1)*10+8) - QPT*DY*DZ*DZ
         X(LOCT+(JAT-1)*10+9) = X(LOCT+(JAT-1)*10+9) - QPT*DX*DY*DZ
C
         IF(KAT.GT.0) THEN
C        - DISTANCES
         DX = XPT - C(1,KAT)
         DY = YPT - C(2,KAT)
         DZ = ZPT - C(3,KAT)
C        - MONOPOLES
         X(LMON+KAT-1) = X(LMON+KAT-1) - QPT
C        - DIPOLES
         X(LDIP+(KAT-1)*3  ) = X(LDIP+(KAT-1)*3  ) - QPT*DX
         X(LDIP+(KAT-1)*3+1) = X(LDIP+(KAT-1)*3+1) - QPT*DY
         X(LDIP+(KAT-1)*3+2) = X(LDIP+(KAT-1)*3+2) - QPT*DZ
C        - QUADRUPOLES
         X(LQUA+(KAT-1)*6  ) = X(LQUA+(KAT-1)*6  ) - QPT*DX*DX
         X(LQUA+(KAT-1)*6+1) = X(LQUA+(KAT-1)*6+1) - QPT*DY*DY
         X(LQUA+(KAT-1)*6+2) = X(LQUA+(KAT-1)*6+2) - QPT*DZ*DZ
         X(LQUA+(KAT-1)*6+3) = X(LQUA+(KAT-1)*6+3) - QPT*DX*DY
         X(LQUA+(KAT-1)*6+4) = X(LQUA+(KAT-1)*6+4) - QPT*DX*DZ
         X(LQUA+(KAT-1)*6+5) = X(LQUA+(KAT-1)*6+5) - QPT*DY*DZ
C        - OCTUPOLES
         X(LOCT+(KAT-1)*10  ) = X(LOCT+(KAT-1)*10  ) - QPT*DX*DX*DX
         X(LOCT+(KAT-1)*10+1) = X(LOCT+(KAT-1)*10+1) - QPT*DY*DY*DY
         X(LOCT+(KAT-1)*10+2) = X(LOCT+(KAT-1)*10+2) - QPT*DZ*DZ*DZ
         X(LOCT+(KAT-1)*10+3) = X(LOCT+(KAT-1)*10+3) - QPT*DX*DX*DY
         X(LOCT+(KAT-1)*10+4) = X(LOCT+(KAT-1)*10+4) - QPT*DX*DX*DZ
         X(LOCT+(KAT-1)*10+5) = X(LOCT+(KAT-1)*10+5) - QPT*DX*DY*DY
         X(LOCT+(KAT-1)*10+6) = X(LOCT+(KAT-1)*10+6) - QPT*DY*DY*DZ
         X(LOCT+(KAT-1)*10+7) = X(LOCT+(KAT-1)*10+7) - QPT*DX*DZ*DZ
         X(LOCT+(KAT-1)*10+8) = X(LOCT+(KAT-1)*10+8) - QPT*DY*DZ*DZ
         X(LOCT+(KAT-1)*10+9) = X(LOCT+(KAT-1)*10+9) - QPT*DX*DY*DZ
         END IF
C
         IF(LAT.GT.0) THEN
C        - DISTANCES
         DX = XPT - C(1,LAT)
         DY = YPT - C(2,LAT)
         DZ = ZPT - C(3,LAT)
C        - MONOPOLES
         X(LMON+LAT-1) = X(LMON+LAT-1) - QPT
C        - DIPOLES
         X(LDIP+(LAT-1)*3  ) = X(LDIP+(LAT-1)*3  ) - QPT*DX
         X(LDIP+(LAT-1)*3+1) = X(LDIP+(LAT-1)*3+1) - QPT*DY
         X(LDIP+(LAT-1)*3+2) = X(LDIP+(LAT-1)*3+2) - QPT*DZ
C        - QUADRUPOLES
         X(LQUA+(LAT-1)*6  ) = X(LQUA+(LAT-1)*6  ) - QPT*DX*DX
         X(LQUA+(LAT-1)*6+1) = X(LQUA+(LAT-1)*6+1) - QPT*DY*DY
         X(LQUA+(LAT-1)*6+2) = X(LQUA+(LAT-1)*6+2) - QPT*DZ*DZ
         X(LQUA+(LAT-1)*6+3) = X(LQUA+(LAT-1)*6+3) - QPT*DX*DY
         X(LQUA+(LAT-1)*6+4) = X(LQUA+(LAT-1)*6+4) - QPT*DX*DZ
         X(LQUA+(LAT-1)*6+5) = X(LQUA+(LAT-1)*6+5) - QPT*DY*DZ
C        - OCTUPOLES
         X(LOCT+(LAT-1)*10  ) = X(LOCT+(LAT-1)*10  ) - QPT*DX*DX*DX
         X(LOCT+(LAT-1)*10+1) = X(LOCT+(LAT-1)*10+1) - QPT*DY*DY*DY
         X(LOCT+(LAT-1)*10+2) = X(LOCT+(LAT-1)*10+2) - QPT*DZ*DZ*DZ
         X(LOCT+(LAT-1)*10+3) = X(LOCT+(LAT-1)*10+3) - QPT*DX*DX*DY
         X(LOCT+(LAT-1)*10+4) = X(LOCT+(LAT-1)*10+4) - QPT*DX*DX*DZ
         X(LOCT+(LAT-1)*10+5) = X(LOCT+(LAT-1)*10+5) - QPT*DX*DY*DY
         X(LOCT+(LAT-1)*10+6) = X(LOCT+(LAT-1)*10+6) - QPT*DY*DY*DZ
         X(LOCT+(LAT-1)*10+7) = X(LOCT+(LAT-1)*10+7) - QPT*DX*DZ*DZ
         X(LOCT+(LAT-1)*10+8) = X(LOCT+(LAT-1)*10+8) - QPT*DY*DZ*DZ
         X(LOCT+(LAT-1)*10+9) = X(LOCT+(LAT-1)*10+9) - QPT*DX*DY*DZ
         END IF
C
         IF(MAT.GT.0) THEN
C        - DISTANCES
         DX = XPT - C(1,MAT)
         DY = YPT - C(2,MAT)
         DZ = ZPT - C(3,MAT)
C        - MONOPOLES
         X(LMON+MAT-1) = X(LMON+MAT-1) - QPT
C        - DIPOLES
         X(LDIP+(MAT-1)*3  ) = X(LDIP+(MAT-1)*3  ) - QPT*DX
         X(LDIP+(MAT-1)*3+1) = X(LDIP+(MAT-1)*3+1) - QPT*DY
         X(LDIP+(MAT-1)*3+2) = X(LDIP+(MAT-1)*3+2) - QPT*DZ
C        - QUADRUPOLES
         X(LQUA+(MAT-1)*6  ) = X(LQUA+(MAT-1)*6  ) - QPT*DX*DX
         X(LQUA+(MAT-1)*6+1) = X(LQUA+(MAT-1)*6+1) - QPT*DY*DY
         X(LQUA+(MAT-1)*6+2) = X(LQUA+(MAT-1)*6+2) - QPT*DZ*DZ
         X(LQUA+(MAT-1)*6+3) = X(LQUA+(MAT-1)*6+3) - QPT*DX*DY
         X(LQUA+(MAT-1)*6+4) = X(LQUA+(MAT-1)*6+4) - QPT*DX*DZ
         X(LQUA+(MAT-1)*6+5) = X(LQUA+(MAT-1)*6+5) - QPT*DY*DZ
C        - OCTUPOLES
         X(LOCT+(MAT-1)*10  ) = X(LOCT+(MAT-1)*10  ) - QPT*DX*DX*DX
         X(LOCT+(MAT-1)*10+1) = X(LOCT+(MAT-1)*10+1) - QPT*DY*DY*DY
         X(LOCT+(MAT-1)*10+2) = X(LOCT+(MAT-1)*10+2) - QPT*DZ*DZ*DZ
         X(LOCT+(MAT-1)*10+3) = X(LOCT+(MAT-1)*10+3) - QPT*DX*DX*DY
         X(LOCT+(MAT-1)*10+4) = X(LOCT+(MAT-1)*10+4) - QPT*DX*DX*DZ
         X(LOCT+(MAT-1)*10+5) = X(LOCT+(MAT-1)*10+5) - QPT*DX*DY*DY
         X(LOCT+(MAT-1)*10+6) = X(LOCT+(MAT-1)*10+6) - QPT*DY*DY*DZ
         X(LOCT+(MAT-1)*10+7) = X(LOCT+(MAT-1)*10+7) - QPT*DX*DZ*DZ
         X(LOCT+(MAT-1)*10+8) = X(LOCT+(MAT-1)*10+8) - QPT*DY*DZ*DZ
         X(LOCT+(MAT-1)*10+9) = X(LOCT+(MAT-1)*10+9) - QPT*DX*DY*DZ
         END IF
C
         IF(MAT2.GT.0) THEN
C        - DISTANCES
         DX = XPT - C(1,MAT2)
         DY = YPT - C(2,MAT2)
         DZ = ZPT - C(3,MAT2)
C        - MONOPOLES
         X(LMON+MAT2-1) = X(LMON+MAT2-1) - QPT
C        - DIPOLES
         X(LDIP+(MAT2-1)*3  ) = X(LDIP+(MAT2-1)*3  ) - QPT*DX
         X(LDIP+(MAT2-1)*3+1) = X(LDIP+(MAT2-1)*3+1) - QPT*DY
         X(LDIP+(MAT2-1)*3+2) = X(LDIP+(MAT2-1)*3+2) - QPT*DZ
C        - QUADRUPOLES
         X(LQUA+(MAT2-1)*6  ) = X(LQUA+(MAT2-1)*6  ) - QPT*DX*DX
         X(LQUA+(MAT2-1)*6+1) = X(LQUA+(MAT2-1)*6+1) - QPT*DY*DY
         X(LQUA+(MAT2-1)*6+2) = X(LQUA+(MAT2-1)*6+2) - QPT*DZ*DZ
         X(LQUA+(MAT2-1)*6+3) = X(LQUA+(MAT2-1)*6+3) - QPT*DX*DY
         X(LQUA+(MAT2-1)*6+4) = X(LQUA+(MAT2-1)*6+4) - QPT*DX*DZ
         X(LQUA+(MAT2-1)*6+5) = X(LQUA+(MAT2-1)*6+5) - QPT*DY*DZ
C        - OCTUPOLES
         X(LOCT+(MAT2-1)*10  ) = X(LOCT+(MAT2-1)*10  ) - QPT*DX*DX*DX
         X(LOCT+(MAT2-1)*10+1) = X(LOCT+(MAT2-1)*10+1) - QPT*DY*DY*DY
         X(LOCT+(MAT2-1)*10+2) = X(LOCT+(MAT2-1)*10+2) - QPT*DZ*DZ*DZ
         X(LOCT+(MAT2-1)*10+3) = X(LOCT+(MAT2-1)*10+3) - QPT*DX*DX*DY
         X(LOCT+(MAT2-1)*10+4) = X(LOCT+(MAT2-1)*10+4) - QPT*DX*DX*DZ
         X(LOCT+(MAT2-1)*10+5) = X(LOCT+(MAT2-1)*10+5) - QPT*DX*DY*DY
         X(LOCT+(MAT2-1)*10+6) = X(LOCT+(MAT2-1)*10+6) - QPT*DY*DY*DZ
         X(LOCT+(MAT2-1)*10+7) = X(LOCT+(MAT2-1)*10+7) - QPT*DX*DZ*DZ
         X(LOCT+(MAT2-1)*10+8) = X(LOCT+(MAT2-1)*10+8) - QPT*DY*DZ*DZ
         X(LOCT+(MAT2-1)*10+9) = X(LOCT+(MAT2-1)*10+9) - QPT*DX*DY*DZ
         END IF
 400  CONTINUE
C
C
C     -- STORE MULTIPOLES
      NIMGPT=NAT
      DO I=1,NAT
         CRDIMG( 1,I)=C(1,I)
         CRDIMG( 2,I)=C(2,I)
         CRDIMG( 3,I)=C(3,I)
         CHGIMG(   I)=X(LMON+I-1)
         DIPIMG( 1,I)=X(LDIP+(I-1)*3  )
         DIPIMG( 2,I)=X(LDIP+(I-1)*3+1)
         DIPIMG( 3,I)=X(LDIP+(I-1)*3+2)
         QADIMG( 1,I)=X(LQUA+(I-1)*6  )
         QADIMG( 2,I)=X(LQUA+(I-1)*6+1)
         QADIMG( 3,I)=X(LQUA+(I-1)*6+2)
         QADIMG( 4,I)=X(LQUA+(I-1)*6+3)
         QADIMG( 5,I)=X(LQUA+(I-1)*6+4)
         QADIMG( 6,I)=X(LQUA+(I-1)*6+5)
         OCTIMG( 1,I)=X(LOCT+(I-1)*10  )
         OCTIMG( 2,I)=X(LOCT+(I-1)*10+1)
         OCTIMG( 3,I)=X(LOCT+(I-1)*10+2)
         OCTIMG( 4,I)=X(LOCT+(I-1)*10+3)
         OCTIMG( 5,I)=X(LOCT+(I-1)*10+4)
         OCTIMG( 6,I)=X(LOCT+(I-1)*10+5)
         OCTIMG( 7,I)=X(LOCT+(I-1)*10+6)
         OCTIMG( 8,I)=X(LOCT+(I-1)*10+7)
         OCTIMG( 9,I)=X(LOCT+(I-1)*10+8)
         OCTIMG(10,I)=X(LOCT+(I-1)*10+9)
      ENDDO
C
      IF(GOPARR) CALL DDI_GSUMF(2408,CHGIMG,NAT  )
      IF(GOPARR) CALL DDI_GSUMF(2409,DIPIMG,NAT*3)
      IF(GOPARR) CALL DDI_GSUMF(2410,QADIMG,NAT*6)
      IF(GOPARR) CALL DDI_GSUMF(2411,OCTIMG,NAT*10)
C
      DO I=1,NAT
         CHGIMG(I)=CHGIMG(I)+ZAN(I)
      ENDDO
C
      IF(MASWRK) THEN
      WRITE(IP,*) ' '
      WRITE(IP,'(A)') 'DENSITY BASED MULTIPOLE EXPANSION'
      WRITE(IP,*) 'COORDINATES'
      DO I=1,NAT
         WRITE(IP  ,'(A8,3F15.10,F12.7,F5.1)')
     *     ANAM(I),(C(J,I),J=1,3),ZMASS(I),ZAN(I)
      ENDDO
      WRITE(IP,*) 'STOP'
      WRITE(IP,*) 'MONOPOLES'
      DO I=1,NAT
         WRITE(IP,'(A8,F15.10,F10.5)')
     *     ANAM(I),X(LMON+I-1),ZAN(I)
      ENDDO
      WRITE(IP,*) 'STOP'
      WRITE(IP,*) 'DIPOLES'
      DO I=1,NAT
         WRITE(IP,'(A8,3(1X,F15.10))')
     *     ANAM(I),X(LDIP+(I-1)*3),X(LDIP+(I-1)*3+1),
     *     X(LDIP+(I-1)*3+2)
      ENDDO
      WRITE(IP,*) 'STOP'
      WRITE(IP,*) 'QUADRUPOLES'
      DO I=1,NAT
         WRITE(IP,'(A8,4(1X,F15.10),A2,/2(1X,F15.10))')
     *     ANAM(I),X(LQUA+(I-1)*6),X(LQUA+(I-1)*6+1),
     *     X(LQUA+(I-1)*6+2),
     *     X(LQUA+(I-1)*6+3),' >',X(LQUA+(I-1)*6+4),
     *     X(LQUA+(I-1)*6+5)
      ENDDO
      WRITE(IP,*) 'STOP'
      WRITE(IP,*) 'OCTUPOLES'
      DO I=1,NAT
         WRITE(IP,'(A8,4(1X,F15.10),A2,/4(1X,F15.10),A2)')
     *     ANAM(I),X(LOCT+(I-1)*10),X(LOCT+(I-1)*10+1),
     *     X(LOCT+(I-1)*10+2),
     *     X(LOCT+(I-1)*10+3),' >',X(LOCT+(I-1)*10+4),
     *     X(LOCT+(I-1)*10+5),
     *     X(LOCT+(I-1)*10+6),X(LOCT+(I-1)*10+7),
     *     ' >',X(LOCT+(I-1)*10+8),
     *     X(LOCT+(I-1)*10+9)
      ENDDO
      WRITE(IP,*) 'STOP'
      WRITE(IP,*) '$END'
      END IF
C
      CALL RETFM(NEED)
C
      NAT = NATSV
      RETURN
C
      END
C*MODULE QUANPO  *DECK QMMMMULCHG
!>
!> @brief    MM charge - QM multipole interactions
!>
!> @author   Hui Li
!>           - May 2013
!>    
!> @details  for QM/<MM> calculations
!>
      SUBROUTINE QMMMMULCHG(CORD,FFGRD,CHARG,NONLSTQ,CRDIMG,CHGIMG,
     *                      CRDIMB,CHGIMB,DIPIMG,QADIMG,OCTIMG,
     *                      DIPIMB,QADIMB,OCTIMB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00, ZERO=0.0D+00)
      PARAMETER (FIVE=5.0D+00, FIFTEN=15.0D+00, SIX=6.0D+00)
      PARAMETER (PT5=0.5D+00, ONEPT5=1.5D+00, SEVEN=7.0D+00)
      PARAMETER (TEN=10.0D+00, THIRTY=30.0D+00)
      PARAMETER (ONETHIRD=ONE/THREE, ONE5=ONE/FIVE)
C
      DIMENSION QUAD(6),OCT(10)
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),
     *          NONLSTQ(*),CRDIMG(3,*),CHGIMG(*),CRDIMB(3,*),CHGIMB(*),
     *          DIPIMG(3,*),QADIMG(6,*),OCTIMG(10,*),
     *          DIPIMB(3,*),QADIMB(6,*),OCTIMB(10,*)
C
      COMMON /FFFREE/ SOL1CH,SOL1LJ,SOL1IM,SOLFRE1MM,
     *                SOL2CH,SOL2LJ,SOL2IM,SOLFRE2MM,
     *                ASOL1CH,ASOL1LJ,ASOL1IM,ASOL1MM,
     *                ASOL2CH,ASOL2LJ,ASOL2IM,ASOL2MM,
     *                PMF1BD,PMF1AG,PMF1DR,PMF1DB,PMF1WG,PMF1CM,
     *                PMF1CH,PMF1PO,PMF1LJ,PMF1IM,PMFFRE1MM,
     *                EN12A,EN12B,EN123A,EN123B,EN123R4A,EN123R4B,
     *                EN234W1A,EN234W1B,EN123B4A,EN123B4B,
     *                EN12312A,EN12312B,
     *                ENCHARA,ENCHARB,ENPOLA,ENPOLB,
     *                ENRXNA,ENRXNB,ENRXNPOLA,ENRXNPOLB,
     *                ENRXNRA,ENRXNRB,ENLJRA,ENLJRB,ENLJDA,ENLJDB,
     *                ENCMAPA,ENCMAPB,ENFIXSOA,ENFIXSOB,
     *                ENIMGCHA,ENIMGCHB,ENCENTA,ENCENTB,WSIMUL,WPERT1,
     *                WPERT2,SOFTALJ,SOFTACH,
     *                ISOFTCR,IFEPTOP,IFEPTYP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMFLD/ ENIMGCH,ENIMGCHMN,PREMN,VOLMN,ENKMN,TEMMN,
     *                ENPMN,ENPMFLD,ENKMFLD,ENPOLMN,ONEMNFD,
     *                ENPMFLDAV,ENKMFLDAV,
     *                TEMMFLDAV,PREMFLDAV,VOLMFLDAV,
     *                SOL1IMMN,SOL2IMMN,
     *                SOLFRE1MN,SOLFRE2MN,
     *                FRE1QMMN,FRE2QMMN,
     *                MEANFLD,MEANSIZ,MFQMCHG,NIMGPT,NIMBPT,MFMERGE,
     *                LFFCORDMN,LFFCHGIMG,LFFCRDIMG,
     *                LFFQMGRDMN,LFFCORDM1,LFFCHGIMB,LFFCRDIMB,
     *                LFFDIPIMG,LFFQADIMG,LFFOCTIMG,
     *                LFFDIPIMB,LFFQADIMB,LFFOCTIMB,
     *                LFFMERGE,LFFINTLST
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRA,ONESWRA,SWRA2,ONESWRA2,
     *                SWRB,ONESWRB,SWRB2,ONESWRB2,ONESWRB4,
     *                SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRAQ,ONESWRAQ,SWRAQ2,ONESWRAQ2,
     *                SWRBQ,ONESWRBQ,SWRBQ2,ONESWRBQ2,ONESWRBQ4,
     *                SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMSIZE,QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFWID1,BUFWID2,RDAMP,
     *                EFIELDX,EFIELDY,EFIELDZ,QMCXSV2,QMCYSV2,QMCZSV2,
     *                EPS1RB,EPS1RB3,ONEXBOX,ONEYBOX,ONEZBOX,
     *                LQMCT,MXLIST1,NTODO,NTODOSV,NTODOQ,
     *                ISWITCH,ISHIFT,IPOLSHF,
     *                LFFLSTCELL,LFFCORDSV,
     *                LFFPOLSV,LFFCORDSV2,LFFNONLS2,LFFCORDSVQ,
     *                LFFMVFASTS2,LFFMVFASTS3,LFFMVFASTS4,
     *                LFFMVFASTL2,LFFMVFASTL3,LFFMVFASTL4,
     *                MXCHECK,MXLIST2,NTODO2,NTODO2SV
      COMMON /FFRMSD/ DIPT(8),TIMGYRA,TIMRALL,
     *                NATPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,
     *                NRIJMM,IJRMM(2,100),NRIJQM,IJRQM(2,100),
     *                NAIJKMM,IJKMM(3,100),NAIJKQM,IJKQM(3,100),
     *                NFIXMM,IFIXMM(200),NFIXQM,IFIXQM(200),
     *                NFIXMMB,IFIXMMB(200),NFIXQMB,IFIXQMB(200)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, MAY 8, 2013
C
C     MM CHARGE - QM IMAGE MULTIPOLE INTERACTION
C
      ENIMGCH = ZERO
      SOL1IM  = ZERO
      SOL2IM  = ZERO
      IF(IDOCHG.EQ.0) RETURN
C
      SIGN = ONE
      DWT1 = ZERO
      DWT2 = ZERO
C
      NTIME = 1
      IF(IFEPTOP.GT.0.AND.IDOPOL.EQ.0) NTIME = 2
C
      DO ITIME=1,NTIME
C
      IF(IFEPTOP.GT.0.AND.IDOPOL.EQ.0) THEN
         IF(ITIME.EQ.1) THEN
            SIGN = ONE - WSIMUL
            DWT1 = ONE - WPERT1
            DWT2 = ONE - WPERT2
         END IF
         IF(ITIME.EQ.2) THEN
            SIGN = WSIMUL
            DWT1 = WPERT1
            DWT2 = WPERT2
         END IF
      END IF
C
      IPCOUNT = ME - 1
      DO 200 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         QI = CHARG(IFFAT)
         IF(QI.EQ.ZERO) GOTO 200
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         IF(ITIME.EQ.1) NPT=NIMGPT
         IF(ITIME.EQ.2) NPT=NIMBPT
         DO 210 JIMGPT=1,NPT
            IF(ITIME.EQ.1)THEN
            QJ   = CHGIMG(JIMGPT)
            DIPX = DIPIMG(1,JIMGPT)
            DIPY = DIPIMG(2,JIMGPT)
            DIPZ = DIPIMG(3,JIMGPT)
            XX1  = QADIMG(1,JIMGPT)
            YY1  = QADIMG(2,JIMGPT)
            ZZ1  = QADIMG(3,JIMGPT)
            XY1  = QADIMG(4,JIMGPT)
            XZ1  = QADIMG(5,JIMGPT)
            YZ1  = QADIMG(6,JIMGPT)
            XXX1 = OCTIMG( 1,JIMGPT) * PT5
            YYY1 = OCTIMG( 2,JIMGPT) * PT5
            ZZZ1 = OCTIMG( 3,JIMGPT) * PT5
            XXY1 = OCTIMG( 4,JIMGPT) * PT5
            XXZ1 = OCTIMG( 5,JIMGPT) * PT5
            XYY1 = OCTIMG( 6,JIMGPT) * PT5
            YYZ1 = OCTIMG( 7,JIMGPT) * PT5
            XZZ1 = OCTIMG( 8,JIMGPT) * PT5
            YZZ1 = OCTIMG( 9,JIMGPT) * PT5
            XYZ1 = OCTIMG(10,JIMGPT) * PT5
            END IF
            IF(ITIME.EQ.2)THEN
            QJ   = CHGIMB(JIMGPT)
            DIPX = DIPIMB(1,JIMGPT)
            DIPY = DIPIMB(2,JIMGPT)
            DIPZ = DIPIMB(3,JIMGPT)
            XX1  = QADIMB(1,JIMGPT)
            YY1  = QADIMB(2,JIMGPT)
            ZZ1  = QADIMB(3,JIMGPT)
            XY1  = QADIMB(4,JIMGPT)
            XZ1  = QADIMB(5,JIMGPT)
            YZ1  = QADIMB(6,JIMGPT)
            XXX1 = OCTIMB( 1,JIMGPT) * PT5
            YYY1 = OCTIMB( 2,JIMGPT) * PT5
            ZZZ1 = OCTIMB( 3,JIMGPT) * PT5
            XXY1 = OCTIMB( 4,JIMGPT) * PT5
            XXZ1 = OCTIMB( 5,JIMGPT) * PT5
            XYY1 = OCTIMB( 6,JIMGPT) * PT5
            YYZ1 = OCTIMB( 7,JIMGPT) * PT5
            XZZ1 = OCTIMB( 8,JIMGPT) * PT5
            YZZ1 = OCTIMB( 9,JIMGPT) * PT5
            XYZ1 = OCTIMB(10,JIMGPT) * PT5
            END IF
C
            DUM     = XX1 + YY1 + ZZ1
            QUAD(1) = PT5 * (THREE * XX1 - DUM)
            QUAD(2) = PT5 * (THREE * YY1 - DUM)
            QUAD(3) = PT5 * (THREE * ZZ1 - DUM)
            QUAD(4) = ONEPT5 * XY1
            QUAD(5) = ONEPT5 * XZ1
            QUAD(6) = ONEPT5 * YZ1
            DUMX    = XXX1 + XYY1 + XZZ1
            DUMY    = XXY1 + YYY1 + YZZ1
            DUMZ    = XXZ1 + YYZ1 + ZZZ1
            OCT(1)  = FIVE * XXX1 - THREE * DUMX
            OCT(2)  = FIVE * YYY1 - THREE * DUMY
            OCT(3)  = FIVE * ZZZ1 - THREE * DUMZ
            OCT(4)  = FIVE * XXY1 - DUMY
            OCT(5)  = FIVE * XXZ1 - DUMZ
            OCT(6)  = FIVE * XYY1 - DUMX
            OCT(7)  = FIVE * YYZ1 - DUMZ
            OCT(8)  = FIVE * XZZ1 - DUMX
            OCT(9)  = FIVE * YZZ1 - DUMY
            OCT(10) = FIVE * XYZ1
C
            IF(ITIME.EQ.1) THEN
               X  = CORD(1,IFFAT) - CRDIMG(1,JIMGPT)
               Y  = CORD(2,IFFAT) - CRDIMG(2,JIMGPT)
               Z  = CORD(3,IFFAT) - CRDIMG(3,JIMGPT)
            END IF
            IF(ITIME.EQ.2) THEN
               X  = CORD(1,IFFAT) - CRDIMB(1,JIMGPT)
               Y  = CORD(2,IFFAT) - CRDIMB(2,JIMGPT)
               Z  = CORD(3,IFFAT) - CRDIMB(3,JIMGPT)
            END IF
            PBCX  = XBOX*ANINT(X*ONEXBOX)
            PBCY  = YBOX*ANINT(Y*ONEYBOX)
            PBCZ  = ZBOX*ANINT(Z*ONEZBOX)
            X     = X - PBCX
            Y     = Y - PBCY
            Z     = Z - PBCZ
            XX    = X*X
            YY    = Y*Y
            ZZ    = Z*Z
            R2    = XX+YY+ZZ
C
            IF(R2.GT.SWRB2) GOTO 210
            IF(R2.LT.1.0D-10) GOTO 210
            R     = SQRT(R2)
            ONER  = ONE/R
            CALL SHIFT(R2,R,ONER,X,Y,Z)
            ONER2 = ONER*ONER
            ONER3 = ONER*ONER2
            ONER5 = ONER2*ONER3
            ONER7 = ONER2*ONER5
            ONER9 = ONER2*ONER7
            XY    = X*Y
            XZ    = X*Z
            YZ    = Y*Z
            XXX   = XX*X
            YYY   = YY*Y
            ZZZ   = ZZ*Z
            XXY   = XX*Y
            XXZ   = XX*Z
            XYY   = XY*Y
            YYZ   = YY*Z
            XZZ   = XZ*Z
            YZZ   = YZ*Z
            XYZ   = XY*Z
            RRX   = R2*X
            RRY   = R2*Y
            RRZ   = R2*Z
            CFXX  = THREE*XX-R2
            CFYY  = THREE*YY-R2
            CFZZ  = THREE*ZZ-R2
            CFXY  = THREE*XY
            CFXZ  = THREE*XZ
            CFYZ  = THREE*YZ
            CFXXX = FIVE*XXX-THREE*RRX
            CFYYY = FIVE*YYY-THREE*RRY
            CFZZZ = FIVE*ZZZ-THREE*RRZ
            CFXXY = FIVE*XXY-RRY
            CFXXZ = FIVE*XXZ-RRZ
            CFXYY = FIVE*XYY-RRX
            CFYYZ = FIVE*YYZ-RRZ
            CFXZZ = FIVE*XZZ-RRX
            CFYZZ = FIVE*YZZ-RRY
            CFXYZ = FIVE*XYZ
            DUM7  = ONER7*ONE5
            DUM9  = SEVEN*ONER9*ONE5
C
            RMU2  = X*DIPX+Y*DIPY+Z*DIPZ
            EPAIR = QI*QJ*ONER
     *            + QI*RMU2*ONER3
     *            + QI*(QUAD(1)*CFXX       + 
     *                  QUAD(2)*CFYY       +
     *                  QUAD(3)*CFZZ       + 
     *                  TWO*(QUAD(4)*CFXY +
     *                       QUAD(5)*CFXZ + 
     *                       QUAD(6)*CFYZ) )*ONER5*ONETHIRD
     *            + QI*(       OCT(1)*CFXXX +
     *                         OCT(2)*CFYYY +
     *                         OCT(3)*CFZZZ +
     *                  THREE*(OCT(4)*CFXXY +
     *                         OCT(5)*CFXXZ +
     *                         OCT(6)*CFXYY +
     *                         OCT(7)*CFYYZ +
     *                         OCT(8)*CFXZZ +
     *                         OCT(9)*CFYZZ  ) +
     *                     SIX*OCT(10)*CFXYZ      )*ONER7*ONE5
            EDUMW1= EPAIR*DWT1
            EDUMW2= EPAIR*DWT2
            EDUM  = EPAIR*SIGN
            EPAIR = EDUM
            ENIMGCH= ENIMGCH + EPAIR*SWF
            IF(IFEPTOP.GT.0.AND.IDOPOL.EQ.0) THEN
               SOL1IM= SOL1IM + (EDUMW1 - EDUM)*SWF
               SOL2IM= SOL2IM + (EDUMW2 - EDUM)*SWF
            END IF
C           - CHARGE-CHARGE
            DETT  = -QI*QJ*ONER3
            DEX   = DETT*X
            DEY   = DETT*Y
            DEZ   = DETT*Z
C           - CHARGE-DIPOLE
            TERM1 = QI*ONER3
            TERM2 = RMU2*QI*THREE*ONER5
            DEX   = DEX + DIPX*TERM1 - X*TERM2
            DEY   = DEY + DIPY*TERM1 - Y*TERM2
            DEZ   = DEZ + DIPZ*TERM1 - Z*TERM2
C           - CHARGE-QUADRUPOLE
            DCFXX = FIVE*XX-R2
            DCFYY = FIVE*YY-R2
            DCFZZ = FIVE*ZZ-R2
            DCFXY = FIVE*XY
            DCFXZ = FIVE*XZ
            DCFYZ = FIVE*YZ
            TERM1 = (QUAD(1)*DCFXX + QUAD(2)*DCFYY +
     *               QUAD(3)*DCFZZ + TWO*(QUAD(4)*DCFXY +
     *               QUAD(5)*DCFXZ + QUAD(6)*DCFYZ))*QI*ONER7
            QUA2X = QUAD(1)*X+QUAD(4)*Y+QUAD(5)*Z
            QUA2Y = QUAD(4)*X+QUAD(2)*Y+QUAD(6)*Z
            QUA2Z = QUAD(5)*X+QUAD(6)*Y+QUAD(3)*Z
            TERM2 = TWO*ONER5*QI
            TJMX  = TERM2*QUA2X
            TJMY  = TERM2*QUA2Y
            TJMZ  = TERM2*QUA2Z
            DEX   = DEX + TJMX - TERM1*X
            DEY   = DEY + TJMY - TERM1*Y
            DEZ   = DEZ + TJMZ - TERM1*Z
C           - CHARGE-OCTUPOLE
            TERM2 = QI*DUM9*
     *              (OCT(1)*CFXXX + OCT(2)*CFYYY + OCT(3)*CFZZZ
     *               +THREE*(OCT(4)*CFXXY+OCT(5)*CFXXZ+OCT(6)*CFXYY)
     *               +THREE*(OCT(7)*CFYYZ+OCT(8)*CFXZZ+OCT(9)*CFYZZ)
     *               +SIX*OCT(10)*CFXYZ)
            TERM2X= TERM2*X
            TERM2Y= TERM2*Y
            TERM2Z= TERM2*Z
            TMXA  = (OCT(1)*FIFTEN*XX
     *               +THREE*(OCT(4)*TEN*XY + OCT(5)*TEN*XZ
     *               +OCT(6)*FIVE*YY + OCT(8)*FIVE*ZZ)
     *               +THIRTY*OCT(10)*YZ)*DUM7*QI
            TMXB  = -SIX*DUM7*QI*
     *              (OCT(1)*XX + OCT(2)*XY + OCT(3)*XZ
     *               +OCT(4)*XY + OCT(5)*XZ
     *               +OCT(6)*XX + OCT(8)*XX
     *               +OCT(7)*XZ + OCT(9)*XY)
            TMYA  = (OCT(2)*FIFTEN*YY
     *               +THREE*(OCT(6)*TEN*XY + OCT(7)*TEN*YZ
     *               +OCT(4)*FIVE*XX + OCT(9)*FIVE*ZZ)
     *               +THIRTY*OCT(10)*XZ)*DUM7*QI
            TMYB  = -SIX*DUM7*QI*
     *              (OCT(2)*YY+OCT(1)*XY+OCT(3)*YZ
     *               +OCT(6)*XY + OCT(7)*YZ
     *               +OCT(4)*YY + OCT(9)*YY
     *               +OCT(5)*YZ + OCT(8)*XY)
            TMZA  = (OCT(3)*FIFTEN*ZZ
     *               +THREE*(OCT(9)*TEN*YZ + OCT(8)*TEN*XZ
     *               +OCT(7)*FIVE*YY + OCT(5)*FIVE*XX)
     *               +THIRTY*OCT(10)*XY)*DUM7*QI
            TMZB  = -SIX*DUM7*QI*
     *              (OCT(3)*ZZ+OCT(2)*YZ+OCT(1)*XZ
     *               +OCT(9)*YZ + OCT(8)*XZ
     *               +OCT(7)*ZZ + OCT(5)*ZZ
     *               +OCT(6)*XZ + OCT(4)*YZ)
            DEX   = DEX + TMXA + TMXB - TERM2X
            DEY   = DEY + TMYA + TMYB - TERM2Y
            DEZ   = DEZ + TMZA + TMZB - TERM2Z
C
            DEX   = DEX*SWF*SIGN
            DEY   = DEY*SWF*SIGN
            DEZ   = DEZ*SWF*SIGN
            FFGRD(1,IFFAT) = FFGRD(1,IFFAT) + DEX
            FFGRD(2,IFFAT) = FFGRD(2,IFFAT) + DEY
            FFGRD(3,IFFAT) = FFGRD(3,IFFAT) + DEZ
            FFGRD(1,IFFAT) = FFGRD(1,IFFAT) + EPAIR*SWFDX
            FFGRD(2,IFFAT) = FFGRD(2,IFFAT) + EPAIR*SWFDY
            FFGRD(3,IFFAT) = FFGRD(3,IFFAT) + EPAIR*SWFDZ
            VIR(1)         = VIR(1) + DEX*X + EPAIR*SWFDX*X
            VIR(2)         = VIR(2) + DEY*Y + EPAIR*SWFDY*Y
            VIR(3)         = VIR(3) + DEZ*Z + EPAIR*SWFDZ*Z
            IYES = 0
            DO KFIX=1,NFIXMM
               IF(IFFAT.EQ.IFIXMM(KFIX)) IYES = 1
            ENDDO
            IF(IYES.EQ.1.AND.NFIXQM.GT.0) THEN
               VIR(1)      = VIR(1) - DEX*X - EPAIR*SWFDX*X
               VIR(2)      = VIR(2) - DEY*Y - EPAIR*SWFDY*Y
               VIR(3)      = VIR(3) - DEZ*Z - EPAIR*SWFDZ*Z
            END IF
  210    CONTINUE
  200 CONTINUE
C
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK IRMDF1
!>
!> @brief    RMDF step 1
!>
!> @author   Rui Lai
!>           - Jan 2016
!>
!> @details  Restricted MD simulation of mean force step 1
!>
      SUBROUTINE IRMDF1(CORD,OLDCORD,VEL,ONEMAS,ISTEP,RMDFCE)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOANGS=0.52917724924D+00,TOKCAL=627.509469D+00,
     *           TOBOHR=1.0D+00/TOANGS)
      PARAMETER (ZERO=0.0D+00, PT5=0.50D+00, ONE=1.0D+00, TWO=2.0D+00)
      DIMENSION CORD(3,*),VEL(3,*),ONEMAS(*),
     *          OLDCORD(3,*)
C
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,BERENDT,BERENDP,VELMAX,
     *                PMEANX,PMEANY,PMEANZ,NSTEP,KOUTPBC,KOUTACT(2),
     *                IHESS,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /FFRMDF/ RDIST1,RDIST2,RINTRV,NRATM1,NRATM2,INTRSTP
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     RUI LAI, JAN 12, 2016, LINCOLN
C
      IF(ISTEP.EQ.0) THEN
         RMDFCE = ZERO
         DSRMDF = RDIST1 + PT5*RINTRV
      ELSE              
         IF(MOD((ISTEP-1),INTRSTP).EQ.0) RMDFCE = ZERO
         DSRMDF = RDIST1 + (PT5 + DBLE((ISTEP-1)/INTRSTP))*RINTRV
      END IF
      DS2RMDF= DSRMDF*DSRMDF
C
      ONEDT  = ONE/DT
      TWODT2 = TWO/DT2
C
      FORCE  = ZERO
C
      NDONERAT = 0
  100 CONTINUE
      NDONERAT = NDONERAT + 1
      ICHECK = 0
      IF(NDONERAT.GT.100) GOTO 110
      IFFAT  = NRATM1
      JFFAT  = NRATM2
      ONERMAS= ONEMAS(IFFAT)+ONEMAS(JFFAT)
      IF(ONERMAS.EQ.ZERO) GOTO 110
      XSV    = OLDCORD(1,IFFAT)-OLDCORD(1,JFFAT)
      YSV    = OLDCORD(2,IFFAT)-OLDCORD(2,JFFAT)
      ZSV    = OLDCORD(3,IFFAT)-OLDCORD(3,JFFAT)
C
      X      = CORD(1,IFFAT)-CORD(1,JFFAT)
      Y      = CORD(2,IFFAT)-CORD(2,JFFAT)
      Z      = CORD(3,IFFAT)-CORD(3,JFFAT)
      DIFF2  = X*X + Y*Y + Z*Z - DS2RMDF
      DSTR   = SQRT(XSV*XSV + YSV*YSV + ZSV*ZSV)
      IF(ABS(DIFF2).LT.RATOLV) GOTO 110
      ICHECK = ICHECK + 1
      DOTR   = X*XSV + Y*YSV + Z*ZSV
      DUM1   = DOTR*ONERMAS
      DUM1   = DUM1 + DUM1
      GIJ    = DIFF2/DUM1
C
      GIJMASI  = GIJ*ONEMAS(IFFAT)
      GIJMASIX = GIJMASI*XSV
      GIJMASIY = GIJMASI*YSV
      GIJMASIZ = GIJMASI*ZSV
      GIJMASJ  = GIJ*ONEMAS(JFFAT)
      GIJMASJX = GIJMASJ*XSV
      GIJMASJY = GIJMASJ*YSV
      GIJMASJZ = GIJMASJ*ZSV
C
      CORD(1,IFFAT) = CORD(1,IFFAT) - GIJMASIX
      CORD(2,IFFAT) = CORD(2,IFFAT) - GIJMASIY
      CORD(3,IFFAT) = CORD(3,IFFAT) - GIJMASIZ
      CORD(1,JFFAT) = CORD(1,JFFAT) + GIJMASJX
      CORD(2,JFFAT) = CORD(2,JFFAT) + GIJMASJY
      CORD(3,JFFAT) = CORD(3,JFFAT) + GIJMASJZ
      VEL(1,IFFAT)  = VEL(1,IFFAT)  - GIJMASIX*ONEDT
      VEL(2,IFFAT)  = VEL(2,IFFAT)  - GIJMASIY*ONEDT
      VEL(3,IFFAT)  = VEL(3,IFFAT)  - GIJMASIZ*ONEDT
      VEL(1,JFFAT)  = VEL(1,JFFAT)  + GIJMASJX*ONEDT
      VEL(2,JFFAT)  = VEL(2,JFFAT)  + GIJMASJY*ONEDT
      VEL(3,JFFAT)  = VEL(3,JFFAT)  + GIJMASJZ*ONEDT
C
      GIJVIR        = GIJ*TWODT2
      VIRRAT(1)     = VIRRAT(1) + GIJVIR*XSV*X
      VIRRAT(2)     = VIRRAT(2) + GIJVIR*YSV*Y
      VIRRAT(3)     = VIRRAT(3) + GIJVIR*ZSV*Z
C
      FORCE = FORCE + GIJVIR*DSTR
C
  110 CONTINUE
C
      IF (ICHECK.GT.0) GOTO 100
C
      RMDFCE = RMDFCE + FORCE
      DST12  = DSRMDF*TOANGS
      IF(MASWRK) THEN
         IF(ISTEP.EQ.0) THEN
            WRITE(IW,8998) ISTEP,ISTEP,DST12
            WRITE(IW,8999) NRATM1,NRATM2
         END IF
         IF(ISTEP.NE.0.AND.MOD(ISTEP,INTRSTP).EQ.0) THEN
            RFORCE = RMDFCE/DBLE(INTRSTP)
            TFORCE = RFORCE*TOKCAL*TOBOHR
            RFREEG =-RFORCE*RINTRV
            RFREEK = RFREEG*TOKCAL
            WRITE(IW,8998) ISTEP-INTRSTP+1,ISTEP,DST12
            WRITE(IW,8999) NRATM1,NRATM2
            WRITE(IW,'(1X,A)')
     *      'POSITIVE FORCE MEANS REPULSION'
            WRITE(IW,9000) INTRSTP,RFORCE,TFORCE
            WRITE(IW,9001) DST12-PT5*RINTRV*TOANGS,
     *                     DST12+PT5*RINTRV*TOANGS,
     *                     RFREEG,RFREEK
            WRITE(IP,9001) DST12-PT5*RINTRV*TOANGS,
     *                     DST12+PT5*RINTRV*TOANGS,
     *                     RFREEG,RFREEK
         END IF
      END IF
C
 8998 FORMAT(1X,'IN MD STEPS ',I10,' TO ',I10,
     *       ' THE DISTANCE IS FIXED AT ',F10.4,' A')
 8999 FORMAT(1X,'FOR MM ATOM ',I8,' AND MM ATOM ',I8)
 9000 FORMAT(1X,'MEAN FORCE IN',I10,' MD STEPS IS ',F12.8,
     *       ' HARTREE/BOHR ',F12.6,' KCAL/MOL/A')
 9001 FORMAT(1X,'DELTA G FROM ',F10.4,' TO ',F10.4,
     *       ' A IS',F12.8,' HARTREE',F12.6,' KCAL/MOL')
C
      RETURN
      END
C*MODULE QUANPO  *DECK IRMDF2
!>   
!> @brief    RMDF step 2
!>    
!> @author   Rui Lai
!>           - Jan 2016
!>
!> @details  Restricted MD simulation of mean force step 2
!>
      SUBROUTINE IRMDF2(CORD,VEL,ONEMAS,ISTEP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, PT5=0.50D+00, ONE=1.0D+00)
      DIMENSION CORD(3,*),VEL(3,*),ONEMAS(*)
C
      COMMON /FFRATT/ RATOLC,RATOLV,SCALRAT,VIRRAT(3),IRATTLE,JRATTLE,
     *                NRATTLE,MXRATT,LFFOLDCORD,LFFLSTRAT,LFFDSTRAT,
     *                LFFVELSV,IRATQM
      COMMON /FFRMDF/ RDIST1,RDIST2,RINTRV,NRATM1,NRATM2,INTRSTP
C
C     RUI LAI, JAN 12, 2016, LINCOLN
C
      IF(ISTEP.EQ.0) THEN
         DSRMDF = RDIST1 + PT5*RINTRV
      ELSE
         DSRMDF = RDIST1 + (PT5 + DBLE((ISTEP-1)/INTRSTP))*RINTRV
      END IF
      DS2RMDF= DSRMDF*DSRMDF
C
      NDONERAT = 0
  100 CONTINUE
      NDONERAT = NDONERAT + 1
      ICHECK = 0
      IF(NDONERAT.GT.100) GOTO 110
      IFFAT  = NRATM1
      JFFAT  = NRATM2
      ONERMAS= ONEMAS(IFFAT)+ONEMAS(JFFAT)
      IF(ONERMAS.EQ.ZERO) GOTO 110
      DUM1   = ONE/(DS2RMDF*ONERMAS)
      X      = CORD(1,IFFAT)-CORD(1,JFFAT)
      Y      = CORD(2,IFFAT)-CORD(2,JFFAT)
      Z      = CORD(3,IFFAT)-CORD(3,JFFAT)
C
      VX     = VEL(1,IFFAT)-VEL(1,JFFAT)
      VY     = VEL(2,IFFAT)-VEL(2,JFFAT)
      VZ     = VEL(3,IFFAT)-VEL(3,JFFAT)
      DOT    = X*VX+Y*VY+Z*VZ
      IF(ABS(DOT).LT.RATOLV) GOTO 110
      ICHECK = ICHECK + 1
      CON    = DOT*DUM1
      CONMASI= CON*ONEMAS(IFFAT)
      CONMASJ= CON*ONEMAS(JFFAT)
      VEL(1,IFFAT) = VEL(1,IFFAT) - CONMASI*X
      VEL(2,IFFAT) = VEL(2,IFFAT) - CONMASI*Y
      VEL(3,IFFAT) = VEL(3,IFFAT) - CONMASI*Z
      VEL(1,JFFAT) = VEL(1,JFFAT) + CONMASJ*X
      VEL(2,JFFAT) = VEL(2,JFFAT) + CONMASJ*Y
      VEL(3,JFFAT) = VEL(3,JFFAT) + CONMASJ*Z
  110 CONTINUE
C
      IF (ICHECK.GT.0) GOTO 100
C
      RETURN
      END
