C 18 Apr 16 - YN  - Implement TD-DFTB
C
C*MODULE DFTBTD    *DECK DFTB_TD_K
C>
C>    @brief Calculate K (coupling) matrix for TD-DFTB
C>
C>    @details Calculate K (coupling) matrix for TD-DFTB.
C>             Details of implementation related to TD-DFTB in GAMESS
C>             - TD-DFTB2 and TD-DFTB3
C>               Nishimoto, Y. J. Chem. Phys. 2015, 143, 091408.
C>             - TD-DFTB/PCM
C>               Nishimoto, Y. J. Phys. Chem. A 2016, 120, 771-784.
C>
C>    @author Yoshio Nishimoto
C>    - Feb, 2016- Subroutine written
C>
C>           --- INPUT ---
C>    @param PA      BEC_AO in AO basis
C>    @param ITF     Calculate A matrix (ITF=1) or not
C>    @param IST     Index of the initial vector to be calculated
C>    @param NV      Number of vectors to be calculated
C>    @param L1      Number of basis functions
C>    @param L2      L1*(L1+1)/2
C>    @param NOCC    Number of occupied orbitals
C>    @param TRIPLET Flag for singlet-triplet excitation
C>    @param TDERIV  Flag for third-derivative of energy
C>           --- OUTPUT ---
C>    @param F       (A+B)*PA matrix in AO basis
C>    @param FM2     (A-B)*PA matrix in AO basis
C>    @param DERIV3  Third-derivative of energy, used in TD-DFTB3 grad
C>
C
      SUBROUTINE DFTB_TD_K(PA,F,FM2,DERIV3,ITF,IST,NV,L1,L2,NOCC,
     *  TRIPLET,TDERIV3)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXATM=2000, MXSPE=10)
C
      LOGICAL DFTBFL,SCC,SRSCC,DFTB3,DAMPXH,LRDFTB
C
      COMMON /DFTB  / DFTBFL,SCC,SRSCC,DFTB3,DAMPXH,LRDFTB
      COMMON /DFTBPR/ ETEMP,DFTBDP(MXSPE*14),DAMPXHE,HUBDER(MXSPE),
     *                ZREF(MXATM),SPNCST(6,MXSPE),SPE(MXATM),NSPE,
     *                MAXANG(MXATM),ISPE(MXATM),IND(MXATM+1),IDFTBD
      COMMON /DFTBSK/ SKDIM(MXSPE,MXSPE),SKSPIN(MXSPE),QREFL(3,MXSPE),
     *                HUBBL(3,MXSPE),QREF(MXSPE),HUBB(MXSPE),SKCUT2,
     *                NEEDSK,LSKHTAB(MXSPE,MXSPE),LSKSTAB(MXSPE,MXSPE),
     *                LSKGRID(MXSPE,MXSPE),LSKSELF(MXSPE)
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
C
      DIMENSION PA(L1,L1,NV)  ! X(K10)=BVEC_AO(L1,L1,NMAX) in AO basis
      DIMENSION F(L2,NV)      ! X(K20)=B1PROA(L2,NMAX)    = A+B
      DIMENSION FM2(L1,L1,NV) ! X(K30)=B2PROA(L1,L1,NMAX) = A-B
      DIMENSION DERIV3(L2)    ! Third-order derivative of energy (DFTB3)
      LOGICAL TRIPLET,TDERIV3
C
C     PA = (CbC^T) in AO basis, where b (=X(I40) in tddft.src) is the
C     excitation (approximate) eigenvector
C       (CbC^T)_{\mu \nu}^I = \sum_{jb \in I} c_{\mu j} c_{\nu b}
C     where c_{\mu j} is the ordinary vector but it is weighted by the
C     excitation eigenvector.
C
C     In MNTOIA subroutine, transform from AO to MO
C       R_{ia}
C         = 2 \sum_{\rho \sigma} C_{i \rho} K_{\rho \sigma} C_{\sigma a}
C     where for singlet-singlet exciation,
C       K_{\rho \sigma}
C         = S_{\rho \sigma} \sum_C (\gamma_{AC} + \gamma_{BC}) q_C^{jb}
C     and for singlet-triplet exciation,
C       K_{\rho \sigma}
C         = S_{\rho \sigma} (W_A*q_A^{jb} + W_B*q_B^{jb})
C
      L2 = L1*(L1+1)/2
      L3 = L1*L1
C
C     ----- ALLOCATE MEMORY -----
C     IMF = 1 : CALCULATE (A-B) MATRIX
C     IPF = 1 : CALCULATE (A+B) MATRIX
C     ITF = 1 : ONLY CALCULATE A MATRIX
C
      CALL VALFM(LOADFM)
      CALL GOTFM(NGOTMX)
      LWRK     = LOADFM  + 1
      LVEC     = LWRK    + MAX(L2,NAT*2)
      LS       = LVEC    + L3
      LGAMMA   = LS      + L2
      LDIST    = LGAMMA  + NAT*NAT
      LWRK2    = LDIST   + NAT*(NAT+1)/2
      LAST     = LWRK2   + L3+L1
      IF (DFTB3) THEN
        LGAM3  = LAST
        LDQ    = LGAM3   + NAT*NAT
        LAST   = LDQ     + NAT
        IF (TDERIV3) THEN
          LSHIFT3 = LAST
          LAST    = LSHIFT3 + NAT
        END IF
      END IF
      NEED    = LAST - LOADFM - 1
C
C     ----- GET MEMORY -----
C
      CALL GETFM(NEED)
C
      CALL DAREAD(IDAF,IODA,X(LS),L2,12,0)
      CALL DAREAD(IDAF,IODA,X(LVEC),L3,15,0)
      IF (DFTB3) THEN
        !! GET MULLIKEN CHARGES (DQ=Q-Q0)
        CALL DAREAD(IDAF,IODA,X(LDQ),NAT,556,0)
        DO NI = 1, NAT
          X(LDQ+NI-1) = X(LDQ+NI-1) - ZREF(NI)
        END DO
      END IF
C
C     ----- CALCULATE DIPOLE INTEGRALS FOR OSCILLATOR STRENGTH ---
C     MAYBE DIFFERENT DEFINITION IS BETTER ?
C     USE <psi^i|r|\psi^j> = \sum_A R_A q_A^{ij} ?
C
      IF(IST.EQ.1) THEN
        CALL CALCOM(XP,YP,ZP)
        CALL DFTB_DIPINT(IND,XP,YP,ZP,X(LS),.FALSE.)
      END IF
C
C     ----- CALCULATE INTER-ATOMIC DISTANCES -----
C
      CALL VCLR(X(LDIST),1,NAT*(NAT+1)/2)
      NSEQ = 0
      DO I = 1, NAT
        DO J = 1, I
          NSEQ = NSEQ + 1
          DIST = SQRT( (C(1,I)-C(1,J))**2
     &               + (C(2,I)-C(2,J))**2
     &               + (C(3,I)-C(3,J))**2 )
          X(LDIST+NSEQ-1) = DIST
        END DO
      END DO
C
C     ----- CALCULATE GAMMA OF DFTB2 AND DFTB3 -----
C
      CALL DFTB_GAMMA(DAMPXHE,HUBBL,X(LWRK),X(LDIST),NAT,NSPE,
     *  ISPE,MAXANG,SPE,DAMPXH,SRSCC)
      CALL CPYTSQ(X(LWRK),X(LGAMMA),NAT,1)
      IF (DFTB3) THEN
        CALL VCLR(X(LGAM3),1,NAT*NAT)
        CALL DFTB_GAMMA3(NAT,HUBBL,X(LGAM3),X(LDIST))
      END IF
C
C     ----- CALCULATE K (COUPLING MATRIX) -----
C
      CALL DFTB_TD_CPMAT(PA,X(LVEC),X(LS),X(LGAMMA),X(LGAM3),SPNCST,F,
     *                   FM2,DERIV3,X(LWRK),X(LWRK+NAT),
     *                   X(LSHIFT3),X(LDQ),
     *                   IND,L1,L2,NAT,NV,NOCC,NSPE,ISPE,MAXANG,ITF,
     *                   TRIPLET,DFTB3,TDERIV3,X(LWRK2))
C
C     ----- RELEASE ALLOCATED MEMORY -----
C
      CALL RETFM(NEED)
C
      RETURN
C
      END SUBROUTINE DFTB_TD_K
C
C-----------------------------------------------------------------------
C*MODULE DFTBTD    *DECK DFTB_TD_CPMAT
C>
C>    @brief Calculate K (coupling) matrix for TD-DFTB
C>
C>    @details Calculate K matrix in TD-DFTB calculations.
C>
C>    @author Yoshio Nishimoto
C>    - Feb, 2016- Subroutine written
C>
C>           --- INPUT ---
C>    @param PA      BEC_AO in AO basis
C>    @param VEC     Temporary matrix to store vectors
C>    @param S       Overlap matrix
C>    @param GAMMA   Matrix of gamma used in DFTB2 and DFTB3
C>    @param GAMMA3  Matrix of gamma used in DFTB3
C>    @param SPNCST  Spin constants used for singlet-triplet excitation
C>    @param SHIFT   Tmpoerary matrix to store shift
C>    @param CHAMUL  Mulliken populations with PA charges
C>    @param SHIFT3  Temporary matrix to store shift for third deriv.
C>    @param DQ      Mulliken charges
C>    @param IND     AO index of each atom
C>    @param L1      Number of basis functions
C>    @param L2      L1*(L1+1)/2
C>    @param NAT     Number of atoms
C>    @param NVEC    Number of vectors to be calculated
C>    @param NOCC    Number of occupied orbitals
C>    @param NSPE    Number of species
C>    @param ISPE    Index of species
C>    @parma MAXANG  Maximum angular momentum of each species
C>    @param ITF     Calculate A matrix (ITF=1) or not
C>    @param TRIPLET Flag for singlet-triplet excitation
C>    @param DFTB3   Whether DFTB3 or not
C>    @param TDERIV  Flag for third-derivative of energy
C>    @param WRK     Working array
C>           --- OUTPUT ---
C>    @param F       (A+B)*PA matrix in AO basis
C>    @param FM2     (A-B)*PA matrix in AO basis
C>    @param DERIV3  Third-derivative of energy, used in TD-DFTB3 grad.
C>
C
      SUBROUTINE DFTB_TD_CPMAT(PA,VEC,S,GAMMA,GAMMA3,SPNCST,F,FM2,
     *                         DERIV3,SHIFT,CHAMUL,SHIFT3,DQ,IND,L1,L2,
     *                         NAT,NVEC,NOCC,NSPE,ISPE,MAXANG,ITF,
     *                         TRIPLET,DFTB3,TDERIV3,WRK)
C
      IMPLICIT NONE
C
      INTEGER, INTENT(IN) :: IND(*),L1,L2,NAT,NVEC,NOCC,NSPE,ISPE(*),
     *  MAXANG(*),ITF
      DOUBLE PRECISION, INTENT(IN) :: PA(L1,L1,NVEC),S(*),
     *  GAMMA(NAT,NAT),GAMMA3(NAT,NAT),SPNCST(6,NSPE),DQ(NAT)
      DOUBLE PRECISION, INTENT(INOUT) :: VEC(L1,L1),F(L2,NVEC),
     *  FM2(L1,L1,NVEC),DERIV3(L2),SHIFT(NAT),CHAMUL(NAT),SHIFT3(NAT),
     *  WRK(L1,L1+1)
      LOGICAL, INTENT(IN) :: TRIPLET,DFTB3,TDERIV3
C
      INTEGER :: IVEC,NI,NC,MM,MU,NU
      DOUBLE PRECISION :: TMP,VAL,DDOT,XDOT
      DOUBLE PRECISION, PARAMETER :: ZERO=0.0D+00,
     *  TWO=2.0D+00,TWO_THIRD=TWO/3.0D+00
C
      CALL EXPND(S,WRK,L1,0)
      DO IVEC = 1, NVEC
        CALL DCOPY(L1*L1,PA(1,1,IVEC),1,VEC,1)
C
C       ----- CALCULATE q_C^{jb} FIRST -----
C
        DO MU = 1, L1
          DO NU = 1, MU
            VEC(NU,MU) = VEC(MU,NU) + VEC(NU,MU)
            VEC(MU,NU) = VEC(NU,MU)
          END DO
        END DO
        DO MU = 1, L1
          WRK(MU,L1+1) = DDOT(L1,VEC(1,MU),1,WRK(1,MU),1)
        END DO
        DO NI = 1, NAT
          TMP = ZERO
          DO MM = 1, IND(NI+1)-IND(NI)
            MU = IND(NI)+MM
            TMP = TMP + WRK(MU,L1+1)
          END DO
          CHAMUL(NI) = TMP
        END DO
C
C       ----- CALCULATE SUM OF SHIFT CONTRIBUTION ON EACH ATOM -----
C       IMF = 1 : CALCULATE (A-B) MATRIX
C       IPF = 1 : CALCULATE (A+B) MATRIX
C       ITF = 1 : ONLY CALCULATE A MATRIX
C
C       A-B MATRIX IS ALWAYS DIAGONAL, MEANING THAT A-B IS ZERO MATRIX
C       WHEN REFERENCE ELECTRONIC STRUCTURE IS A CLOSED SHELL SINGLET.
C
        CALL VCLR(SHIFT,1,NAT)
C       CALCULATE A+B MATRIX
        IF (TRIPLET) THEN
          DO NI = 1, NAT
            VAL = CHAMUL(NI)
            SHIFT(NI) = SHIFT(NI) + VAL*SPNCST(1,ISPE(NI))
          END DO
        ELSE
          DO NI = 1, NAT
            DO NC = 1, NAT
              VAL = CHAMUL(NC)
              SHIFT(NI) = SHIFT(NI) + VAL*GAMMA(NC,NI)
            END DO
          END DO
          IF (DFTB3) THEN
            DO NI = 1, NAT
              TMP = ZERO
              DO NC = 1, NAT
                TMP = TMP + GAMMA3(NI,NC)*CHAMUL(NC)*DQ(NI)
     *                    + GAMMA3(NI,NC)*CHAMUL(NI)*DQ(NC)
     *                    + GAMMA3(NC,NI)*CHAMUL(NC)*DQ(NC)
              END DO
              SHIFT(NI) = SHIFT(NI) + TMP*TWO_THIRD
            END DO
          END IF
        END IF
        IF (ITF.NE.1) CALL DSCAL(NAT,2.0D+00,SHIFT,1) !! total coeff.=4
        IF (TDERIV3) THEN
          CALL VCLR(SHIFT3,1,NAT)
          DO NI = 1, NAT
            TMP = ZERO
            DO NC = 1, NAT
              TMP = TMP + GAMMA3(NI,NC)*CHAMUL(NC)*CHAMUL(NI)
     *                  + GAMMA3(NI,NC)*CHAMUL(NI)*CHAMUL(NC)
     *                  + GAMMA3(NC,NI)*CHAMUL(NC)*CHAMUL(NC)
            END DO
            SHIFT3(NI) = SHIFT3(NI) + TMP*TWO_THIRD !! total coeff=8/3
            !! note that DERIV3 will be multiplied by two outside
            !! the subroutine
          END DO
        END IF
C
C       ----- ADD SHIFT CONTRIBUTION TO F MATRIX -----
C
        CALL DFTB_SHIFT_FOCK(SHIFT,F(1,IVEC),S,NAT,L2,NSPE,ISPE,IND,
     *                       MAXANG)
        IF (ITF.EQ.1) THEN
          CALL CPYTSQ(F(1,IVEC),FM2(1,1,IVEC),L1,1)
          CALL VCLR(F(1,IVEC),1,L2)
        END IF
      END DO
C
      IF (TDERIV3) THEN
        CALL VCLR(DERIV3,1,L2)
        IF (.NOT.TRIPLET) THEN
          CALL DFTB_SHIFT_FOCK(SHIFT3,DERIV3,S,NAT,L2,NSPE,ISPE,IND,
     *                         MAXANG)
        END IF
      END IF
C
      if(l2.lt.0) write(6,*) nocc
      RETURN
C
      END SUBROUTINE DFTB_TD_CPMAT
C
C-----------------------------------------------------------------------
C*MODULE DFTBTD    *DECK DFTB_TD_GRAD_SHIFT
C>
C>    @brief Gradient for TD-DFTB
C>
C>    @details Calculate DQES and DQXY (Mulliken charges with excited
C>             density matrix (P=T+Z) and (X+Y) matrix in AO basis) and
C>             construct shift matrices with those charges.
C>
C>    @author Yoshio Nishimoto
C>    - Feb, 2016- Subroutine written
C>
C>           --- INPUT ---
C>    @param WRK     Working array
C>    @param S       Overlap matrix
C>    @param DAMPXHE Exponent of X-H damping
C>    @param DGS     Ground state density matrix
C>    @param DQ      Ground state Mulliken charges
C>    @param DIST    Distance matrix
C>    @param HUBBL   Shell-resolved Hubbar values
C>    @param SPE     Name of species
C>    @param ICPM    PCM or not
C>    @param NSPE    Number of species
C>    @param NAT     Number of atoms
C>    @param L1      Number of basis functions
C>    @param L2      L1*(L1+1)/2
C>    @param IDAF    10
C>    @param IODA    Length of unit
C>    @param ISPE    Index of species
C>    @parma MAXANG  Maximum angular momentum of each species
C>    @param IND     AO index of each atom
C>    @param DFTB3   Whether DFTB3 or not
C>    @param DAMPXH  Whether X-H damping is used or not
C>    @parma SRSCC   Whether Shell-resolved SCC or not
C>    @parma TRIPLET Whether triplet or not
C>           --- OUTPUT ---
C>    @param XYAO    (X+Y)_{\mu \nu}
C>    @param DQES    Mulliken population with excited P (=T+Z)
C>    @param DQXY    Mulliken population with (X+Y)
C>    @param SHIFTES Shift matrix with DQES
C>    @param SHIFTXY Shift matrix with DQXY
C>
C
      SUBROUTINE DFTB_TD_GRAD_SHIFT(WRK,S,DAMPXHE,DGS,DQ,DIST,HUBBL,SPE,
     *                              SPNCST,XYAO,DQES,DQXY,SHIFTES,
     *                              SHIFTXY,GAMMA,GAMMA3,
     *                              IPCM,NSPE,NAT,L1,L2,IDAF,IODA,ISPE,
     *                              MAXANG,IND,
     *                              DFTB3,DAMPXH,SRSCC,TRIPLET)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DOUBLE PRECISION, INTENT(INOUT) :: WRK(L1,L1),S(L2)
      DOUBLE PRECISION, INTENT(IN)    :: DAMPXHE,DGS(L2),DQ(NAT),
     *                                   DIST(*),HUBBL(*),SPE(*),
     *                                   SPNCST(6,NSPE)
      DOUBLE PRECISION, INTENT(OUT)   :: XYAO(L2),DQES(NAT),DQXY(NAT),
     *                                   SHIFTES(NAT),SHIFTXY(NAT),
     *                                   GAMMA(*),GAMMA3(*)
      INTEGER, INTENT(IN) :: IPCM,NSPE,NAT,L1,L2,IDAF,IODA(950),
     *                       ISPE(NAT),MAXANG(NSPE),IND(NAT+1)
      LOGICAL, INTENT(IN) :: DFTB3,DAMPXH,SRSCC,TRIPLET
C
      DOUBLE PRECISION, PARAMETER :: ZERO=0.0D+00
C
      L3 = L1*L1
C
C     ----- MAKE q^ES -----
C
      CALL DAREAD(IDAF,IODA,WRK,L3,476,0) !! PRISTINE P MATRIX
      CALL VCLR(DQES,1,NAT)
      DO NI = 1, NAT
        TMP = ZERO
        DO MM = 1, IND(NI+1)-IND(NI)
          MU = IND(NI)+MM
          DO NU = 1, L1
            CALL DFTB_CNVSQ(MU,NU,NSEQ)
            TMP = TMP + (WRK(MU,NU)+WRK(NU,MU))*S(NSEQ)
          END DO
        END DO
        DQES(NI) = TMP
      END DO
C
C     ----- MAKE q^XY -----
C
      CALL DAREAD(IDAF,IODA,WRK,L3,474,0) !! (X+Y) in AO, Forget LP
      CALL VCLR(DQXY,1,NAT)
      DO NI = 1, NAT
        TMP = ZERO
        DO MM = 1, IND(NI+1)-IND(NI)
          MU = IND(NI)+MM
          DO NU = 1, L1
            CALL DFTB_CNVSQ(MU,NU,NSEQ)
            TMP = TMP + (WRK(MU,NU)+WRK(NU,MU))*S(NSEQ)
          END DO
        END DO
        DQXY(NI) = TMP
      END DO
C
C     ----- CONSTRUCT SYMMETRIC (X+Y) IN AO BASIS -----
C
      CALL SYMTRZE(WRK,L1,L1) !! multiplied with 0.5 in the subroutine
      NSEQ = 0
      DO I = 1, L1
        DO J = 1, I
          NSEQ = NSEQ + 1
          XYAO(NSEQ) = WRK(J,I)
        END DO
      END DO
C
C     ----- DO SHIFT WITH XY AND ES CHARGES -----
C
      CALL DFTB_GAMMA(DAMPXHE,HUBBL,GAMMA,DIST,NAT,NSPE,
     *                ISPE,MAXANG,SPE,DAMPXH,SRSCC)
      IF (DFTB3) CALL DFTB_GAMMA3(NAT,HUBBL,GAMMA3,DIST)
      CALL VCLR(SHIFTES,1,NAT)
      CALL DFTB_2ND_SHIFT(SHIFTES,DQES,GAMMA,NAT)
      CALL VCLR(SHIFTXY,1,NAT)
      IF (TRIPLET) THEN
        DO NI = 1, NAT
          SHIFTXY(NI) = SHIFTXY(NI) + DQXY(NI)*SPNCST(1,ISPE(NI))
        END DO
      ELSE
        CALL DFTB_2ND_SHIFT(SHIFTXY,DQXY,GAMMA,NAT)
      END IF
      IF (DFTB3) CALL DFTB_TD_3RD_SHIFT(SHIFTES,SHIFTXY,DQES,DQXY,DQ,
     *                                  GAMMA3,NAT,TRIPLET)
C
C     ----- PCM CORRECTION FOR SHIFT MATRICES -----
C
      IF (IPCM.EQ.1) THEN
        CALL VCLR(S,1,L2)
        CALL DENTD(S,WRK,L1) !! S = SYMMETRIC 2P MATRIX
        CALL DFTB_TD_GRAD_PCM(DGS,S,XYAO,SHIFTES,SHIFTXY,
     *                        MAXANG,ISPE,IND,L1,L2)
      END IF
C
      RETURN
C
      END SUBROUTINE DFTB_TD_GRAD_SHIFT
C
C-----------------------------------------------------------------------
C*MODULE DFTBTD    *DECK DFTB_TD_3RD_SHIFT
C>
C>    @brief Gradient for TD-DFTB
C>
C>    @details Add shift contribution of DQES and DQXY for TD-DFTB3
C>
C>    @author Yoshio Nishimoto
C>    - Feb, 2016- Subroutine written
C>
C>           --- INPUT ---
C>    @param DQES    Mulliken population with excited P (=T+Z)
C>    @param DQXY    Mulliken population with (X+Y)
C>    @param DQ      Ground state Mulliken charges
C>    @param GAMMA   Matrix of gamma used in DFTB3
C>    @param NDIM    Dimension of gamma (NAT)
C>           --- OUTPUT ---
C>    @param SHIFTES Shift matrix with DQES
C>    @param SHIFTXY Shift matrix with DQXY
C>
C
      SUBROUTINE DFTB_TD_3RD_SHIFT(SHIFTES,SHIFTXY,DQES,DQXY,DQ,GAMMA,
     *                             NDIM,TRIPLET)
C
      IMPLICIT NONE
C
      INTEGER, INTENT(IN) :: NDIM
      DOUBLE PRECISION, INTENT(IN) :: DQES(NDIM),DQXY(NDIM),DQ(NDIM),
     *                                GAMMA(NDIM,NDIM)
      DOUBLE PRECISION, INTENT(INOUT) :: SHIFTES(NDIM),SHIFTXY(NDIM)
      LOGICAL, INTENT(IN) :: TRIPLET
C
      INTEGER :: I,J
      DOUBLE PRECISION :: GAMI,GAMJ
      DOUBLE PRECISION, PARAMETER :: TWO_THIRD=2.0D+00/3.0D+00
C
C     DQES terms come from the derivative of Fock matrix
C     DQXY terms come from the derivative of coupling matrix (4K)
C     DQES and DQXY are already twiced
C
      DO I = 1, NDIM !! a
        DO J = 1, NDIM !! c
          GAMI = GAMMA(I,J) !! G_ac
          GAMJ = GAMMA(J,I) !! G_ca
          !! a) mulliken derivative term (d)
          !! b) Dmn term (b) (same to mulliken derivative)
          !! c) mulliken derivative for (X+Y)4K(X+Y)
          SHIFTES(I) = SHIFTES(I)
     *      + TWO_THIRD*(DQ(I)*DQES(J)*GAMI
     *      +            DQ(J)*DQES(I)*GAMI
     *      +            DQ(J)*DQES(J)*GAMJ)*0.5D+00 !! a)
     *      + TWO_THIRD*(DQ(J)*DQES(J)*GAMJ
     *      +            DQ(I)*DQES(J)*GAMI
     *      +            DQ(J)*DQES(I)*GAMI)*0.5D+00 !! b)
          IF (.NOT.TRIPLET) THEN
            SHIFTES(I) = SHIFTES(I)
     *        + TWO_THIRD*(DQXY(I)*DQXY(J)*GAMI
     *        +            DQXY(I)*DQXY(J)*GAMI
     *        +            DQXY(J)*DQXY(J)*GAMJ) !! c)
            SHIFTXY(I) = SHIFTXY(I)
     *        + TWO_THIRD*(DQ(I)*DQXY(J)*GAMI
     *        +            DQ(J)*DQXY(I)*GAMI
     *        +            DQ(J)*DQXY(J)*GAMJ)
          END IF
        END DO
      END DO
C
      RETURN
C
      END SUBROUTINE DFTB_TD_3RD_SHIFT
C
C-----------------------------------------------------------------------
C*MODULE DFTBTD    *DECK DFTB_TD_GRAD_PCM
C>
C>    @brief Gradient for TD-DFTB
C>
C>    @details Add PCM contribution to shift matrices
C>
C>    @author Yoshio Nishimoto
C>    - Feb, 2016- Subroutine written
C>
C>           --- INPUT ---
C>    @param DM      Ground state density matrix
C>    @param DMES    P(=T+Z)
C>    @param DMXY    (X+Y) in AO basis
C>    @parma MAXANG  Maximum angular momentum of each species
C>    @param ISPE    Index of species
C>    @param IND     AO index of each atom
C>    @param L1      Number of basis functions
C>    @param L2      L1*(L1+1)/2
C>           --- OUTPUT ---
C>    @param SHIFTES Shift matrix with DQES
C>    @param SHIFTXY Shift matrix with DQXY
C>
C
      SUBROUTINE DFTB_TD_GRAD_PCM(DM,DMES,DMXY,SHIFTES,SHIFTXY,MAXANG,
     *                            ISPE,IND,L1,L2)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (HALF=0.5D+00)
C
      DOUBLE PRECISION, INTENT(IN) :: DM(L2),DMES(*),DMXY(*)
      DOUBLE PRECISION, INTENT(INOUT) :: SHIFTES(NAT),SHIFTXY(NAT)
      INTEGER, INTENT(IN) :: L1,L2,MAXANG(*),ISPE(*),IND(*)
      LOGICAL TRIPLET,SG1T,NONEQR,TAMMD,TPA,ALPHKWD,BETAKWD
C
      COMMON /DFTBS / LS
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,PFREQ(2),
     *                JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,ITDPRP,
     *                TRIPLET,SG1T,NONEQR,TAMMD,TPA,ALPHKWD,BETAKWD
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PCMDIM/ MXSP,MXTS,MEMPCM1,MEMPCM2,NTS
      COMMON /PCMPAR/ IPCM,NFT26,NFT27,IRPPCM,IEF,IP_F,NFMOPCM,IHET
      COMMON /PCMPNT/ LXYZRE,LSSFE,LLIST,LALPCM,LRINPCM,LINAPCM,LINFPCM,
     *                LINIPCM,LMEPCM,LAXYZCT,LXYZCT2,LNVERT,LQSN,LQSE,
     *                LQFS,LQIND,LISPHE,LVAD,LQOR,LVECMUL,LAIPRJ,LFIPRJ,
     *                LPEL,LPCMCDR,LDAI,LIDDAI,LQSND,LQSED,LEPSPCM
C
      LOGICAL IPCFP
C
      ITDFG = 1
      L3 = L1*L1
C
      CALL VALFM(LOADFM)
      LFAO = LOADFM + 1
      LS   = LFAO   + L2
      LAST = LS     + L2
C
C     -- PCM MEMORY
C
      ISD=1
      IPCFP=.FALSE.
      CALL PCMMEM3(IPCFP,L2,LAST,NTSPAR,LSOL,LCHG,LDMATM,LQPOT,LQFLD,
     *             LVPOT,LSE,LDE,LQ0,LQ1,LQ2,LQ3,LD0,LQA,LDIMAT,LQREP,
     *             LTMP0,LTMP1,LTMP2,LIPVT,LPOTTMP,LRMUL,LCHG2,
     *             LASCCRD,LASCCHG,LASCDIP,LASCQAD,LDISV,LDIS1,LDIS2,
     *             LCQEF,LQEFF,LELD,LXDINT,LYDINT,LZDINT,LEFLD,MADD,
     *             LABFLD,LVECMP,LVEC_2,LVEC_S,LAPROJ,LFPROJ)
C     IF(IPCM.EQ.1 .AND. IEFP.EQ.0) THEN
         LWRK1 = LAST
         LWRK3 = LWRK1 + L3
         LSCR  = LWRK3 + L3
         LQSET = LSCR  + L1
         LQSNT = LQSET + NTS
         LQSEDT= LQSNT + NTS
         L200  = LQSEDT+ NTS
         L300  = L200  + L2
         LAST  = L300  + L2
C
         LZAN  = LAST
         LAST  = LZAN  + NAT
         NEED  = LAST  - LOADFM - 1
C
C     ----- GET MEMORY -----
C
      CALL GETFM(NEED)
C
      CALL DFTB_GET_ZAN(0,NAT,X(LZAN),ZAN)
      CALL DAREAD(IDAF,IODA,X(LS),L2,12,0)
C
C     ----- UPDATE SHIFTES -----
C
      CALL VCLR(X(LQ0),1,NTS)
      CALL PCMFLD(X(LFAO),DUMMY,DMES,X(LSOL),
     *           X(LCHG),X(LWRK1),X(LDISV),
     *           X(LDIS1),X(LDIS2),X(LWRK3),X(LSCR),X(LDMATM),
     *           X(LCQEF),X(LQEFF),X(LELD),X(LQPOT),X(LQFLD),
     *           X(LVPOT),X(LSE),X(LDE),
     *           X(LQ0),X(LQ1),X(LQ2),X(LQ3),
     *           X(LD0),X(LQA),X(LDIMAT),X(LQREP),
     *           X(LTMP0),X(LTMP1),X(LTMP2),X(LIPVT),
     *           X(LPOTTMP),X(LRMUL),
     *           TCH,QET,QETN,QESC,ISD,NFT27,IPCFP,L1,L2,NTSPAR,
     *           X(LAXYZCT),X(LAXYZCT+MXTS),X(LAXYZCT+MXTS*2),
     *           X(LXYZCT2),X(LXYZCT2+MXTS),X(LXYZCT2+MXTS*2),
     *           X(LAXYZCT+MXTS*3),X(LQSNT),X(LQSET),
     *           X(LQSEDT),X(LQFS),
     *           X(LVECMUL),X(LCHG2),X(LQIND+MXTS),X(LPEL),
     *           X(LASCCRD),X(LASCCHG),X(LASCDIP),X(LASCQAD),
     *           X(LXYZRE),X(LXYZRE+MXSP),X(LXYZRE+MXSP*2),
     *           X(LXYZRE+MXSP*3),X(LISPHE),X(LLIST),X(LEPSPCM))
      !! P IS ALREADY DOUBLED IN DENTD SUBOUROUTINE.
      !! HOWEVER, X(LSOL) IS DOUBLED IN PCMFLD (DUE TO SPIN?),
      !! SO X(LSOL) HAS TO BE SCALED BY HALF.
      NSEQ = 0
      DO IAT = 1, NAT
        DO K = 1, MAXANG(ISPE(IAT))*MAXANG(ISPE(IAT))
          MU = IND(IAT) + K
          NSEQ = NSEQ + MU
          !! Note that DMES is already multiplied with two
          IF (K.EQ.1) SHIFTES(IAT) = SHIFTES(IAT) + X(LSOL+NSEQ-1)*HALF
        END DO
      END DO
C
C     ----- UPDATE SHIFTXY -----
C
      CALL VCLR(X(LSOL),1,L2)
      CALL VCLR(X(LQ0),1,NTS)
      CALL PCMFLD(X(LFAO),DUMMY,DMXY,X(LSOL),
     *           X(LCHG),X(LWRK1),X(LDISV),
     *           X(LDIS1),X(LDIS2),X(LWRK3),X(LSCR),X(LDMATM),
     *           X(LCQEF),X(LQEFF),X(LELD),X(LQPOT),X(LQFLD),
     *           X(LVPOT),X(LSE),X(LDE),
     *           X(LQ0),X(LQ1),X(LQ2),X(LQ3),
     *           X(LD0),X(LQA),X(LDIMAT),X(LQREP),
     *           X(LTMP0),X(LTMP1),X(LTMP2),X(LIPVT),
     *           X(LPOTTMP),X(LRMUL),
     *           TCH,QET,QETN,QESC,ISD,NFT27,IPCFP,L1,L2,NTSPAR,
     *           X(LAXYZCT),X(LAXYZCT+MXTS),X(LAXYZCT+MXTS*2),
     *           X(LXYZCT2),X(LXYZCT2+MXTS),X(LXYZCT2+MXTS*2),
     *           X(LAXYZCT+MXTS*3),X(LQSNT),X(LQSET),
     *           X(LQSEDT),X(LQFS),
     *           X(LVECMUL),X(LCHG2),X(LQIND+MXTS),X(LPEL),
     *           X(LASCCRD),X(LASCCHG),X(LASCDIP),X(LASCQAD),
     *           X(LXYZRE),X(LXYZRE+MXSP),X(LXYZRE+MXSP*2),
     *           X(LXYZRE+MXSP*3),X(LISPHE),X(LLIST),X(LEPSPCM))
      !! (X+Y) IS NOT DOUBLED, AND X(LSOL) IS DOUBLED DUE TO SPIN (?),
      !! SO NO NEED TO SCALE.
      NSEQ = 0
      DO IAT = 1, NAT
        DO K = 1, MAXANG(ISPE(IAT))*MAXANG(ISPE(IAT))
          MU = IND(IAT) + K
          NSEQ = NSEQ + MU
          IF (K.EQ.1) SHIFTXY(IAT) = SHIFTXY(IAT) + X(LSOL+NSEQ-1)
        END DO
      END DO
C
      CALL DFTB_GET_ZAN(1,NAT,X(LZAN),ZAN)
C
      CALL RETFM(NEED)
C
      ITDFG = 0
C
      if(l2.lt.0) write(6,*) dm(1)
      RETURN
C
      END SUBROUTINE DFTB_TD_GRAD_PCM
