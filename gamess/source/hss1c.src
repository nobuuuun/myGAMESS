C 18 Apr 16 - HN  - NEW MODULE FOR PCM HESSIANS
C
C*MODULE HSS1   *DECK DDSTV
C>
C>    @brief   Two integral derivative
C>
C>    @details prepare integral
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
      SUBROUTINE DDSTV
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DOUBLE PRECISION MCSCF
C
      LOGICAL OUT,MASWRK,GOPARR,DSKWRK
      LOGICAL FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF,MCCI !,BSFDD
C
      PARAMETER (MXATM=2000)
C
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /RESTAR/ TIMLIM,NREST,NREC,INTLOC,IST,JST,KST,LST
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      COMMON /INTOPT/ ISCHWZ,IECP,NECP,IEFLD
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
      COMMON /RELWFN/ RMETHOD,QRQMT,CLIG,CLIG2,QRTOL,TAU,
     *                IQRORD,MODQR,NESOC,NRATOM,
     *                NUMU,NQMTR,NQRDAF,MORDA,NDARELB
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /FMCOM / X(1)
C
      DATA GUGA/8HGUGA    /
      DATA CHECK/8HCHECK   /
      DATA MCSCF/8HMCSCF   /
      DATA DBUGME/8HHSS1    /
      DATA DBOC/8HDBOC    /
      DATA DK,RIOTC/8HDK      ,8HIOTC    /
      DATA RESC,ANESC/8HRESC    ,8HNESC    /
      DATA RNONE/8HNONE    /
C
C     ------ MAIN DRIVER FOR 1E- HESSIAN INTEGRAL CONTRIBUTIONS -----
C
      IF(NREST.GT.3) RETURN
      OUT = EXETYP.EQ.DBUGME
      NFT18=18
      MCCI = SCFTYP.EQ.MCSCF
!      BSFDD = IGETOLI(2).NE.0
C
      IF (MASWRK  .AND.  NPRINT.NE.-5) THEN
         WRITE(IW,9000)
      END IF
C
C     ----- SET UP MEMORY -----
C
      L2  = (NUM*NUM+NUM)/2
      NC  = 3*NAT
      NXYZ2 = 9*(NAT*NAT+NAT)/2
      NEGH = NC + NXYZ2
C
      CALL VALFM(LOADFM)
      CALL GOTFM(NGOTMX)
C
      LEGH = LOADFM + 1
      LEG  = LEGH
      LEH  = LEG    + NC
      LFC  = LEH    + NXYZ2
      LDA  = LFC    + NC*NC
      LDB  = LDA    + L2
      LFD  = LDB    + L2
      LAST = LFD    + NC*L2
      NEED=LAST-LOADFM-1
C
      IF(.NOT.MCPHF  .AND.  .NOT.MCCI) LAST=LFD
C
      IF(NEED.GT.NGOTMX) THEN
         IF (MASWRK) WRITE(IW,*) 'IN STVDD, NEED,NGOT=',NEED,NGOTMX
         CALL ABRT
      END IF
      CALL GETFM(NEED)
C
C     ----- INITIALIZE -EG-,-EH-,-FD- TO ZERO -----
C
      CALL VCLR(X(LEG),1,NEGH)
      IF(MCPHF  .OR.  MCCI) THEN
         NFD=3*NAT*L2
         CALL VCLR(X(LFD),1,NFD)
      END IF
C
C     ----- GET TOTAL DENSITY MATRIX -----
C     WILL BE USED BY ECPHES, HLF, HFD, AND TVD
C
      IF(EXETYP.NE.CHECK) CALL DENDD1(X(LDA),X(LDB),L2)
C
C     ----- EFFECTIVE CORE POTENTIAL MODIFICATIONS -----
C
      IF(SECND  .AND.  IECP.GT.0) THEN
        CALL ECPHES(EXETYP,OUT,X(LEG),X(LEH),X(LDA),X(LFD))
      END IF
C
C     ---- relativistic contributions to gradient/Fock derivatives ----
C          RELATIVITY MAY NOT BE USED WITH NUCLEAR HESSIAN RUNS,
C          AS WE ONLY HAVE CODE FOR 1ST DERIVATIVE INTEGRALS.
C
      IF(RUNTYP.EQ.DBOC  .AND.  RMETHOD.NE.RNONE) THEN
         IF(RMETHOD.EQ.DK   .OR. RMETHOD.EQ.RIOTC) THEN
c           CALL QRNUMDER(X(LDA),X(LEG),X(LFD),L2,3*NAT)
            CALL QRNUMDER(X(LDA),L2)
         END IF
         IF(RMETHOD.EQ.RESC .OR. RMETHOD.EQ.ANESC) THEN
            IF(MASWRK) WRITE(IW,9050)
            CALL ABRT
         END IF
      END IF
C
C     ----- NUCLEAR FORCES -----
C
      CALL NUCDX(EXETYP,OUT,X(LEG),X(LFC),NC)
C
C     ----- SAVE GRADIENT OF NUCLEAR REPULSION ENERGY FOR MCSCF -----
C
      IF(MCCI) CALL DAWRIT(IDAF,IODA,X(LEG),3*NAT,258,0)
C
      IF(GOPARR) CALL DSCAL(3*NAT,1.0D+00/NPROC,X(LEG),1)
      IF(GOPARR) CALL DSCAL(NC*NC,1.0D+00/NPROC,X(LFC),1)
C
C     ----- HELLMANN-FEYNMAN FORCES -----
C
      CALL HLFX(EXETYP,OUT,X(LEG),X(LFC),NC,X(LFD),L2,X(LDA),NAT)
C
C     ----- 1E-CONTRIBUTION -----
C
      IF(MSECND) THEN
      CALL HLFDX(EXETYP,OUT,X(LFC),NC,X(LDA))
      END IF
C
C     ----- INTEGRAL FORCE (1E-CONTRIBUTION) -----
C
      CALL TVDX(EXETYP,OUT,X(LEG),X(LFC),NC,X(LFD),L2,X(LDA),NFT18)
C
C     ----- DENSITY FORCES -----
C
      CALL SDX(EXETYP,OUT,X(LEG),X(LFC),NC,X(LFD),L2,X(LDA))
C
C     ----- SAVE 1E-GRADIENT ON -DAF- FILE AND CHECK TIME -----
C
      NREST=4
      IST=1
      JST=1
      KST=1
      LST=1
C
C     ----- SAVE 1E-GRADIENT ON -DAF- FILE AND CHECK TIME -----
C
C         SAVE THE COMPLETED 1E- GRADIENT AND HESSIAN
C
      CALL DAWRIT(IDAF,IODA,X(LFC),NC*NC,4,0)
      CALL DAWRIT(IDAF,IODA,X(LEG),NC,3,0)
C
      CALL RETFM(NEED)
C
      IF (MASWRK) THEN
         IF(CITYP.NE.GUGA) THEN
            WRITE (IW,9080)
         ELSE
            IF(MCCI) THEN
               WRITE (IW,9085)
            ELSE
               WRITE (IW,9090)
            END IF
         END IF
      END IF
      CALL TIMIT(1)
C
 9000 FORMAT(/5X,46(1H-)/
     *        5X,'ONE ELECTRON INTEGRAL DERIVATIVE CONTRIBUTIONS'/
     *        5X,46(1H-))
 9050 FORMAT(//1X,'**** ERROR ****'/
     *         1X,'RUNTYP=DBOC ONLY WORKS WITH 2 RELATIVISTIC METHODS'/
     *         1X,'DK/IOTC ARE OK, RESC/NESC ARE NOT PROGRAMMED')
 9080 FORMAT(1X,'...... END OF 1-ELECTRON GRAD+HESS+FOCKDER ......')
 9085 FORMAT(1X,'...... END OF 1-ELECTRON GRAD+HESS+LAG.DER ......')
 9090 FORMAT(1X,'...... END OF 1-ELECTRON GRAD+FOCKDER ......')
C
      RETURN
      END
C*MODULE HSS1   *DECK DDTXYZ
C>
C>    @brief   Two integral derivative
C>
C>    @details prepare integral
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
C>  @param  XT Derivative of element
C>  @param  YT Derivative of element
C>  @param  ZT Derivative of element
C>  @param  XS Derivative of element
C>  @param  YS Derivative of element
C>  @param  ZS Derivative of element
C>  @param  NI Number of indice
C>  @param  NJ Number of indice
C>  @param  AJ Derivative of element for J
C>
      SUBROUTINE DDTXYZ(XT,YT,ZT,XS,YS,ZS,NI,NJ,AJ)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION XT(7,*),YT(7,*),ZT(7,*)
      DIMENSION XS(7,*),YS(7,*),ZS(7,*)
C
      DO 10 I=1,NI
      XT(I,1)=(XS(I,1  )            -XS(I,3  )*(AJ+AJ))*AJ
      YT(I,1)=(YS(I,1  )            -YS(I,3  )*(AJ+AJ))*AJ
      ZT(I,1)=(ZS(I,1  )            -ZS(I,3  )*(AJ+AJ))*AJ
   10 CONTINUE
C
      IF(NJ.EQ.1) RETURN
C
      DO 20 I=1,NI
      XT(I,2)=(XS(I,2  )*DBLE(2+2-1)-XS(I,4  )*(AJ+AJ))*AJ
      YT(I,2)=(YS(I,2  )*DBLE(2+2-1)-YS(I,4  )*(AJ+AJ))*AJ
      ZT(I,2)=(ZS(I,2  )*DBLE(2+2-1)-ZS(I,4  )*(AJ+AJ))*AJ
   20 CONTINUE
C
      IF(NJ.EQ.2) RETURN
C
      DO 30 J=3,NJ
      DO 30 I=1,NI
      XT(I,J)=(XS(I,J  )*DBLE(J+J-1)-XS(I,J+2)*(AJ+AJ))*AJ
     1        -XS(I,J-2)*DBLE(((J-1)*(J-2))/2)
      YT(I,J)=(YS(I,J  )*DBLE(J+J-1)-YS(I,J+2)*(AJ+AJ))*AJ
     1        -YS(I,J-2)*DBLE(((J-1)*(J-2))/2)
      ZT(I,J)=(ZS(I,J  )*DBLE(J+J-1)-ZS(I,J+2)*(AJ+AJ))*AJ
     1        -ZS(I,J-2)*DBLE(((J-1)*(J-2))/2)
   30 CONTINUE
C
      RETURN
      END
C*MODULE HSS1   *DECK DDERIJ
C>
C>    @brief   Two integral derivative
C>
C>    @details prepare integral
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
C> @param DDXDII Second Derivative for X
C> @param DDYDII Second Derivative for Y
C> @param DDZDII Second Derivative for Z
C> @param DDXDIJ Second Derivative for X
C> @param DDYDIJ Second Derivative for Y
C> @param DDZDIJ Second Derivative for Z
C> @param DXDI   Derivative for X
C> @param DYDI   Derivative for Y
C> @param DZDI   Derivative for Z
C> @param DXDJ   Derivative for X
C> @param DYDJ   Derivative for Y
C> @param DZDJ   Derivative for Z
C> @param X     Derivative of element
C> @param Y     Derivative of element
C> @param Z     Derivative of element
C> @param LIT   Number of LIT
C> @param LJT   Number of LJT
C> @param AI    Integral for I
C> @param AJ    Integral for J
C>
      SUBROUTINE DDERIJ(DDXDII,DDYDII,DDZDII,DDXDIJ,DDYDIJ,DDZDIJ,
     1                  DXDI  ,DYDI  ,DZDI  ,DXDJ  ,DYDJ  ,DZDJ  ,
     2                  X,Y,Z,LIT,LJT,AI,AJ)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION      X(7,*),     Y(7,*),     Z(7,*)
      DIMENSION   DXDI(5,1),  DYDI(5,1),  DZDI(5,1)
      DIMENSION   DXDJ(5,1),  DYDJ(5,1),  DZDJ(5,1)
      DIMENSION DDXDII(5,1),DDYDII(5,1),DDZDII(5,1)
      DIMENSION DDXDIJ(5,1),DDYDIJ(5,1),DDZDIJ(5,1)
C
C     ----- DXDI ... -----
C
      DO 110 J=1,LJT
      DXDI(1,J)=X(2,J)*(AI+AI)
      DYDI(1,J)=Y(2,J)*(AI+AI)
      DZDI(1,J)=Z(2,J)*(AI+AI)
  110 CONTINUE
C
      IF(LIT.EQ.1) GO TO 130
C
      DO 120 I=2,LIT
      DO 120 J=1,LJT
      DXDI(I,J)=X(I+1,J)*(AI+AI)-X(I-1,J)*DBLE(I-1)
      DYDI(I,J)=Y(I+1,J)*(AI+AI)-Y(I-1,J)*DBLE(I-1)
      DZDI(I,J)=Z(I+1,J)*(AI+AI)-Z(I-1,J)*DBLE(I-1)
  120 CONTINUE
C
  130 CONTINUE
C
C     ----- DXDJ ... -----
C
      DO 140 I=1,LIT
      DXDJ(I,1)=X(I,2)*(AJ+AJ)
      DYDJ(I,1)=Y(I,2)*(AJ+AJ)
      DZDJ(I,1)=Z(I,2)*(AJ+AJ)
  140 CONTINUE
C
      IF(LJT.EQ.1) GO TO 200
C
      DO 150 J=2,LJT
      DO 150 I=1,LIT
      DXDJ(I,J)=X(I,J+1)*(AJ+AJ)-X(I,J-1)*DBLE(J-1)
      DYDJ(I,J)=Y(I,J+1)*(AJ+AJ)-Y(I,J-1)*DBLE(J-1)
      DZDJ(I,J)=Z(I,J+1)*(AJ+AJ)-Z(I,J-1)*DBLE(J-1)
  150 CONTINUE
C
  200 CONTINUE
C
C     ----- DDXDII ... -----
C
      DO 210 J=1,LJT
      DDXDII(1,J)=(X(3,J)*(AI+AI)-X(1,J))*(AI+AI)
      DDYDII(1,J)=(Y(3,J)*(AI+AI)-Y(1,J))*(AI+AI)
      DDZDII(1,J)=(Z(3,J)*(AI+AI)-Z(1,J))*(AI+AI)
  210 CONTINUE
C
      IF(LIT.EQ.1) GO TO 300
C
      DO 220 J=1,LJT
      DDXDII(2,J)=(X(4,J)*(AI+AI)-X(2,J)*DBLE(2+2-1))*(AI+AI)
      DDYDII(2,J)=(Y(4,J)*(AI+AI)-Y(2,J)*DBLE(2+2-1))*(AI+AI)
      DDZDII(2,J)=(Z(4,J)*(AI+AI)-Z(2,J)*DBLE(2+2-1))*(AI+AI)
  220 CONTINUE
C
      IF(LIT.EQ.2) GO TO 300
C
      DO 230 I=3,LIT
      DO 230 J=1,LJT
      DDXDII(I,J)=(X(I+2,J)*(AI+AI)-X(I,J)*DBLE(I+I-1))*(AI+AI)
     1            +X(I-2,J)*DBLE((I-1)*(I-2))
      DDYDII(I,J)=(Y(I+2,J)*(AI+AI)-Y(I,J)*DBLE(I+I-1))*(AI+AI)
     1            +Y(I-2,J)*DBLE((I-1)*(I-2))
      DDZDII(I,J)=(Z(I+2,J)*(AI+AI)-Z(I,J)*DBLE(I+I-1))*(AI+AI)
     1            +Z(I-2,J)*DBLE((I-1)*(I-2))
  230 CONTINUE
C
  300 CONTINUE
C
C     ----- DDXDIJ ... -----
C
      DDXDIJ(1,1)= X(2,2)*((AJ+AJ)*(AI+AI))
      DDYDIJ(1,1)= Y(2,2)*((AJ+AJ)*(AI+AI))
      DDZDIJ(1,1)= Z(2,2)*((AJ+AJ)*(AI+AI))
C
      IF(LJT.EQ.1) GO TO 330
      DO 320 J=2,LJT
      DDXDIJ(1,J)=(X(2,J+1)*(AJ+AJ)-X(2,J-1)*DBLE(J-1))*(AI+AI)
      DDYDIJ(1,J)=(Y(2,J+1)*(AJ+AJ)-Y(2,J-1)*DBLE(J-1))*(AI+AI)
      DDZDIJ(1,J)=(Z(2,J+1)*(AJ+AJ)-Z(2,J-1)*DBLE(J-1))*(AI+AI)
  320 CONTINUE
  330 IF(LIT.EQ.1) RETURN
      DO 340 I=2,LIT
      DDXDIJ(I,1)=(X(I+1,2)*(AI+AI)-X(I-1,2)*DBLE(I-1))*(AJ+AJ)
      DDYDIJ(I,1)=(Y(I+1,2)*(AI+AI)-Y(I-1,2)*DBLE(I-1))*(AJ+AJ)
      DDZDIJ(I,1)=(Z(I+1,2)*(AI+AI)-Z(I-1,2)*DBLE(I-1))*(AJ+AJ)
  340 CONTINUE
      IF(LJT.EQ.1) RETURN
      DO 350 I=2,LIT
      DO 350 J=2,LJT
      DDXDIJ(I,J)=
     1      (X(I+1,J+1)*(AJ+AJ)-X(I+1,J-1)*DBLE(J-1))*(AI+AI)
     2     -(X(I-1,J+1)*(AJ+AJ)-X(I-1,J-1)*DBLE(J-1))*DBLE(I-1)
      DDYDIJ(I,J)=
     1      (Y(I+1,J+1)*(AJ+AJ)-Y(I+1,J-1)*DBLE(J-1))*(AI+AI)
     2     -(Y(I-1,J+1)*(AJ+AJ)-Y(I-1,J-1)*DBLE(J-1))*DBLE(I-1)
      DDZDIJ(I,J)=
     1      (Z(I+1,J+1)*(AJ+AJ)-Z(I+1,J-1)*DBLE(J-1))*(AI+AI)
     2     -(Z(I-1,J+1)*(AJ+AJ)-Z(I-1,J-1)*DBLE(J-1))*DBLE(I-1)
  350 CONTINUE
      RETURN
      END
C*MODULE HSS1   *DECK NUCDX
C>
C>    @brief   Two integral derivative
C>
C>    @details prepare integral
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
C>    @param EXETYP exetype
C>    @param OUT    output
C>    @param DE     output
C>    @param DDE    gradient elements
C>    @param nc     number of force constant elements
C>
      SUBROUTINE NUCDX(EXETYP,OUT,DE,DDE,NC)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MXATM=2000)
      LOGICAL OUT
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF !,BSFDD
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
C
      DIMENSION DE(3,NAT),DDE(NC*NC)
C
      DATA ZERO   /0.0D+00/
      DATA THREE  /3.0D+00/
      DATA CHECK/8HCHECK   /
C
      IF(EXETYP.EQ.CHECK) RETURN
C
C     ----- ZERO OUT GRADIENT+HESSIAN ARRAYS -----
C
      DO 10 IAT=1,NAT
      DO 10 IXYZ=1,3
   10 DE(IXYZ,IAT)=ZERO
      NC2=NC*NC
      DO 20 IXYZ=1,NC2
   20 DDE(IXYZ)=ZERO
C
      IF(NAT.EQ.1) GO TO 200
C
C     ----- CALCULATE FORCES -----
C
      DO 140 IAT=2,NAT
      IC=3*(IAT-1)
      DO 140 JAT=1,IAT-1
      JC=3*(JAT-1)
C
      RIJ=ZERO
      DO 110 IXYZ=1,3
  110 RIJ=RIJ+(C(IXYZ,IAT)-C(IXYZ,JAT))**2
C
C     ----- DEDI AND DEDJ -----
C
      DUM=ZAN(IAT)*ZAN(JAT)/(RIJ* SQRT(RIJ))
      DO 120 IXYZ=1,3
      DUM1=(C(IXYZ,IAT)-C(IXYZ,JAT))*DUM
      DE(IXYZ,IAT)=DE(IXYZ,IAT)-DUM1
      DE(IXYZ,JAT)=DE(IXYZ,JAT)+DUM1
  120 CONTINUE
C
C     ----- DDEDII , DDEDIJ , DDEDJJ -----
C
      IF(.NOT.MSECND) GO TO 200
      DUM=DUM/RIJ
      DO 130 IXYZ=1,3
      DUM1=(THREE*(C(IXYZ,IAT)-C(IXYZ,JAT))**2-RIJ)*DUM
      ICIC=(IC+IXYZ)+NC*(IC+IXYZ-1)
      ICJC=(IC+IXYZ)+NC*(JC+IXYZ-1)
      JCJC=(JC+IXYZ)+NC*(JC+IXYZ-1)
      DDE(ICIC)=DDE(ICIC)+DUM1
      DDE(ICJC)=DDE(ICJC)-DUM1
      DDE(JCJC)=DDE(JCJC)+DUM1
  130 CONTINUE
      DUM1=(THREE*(C(1,IAT)-C(1,JAT))*(C(2,IAT)-C(2,JAT)))*DUM
      IC2IC1=(IC+2)+NC*(IC+1-1)
      IC2JC1=(IC+2)+NC*(JC+1-1)
      IC1JC2=(IC+1)+NC*(JC+2-1)
      JC2JC1=(JC+2)+NC*(JC+1-1)
      DDE(IC2IC1)=DDE(IC2IC1)+DUM1
      DDE(IC2JC1)=DDE(IC2JC1)-DUM1
      DDE(IC1JC2)=DDE(IC1JC2)-DUM1
      DDE(JC2JC1)=DDE(JC2JC1)+DUM1
      DUM1=(THREE*(C(1,IAT)-C(1,JAT))*(C(3,IAT)-C(3,JAT)))*DUM
      IC3IC1=(IC+3)+NC*(IC+1-1)
      IC3JC1=(IC+3)+NC*(JC+1-1)
      IC1JC3=(IC+1)+NC*(JC+3-1)
      JC3JC1=(JC+3)+NC*(JC+1-1)
      DDE(IC3IC1)=DDE(IC3IC1)+DUM1
      DDE(IC3JC1)=DDE(IC3JC1)-DUM1
      DDE(IC1JC3)=DDE(IC1JC3)-DUM1
      DDE(JC3JC1)=DDE(JC3JC1)+DUM1
      DUM1=(THREE*(C(2,IAT)-C(2,JAT))*(C(3,IAT)-C(3,JAT)))*DUM
      IC3IC2=(IC+3)+NC*(IC+2-1)
      IC3JC2=(IC+3)+NC*(JC+2-1)
      IC2JC3=(IC+2)+NC*(JC+3-1)
      JC3JC2=(JC+3)+NC*(JC+2-1)
      DDE(IC3IC2)=DDE(IC3IC2)+DUM1
      DDE(IC3JC2)=DDE(IC3JC2)-DUM1
      DDE(IC2JC3)=DDE(IC2JC3)-DUM1
      DDE(JC3JC2)=DDE(JC3JC2)+DUM1
C
  140 CONTINUE
C
C     ----- SYMMETRIZE -----
C
      DO 150 IC=1,NC
      DO 150 JC=1,IC
      IJC=IC+NC*(JC-1)
      JIC=JC+NC*(IC-1)
  150 DDE(JIC)=DDE(IJC)
C
C     ----- PRINT -----
C
  200 CONTINUE
      IF(OUT .AND. MASWRK) THEN
      IF (MFIRST) WRITE(IW,9996)
      IF (MFIRST) CALL EGOUT(DE,NAT)
C
      IF (MSECND) WRITE(IW,9995)
      IF (MSECND) CALL HSSOUT(DDE,NC,NC,NC)
C
      ENDIF
      RETURN
 9996 FORMAT(/,10X,32(1H-),/,10X,'NUCLEAR CONTRIBUTION TO GRADIENT',
     1       /,10X,32(1H-))
 9995 FORMAT(/,10X,31(1H-),/,10X,'NUCLEAR CONTRIBUTION TO HESSIAN',
     1       /,10X,31(1H-))
      END
C*MODULE HSS1   *DECK HLFX
C>
C>    @brief   1 electron integral
C>
C>    @details  CALCULATE -HELFEY- CONTRIBUTION
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
C>    @param EXETYP exe type
C>    @param OUT PUT
C>    @param  EG  gradient
C>    @param  FC  force constant
C>    @param  NC  number of cartesian coordinate
C>    @param  DF  derivative of fock matrix
C>    @param  L2  number of triangular matrix
C>    @param  DAB density matrix
C>    @param  NAT number of atom
C>
      SUBROUTINE HLFX(EXETYP,OUT,EG,FC,NC,DF,L2,DAB,NAT)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION EG(3,NAT),FC(NC*NC),DAB(L2),
     *          DF(NC*L2)

      LOGICAL OUT   !,BFDD
      DATA CHECK/8HCHECK   /
C
C     ----- CALCULATE -HELFEY- CONTRIBUTION -----
C
      IF(EXETYP.EQ.CHECK) RETURN
      CALL HLFHSS(OUT,EG,FC,NC,DF,L2,DAB)
C
      RETURN
      END
C*MODULE HSS1   *DECK HLFHSS
C>
C>    @brief   1 electron integral
C>
C>    @details  CALCULATE -HELFEY- CONTRIBUTION : Main driver
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
C>    @param EXETYP exe type
C>    @param OUT PUT
C>    @param  DE  gradient
C>    @param  FC  force constant
C>    @param  NC  number of cartesian coordinate
C>    @param  DF  derivative of fock matrix
C>    @param  L2  number of triangular matrix
C>    @param  DAB density matrix
C>
      SUBROUTINE HLFHSS(OUT,DE,FC,NC,DF,L2,DAB)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DOUBLE PRECISION MCSCF
C
      PARAMETER (MXGTOT=20000, MXSH=5000,
     *           MXATM=2000, MXAO=8192)
      LOGICAL OUT
      LOGICAL IANDJ,NORM,DOUBLE,DBUG,GOPARR,DSKWRK,MASWRK,NXT,
     *        FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF,MCCI !,BSFDD
C
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,
     *                NI,NJ,CX,CY,CZ
      COMMON /IJPAIR/ IA(MXAO)
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DIMENSION W2(6),W4(6)
      DIMENSION FC(NC,*),DF(L2,*),DAB(*),DE(3,NAT)
      DIMENSION DIJ(225),PIJ(225)
      DIMENSION IJX(35),IJY(35),IJZ(35)
      DIMENSION   XV(5,5,6),  YV(5,5,6),  ZV(5,5,6)
      DIMENSION  DXV(5,5,6), DYV(5,5,6), DZV(5,5,6)
      DIMENSION DDXV(5,5,6),DDYV(5,5,6),DDZV(5,5,6)
C
      DATA MAXRYS /6/
      DATA RLN10  /2.30258D+00/
      DATA PI212  /1.1283791670955D+00/
      DATA SQRT3  /1.73205080756888D+00/
      DATA SQRT5  /2.23606797749979D+00/
      DATA SQRT7  /2.64575131106459D+00/
      DATA IJX    / 1, 2, 1, 1, 3, 1, 1, 2, 2, 1,
     1              4, 1, 1, 3, 3, 2, 1, 2, 1, 2,
     2              5, 1, 1, 4, 4, 2, 1, 2, 1, 3,
     3              3, 1, 3, 2, 2/
      DATA IJY    / 1, 1, 2, 1, 1, 3, 1, 2, 1, 2,
     1              1, 4, 1, 2, 1, 3, 3, 1, 2, 2,
     2              1, 5, 1, 2, 1, 4, 4, 1, 2, 3,
     3              1, 3, 2, 3, 2/
      DATA IJZ    / 1, 1, 1, 2, 1, 1, 3, 1, 2, 2,
     1              1, 1, 4, 1, 2, 1, 2, 3, 3, 2,
     2              1, 1, 5, 1, 2, 1, 2, 4, 4, 1,
     3              3, 3, 2, 2, 3/
      DATA ZERO,ONE,TWO,FOUR /0.0D+00,1.0D+00,2.0D+00,4.0D+00/
      DATA MCSCF/8HMCSCF   /
C
      DBUG=.FALSE. .AND. MASWRK
      IF (OUT  .AND.  MASWRK) WRITE (IW,9999)
      MCCI = SCFTYP.EQ.MCSCF
      TOL=RLN10*ITOL
      NORM=NORMF.NE.1.OR.NORMP.NE.1
C
C   INITIALIZATION FOR PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
C
C     ----- CALCULATE -HELFEY- TERM -----
C
      NDER=0
      IF(MFIRST) NDER = 1
      IF(MSECND) NDER = 2
C
C     ----- ISHELL -----
C
      DO 9000 II=1,NSHELL
C
C           GO PARALLEL!
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 9000
      END IF
C
      I=KATOM(II)
      XI=C(1,I)
      YI=C(2,I)
      ZI=C(3,I)
      I1=KSTART(II)
      I2=I1+KNG(II)-1
      LIT=KTYPE(II)
      MINI=KMIN(II)
      MAXI=KMAX(II)
      LOCI=KLOC(II)-MINI
C
C     ----- JSHELL -----
C
      DO 8000 JJ=1,II
C
C           GO PARALLEL!
C
      IF((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 8000
      END IF
C
      J=KATOM(JJ)
      XJ=C(1,J)
      YJ=C(2,J)
      ZJ=C(3,J)
      J1=KSTART(JJ)
      J2=J1+KNG(JJ)-1
      LJT=KTYPE(JJ)
      MINJ=KMIN(JJ)
      MAXJ=KMAX(JJ)
      LOCJ=KLOC(JJ)-MINJ
C
      IANDJ=II.EQ.JJ
      RR=(XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
      NROOTS = (LIT+LJT+NDER-2)/2 + 1
      IF(NROOTS.GT.MAXRYS) THEN
         WRITE(IW,9997) MAXRYS,LIT,LJT,NROOTS
         CALL ABRT
      ENDIF
C
C     ----- I PRIMITIVE -----
C
      DO 7000 IG=I1,I2
      AI=EX(IG)
      ARRI=AI*RR
      AXI=AI*XI
      AYI=AI*YI
      AZI=AI*ZI
      CSI=CS(IG)
      CPI=CP(IG)
      CDI=CD(IG)
      CFI=CF(IG)
      CGI=CG(IG)
C
C     ----- J PRIMITIVE -----
C
      JGMAX=J2
      IF(IANDJ) JGMAX=IG
      DO 6000 JG=J1,JGMAX
      AJ=EX(JG)
      AA=AI+AJ
      AA1=ONE/AA
      DUM=AJ*ARRI*AA1
      IF(DUM.GT.TOL) GO TO 6000
      FAC= EXP(-DUM)
      CSJ=CS(JG)
      CPJ=CP(JG)
      CDJ=CD(JG)
      CFJ=CF(JG)
      CGJ=CG(JG)
      AX=(AXI+AJ*XJ)*AA1
      AY=(AYI+AJ*YJ)*AA1
      AZ=(AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR -----
C
      DOUBLE=IANDJ.AND.IG.NE.JG
      IJ=0
      DO 360 I=MINI,MAXI
      GO TO (110,120,220,220,130,220,220,140,220,220,
     1       150,220,220,160,220,220,220,220,220,170,
     2       180,220,220,190,220,220,220,220,220,200,
     3       220,220,210,220,220),I
  110 DUM1=CSI*FAC
      GO TO 220
  120 DUM1=CPI*FAC
      GO TO 220
  130 DUM1=CDI*FAC
      GO TO 220
  140 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 220
  150 DUM1=CFI*FAC
      GO TO 220
  160 IF(NORM) DUM1=DUM1*SQRT5
      GO TO 220
  170 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 220
  180 DUM1=CGI*FAC
      GO TO 220
  190 IF(NORM) DUM1=DUM1*SQRT7
      GO TO 220
  200 IF(NORM) DUM1=DUM1*SQRT5/SQRT3
      GO TO 220
  210 IF(NORM) DUM1=DUM1*SQRT3
  220 CONTINUE
C
      JMAX=MAXJ
      IF(IANDJ) JMAX=I
      DO 360 J=MINJ,JMAX
      GO TO (230,250,350,350,260,350,350,270,350,350,
     1       280,350,350,290,350,350,350,350,350,300,
     2       310,350,350,320,350,350,350,350,350,330,
     3       350,350,340,350,350),J
  230 DUM2=DUM1*CSJ
      IF(.NOT.DOUBLE) GO TO 350
      IF(I.GT.1) GO TO 240
      DUM2=DUM2+DUM2
      GO TO 350
  240 DUM2=DUM2+CSI*CPJ*FAC
      GO TO 350
  250 DUM2=DUM1*CPJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 350
  260 DUM2=DUM1*CDJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 350
  270 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 350
  280 DUM2=DUM1*CFJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 350
  290 IF(NORM) DUM2=DUM2*SQRT5
      GO TO 350
  300 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 350
  310 DUM2=DUM1*CGJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 350
  320 IF(NORM) DUM2=DUM2*SQRT7
      GO TO 350
  330 IF(NORM) DUM2=DUM2*SQRT5/SQRT3
      GO TO 350
  340 IF(NORM) DUM2=DUM2*SQRT3
  350 CONTINUE
C
      NN=IA(LOCI+I)+(LOCJ+J)
      DEN=DAB(NN)
      IF(.NOT.IANDJ.OR.J.NE.I) DEN=DEN+DEN
      IJ=IJ+1
      PIJ(IJ)=DUM2
  360 DIJ(IJ)=DUM2*DEN
C
C     ----- HELLMANN-FEYNMAN TERM -----
C
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
      DO 500 KAT=1,NAT
      ZNUC=-ZAN(KAT)
      CX=C(1,KAT)
      CY=C(2,KAT)
      CZ=C(3,KAT)
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      IF(NROOTS.EQ.5) CALL ROOT5
      IF(NROOTS.EQ.6) CALL ROOT6
      DO 420 IROOT=1,NROOTS
      UU=U(IROOT)*AA
      U2=UU
      U4=UU*UU
      WW=W(IROOT)*ZNUC
      W2(IROOT)=WW*U2*TWO
      W4(IROOT)=WW*U4*FOUR
      TT=ONE/(AA+UU)
      T = SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
      DO 410 J=1,LJT
      NJ=J
      DO 410 I=1,LIT
      NI=I
      CALL DSXYZH
      XV(I,J,IROOT)=XINT
      YV(I,J,IROOT)=YINT
      ZV(I,J,IROOT)=ZINT
      CALL DVXYZH
      DXV(I,J,IROOT)=XINT
      DYV(I,J,IROOT)=YINT
      DZV(I,J,IROOT)=ZINT
      IF(.NOT. MSECND) GO TO 410
      CALL DDVXYZ
      DDXV(I,J,IROOT)=XINT
      DDYV(I,J,IROOT)=YINT
      DDZV(I,J,IROOT)=ZINT
  410 CONTINUE
  420 CONTINUE
C
      KC=3*(KAT-1)
      IJ=0
      DO 450 I=MINI,MAXI
      IX=IJX(I)
      IY=IJY(I)
      IZ=IJZ(I)
      JMAX=MAXJ
      IF(IANDJ) JMAX=I
      DO 440 J=MINJ,JMAX
      JX=IJX(J)
      JY=IJY(J)
      JZ=IJZ(J)
      DUMX=ZERO
      DUMY=ZERO
      DUMZ=ZERO
      DUMXX=ZERO
      DUMYY=ZERO
      DUMZZ=ZERO
      DUMXY=ZERO
      DUMXZ=ZERO
      DUMYZ=ZERO
      DO 430 IROOT=1,NROOTS
      DUMX =DUMX+
     1    DXV(IX,JX,IROOT)*  YV(IY,JY,IROOT)*  ZV(IZ,JZ,IROOT)*W2(IROOT)
      DUMY =DUMY+
     1     XV(IX,JX,IROOT)* DYV(IY,JY,IROOT)*  ZV(IZ,JZ,IROOT)*W2(IROOT)
      DUMZ =DUMZ+
     1     XV(IX,JX,IROOT)*  YV(IY,JY,IROOT)* DZV(IZ,JZ,IROOT)*W2(IROOT)
      DUM  =
     1     XV(IX,JX,IROOT)*  YV(IY,JY,IROOT)*  ZV(IZ,JZ,IROOT)*W2(IROOT)
      IF(.NOT. MSECND) GO TO 430
      DUMXX=DUMXX-DUM+
     1   DDXV(IX,JX,IROOT)*  YV(IY,JY,IROOT)*  ZV(IZ,JZ,IROOT)*W4(IROOT)
      DUMYY=DUMYY-DUM+
     1     XV(IX,JX,IROOT)*DDYV(IY,JY,IROOT)*  ZV(IZ,JZ,IROOT)*W4(IROOT)
      DUMZZ=DUMZZ-DUM+
     1     XV(IX,JX,IROOT)*  YV(IY,JY,IROOT)*DDZV(IZ,JZ,IROOT)*W4(IROOT)
      DUMXY=DUMXY+
     1    DXV(IX,JX,IROOT)* DYV(IY,JY,IROOT)*  ZV(IZ,JZ,IROOT)*W4(IROOT)
      DUMXZ=DUMXZ+
     1    DXV(IX,JX,IROOT)*  YV(IY,JY,IROOT)* DZV(IZ,JZ,IROOT)*W4(IROOT)
      DUMYZ=DUMYZ+
     1     XV(IX,JX,IROOT)* DYV(IY,JY,IROOT)* DZV(IZ,JZ,IROOT)*W4(IROOT)
  430 CONTINUE
      IJ=IJ+1
      DUM=(PI212*AA1)*DIJ(IJ)
      DE(1,KAT)=DE(1,KAT)+DUMX*DUM
      DE(2,KAT)=DE(2,KAT)+DUMY*DUM
      DE(3,KAT)=DE(3,KAT)+DUMZ*DUM
      IF(.NOT.MSECND) GO TO 510
      FC(KC+1,KC+1)=FC(KC+1,KC+1)+DUMXX*DUM
      FC(KC+2,KC+1)=FC(KC+2,KC+1)+DUMXY*DUM
      FC(KC+2,KC+2)=FC(KC+2,KC+2)+DUMYY*DUM
      FC(KC+3,KC+1)=FC(KC+3,KC+1)+DUMXZ*DUM
      FC(KC+3,KC+2)=FC(KC+3,KC+2)+DUMYZ*DUM
      FC(KC+3,KC+3)=FC(KC+3,KC+3)+DUMZZ*DUM
  510 CONTINUE
      IF(MCCI  .OR.  MCPHF) THEN
      DUM=(PI212*AA1)*PIJ(IJ)
      NN=IA(LOCI+I)+(LOCJ+J)
      DF(NN,KC+1)=DF(NN,KC+1)+DUMX*DUM
      DF(NN,KC+2)=DF(NN,KC+2)+DUMY*DUM
      DF(NN,KC+3)=DF(NN,KC+3)+DUMZ*DUM
      END IF
  440 CONTINUE
  450 CONTINUE
C
  500 CONTINUE
C
 6000 CONTINUE
 7000 CONTINUE
C
      IF(DBUG) THEN
      WRITE(IW,9992) II,JJ
      IF (MFIRST) WRITE(IW,9989)
      IF (MFIRST) CALL EGOUT(DE,NAT)
      IF (MSECND) WRITE(IW,9991)
      IF (MSECND) CALL HSSOUT(FC,NC,NC,NC)
      ENDIF
C
 8000 CONTINUE
 9000 CONTINUE
C
C     ----- SYMMETRIZE -FC- -----
C
      IF(MSECND) THEN
      DO 9010 IC=1,NC
      DO 9010 JC=1,IC
 9010 FC(JC,IC)=FC(IC,JC)
      END IF
C
C     ----- END OF *SHELL* LOOPS -----
C
      IF (GOPARR.AND.NXT) CALL DDI_DLBRESET
C
C     ----- PRINT -----
C
      IF(OUT) THEN
        IF(MFIRST) THEN
           IF(GOPARR) CALL DDI_GSUMF(1620,DE,NC)
              IF(MASWRK) WRITE(IW,9989)
              IF(MASWRK) CALL EGOUT(DE,NAT)
           IF(GOPARR) CALL DSCAL(NC,ONE/NPROC,DE,1)
        END IF
C
        IF(MSECND) THEN
           IF(GOPARR) CALL DDI_GSUMF(1621,FC,NC*NC)
              IF(MASWRK) WRITE(IW,9991)
              IF(MASWRK) CALL HSSOUT(FC,NC,NC,NC)
           IF(GOPARR) CALL DSCAL(NC*NC,ONE/NPROC,FC,1)
        END IF
C
        IF(MCCI  .OR.  MCPHF) THEN
           IF(GOPARR) CALL DDI_GSUMF(1622,DF,L2*NC)
              IF(MASWRK) THEN
              WRITE(IW,9990)
              IJ = 0
              DO 9250 IC=1,NAT
                  WRITE(IW,9988) IC
                  DO 9350 JK =1,3
                  IJ = IJ + 1
 9350            CALL PRTRIL(DF(1,IJ),NUM)
 9250         CONTINUE
              END IF
           IF(GOPARR) CALL DSCAL(L2*NC,ONE/NPROC,DF,1)
        ENDIF
        IF(MASWRK) WRITE(IW,9998)
      ENDIF
      RETURN
 9999 FORMAT(/,10X,21(1H-),/,10X,21HHELLMANN-FEYNMAN TERM,
     1       /,10X,21(1H-))
 9998 FORMAT(' ...... END OF HELLMANN-FEYNMAN FORCES ......')
 9997 FORMAT(' IN -HLF- , THE RYS QUADRATURE IS NOT IMPLEMENTED',
     1       ' BEYOND -NROOTS- = ',I3,/,
     2       ' LIT,LJT,NROOTS = ',3I3)
 9992 FORMAT(' SHELLS II, JJ ',2I5)
 9991 FORMAT(/,10X,24(1H-),/,10X,'HELLMANN-FEYNMAN HESSIAN',
     1       /,10X,24(1H-))
 9990 FORMAT(/,10X,22(1H-),/,10X,'DERIVATIVE FOCK MATRIX',
     1       /,10X,22(1H-))
 9989 FORMAT(/,10X,25(1H-),/,10X,'HELLMANN-FEYNMAN GRADIENT',
     1       /,10X,24(1H-))
 9988 FORMAT(1X,'CONTRIBUTION TO FOCK DERIVATIVE MATRIX, ATOM= ',I5)
      END
C*MODULE HSS1   *DECK HLFDX
C>
C>    @brief   1 electron integral
C>
C>    @details  derivative orbital
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>    @param EXETYP exe type
C>    @param OUT PUT
C>    @param  FC  force constant
C>    @param  NC  number of cartesian coordinate
C>    @param  DAB density matrix
C>
      SUBROUTINE HLFDX(EXETYP,OUT,FC,NC,DAB)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL OUT
C
      DIMENSION FC(NC*NC),DAB(1)
      DATA CHECK/8HCHECK     /
C
      IF(EXETYP.EQ.CHECK) RETURN
C
C     ----- GET -HLFD- DERIVATIVES -----
C
      CALL HLFD(OUT,FC,NC,DAB)
C
      RETURN
      END
C*MODULE HSS1   *DECK HLFD
C>
C>    @brief   1 electron integral
C>
C>    @details  derivative orbital
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>    @param OUT  OUTPUT logical
C>    @param  FC  force constant
C>    @param  NC  number of cartesian coordinate
C>    @param  DAB density matrix
      SUBROUTINE HLFD(OUT,FC,NC,DAB)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MXGTOT=20000, MXSH=5000,
     *           MXATM=2000, MXAO=8192)
      LOGICAL NORM
      LOGICAL OUT,DBUG
      LOGICAL GOPARR,DSKWRK,MASWRK,NXT
      LOGICAL FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF !,BSFDD
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,
     *                NI,NJ,CX,CY,CZ
      COMMON /IJPAIR/ IA(MXAO)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
C
      DIMENSION W2(6)
      DIMENSION FC(NC,1),DAB(1)
      DIMENSION DIJ(225)
      DIMENSION IJX(35),IJY(35),IJZ(35)
      DIMENSION     XV(6,5,6),    YV(6,5,6),    ZV(6,5,6)
      DIMENSION    DXV(6,5,6),   DYV(6,5,6),   DZV(6,5,6)
      DIMENSION  DXVDI(5,5,6), DYVDI(5,5,6), DZVDI(5,5,6)
      DIMENSION DDXVDI(5,5,6),DDYVDI(5,5,6),DDZVDI(5,5,6)
      DATA MAXRYS /6/
      DATA RLN10  /2.30258D+00/
      DATA ZERO   /0.0D+00/
      DATA PT5    /0.5D+00/
      DATA ONE    /1.0D+00/
      DATA TWO    /2.0D+00/
      DATA PI212  /1.1283791670955D+00/
      DATA SQRT3  /1.73205080756888D+00/
      DATA SQRT5  /2.23606797749979D+00/
      DATA SQRT7  /2.64575131106459D+00/
      DATA IJX    / 1, 2, 1, 1, 3, 1, 1, 2, 2, 1,
     1              4, 1, 1, 3, 3, 2, 1, 2, 1, 2,
     2              5, 1, 1, 4, 4, 2, 1, 2, 1, 3,
     3              3, 1, 3, 2, 2/
      DATA IJY    / 1, 1, 2, 1, 1, 3, 1, 2, 1, 2,
     1              1, 4, 1, 2, 1, 3, 3, 1, 2, 2,
     2              1, 5, 1, 2, 1, 4, 4, 1, 2, 3,
     3              1, 3, 2, 3, 2/
      DATA IJZ    / 1, 1, 1, 2, 1, 1, 3, 1, 2, 2,
     1              1, 1, 4, 1, 2, 1, 2, 3, 3, 2,
     2              1, 1, 5, 1, 2, 1, 2, 4, 4, 1,
     3              3, 3, 2, 2, 3/
C
      DBUG=.FALSE. .AND. MASWRK
      IF(OUT  .AND.  MASWRK) WRITE(IW,9008)
C
      NORM=NORMF.NE.1.OR.NORMP.NE.1
      TOL=RLN10*ITOL
C
C     ----- CALCULATE DERIVATIVES OF -HLF- TERM -----
C
      IF(MFIRST) NDER = 1
      IF(MSECND) NDER = 2
C
C   INITIALIZATION FOR PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
C
C     ----- ISHELL -----
C
      DO 9000 II=1,NSHELL
C
C           GO PARALLEL!
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 9000
      END IF
C
      I=KATOM(II)
      XI=C(1,I)
      YI=C(2,I)
      ZI=C(3,I)
      I1=KSTART(II)
      I2=I1+KNG(II)-1
      LIT=KTYPE(II)
      MINI=KMIN(II)
      MAXI=KMAX(II)
      LOCI=KLOC(II)-MINI
C
      LITDER=LIT+NDER-1
      IAT   =I
C
C     ----- JSHELL -----
C
      DO 8000 JJ=1,NSHELL
C
C         GO PARALLEL!
C
      IF ((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 8000
      END IF
C
      J=KATOM(JJ)
      XJ=C(1,J)
      YJ=C(2,J)
      ZJ=C(3,J)
      J1=KSTART(JJ)
      J2=J1+KNG(JJ)-1
      LJT=KTYPE(JJ)
      MINJ=KMIN(JJ)
      MAXJ=KMAX(JJ)
      LOCJ=KLOC(JJ)-MINJ
C
      RR=(XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      NROOTS=(LIT+LJT+NDER-2)/2+1
      IF(NROOTS.GT.MAXRYS) THEN
         WRITE(IW,9997) MAXRYS,LIT,LJT,NROOTS
         CALL ABRT
      ENDIF
C
C     ----- I PRIMITIVE -----
C
      DO 7000 IG=I1,I2
      AI=EX(IG)
      ARRI=AI*RR
      AXI=AI*XI
      AYI=AI*YI
      AZI=AI*ZI
      CSI=CS(IG)
      CPI=CP(IG)
      CDI=CD(IG)
      CFI=CF(IG)
      CGI=CG(IG)
C
C     ----- J PRIMITIVE -----
C
      DO 6000 JG=J1,J2
      AJ=EX(JG)
      AA=AI+AJ
      AA1=ONE/AA
      DUM=AJ*ARRI*AA1
      IF(DUM.GT.TOL) GO TO 6000
      FAC= EXP(-DUM)
      CSJ=CS(JG)
      CPJ=CP(JG)
      CDJ=CD(JG)
      CFJ=CF(JG)
      CGJ=CG(JG)
      AX=(AXI+AJ*XJ)*AA1
      AY=(AYI+AJ*YJ)*AA1
      AZ=(AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR -----
C
      IJ=0
      DO 360 I=MINI,MAXI
      GO TO (110,120,220,220,130,220,220,140,220,220,
     1       150,220,220,160,220,220,220,220,220,170,
     2       180,220,220,190,220,220,220,220,220,200,
     3       220,220,210,220,220),I
  110 DUM1=CSI*FAC
      GO TO 220
  120 DUM1=CPI*FAC
      GO TO 220
  130 DUM1=CDI*FAC
      GO TO 220
  140 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 220
  150 DUM1=CFI*FAC
      GO TO 220
  160 IF(NORM) DUM1=DUM1*SQRT5
      GO TO 220
  170 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 220
  180 DUM1=CGI*FAC
      GO TO 220
  190 IF(NORM) DUM1=DUM1*SQRT7
      GO TO 220
  200 IF(NORM) DUM1=DUM1*SQRT5/SQRT3
      GO TO 220
  210 IF(NORM) DUM1=DUM1*SQRT3
  220 CONTINUE
C
      DO 360 J=MINJ,MAXJ
      GO TO (230,250,350,350,260,350,350,270,350,350,
     1       280,350,350,290,350,350,350,350,350,300,
     2       310,350,350,320,350,350,350,350,350,330,
     3       350,350,340,350,350),J
  230 DUM2=DUM1*CSJ
      GO TO 350
  250 DUM2=DUM1*CPJ
      GO TO 350
  260 DUM2=DUM1*CDJ
      GO TO 350
  270 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 350
  280 DUM2=DUM1*CFJ
      GO TO 350
  290 IF(NORM) DUM2=DUM2*SQRT5
      GO TO 350
  300 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 350
  310 DUM2=DUM1*CGJ
      GO TO 350
  320 IF(NORM) DUM2=DUM2*SQRT7
      GO TO 350
  330 IF(NORM) DUM2=DUM2*SQRT5/SQRT3
      GO TO 350
  340 IF(NORM) DUM2=DUM2*SQRT3
  350 CONTINUE
C
      NN=IA(MAX0(LOCI+I,LOCJ+J))
     1  +   MIN0(LOCI+I,LOCJ+J)
      DEN=DAB(NN)
      DEN=DEN+DEN
      IJ=IJ+1
      DIJ(IJ)=DUM2*DEN
  360 CONTINUE
C
C     ----- NUCLEAR ATTRACTION DERIVATIVES -----
C
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
      DO 500 KAT=1,NAT
      ZNUC=-ZAN(KAT)
      CX=C(1,KAT)
      CY=C(2,KAT)
      CZ=C(3,KAT)
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      IF(NROOTS.EQ.5) CALL ROOT5
      IF(NROOTS.EQ.6) CALL ROOT6
      DO 420 IROOT=1,NROOTS
      UU=U(IROOT)*AA
      WW=W(IROOT)*ZNUC
      W2(IROOT)=WW*UU*TWO
      TT=ONE/(AA+UU)
      T = SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
C
      DO 410 J=1,LJT
      NJ=J
      DO 410 I=1,LITDER
      NI=I
      CALL DSXYZH
      XV(I,J,IROOT)=XINT
      YV(I,J,IROOT)=YINT
      ZV(I,J,IROOT)=ZINT
      CALL DVXYZH
      DXV(I,J,IROOT)=XINT
      DYV(I,J,IROOT)=YINT
      DZV(I,J,IROOT)=ZINT
  410 CONTINUE
C
      CALL DERI( DXVDI(1,1,IROOT), DYVDI(1,1,IROOT), DZVDI(1,1,IROOT),
     1              XV(1,1,IROOT),    YV(1,1,IROOT),    ZV(1,1,IROOT),
     2          LIT,LJT,AI)
      CALL DERI(DDXVDI(1,1,IROOT),DDYVDI(1,1,IROOT),DDZVDI(1,1,IROOT),
     1             DXV(1,1,IROOT),   DYV(1,1,IROOT),   DZV(1,1,IROOT),
     2          LIT,LJT,AI)
C
  420 CONTINUE
C
      FAC=PI212
      IF(KAT.EQ.IAT) FAC=FAC+FAC
      IC=3*(IAT-1)
      KC=3*(KAT-1)
      IJ=0
      DO 450 I=MINI,MAXI
      IX=IJX(I)
      IY=IJY(I)
      IZ=IJZ(I)
      DO 440 J=MINJ,MAXJ
      JX=IJX(J)
      JY=IJY(J)
      JZ=IJZ(J)
      DUMXX=ZERO
      DUMXY=ZERO
      DUMXZ=ZERO
      DUMYX=ZERO
      DUMYY=ZERO
      DUMYZ=ZERO
      DUMZX=ZERO
      DUMZY=ZERO
      DUMZZ=ZERO
      DO 430 IROOT=1,NROOTS
      DUMXX=DUMXX+W2(IROOT)*
     1     (DDXVDI(IX,JX,IROOT)* YV   (IY,JY,IROOT)* ZV   (IZ,JZ,IROOT))
      DUMXY=DUMXY+W2(IROOT)*
     1     (DXVDI (IX,JX,IROOT)*DYV   (IY,JY,IROOT)* ZV   (IZ,JZ,IROOT))
      DUMXZ=DUMXZ+W2(IROOT)*
     1     (DXVDI (IX,JX,IROOT)* YV   (IY,JY,IROOT)*DZV   (IZ,JZ,IROOT))
      DUMYX=DUMYX+W2(IROOT)*
     1     (DXV   (IX,JX,IROOT)*DYVDI (IY,JY,IROOT)* ZV   (IZ,JZ,IROOT))
      DUMYY=DUMYY+W2(IROOT)*
     1     ( XV   (IX,JX,IROOT)*DDYVDI(IY,JY,IROOT)* ZV   (IZ,JZ,IROOT))
      DUMYZ=DUMYZ+W2(IROOT)*
     1     ( XV   (IX,JX,IROOT)*DYVDI (IY,JY,IROOT)*DZV   (IZ,JZ,IROOT))
      DUMZX=DUMZX+W2(IROOT)*
     1     (DXV   (IX,JX,IROOT)* YV   (IY,JY,IROOT)*DZVDI (IZ,JZ,IROOT))
      DUMZY=DUMZY+W2(IROOT)*
     1     ( XV   (IX,JX,IROOT)*DYV   (IY,JY,IROOT)*DZVDI (IZ,JZ,IROOT))
      DUMZZ=DUMZZ+W2(IROOT)*
     1     ( XV   (IX,JX,IROOT)* YV   (IY,JY,IROOT)*DDZVDI(IZ,JZ,IROOT))
  430 CONTINUE
      IJ=IJ+1
      IF(IC.GE.KC) THEN
      FC(IC+1,KC+1)=FC(IC+1,KC+1)+DUMXX*(AA1*FAC*DIJ(IJ))
      FC(IC+1,KC+2)=FC(IC+1,KC+2)+DUMXY*(AA1*FAC*DIJ(IJ))
      FC(IC+1,KC+3)=FC(IC+1,KC+3)+DUMXZ*(AA1*FAC*DIJ(IJ))
      FC(IC+2,KC+1)=FC(IC+2,KC+1)+DUMYX*(AA1*FAC*DIJ(IJ))
      FC(IC+2,KC+2)=FC(IC+2,KC+2)+DUMYY*(AA1*FAC*DIJ(IJ))
      FC(IC+2,KC+3)=FC(IC+2,KC+3)+DUMYZ*(AA1*FAC*DIJ(IJ))
      FC(IC+3,KC+1)=FC(IC+3,KC+1)+DUMZX*(AA1*FAC*DIJ(IJ))
      FC(IC+3,KC+2)=FC(IC+3,KC+2)+DUMZY*(AA1*FAC*DIJ(IJ))
      FC(IC+3,KC+3)=FC(IC+3,KC+3)+DUMZZ*(AA1*FAC*DIJ(IJ))
      ELSE
      FC(KC+1,IC+1)=FC(KC+1,IC+1)+DUMXX*(AA1*FAC*DIJ(IJ))
      FC(KC+1,IC+2)=FC(KC+1,IC+2)+DUMYX*(AA1*FAC*DIJ(IJ))
      FC(KC+1,IC+3)=FC(KC+1,IC+3)+DUMZX*(AA1*FAC*DIJ(IJ))
      FC(KC+2,IC+1)=FC(KC+2,IC+1)+DUMXY*(AA1*FAC*DIJ(IJ))
      FC(KC+2,IC+2)=FC(KC+2,IC+2)+DUMYY*(AA1*FAC*DIJ(IJ))
      FC(KC+2,IC+3)=FC(KC+2,IC+3)+DUMZY*(AA1*FAC*DIJ(IJ))
      FC(KC+3,IC+1)=FC(KC+3,IC+1)+DUMXZ*(AA1*FAC*DIJ(IJ))
      FC(KC+3,IC+2)=FC(KC+3,IC+2)+DUMYZ*(AA1*FAC*DIJ(IJ))
      FC(KC+3,IC+3)=FC(KC+3,IC+3)+DUMZZ*(AA1*FAC*DIJ(IJ))
      ENDIF
  440 CONTINUE
  450 CONTINUE
C
  500 CONTINUE
C
 6000 CONTINUE
 7000 CONTINUE
C
      IF(DBUG) THEN
      WRITE(IW,9993) II,JJ
      CALL HSSOUT(FC,NC,NC,NC)
      ENDIF
C
 8000 CONTINUE
 9000 CONTINUE
C
C     ----- SYMMETRIZE -----
C
      DO 9020 IAT=1,NAT
      IC=3*(IAT-1)
      DO 9010 IXYZ=1,3
      DO 9010 JXYZ=1,IXYZ
      FCIJ=FC(IC+IXYZ,IC+JXYZ)
      FCJI=FC(IC+JXYZ,IC+IXYZ)
 9010 FC(IC+IXYZ,IC+JXYZ)=(FCIJ+FCJI)*PT5
 9020 CONTINUE
      NC=3*NAT
      DO 9030 IC=1,NC
      DO 9030 JC=1,IC
      FC(JC,IC)=FC(IC,JC)
 9030 CONTINUE
C
C     ----- END OF *SHELL* LOOPS -----
C
      IF (GOPARR.AND.NXT) CALL DDI_DLBRESET
C
C     ----- PRINT OUT -----
C
      IF(OUT) THEN
        IF(GOPARR) CALL DDI_GSUMF(1621,FC,NC*NC)
        IF(MASWRK) THEN
          WRITE(IW,9991)
          CALL HSSOUT(FC,NC,NC,NC)
          WRITE(IW,9998)
        END IF
        IF(GOPARR) CALL DSCAL(NC*NC,ONE/NPROC,FC,1)
      ENDIF
      RETURN
 9997 FORMAT(' IN -HLFD- , THE RYS QUADRATURE IS NOT IMPLEMEMENTED',
     1       ' BEYOND -NROOTS- = ',I3,/,
     2       ' LIT,LJT,NROOTS= ',3I3)
 9998 FORMAT(' ...... END OF -HLF- DERIVATIVE TERM ......')
 9993 FORMAT(' SHELLS II, JJ ',2I5)
 9991 FORMAT(/,10X,19(1H-),/,10X,'-HLFD- HESSIAN TERM',
     1       /,10X,19(1H-))
 9008 FORMAT(/,10X,32(1H-),/,10X,32HHELLMANN-FEYNMAN DERIVATIVE TERM,
     1       /,10X,32(1H-))
      END
C*MODULE HSS1   *DECK TVDX
C>
C>    @brief   1 electron integral
C>
C>    @details  CALCULATE -HELFEY- CONTRIBUTION
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
C>    @param  EXETYP exe type
C>    @param  OUT PUT
C>    @param  EG  gradient
C>    @param  FC  force constant
C>    @param  NC  number of cartesian coordinate
C>    @param  DF  derivative of fock matrix
C>    @param  L2  number of triangular matrix
C>    @param  DAB density matrix
C>    @param  NFT18 number of record
C>
      SUBROUTINE TVDX(EXETYP,OUT,EG,FC,NC,DF,L2,DAB,NFT18)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DOUBLE PRECISION MCSCF
C
      PARAMETER (MXATM=2000)
C
      LOGICAL FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF,MCCI !,BSFDD
      LOGICAL OUT
C
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DIMENSION EG(3,NAT),FC(NC*NC),DF(NC*L2),DAB(L2)
C
      DATA MCSCF/8HMCSCF   /
      DATA CHECK/8HCHECK   /
C
      IF(EXETYP.EQ.CHECK) RETURN
      MCCI = SCFTYP.EQ.MCSCF
C
C     ----- GET -TV- DERIVATIVES -----
C
      CALL TVDHSS(OUT,EG,FC,NC,DF,L2,DAB)
C
C        SAVE THE COMPLETED FOCK DERIVATIVES
C
      IF(MCCI  .OR.  MCPHF) THEN
         CALL SEQREW(NFT18)
         IX=1
         DO 40 I=1,NC
            CALL SQWRIT(NFT18,DF(IX),L2)
            IX=IX+L2
   40    CONTINUE
         CALL SEQREW(NFT18)
      END IF
C
      RETURN
      END
C*MODULE HSS1   *DECK TVDHSS
C>
C>    @brief   kinetic term
C>
C>    @details  CALCULATE kinetic term
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
C>    @param  OUT PUT
C>    @param  DE  gradient
C>    @param  FC  force constant
C>    @param  NC  number of cartesian coordinate
C>    @param  DF  derivative of fock matrix
C>    @param  L2  number of triangular matrix
C>    @param  DAB density matrix
      SUBROUTINE TVDHSS(OUT,DE,FC,NC,DF,L2,DAB)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MXGTOT=20000, MXSH=5000,
     *           MXATM=2000, MXAO=8192)
      LOGICAL IANDJ
      LOGICAL NORM
      LOGICAL GOPARR,DSKWRK,MASWRK,NXT,OUT,DBUG
      LOGICAL FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF !,BSFDD
C
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,
     *                NI,NJ,CX,CY,CZ
      COMMON /IJPAIR/ IA(MXAO)
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
C
      DIMENSION DE(3,NAT),FC(NC,1),DF(L2,1),DAB(1)
      DIMENSION DIJ(225),PIJ(225)
      DIMENSION IJX(35),IJY(35),IJZ(35)
      DIMENSION     XS(7,8)  ,    YS(7,8)  ,    ZS(7,8)
      DIMENSION  DXSDI(5,5)  , DYSDI(5,5)  , DZSDI(5,5)
      DIMENSION  DXSDJ(5,5)  , DYSDJ(5,5)  , DZSDJ(5,5)
      DIMENSION DXSDII(5,5)  ,DYSDII(5,5)  ,DZSDII(5,5)
      DIMENSION DXSDIJ(5,5)  ,DYSDIJ(5,5)  ,DZSDIJ(5,5)
      DIMENSION     XT(7,6)  ,    YT(7,6)  ,    ZT(7,6)
      DIMENSION  DXTDI(5,5)  , DYTDI(5,5)  , DZTDI(5,5)
      DIMENSION  DXTDJ(5,5)  , DYTDJ(5,5)  , DZTDJ(5,5)
      DIMENSION DXTDII(5,5)  ,DYTDII(5,5)  ,DZTDII(5,5)
      DIMENSION DXTDIJ(5,5)  ,DYTDIJ(5,5)  ,DZTDIJ(5,5)
      DIMENSION     XV(7,6,6),    YV(7,6,6),    ZV(7,6,6)
      DIMENSION  DXVDI(5,5,6), DYVDI(5,5,6), DZVDI(5,5,6)
      DIMENSION  DXVDJ(5,5,6), DYVDJ(5,5,6), DZVDJ(5,5,6)
      DIMENSION DXVDII(5,5,6),DYVDII(5,5,6),DZVDII(5,5,6)
      DIMENSION DXVDIJ(5,5,6),DYVDIJ(5,5,6),DZVDIJ(5,5,6)
      DATA MAXRYS /6/
      DATA RLN10  /2.30258D+00/
      DATA ZERO   /0.0D+00/
      DATA ONE    /1.0D+00/
      DATA PI212  /1.1283791670955D+00/
      DATA SQRT3  /1.73205080756888D+00/
      DATA SQRT5  /2.23606797749979D+00/
      DATA SQRT7  /2.64575131106459D+00/
      DATA IJX    / 1, 2, 1, 1, 3, 1, 1, 2, 2, 1,
     1              4, 1, 1, 3, 3, 2, 1, 2, 1, 2,
     2              5, 1, 1, 4, 4, 2, 1, 2, 1, 3,
     3              3, 1, 3, 2, 2/
      DATA IJY    / 1, 1, 2, 1, 1, 3, 1, 2, 1, 2,
     1              1, 4, 1, 2, 1, 3, 3, 1, 2, 2,
     2              1, 5, 1, 2, 1, 4, 4, 1, 2, 3,
     3              1, 3, 2, 3, 2/
      DATA IJZ    / 1, 1, 1, 2, 1, 1, 3, 1, 2, 2,
     1              1, 1, 4, 1, 2, 1, 2, 3, 3, 2,
     2              1, 1, 5, 1, 2, 1, 2, 4, 4, 1,
     3              3, 3, 2, 2, 3/
C
      DBUG=.FALSE. .AND. MASWRK
      IF (OUT  .AND.  MASWRK) WRITE (IW,9008)
C
      TOL=RLN10*ITOL
      NORM=NORMF.NE.1.OR.NORMP.NE.1
C
C     ----- CALCULATE -TV- DERIVATIVE TERM -----
C
      NDER=0
      IF(MFIRST) NDER = 1
      IF(MSECND) NDER = 2
C
C   INITIALIZE PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
C
C     ----- ISHELL -----
C
      DO 9000 II=1,NSHELL
C
C           GO PARALLEL!
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 9000
      END IF
C
      I=KATOM(II)
      XI=C(1,I)
      YI=C(2,I)
      ZI=C(3,I)
      I1=KSTART(II)
      I2=I1+KNG(II)-1
      LIT=KTYPE(II)
      MINI=KMIN(II)
      MAXI=KMAX(II)
      LOCI=KLOC(II)-MINI
C
      LITDER=LIT+NDER
      IAT   =I
C
C     ----- JSHELL -----
C
      DO 8000 JJ=1,NSHELL
C
C           GO PARALLEL!
C
      IF ((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 8000
      END IF
C
      J=KATOM(JJ)
      XJ=C(1,J)
      YJ=C(2,J)
      ZJ=C(3,J)
      J1=KSTART(JJ)
      J2=J1+KNG(JJ)-1
      LJT=KTYPE(JJ)
      MINJ=KMIN(JJ)
      MAXJ=KMAX(JJ)
      LOCJ=KLOC(JJ)-MINJ
C
      LJTDER=LJT+NDER-1
      LJTMOD=LJTDER+2
      JAT   =J
C
      IANDJ=II.EQ.JJ
      RR=(XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      NROOTS=(LIT+LJT+NDER-2)/2+1
      IF(NROOTS.GT.MAXRYS) THEN
         WRITE(IW,9997) MAXRYS,LIT,LJT,NROOTS
          CALL ABRT
      ENDIF
C
C     ----- I PRIMITIVE -----
C
      DO 7000 IG=I1,I2
      AI=EX(IG)
      ARRI=AI*RR
      AXI=AI*XI
      AYI=AI*YI
      AZI=AI*ZI
      CSI=CS(IG)
      CPI=CP(IG)
      CDI=CD(IG)
      CFI=CF(IG)
      CGI=CG(IG)
C
C     ----- J PRIMITIVE -----
C
      DO 6000 JG=J1,J2
      AJ=EX(JG)
      AA=AI+AJ
      AA1=ONE/AA
      DUM=AJ*ARRI*AA1
      IF(DUM.GT.TOL) GO TO 6000
      FAC= EXP(-DUM)
      CSJ=CS(JG)
      CPJ=CP(JG)
      CDJ=CD(JG)
      CFJ=CF(JG)
      CGJ=CG(JG)
      AX=(AXI+AJ*XJ)*AA1
      AY=(AYI+AJ*YJ)*AA1
      AZ=(AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR -----
C
      IJ=0
      DO 360 I=MINI,MAXI
      GO TO (110,120,220,220,130,220,220,140,220,220,
     1       150,220,220,160,220,220,220,220,220,170,
     2       180,220,220,190,220,220,220,220,220,200,
     3       220,220,210,220,220),I
  110 DUM1=CSI*FAC
      GO TO 220
  120 DUM1=CPI*FAC
      GO TO 220
  130 DUM1=CDI*FAC
      GO TO 220
  140 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 220
  150 DUM1=CFI*FAC
      GO TO 220
  160 IF(NORM) DUM1=DUM1*SQRT5
      GO TO 220
  170 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 220
  180 DUM1=CGI*FAC
      GO TO 220
  190 IF(NORM) DUM1=DUM1*SQRT7
      GO TO 220
  200 IF(NORM) DUM1=DUM1*SQRT5/SQRT3
      GO TO 220
  210 IF(NORM) DUM1=DUM1*SQRT3
  220 CONTINUE
C
      DO 360 J=MINJ,MAXJ
      GO TO (230,250,350,350,260,350,350,270,350,350,
     1       280,350,350,290,350,350,350,350,350,300,
     2       310,350,350,320,350,350,350,350,350,330,
     3       350,350,340,350,350),J
  230 DUM2=DUM1*CSJ
      GO TO 350
  250 DUM2=DUM1*CPJ
      GO TO 350
  260 DUM2=DUM1*CDJ
      GO TO 350
  270 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 350
  280 DUM2=DUM1*CFJ
      GO TO 350
  290 IF(NORM) DUM2=DUM2*SQRT5
      GO TO 350
  300 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 350
  310 DUM2=DUM1*CGJ
      GO TO 350
  320 IF(NORM) DUM2=DUM2*SQRT7
      GO TO 350
  330 IF(NORM) DUM2=DUM2*SQRT5/SQRT3
      GO TO 350
  340 IF(NORM) DUM2=DUM2*SQRT3
  350 CONTINUE
C
      NN=IA(MAX0(LOCI+I,LOCJ+J))
     1  +   MIN0(LOCI+I,LOCJ+J)
      DEN=DAB(NN)
      DEN=DEN+DEN
      IJ=IJ+1
      DIJ(IJ)=DUM2*DEN
      PIJ(IJ)=DUM2
      IF(IANDJ.AND.I.EQ.J) PIJ(IJ)=PIJ(IJ)+PIJ(IJ)
  360 CONTINUE
C
C     ----- KINETIC ENERGY DERIVATIVES -----
C
      T = SQRT(AA1)
      X0=AX
      Y0=AY
      Z0=AZ
      DO 370 J=1,LJTMOD
      NJ=J
      DO 370 I=1,LITDER
      NI=I
      CALL DSXYZH
      XS(I,J)=XINT*T
      YS(I,J)=YINT*T
      ZS(I,J)=ZINT*T
  370 CONTINUE
C
      CALL DDTXYZ(XT,YT,ZT,XS,YS,ZS,LITDER,LJTDER,AJ)
C
      CALL DDERIJ(DXSDII,DYSDII,DZSDII,DXSDIJ,DYSDIJ,DZSDIJ,
     1            DXSDI ,DYSDI ,DZSDI ,DXSDJ ,DYSDJ ,DZSDJ ,
     1            XS,YS,ZS,LIT,LJT,AI,AJ)
      CALL DDERIJ(DXTDII,DYTDII,DZTDII,DXTDIJ,DYTDIJ,DZTDIJ,
     1            DXTDI ,DYTDI ,DZTDI ,DXTDJ ,DYTDJ ,DZTDJ ,
     1            XT,YT,ZT,LIT,LJT,AI,AJ)
C
      IC=3*(IAT-1)
      JC=3*(JAT-1)
      IJ=0
      DO 390 I=MINI,MAXI
      IX=IJX(I)
      IY=IJY(I)
      IZ=IJZ(I)
      DO 380 J=MINJ,MAXJ
      JX=IJX(J)
      JY=IJY(J)
      JZ=IJZ(J)
      DUMX =DXTDI (IX,JX)* YS   (IY,JY)* ZS   (IZ,JZ)
     1     +DXSDI (IX,JX)* YT   (IY,JY)* ZS   (IZ,JZ)
     2     +DXSDI (IX,JX)* YS   (IY,JY)* ZT   (IZ,JZ)
      DUMY = XT   (IX,JX)*DYSDI (IY,JY)* ZS   (IZ,JZ)
     1     + XS   (IX,JX)*DYTDI (IY,JY)* ZS   (IZ,JZ)
     2     + XS   (IX,JX)*DYSDI (IY,JY)* ZT   (IZ,JZ)
      DUMZ = XT   (IX,JX)* YS   (IY,JY)*DZSDI (IZ,JZ)
     1     + XS   (IX,JX)* YT   (IY,JY)*DZSDI (IZ,JZ)
     2     + XS   (IX,JX)* YS   (IY,JY)*DZTDI (IZ,JZ)
      IJ=IJ+1
      DE(1,IAT)=DE(1,IAT)+ DUMX*DIJ(IJ)
      DE(2,IAT)=DE(2,IAT)+ DUMY*DIJ(IJ)
      DE(3,IAT)=DE(3,IAT)+ DUMZ*DIJ(IJ)
      NN=IA(MAX0(LOCI+I,LOCJ+J))+MIN0(LOCI+I,LOCJ+J)
      DF(NN,IC+1)=DF(NN,IC+1)+ DUMX*PIJ(IJ)
      DF(NN,IC+2)=DF(NN,IC+2)+ DUMY*PIJ(IJ)
      DF(NN,IC+3)=DF(NN,IC+3)+ DUMZ*PIJ(IJ)
      IF(.NOT. MSECND) GO TO 380
      DUMXX=DXTDII(IX,JX)* YS   (IY,JY)* ZS   (IZ,JZ)
     1     +DXSDII(IX,JX)* YT   (IY,JY)* ZS   (IZ,JZ)
     2     +DXSDII(IX,JX)* YS   (IY,JY)* ZT   (IZ,JZ)
      DUMYY= XT   (IX,JX)*DYSDII(IY,JY)* ZS   (IZ,JZ)
     1     + XS   (IX,JX)*DYTDII(IY,JY)* ZS   (IZ,JZ)
     2     + XS   (IX,JX)*DYSDII(IY,JY)* ZT   (IZ,JZ)
      DUMZZ= XT   (IX,JX)* YS   (IY,JY)*DZSDII(IZ,JZ)
     1     + XS   (IX,JX)* YT   (IY,JY)*DZSDII(IZ,JZ)
     2     + XS   (IX,JX)* YS   (IY,JY)*DZTDII(IZ,JZ)
      DUMYX=DXTDI (IX,JX)*DYSDI (IY,JY)* ZS   (IZ,JZ)
     1     +DXSDI (IX,JX)*DYTDI (IY,JY)* ZS   (IZ,JZ)
     2     +DXSDI (IX,JX)*DYSDI (IY,JY)* ZT   (IZ,JZ)
      DUMZX=DXTDI (IX,JX)* YS   (IY,JY)*DZSDI (IZ,JZ)
     1     +DXSDI (IX,JX)* YT   (IY,JY)*DZSDI (IZ,JZ)
     2     +DXSDI (IX,JX)* YS   (IY,JY)*DZTDI (IZ,JZ)
      DUMZY= XT   (IX,JX)*DYSDI (IY,JY)*DZSDI (IZ,JZ)
     1     + XS   (IX,JX)*DYTDI (IY,JY)*DZSDI (IZ,JZ)
     2     + XS   (IX,JX)*DYSDI (IY,JY)*DZTDI (IZ,JZ)
      FC(IC+1,IC+1)=FC(IC+1,IC+1)+ DUMXX*DIJ(IJ)
      FC(IC+1,IC+2)=FC(IC+1,IC+2)+ DUMYX*DIJ(IJ)
      FC(IC+1,IC+3)=FC(IC+1,IC+3)+ DUMZX*DIJ(IJ)
      FC(IC+2,IC+1)=FC(IC+2,IC+1)+ DUMYX*DIJ(IJ)
      FC(IC+2,IC+2)=FC(IC+2,IC+2)+ DUMYY*DIJ(IJ)
      FC(IC+2,IC+3)=FC(IC+2,IC+3)+ DUMZY*DIJ(IJ)
      FC(IC+3,IC+1)=FC(IC+3,IC+1)+ DUMZX*DIJ(IJ)
      FC(IC+3,IC+2)=FC(IC+3,IC+2)+ DUMZY*DIJ(IJ)
      FC(IC+3,IC+3)=FC(IC+3,IC+3)+ DUMZZ*DIJ(IJ)
      DUMXX=DXTDIJ(IX,JX)* YS   (IY,JY)* ZS   (IZ,JZ)
     1     +DXSDIJ(IX,JX)* YT   (IY,JY)* ZS   (IZ,JZ)
     2     +DXSDIJ(IX,JX)* YS   (IY,JY)* ZT   (IZ,JZ)
      DUMXY=DXTDI (IX,JX)*DYSDJ (IY,JY)* ZS   (IZ,JZ)
     1     +DXSDI (IX,JX)*DYTDJ (IY,JY)* ZS   (IZ,JZ)
     2     +DXSDI (IX,JX)*DYSDJ (IY,JY)* ZT   (IZ,JZ)
      DUMXZ=DXTDI (IX,JX)* YS   (IY,JY)*DZSDJ (IZ,JZ)
     1     +DXSDI (IX,JX)* YT   (IY,JY)*DZSDJ (IZ,JZ)
     2     +DXSDI (IX,JX)* YS   (IY,JY)*DZTDJ (IZ,JZ)
      DUMYX=DXTDJ (IX,JX)*DYSDI (IY,JY)* ZS   (IZ,JZ)
     1     +DXSDJ (IX,JX)*DYTDI (IY,JY)* ZS   (IZ,JZ)
     2     +DXSDJ (IX,JX)*DYSDI (IY,JY)* ZT   (IZ,JZ)
      DUMYY= XT   (IX,JX)*DYSDIJ(IY,JY)* ZS   (IZ,JZ)
     1     + XS   (IX,JX)*DYTDIJ(IY,JY)* ZS   (IZ,JZ)
     2     + XS   (IX,JX)*DYSDIJ(IY,JY)* ZT   (IZ,JZ)
      DUMYZ= XT   (IX,JX)*DYSDI (IY,JY)*DZSDJ (IZ,JZ)
     1     + XS   (IX,JX)*DYTDI (IY,JY)*DZSDJ (IZ,JZ)
     2     + XS   (IX,JX)*DYSDI (IY,JY)*DZTDJ (IZ,JZ)
      DUMZX=DXTDJ (IX,JX)* YS   (IY,JY)*DZSDI (IZ,JZ)
     1     +DXSDJ (IX,JX)* YT   (IY,JY)*DZSDI (IZ,JZ)
     2     +DXSDJ (IX,JX)* YS   (IY,JY)*DZTDI (IZ,JZ)
      DUMZY= XT   (IX,JX)*DYSDJ (IY,JY)*DZSDI (IZ,JZ)
     1     + XS   (IX,JX)*DYTDJ (IY,JY)*DZSDI (IZ,JZ)
     2     + XS   (IX,JX)*DYSDJ (IY,JY)*DZTDI (IZ,JZ)
      DUMZZ= XT   (IX,JX)* YS   (IY,JY)*DZSDIJ(IZ,JZ)
     1     + XS   (IX,JX)* YT   (IY,JY)*DZSDIJ(IZ,JZ)
     2     + XS   (IX,JX)* YS   (IY,JY)*DZTDIJ(IZ,JZ)
      FC(IC+1,JC+1)=FC(IC+1,JC+1)+ DUMXX*DIJ(IJ)
      FC(IC+1,JC+2)=FC(IC+1,JC+2)+ DUMXY*DIJ(IJ)
      FC(IC+1,JC+3)=FC(IC+1,JC+3)+ DUMXZ*DIJ(IJ)
      FC(IC+2,JC+1)=FC(IC+2,JC+1)+ DUMYX*DIJ(IJ)
      FC(IC+2,JC+2)=FC(IC+2,JC+2)+ DUMYY*DIJ(IJ)
      FC(IC+2,JC+3)=FC(IC+2,JC+3)+ DUMYZ*DIJ(IJ)
      FC(IC+3,JC+1)=FC(IC+3,JC+1)+ DUMZX*DIJ(IJ)
      FC(IC+3,JC+2)=FC(IC+3,JC+2)+ DUMZY*DIJ(IJ)
      FC(IC+3,JC+3)=FC(IC+3,JC+3)+ DUMZZ*DIJ(IJ)
  380 CONTINUE
  390 CONTINUE
C
C     ----- NUCLEAR ATTRACTION DERIVATIVES -----
C
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
      DO 500 KAT=1,NAT
      ZNUC=-ZAN(KAT)
      CX=C(1,KAT)
      CY=C(2,KAT)
      CZ=C(3,KAT)
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      IF(NROOTS.EQ.5) CALL ROOT5
      IF(NROOTS.EQ.6) CALL ROOT6
      DO 420 IROOT=1,NROOTS
      UU=U(IROOT)*AA
      WW=W(IROOT)*ZNUC
      TT=ONE/(AA+UU)
      T = SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
C
      DO 410 J=1,LJTDER
      NJ=J
      DO 410 I=1,LITDER
      NI=I
      CALL DSXYZH
      XV(I,J,IROOT)=XINT
      YV(I,J,IROOT)=YINT
      ZV(I,J,IROOT)=ZINT*WW
  410 CONTINUE
C
      CALL DDERIJ(DXVDII(1,1,IROOT),DYVDII(1,1,IROOT),DZVDII(1,1,IROOT),
     1            DXVDIJ(1,1,IROOT),DYVDIJ(1,1,IROOT),DZVDIJ(1,1,IROOT),
     2             DXVDI(1,1,IROOT), DYVDI(1,1,IROOT), DZVDI(1,1,IROOT),
     3             DXVDJ(1,1,IROOT), DYVDJ(1,1,IROOT), DZVDJ(1,1,IROOT),
     4                XV(1,1,IROOT),    YV(1,1,IROOT),    ZV(1,1,IROOT),
     5            LIT,LJT,AI,AJ)
C
  420 CONTINUE
C
      IC=3*(IAT-1)
      JC=3*(JAT-1)
      IJ=0
      DO 450 I=MINI,MAXI
      IX=IJX(I)
      IY=IJY(I)
      IZ=IJZ(I)
      DO 440 J=MINJ,MAXJ
      JX=IJX(J)
      JY=IJY(J)
      JZ=IJZ(J)
      DUMX=ZERO
      DUMY=ZERO
      DUMZ=ZERO
      DO 430 IROOT=1,NROOTS
      DUMX=DUMX+DXVDI(IX,JX,IROOT)* YV  (IY,JY,IROOT)* ZV  (IZ,JZ,IROOT)
      DUMY=DUMY+ XV  (IX,JX,IROOT)*DYVDI(IY,JY,IROOT)* ZV  (IZ,JZ,IROOT)
      DUMZ=DUMZ+ XV  (IX,JX,IROOT)* YV  (IY,JY,IROOT)*DZVDI(IZ,JZ,IROOT)
  430 CONTINUE
      IJ=IJ+1
      DE(1,IAT)=DE(1,IAT)+DUMX*(AA1*PI212*DIJ(IJ))
      DE(2,IAT)=DE(2,IAT)+DUMY*(AA1*PI212*DIJ(IJ))
      DE(3,IAT)=DE(3,IAT)+DUMZ*(AA1*PI212*DIJ(IJ))
      NN=IA(MAX0(LOCI+I,LOCJ+J))+MIN0(LOCI+I,LOCJ+J)
      DF(NN,IC+1)=DF(NN,IC+1)+DUMX*(AA1*PI212*PIJ(IJ))
      DF(NN,IC+2)=DF(NN,IC+2)+DUMY*(AA1*PI212*PIJ(IJ))
      DF(NN,IC+3)=DF(NN,IC+3)+DUMZ*(AA1*PI212*PIJ(IJ))
C
      IF(.NOT. MSECND) GO TO 440
      DUMXX=ZERO
      DUMYY=ZERO
      DUMZZ=ZERO
      DUMYX=ZERO
      DUMZX=ZERO
      DUMZY=ZERO
      DO 432 IROOT=1,NROOTS
      DUMXX=DUMXX
     1     +DXVDII(IX,JX,IROOT)* YV   (IY,JY,IROOT)* ZV   (IZ,JZ,IROOT)
      DUMYY=DUMYY
     1     + XV   (IX,JX,IROOT)*DYVDII(IY,JY,IROOT)* ZV   (IZ,JZ,IROOT)
      DUMZZ=DUMZZ
     1     + XV   (IX,JX,IROOT)* YV   (IY,JY,IROOT)*DZVDII(IZ,JZ,IROOT)
      DUMYX=DUMYX
     1     +DXVDI (IX,JX,IROOT)*DYVDI (IY,JY,IROOT)* ZV   (IZ,JZ,IROOT)
      DUMZX=DUMZX
     1     +DXVDI (IX,JX,IROOT)* YV   (IY,JY,IROOT)*DZVDI (IZ,JZ,IROOT)
      DUMZY=DUMZY
     1     + XV   (IX,JX,IROOT)*DYVDI (IY,JY,IROOT)*DZVDI (IZ,JZ,IROOT)
  432 CONTINUE
      FC(IC+1,IC+1)=FC(IC+1,IC+1)+DUMXX*(AA1*PI212*DIJ(IJ))
      FC(IC+1,IC+2)=FC(IC+1,IC+2)+DUMYX*(AA1*PI212*DIJ(IJ))
      FC(IC+1,IC+3)=FC(IC+1,IC+3)+DUMZX*(AA1*PI212*DIJ(IJ))
      FC(IC+2,IC+1)=FC(IC+2,IC+1)+DUMYX*(AA1*PI212*DIJ(IJ))
      FC(IC+2,IC+2)=FC(IC+2,IC+2)+DUMYY*(AA1*PI212*DIJ(IJ))
      FC(IC+2,IC+3)=FC(IC+2,IC+3)+DUMZY*(AA1*PI212*DIJ(IJ))
      FC(IC+3,IC+1)=FC(IC+3,IC+1)+DUMZX*(AA1*PI212*DIJ(IJ))
      FC(IC+3,IC+2)=FC(IC+3,IC+2)+DUMZY*(AA1*PI212*DIJ(IJ))
      FC(IC+3,IC+3)=FC(IC+3,IC+3)+DUMZZ*(AA1*PI212*DIJ(IJ))
C
      DUMXX=ZERO
      DUMXY=ZERO
      DUMXZ=ZERO
      DUMYX=ZERO
      DUMYY=ZERO
      DUMYZ=ZERO
      DUMZX=ZERO
      DUMZY=ZERO
      DUMZZ=ZERO
      DO 434 IROOT=1,NROOTS
      DUMXX=DUMXX
     1     +DXVDIJ(IX,JX,IROOT)* YV   (IY,JY,IROOT)* ZV   (IZ,JZ,IROOT)
      DUMXY=DUMXY
     1     +DXVDI (IX,JX,IROOT)*DYVDJ (IY,JY,IROOT)* ZV   (IZ,JZ,IROOT)
      DUMXZ=DUMXZ
     1     +DXVDI (IX,JX,IROOT)* YV   (IY,JY,IROOT)*DZVDJ (IZ,JZ,IROOT)
      DUMYX=DUMYX
     1     +DXVDJ (IX,JX,IROOT)*DYVDI (IY,JY,IROOT)* ZV   (IZ,JZ,IROOT)
      DUMYY=DUMYY
     1     + XV   (IX,JX,IROOT)*DYVDIJ(IY,JY,IROOT)* ZV   (IZ,JZ,IROOT)
      DUMYZ=DUMYZ
     1     + XV   (IX,JX,IROOT)*DYVDI (IY,JY,IROOT)*DZVDJ (IZ,JZ,IROOT)
      DUMZX=DUMZX
     1     +DXVDJ (IX,JX,IROOT)* YV   (IY,JY,IROOT)*DZVDI (IZ,JZ,IROOT)
      DUMZY=DUMZY
     1     + XV   (IX,JX,IROOT)*DYVDJ (IY,JY,IROOT)*DZVDI (IZ,JZ,IROOT)
      DUMZZ=DUMZZ
     1     + XV   (IX,JX,IROOT)* YV   (IY,JY,IROOT)*DZVDIJ(IZ,JZ,IROOT)
  434 CONTINUE
      FC(IC+1,JC+1)=FC(IC+1,JC+1)+DUMXX*(AA1*PI212*DIJ(IJ))
      FC(IC+1,JC+2)=FC(IC+1,JC+2)+DUMXY*(AA1*PI212*DIJ(IJ))
      FC(IC+1,JC+3)=FC(IC+1,JC+3)+DUMXZ*(AA1*PI212*DIJ(IJ))
      FC(IC+2,JC+1)=FC(IC+2,JC+1)+DUMYX*(AA1*PI212*DIJ(IJ))
      FC(IC+2,JC+2)=FC(IC+2,JC+2)+DUMYY*(AA1*PI212*DIJ(IJ))
      FC(IC+2,JC+3)=FC(IC+2,JC+3)+DUMYZ*(AA1*PI212*DIJ(IJ))
      FC(IC+3,JC+1)=FC(IC+3,JC+1)+DUMZX*(AA1*PI212*DIJ(IJ))
      FC(IC+3,JC+2)=FC(IC+3,JC+2)+DUMZY*(AA1*PI212*DIJ(IJ))
      FC(IC+3,JC+3)=FC(IC+3,JC+3)+DUMZZ*(AA1*PI212*DIJ(IJ))
  440 CONTINUE
  450 CONTINUE
C
  500 CONTINUE
C
 6000 CONTINUE
 7000 CONTINUE
C
      IF(DBUG) THEN
      WRITE(IW,9993) II,JJ
      IF (MFIRST) WRITE(IW,9988)
      IF (MFIRST) CALL EGOUT(DE,NAT)
      IF (MSECND) WRITE(IW,9991)
      IF (MSECND) CALL HSSOUT(FC,NC,NC,NC)
      END IF
C
 8000 CONTINUE
 9000 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
      IF (GOPARR) THEN
          IF(NXT) CALL DDI_DLBRESET
          CALL DDI_GSUMF(1622,DF,NC*L2)
      END IF
C
C     ----- PRINTING SECTION -----
C
      IF(OUT) THEN
      IF(GOPARR.AND.MFIRST) CALL DDI_GSUMF(1620,DE,NC)
      IF(GOPARR.AND.MSECND) CALL DDI_GSUMF(1621,FC,NC*NC)
         IF(MASWRK) THEN
            IF (MFIRST) WRITE(IW,9988)
            IF (MFIRST) CALL EGOUT(DE,NAT)
            IF (MSECND) WRITE(IW,9991)
            IF (MSECND) CALL HSSOUT(FC,NC,NC,NC)
C
            IF(MCPHF) THEN
               WRITE(IW,9990)
               IJ = 0
               DO 1100 IC=1,NAT
                  WRITE(IW,9989) IC
                  DO 1200 JK =1,3
                  IJ = IJ + 1
 1200             CALL PRTRIL(DF(1,IJ),NUM)
 1100          CONTINUE
            WRITE(IW,9998)
            END IF
         END IF
         IF(GOPARR) CALL DSCAL(NC,ONE/NPROC,DE,1)
         IF(GOPARR) CALL DSCAL(NC*NC,ONE/NPROC,FC,1)
      END IF
      RETURN
 9008 FORMAT(/5X,50(1H-)/
     *        5X,'1E- INTEGRAL CONTRIBUTIONS TO GRADIENT AND HESSIAN'/
     *        5X,50(1H-))
 9997 FORMAT(' IN -TVD- , THE RYS QUADRATURE IS NOT IMPLEMEMENTED',
     1       ' BEYOND -NROOTS- = ',I3,/,
     2       ' LIT,LJT,NROOTS= ',3I3)
 9998 FORMAT(' ...... END OF -TV- DERIVATIVE TERM ......')
 9993 FORMAT(' SHELLS II, JJ ',2I5)
 9991 FORMAT(/,10X,17(1H-),/,10X,'-TV- HESSIAN TERM',
     1       /,10X,17(1H-))
 9990 FORMAT(/,10X,22(1H-),/,10X,'DERIVATIVE FOCK MATRIX',
     1       /,10X,22(1H-))
 9989 FORMAT(1X,'CONTRIBUTION TO FOCK DERIVATIVE MATRIX, ATOM= ',I5)
 9988 FORMAT(/,10X,18(1H-),/,10X,'-TV- GRADIENT TERM',
     1       /,10X,17(1H-))
      END
*MODULE HSS1   *DECK SDX
C>
C>    @brief   Overlap derivative
C>
C>    @details  Overlap contribution
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
C>    @param EXETYP exe type
C>    @param  OUT PUT
C>    @param  EG  gradient
C>    @param  FC  force constant
C>    @param  NC  number of cartesian coordinate
C>    @param  DS  derivative of overlap
C>    @param  L2  number of triangular matrix
C>    @param  DAB density matrix
      SUBROUTINE SDX(EXETYP,OUT,EG,FC,NC,DS,L2,DAB)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MXATM=2000)  !, MXAO=8192)
C
      LOGICAL OUT
      LOGICAL GOPARR,DSKWRK,MASWRK
c     LOGICAL GOPARR,DSKWRK,MASWRK,MCCI
C
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
c     COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
c    *                MPLEVL,MPCTYP
!      COMMON /GVBWFN/ CICOEF(2,12),F(25),ALPHA(325),BETA(325),NO(10),
!     *                NCO,NSETO,NOPEN,NPAIR,NORB,NCONF(MXAO),NHAM
      COMMON /FMCOM / X(1)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
C
      DIMENSION EG(3,NAT),FC(NC*NC),DS(L2*NC),DAB(1)
C
      DATA CHECK/8HCHECK   /
c     DATA MCSCF/8HMCSCF   /
C
C     ----- GET CORE MEMORY -----
C
c     MCCI = SCFTYP.EQ.MCSCF
      CALL VALFM(LOADFM)
      CALL GOTFM(NGOTMX)
C
      L1 = NUM
      L3 = NUM*NUM
C
      LMO  = LOADFM + 1
      LEN  = LMO + L3
      LIA  = LEN + L3
      LWRK = LIA + L1
      LAST = LWRK+ L1
C
      NEED=LAST-LMO
      IF(NEED.GT.NGOTMX) THEN
         IF (MASWRK) WRITE(IW,*) 'IN SDX, NEED,NGOT=',NEED,NGOTMX
         CALL ABRT
      END IF
      CALL GETFM(NEED)
C
C     ----- GET ENERGY-WEIGHTED DENSITY MATRIX -----
C
      IF(EXETYP.EQ.CHECK) THEN
         CALL VCLR(DAB,1,L2)
      ELSE
         CALL EIJDEN(DAB,X(LMO),X(LEN),X(LIA),X(LWRK),
     *               L1,L2,L3,NQMT,X(LEN))
      END IF
C
C     ----- INITIALIZE OVERLAP DERIVATIVE MATRICES -----
C
       CALL VCLR(DS,1,NC*L2)
C
C     ----- INITIALIZE OVERLAP DERIVATIVE MATRICES -----
C     ----- ELECTRON COORDINATE -----
C
      CALL VCLR(X(LMO),1,L3)
      CALL VCLR(X(LEN),1,L3)
C
C     ----- GET -S- DERIVATIVES -----
C
      CALL SDHSS(OUT,EG,FC,NC,DS,L2,DAB)
C
      CALL VCLR(X(LEN),1,L3)
C
C     ----- SAVE DERIVATIVE OVERLAP -----
C
       CALL WRTDS(DS,L2,X(LEN),L3)
C
C     ----- RESET CORE MEMORY -----
C
      CALL RETFM(NEED)
      RETURN
      END
C
*MODULE HSS1   *DECK SDHSS
C>
C>    @brief   Overlap derivative hessian
C>
C>    @details  overlap contribution
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
C>    @param EXETYP exe type
C>    @param  OUT PUT
C>    @param  DE  gradient
C>    @param  FC  force constant
C>    @param  NC  number of cartesian coordinate
C>    @param  DS  derivative of overlap
C>    @param  LDS Dimension for overlap matrix
C>    @param  DAB density matrix
C>
      SUBROUTINE SDHSS(OUT,DE,FC,NC,DS,LDS,DAB)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MXGTOT=20000, MXSH=5000,
     *           MXATM=2000, MXAO=8192)
      LOGICAL IANDJ
      LOGICAL NORM
      LOGICAL OUT,DBUG
      LOGICAL MASWRK,DSKWRK,GOPARR,NXT
      LOGICAL FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF !,BSFDD
C
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
!      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,
     *                NI,NJ,CX,CY,CZ
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /IJPAIR/ IA(MXAO)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
C
      DIMENSION DE(3,NAT),FC(NC,1),DS(LDS,*),DAB(1)
      DIMENSION DIJ(225),PIJ(225)
      DIMENSION IJX(35),IJY(35),IJZ(35)
      DIMENSION  XS   (7,6), YS   (7,6), ZS   (7,6)
      DIMENSION DXSDI (5,5),DYSDI (5,5),DZSDI (5,5)
      DIMENSION DXSDJ (5,5),DYSDJ (5,5),DZSDJ (5,5)
      DIMENSION DXSDII(5,5),DYSDII(5,5),DZSDII(5,5)
      DIMENSION DXSDIJ(5,5),DYSDIJ(5,5),DZSDIJ(5,5)
C
      DATA RLN10  /2.30258D+00/
      DATA ONE    /1.0D+00/
      DATA SQRT3  /1.73205080756888D+00/
      DATA SQRT5  /2.23606797749979D+00/
      DATA SQRT7  /2.64575131106459D+00/
      DATA IJX    / 1, 2, 1, 1, 3, 1, 1, 2, 2, 1,
     1              4, 1, 1, 3, 3, 2, 1, 2, 1, 2,
     2              5, 1, 1, 4, 4, 2, 1, 2, 1, 3,
     3              3, 1, 3, 2, 2/
      DATA IJY    / 1, 1, 2, 1, 1, 3, 1, 2, 1, 2,
     1              1, 4, 1, 2, 1, 3, 3, 1, 2, 2,
     2              1, 5, 1, 2, 1, 4, 4, 1, 2, 3,
     3              1, 3, 2, 3, 2/
      DATA IJZ    / 1, 1, 1, 2, 1, 1, 3, 1, 2, 2,
     1              1, 1, 4, 1, 2, 1, 2, 3, 3, 2,
     2              1, 1, 5, 1, 2, 1, 2, 4, 4, 1,
     3              3, 3, 2, 2, 3/
C
      TOL=RLN10*ITOL
      NORM=NORMF.NE.1.OR.NORMP.NE.1
C
      DBUG=.FALSE. .AND. MASWRK

C
C     ----- CALCULATE -S- DERIVATIVE TERM -----
C
      NDER=0
      IF(MFIRST) NDER = 1
      IF(MSECND) NDER = 2
C
C   INITIALIZATION FOR PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
C
C     ----- ISHELL -----
C
      DO 9000 II=1,NSHELL
C
C           GO PARALLEL!
C
      IF (NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF (NEXT.NE.MINE) GO TO 9000
      END IF
C
      I=KATOM(II)
      XI=C(1,I)
      YI=C(2,I)
      ZI=C(3,I)
      I1=KSTART(II)
      I2=I1+KNG(II)-1
      LIT=KTYPE(II)
      MINI=KMIN(II)
      MAXI=KMAX(II)
      LOCI=KLOC(II)-MINI
C
      LITDER=LIT+NDER
      IAT   =I
C
C     ----- JSHELL -----
C
      DO 8000 JJ=1,NSHELL
C
C          GO PARALLEL!
C
      IF ((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 8000
      END IF
C
      J=KATOM(JJ)
      XJ=C(1,J)
      YJ=C(2,J)
      ZJ=C(3,J)
      J1=KSTART(JJ)
      J2=J1+KNG(JJ)-1
      LJT=KTYPE(JJ)
      MINJ=KMIN(JJ)
      MAXJ=KMAX(JJ)
      LOCJ=KLOC(JJ)-MINJ
C
      LJTDER=LJT+NDER-1
      JAT=J
C
      IANDJ=II.EQ.JJ
C
!      IF(IANDJ) GO TO 8000
C
      RR=(XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- I PRIMITIVE -----
C
      DO 7000 IG=I1,I2
      AI=EX(IG)
      ARRI=AI*RR
      AXI=AI*XI
      AYI=AI*YI
      AZI=AI*ZI
      CSI=CS(IG)
      CPI=CP(IG)
      CDI=CD(IG)
      CFI=CF(IG)
      CGI=CG(IG)
C
C     ----- J PRIMITIVE -----
C
      DO 6000 JG=J1,J2
      AJ=EX(JG)
      AA=AI+AJ
      AA1=ONE/AA
      DUM=AJ*ARRI*AA1
      IF(DUM.GT.TOL) GO TO 6000
      FAC= EXP(-DUM)
      CSJ=CS(JG)
      CPJ=CP(JG)
      CDJ=CD(JG)
      CFJ=CF(JG)
      CGJ=CG(JG)
      AX=(AXI+AJ*XJ)*AA1
      AY=(AYI+AJ*YJ)*AA1
      AZ=(AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR -----
C
      IJ=0
      DO 360 I=MINI,MAXI
      GO TO (110,120,220,220,130,220,220,140,220,220,
     1       150,220,220,160,220,220,220,220,220,170,
     2       180,220,220,190,220,220,220,220,220,200,
     3       220,220,210,220,220),I
  110 DUM1=CSI*FAC
      GO TO 220
  120 DUM1=CPI*FAC
      GO TO 220
  130 DUM1=CDI*FAC
      GO TO 220
  140 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 220
  150 DUM1=CFI*FAC
      GO TO 220
  160 IF(NORM) DUM1=DUM1*SQRT5
      GO TO 220
  170 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 220
  180 DUM1=CGI*FAC
      GO TO 220
  190 IF(NORM) DUM1=DUM1*SQRT7
      GO TO 220
  200 IF(NORM) DUM1=DUM1*SQRT5/SQRT3
      GO TO 220
  210 IF(NORM) DUM1=DUM1*SQRT3
  220 CONTINUE
C
      DO 360 J=MINJ,MAXJ
      GO TO (230,250,350,350,260,350,350,270,350,350,
     1       280,350,350,290,350,350,350,350,350,300,
     2       310,350,350,320,350,350,350,350,350,330,
     3       350,350,340,350,350),J
  230 DUM2=DUM1*CSJ
      GO TO 350
  250 DUM2=DUM1*CPJ
      GO TO 350
  260 DUM2=DUM1*CDJ
      GO TO 350
  270 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 350
  280 DUM2=DUM1*CFJ
      GO TO 350
  290 IF(NORM) DUM2=DUM2*SQRT5
      GO TO 350
  300 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 350
  310 DUM2=DUM1*CGJ
      GO TO 350
  320 IF(NORM) DUM2=DUM2*SQRT7
      GO TO 350
  330 IF(NORM) DUM2=DUM2*SQRT5/SQRT3
      GO TO 350
  340 IF(NORM) DUM2=DUM2*SQRT3
  350 CONTINUE
C
      NN=IA(MAX0(LOCI+I,LOCJ+J))
     1  +   MIN0(LOCI+I,LOCJ+J)
      DEN=DAB(NN)
      DEN=DEN+DEN
      IJ=IJ+1
      DIJ(IJ)=DUM2*DEN
      PIJ(IJ)=DUM2
      IF(IANDJ.AND.I.EQ.J) PIJ(IJ)=PIJ(IJ)+PIJ(IJ)
  360 CONTINUE
C
C     ----- OVERLAP DERIVATIVES -----
C
      T = SQRT(AA1)
      X0=AX
      Y0=AY
      Z0=AZ
      DO 370 J=1,LJTDER
      NJ=J
      DO 370 I=1,LITDER
      NI=I
      CALL DSXYZH
      XS(I,J)=XINT*T
      YS(I,J)=YINT*T
      ZS(I,J)=ZINT*T
  370 CONTINUE
C
      CALL DDERIJ(DXSDII,DYSDII,DZSDII,DXSDIJ,DYSDIJ,DZSDIJ,
     1            DXSDI ,DYSDI ,DZSDI ,DXSDJ ,DYSDJ ,DZSDJ ,
     2            XS,YS,ZS,LIT,LJT,AI,AJ)
C
      IC=3*(IAT-1)
      JC=3*(JAT-1)
      IJ=0
      DO 390 I=MINI,MAXI
      IX=IJX(I)
      IY=IJY(I)
      IZ=IJZ(I)
      DO 380 J=MINJ,MAXJ
      JX=IJX(J)
      JY=IJY(J)
      JZ=IJZ(J)
      DUMX =DXSDI (IX,JX)* YS   (IY,JY)* ZS   (IZ,JZ)
      DUMY = XS   (IX,JX)*DYSDI (IY,JY)* ZS   (IZ,JZ)
      DUMZ = XS   (IX,JX)* YS   (IY,JY)*DZSDI (IZ,JZ)
      IJ=IJ+1
      DE(1,IAT)=DE(1,IAT)+ DUMX*DIJ(IJ)
      DE(2,IAT)=DE(2,IAT)+ DUMY*DIJ(IJ)
      DE(3,IAT)=DE(3,IAT)+ DUMZ*DIJ(IJ)
      NN=IA(MAX0(LOCI+I,LOCJ+J))+MIN0(LOCI+I,LOCJ+J)
C
      IF((II .GT. JJ) .OR.
     *             (IANDJ .AND. I .GT. J)) THEN
C
      DS(NN,1)=DS(NN,1)+ DUMX*PIJ(IJ)
      DS(NN,2)=DS(NN,2)+ DUMY*PIJ(IJ)
      DS(NN,3)=DS(NN,3)+ DUMZ*PIJ(IJ)
C
      END IF
C
      IF(.NOT. MSECND) GO TO 380
      DUMXX=DXSDII(IX,JX)* YS   (IY,JY)* ZS   (IZ,JZ)
      DUMYY= XS   (IX,JX)*DYSDII(IY,JY)* ZS   (IZ,JZ)
      DUMZZ= XS   (IX,JX)* YS   (IY,JY)*DZSDII(IZ,JZ)
      DUMXY=DXSDI (IX,JX)*DYSDI (IY,JY)* ZS   (IZ,JZ)
      DUMXZ=DXSDI (IX,JX)* YS   (IY,JY)*DZSDI (IZ,JZ)
      DUMYZ= XS   (IX,JX)*DYSDI (IY,JY)*DZSDI (IZ,JZ)
      FC(IC+1,IC+1)=FC(IC+1,IC+1)+(DUMXX*DIJ(IJ))
      FC(IC+1,IC+2)=FC(IC+1,IC+2)+(DUMXY*DIJ(IJ))
      FC(IC+1,IC+3)=FC(IC+1,IC+3)+(DUMXZ*DIJ(IJ))
      FC(IC+2,IC+1)=FC(IC+2,IC+1)+(DUMXY*DIJ(IJ))
      FC(IC+2,IC+2)=FC(IC+2,IC+2)+(DUMYY*DIJ(IJ))
      FC(IC+2,IC+3)=FC(IC+2,IC+3)+(DUMYZ*DIJ(IJ))
      FC(IC+3,IC+1)=FC(IC+3,IC+1)+(DUMXZ*DIJ(IJ))
      FC(IC+3,IC+2)=FC(IC+3,IC+2)+(DUMYZ*DIJ(IJ))
      FC(IC+3,IC+3)=FC(IC+3,IC+3)+(DUMZZ*DIJ(IJ))
C
      DUMXX=DXSDIJ(IX,JX)* YS   (IY,JY)* ZS   (IZ,JZ)
      DUMXY=DXSDI (IX,JX)*DYSDJ (IY,JY)* ZS   (IZ,JZ)
      DUMXZ=DXSDI (IX,JX)* YS   (IY,JY)*DZSDJ (IZ,JZ)
      DUMYX=DXSDJ (IX,JX)*DYSDI (IY,JY)* ZS   (IZ,JZ)
      DUMYY= XS   (IX,JX)*DYSDIJ(IY,JY)* ZS   (IZ,JZ)
      DUMYZ= XS   (IX,JX)*DYSDI (IY,JY)*DZSDJ (IZ,JZ)
      DUMZX=DXSDJ (IX,JX)* YS   (IY,JY)*DZSDI (IZ,JZ)
      DUMZY= XS   (IX,JX)*DYSDJ (IY,JY)*DZSDI (IZ,JZ)
      DUMZZ= XS   (IX,JX)* YS   (IY,JY)*DZSDIJ(IZ,JZ)
      FC(IC+1,JC+1)=FC(IC+1,JC+1)+(DUMXX*DIJ(IJ))
      FC(IC+1,JC+2)=FC(IC+1,JC+2)+(DUMXY*DIJ(IJ))
      FC(IC+1,JC+3)=FC(IC+1,JC+3)+(DUMXZ*DIJ(IJ))
      FC(IC+2,JC+1)=FC(IC+2,JC+1)+(DUMYX*DIJ(IJ))
      FC(IC+2,JC+2)=FC(IC+2,JC+2)+(DUMYY*DIJ(IJ))
      FC(IC+2,JC+3)=FC(IC+2,JC+3)+(DUMYZ*DIJ(IJ))
      FC(IC+3,JC+1)=FC(IC+3,JC+1)+(DUMZX*DIJ(IJ))
      FC(IC+3,JC+2)=FC(IC+3,JC+2)+(DUMZY*DIJ(IJ))
      FC(IC+3,JC+3)=FC(IC+3,JC+3)+(DUMZZ*DIJ(IJ))
  380 CONTINUE
  390 CONTINUE
C
 6000 CONTINUE
 7000 CONTINUE
C
      IF(DBUG) THEN
      WRITE(IW,9993) II,JJ
      IF (MFIRST) WRITE(IW,9989)
      IF (MFIRST) CALL EGOUT(DE,NAT)
      ENDIF
C
 8000 CONTINUE
 9000 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
      IF (GOPARR.AND.NXT) CALL DDI_DLBRESET
C
      IF(GOPARR.AND.MFIRST) CALL DDI_GSUMF(1620,DE,NC)
      IF(GOPARR.AND.MSECND) CALL DDI_GSUMF(1621,FC,NC*NC)
      IF(GOPARR) CALL DDI_GSUMF(1623,DS,LDS*NC)
C
C     ----- PRINT -----
C
      IF(OUT) THEN
         IF(MASWRK) THEN
            IF (MFIRST) WRITE(IW,9989)
            IF (MFIRST) CALL EGOUT(DE,NAT)
C
            IF (MSECND) WRITE(IW,9988)
            IF (MSECND) CALL HSSOUT(FC,NC,NC,NC)
C
            WRITE(IW,9987)
            CALL PRTRI(DS(1,1),NUM)
            CALL PRTRI(DS(1,2),NUM)
            CALL PRTRI(DS(1,3),NUM)
         END IF
      END IF
C
      RETURN
 9993 FORMAT(' SHELLS II, JJ ',2I5)
 9989 FORMAT(/,' GRADIENT AFTER -S- DERIVATIVE TERM')
 9988 FORMAT(/,' HESSIAN  AFTER -S- DERIVATIVE TERM')
 9987 FORMAT(/,' -DS-     AFTER -S- DERIVATIVE TERM')
      END
C*MODULE HSS1   *DECK WRTDS
C>
C>    @brief    Energy weighted term
C>
C>    @details  EIJ matrix
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
C>    @param EXETYP exe type
C>    @param  DS  derivative of overlap
C>    @param  LDS Dimension for overlap matrix
C>    @param  EDS Energy density
C>    @param  L3  square matrix
      SUBROUTINE WRTDS(DS,LDS,EDS,L3)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MXATM=2000)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
      DIMENSION DS(LDS,3)
      DIMENSION EDS(NUM,NUM)
C
C     ----- SAVE ELECTRON COORDINATE -----
C     ----- DERIVATIVE OF OVERLAP    -----
C
      CALL VCLR(EDS,1,L3)
      CALL CPYTSQA(DS(1,1),EDS,NUM,1)
      CALL DAWRIT(IDAF,IODA,EDS(1,1),L3,63,0)
C
      CALL VCLR(EDS,1,L3)
      CALL CPYTSQA(DS(1,2),EDS,NUM,1)
      CALL DAWRIT(IDAF,IODA,EDS(1,1),L3,64,0)
C
      CALL VCLR(EDS,1,L3)
      CALL CPYTSQA(DS(1,3),EDS,NUM,1)
      CALL DAWRIT(IDAF,IODA,EDS(1,1),L3,65,0)
C
      RETURN
      END
C*MODULE HSS1   *DECK HSSOUT
C>
C>    @brief    Hessian output file
C>
C>    @details  Hessian output file
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
C>    @param EXETYP exe type
C>    @param  V   force constant
C>    @param  M   Number of dimension
C>    @param  N   Number of dimension
C>    @param  NDIM dimension
C>
      SUBROUTINE HSSOUT(V,M,N,NDIM)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C     ----- PRINT OUT A SQUARE MATRIX -----
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      DIMENSION V(NDIM,1)
      MAX=7
      IMAX = 0
  100 IMIN = IMAX+1
      IMAX = IMAX+MAX
      IF (IMAX .GT. M) IMAX = M
      WRITE (IW,9008)
      WRITE (IW,9128) (I,I = IMIN,IMAX)
      WRITE (IW,9008)
      DO 120 J = 1,N
      WRITE (IW,9148) J,(V(J,I),I = IMIN,IMAX)
  120 CONTINUE
      IF (IMAX .LT. M) GO TO 100
      RETURN
 9008 FORMAT(/)
 9128 FORMAT(6X,7(6X,I3,6X))
 9148 FORMAT(I5,1X,7F15.7)
      END
C*MODULE HSS1   *DECK DSXYZH
C>
C>    @brief    Get indice
C>
C>    @details  indices
C>
C>    @author Yuji Imahuku
C>    - Mar, 2015- Subroutine written
C>
      SUBROUTINE DSXYZH
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C     ----- GAUSS-HERMITE QUADRATURE USING MINIMUM POINT FORMULA -----
C
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ,
     *                CX,CY,CZ
      COMMON /HERMIT/ H1,H2(2),H3(3),H4(4),H5(5),H6(6),H7(7),
     *                H8(8),H9(9),H10(10),
     *                H11(11),H12(12),H13(13),H14(14),H15(15)
      COMMON /WERMIT/ W1,W2(2),W3(3),W4(4),W5(5),W6(6),W7(7),
     *                W8(8),W9(9),W10(10),
     *                W11(11),W12(12),W13(13),W14(14),W15(15)
      DIMENSION H(28),W(28),MIN(7),MAX(7)
      EQUIVALENCE (H(1),H1),(W(1),W1)
      DATA MIN  /1,2,4, 7,11,16,22/
      DATA MAX  /1,3,6,10,15,21,28/
      DATA ZERO /0.0D+00/
C
      XINT=ZERO
      YINT=ZERO
      ZINT=ZERO
      NPTS=(NI+NJ-2)/2+1
      IMIN=MIN(NPTS)
      IMAX=MAX(NPTS)
      DO 16 I=IMIN,IMAX
      DUM=W(I)
      PX=DUM
      PY=DUM
      PZ=DUM
      DUM=H(I)*T
      PTX=DUM+X0
      PTY=DUM+Y0
      PTZ=DUM+Z0
      AX=PTX-XI
      AY=PTY-YI
      AZ=PTZ-ZI
      BX=PTX-XJ
      BY=PTY-YJ
      BZ=PTZ-ZJ
      GO TO (7,6,5,4,3,2,1),NI
    1 PX=PX*AX
      PY=PY*AY
      PZ=PZ*AZ
    2 PX=PX*AX
      PY=PY*AY
      PZ=PZ*AZ
    3 PX=PX*AX
      PY=PY*AY
      PZ=PZ*AZ
    4 PX=PX*AX
      PY=PY*AY
      PZ=PZ*AZ
    5 PX=PX*AX
      PY=PY*AY
      PZ=PZ*AZ
    6 PX=PX*AX
      PY=PY*AY
      PZ=PZ*AZ
    7 GO TO (15,14,13,12,11,10,9,8),NJ
    8 PX=PX*BX
      PY=PY*BY
      PZ=PZ*BZ
    9 PX=PX*BX
      PY=PY*BY
      PZ=PZ*BZ
   10 PX=PX*BX
      PY=PY*BY
      PZ=PZ*BZ
   11 PX=PX*BX
      PY=PY*BY
      PZ=PZ*BZ
   12 PX=PX*BX
      PY=PY*BY
      PZ=PZ*BZ
   13 PX=PX*BX
      PY=PY*BY
      PZ=PZ*BZ
   14 PX=PX*BX
      PY=PY*BY
      PZ=PZ*BZ
   15 CONTINUE
      XINT=XINT+PX
      YINT=YINT+PY
      ZINT=ZINT+PZ
   16 CONTINUE
      RETURN
      END
*MODULE HSS1   *DECK DVXYZH
C>
C>    @brief    Get integral value
C>
C>    @details  integral value
C>
C>    @author Yuji Imahuku
      SUBROUTINE DVXYZH
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C     ----- GAUSS-HERMITE QUADRATURE USING MINIMUM POINT FORMULA -----
C
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ,
     *                CX,CY,CZ
      COMMON /HERMIT/ H1,H2(2),H3(3),H4(4),H5(5),H6(6),H7(7),
     *                H8(8),H9(9),H10(10),
     *                H11(11),H12(12),H13(13),H14(14),H15(15)
      COMMON /WERMIT/ W1,W2(2),W3(3),W4(4),W5(5),W6(6),W7(7),
     *                W8(8),W9(9),W10(10),
     *                W11(11),W12(12),W13(13),W14(14),W15(15)
      DIMENSION H(28),W(28),MIN(7),MAX(7)
      EQUIVALENCE (H(1),H1),(W(1),W1)
      DATA MIN  /1,2,4, 7,11,16,22/
      DATA MAX  /1,3,6,10,15,21,28/
      DATA ZERO /0.0D+00/
C
      XINT=ZERO
      YINT=ZERO
      ZINT=ZERO
      NPTS=(NI+NJ+1-2)/2+1
      IMIN=MIN(NPTS)
      IMAX=MAX(NPTS)
      DO 13 I=IMIN,IMAX
      DUM=H(I)*T
      PTX=DUM+X0
      PTY=DUM+Y0
      PTZ=DUM+Z0
      PX=PTX-CX
      PY=PTY-CY
      PZ=PTZ-CZ
      AX=PTX-XI
      AY=PTY-YI
      AZ=PTZ-ZI
      BX=PTX-XJ
      BY=PTY-YJ
      BZ=PTZ-ZJ
      GO TO (6,5,4,3,2,1),NI
    1 PX=PX*AX
      PY=PY*AY
      PZ=PZ*AZ
    2 PX=PX*AX
      PY=PY*AY
      PZ=PZ*AZ
    3 PX=PX*AX
      PY=PY*AY
      PZ=PZ*AZ
    4 PX=PX*AX
      PY=PY*AY
      PZ=PZ*AZ
    5 PX=PX*AX
      PY=PY*AY
      PZ=PZ*AZ
    6 GO TO (12,11,10,9,8,7),NJ
    7 PX=PX*BX
      PY=PY*BY
      PZ=PZ*BZ
    8 PX=PX*BX
      PY=PY*BY
      PZ=PZ*BZ
    9 PX=PX*BX
      PY=PY*BY
      PZ=PZ*BZ
   10 PX=PX*BX
      PY=PY*BY
      PZ=PZ*BZ
   11 PX=PX*BX
      PY=PY*BY
      PZ=PZ*BZ
   12 DUM=W(I)
      XINT=XINT+DUM*PX
      YINT=YINT+DUM*PY
      ZINT=ZINT+DUM*PZ
   13 CONTINUE
      RETURN
      END
C*MODULE HSS1   *DECK DDVXYZ
C>
C>    @brief    Get integral value
C>
C>    @details  integral value
C>
C>    @author Yuji Imahuku
      SUBROUTINE DDVXYZ
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C     ----- GAUSS-HERMITE QUADRATURE USING MINIMUM POINT FORMULA -----
C
      COMMON /XYZDER/ XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ,
     *                CX,CY,CZ
      COMMON /HERMIT/ H1,H2(2),H3(3),H4(4),H5(5),H6(6),H7(7),
     *                H8(8),H9(9),H10(10),
     *                H11(11),H12(12),H13(13),H14(14),H15(15)
      COMMON /WERMIT/ W1,W2(2),W3(3),W4(4),W5(5),W6(6),W7(7),
     *                W8(8),W9(9),W10(10),
     *                W11(11),W12(12),W13(13),W14(14),W15(15)
C
      DIMENSION H(28),W(28),MIN(7),MAX(7)
      EQUIVALENCE (H(1),H1),(W(1),W1)
      DATA MIN  /1,2,4, 7,11,16,22/
      DATA MAX  /1,3,6,10,15,21,28/
      DATA ZERO /0.0D+00/
C
      XINT = ZERO
      YINT = ZERO
      ZINT = ZERO
      NPTS = (NI+NJ+2-2)/2+1
      IMIN = MIN(NPTS)
      IMAX = MAX(NPTS)
      DO 11 I = IMIN,IMAX
      DUM = H(I)*T
      PTX = DUM+X0
      PTY = DUM+Y0
      PTZ = DUM+Z0
      PX = PTX-CX
      PY = PTY-CY
      PZ = PTZ-CZ
      PX = PX*PX
      PY = PY*PY
      PZ = PZ*PZ
      AX = PTX-XI
      AY = PTY-YI
      AZ = PTZ-ZI
      BX = PTX-XJ
      BY = PTY-YJ
      BZ = PTZ-ZJ
      GO TO (5,4,3,2,1),NI
    1 PX = PX*AX
      PY = PY*AY
      PZ = PZ*AZ
    2 PX = PX*AX
      PY = PY*AY
      PZ = PZ*AZ
    3 PX = PX*AX
      PY = PY*AY
      PZ = PZ*AZ
    4 PX = PX*AX
      PY = PY*AY
      PZ = PZ*AZ
    5 GO TO (10,9,8,7,6),NJ
    6 PX = PX*BX
      PY = PY*BY
      PZ = PZ*BZ
    7 PX = PX*BX
      PY = PY*BY
      PZ = PZ*BZ
    8 PX = PX*BX
      PY = PY*BY
      PZ = PZ*BZ
    9 PX = PX*BX
      PY = PY*BY
      PZ = PZ*BZ
   10 DUM = W(I)
      XINT = XINT+DUM*PX
      YINT = YINT+DUM*PY
      ZINT = ZINT+DUM*PZ
   11 CONTINUE
      RETURN
      END
C*MODULE HSS1  *DECK CPYTSQA
C>
C>    @brief    copy triangle to square
C>
C>    @details  copy teiangle to square
C>
C>    @param  A   matrix input
C>    @param  B   matrix output
C>    @param  NA  number of atom
C>    @param INCA indices
      SUBROUTINE CPYTSQA(A,B,NA,INCA)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION A(*),B(NA,NA)
C
C     ---- COPY TRIANGULAR A TO SQUARE B (NA BY NA) ----
C     THE INCREMENT BETWEEN ELEMENTS OF A WILL USUALLY BE 1.
C
      IJ=1
      DO 200 I=1,NA
         DO 100 J=1,I
            B(I,J) = A(IJ)
            B(J,I) = -A(IJ)
            IJ = IJ + INCA
  100    CONTINUE
  200 CONTINUE
      RETURN
      END

